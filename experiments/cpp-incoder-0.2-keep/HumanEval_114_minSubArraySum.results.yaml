name: HumanEval_114_minSubArraySum
language: cpp
results:
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Write your code here\n\
    \    long min = std::numeric_limits<long>::max();\n    long sum = 0;\n    for\
    \ (long i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n        if (sum\
    \ < min) {\n            min = sum;\n        }\n    }\n    return min;\n}\nint\
    \ main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpbm4v06d7: /tmp/tmpbm4v06d7.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Write your code here\n\
    \    long min = INT_MAX;\n    long sum = 0;\n    long n = nums.size();\n    long\
    \ i = 0;\n    long j = 0;\n    long k = 0;\n    while (i < n) {\n        sum =\
    \ sum + nums[i];\n        i++;\n    }\n    while (j < n) {\n        sum = sum\
    \ + nums[j];\n        j++;\n    }\n    while (k < n) {\n        sum = sum + nums[k];\n\
    \        k++;\n    }\n    if (sum < min) {\n        min = sum;\n    }\n    return\
    \ min;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmprjudfu78: /tmp/tmprjudfu78.cpp:35: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long min = std::numeric_limits<long>::max();\n\
    \    long sum = 0;\n    for (long i = 0; i < nums.size(); i++) {\n        sum\
    \ += nums[i];\n        if (sum < min) {\n            min = sum;\n        }\n \
    \   }\n    return min;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpi4y0tk45: /tmp/tmpi4y0tk45.cpp:21: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long sum = 0;\n    long min = INT_MAX;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min) {\n            min =\
    \ sum;\n        }\n    }\n    return min;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpcb86nupt: /tmp/tmpcb86nupt.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long ans = INT_MAX;\n\
    \    long sum = 0;\n    for (long i = 0; i < nums.size(); i++) {\n        sum\
    \ += nums[i];\n        if (sum < ans) {\n            ans = sum;\n        }\n \
    \   }\n    return ans;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpbd7inww2: /tmp/tmpbd7inww2.cpp:21: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long min = INT_MAX;\n    for (long i = 0; i < nums.size(); i++) {\n      \
    \  min = std::min(min, nums[i]);\n    }\n    return min;\n}\nint main() {\n  \
    \  auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpyehge_fb: /tmp/tmpyehge_fb.cpp:19: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long min = INT_MAX;\n    for (long i = 0; i < nums.size(); i++) {\n      \
    \  long sum = 0;\n        for (long j = i; j < nums.size(); j++) {\n         \
    \   sum += nums[j];\n            if (sum < min) {\n                min = sum;\n\
    \            }\n        }\n    }\n    return min;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long ans = nums[0];\n\
    \    for (long i = 1; i < nums.size(); i++) {\n        ans = std::min(ans, nums[i]\
    \ + nums[i - 1]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmppssjc0fh: /tmp/tmppssjc0fh.cpp:17: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long min = INT_MAX;\n    long sum = 0;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min) {\n            min =\
    \ sum;\n        }\n    }\n    return min;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpr_c33w8g: /tmp/tmpr_c33w8g.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long ans = nums[0];\n\
    \    for (long i = 1; i < nums.size(); i++) {\n        ans = std::min(ans, nums[i]\
    \ + nums[i - 1]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpxzn8i6gg: /tmp/tmpxzn8i6gg.cpp:17: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long ans = INT_MAX;\n\
    \    for (long i = 0; i < nums.size(); i++) {\n        long curr = nums[i];\n\
    \        long min = INT_MAX;\n        for (long j = i; j < nums.size(); j++) {\n\
    \            long next = nums[j];\n            min = std::min(min, curr + next);\n\
    \        }\n        ans = std::min(ans, min);\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpllz3kf67: /tmp/tmpllz3kf67.cpp:23: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long sum = 0;\n    long min = INT_MAX;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min) {\n            min =\
    \ sum;\n        }\n    }\n    return min;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp3mjun0my: /tmp/tmp3mjun0my.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long sum = 0;\n    long\
    \ min = std::numeric_limits<long>::max();\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min) {\n            min =\
    \ sum;\n        }\n    }\n    return min;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpr8vwoqzu: /tmp/tmpr8vwoqzu.cpp:21: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long ans = INT_MAX;\n\
    \    long sum = 0;\n    for (long i = 0; i < nums.size(); i++) {\n        sum\
    \ += nums[i];\n        if (sum < ans) {\n            ans = sum;\n        }\n \
    \   }\n    return ans;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpdzdybn8l: /tmp/tmpdzdybn8l.cpp:21: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long min = INT_MAX;\n    long sum = 0;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min) {\n            min =\
    \ sum;\n        }\n    }\n    return min;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpyubi9ath: /tmp/tmpyubi9ath.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Write your code here\n\
    \    long ans = nums[0];\n    for(long i = 1; i < nums.size(); i++) {\n      \
    \  ans = std::min(ans, nums[i] + nums[i - 1]);\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmplyhat453: /tmp/tmplyhat453.cpp:18: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long sum = 0;\n    long min = INT_MAX;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min) {\n            min =\
    \ sum;\n        }\n    }\n    return min;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp2wmvdksj: /tmp/tmp2wmvdksj.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long sum = 0;\n    long minSum = std::numeric_limits<long>::max();\n    for\
    \ (long i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n        if (sum\
    \ < minSum) {\n            minSum = sum;\n        }\n    }\n    return minSum;\n\
    }\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpt290rd03: /tmp/tmpt290rd03.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long min = std::numeric_limits<long>::max();\n    long sum = 0;\n    long\
    \ n = nums.size();\n    long i = 0;\n    while(i < n){\n        sum += nums[i];\n\
    \        if(sum < min){\n            min = sum;\n        }\n        i++;\n   \
    \ }\n    return min;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpk3s31yfi: /tmp/tmpk3s31yfi.cpp:25: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long sum = 0;\n    long min = INT_MAX;\n    long max = INT_MIN;\n    for (long\
    \ i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n        if (sum < min)\n\
    \            min = sum;\n        if (sum > max)\n            max = sum;\n    }\n\
    \    return max;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpmvn9nv0u: /tmp/tmpmvn9nv0u.cpp:24: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long sum = 0;\n    long min = INT_MAX;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min) {\n            min =\
    \ sum;\n        }\n    }\n    return min;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpjy3o3q7v: /tmp/tmpjy3o3q7v.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long sum = 0;\n    long min = INT_MAX;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min) {\n            min =\
    \ sum;\n        }\n    }\n    return min;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpck2t2fsd: /tmp/tmpck2t2fsd.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long sum = 0;\n    long min = INT_MAX;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min) {\n            min =\
    \ sum;\n        }\n    }\n    return min;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp5g6a26p5: /tmp/tmp5g6a26p5.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long sum = 0;\n    long\
    \ min = INT_MAX;\n    for (long i = 0; i < nums.size(); i++) {\n        sum +=\
    \ nums[i];\n        if (sum < min) {\n            min = sum;\n        }\n    }\n\
    \    return min;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmptcq533o3: /tmp/tmptcq533o3.cpp:21: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long sum = 0;\n    long minSum = INT_MAX;\n    long minIndex = -1;\n    for\
    \ (long i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n        if (sum\
    \ < minSum) {\n            minSum = sum;\n            minIndex = i;\n        }\n\
    \    }\n    return minSum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpu8ybddqo: /tmp/tmpu8ybddqo.cpp:24: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Write your code here\n\
    \    long min = INT_MAX;\n    long sum = 0;\n    long count = 0;\n    for (long\
    \ i = 0; i < nums.size(); i++) {\n        if (nums[i] > 0) {\n            sum\
    \ += nums[i];\n            count++;\n        }\n    }\n    if (count > 0) {\n\
    \        min = sum / count;\n    }\n    return min;\n}\nint main() {\n    auto\
    \ candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3,\
    \ 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) ==\
    \ (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpskveh5zy: /tmp/tmpskveh5zy.cpp:26: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long minSum = INT_MIN;\n    long sum = 0;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < minSum) {\n            minSum\
    \ = sum;\n        }\n    }\n    return minSum;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmptk716cxi: /tmp/tmptk716cxi.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long ans = nums[0];\n\
    \    long sum = 0;\n    for (long i = 0; i < nums.size(); i++) {\n        sum\
    \ += nums[i];\n        if (sum < ans) {\n            ans = sum;\n        }\n \
    \   }\n    return ans;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpngfw0yal: /tmp/tmpngfw0yal.cpp:21: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long ans = nums[0];\n\
    \    for (long i = 0; i < nums.size(); i++) {\n        ans = std::min(ans, nums[i]\
    \ + minSubArraySum(nums.subvector(i + 1, nums.size())));\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "/tmp/tmptnt51yav.cpp: In function \u2018long int minSubArraySum(std::vector<long\
    \ int>)\u2019:\n/tmp/tmptnt51yav.cpp:11:59: error: \u2018class std::vector<long\
    \ int>\u2019 has no member named \u2018subvector\u2019; did you mean \u2018vector\u2019\
    ?\n   11 |         ans = std::min(ans, nums[i] + minSubArraySum(nums.subvector(i\
    \ + 1, nums.size())));\n      |                                              \
    \             ^~~~~~~~~\n      |                                             \
    \              vector\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long sum = 0;\n    long min = std::numeric_limits<long>::max();\n    for (long\
    \ i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n        if (sum < min)\
    \ {\n            min = sum;\n        }\n    }\n    return min;\n}\nint main()\
    \ {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpawk4z_y4: /tmp/tmpawk4z_y4.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long sum = 0;\n    long min = INT_MAX;\n    long max = INT_MIN;\n    for (long\
    \ i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n        if (sum < min)\
    \ {\n            min = sum;\n        }\n        if (sum > max) {\n           \
    \ max = sum;\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpeswf4jr4: /tmp/tmpeswf4jr4.cpp:26: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Write your code here\n\
    \    long sum = 0;\n    long min = INT_MAX;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min) {\n            min =\
    \ sum;\n        }\n    }\n    return min;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpwiyqsb5f: /tmp/tmpwiyqsb5f.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long ans = nums[0];\n\
    \    for (long i = 1; i < nums.size(); i++) {\n        ans = min(ans, nums[i]\
    \ + nums[i - 1]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpw1gzr8tr.cpp: In function \u2018long int minSubArraySum(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpw1gzr8tr.cpp:11:15: error: \u2018min\u2019 was not declared\
    \ in this scope; did you mean \u2018std::min\u2019?\n   11 |         ans = min(ans,\
    \ nums[i] + nums[i - 1]);\n      |               ^~~\n      |               std::min\n\
    In file included from /usr/include/c++/9/algorithm:62,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n                 from\
    \ /tmp/tmpw1gzr8tr.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3456:5: note: \u2018\
    std::min\u2019 declared here\n 3456 |     min(initializer_list<_Tp> __l, _Compare\
    \ __comp)\n      |     ^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long ans = nums[0];\n\
    \    long sum = nums[0];\n    long i = 0;\n    while (i < nums.size()) {\n   \
    \     sum += nums[i];\n        if (sum < ans) {\n            ans = sum;\n    \
    \    }\n        i++;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp7z5ndbqn: /tmp/tmp7z5ndbqn.cpp:23: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Write your code here\n\
    \    long min = INT_MAX;\n    long sum = 0;\n    long sumOfSubArray = 0;\n   \
    \ long count = 0;\n    for (long i = 0; i < nums.size(); i++) {\n        sum +=\
    \ nums[i];\n        if (sum < min) {\n            min = sum;\n        }\n    \
    \    if (sum == min) {\n            sumOfSubArray += nums[i];\n            count++;\n\
    \        }\n    }\n    return sumOfSubArray;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp7plfz80n: /tmp/tmp7plfz80n.cpp:28: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long sum = 0;\n    long min = INT_MAX;\n    long max = INT_MIN;\n    for (long\
    \ i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n        if (sum < min)\n\
    \            min = sum;\n        if (sum > max)\n            max = sum;\n    }\n\
    \    return max;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpz35wdfa8: /tmp/tmpz35wdfa8.cpp:24: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long ans = INT_MAX;\n\
    \    for (long i = 0; i < nums.size(); i++) {\n        long curSum = nums[i];\n\
    \        for (long j = i + 1; j < nums.size(); j++) {\n            curSum += nums[j];\n\
    \            if (curSum < ans) {\n                ans = curSum;\n            }\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpzmlv_zu6: /tmp/tmpzmlv_zu6.cpp:23: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long ans = INT_MAX;\n\
    \    long sum = 0;\n    for (long i = 0; i < nums.size(); i++) {\n        sum\
    \ += nums[i];\n        if (sum < ans) {\n            ans = sum;\n        }\n \
    \   }\n    return ans;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp2dnsmy09: /tmp/tmp2dnsmy09.cpp:21: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long ans = INT_MIN;\n    long sum = 0;\n    for (auto i : nums) {\n      \
    \  sum += i;\n        if (sum < ans) {\n            ans = sum;\n        }\n  \
    \  }\n    return ans;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpu5ttf04w: /tmp/tmpu5ttf04w.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long sum = 0;\n    long\
    \ min = INT_MAX;\n    for (long i = 0; i < nums.size(); i++) {\n        sum +=\
    \ nums[i];\n        if (sum < min) {\n            min = sum;\n        }\n    }\n\
    \    return min;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpq49qk43g: /tmp/tmpq49qk43g.cpp:21: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Write your code here\n\
    \    long sum = 0;\n    long min = INT_MAX;\n    for(long i = 0; i < nums.size();\
    \ i++){\n        sum += nums[i];\n        if(sum < min){\n            min = sum;\n\
    \        }\n    }\n    return min;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpk5vu1wui: /tmp/tmpk5vu1wui.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long ans = INT_MAX;\n\
    \    long sum = 0;\n    for (long i = 0; i < nums.size(); i++) {\n        sum\
    \ += nums[i];\n        if (sum < ans) {\n            ans = sum;\n        }\n \
    \   }\n    return ans;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpcyufzsd2: /tmp/tmpcyufzsd2.cpp:21: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long sum = 0;\n    long min = INT_MAX;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min) {\n            min =\
    \ sum;\n        }\n    }\n    return min;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp5tfl4q9p: /tmp/tmp5tfl4q9p.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long ans = INT_MAX;\n\
    \    for (long i = 0; i < nums.size(); i++) {\n        long sum = 0;\n       \
    \ for (long j = 0; j < nums.size(); j++) {\n            if (i != j) {\n      \
    \          sum += nums[j];\n            }\n        }\n        if (sum < ans) {\n\
    \            ans = sum;\n        }\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpygdzxlh9: /tmp/tmpygdzxlh9.cpp:25: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long ans = nums[0];\n\
    \    for (long i = 1; i < nums.size(); i++) {\n        ans = std::min(ans, nums[i]\
    \ + nums[i - 1]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpnl7sv046: /tmp/tmpnl7sv046.cpp:17: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long sum = 0;\n    long minSum = std::numeric_limits<long>::max();\n    for\
    \ (long i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n        if (sum\
    \ < minSum) {\n            minSum = sum;\n        }\n    }\n    return minSum;\n\
    }\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpgonl50ms: /tmp/tmpgonl50ms.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long sum = 0;\n    long min = INT_MAX;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min) {\n            min =\
    \ sum;\n        }\n    }\n    return min;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp7ljx5_jo: /tmp/tmp7ljx5_jo.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long min = INT_MAX;\n    for (long i = 0; i < nums.size(); i++) {\n      \
    \  long sum = 0;\n        for (long j = 0; j < nums.size(); j++) {\n         \
    \   sum += nums[j];\n            if (sum < min) {\n                min = sum;\n\
    \            }\n        }\n    }\n    return min;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp8uqo542d: /tmp/tmp8uqo542d.cpp:24: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long sum = 0;\n    long min = INT_MAX;\n    long max = INT_MIN;\n    long\
    \ mid = 0;\n    for (long i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n\
    \        if (sum < min) {\n            min = sum;\n        }\n        if (sum\
    \ > max) {\n            max = sum;\n        }\n    }\n    mid = (min + max) /\
    \ 2;\n    long sum2 = 0;\n    for (long i = 0; i < nums.size(); i++) {\n     \
    \   sum2 += nums[i];\n        if (sum2 < mid) {\n            mid = sum2;\n   \
    \     }\n    }\n    return mid;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpr14pl90f: /tmp/tmpr14pl90f.cpp:35: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long minSum = nums[0];\n    long sum = 0;\n    for(long i = 0; i < nums.size();\
    \ i++){\n        sum += nums[i];\n        if(sum < minSum){\n            minSum\
    \ = sum;\n        }\n    }\n    return minSum;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp4y7hyo2v: /tmp/tmp4y7hyo2v.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long ans = nums[0];\n\
    \    long sum = 0;\n    for (long i = 0; i < nums.size(); i++) {\n        sum\
    \ += nums[i];\n        if (sum < ans)\n            ans = sum;\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpqzuwtnwt: /tmp/tmpqzuwtnwt.cpp:20: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long min = INT_MAX;\n    long sum = 0;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min) {\n            min =\
    \ sum;\n        }\n    }\n    return min;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp68nh9xt4: /tmp/tmp68nh9xt4.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long min = INT_MAX;\n\
    \    long sum = 0;\n    for (long i = 0; i < nums.size(); i++) {\n        sum\
    \ += nums[i];\n        if (sum < min) {\n            min = sum;\n        }\n \
    \   }\n    return min;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmppn5475xe: /tmp/tmppn5475xe.cpp:21: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long minSum = std::numeric_limits<long>::max();\n    long sum = 0;\n    for\
    \ (long i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n        if (sum\
    \ < minSum) {\n            minSum = sum;\n        }\n    }\n    return minSum;\n\
    }\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmps3txcq31: /tmp/tmps3txcq31.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long sum = 0;\n    for\
    \ (long i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp90tshnjd: /tmp/tmp90tshnjd.cpp:17: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long sum = 0;\n    long\
    \ min = std::numeric_limits<long>::max();\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min) {\n            min =\
    \ sum;\n        }\n    }\n    return min;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp61aq8jo3: /tmp/tmp61aq8jo3.cpp:21: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long sum = 0;\n    long min = INT_MAX;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min) {\n            min =\
    \ sum;\n        }\n    }\n    return min;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp8iz_nxre: /tmp/tmp8iz_nxre.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long sum = 0;\n    long min = INT_MAX;\n    long max = INT_MIN;\n    for (long\
    \ i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n        if (sum < min)\
    \ {\n            min = sum;\n        }\n        if (sum > max) {\n           \
    \ max = sum;\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp2u6n561o: /tmp/tmp2u6n561o.cpp:26: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long sum = 0;\n    long min = INT_MAX;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min) {\n            min =\
    \ sum;\n        }\n    }\n    return min;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp0mzqqa4r: /tmp/tmp0mzqqa4r.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long min = INT_MAX;\n\
    \    for (long i = 0; i < nums.size(); i++) {\n        min = std::min(min, nums[i]);\n\
    \    }\n    return min;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpe3galkxn: /tmp/tmpe3galkxn.cpp:18: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long sum = 0;\n    long min = INT_MAX;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min) {\n            min =\
    \ sum;\n        }\n    }\n    return min;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpd7f9ssmc: /tmp/tmpd7f9ssmc.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long ans = INT_MAX;\n\
    \    long sum = 0;\n    for (long i : nums) {\n        sum += i;\n        if (sum\
    \ < ans) {\n            ans = sum;\n        }\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp980kzd6o: /tmp/tmp980kzd6o.cpp:21: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Write your code here\n\
    \    long sum = 0;\n    long min = INT_MAX;\n    long max = INT_MIN;\n    for\
    \ (long i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n        if (sum\
    \ < min) {\n            min = sum;\n        }\n        if (sum > max) {\n    \
    \        max = sum;\n        }\n    }\n    return max;\n}\nint main() {\n    auto\
    \ candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3,\
    \ 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) ==\
    \ (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp7zdkgpft: /tmp/tmp7zdkgpft.cpp:26: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Write your code here\n\
    \    long min = INT_MAX;\n    long sum = 0;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min) {\n            min =\
    \ sum;\n        }\n    }\n    return min;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpffkbglkc: /tmp/tmpffkbglkc.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long min = std::numeric_limits<long>::max();\n\
    \    long sum = 0;\n    for (long i = 0; i < nums.size(); i++) {\n        sum\
    \ += nums[i];\n        if (sum < min) {\n            min = sum;\n        }\n \
    \   }\n    return min;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpoekdott2: /tmp/tmpoekdott2.cpp:21: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Write your code here\n\
    \    long sum = 0;\n    long min = INT_MAX;\n    long max = INT_MIN;\n    long\
    \ mid = INT_MAX;\n    for (long i = 0; i < nums.size(); i++) {\n        sum +=\
    \ nums[i];\n        if (sum < min) {\n            min = sum;\n        }\n    \
    \    if (sum > max) {\n            max = sum;\n        }\n        if (sum == max)\
    \ {\n            mid = i;\n        }\n    }\n    return mid;\n}\nint main() {\n\
    \    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpe5wfyg00: /tmp/tmpe5wfyg00.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long sum = 0;\n    long min = INT_MAX;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min) {\n            min =\
    \ sum;\n        }\n    }\n    return min;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp4xi306bc: /tmp/tmp4xi306bc.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long ans = INT_MAX;\n    long sum = 0;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < ans) {\n            ans =\
    \ sum;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp58rbkgdp: /tmp/tmp58rbkgdp.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long ans = nums[0];\n\
    \    long sum = 0;\n    for (long i = 0; i < nums.size(); i++) {\n        sum\
    \ += nums[i];\n        if (sum < ans) {\n            ans = sum;\n        }\n \
    \   }\n    return ans;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp7umohrav: /tmp/tmp7umohrav.cpp:21: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long ans = INT_MIN;\n    for (long i = 0; i < nums.size(); i++) {\n      \
    \  long sum = 0;\n        for (long j = 0; j < nums.size(); j++) {\n         \
    \   if (i != j) {\n                sum += nums[j];\n            }\n        }\n\
    \        if (sum < ans) {\n            ans = sum;\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp51wtmvb5: /tmp/tmp51wtmvb5.cpp:26: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long sum = 0;\n    long minSum = std::numeric_limits<long>::max();\n    for\
    \ (long i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n        if (sum\
    \ < minSum) {\n            minSum = sum;\n        }\n    }\n    return minSum;\n\
    }\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp94mqt6ns: /tmp/tmp94mqt6ns.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long ans = INT_MAX;\n\
    \    for (auto &num : nums) {\n        ans = min(ans, num + minSubArraySum(nums));\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3okn7cvo.cpp: In function \u2018long int minSubArraySum(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp3okn7cvo.cpp:11:15: error: \u2018min\u2019 was not declared\
    \ in this scope; did you mean \u2018std::min\u2019?\n   11 |         ans = min(ans,\
    \ num + minSubArraySum(nums));\n      |               ^~~\n      |           \
    \    std::min\nIn file included from /usr/include/c++/9/algorithm:62,\n      \
    \           from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n     \
    \            from /tmp/tmp3okn7cvo.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3456:5:\
    \ note: \u2018std::min\u2019 declared here\n 3456 |     min(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Write your code here\n\
    \    long sum = 0;\n    long min = INT_MAX;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min) {\n            min =\
    \ sum;\n        }\n    }\n    return min;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp9ludqbdc: /tmp/tmp9ludqbdc.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Write your code here\n\
    \    long sum = 0;\n    long min = INT_MAX;\n    long max = INT_MIN;\n    for\
    \ (long i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n        if (sum\
    \ < min) {\n            min = sum;\n        }\n        if (sum > max) {\n    \
    \        max = sum;\n        }\n    }\n    return max;\n}\nint main() {\n    auto\
    \ candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3,\
    \ 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) ==\
    \ (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpb6yjppti: /tmp/tmpb6yjppti.cpp:26: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long min = INT_MAX;\n\
    \    long sum = 0;\n    for (long i = 0; i < nums.size(); i++) {\n        sum\
    \ += nums[i];\n        if (sum < min) {\n            min = sum;\n        }\n \
    \   }\n    return min;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpgyqvtis0: /tmp/tmpgyqvtis0.cpp:21: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long ans = nums[0];\n\
    \    for (long i = 1; i < nums.size(); i++) {\n        ans = std::min(ans, nums[i]\
    \ + nums[i - 1]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpd3mhdadr: /tmp/tmpd3mhdadr.cpp:17: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long ans = INT_MAX;\n\
    \    long sum = 0;\n    for (auto i : nums) {\n        sum += i;\n        if (sum\
    \ < ans) {\n            ans = sum;\n        }\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpugjf16_o: /tmp/tmpugjf16_o.cpp:21: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Write your code here\n\
    \    long sum = 0;\n    long min = INT_MAX;\n    long max = INT_MIN;\n    for\
    \ (long i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n        if (sum\
    \ < min)\n            min = sum;\n        if (sum > max)\n            max = sum;\n\
    \    }\n    return max;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp0ar_cckb: /tmp/tmp0ar_cckb.cpp:24: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long ans = INT_MAX;\n\
    \    long sum = 0;\n    for (long i = 0; i < nums.size(); i++) {\n        sum\
    \ += nums[i];\n        if (sum < ans)\n            ans = sum;\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpzwchdjtl: /tmp/tmpzwchdjtl.cpp:20: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long ans = nums[0];\n\
    \    long long sum = 0;\n    for (long i = 0; i < nums.size(); i++) {\n      \
    \  sum += nums[i];\n        if (sum < ans) {\n            ans = sum;\n       \
    \ }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpa8ncon1l: /tmp/tmpa8ncon1l.cpp:21: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long sum = 0;\n    long min = INT_MAX;\n    long max = INT_MIN;\n    for (long\
    \ i = 0; i < nums.size(); i++) {\n        if (nums[i] < min) {\n            min\
    \ = nums[i];\n        }\n        if (nums[i] > max) {\n            max = nums[i];\n\
    \        }\n    }\n    for (long i = 0; i < nums.size(); i++) {\n        sum +=\
    \ nums[i];\n        if (sum < min) {\n            min = sum;\n        }\n    \
    \    if (sum > max) {\n            max = sum;\n        }\n    }\n    return min;\n\
    }\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpxpk_gpje: /tmp/tmpxpk_gpje.cpp:40: int main(): Assertion `candidate((std::vector<long>({100,\
    \ -1, -2, -3, 10, -5}))) == (-6)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long min = INT_MAX;\n\
    \    long sum = 0;\n    long n = nums.size();\n    long i = 0;\n    long j = 0;\n\
    \    while (i < n) {\n        sum += nums[i];\n        if (sum < min) {\n    \
    \        min = sum;\n        }\n        i++;\n    }\n    while (j < n) {\n   \
    \     sum += nums[j];\n        if (sum < min) {\n            min = sum;\n    \
    \    }\n        j++;\n    }\n    return min;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpye659zww: /tmp/tmpye659zww.cpp:32: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long min = INT_MAX;\n    for (long i = 0; i < nums.size(); i++) {\n      \
    \  min = std::min(min, nums[i]);\n    }\n    return min;\n}\nint main() {\n  \
    \  auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpypu15w8a: /tmp/tmpypu15w8a.cpp:19: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Write your code here\n\
    \    long sum = 0;\n    long min = std::numeric_limits<long>::max();\n    long\
    \ max = std::numeric_limits<long>::min();\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min) {\n            min =\
    \ sum;\n        }\n        if (sum > max) {\n            max = sum;\n        }\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp31_vjzzq: /tmp/tmp31_vjzzq.cpp:26: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long min = INT_MAX;\n    long sum = 0;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min) {\n            min =\
    \ sum;\n        }\n    }\n    return min;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpf4elpzt1: /tmp/tmpf4elpzt1.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long ans = INT_MIN;\n\
    \    for (long i = 0; i < nums.size(); i++) {\n        long sum = 0;\n       \
    \ for (long j = 0; j < nums.size(); j++) {\n            if (i != j) {\n      \
    \          sum += nums[j];\n            }\n        }\n        if (sum < ans) {\n\
    \            ans = sum;\n        }\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp4f3qhfhe: /tmp/tmp4f3qhfhe.cpp:25: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long ans = nums[0];\n    for(long i = 1; i < nums.size(); i++) {\n       \
    \ ans = std::min(ans, nums[i] + nums[i - 1]);\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpgwrbecdi: /tmp/tmpgwrbecdi.cpp:18: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Write your code here\n\
    \    long sum = 0;\n    long min = INT_MAX;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min) {\n            min =\
    \ sum;\n        }\n    }\n    return min;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpha6brw_g: /tmp/tmpha6brw_g.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long ans = INT_MAX;\n\
    \    for (long i = 0; i < nums.size(); i++) {\n        long sum = 0;\n       \
    \ for (long j = 0; j < nums.size(); j++) {\n            if (j != i) {\n      \
    \          sum += nums[j];\n            }\n        }\n        if (sum < ans) {\n\
    \            ans = sum;\n        }\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpekd_6200: /tmp/tmpekd_6200.cpp:25: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Write your code here\n\
    \    long sum = 0;\n    long min = INT_MAX;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min) {\n            min =\
    \ sum;\n        }\n    }\n    return min;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpxt9r624m: /tmp/tmpxt9r624m.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long ans = INT_MIN;\n\
    \    long sum = 0;\n    for (long i = 0; i < nums.size(); i++) {\n        sum\
    \ += nums[i];\n        if (sum < ans)\n            ans = sum;\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpvuztwrds: /tmp/tmpvuztwrds.cpp:20: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long sum = 0;\n    long min = INT_MAX;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min) {\n            min =\
    \ sum;\n        }\n    }\n    return min;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpwgvd0tcl: /tmp/tmpwgvd0tcl.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long minSum = std::numeric_limits<long>::max();\n\
    \    long sum = 0;\n    for (long i = 0; i < nums.size(); i++) {\n        sum\
    \ += nums[i];\n        if (sum < minSum) {\n            minSum = sum;\n      \
    \  }\n    }\n    return minSum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpl6g6ag6k: /tmp/tmpl6g6ag6k.cpp:21: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long ans = nums[0];\n\
    \    for (long i = 1; i < nums.size(); i++) {\n        ans = min(ans, nums[i]\
    \ + nums[i - 1]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7_hq_3uz.cpp: In function \u2018long int minSubArraySum(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp7_hq_3uz.cpp:11:15: error: \u2018min\u2019 was not declared\
    \ in this scope; did you mean \u2018std::min\u2019?\n   11 |         ans = min(ans,\
    \ nums[i] + nums[i - 1]);\n      |               ^~~\n      |               std::min\n\
    In file included from /usr/include/c++/9/algorithm:62,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n                 from\
    \ /tmp/tmp7_hq_3uz.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3456:5: note: \u2018\
    std::min\u2019 declared here\n 3456 |     min(initializer_list<_Tp> __l, _Compare\
    \ __comp)\n      |     ^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long ans = INT_MAX;\n    long sum = 0;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < ans) {\n            ans =\
    \ sum;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpe983gmxy: /tmp/tmpe983gmxy.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long ans = nums[0];\n\
    \    for (long i = 1; i < nums.size(); i++) {\n        ans = min(ans, nums[i]\
    \ + nums[i - 1]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "/tmp/tmptw3ykrtx.cpp: In function \u2018long int minSubArraySum(std::vector<long\
    \ int>)\u2019:\n/tmp/tmptw3ykrtx.cpp:11:15: error: \u2018min\u2019 was not declared\
    \ in this scope; did you mean \u2018std::min\u2019?\n   11 |         ans = min(ans,\
    \ nums[i] + nums[i - 1]);\n      |               ^~~\n      |               std::min\n\
    In file included from /usr/include/c++/9/algorithm:62,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n                 from\
    \ /tmp/tmptw3ykrtx.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3456:5: note: \u2018\
    std::min\u2019 declared here\n 3456 |     min(initializer_list<_Tp> __l, _Compare\
    \ __comp)\n      |     ^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Write your code here\n\
    \    long sum = 0;\n    long min = INT_MAX;\n    long max = INT_MIN;\n    for(long\
    \ i = 0; i < nums.size(); i++){\n        sum += nums[i];\n        if(sum < min){\n\
    \            min = sum;\n        }\n        if(sum > max){\n            max =\
    \ sum;\n        }\n    }\n    return min;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp3kmmds0a: /tmp/tmp3kmmds0a.cpp:26: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long sum = 0;\n    long\
    \ minSum = std::numeric_limits<long>::max();\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < minSum) {\n            minSum\
    \ = sum;\n        }\n    }\n    return minSum;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpwsn_obd2: /tmp/tmpwsn_obd2.cpp:21: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long ans = INT_MIN;\n\
    \    for (long i = 0; i < nums.size(); i++) {\n        long curr = nums[i];\n\
    \        for (long j = i + 1; j < nums.size(); j++) {\n            long next =\
    \ nums[j];\n            ans = min(ans, curr + next);\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4ilwxd1e.cpp: In function \u2018long int minSubArraySum(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp4ilwxd1e.cpp:14:19: error: \u2018min\u2019 was not declared\
    \ in this scope; did you mean \u2018std::min\u2019?\n   14 |             ans =\
    \ min(ans, curr + next);\n      |                   ^~~\n      |             \
    \      std::min\nIn file included from /usr/include/c++/9/algorithm:62,\n    \
    \             from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n   \
    \              from /tmp/tmp4ilwxd1e.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3456:5:\
    \ note: \u2018std::min\u2019 declared here\n 3456 |     min(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Write your code here\n\
    \    long minSum = nums[0];\n    long sum = 0;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < minSum) {\n            minSum\
    \ = sum;\n        }\n    }\n    return minSum;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpiyb6hoxi: /tmp/tmpiyb6hoxi.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long ans = nums[0];\n\
    \    for (long i = 0; i < nums.size(); i++) {\n        ans = std::min(ans, nums[i]\
    \ + minSubArraySum(nums.substr(i + 1, nums.size() - i)));\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvs7ovr3o.cpp: In function \u2018long int minSubArraySum(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpvs7ovr3o.cpp:11:59: error: \u2018class std::vector<long\
    \ int>\u2019 has no member named \u2018substr\u2019\n   11 |         ans = std::min(ans,\
    \ nums[i] + minSubArraySum(nums.substr(i + 1, nums.size() - i)));\n      |   \
    \                                                        ^~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long minSum = std::numeric_limits<long>::max();\n    long sum = 0;\n    for\
    \ (long i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n        if (sum\
    \ < minSum) {\n            minSum = sum;\n        }\n    }\n    return minSum;\n\
    }\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp4o_su2j4: /tmp/tmp4o_su2j4.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long ans = nums[0];\n\
    \    long sum = 0;\n    for (long i = 0; i < nums.size(); i++) {\n        sum\
    \ += nums[i];\n        if (sum < ans) {\n            ans = sum;\n        }\n \
    \   }\n    return ans;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp3lqjhvnh: /tmp/tmp3lqjhvnh.cpp:21: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Write your code here\n\
    \    long sum = 0;\n    long min = INT_MAX;\n    long max = INT_MIN;\n    for\
    \ (long i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n        if (sum\
    \ < min) {\n            min = sum;\n        }\n        if (sum > max) {\n    \
    \        max = sum;\n        }\n    }\n    return max;\n}\nint main() {\n    auto\
    \ candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3,\
    \ 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) ==\
    \ (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpoi9n52bf: /tmp/tmpoi9n52bf.cpp:26: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Write your code here\n\
    \    long sum = 0;\n    long min = INT_MAX;\n    long max = INT_MIN;\n    for\
    \ (long i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n        if (sum\
    \ < min)\n            min = sum;\n        if (sum > max)\n            max = sum;\n\
    \    }\n    return max;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp6c3xnax9: /tmp/tmp6c3xnax9.cpp:24: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long sum = 0;\n    long min = INT_MAX;\n    long max = INT_MIN;\n    for (long\
    \ i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n        if (sum < min)\
    \ {\n            min = sum;\n        }\n        if (sum > max) {\n           \
    \ max = sum;\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpfb20u19n: /tmp/tmpfb20u19n.cpp:26: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long min = INT_MAX;\n    long sum = 0;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min) {\n            min =\
    \ sum;\n        }\n    }\n    return min;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpmkbos0sw: /tmp/tmpmkbos0sw.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long long ans = INT_MIN;\n\
    \    long long sum = 0;\n    for(long long i = 0; i < nums.size(); i++) {\n  \
    \      sum += nums[i];\n        if(sum < ans) {\n            ans = sum;\n    \
    \    }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp5ehkieel: /tmp/tmp5ehkieel.cpp:21: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long ans = nums[0];\n\
    \    long sum = nums[0];\n    for (long i = 1; i < nums.size(); i++) {\n     \
    \   sum += nums[i];\n        if (sum < ans) {\n            ans = sum;\n      \
    \  }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmps9n6yort: /tmp/tmps9n6yort.cpp:21: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long ans = nums[0];\n\
    \    for (long i = 1; i < nums.size(); i++) {\n        ans = std::min(ans, nums[i]\
    \ + nums[i - 1]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp97byen9a: /tmp/tmp97byen9a.cpp:17: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long ans = nums[0];\n    for(long i = 1; i < nums.size(); i++){\n        ans\
    \ = std::min(ans, nums[i] + nums[i - 1]);\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpo3re3pa3: /tmp/tmpo3re3pa3.cpp:18: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Write your code here\n\
    \    long sum = 0;\n    long min = INT_MAX;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min) {\n            min =\
    \ sum;\n        }\n    }\n    return min;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpuon76omh: /tmp/tmpuon76omh.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long long ans = nums[0];\n\
    \    for (long long i = 0; i < nums.size(); i++) {\n        ans = std::min(ans,\
    \ nums[i] + nums[nums.size() - i - 1]);\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpqphwmb5v.cpp: In function \u2018long int minSubArraySum(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpqphwmb5v.cpp:11:64: error: no matching function for call\
    \ to \u2018min(long long int&, __gnu_cxx::__alloc_traits<std::allocator<long int>,\
    \ long int>::value_type)\u2019\n   11 |         ans = std::min(ans, nums[i] +\
    \ nums[nums.size() - i - 1]);\n      |                                       \
    \                         ^\nIn file included from /usr/include/c++/9/bits/char_traits.h:39,\n\
    \                 from /usr/include/c++/9/ios:40,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpqphwmb5v.cpp:2:\n/usr/include/c++/9/bits/stl_algobase.h:198:5: note:\
    \ candidate: \u2018template<class _Tp> constexpr const _Tp& std::min(const _Tp&,\
    \ const _Tp&)\u2019\n  198 |     min(const _Tp& __a, const _Tp& __b)\n      |\
    \     ^~~\n/usr/include/c++/9/bits/stl_algobase.h:198:5: note:   template argument\
    \ deduction/substitution failed:\n/tmp/tmpqphwmb5v.cpp:11:64: note:   deduced\
    \ conflicting types for parameter \u2018const _Tp\u2019 (\u2018long long int\u2019\
    \ and \u2018__gnu_cxx::__alloc_traits<std::allocator<long int>, long int>::value_type\u2019\
    \ {aka \u2018long int\u2019})\n   11 |         ans = std::min(ans, nums[i] + nums[nums.size()\
    \ - i - 1]);\n      |                                                        \
    \        ^\nIn file included from /usr/include/c++/9/bits/char_traits.h:39,\n\
    \                 from /usr/include/c++/9/ios:40,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpqphwmb5v.cpp:2:\n/usr/include/c++/9/bits/stl_algobase.h:246:5: note:\
    \ candidate: \u2018template<class _Tp, class _Compare> constexpr const _Tp& std::min(const\
    \ _Tp&, const _Tp&, _Compare)\u2019\n  246 |     min(const _Tp& __a, const _Tp&\
    \ __b, _Compare __comp)\n      |     ^~~\n/usr/include/c++/9/bits/stl_algobase.h:246:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpqphwmb5v.cpp:11:64:\
    \ note:   deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018\
    long long int\u2019 and \u2018__gnu_cxx::__alloc_traits<std::allocator<long int>,\
    \ long int>::value_type\u2019 {aka \u2018long int\u2019})\n   11 |         ans\
    \ = std::min(ans, nums[i] + nums[nums.size() - i - 1]);\n      |             \
    \                                                   ^\nIn file included from /usr/include/c++/9/algorithm:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpqphwmb5v.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3450:5:\
    \ note: candidate: \u2018template<class _Tp> constexpr _Tp std::min(std::initializer_list<_Tp>)\u2019\
    \n 3450 |     min(initializer_list<_Tp> __l)\n      |     ^~~\n/usr/include/c++/9/bits/stl_algo.h:3450:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpqphwmb5v.cpp:11:64:\
    \ note:   mismatched types \u2018std::initializer_list<_Tp>\u2019 and \u2018long\
    \ long int\u2019\n   11 |         ans = std::min(ans, nums[i] + nums[nums.size()\
    \ - i - 1]);\n      |                                                        \
    \        ^\nIn file included from /usr/include/c++/9/algorithm:62,\n         \
    \        from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n        \
    \         from /tmp/tmpqphwmb5v.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3456:5:\
    \ note: candidate: \u2018template<class _Tp, class _Compare> constexpr _Tp std::min(std::initializer_list<_Tp>,\
    \ _Compare)\u2019\n 3456 |     min(initializer_list<_Tp> __l, _Compare __comp)\n\
    \      |     ^~~\n/usr/include/c++/9/bits/stl_algo.h:3456:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmpqphwmb5v.cpp:11:64: note: \
    \  mismatched types \u2018std::initializer_list<_Tp>\u2019 and \u2018long long\
    \ int\u2019\n   11 |         ans = std::min(ans, nums[i] + nums[nums.size() -\
    \ i - 1]);\n      |                                                          \
    \      ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long min = std::numeric_limits<long>::max();\n    long sum = 0;\n    for (long\
    \ i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n        if (sum < min)\
    \ {\n            min = sum;\n        }\n    }\n    return min;\n}\nint main()\
    \ {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpocarpgud: /tmp/tmpocarpgud.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Write your code here\n\
    \    long sum = 0;\n    long min = INT_MAX;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min) {\n            min =\
    \ sum;\n        }\n    }\n    return min;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpsf1gwikv: /tmp/tmpsf1gwikv.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Write your code here\n\
    \    long sum = 0;\n    long minSum = INT_MAX;\n    long minIndex = -1;\n    for(long\
    \ i = 0; i < nums.size(); i++) {\n        if(sum < nums[i]) {\n            sum\
    \ = nums[i];\n            minIndex = i;\n        }\n    }\n    for(long i = 0;\
    \ i < nums.size(); i++) {\n        if(sum == nums[i]) {\n            sum += minSum;\n\
    \            if(sum < minSum) {\n                minSum = sum;\n             \
    \   minIndex = i;\n            }\n        }\n    }\n    return minSum;\n}\nint\
    \ main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmprl1g193b: /tmp/tmprl1g193b.cpp:32: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Write your code here\n\
    \    long sum = 0;\n    long min = INT_MAX;\n    long max = INT_MIN;\n    for\
    \ (long i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n        if (sum\
    \ < min)\n            min = sum;\n        if (sum > max)\n            max = sum;\n\
    \    }\n    return max;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp2l8d1s7b: /tmp/tmp2l8d1s7b.cpp:24: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long ans = nums[0];\n\
    \    for (long i = 0; i < nums.size(); i++) {\n        ans = std::min(ans, nums[i]\
    \ + minSubArraySum(nums.substr(i + 1)));\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpwttkf8in.cpp: In function \u2018long int minSubArraySum(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpwttkf8in.cpp:11:59: error: \u2018class std::vector<long\
    \ int>\u2019 has no member named \u2018substr\u2019\n   11 |         ans = std::min(ans,\
    \ nums[i] + minSubArraySum(nums.substr(i + 1)));\n      |                    \
    \                                       ^~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long ans = nums[0];\n\
    \    for (long i = 0; i < nums.size(); i++) {\n        ans = std::min(ans, nums[i]\
    \ + minSubArraySum(nums.substr(i + 1)));\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3t9_rt4i.cpp: In function \u2018long int minSubArraySum(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp3t9_rt4i.cpp:11:59: error: \u2018class std::vector<long\
    \ int>\u2019 has no member named \u2018substr\u2019\n   11 |         ans = std::min(ans,\
    \ nums[i] + minSubArraySum(nums.substr(i + 1)));\n      |                    \
    \                                       ^~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long sum = 0;\n    long min = INT_MAX;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min) {\n            min =\
    \ sum;\n        }\n    }\n    return min;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmplxpfu3xv: /tmp/tmplxpfu3xv.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long sum = 0;\n    long min = INT_MAX;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min) {\n            min =\
    \ sum;\n        }\n    }\n    return min;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpbfsx88_v: /tmp/tmpbfsx88_v.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long ans = nums[0];\n\
    \    for (long i = 1; i < nums.size(); i++) {\n        ans = min(ans, nums[i]\
    \ + nums[i - 1]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpz03i2mla.cpp: In function \u2018long int minSubArraySum(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpz03i2mla.cpp:11:15: error: \u2018min\u2019 was not declared\
    \ in this scope; did you mean \u2018std::min\u2019?\n   11 |         ans = min(ans,\
    \ nums[i] + nums[i - 1]);\n      |               ^~~\n      |               std::min\n\
    In file included from /usr/include/c++/9/algorithm:62,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n                 from\
    \ /tmp/tmpz03i2mla.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3456:5: note: \u2018\
    std::min\u2019 declared here\n 3456 |     min(initializer_list<_Tp> __l, _Compare\
    \ __comp)\n      |     ^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long min = INT_MAX;\n    long sum = 0;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min) {\n            min =\
    \ sum;\n        }\n    }\n    return min;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmptwso14o4: /tmp/tmptwso14o4.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long min = INT_MAX;\n\
    \    for (long i = 0; i < nums.size(); i++) {\n        min = std::min(min, nums[i]);\n\
    \    }\n    return min;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpuo7xzts8: /tmp/tmpuo7xzts8.cpp:18: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long min = INT_MAX;\n    long sum = 0;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min) {\n            min =\
    \ sum;\n        }\n    }\n    return min;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmps9zlw2qb: /tmp/tmps9zlw2qb.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long ans = nums[0];\n\
    \    for (long i = 1; i < nums.size(); i++) {\n        ans = std::min(ans, nums[i]\
    \ + nums[i - 1]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmppxyna3pu: /tmp/tmppxyna3pu.cpp:17: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long sum = 0;\n    long min = INT_MAX;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min) {\n            min =\
    \ sum;\n        }\n    }\n    return min;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp2shd5be5: /tmp/tmp2shd5be5.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long minSum = INT_MAX;\n\
    \    long sum = 0;\n    for (long i = 0; i < nums.size(); i++) {\n        sum\
    \ += nums[i];\n        if (sum < minSum) {\n            minSum = sum;\n      \
    \  }\n    }\n    return minSum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpu31_hgk7: /tmp/tmpu31_hgk7.cpp:21: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Write your code here\n\
    \    long sum = 0;\n    long min = INT_MAX;\n    long max = INT_MIN;\n    for\
    \ (long i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n        if (sum\
    \ < min) {\n            min = sum;\n        }\n        if (sum > max) {\n    \
    \        max = sum;\n        }\n    }\n    return max;\n}\nint main() {\n    auto\
    \ candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3,\
    \ 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) ==\
    \ (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpz5ayxl3o: /tmp/tmpz5ayxl3o.cpp:26: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Write your code here\n\
    \    long sum = 0;\n    long min = INT_MAX;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min) {\n            min =\
    \ sum;\n        }\n    }\n    return min;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp9yl227ew: /tmp/tmp9yl227ew.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long ans = nums[0];\n\
    \    for (long i = 1; i < nums.size(); i++) {\n        ans = std::min(ans, nums[i]\
    \ + nums[i - 1]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpnavpxbym: /tmp/tmpnavpxbym.cpp:17: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long sum = 0;\n    long min = std::numeric_limits<long>::max();\n    for (long\
    \ i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n        if (sum < min)\
    \ {\n            min = sum;\n        }\n    }\n    return min;\n}\nint main()\
    \ {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp063roo0m: /tmp/tmp063roo0m.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long minSum = INT_MAX;\n    long sum = 0;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < minSum) {\n            minSum\
    \ = sum;\n        }\n    }\n    return minSum;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpmmmksvc6: /tmp/tmpmmmksvc6.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long long ans = nums[0];\n\
    \    for (long i = 1; i < nums.size(); i++) {\n        ans = min(ans, nums[i]\
    \ + nums[i - 1]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpjkttfxe6.cpp: In function \u2018long int minSubArraySum(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpjkttfxe6.cpp:11:15: error: \u2018min\u2019 was not declared\
    \ in this scope; did you mean \u2018std::min\u2019?\n   11 |         ans = min(ans,\
    \ nums[i] + nums[i - 1]);\n      |               ^~~\n      |               std::min\n\
    In file included from /usr/include/c++/9/algorithm:62,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n                 from\
    \ /tmp/tmpjkttfxe6.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3456:5: note: \u2018\
    std::min\u2019 declared here\n 3456 |     min(initializer_list<_Tp> __l, _Compare\
    \ __comp)\n      |     ^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long ans = nums[0];\n\
    \    for (long i = 1; i < nums.size(); i++) {\n        ans = std::min(ans, nums[i]\
    \ + nums[i - 1]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpsbrj_xpn: /tmp/tmpsbrj_xpn.cpp:17: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Write your code here\n\
    \    long min = INT_MAX;\n    long sum = 0;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min) {\n            min =\
    \ sum;\n        }\n    }\n    return min;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp3i26m9of: /tmp/tmp3i26m9of.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Write your code here\n\
    \    long ans = nums[0];\n    for(long i = 1; i < nums.size(); i++)\n    {\n \
    \       ans = std::min(ans, nums[i] + nums[i - 1]);\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpzfi1n0sj: /tmp/tmpzfi1n0sj.cpp:19: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long ans = INT_MAX;\n\
    \    for (long i = 0; i < nums.size(); i++) {\n        long sum = 0;\n       \
    \ for (long j = 0; j < nums.size(); j++) {\n            if (i != j) {\n      \
    \          sum += nums[j];\n            }\n        }\n        if (sum < ans) {\n\
    \            ans = sum;\n        }\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpav5vil7c: /tmp/tmpav5vil7c.cpp:25: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long ans = INT_MIN;\n    long sum = 0;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < ans) {\n            ans =\
    \ sum;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp3uuaht31: /tmp/tmp3uuaht31.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long ans = INT_MAX;\n\
    \    long sum = 0;\n    for (long i = 0; i < nums.size(); i++) {\n        sum\
    \ += nums[i];\n        if (sum < ans) {\n            ans = sum;\n        }\n \
    \   }\n    return ans;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmphdl_jxr_: /tmp/tmphdl_jxr_.cpp:21: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long min = INT_MAX;\n\
    \    long sum = 0;\n    long n = nums.size();\n    for (int i = 0; i < n; i++)\
    \ {\n        sum += nums[i];\n        if (sum < min) {\n            min = sum;\n\
    \        }\n    }\n    return min;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmprm99nv0h: /tmp/tmprm99nv0h.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Write your code here\n\
    \    long sum = 0;\n    long min = INT_MAX;\n    for(long i = 0; i < nums.size();\
    \ i++){\n        sum += nums[i];\n        if(sum < min){\n            min = sum;\n\
    \        }\n    }\n    return min;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpydtp_kf6: /tmp/tmpydtp_kf6.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long ans = nums[0];\n\
    \    for (long i = 1; i < nums.size(); i++) {\n        ans = min(ans, nums[i]\
    \ + nums[i - 1]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7i_7tz0j.cpp: In function \u2018long int minSubArraySum(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp7i_7tz0j.cpp:11:15: error: \u2018min\u2019 was not declared\
    \ in this scope; did you mean \u2018std::min\u2019?\n   11 |         ans = min(ans,\
    \ nums[i] + nums[i - 1]);\n      |               ^~~\n      |               std::min\n\
    In file included from /usr/include/c++/9/algorithm:62,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n                 from\
    \ /tmp/tmp7i_7tz0j.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3456:5: note: \u2018\
    std::min\u2019 declared here\n 3456 |     min(initializer_list<_Tp> __l, _Compare\
    \ __comp)\n      |     ^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Write your code here\n\
    \    long sum = 0;\n    long min = INT_MAX;\n    long max = INT_MIN;\n    for\
    \ (long i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n        if (sum\
    \ < min) {\n            min = sum;\n        }\n        if (sum > max) {\n    \
    \        max = sum;\n        }\n    }\n    return min;\n}\nint main() {\n    auto\
    \ candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3,\
    \ 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) ==\
    \ (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpnca7ar8o: /tmp/tmpnca7ar8o.cpp:26: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long min = INT_MAX;\n    long sum = 0;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min) {\n            min =\
    \ sum;\n        }\n    }\n    return min;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp59aehz5v: /tmp/tmp59aehz5v.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Write your code here\n\
    \    long ans = INT_MAX;\n    long sum = 0;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < ans) {\n            ans =\
    \ sum;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpivyt1lyf: /tmp/tmpivyt1lyf.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Write your code here\n\
    \    long sum = 0;\n    long min = INT_MAX;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min) {\n            min =\
    \ sum;\n        }\n    }\n    return min;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp5ybrrbzn: /tmp/tmp5ybrrbzn.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long minSum = INT_MIN;\n    long sum = 0;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < minSum) {\n            minSum\
    \ = sum;\n        }\n    }\n    return minSum;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp4jhbfnsu: /tmp/tmp4jhbfnsu.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long min = INT_MAX;\n    for (long i = 0; i < nums.size(); i++) {\n      \
    \  if (nums[i] < min) {\n            min = nums[i];\n        }\n    }\n    return\
    \ min;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp1_ha17iy: /tmp/tmp1_ha17iy.cpp:21: int main(): Assertion `candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long min = std::numeric_limits<long>::max();\n\
    \    long sum = 0;\n    for (long i = 0; i < nums.size(); i++) {\n        sum\
    \ += nums[i];\n        if (sum < min) {\n            min = sum;\n        }\n \
    \   }\n    return min;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpa9_tsk5s: /tmp/tmpa9_tsk5s.cpp:21: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long ans = nums[0];\n\
    \    for (long i = 0; i < nums.size(); i++) {\n        ans = std::min(ans, nums[i]\
    \ + minSubArraySum(nums.substr(i + 1, nums.size() - i)));\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpq10mbwa1.cpp: In function \u2018long int minSubArraySum(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpq10mbwa1.cpp:11:59: error: \u2018class std::vector<long\
    \ int>\u2019 has no member named \u2018substr\u2019\n   11 |         ans = std::min(ans,\
    \ nums[i] + minSubArraySum(nums.substr(i + 1, nums.size() - i)));\n      |   \
    \                                                        ^~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Write your code here\n\
    \    long sum = 0;\n    long minSum = std::numeric_limits<long>::max();\n    for\
    \ (long i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n        if (sum\
    \ < minSum) {\n            minSum = sum;\n        }\n    }\n    return minSum;\n\
    }\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpb0nryram: /tmp/tmpb0nryram.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long minSum = std::numeric_limits<long>::max();\n\
    \    long sum = 0;\n    for (long i = 0; i < nums.size(); i++) {\n        sum\
    \ += nums[i];\n        if (sum < minSum) {\n            minSum = sum;\n      \
    \  }\n    }\n    return minSum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmprm7g0ns2: /tmp/tmprm7g0ns2.cpp:21: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long sum = 0;\n    long min = INT_MAX;\n    for(long i = 0; i < nums.size();\
    \ i++){\n        if(nums[i] < 0){\n            sum += nums[i];\n            min\
    \ = std::min(min, sum);\n        }\n        else{\n            sum += nums[i];\n\
    \        }\n    }\n    return min;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpsnqxcwcn: /tmp/tmpsnqxcwcn.cpp:25: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long ans = nums[0];\n\
    \    for (long i = 1; i < nums.size(); i++) {\n        ans = std::min(ans, nums[i]\
    \ + nums[i - 1]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpevnilz6u: /tmp/tmpevnilz6u.cpp:17: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long sum = 0;\n    long\
    \ min = std::numeric_limits<long>::max();\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min) {\n            min =\
    \ sum;\n        }\n    }\n    return min;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp_c5ivrle: /tmp/tmp_c5ivrle.cpp:21: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long sum = 0;\n    for (long i = 0; i < nums.size(); i++) {\n        sum +=\
    \ nums[i];\n    }\n    return sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpewdefyel: /tmp/tmpewdefyel.cpp:18: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long min = std::numeric_limits<long>::max();\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        long sum = 0;\n        for (long j = 0; j < nums.size(); j++)\
    \ {\n            if (i != j) {\n                sum += nums[j];\n            }\n\
    \        }\n        if (sum < min) {\n            min = sum;\n        }\n    }\n\
    \    return min;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmplezgu9lb: /tmp/tmplezgu9lb.cpp:26: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long ans = INT_MIN;\n\
    \    long sum = 0;\n    for (long i : nums) {\n        sum += i;\n        if (sum\
    \ < ans) {\n            ans = sum;\n        }\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpa_r0anx8: /tmp/tmpa_r0anx8.cpp:21: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long ans = INT_MIN;\n\
    \    for (long i = 0; i < nums.size(); i++) {\n        long curr = nums[i];\n\
    \        for (long j = i + 1; j < nums.size(); j++) {\n            long next =\
    \ nums[j];\n            ans = min(ans, curr + next);\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpqcuq08et.cpp: In function \u2018long int minSubArraySum(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpqcuq08et.cpp:14:19: error: \u2018min\u2019 was not declared\
    \ in this scope; did you mean \u2018std::min\u2019?\n   14 |             ans =\
    \ min(ans, curr + next);\n      |                   ^~~\n      |             \
    \      std::min\nIn file included from /usr/include/c++/9/algorithm:62,\n    \
    \             from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n   \
    \              from /tmp/tmpqcuq08et.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3456:5:\
    \ note: \u2018std::min\u2019 declared here\n 3456 |     min(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long ans = INT_MIN;\n    long sum = 0;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < ans) {\n            ans =\
    \ sum;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpb6fj6xgx: /tmp/tmpb6fj6xgx.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long min = INT_MAX;\n    long sum = 0;\n    for(long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if(sum < min) {\n            min =\
    \ sum;\n        }\n    }\n    return min;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmppza38dm2: /tmp/tmppza38dm2.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long ans = INT_MAX;\n\
    \    long sum = 0;\n    for (long i = 0; i < nums.size(); i++) {\n        sum\
    \ += nums[i];\n        if (sum < ans) {\n            ans = sum;\n        }\n \
    \   }\n    return ans;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpjyxz8uo7: /tmp/tmpjyxz8uo7.cpp:21: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Write your code here\n\
    \    long min = INT_MAX;\n    for (long i = 0; i < nums.size(); i++) {\n     \
    \   long sum = 0;\n        for (long j = 0; j < nums.size(); j++) {\n        \
    \    if (i != j) {\n                sum += nums[j];\n            }\n        }\n\
    \        if (sum < min) {\n            min = sum;\n        }\n    }\n    return\
    \ min;\n}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpebsclth_: /tmp/tmpebsclth_.cpp:26: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long minSum = std::numeric_limits<long>::max();\n    long sum = 0;\n    for\
    \ (long i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n        if (sum\
    \ < minSum) {\n            minSum = sum;\n        }\n    }\n    return minSum;\n\
    }\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmplb6vxxgm: /tmp/tmplb6vxxgm.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long sum = 0;\n    long min = INT_MAX;\n    long max = INT_MIN;\n    for (long\
    \ i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n        if (sum < min)\
    \ {\n            min = sum;\n        }\n        if (sum > max) {\n           \
    \ max = sum;\n        }\n    }\n    return min;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpwwg9eti0: /tmp/tmpwwg9eti0.cpp:26: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long long ans = nums[0];\n\
    \    for (long i = 1; i < nums.size(); i++) {\n        ans = std::min(ans, nums[i]\
    \ + nums[i - 1]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzf8vhjkf.cpp: In function \u2018long int minSubArraySum(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpzf8vhjkf.cpp:11:50: error: no matching function for call\
    \ to \u2018min(long long int&, __gnu_cxx::__alloc_traits<std::allocator<long int>,\
    \ long int>::value_type)\u2019\n   11 |         ans = std::min(ans, nums[i] +\
    \ nums[i - 1]);\n      |                                                  ^\n\
    In file included from /usr/include/c++/9/bits/char_traits.h:39,\n            \
    \     from /usr/include/c++/9/ios:40,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpzf8vhjkf.cpp:2:\n/usr/include/c++/9/bits/stl_algobase.h:198:5: note:\
    \ candidate: \u2018template<class _Tp> constexpr const _Tp& std::min(const _Tp&,\
    \ const _Tp&)\u2019\n  198 |     min(const _Tp& __a, const _Tp& __b)\n      |\
    \     ^~~\n/usr/include/c++/9/bits/stl_algobase.h:198:5: note:   template argument\
    \ deduction/substitution failed:\n/tmp/tmpzf8vhjkf.cpp:11:50: note:   deduced\
    \ conflicting types for parameter \u2018const _Tp\u2019 (\u2018long long int\u2019\
    \ and \u2018__gnu_cxx::__alloc_traits<std::allocator<long int>, long int>::value_type\u2019\
    \ {aka \u2018long int\u2019})\n   11 |         ans = std::min(ans, nums[i] + nums[i\
    \ - 1]);\n      |                                                  ^\nIn file\
    \ included from /usr/include/c++/9/bits/char_traits.h:39,\n                 from\
    \ /usr/include/c++/9/ios:40,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpzf8vhjkf.cpp:2:\n/usr/include/c++/9/bits/stl_algobase.h:246:5: note:\
    \ candidate: \u2018template<class _Tp, class _Compare> constexpr const _Tp& std::min(const\
    \ _Tp&, const _Tp&, _Compare)\u2019\n  246 |     min(const _Tp& __a, const _Tp&\
    \ __b, _Compare __comp)\n      |     ^~~\n/usr/include/c++/9/bits/stl_algobase.h:246:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpzf8vhjkf.cpp:11:50:\
    \ note:   deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018\
    long long int\u2019 and \u2018__gnu_cxx::__alloc_traits<std::allocator<long int>,\
    \ long int>::value_type\u2019 {aka \u2018long int\u2019})\n   11 |         ans\
    \ = std::min(ans, nums[i] + nums[i - 1]);\n      |                           \
    \                       ^\nIn file included from /usr/include/c++/9/algorithm:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpzf8vhjkf.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3450:5:\
    \ note: candidate: \u2018template<class _Tp> constexpr _Tp std::min(std::initializer_list<_Tp>)\u2019\
    \n 3450 |     min(initializer_list<_Tp> __l)\n      |     ^~~\n/usr/include/c++/9/bits/stl_algo.h:3450:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpzf8vhjkf.cpp:11:50:\
    \ note:   mismatched types \u2018std::initializer_list<_Tp>\u2019 and \u2018long\
    \ long int\u2019\n   11 |         ans = std::min(ans, nums[i] + nums[i - 1]);\n\
    \      |                                                  ^\nIn file included\
    \ from /usr/include/c++/9/algorithm:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpzf8vhjkf.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3456:5:\
    \ note: candidate: \u2018template<class _Tp, class _Compare> constexpr _Tp std::min(std::initializer_list<_Tp>,\
    \ _Compare)\u2019\n 3456 |     min(initializer_list<_Tp> __l, _Compare __comp)\n\
    \      |     ^~~\n/usr/include/c++/9/bits/stl_algo.h:3456:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmpzf8vhjkf.cpp:11:50: note: \
    \  mismatched types \u2018std::initializer_list<_Tp>\u2019 and \u2018long long\
    \ int\u2019\n   11 |         ans = std::min(ans, nums[i] + nums[i - 1]);\n   \
    \   |                                                  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Write your code here\n\
    \    long ans = INT_MAX;\n    long sum = 0;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < ans) {\n            ans =\
    \ sum;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpw7hw_8xb: /tmp/tmpw7hw_8xb.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long ans = INT_MAX;\n    for (long i = 0; i < nums.size(); i++) {\n      \
    \  long sum = 0;\n        for (long j = i; j < nums.size(); j++) {\n         \
    \   sum += nums[j];\n            if (sum < ans) {\n                ans = sum;\n\
    \            }\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long min = INT_MAX;\n    long sum = 0;\n    long long count = 0;\n    for\
    \ (long i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n        if (sum\
    \ < min) {\n            min = sum;\n        }\n    }\n    for (long i = 0; i <\
    \ nums.size(); i++) {\n        if (sum - nums[i] < min) {\n            min = sum\
    \ - nums[i];\n        }\n    }\n    return min;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpd_knw_w_: /tmp/tmpd_knw_w_.cpp:28: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long sum = 0;\n    for (long i = 0; i < nums.size(); i++) {\n        sum +=\
    \ nums[i];\n    }\n    return sum;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpn8ogye_3: /tmp/tmpn8ogye_3.cpp:18: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long ans = nums[0];\n\
    \    for (long i = 1; i < nums.size(); i++) {\n        ans = std::min(ans, nums[i]\
    \ + nums[i - 1]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpugu32zpb: /tmp/tmpugu32zpb.cpp:17: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long min = std::numeric_limits<long>::max();\n\
    \    long sum = 0;\n    for (long i = 0; i < nums.size(); i++) {\n        sum\
    \ += nums[i];\n        if (sum < min) {\n            min = sum;\n        }\n \
    \   }\n    return min;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp1zlt8ga1: /tmp/tmp1zlt8ga1.cpp:21: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Write your code here\n\
    \    long sum = 0;\n    long min = INT_MAX;\n    long max = INT_MIN;\n    for\
    \ (long i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n        if (sum\
    \ < min) {\n            min = sum;\n        }\n        if (sum > max) {\n    \
    \        max = sum;\n        }\n    }\n    return max;\n}\nint main() {\n    auto\
    \ candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3,\
    \ 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) ==\
    \ (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp_4g9bb1_: /tmp/tmp_4g9bb1_.cpp:26: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long min = INT_MAX;\n    long sum = 0;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min) {\n            min =\
    \ sum;\n        }\n    }\n    return min;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpkthh9_rt: /tmp/tmpkthh9_rt.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long min = INT_MAX;\n    long sum = 0;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min) {\n            min =\
    \ sum;\n        }\n    }\n    return min;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpvr84elyd: /tmp/tmpvr84elyd.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long ans = nums[0];\n\
    \    for (long i = 1; i < nums.size(); i++) {\n        ans = min(ans, nums[i]\
    \ + nums[i - 1]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp95vrvzhd.cpp: In function \u2018long int minSubArraySum(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp95vrvzhd.cpp:11:15: error: \u2018min\u2019 was not declared\
    \ in this scope; did you mean \u2018std::min\u2019?\n   11 |         ans = min(ans,\
    \ nums[i] + nums[i - 1]);\n      |               ^~~\n      |               std::min\n\
    In file included from /usr/include/c++/9/algorithm:62,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n                 from\
    \ /tmp/tmp95vrvzhd.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3456:5: note: \u2018\
    std::min\u2019 declared here\n 3456 |     min(initializer_list<_Tp> __l, _Compare\
    \ __comp)\n      |     ^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long sum = 0;\n    long min = INT_MAX;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min) {\n            min =\
    \ sum;\n        }\n    }\n    return min;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpo9374mwp: /tmp/tmpo9374mwp.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long ans = nums[0];\n\
    \    long long sum = 0;\n    for (long i = 0; i < nums.size(); i++) {\n      \
    \  sum += nums[i];\n        if (sum < ans) {\n            ans = sum;\n       \
    \ }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpccqucmd5: /tmp/tmpccqucmd5.cpp:21: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long min = INT_MAX;\n\
    \    long sum = 0;\n    for (long i = 0; i < nums.size(); i++) {\n        sum\
    \ += nums[i];\n        if (sum < min) {\n            min = sum;\n        }\n \
    \   }\n    return min;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpwfmsa46u: /tmp/tmpwfmsa46u.cpp:21: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long sum = 0;\n    long\
    \ minSum = std::numeric_limits<long>::max();\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < minSum) {\n            minSum\
    \ = sum;\n        }\n    }\n    return minSum;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpeau1mmdh: /tmp/tmpeau1mmdh.cpp:21: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long ans = nums[0];\n\
    \    for (long i = 1; i < nums.size(); i++) {\n        ans = std::min(ans, nums[i]\
    \ + nums[i - 1]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp7_kpr13m: /tmp/tmp7_kpr13m.cpp:17: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long sum = 0;\n    long min = INT_MAX;\n    long max = INT_MIN;\n    for (long\
    \ i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n        if (sum < min)\
    \ {\n            min = sum;\n        }\n        if (sum > max) {\n           \
    \ max = sum;\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpb9n2xhdu: /tmp/tmpb9n2xhdu.cpp:26: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Write your code here\n\
    \    long sum = 0;\n    long min = INT_MAX;\n    long max = INT_MIN;\n    for\
    \ (long i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n        if (sum\
    \ < min) {\n            min = sum;\n        }\n        if (sum > max) {\n    \
    \        max = sum;\n        }\n    }\n    return min;\n}\nint main() {\n    auto\
    \ candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3,\
    \ 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) ==\
    \ (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpiskqb1v3: /tmp/tmpiskqb1v3.cpp:26: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long ans = INT_MIN;\n\
    \    long sum = 0;\n    for (long i = 0; i < nums.size(); i++) {\n        sum\
    \ += nums[i];\n        if (sum < ans) {\n            ans = sum;\n        }\n \
    \   }\n    return ans;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpd3_if8mt: /tmp/tmpd3_if8mt.cpp:21: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long minSum = std::numeric_limits<long>::max();\n    long sum = 0;\n    for\
    \ (auto num : nums) {\n        sum += num;\n        if (sum < minSum) {\n    \
    \        minSum = sum;\n        }\n    }\n    return minSum;\n}\nint main() {\n\
    \    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpk6klw_mn: /tmp/tmpk6klw_mn.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long ans = INT_MAX;\n\
    \    long sum = 0;\n    for (long i = 0; i < nums.size(); i++) {\n        sum\
    \ += nums[i];\n        if (sum < ans) {\n            ans = sum;\n        }\n \
    \   }\n    return ans;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp459_m0_5: /tmp/tmp459_m0_5.cpp:21: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long sum = 0;\n    long min = INT_MAX;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min) {\n            min =\
    \ sum;\n        }\n    }\n    return min;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpq3tdp110: /tmp/tmpq3tdp110.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Write your code here\n\
    \    long sum = 0;\n    long min = INT_MAX;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < min) {\n            min =\
    \ sum;\n        }\n    }\n    return min;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpovzgyw_d: /tmp/tmpovzgyw_d.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long sum = 0;\n    long minSum = std::numeric_limits<long>::max();\n    for\
    \ (long i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n        if (sum\
    \ < minSum) {\n            minSum = sum;\n        }\n    }\n    return minSum;\n\
    }\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpizvqan5o: /tmp/tmpizvqan5o.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long sum = 0;\n    long minSum = INT_MAX;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < minSum) {\n            minSum\
    \ = sum;\n        }\n    }\n    return minSum;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpm0_ynqzm: /tmp/tmpm0_ynqzm.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long ans = INT_MAX;\n\
    \    long sum = 0;\n    long n = nums.size();\n    for(long i = 0; i < n; i++)\
    \ {\n        sum += nums[i];\n        if(sum < ans) {\n            ans = sum;\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpwc4hwnt6: /tmp/tmpwc4hwnt6.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Write your code here\n\
    \    long minSum = nums[0];\n    long sum = 0;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum < minSum) {\n            minSum\
    \ = sum;\n        }\n    }\n    return minSum;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpf1pmxkr9: /tmp/tmpf1pmxkr9.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long ans = nums[0];\n\
    \    for (long i = 1; i < nums.size(); i++) {\n        ans = min(ans, nums[i]\
    \ + nums[i - 1]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "/tmp/tmptr1p3657.cpp: In function \u2018long int minSubArraySum(std::vector<long\
    \ int>)\u2019:\n/tmp/tmptr1p3657.cpp:11:15: error: \u2018min\u2019 was not declared\
    \ in this scope; did you mean \u2018std::min\u2019?\n   11 |         ans = min(ans,\
    \ nums[i] + nums[i - 1]);\n      |               ^~~\n      |               std::min\n\
    In file included from /usr/include/c++/9/algorithm:62,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n                 from\
    \ /tmp/tmptr1p3657.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3456:5: note: \u2018\
    std::min\u2019 declared here\n 3456 |     min(initializer_list<_Tp> __l, _Compare\
    \ __comp)\n      |     ^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Write your code here\n\
    \    long sum = 0;\n    long min = INT_MAX;\n    long max = INT_MIN;\n    for\
    \ (long i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n        if (sum\
    \ < min) {\n            min = sum;\n        }\n        if (sum > max) {\n    \
    \        max = sum;\n        }\n    }\n    return max;\n}\nint main() {\n    auto\
    \ candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3,\
    \ 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) ==\
    \ (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmprnlxi3dl: /tmp/tmprnlxi3dl.cpp:26: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long sum = 0;\n    long minSum = std::numeric_limits<long>::max();\n    long\
    \ minIndex = -1;\n    for(long i = 0; i < nums.size(); i++) {\n        sum +=\
    \ nums[i];\n        if(sum < minSum) {\n            minSum = sum;\n          \
    \  minIndex = i;\n        }\n    }\n    return minSum;\n}\nint main() {\n    auto\
    \ candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3,\
    \ 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) ==\
    \ (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpn_qcwywv: /tmp/tmpn_qcwywv.cpp:24: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long sum = 0;\n    long min = INT_MAX;\n    for(long i = 0; i < nums.size();\
    \ i++){\n        sum += nums[i];\n        if(sum < min){\n            min = sum;\n\
    \        }\n    }\n    return min;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpuuaww5sj: /tmp/tmpuuaww5sj.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long ans = nums[0];\n\
    \    for (long i = 0; i < nums.size(); i++) {\n        ans = std::min(ans, nums[i]\
    \ + minSubArraySum(nums.substr(i + 1, nums.size())));\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2,\
    \ -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10})))\
    \ == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) ==\
    \ (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20, 1000000})))\
    \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) ==\
    \ (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5})))\
    \ == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4})))\
    \ == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2})))\
    \ == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n  \
    \  assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpv_0scbyd.cpp: In function \u2018long int minSubArraySum(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpv_0scbyd.cpp:11:59: error: \u2018class std::vector<long\
    \ int>\u2019 has no member named \u2018substr\u2019\n   11 |         ans = std::min(ans,\
    \ nums[i] + minSubArraySum(nums.substr(i + 1, nums.size())));\n      |       \
    \                                                    ^~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    long ans = INT_MAX;\n\
    \    long sum = 0;\n    for (long i = 0; i < nums.size(); i++) {\n        sum\
    \ += nums[i];\n        if (sum < ans) {\n            ans = sum;\n        }\n \
    \   }\n    return ans;\n}\nint main() {\n    auto candidate = minSubArraySum;\n\
    \    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1,\
    \ -2, -3}))) == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2,\
    \ -10}))) == (-14));\n    assert(candidate((std::vector<long>({-9999999999999999})))\
    \ == (-9999999999999999));\n    assert(candidate((std::vector<long>({0, 10, 20,\
    \ 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1, -2, -3, 10,\
    \ -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1, -2, -3,\
    \ 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11, 13, 8,\
    \ 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32, -1,\
    \ 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) == (-10));\n\
    \    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
    \ -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpwq40l6km: /tmp/tmpwq40l6km.cpp:21: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
    // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) ==\
    \ -6\nlong minSubArraySum(std::vector<long> nums) {\n    // Your code here\n \
    \   long min = std::numeric_limits<long>::max();\n    long sum = 0;\n    for (auto\
    \ i : nums) {\n        sum += i;\n        if (sum < min) {\n            min =\
    \ sum;\n        }\n    }\n    return min;\n}\nint main() {\n    auto candidate\
    \ = minSubArraySum;\n    assert(candidate((std::vector<long>({2, 3, 4, 1, 2, 4})))\
    \ == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) == (-14));\n\
    \    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
    \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n  \
    \  assert(candidate((std::vector<long>({-1, -2, -3, 10, -5}))) == (-6));\n   \
    \ assert(candidate((std::vector<long>({100, -1, -2, -3, 10, -5}))) == (-6));\n\
    \    assert(candidate((std::vector<long>({10, 11, 13, 8, 3, 4}))) == (3));\n \
    \   assert(candidate((std::vector<long>({100, -33, 32, -1, 0, -2}))) == (-33));\n\
    \    assert(candidate((std::vector<long>({-10}))) == (-10));\n    assert(candidate((std::vector<long>({7})))\
    \ == (7));\n    assert(candidate((std::vector<long>({1, -1}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpt3l6mt47: /tmp/tmpt3l6mt47.cpp:22: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 3, 4, 1, 2, 4}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
