name: HumanEval_88_sort_array
language: cpp
results:
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long long sum = 0;\n    for (long long i = 0; i < array.size(); i++)\
    \ {\n        sum += array[i];\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmp2xet1vmo: /tmp/tmp2xet1vmo.cpp:29: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long sum = 0;\n    for (long i : array) {\n        sum += i;\n    }\n\
    \    if (sum % 2 == 0) {\n        std::sort(array.begin(), array.end());\n   \
    \ } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpku6ycbkr: /tmp/tmpku6ycbkr.cpp:29: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // write your code here\n    long sum = 0;\n    for (long i = 0; i <\
    \ array.size(); i++) {\n        sum += array[i];\n    }\n    if (sum % 2 == 0)\
    \ {\n        std::sort(array.begin(), array.end());\n    } else {\n        std::sort(array.rbegin(),\
    \ array.rend());\n    }\n    return array;\n}\nint main() {\n    auto candidate\
    \ = sort_array;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({5}))) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({2, 4, 3, 0, 1, 5}))) == (std::vector<long>({0,\
    \ 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2, 4, 3, 0, 1,\
    \ 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpwts9nl5t: /tmp/tmpwts9nl5t.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // Your code here\n    long long sum = 0;\n    for (long i = 0; i < array.size();\
    \ i++) {\n        sum += array[i];\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpa6b5x3ku: /tmp/tmpa6b5x3ku.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // write your code here\n    long sum = 0;\n    for (long i : array)\
    \ {\n        sum += i;\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmptu98ounz: /tmp/tmptu98ounz.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long sum = 0;\n    for (long i : array) {\n        sum += i;\n    }\n\
    \    if (sum % 2 == 0) {\n        std::sort(array.begin(), array.end());\n   \
    \ } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmp9hdvfnur: /tmp/tmp9hdvfnur.cpp:29: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long long sum = 0;\n    for (long long i = 0; i < array.size(); i++)\
    \ {\n        sum += array[i];\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n        return array;\n    } else {\n        std::sort(array.rbegin(),\
    \ array.rend());\n        return array;\n    }\n}\nint main() {\n    auto candidate\
    \ = sort_array;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({5}))) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({2, 4, 3, 0, 1, 5}))) == (std::vector<long>({0,\
    \ 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2, 4, 3, 0, 1,\
    \ 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpubt_vwh_: /tmp/tmpubt_vwh_.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // Your code here\n    long sum = 0;\n    long temp;\n    long temp2;\n\
    \    long sum2;\n    long sum3;\n    long sum4;\n    long sum5;\n    long sum6;\n\
    \    long sum7;\n    long sum8;\n    long sum9;\n    long sum10;\n    long sum11;\n\
    \    long sum12;\n    long sum13;\n    long sum14;\n    long sum15;\n    long\
    \ sum16;\n    long sum17;\n    long sum18;\n    long sum19;\n    long sum20;\n\
    \    long sum21;\n    long sum22;\n    long sum23;\n    long sum24;\n    long\
    \ sum25;\n    long sum26;\n    long sum27;\n    long sum28;\n    long sum29;\n\
    \    long sum30;\n    long sum31;\n    long sum32;\n    long sum33;\n    long\
    \ sum34;\n    long sum35;\n    long sum36;\n    long sum37;\n    long sum38;\n\
    \    long sum39;\n    long sum40;\n    long sum41;\n    long sum42;\n    long\
    \ sum43;\n    long sum44;\n    long sum45;\n    long sum46;\n    long sum47;\n\
    \    long sum48;\n    long sum49;\n    long sum50;\n    long sum51;\n    long\
    \ sum52;\n    long sum53;\n    long sum54;\n    long sum55;\n    long sum56;\n\
    \    long sum57;\n    long sum58;\n    long sum59;\n    long sum60;\n    long\
    \ sum61;\n    long sum62;\n    long sum63;\n    long sum64;\n    long sum65;\n\
    \    long sum66;\n    long sum67;\n    long sum68;\n    long sum69;\n    long\
    \ sum70;\n    long sum71;\n    long sum72;\n    long sum73;\n    long sum74;\n\
    \    long sum75;\n    long sum76;\n    long sum77;\n    long sum78;\n    long\
    \ sum79;\n    long sum80;\n    long sum81;\n    long sum82;\n    long sum83;\n\
    \    long sum84;\n    long sum85;\n    long sum86;\n    \n}\nint main() {\n  \
    \  auto candidate = sort_array;\n    assert(candidate((std::vector<long>())) ==\
    \ (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({2, 4, 3, 0, 1, 5}))) == (std::vector<long>({0,\
    \ 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2, 4, 3, 0, 1,\
    \ 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpgl7i3fhk: /tmp/tmpgl7i3fhk.cpp:107: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (std::vector<long>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // write your code here\n    long sum = 0;\n    for (long i : array)\
    \ {\n        sum += i;\n    }\n    if (sum % 2 == 1) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmppvli55op: /tmp/tmppvli55op.cpp:31: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // Your code here\n    long sum = 0;\n    for (long i : array) {\n  \
    \      sum += i;\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmp1ulu521a: /tmp/tmp1ulu521a.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // Your code here\n    long sum = 0;\n    for (long i = 0; i < array.size();\
    \ i++) {\n        sum += array[i];\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpfr4zrg01: /tmp/tmpfr4zrg01.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // Your code here\n    long long sum = 0;\n    for (long i = 0; i < array.size();\
    \ i++) {\n        sum += array[i];\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmp2tknv80u: /tmp/tmp2tknv80u.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // Your code here\n    long sum = 0;\n    for (long i = 0; i < array.size();\
    \ i++) {\n        sum += array[i];\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpdm0_vii8: /tmp/tmpdm0_vii8.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long long sum = 0;\n    for (long long i : array) {\n        sum += i;\n\
    \    }\n    if (sum % 2 == 1) {\n        std::sort(array.begin(), array.end());\n\
    \    } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpqnin7afg: /tmp/tmpqnin7afg.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // write your code here\n    long long sum = 0;\n    for (long i = 0;\
    \ i < array.size(); i++) {\n        sum += array[i];\n    }\n    if (sum % 2 ==\
    \ 0) {\n        std::sort(array.begin(), array.end());\n    } else {\n       \
    \ std::sort(array.rbegin(), array.rend());\n    }\n    return array;\n}\nint main()\
    \ {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpmiwjdly6: /tmp/tmpmiwjdly6.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long sum = 0;\n    for (long i : array) {\n        sum += i;\n    }\n\
    \    if (sum % 2 == 0) {\n        std::sort(array.begin(), array.end());\n   \
    \ } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpjqwpsc1f: /tmp/tmpjqwpsc1f.cpp:29: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // Your code here\n    long long sum = 0;\n    for (long i = 0; i < array.size();\
    \ i++) {\n        sum += array[i];\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpgw8mo4ci: /tmp/tmpgw8mo4ci.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // write your code here\n    long long sum = 0;\n    for (long i = 0;\
    \ i < array.size(); i++) {\n        sum += array[i];\n    }\n    if (sum % 2 ==\
    \ 1) {\n        std::sort(array.begin(), array.end());\n    } else {\n       \
    \ std::sort(array.rbegin(), array.rend());\n    }\n    return array;\n}\nint main()\
    \ {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmp31gjmw0_: /tmp/tmp31gjmw0_.cpp:31: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // write your code here\n    long sum = 0;\n    for (long i = 0; i <\
    \ array.size(); i++) {\n        sum += array[i];\n    }\n    if (sum % 2 == 1)\
    \ {\n        std::sort(array.begin(), array.end());\n    } else {\n        std::sort(array.rbegin(),\
    \ array.rend());\n    }\n    return array;\n}\nint main() {\n    auto candidate\
    \ = sort_array;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({5}))) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({2, 4, 3, 0, 1, 5}))) == (std::vector<long>({0,\
    \ 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2, 4, 3, 0, 1,\
    \ 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpxolejwaf: /tmp/tmpxolejwaf.cpp:31: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long long sum = 0;\n    for (long i = 0; i < array.size(); i++) {\n \
    \       sum += array[i];\n    }\n    if (sum % 2 == 1) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmp7q42_jr8: /tmp/tmp7q42_jr8.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long long sum = 0;\n    for (long long i : array) {\n        sum += i;\n\
    \    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(), array.end());\n\
    \    } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmp23092k0o: /tmp/tmp23092k0o.cpp:29: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    std::vector<long> result;\n    long sum = 0;\n    for (long i : array)\
    \ {\n        sum += i;\n        result.push_back(i);\n    }\n    if (sum % 2 ==\
    \ 1) {\n        std::sort(result.begin(), result.end());\n    } else {\n     \
    \   std::sort(result.rbegin(), result.rend());\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpckp529tq: /tmp/tmpckp529tq.cpp:32: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long long sum = 0;\n    for (auto i : array) {\n        sum += i;\n \
    \   }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(), array.end());\n\
    \    } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmp9eaqg1y0: /tmp/tmp9eaqg1y0.cpp:29: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // Your code here\n    long sum = 0;\n    for (long i = 0; i < array.size();\
    \ i++) {\n        sum += array[i];\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpirl5_pr1: /tmp/tmpirl5_pr1.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long sum = 0;\n    for (long i : array) {\n        sum += i;\n    }\n\
    \    if (sum % 2 == 0) {\n        std::sort(array.begin(), array.end());\n   \
    \ } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmp918hiaxz: /tmp/tmp918hiaxz.cpp:29: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // write your code here\n    long sum = 0;\n    for (long i : array)\
    \ {\n        sum += i;\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpw6n4z5re: /tmp/tmpw6n4z5re.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long long sum = 0;\n    for (auto i : array) {\n        sum += i;\n \
    \   }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(), array.end());\n\
    \    } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpu140znk9: /tmp/tmpu140znk9.cpp:29: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long sum = 0;\n    for (long i : array) {\n        sum += i;\n    }\n\
    \    if (sum % 2 == 0) {\n        std::sort(array.begin(), array.end());\n   \
    \ } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpesdsdy21: /tmp/tmpesdsdy21.cpp:29: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long long sum = 0;\n    for (long i = 0; i < array.size(); i++) {\n \
    \       sum += array[i];\n    }\n    if (sum % 2 != 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpcd_7xlqc: /tmp/tmpcd_7xlqc.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // Your code here\n    long long sum = 0;\n    long long sum2 = 0;\n\
    \    for (long i = 0; i < array.size(); i++) {\n        sum += array[i];\n   \
    \     sum2 += array[i];\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.begin(), array.end(), std::greater<long\
    \ long>());\n    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmp6907bffa: /tmp/tmp6907bffa.cpp:32: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long long sum = 0;\n    for (long long i = 0; i < array.size(); i++)\
    \ {\n        sum += array[i];\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmp5xy8egsw: /tmp/tmp5xy8egsw.cpp:29: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long sum = 0;\n    for (long i : array) {\n        sum += i;\n    }\n\
    \    if (sum % 2 == 0) {\n        std::sort(array.begin(), array.end());\n   \
    \ } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmprgo3uezs: /tmp/tmprgo3uezs.cpp:29: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // Your code here\n    long sum = 0;\n    for (long i : array) {\n  \
    \      sum += i;\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpad1m4_s2: /tmp/tmpad1m4_s2.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long long sum = 0;\n    for (long i = 0; i < array.size(); i++) {\n \
    \       sum += array[i];\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmp1kz27e5k: /tmp/tmp1kz27e5k.cpp:29: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // write your code here\n    long long sum = 0;\n    for (long long i\
    \ = 0; i < array.size(); i++) {\n        sum += array[i];\n    }\n    if (sum\
    \ % 2 == 1) {\n        std::sort(array.begin(), array.end());\n    } else {\n\
    \        std::sort(array.rbegin(), array.rend());\n    }\n    return array;\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmprkyx0cb9: /tmp/tmprkyx0cb9.cpp:31: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // Your code here\n    long sum = 0;\n    long temp = 0;\n    long temp2\
    \ = 0;\n    long temp3 = 0;\n    long temp4 = 0;\n    long temp5 = 0;\n    long\
    \ temp6 = 0;\n    long temp7 = 0;\n    long temp8 = 0;\n    long temp9 = 0;\n\
    \    long temp10 = 0;\n    long temp11 = 0;\n    long temp12 = 0;\n    long temp13\
    \ = 0;\n    long temp14 = 0;\n    long temp15 = 0;\n    long temp16 = 0;\n   \
    \ long temp17 = 0;\n    long temp18 = 0;\n    long temp19 = 0;\n    long temp20\
    \ = 0;\n    long temp21 = 0;\n    long temp22 = 0;\n    long temp23 = 0;\n   \
    \ long temp24 = 0;\n    long temp25 = 0;\n    long temp26 = 0;\n    long temp27\
    \ = 0;\n    long temp28 = 0;\n    long temp29 = 0;\n    long temp30 = 0;\n   \
    \ long temp31 = 0;\n    long temp32 = 0;\n    long temp33 = 0;\n    long temp34\
    \ = 0;\n    long temp35 = 0;\n    long temp36 = 0;\n    long temp37 = 0;\n   \
    \ long temp38 = 0;\n    long temp39 = 0;\n    long temp40 = 0;\n    long temp41\
    \ = 0;\n    long temp42 = 0;\n    long temp43 = 0;\n    long temp44 = 0;\n   \
    \ long temp45 = 0;\n    long temp46 = 0;\n    long temp47 = 0;\n    long temp48\
    \ = 0;\n    long temp49 = 0;\n    long temp50 = 0;\n    long temp51 = 0;\n   \
    \ long temp52 = 0;\n    long temp53 = 0;\n    long temp54 = 0;\n    long temp55\
    \ = 0;\n    long temp56 = 0;\n    long temp57 = 0;\n    long temp58 = 0;\n   \
    \ long temp59 = 0;\n    long temp60 = 0;\n    long temp61 = 0;\n    long temp62\
    \ = 0;\n    long temp63 = 0;\n    long temp64 = 0;\n    long temp65 = 0;\n   \
    \ long temp66 = 0;\n    long temp67 = 0;\n    long temp68 = 0;\n    long temp69\
    \ = 0;\n    long temp70 = 0;\n    long temp71 = 0;\n    long temp72 = 0;\n   \
    \ long temp73 = 0;\n    long temp74 = 0;\n    long temp75 = 0;\n    long temp76\
    \ = 0;\n    long temp77 = 0;\n    long temp78 = 0;\n    long temp79 = 0;\n   \
    \ long temp80 = 0;\n    long temp81 = 0;\n    long temp82 = 0;\n    long temp83\
    \ = 0;\n    long temp84 = 0;\n    long temp\n}\nint main() {\n    auto candidate\
    \ = sort_array;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({5}))) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({2, 4, 3, 0, 1, 5}))) == (std::vector<long>({0,\
    \ 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2, 4, 3, 0, 1,\
    \ 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1uo_rckx.cpp: In function \u2018std::vector<long int> sort_array(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp1uo_rckx.cpp:101:1: error: expected initializer before\
    \ \u2018}\u2019 token\n  101 | }\n      | ^\n/tmp/tmp1uo_rckx.cpp:101:1: warning:\
    \ no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // Your code here\n    long sum = 0;\n    for (long i = 0; i < array.size();\
    \ i++) {\n        sum += array[i];\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpynon9dfj: /tmp/tmpynon9dfj.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long long sum = 0;\n    for (long long i = 0; i < array.size(); i++)\
    \ {\n        sum += array[i];\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmp5jzxvu4p: /tmp/tmp5jzxvu4p.cpp:29: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long long sum = 0;\n    for (long i = 0; i < array.size(); i++) {\n \
    \       sum += array[i];\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpdgq6whg_: /tmp/tmpdgq6whg_.cpp:29: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long long sum = 0;\n    for (long long i = 0; i < array.size(); i++)\
    \ {\n        sum += array[i];\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpwquue5mm: /tmp/tmpwquue5mm.cpp:29: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // Your code here\n    long long sum = 0;\n    for (long long i = 0;\
    \ i < array.size(); i++) {\n        sum += array[i];\n    }\n    if (sum % 2 ==\
    \ 1) {\n        std::sort(array.begin(), array.end());\n    } else {\n       \
    \ std::sort(array.rbegin(), array.rend());\n    }\n    return array;\n}\nint main()\
    \ {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmp8b6utuhv: /tmp/tmp8b6utuhv.cpp:31: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // Your code here\n    long long sum = 0;\n    for (long i = 0; i < array.size();\
    \ i++) {\n        sum += array[i];\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmp9_cf5r2x: /tmp/tmp9_cf5r2x.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // Your code here\n    long sum = 0;\n    for (long i : array) {\n  \
    \      sum += i;\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmp7dhrxbna: /tmp/tmp7dhrxbna.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long sum = 0;\n    for (long i : array) {\n        sum += i;\n    }\n\
    \    if (sum % 2 == 0) {\n        std::sort(array.begin(), array.end());\n   \
    \ } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpf63yn0qr: /tmp/tmpf63yn0qr.cpp:29: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // write your code here\n    long sum = 0;\n    for (long i = 0; i <\
    \ array.size(); i++) {\n        sum += array[i];\n    }\n    if (sum % 2 == 1)\
    \ {\n        std::sort(array.begin(), array.end());\n    } else {\n        std::sort(array.rbegin(),\
    \ array.rend());\n    }\n    return array;\n}\nint main() {\n    auto candidate\
    \ = sort_array;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({5}))) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({2, 4, 3, 0, 1, 5}))) == (std::vector<long>({0,\
    \ 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2, 4, 3, 0, 1,\
    \ 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpyt0gpudy: /tmp/tmpyt0gpudy.cpp:31: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // write your code here\n    long long sum = 0;\n    for (long i = 0;\
    \ i < array.size(); i++) {\n        sum += array[i];\n    }\n    if (sum % 2 ==\
    \ 1) {\n        std::sort(array.begin(), array.end());\n    } else {\n       \
    \ std::sort(array.rbegin(), array.rend());\n    }\n    return array;\n}\nint main()\
    \ {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpwe3egn4s: /tmp/tmpwe3egn4s.cpp:31: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // Your code here\n    long long sum = 0;\n    for (long i = 0; i < array.size();\
    \ i++) {\n        sum += array[i];\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmptyeiaijj: /tmp/tmptyeiaijj.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // write your code here\n    long long sum = 0;\n    for (long i = 0;\
    \ i < array.size(); i++) {\n        sum += array[i];\n    }\n    if (sum % 2 ==\
    \ 0) {\n        std::sort(array.begin(), array.end());\n    } else {\n       \
    \ std::sort(array.rbegin(), array.rend());\n    }\n    return array;\n}\nint main()\
    \ {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmp1esxkh7t: /tmp/tmp1esxkh7t.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // Your code here\n    long sum = 0;\n    for (long i : array) {\n  \
    \      sum += i;\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpccprxlh6: /tmp/tmpccprxlh6.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // write your code here\n    long sum = 0;\n    for (long i = 0; i <\
    \ array.size(); i++) {\n        sum += array[i];\n    }\n    if (sum % 2 == 0)\
    \ {\n        std::sort(array.begin(), array.end());\n    } else {\n        std::sort(array.rbegin(),\
    \ array.rend());\n    }\n    return array;\n}\nint main() {\n    auto candidate\
    \ = sort_array;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({5}))) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({2, 4, 3, 0, 1, 5}))) == (std::vector<long>({0,\
    \ 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2, 4, 3, 0, 1,\
    \ 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmp0thquceo: /tmp/tmp0thquceo.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // Your code here\n    long long sum = 0;\n    for (long i = 0; i < array.size();\
    \ i++) {\n        sum += array[i];\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmp5lyesjbh: /tmp/tmp5lyesjbh.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long sum = 0;\n    for (long i : array) {\n        sum += i;\n    }\n\
    \    if (sum % 2 == 1) {\n        std::sort(array.begin(), array.end());\n   \
    \ } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpvfqwfssx: /tmp/tmpvfqwfssx.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long long sum = 0;\n    for (long long i = 0; i < array.size(); i++)\
    \ {\n        sum += array[i];\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpcnv3ttuv: /tmp/tmpcnv3ttuv.cpp:29: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long long sum = 0;\n    for (long long i = 0; i < array.size(); i++)\
    \ {\n        sum += array[i];\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmptu3wksk7: /tmp/tmptu3wksk7.cpp:29: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // Your code here\n    long sum = 0;\n    for (long i : array) {\n  \
    \      sum += i;\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpk2nd7oeb: /tmp/tmpk2nd7oeb.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // Your code here\n    long long sum = 0;\n    for (long i = 0; i < array.size();\
    \ i++) {\n        sum += array[i];\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmp7kszrrdj: /tmp/tmp7kszrrdj.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // write your code here\n    long sum = 0;\n    for (long i = 0; i <\
    \ array.size(); i++) {\n        sum += array[i];\n    }\n    if (sum % 2 == 0)\
    \ {\n        std::sort(array.begin(), array.end());\n    } else {\n        std::sort(array.rbegin(),\
    \ array.rend());\n    }\n    return array;\n}\nint main() {\n    auto candidate\
    \ = sort_array;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({5}))) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({2, 4, 3, 0, 1, 5}))) == (std::vector<long>({0,\
    \ 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2, 4, 3, 0, 1,\
    \ 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpzm40ppsh: /tmp/tmpzm40ppsh.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long long sum = 0;\n    for (auto i : array) {\n        sum += i;\n \
    \   }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(), array.end());\n\
    \    } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpokyw40z0: /tmp/tmpokyw40z0.cpp:29: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long long sum = 0;\n    for (long long i = 0; i < array.size(); i++)\
    \ {\n        sum += array[i];\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmp08n_e4gx: /tmp/tmp08n_e4gx.cpp:29: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // Your code here\n    long long sum = 0;\n    for (long i = 0; i < array.size();\
    \ i++) {\n        sum += array[i];\n    }\n    if (sum % 2 == 1) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmp483a9paj: /tmp/tmp483a9paj.cpp:31: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // Your code here\n    long sum = 0;\n    for (long i : array) {\n  \
    \      sum += i;\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmp426pdq7v: /tmp/tmp426pdq7v.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long sum = 0;\n    for (long i : array) {\n        sum += i;\n    }\n\
    \    if (sum % 2 == 0) {\n        std::sort(array.begin(), array.end());\n   \
    \ } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmp0w3m1qdx: /tmp/tmp0w3m1qdx.cpp:29: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // write your code here\n    long sum = 0;\n    for (long i : array)\
    \ {\n        sum += i;\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpad7apbyb: /tmp/tmpad7apbyb.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // write your code here\n    long sum = 0;\n    for (long i = 0; i <\
    \ array.size(); i++) {\n        sum += array[i];\n    }\n    if (sum % 2 == 1)\
    \ {\n        std::sort(array.begin(), array.end());\n    } else {\n        std::sort(array.rbegin(),\
    \ array.rend());\n    }\n    return array;\n}\nint main() {\n    auto candidate\
    \ = sort_array;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({5}))) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({2, 4, 3, 0, 1, 5}))) == (std::vector<long>({0,\
    \ 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2, 4, 3, 0, 1,\
    \ 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmp2kgkv3if: /tmp/tmp2kgkv3if.cpp:31: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // Your code here\n    long long sum = 0;\n    for (long i = 0; i < array.size();\
    \ i++) {\n        sum += array[i];\n    }\n    if (sum % 2 == 1) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmp41nz7kf1: /tmp/tmp41nz7kf1.cpp:31: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // Your code here\n    long long sum = 0;\n    for (long i = 0; i < array.size();\
    \ i++) {\n        sum += array[i];\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpwrew6ae9: /tmp/tmpwrew6ae9.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // write your code here\n    long long sum = 0;\n    long long sum1 =\
    \ 0;\n    long long sum2 = 0;\n    long long sum3 = 0;\n    long long sum4 = 0;\n\
    \    long long sum5 = 0;\n    long long sum6 = 0;\n    long long sum7 = 0;\n \
    \   long long sum8 = 0;\n    long long sum9 = 0;\n    long long sum10 = 0;\n \
    \   long long sum11 = 0;\n    long long sum12 = 0;\n    long long sum13 = 0;\n\
    \    long long sum14 = 0;\n    long long sum15 = 0;\n    long long sum16 = 0;\n\
    \    long long sum17 = 0;\n    long long sum18 = 0;\n    long long sum19 = 0;\n\
    \    long long sum20 = 0;\n    long long sum21 = 0;\n    long long sum22 = 0;\n\
    \    long long sum23 = 0;\n    long long sum24 = 0;\n    long long sum25 = 0;\n\
    \    long long sum26 = 0;\n    long long sum27 = 0;\n    long long sum28 = 0;\n\
    \    long long sum29 = 0;\n    long long sum30 = 0;\n    long long sum31 = 0;\n\
    \    long long sum32 = 0;\n    long long sum33 = 0;\n    long long sum34 = 0;\n\
    \    long long sum35 = 0;\n    long long sum36 = 0;\n    long long sum37 = 0;\n\
    \    long long sum38 = 0;\n    long long sum39 = 0;\n    long long sum40 = 0;\n\
    \    long long sum41 = 0;\n    long long sum42 = 0;\n    long long sum43 = 0;\n\
    \    long long sum44 = 0;\n    long long sum45 = 0;\n    long long sum46 = 0;\n\
    \    long long sum47 = 0;\n    long long sum48 = 0;\n    long long sum49 = 0;\n\
    \    long long sum50 = 0;\n    long long sum51 = 0;\n    long long sum52 = 0;\n\
    \    long long sum53 = 0;\n    long long sum54 = 0;\n    long long sum55 = 0;\n\
    \    long long sum56 = 0;\n    long long sum57 = 0;\n    long long sum58 = 0;\n\
    \    long long sum59 = 0;\n    long long sum60 = 0;\n    long long sum61 = 0;\n\
    \    long long sum62 = 0;\n    long long sum63 = 0;\n    long long sum64 = 0;\n\
    \    long long sum65 = 0;\n    long long sum66 = 0;\n    long long sum67 = 0;\n\
    \    long long sum68 = 0;\n    long long sum69 = 0;\n    long long sum70 = 0;\n\
    \    long long sum71 = 0;\n    long long sum72 = 0;\n    long \n}\nint main()\
    \ {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpr0mk8hge.cpp: In function \u2018std::vector<long int> sort_array(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpr0mk8hge.cpp:89:1: error: expected unqualified-id before\
    \ \u2018}\u2019 token\n   89 | }\n      | ^\n/tmp/tmpr0mk8hge.cpp:89:1: warning:\
    \ no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // write your code here\n    long sum = 0;\n    for (long i = 0; i <\
    \ array.size(); i++) {\n        sum += array[i];\n    }\n    if (sum % 2 == 0)\
    \ {\n        std::sort(array.begin(), array.end());\n    } else {\n        std::sort(array.rbegin(),\
    \ array.rend());\n    }\n    return array;\n}\nint main() {\n    auto candidate\
    \ = sort_array;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({5}))) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({2, 4, 3, 0, 1, 5}))) == (std::vector<long>({0,\
    \ 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2, 4, 3, 0, 1,\
    \ 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpfjg4vro5: /tmp/tmpfjg4vro5.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    std::vector<long> result;\n    long sum = 0;\n    for (auto i : array)\
    \ {\n        sum += i;\n        result.push_back(i);\n    }\n    if (sum % 2 ==\
    \ 0) {\n        std::sort(result.begin(), result.end());\n    } else {\n     \
    \   std::sort(result.rbegin(), result.rend());\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpsenxtc6d: /tmp/tmpsenxtc6d.cpp:31: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long long sum = 0;\n    for (long long i = 0; i < array.size(); i++)\
    \ {\n        sum += array[i];\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpz3hwczlo: /tmp/tmpz3hwczlo.cpp:29: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long long sum = 0;\n    for (auto i : array) {\n        sum += i;\n \
    \   }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(), array.end());\n\
    \    } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpcqoixgup: /tmp/tmpcqoixgup.cpp:29: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long sum = 0;\n    for (long i : array) {\n        sum += i;\n    }\n\
    \    if (sum % 2 == 0) {\n        std::sort(array.begin(), array.end());\n   \
    \ } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpmsl7483f: /tmp/tmpmsl7483f.cpp:29: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long long sum = 0;\n    for (long long i = 0; i < array.size(); i++)\
    \ {\n        sum += array[i];\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n        return array;\n    } else {\n        std::sort(array.rbegin(),\
    \ array.rend());\n        return array;\n    }\n}\nint main() {\n    auto candidate\
    \ = sort_array;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({5}))) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({2, 4, 3, 0, 1, 5}))) == (std::vector<long>({0,\
    \ 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2, 4, 3, 0, 1,\
    \ 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpj0sy5z2e: /tmp/tmpj0sy5z2e.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // Your code here\n    long sum = 0;\n    for (long i : array) {\n  \
    \      sum += i;\n    }\n    if (sum % 2 == 1) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmp6w5390gg: /tmp/tmp6w5390gg.cpp:31: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // write your code here\n    long long sum = 0;\n    for (long i = 0;\
    \ i < array.size(); i++) {\n        sum += array[i];\n    }\n    if (sum % 2 ==\
    \ 0) {\n        std::sort(array.begin(), array.end());\n    } else {\n       \
    \ std::sort(array.rbegin(), array.rend());\n    }\n    return array;\n}\nint main()\
    \ {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpr96s_jjd: /tmp/tmpr96s_jjd.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long long sum = 0;\n    for (auto i : array) {\n        sum += i;\n \
    \   }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(), array.end());\n\
    \    } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpmqr0p3c4: /tmp/tmpmqr0p3c4.cpp:29: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // write your code here\n    long sum = 0;\n    for (long i = 0; i <\
    \ array.size(); i++) {\n        sum += array[i];\n    }\n    if (sum % 2 == 0)\
    \ {\n        std::sort(array.begin(), array.end());\n    } else {\n        std::sort(array.rbegin(),\
    \ array.rend());\n    }\n    return array;\n}\nint main() {\n    auto candidate\
    \ = sort_array;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({5}))) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({2, 4, 3, 0, 1, 5}))) == (std::vector<long>({0,\
    \ 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2, 4, 3, 0, 1,\
    \ 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpohryhtux: /tmp/tmpohryhtux.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // write your code here\n    long sum = 0;\n    for (long i : array)\
    \ {\n        sum += i;\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpn3v0jbh7: /tmp/tmpn3v0jbh7.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long long sum = 0;\n    for (auto i : array) {\n        sum += i;\n \
    \   }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(), array.end());\n\
    \    } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmp1l0v0vxx: /tmp/tmp1l0v0vxx.cpp:29: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // Your code here\n    long long sum = 0;\n    for (long i = 0; i < array.size();\
    \ i++) {\n        sum += array[i];\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmp35i0wp7a: /tmp/tmp35i0wp7a.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long long sum = 0;\n    for (long long i = 0; i < array.size(); i++)\
    \ {\n        sum += array[i];\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmp06tkaqxj: /tmp/tmp06tkaqxj.cpp:29: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // Your code here\n    long long sum = 0;\n    for (long i = 0; i < array.size();\
    \ i++) {\n        sum += array[i];\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpvc4sog9r: /tmp/tmpvc4sog9r.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long long sum = 0;\n    for (long i = 0; i < array.size(); i++) {\n \
    \       sum += array[i];\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmp_0hl3bhr: /tmp/tmp_0hl3bhr.cpp:29: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // Your code here\n    long sum = 0;\n    for (long i = 0; i < array.size();\
    \ i++) {\n        sum += array[i];\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpkp9_2029: /tmp/tmpkp9_2029.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // Your code here\n    long sum = 0;\n    for (long i : array) {\n  \
    \      sum += i;\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpkpgqfmez: /tmp/tmpkpgqfmez.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long long sum = 0;\n    for (long long i : array) {\n        sum += i;\n\
    \    }\n    if (sum % 2 == 1) {\n        std::sort(array.begin(), array.end());\n\
    \    } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpiimfj9y6: /tmp/tmpiimfj9y6.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // write your code here\n    long sum = 0;\n    for (long i = 0; i <\
    \ array.size(); i++) {\n        sum += array[i];\n    }\n    if (sum % 2 == 0)\
    \ {\n        std::sort(array.begin(), array.end());\n    } else {\n        std::sort(array.rbegin(),\
    \ array.rend());\n    }\n    return array;\n}\nint main() {\n    auto candidate\
    \ = sort_array;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({5}))) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({2, 4, 3, 0, 1, 5}))) == (std::vector<long>({0,\
    \ 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2, 4, 3, 0, 1,\
    \ 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmp2b2f379u: /tmp/tmp2b2f379u.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // Your code here\n    long sum = 0;\n    for (long i = 0; i < array.size();\
    \ i++) {\n        sum += array[i];\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpa98uw6y6: /tmp/tmpa98uw6y6.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // write your code here\n    long sum = 0;\n    for (long i : array)\
    \ {\n        sum += i;\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpnoqa2iec: /tmp/tmpnoqa2iec.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    std::vector<long> result;\n    long sum = 0;\n    for (long i : array)\
    \ {\n        sum += i;\n        result.push_back(i);\n    }\n    if (sum % 2 ==\
    \ 1) {\n        std::sort(result.begin(), result.end());\n    } else {\n     \
    \   std::sort(result.rbegin(), result.rend());\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmp8pe3k_fq: /tmp/tmp8pe3k_fq.cpp:32: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long long sum = 0;\n    for (long long i = 0; i < array.size(); i++)\
    \ {\n        sum += array[i];\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpv6rtjbnp: /tmp/tmpv6rtjbnp.cpp:29: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long long sum = 0;\n    for (long long i : array) {\n        sum += i;\n\
    \    }\n    if (sum % 2 == 1) {\n        std::sort(array.begin(), array.end());\n\
    \    } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpu0_e637y: /tmp/tmpu0_e637y.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long long sum = 0;\n    for (long long i : array) {\n        sum += i;\n\
    \    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(), array.end());\n\
    \    } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpodgybppf: /tmp/tmpodgybppf.cpp:29: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // Your code here\n    long long sum = 0;\n    for (long i = 0; i < array.size();\
    \ i++) {\n        sum += array[i];\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpiri8b0w6: /tmp/tmpiri8b0w6.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // write your code here\n    long sum = 0;\n    for (long i : array)\
    \ {\n        sum += i;\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpksbxq0sg: /tmp/tmpksbxq0sg.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long long sum = 0;\n    for (auto i : array) {\n        sum += i;\n \
    \   }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(), array.end());\n\
    \    } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmp920fqqog: /tmp/tmp920fqqog.cpp:29: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // Your code here\n    long sum = 0;\n    for (long i : array) {\n  \
    \      sum += i;\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpt2jvfgvv: /tmp/tmpt2jvfgvv.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long long sum = 0;\n    for (long long i = 0; i < array.size(); i++)\
    \ {\n        sum += array[i];\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n        return array;\n    } else {\n        std::sort(array.rbegin(),\
    \ array.rend());\n        return array;\n    }\n}\nint main() {\n    auto candidate\
    \ = sort_array;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({5}))) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({2, 4, 3, 0, 1, 5}))) == (std::vector<long>({0,\
    \ 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2, 4, 3, 0, 1,\
    \ 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpzsmvgcqb: /tmp/tmpzsmvgcqb.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // Your code here\n    long sum = 0;\n    for (long i : array) {\n  \
    \      sum += i;\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpr1kgxdqt: /tmp/tmpr1kgxdqt.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // Your code here\n    long long sum = 0;\n    for (long i = 0; i < array.size();\
    \ i++) {\n        sum += array[i];\n    }\n    if (sum % 2 == 1) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpgn4dcoy2: /tmp/tmpgn4dcoy2.cpp:31: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // write your code here\n    long long sum = 0;\n    for (long i = 0;\
    \ i < array.size(); i++) {\n        sum += array[i];\n    }\n    if (sum % 2 ==\
    \ 0) {\n        std::sort(array.begin(), array.end());\n    } else {\n       \
    \ std::sort(array.rbegin(), array.rend());\n    }\n    return array;\n}\nint main()\
    \ {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmp__z70pem: /tmp/tmp__z70pem.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // write your code here\n    long sum = 0;\n    for (long i = 0; i <\
    \ array.size(); i++) {\n        sum += array[i];\n    }\n    if (sum % 2 == 0)\
    \ {\n        std::sort(array.begin(), array.end());\n    } else {\n        std::sort(array.rbegin(),\
    \ array.rend());\n    }\n    return array;\n}\nint main() {\n    auto candidate\
    \ = sort_array;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({5}))) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({2, 4, 3, 0, 1, 5}))) == (std::vector<long>({0,\
    \ 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2, 4, 3, 0, 1,\
    \ 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpxpdj7lmt: /tmp/tmpxpdj7lmt.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long sum = 0;\n    for (long i : array) {\n        sum += i;\n    }\n\
    \    if (sum % 2 == 0) {\n        std::sort(array.begin(), array.end());\n   \
    \ } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmp2at6zugd: /tmp/tmp2at6zugd.cpp:29: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // Your code here\n    long sum = 0;\n    for (long i : array) {\n  \
    \      sum += i;\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmp5j4gg33k: /tmp/tmp5j4gg33k.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // write your code here\n    long sum = 0;\n    for (long i = 0; i <\
    \ array.size(); i++) {\n        sum += array[i];\n    }\n    if (sum % 2 == 0)\
    \ {\n        std::sort(array.begin(), array.end());\n    } else {\n        std::sort(array.rbegin(),\
    \ array.rend());\n    }\n    return array;\n}\nint main() {\n    auto candidate\
    \ = sort_array;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({5}))) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({2, 4, 3, 0, 1, 5}))) == (std::vector<long>({0,\
    \ 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2, 4, 3, 0, 1,\
    \ 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpfb17o0xf: /tmp/tmpfb17o0xf.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // Your code here\n    long long sum = 0;\n    for (long i = 0; i < array.size();\
    \ i++) {\n        sum += array[i];\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmppet5g003: /tmp/tmppet5g003.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // Your code here\n    long sum = 0;\n    for (long i : array) {\n  \
    \      sum += i;\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpouon2rf9: /tmp/tmpouon2rf9.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // Your code here\n    long long sum = 0;\n    for (long i = 0; i < array.size();\
    \ i++) {\n        sum += array[i];\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmp6q3jmlzr: /tmp/tmp6q3jmlzr.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // Your code here\n    long sum = 0;\n    for (long i : array) {\n  \
    \      sum += i;\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpfno2cs_n: /tmp/tmpfno2cs_n.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long sum = 0;\n    for (auto i : array) {\n        sum += i;\n    }\n\
    \    if (sum % 2 == 0) {\n        std::sort(array.begin(), array.end());\n   \
    \ } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpdihavtje: /tmp/tmpdihavtje.cpp:29: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long sum = 0;\n    for (long i : array) {\n        sum += i;\n    }\n\
    \    if (sum % 2 == 0) {\n        std::sort(array.begin(), array.end());\n   \
    \ } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpbe_9554d: /tmp/tmpbe_9554d.cpp:29: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // Your code here\n    long sum = 0;\n    for (long i : array) {\n  \
    \      sum += i;\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpoc9y3iht: /tmp/tmpoc9y3iht.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // write your code here\n    long sum = 0;\n    for (long i : array)\
    \ {\n        sum += i;\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpn48iio2_: /tmp/tmpn48iio2_.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long long sum = 0;\n    for (long long i = 0; i < array.size(); i++)\
    \ {\n        sum += array[i];\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmp9w6qcb3v: /tmp/tmp9w6qcb3v.cpp:29: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long long sum = 0;\n    for (long long i = 0; i < array.size(); i++)\
    \ {\n        sum += array[i];\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpa2zp9urk: /tmp/tmpa2zp9urk.cpp:29: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long long sum = 0;\n    for (long i = 0; i < array.size(); i++) {\n \
    \       sum += array[i];\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpxauqd_bi: /tmp/tmpxauqd_bi.cpp:29: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // write your code here\n    long long sum = 0;\n    for (long long i\
    \ = 0; i < array.size(); i++) {\n        sum += array[i];\n    }\n    if (sum\
    \ % 2 == 0) {\n        std::sort(array.begin(), array.end());\n    } else {\n\
    \        std::sort(array.rbegin(), array.rend());\n    }\n    return array;\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmp3oxrtyv6: /tmp/tmp3oxrtyv6.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // Your code here\n    long long sum = 0;\n    for (long i = 0; i < array.size();\
    \ i++) {\n        sum += array[i];\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpfby7ujy5: /tmp/tmpfby7ujy5.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // Your code here\n    long long sum = 0;\n    for (long i = 0; i < array.size();\
    \ i++) {\n        sum += array[i];\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmp9u_1dyrz: /tmp/tmp9u_1dyrz.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // write your code here\n    long long sum = 0;\n    for (long i = 0;\
    \ i < array.size(); i++) {\n        sum += array[i];\n    }\n    if (sum % 2 ==\
    \ 0) {\n        std::sort(array.begin(), array.end());\n    } else {\n       \
    \ std::sort(array.rbegin(), array.rend());\n    }\n    return array;\n}\nint main()\
    \ {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmp1iu37i4y: /tmp/tmp1iu37i4y.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long long sum = 0;\n    for (long long i = 0; i < array.size(); i++)\
    \ {\n        sum += array[i];\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpyx0zp8o4: /tmp/tmpyx0zp8o4.cpp:29: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long sum = 0;\n    for (long i : array) {\n        sum += i;\n    }\n\
    \    if (sum % 2 == 1) {\n        std::sort(array.begin(), array.end());\n   \
    \ } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpa5faneo1: /tmp/tmpa5faneo1.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long long sum = 0;\n    for (auto i : array) {\n        sum += i;\n \
    \   }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(), array.end());\n\
    \    } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpfssb2qga: /tmp/tmpfssb2qga.cpp:29: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    std::vector<long> result;\n    long sum = 0;\n    for (long i : array)\
    \ {\n        sum += i;\n        result.push_back(i);\n    }\n    if (sum % 2 ==\
    \ 1) {\n        std::sort(result.begin(), result.end());\n    } else {\n     \
    \   std::sort(result.rbegin(), result.rend());\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpy7dlnbyp: /tmp/tmpy7dlnbyp.cpp:32: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // Your code here\n    long long sum = 0;\n    for (long i = 0; i < array.size();\
    \ i++) {\n        sum += array[i];\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n        return array;\n    } else {\n        std::sort(array.rbegin(),\
    \ array.rend());\n        return array;\n    }\n}\nint main() {\n    auto candidate\
    \ = sort_array;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({5}))) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({2, 4, 3, 0, 1, 5}))) == (std::vector<long>({0,\
    \ 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2, 4, 3, 0, 1,\
    \ 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmp9fudktch: /tmp/tmp9fudktch.cpp:31: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // Your code here\n    long long sum = 0;\n    for (long i = 0; i < array.size();\
    \ i++) {\n        sum += array[i];\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmplp3_qepa: /tmp/tmplp3_qepa.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long long sum = 0;\n    for (long long i = 0; i < array.size(); i++)\
    \ {\n        sum += array[i];\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpnipn1sme: /tmp/tmpnipn1sme.cpp:29: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // Your code here\n    long long sum = 0;\n    for (long i = 0; i < array.size();\
    \ i++) {\n        sum += array[i];\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpfy6_ylkx: /tmp/tmpfy6_ylkx.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long long sum = 0;\n    for (long i = 0; i < array.size(); i++) {\n \
    \       sum += array[i];\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmplwbeaztw: /tmp/tmplwbeaztw.cpp:29: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long long sum = 0;\n    for (long long i = 0; i < array.size(); i++)\
    \ {\n        sum += array[i];\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpfq9zlkt3: /tmp/tmpfq9zlkt3.cpp:29: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long sum = 0;\n    for (long i : array) {\n        sum += i;\n    }\n\
    \    if (sum % 2 == 0) {\n        std::sort(array.begin(), array.end());\n   \
    \ } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmp06zey_kd: /tmp/tmp06zey_kd.cpp:29: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long long sum = 0;\n    for (long long i = 0; i < array.size(); i++)\
    \ {\n        sum += array[i];\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpag8qhq5x: /tmp/tmpag8qhq5x.cpp:29: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // Your code here\n    long sum = 0;\n    for (long i : array) {\n  \
    \      sum += i;\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpojup3n3i: /tmp/tmpojup3n3i.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long long sum = 0;\n    for (long i = 0; i < array.size(); i++) {\n \
    \       sum += array[i];\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpth4284ao: /tmp/tmpth4284ao.cpp:29: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // Your code here\n    long long sum = 0;\n    long long sum2 = 0;\n\
    \    long long sum3 = 0;\n    long long sum4 = 0;\n    long long sum5 = 0;\n \
    \   long long sum6 = 0;\n    long long sum7 = 0;\n    long long sum8 = 0;\n  \
    \  long long sum9 = 0;\n    long long sum10 = 0;\n    long long sum11 = 0;\n \
    \   long long sum12 = 0;\n    long long sum13 = 0;\n    long long sum14 = 0;\n\
    \    long long sum15 = 0;\n    long long sum16 = 0;\n    long long sum17 = 0;\n\
    \    long long sum18 = 0;\n    long long sum19 = 0;\n    long long sum20 = 0;\n\
    \    long long sum21 = 0;\n    long long sum22 = 0;\n    long long sum23 = 0;\n\
    \    long long sum24 = 0;\n    long long sum25 = 0;\n    long long sum26 = 0;\n\
    \    long long sum27 = 0;\n    long long sum28 = 0;\n    long long sum29 = 0;\n\
    \    long long sum30 = 0;\n    long long sum31 = 0;\n    long long sum32 = 0;\n\
    \    long long sum33 = 0;\n    long long sum34 = 0;\n    long long sum35 = 0;\n\
    \    long long sum36 = 0;\n    long long sum37 = 0;\n    long long sum38 = 0;\n\
    \    long long sum39 = 0;\n    long long sum40 = 0;\n    long long sum41 = 0;\n\
    \    long long sum42 = 0;\n    long long sum43 = 0;\n    long long sum44 = 0;\n\
    \    long long sum45 = 0;\n    long long sum46 = 0;\n    long long sum47 = 0;\n\
    \    long long sum48 = 0;\n    long long sum49 = 0;\n    long long sum50 = 0;\n\
    \    long long sum51 = 0;\n    long long sum52 = 0;\n    long long sum53 = 0;\n\
    \    long long sum54 = 0;\n    long long sum55 = 0;\n    long long sum56 = 0;\n\
    \    long long sum57 = 0;\n    long long sum58 = 0;\n    long long sum59 = 0;\n\
    \    long long sum60 = 0;\n    long long sum61 = 0;\n    long long sum62 = 0;\n\
    \    long long sum63 = 0;\n    long long sum64 = 0;\n    long long sum65 = 0;\n\
    \    long long sum66 = 0;\n    long long sum67 = 0;\n    long long sum68 = 0;\n\
    \    long long sum69 = 0;\n    long long sum70 = 0;\n    long long sum71 = 0;\n\
    \    long long sum72 = 0;\n    long long sum73 = 0;\n    \n}\nint main() {\n \
    \   auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmp_934az3e: /tmp/tmp_934az3e.cpp:92: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (std::vector<long>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // Your code here\n    long long sum = 0;\n    for (long i = 0; i < array.size();\
    \ i++) {\n        sum += array[i];\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpi892u5u9: /tmp/tmpi892u5u9.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // write your code here\n    long sum = 0;\n    long temp = 0;\n    long\
    \ sum2 = 0;\n    long temp2 = 0;\n    long sum3 = 0;\n    long temp3 = 0;\n  \
    \  long sum4 = 0;\n    long temp4 = 0;\n    long sum5 = 0;\n    long temp5 = 0;\n\
    \    long sum6 = 0;\n    long temp6 = 0;\n    long sum7 = 0;\n    long temp7 =\
    \ 0;\n    long sum8 = 0;\n    long temp8 = 0;\n    long sum9 = 0;\n    long temp9\
    \ = 0;\n    long sum10 = 0;\n    long temp10 = 0;\n    long sum11 = 0;\n    long\
    \ temp11 = 0;\n    long sum12 = 0;\n    long temp12 = 0;\n    long sum13 = 0;\n\
    \    long temp13 = 0;\n    long sum14 = 0;\n    long temp14 = 0;\n    long sum15\
    \ = 0;\n    long temp15 = 0;\n    long sum16 = 0;\n    long temp16 = 0;\n    long\
    \ sum17 = 0;\n    long temp17 = 0;\n    long sum18 = 0;\n    long temp18 = 0;\n\
    \    long sum19 = 0;\n    long temp19 = 0;\n    long sum20 = 0;\n    long temp20\
    \ = 0;\n    long sum21 = 0;\n    long temp21 = 0;\n    long sum22 = 0;\n    long\
    \ temp22 = 0;\n    long sum23 = 0;\n    long temp23 = 0;\n    long sum24 = 0;\n\
    \    long temp24 = 0;\n    long sum25 = 0;\n    long temp25 = 0;\n    long sum26\
    \ = 0;\n    long temp26 = 0;\n    long sum27 = 0;\n    long temp27 = 0;\n    long\
    \ sum28 = 0;\n    long temp28 = 0;\n    long sum29 = 0;\n    long temp29 = 0;\n\
    \    long sum30 = 0;\n    long temp30 = 0;\n    long sum31 = 0;\n    long temp31\
    \ = 0;\n    long sum32 = 0;\n    long temp32 = 0;\n    long sum33 = 0;\n    long\
    \ temp33 = 0;\n    long sum34 = 0;\n    long temp34 = 0;\n    long sum35 = 0;\n\
    \    long temp35 = 0;\n    long sum36 = 0;\n    long temp36 = 0;\n    long sum37\
    \ = 0;\n    long temp37 = 0;\n    long sum38 = 0;\n    long temp38 = 0;\n    long\
    \ sum39 = 0;\n    long temp39 = 0;\n    long sum40 = 0;\n    long temp40 = 0;\n\
    \    long sum41 = 0;\n    long temp41 = 0;\n    long sum42 = 0;\n    long temp42\
    \ = 0;\n    long sum43 = 0;\n    long temp43 = 0;\n    \n}\nint main() {\n   \
    \ auto candidate = sort_array;\n    assert(candidate((std::vector<long>())) ==\
    \ (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({2, 4, 3, 0, 1, 5}))) == (std::vector<long>({0,\
    \ 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2, 4, 3, 0, 1,\
    \ 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpi5kvj6yf: /tmp/tmpi5kvj6yf.cpp:105: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (std::vector<long>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // write your code here\n    long sum = 0;\n    for (long i = 0; i <\
    \ array.size(); i++) {\n        sum += array[i];\n    }\n    if (sum % 2 == 0)\
    \ {\n        std::sort(array.begin(), array.end());\n    } else {\n        std::sort(array.rbegin(),\
    \ array.rend());\n    }\n    return array;\n}\nint main() {\n    auto candidate\
    \ = sort_array;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({5}))) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({2, 4, 3, 0, 1, 5}))) == (std::vector<long>({0,\
    \ 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2, 4, 3, 0, 1,\
    \ 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmptwktmt4m: /tmp/tmptwktmt4m.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long sum = 0;\n    for (auto i : array) {\n        sum += i;\n    }\n\
    \    if (sum % 2 == 0) {\n        std::sort(array.begin(), array.end());\n   \
    \ } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmp2vkl_0qt: /tmp/tmp2vkl_0qt.cpp:29: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long sum = 0;\n    for (long i : array) {\n        sum += i;\n    }\n\
    \    if (sum % 2 == 1) {\n        std::sort(array.begin(), array.end());\n   \
    \ } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpoa3kwwxu: /tmp/tmpoa3kwwxu.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long long sum = 0;\n    for (long long i = 0; i < array.size(); i++)\
    \ {\n        sum += array[i];\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpxs8gdmtc: /tmp/tmpxs8gdmtc.cpp:29: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // write your code here\n    long sum = 0;\n    for (long i : array)\
    \ {\n        sum += i;\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpw3fj4yag: /tmp/tmpw3fj4yag.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long sum = 0;\n    for (long i : array) {\n        sum += i;\n    }\n\
    \    if (sum % 2 == 0) {\n        std::sort(array.begin(), array.end());\n   \
    \ } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpx1_vdvqw: /tmp/tmpx1_vdvqw.cpp:29: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // Your code here\n    long sum = 0;\n    for (long i : array) {\n  \
    \      sum += i;\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmp5n8p2aqn: /tmp/tmp5n8p2aqn.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long sum = 0;\n    for (auto i : array) {\n        sum += i;\n    }\n\
    \    if (sum % 2 == 0) {\n        std::sort(array.begin(), array.end());\n   \
    \     return array;\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \        return array;\n    }\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmphi99a_hf: /tmp/tmphi99a_hf.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // Your code here\n    long long sum = 0;\n    for (long i = 0; i < array.size();\
    \ i++) {\n        sum += array[i];\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpkaq5utrr: /tmp/tmpkaq5utrr.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long sum = 0;\n    for (long i : array) {\n        sum += i;\n    }\n\
    \    if (sum % 2 == 0) {\n        std::sort(array.begin(), array.end());\n   \
    \ } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpb17setth: /tmp/tmpb17setth.cpp:29: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long long sum = 0;\n    for (long long i = 0; i < array.size(); i++)\
    \ {\n        sum += array[i];\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n        return array;\n    } else {\n        std::sort(array.rbegin(),\
    \ array.rend());\n        return array;\n    }\n}\nint main() {\n    auto candidate\
    \ = sort_array;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({5}))) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({2, 4, 3, 0, 1, 5}))) == (std::vector<long>({0,\
    \ 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2, 4, 3, 0, 1,\
    \ 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmp3egus9db: /tmp/tmp3egus9db.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long sum = 0;\n    for (long i : array) {\n        sum += i;\n    }\n\
    \    if (sum % 2 == 0) {\n        std::sort(array.begin(), array.end());\n   \
    \ } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpywudbu15: /tmp/tmpywudbu15.cpp:29: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long long sum = 0;\n    for (long long i = 0; i < array.size(); i++)\
    \ {\n        sum += array[i];\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n        return array;\n    } else {\n        std::sort(array.rbegin(),\
    \ array.rend());\n        return array;\n    }\n}\nint main() {\n    auto candidate\
    \ = sort_array;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({5}))) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({2, 4, 3, 0, 1, 5}))) == (std::vector<long>({0,\
    \ 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2, 4, 3, 0, 1,\
    \ 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmp2d5tkf1_: /tmp/tmp2d5tkf1_.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // write your code here\n    long sum = 0;\n    for (long i : array)\
    \ {\n        sum += i;\n    }\n    if (sum % 2 == 1) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpdeka8ql0: /tmp/tmpdeka8ql0.cpp:31: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // write your code here\n    long long sum = 0;\n    for (long i = 0;\
    \ i < array.size(); i++) {\n        sum += array[i];\n    }\n    if (sum % 2 ==\
    \ 1) {\n        std::sort(array.begin(), array.end());\n    } else {\n       \
    \ std::sort(array.rbegin(), array.rend());\n    }\n    return array;\n}\nint main()\
    \ {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmppucydl27: /tmp/tmppucydl27.cpp:31: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // write your code here\n    long long sum = 0;\n    for (long i = 0;\
    \ i < array.size(); i++) {\n        sum += array[i];\n    }\n    if (sum % 2 ==\
    \ 1) {\n        std::sort(array.begin(), array.end());\n    } else {\n       \
    \ std::sort(array.rbegin(), array.rend());\n    }\n    return array;\n}\nint main()\
    \ {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpab_ff7k7: /tmp/tmpab_ff7k7.cpp:31: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long long sum = 0;\n    for (long long i = 0; i < array.size(); i++)\
    \ {\n        sum += array[i];\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpjiwyi3jp: /tmp/tmpjiwyi3jp.cpp:29: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long sum = 0;\n    for (long i : array) {\n        sum += i;\n    }\n\
    \    if (sum % 2 == 0) {\n        std::sort(array.begin(), array.end());\n   \
    \ } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpz5sm6cy8: /tmp/tmpz5sm6cy8.cpp:29: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // Your code here\n    long sum = 0;\n    for (long i : array) {\n  \
    \      sum += i;\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpmsazngla: /tmp/tmpmsazngla.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long long sum = 0;\n    for (long i = 0; i < array.size(); i++) {\n \
    \       sum += array[i];\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpuidi_nie: /tmp/tmpuidi_nie.cpp:29: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // write your code here\n    long long sum = 0;\n    for (long long i\
    \ = 0; i < array.size(); i++) {\n        sum += array[i];\n    }\n    if (sum\
    \ % 2 == 0) {\n        std::sort(array.begin(), array.end());\n    } else {\n\
    \        std::sort(array.rbegin(), array.rend());\n    }\n    return array;\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmp84pvdn7n: /tmp/tmp84pvdn7n.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long long sum = 0;\n    for (long long i = 0; i < array.size(); i++)\
    \ {\n        sum += array[i];\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpqb2jlf43: /tmp/tmpqb2jlf43.cpp:29: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long long sum = 0;\n    for (long long i : array) {\n        sum += i;\n\
    \    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(), array.end());\n\
    \    } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmp2nnun7z9: /tmp/tmp2nnun7z9.cpp:29: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long long sum = 0;\n    for (long long i : array) {\n        sum += i;\n\
    \    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(), array.end());\n\
    \    } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmp5fqxeqkw: /tmp/tmp5fqxeqkw.cpp:29: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // write your code here\n    long sum = 0;\n    for (long i = 0; i <\
    \ array.size(); i++) {\n        sum += array[i];\n    }\n    if (sum % 2 == 0)\
    \ {\n        std::sort(array.begin(), array.end());\n    } else {\n        std::sort(array.rbegin(),\
    \ array.rend());\n    }\n    return array;\n}\nint main() {\n    auto candidate\
    \ = sort_array;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({5}))) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({2, 4, 3, 0, 1, 5}))) == (std::vector<long>({0,\
    \ 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2, 4, 3, 0, 1,\
    \ 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpjo3fk22f: /tmp/tmpjo3fk22f.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long long sum = 0;\n    for (long long i = 0; i < array.size(); i++)\
    \ {\n        sum += array[i];\n    }\n    if (sum % 2 == 1) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpoxo9yldc: /tmp/tmpoxo9yldc.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // write your code here\n    long sum = 0;\n    for (long i : array)\
    \ {\n        sum += i;\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpf1gz9yo5: /tmp/tmpf1gz9yo5.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // write your code here\n    long sum = 0;\n    for (long i = 0; i <\
    \ array.size(); i++) {\n        sum += array[i];\n    }\n    if (sum % 2 == 1)\
    \ {\n        std::sort(array.begin(), array.end());\n    } else {\n        std::sort(array.rbegin(),\
    \ array.rend());\n    }\n    return array;\n}\nint main() {\n    auto candidate\
    \ = sort_array;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({5}))) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({2, 4, 3, 0, 1, 5}))) == (std::vector<long>({0,\
    \ 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2, 4, 3, 0, 1,\
    \ 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpwx1dyx6e: /tmp/tmpwx1dyx6e.cpp:31: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long long sum = 0;\n    for (long i = 0; i < array.size(); i++) {\n \
    \       sum += array[i];\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmp8c734r2d: /tmp/tmp8c734r2d.cpp:29: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // Your code here\n    long long sum = 0;\n    for (long i = 0; i < array.size();\
    \ i++) {\n        sum += array[i];\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpbsu2ry5w: /tmp/tmpbsu2ry5w.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // Your code here\n    long long sum = 0;\n    for (long i = 0; i < array.size();\
    \ i++) {\n        sum += array[i];\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmp8wzovhfa: /tmp/tmp8wzovhfa.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // write your code here\n    long long sum = 0;\n    for (long i = 0;\
    \ i < array.size(); i++) {\n        sum += array[i];\n    }\n    if (sum % 2 ==\
    \ 0) {\n        std::sort(array.begin(), array.end());\n    } else {\n       \
    \ std::sort(array.rbegin(), array.rend());\n    }\n    return array;\n}\nint main()\
    \ {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpj64jk90z: /tmp/tmpj64jk90z.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long long sum = 0;\n    for (long long i = 0; i < array.size(); i++)\
    \ {\n        sum += array[i];\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpwaufu54x: /tmp/tmpwaufu54x.cpp:29: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long long sum = 0;\n    for (long long i = 0; i < array.size(); i++)\
    \ {\n        sum += array[i];\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmptkmgi9ya: /tmp/tmptkmgi9ya.cpp:29: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // Your code here\n    long sum = 0;\n    for (long i : array) {\n  \
    \      sum += i;\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmp1lqcyfi5: /tmp/tmp1lqcyfi5.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // write your code here\n    long long sum = 0;\n    for (long i = 0;\
    \ i < array.size(); i++) {\n        sum += array[i];\n    }\n    if (sum % 2 ==\
    \ 1) {\n        std::sort(array.begin(), array.end());\n    } else {\n       \
    \ std::sort(array.rbegin(), array.rend());\n    }\n    return array;\n}\nint main()\
    \ {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpqogzmpp7: /tmp/tmpqogzmpp7.cpp:31: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long long sum = 0;\n    for (auto i : array) {\n        sum += i;\n \
    \   }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(), array.end());\n\
    \    } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpv2sjtp2_: /tmp/tmpv2sjtp2_.cpp:29: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // write your code here\n    long long sum = 0;\n    for (long i = 0;\
    \ i < array.size(); i++) {\n        sum += array[i];\n    }\n    if (sum % 2 ==\
    \ 0) {\n        std::sort(array.begin(), array.end());\n    } else {\n       \
    \ std::sort(array.rbegin(), array.rend());\n    }\n    return array;\n}\nint main()\
    \ {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpbi423yid: /tmp/tmpbi423yid.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // write your code here\n    long sum = 0;\n    for (long i : array)\
    \ {\n        sum += i;\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmps23_iab4: /tmp/tmps23_iab4.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // Your code here\n    long sum = 0;\n    for (long i : array) {\n  \
    \      sum += i;\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmp3wqrshly: /tmp/tmp3wqrshly.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // write your code here\n    long sum = 0;\n    long temp = 0;\n    long\
    \ sum1 = 0;\n    long temp1 = 0;\n    long sum2 = 0;\n    long temp2 = 0;\n  \
    \  long sum3 = 0;\n    long temp3 = 0;\n    long sum4 = 0;\n    long temp4 = 0;\n\
    \    long sum5 = 0;\n    long temp5 = 0;\n    long sum6 = 0;\n    long temp6 =\
    \ 0;\n    long sum7 = 0;\n    long temp7 = 0;\n    long sum8 = 0;\n    long temp8\
    \ = 0;\n    long sum9 = 0;\n    long temp9 = 0;\n    long sum10 = 0;\n    long\
    \ temp10 = 0;\n    long sum11 = 0;\n    long temp11 = 0;\n    long sum12 = 0;\n\
    \    long temp12 = 0;\n    long sum13 = 0;\n    long temp13 = 0;\n    long sum14\
    \ = 0;\n    long temp14 = 0;\n    long sum15 = 0;\n    long temp15 = 0;\n    long\
    \ sum16 = 0;\n    long temp16 = 0;\n    long sum17 = 0;\n    long temp17 = 0;\n\
    \    long sum18 = 0;\n    long temp18 = 0;\n    long sum19 = 0;\n    long temp19\
    \ = 0;\n    long sum20 = 0;\n    long temp20 = 0;\n    long sum21 = 0;\n    long\
    \ temp21 = 0;\n    long sum22 = 0;\n    long temp22 = 0;\n    long sum23 = 0;\n\
    \    long temp23 = 0;\n    long sum24 = 0;\n    long temp24 = 0;\n    long sum25\
    \ = 0;\n    long temp25 = 0;\n    long sum26 = 0;\n    long temp26 = 0;\n    long\
    \ sum27 = 0;\n    long temp27 = 0;\n    long sum28 = 0;\n    long temp28 = 0;\n\
    \    long sum29 = 0;\n    long temp29 = 0;\n    long sum30 = 0;\n    long temp30\
    \ = 0;\n    long sum31 = 0;\n    long temp31 = 0;\n    long sum32 = 0;\n    long\
    \ temp32 = 0;\n    long sum33 = 0;\n    long temp33 = 0;\n    long sum34 = 0;\n\
    \    long temp34 = 0;\n    long sum35 = 0;\n    long temp35 = 0;\n    long sum36\
    \ = 0;\n    long temp36 = 0;\n    long sum37 = 0;\n    long temp37 = 0;\n    long\
    \ sum38 = 0;\n    long temp38 = 0;\n    long sum39 = 0;\n    long temp39 = 0;\n\
    \    long sum40 = 0;\n    long temp40 = 0;\n    long sum41 = 0;\n    long temp41\
    \ = 0;\n    long sum42 = 0;\n    long temp42 = 0;\n    long sum\n}\nint main()\
    \ {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmptouymro7.cpp: In function \u2018std::vector<long int> sort_array(std::vector<long\
    \ int>)\u2019:\n/tmp/tmptouymro7.cpp:102:1: error: expected initializer before\
    \ \u2018}\u2019 token\n  102 | }\n      | ^\n/tmp/tmptouymro7.cpp:102:1: warning:\
    \ no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long long sum = 0;\n    for (long long i : array) {\n        sum += i;\n\
    \    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(), array.end());\n\
    \        return array;\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \        return array;\n    }\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmppr1fufn9: /tmp/tmppr1fufn9.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long long sum = 0;\n    for (long long i = 0; i < array.size(); i++)\
    \ {\n        sum += array[i];\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpu0yipm55: /tmp/tmpu0yipm55.cpp:29: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // write your code here\n    long long sum = 0;\n    for (long i = 0;\
    \ i < array.size(); i++) {\n        sum += array[i];\n    }\n    if (sum % 2 ==\
    \ 0) {\n        std::sort(array.begin(), array.end());\n    } else {\n       \
    \ std::sort(array.rbegin(), array.rend());\n    }\n    return array;\n}\nint main()\
    \ {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmp6vafoszr: /tmp/tmp6vafoszr.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // write your code here\n    long sum = 0;\n    long temp = 0;\n    long\
    \ temp2 = 0;\n    long temp3 = 0;\n    long temp4 = 0;\n    long temp5 = 0;\n\
    \    long temp6 = 0;\n    long temp7 = 0;\n    long temp8 = 0;\n    long temp9\
    \ = 0;\n    long temp10 = 0;\n    long temp11 = 0;\n    long temp12 = 0;\n   \
    \ long temp13 = 0;\n    long temp14 = 0;\n    long temp15 = 0;\n    long temp16\
    \ = 0;\n    long temp17 = 0;\n    long temp18 = 0;\n    long temp19 = 0;\n   \
    \ long temp20 = 0;\n    long temp21 = 0;\n    long temp22 = 0;\n    long temp23\
    \ = 0;\n    long temp24 = 0;\n    long temp25 = 0;\n    long temp26 = 0;\n   \
    \ long temp27 = 0;\n    long temp28 = 0;\n    long temp29 = 0;\n    long temp30\
    \ = 0;\n    long temp31 = 0;\n    long temp32 = 0;\n    long temp33 = 0;\n   \
    \ long temp34 = 0;\n    long temp35 = 0;\n    long temp36 = 0;\n    long temp37\
    \ = 0;\n    long temp38 = 0;\n    long temp39 = 0;\n    long temp40 = 0;\n   \
    \ long temp41 = 0;\n    long temp42 = 0;\n    long temp43 = 0;\n    long temp44\
    \ = 0;\n    long temp45 = 0;\n    long temp46 = 0;\n    long temp47 = 0;\n   \
    \ long temp48 = 0;\n    long temp49 = 0;\n    long temp50 = 0;\n    long temp51\
    \ = 0;\n    long temp52 = 0;\n    long temp53 = 0;\n    long temp54 = 0;\n   \
    \ long temp55 = 0;\n    long temp56 = 0;\n    long temp57 = 0;\n    long temp58\
    \ = 0;\n    long temp59 = 0;\n    long temp60 = 0;\n    long temp61 = 0;\n   \
    \ long temp62 = 0;\n    long temp63 = 0;\n    long temp64 = 0;\n    long temp65\
    \ = 0;\n    long temp66 = 0;\n    long temp67 = 0;\n    long temp68 = 0;\n   \
    \ long temp69 = 0;\n    long temp70 = 0;\n    long temp71 = 0;\n    long temp72\
    \ = 0;\n    long temp73 = 0;\n    long temp74 = 0;\n    long temp75 = 0;\n   \
    \ long temp76 = 0;\n    long temp77 = 0;\n    long temp78 = 0;\n    long temp79\
    \ = 0;\n    long temp80 = 0;\n    long temp81 = 0;\n    long temp82 = 0;\n   \
    \ long temp83 = 0;\n    long temp84 = 0;\n    long temp\n}\nint main() {\n   \
    \ auto candidate = sort_array;\n    assert(candidate((std::vector<long>())) ==\
    \ (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({2, 4, 3, 0, 1, 5}))) == (std::vector<long>({0,\
    \ 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2, 4, 3, 0, 1,\
    \ 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmputhjqdzc.cpp: In function \u2018std::vector<long int> sort_array(std::vector<long\
    \ int>)\u2019:\n/tmp/tmputhjqdzc.cpp:101:1: error: expected initializer before\
    \ \u2018}\u2019 token\n  101 | }\n      | ^\n/tmp/tmputhjqdzc.cpp:101:1: warning:\
    \ no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long sum = 0;\n    for (long i : array) {\n        sum += i;\n    }\n\
    \    if (sum % 2 == 0) {\n        std::sort(array.begin(), array.end());\n   \
    \ } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpz78e33f3: /tmp/tmpz78e33f3.cpp:29: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // write your code here\n    long long sum = 0;\n    for (long i = 0;\
    \ i < array.size(); i++) {\n        sum += array[i];\n    }\n    if (sum % 2 ==\
    \ 0) {\n        std::sort(array.begin(), array.end());\n    } else {\n       \
    \ std::sort(array.rbegin(), array.rend());\n    }\n    return array;\n}\nint main()\
    \ {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpfqx6cjxy: /tmp/tmpfqx6cjxy.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // write your code here\n    long long sum = 0;\n    for (long i = 0;\
    \ i < array.size(); i++) {\n        sum += array[i];\n    }\n    if (sum % 2 ==\
    \ 0) {\n        std::sort(array.begin(), array.end());\n    } else {\n       \
    \ std::sort(array.rbegin(), array.rend());\n    }\n    return array;\n}\nint main()\
    \ {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpnehqfqux: /tmp/tmpnehqfqux.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // Your code here\n    long sum = 0;\n    for (long i : array) {\n  \
    \      sum += i;\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpg8lnywgl: /tmp/tmpg8lnywgl.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // write your code here\n    long sum = 0;\n    for (long i = 0; i <\
    \ array.size(); i++) {\n        sum += array[i];\n    }\n    if (sum % 2 == 0)\
    \ {\n        std::sort(array.begin(), array.end());\n    } else {\n        std::sort(array.rbegin(),\
    \ array.rend());\n    }\n    return array;\n}\nint main() {\n    auto candidate\
    \ = sort_array;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({5}))) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({2, 4, 3, 0, 1, 5}))) == (std::vector<long>({0,\
    \ 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2, 4, 3, 0, 1,\
    \ 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmputtses1e: /tmp/tmputtses1e.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // Your code here\n    long long sum = 0;\n    for (long i = 0; i < array.size();\
    \ i++) {\n        sum += array[i];\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmp_ibhb34x: /tmp/tmp_ibhb34x.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // write your code here\n    long sum = 0;\n    for (long i : array)\
    \ {\n        sum += i;\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpqmwirmp9: /tmp/tmpqmwirmp9.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long long sum = 0;\n    for (long long i : array) {\n        sum += i;\n\
    \    }\n    if (sum % 2 == 1) {\n        std::sort(array.begin(), array.end());\n\
    \    } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmp7eihikok: /tmp/tmp7eihikok.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long long sum = 0;\n    for (long long i = 0; i < array.size(); i++)\
    \ {\n        sum += array[i];\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmp6phn0db7: /tmp/tmp6phn0db7.cpp:29: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long long sum = 0;\n    for (long long i = 0; i < array.size(); i++)\
    \ {\n        sum += array[i];\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmp_1md9hu4: /tmp/tmp_1md9hu4.cpp:29: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // Your code here\n    long long sum = 0;\n    for (long i = 0; i < array.size();\
    \ i++) {\n        sum += array[i];\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpz3ucta71: /tmp/tmpz3ucta71.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // write your code here\n    long long sum = 0;\n    for (long i = 0;\
    \ i < array.size(); i++) {\n        sum += array[i];\n    }\n    if (sum % 2 ==\
    \ 1) {\n        std::reverse(array.begin(), array.end());\n    }\n    return array;\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmph689akyg: /tmp/tmph689akyg.cpp:28: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long sum = 0;\n    for (long i : array) {\n        sum += i;\n    }\n\
    \    if (sum % 2 == 0) {\n        std::sort(array.begin(), array.end());\n   \
    \ } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpmgq6sa3f: /tmp/tmpmgq6sa3f.cpp:29: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long long sum = 0;\n    for (long i = 0; i < array.size(); i++) {\n \
    \       sum += array[i];\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpvzqjoi4x: /tmp/tmpvzqjoi4x.cpp:29: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // write your code here\n    long sum = 0;\n    long temp = 0;\n    long\
    \ sum1 = 0;\n    long temp1 = 0;\n    long sum2 = 0;\n    long temp2 = 0;\n  \
    \  long sum3 = 0;\n    long temp3 = 0;\n    long sum4 = 0;\n    long temp4 = 0;\n\
    \    long sum5 = 0;\n    long temp5 = 0;\n    long sum6 = 0;\n    long temp6 =\
    \ 0;\n    long sum7 = 0;\n    long temp7 = 0;\n    long sum8 = 0;\n    long temp8\
    \ = 0;\n    long sum9 = 0;\n    long temp9 = 0;\n    long sum10 = 0;\n    long\
    \ temp10 = 0;\n    long sum11 = 0;\n    long temp11 = 0;\n    long sum12 = 0;\n\
    \    long temp12 = 0;\n    long sum13 = 0;\n    long temp13 = 0;\n    long sum14\
    \ = 0;\n    long temp14 = 0;\n    long sum15 = 0;\n    long temp15 = 0;\n    long\
    \ sum16 = 0;\n    long temp16 = 0;\n    long sum17 = 0;\n    long temp17 = 0;\n\
    \    long sum18 = 0;\n    long temp18 = 0;\n    long sum19 = 0;\n    long temp19\
    \ = 0;\n    long sum20 = 0;\n    long temp20 = 0;\n    long sum21 = 0;\n    long\
    \ temp21 = 0;\n    long sum22 = 0;\n    long temp22 = 0;\n    long sum23 = 0;\n\
    \    long temp23 = 0;\n    long sum24 = 0;\n    long temp24 = 0;\n    long sum25\
    \ = 0;\n    long temp25 = 0;\n    long sum26 = 0;\n    long temp26 = 0;\n    long\
    \ sum27 = 0;\n    long temp27 = 0;\n    long sum28 = 0;\n    long temp28 = 0;\n\
    \    long sum29 = 0;\n    long temp29 = 0;\n    long sum30 = 0;\n    long temp30\
    \ = 0;\n    long sum31 = 0;\n    long temp31 = 0;\n    long sum32 = 0;\n    long\
    \ temp32 = 0;\n    long sum33 = 0;\n    long temp33 = 0;\n    long sum34 = 0;\n\
    \    long temp34 = 0;\n    long sum35 = 0;\n    long temp35 = 0;\n    long sum36\
    \ = 0;\n    long temp36 = 0;\n    long sum37 = 0;\n    long temp37 = 0;\n    long\
    \ sum38 = 0;\n    long temp38 = 0;\n    long sum39 = 0;\n    long temp39 = 0;\n\
    \    long sum40 = 0;\n    long temp40 = 0;\n    long sum41 = 0;\n    long temp41\
    \ = 0;\n    long sum42 = 0;\n    long temp42 = 0;\n    long sum\n}\nint main()\
    \ {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpyns16qll.cpp: In function \u2018std::vector<long int> sort_array(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpyns16qll.cpp:102:1: error: expected initializer before\
    \ \u2018}\u2019 token\n  102 | }\n      | ^\n/tmp/tmpyns16qll.cpp:102:1: warning:\
    \ no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long long sum = 0;\n    for (auto i : array) {\n        sum += i;\n \
    \   }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(), array.end());\n\
    \    } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpd4gatna2: /tmp/tmpd4gatna2.cpp:29: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // write your code here\n    long sum = 0;\n    for (long i : array)\
    \ {\n        sum += i;\n    }\n    if (sum % 2 == 1) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmp_r_6dw4m: /tmp/tmp_r_6dw4m.cpp:31: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // Your code here\n    long long sum = 0;\n    for (long i = 0; i < array.size();\
    \ i++) {\n        sum += array[i];\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpdx6l05vc: /tmp/tmpdx6l05vc.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
