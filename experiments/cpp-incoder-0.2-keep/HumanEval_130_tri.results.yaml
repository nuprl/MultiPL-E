language: cpp
name: HumanEval_130_tri
results:
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    long a = 0, b = 1, c = 1;\n    long\
    \ sum = 0;\n    long temp;\n    long count = 0;\n    long limit = (n+2)/3;\n \
    \   \n    while(count < limit) {\n        temp = a + b + c;\n        sum = temp;\n\
    \        a = b;\n        b = c;\n        c = temp;\n        result.push_back(sum);\n\
    \        count++;\n    }\n    \n    return result;\n}\nint main() {\n    auto\
    \ candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1, 3, 2,\
    \ 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  status: Exception
  stderr: 'tmpn5gdgcbd: /tmp/tmpn5gdgcbd.cpp:40: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102340
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res;\n    if (n == 0) return res;\n    if (n ==\
    \ 1) return res;\n    if (n == 2) return { 1, 2, 3 };\n    if (n % 2 == 0) return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1);\n    return tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1) + tri(n - 3) + tri(n - 4);\n}\nint main() {\n    auto candidate =\
    \ tri;\n    assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n   \
    \ assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n    assert(candidate((6)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n    assert(candidate((7)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80,\
    \ 9, 99, 10, 120, 11})));\n    assert(candidate((0)) == (std::vector<long>({1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({1, 3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcr8nl1th.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmpcr8nl1th.cpp:23:39: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018std::vector<long\
    \ int>\u2019)\n   23 |     if (n % 2 == 0) return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1);\n      |                            ~~~~~~~~~~ ^ ~~~~~~~~~~\n      | \
    \                              |            |\n      |                       \
    \        |            vector<[...]>\n      |                               vector<[...]>\n\
    In file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n           \
    \      from /usr/include/c++/9/bits/specfun.h:45,\n                 from /usr/include/c++/9/cmath:1927,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpcr8nl1th.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:423:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpcr8nl1th.cpp:23:50:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   23 |     if (n % 2 == 0) return tri(n - 1) + tri(n - 2) + tri(n + 1);\n \
    \     |                                                  ^\nIn file included from\
    \ /usr/include/c++/9/bits/stl_algobase.h:67,\n                 from /usr/include/c++/9/bits/specfun.h:45,\n\
    \                 from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpcr8nl1th.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:1216:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::move_iterator<_IteratorL>\
    \ std::operator+(typename std::move_iterator<_IteratorL>::difference_type"
  stdout: ''
  timestamp: 1660102339
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    long a = 3;\n    long b = 1;\n    long\
    \ c = 1;\n    long d = 1;\n    long temp;\n    long sum = 0;\n    long temp2;\n\
    \    long sum2 = 0;\n    long temp3;\n    long sum3 = 0;\n    long temp4;\n  \
    \  long sum4 = 0;\n    long temp5;\n    long sum5 = 0;\n    long temp6;\n    long\
    \ sum6 = 0;\n    long temp7;\n    long sum7 = 0;\n    long temp8;\n    long sum8\
    \ = 0;\n    long temp9;\n    long sum9 = 0;\n    long temp10;\n    long sum10\
    \ = 0;\n    long temp11;\n    long sum11 = 0;\n    long temp12;\n    long sum12\
    \ = 0;\n    long temp13;\n    long sum13 = 0;\n    long temp14;\n    long sum14\
    \ = 0;\n    long temp15;\n    long sum15 = 0;\n    long temp16;\n    long sum16\
    \ = 0;\n    long temp17;\n    long sum17 = 0;\n    long temp18;\n    long sum18\
    \ = 0;\n    long temp19;\n    long sum19 = 0;\n    long temp20;\n    long sum20\
    \ = 0;\n    long temp21;\n    long sum21 = 0;\n    long temp22;\n    long sum22\
    \ = 0;\n    long temp23;\n    long sum23 = 0;\n    long temp24;\n    long sum24\
    \ = 0;\n    long temp25;\n    long sum25 = 0;\n    long temp26;\n    long sum26\
    \ = 0;\n    long temp27;\n    long sum27 = 0;\n    long temp28;\n    long sum28\
    \ = 0;\n    long temp29;\n    long sum29 = 0;\n    long temp30;\n    long sum30\
    \ = 0;\n    long temp31;\n    long sum31 = 0;\n    long temp32;\n    long sum32\
    \ = 0;\n    long temp33;\n    long sum33 = 0;\n    long temp34;\n    long sum34\
    \ = 0;\n    long temp35;\n    long sum35 = 0;\n    long temp36;\n    long sum36\
    \ = 0;\n    long temp37;\n    long sum37 = 0;\n    long temp38;\n    long sum38\
    \ = 0;\n    long temp39;\n    long sum39 = 0;\n    long temp40;\n    long sum40\
    \ = 0;\n    long temp41;\n    long sum41 = 0;\n    long temp42;\n    long sum42\
    \ = 0;\n    long temp43;\n\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  status: Exception
  stderr: 'tmplbv7rxnm: /tmp/tmplbv7rxnm.cpp:113: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102340
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res;\n    long a = 1;\n    long b = 2;\n    long\
    \ c = 3;\n    long d = a + b + c;\n    long temp;\n    long temp2;\n    long temp3;\n\
    \    long temp4;\n    long temp5;\n    long temp6;\n    long temp7;\n    long\
    \ temp8;\n    long temp9;\n    long temp10;\n    long temp11;\n    long temp12;\n\
    \    long temp13;\n    long temp14;\n    long temp15;\n    long temp16;\n    long\
    \ temp17;\n    long temp18;\n    long temp19;\n    long temp20;\n    long temp21;\n\
    \    long temp22;\n    long temp23;\n    long temp24;\n    long temp25;\n    long\
    \ temp26;\n    long temp27;\n    long temp28;\n    long temp29;\n    long temp30;\n\
    \    long temp31;\n    long temp32;\n    long temp33;\n    long temp34;\n    long\
    \ temp35;\n    long temp36;\n    long temp37;\n    long temp38;\n    long temp39;\n\
    \    long temp40;\n    long temp41;\n    long temp42;\n    long temp43;\n    long\
    \ temp44;\n    long temp45;\n    long temp46;\n    long temp47;\n    long temp48;\n\
    \    long temp49;\n    long temp50;\n    long temp51;\n    long temp52;\n    long\
    \ temp53;\n    long temp54;\n    long temp55;\n    long temp56;\n    long temp57;\n\
    \    long temp58;\n    long temp59;\n    long temp60;\n    long temp61;\n    long\
    \ temp62;\n    long temp63;\n    long temp64;\n    long temp65;\n    long temp66;\n\
    \    long temp67;\n    long temp68;\n    long temp69;\n    long temp70;\n    long\
    \ temp71;\n    long temp72;\n    long temp73;\n    long temp74;\n    long temp75;\n\
    \    long temp76;\n    long temp77;\n    long temp78;\n    long temp79;\n    long\
    \ temp80;\n    long temp81;\n    long temp82;\n    long temp83;\n    long temp84;\n\
    }\nint main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  status: Exception
  stderr: 'tmpnl8349_1: /tmp/tmpnl8349_1.cpp:111: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102340
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res;\n    if (n == 0)\n        return res;\n   \
    \ if (n == 1)\n        res.push_back(n);\n    else if (n % 2 == 0)\n        res.push_back(tri(n\
    \ - 1) + tri(n - 2));\n    else\n        res.push_back(tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1));\n    return res;\n}\nint main() {\n    auto candidate = tri;\n\
    \    assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8_opxbrm.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmp8_opxbrm.cpp:25:34: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018std::vector<long\
    \ int>\u2019)\n   25 |         res.push_back(tri(n - 1) + tri(n - 2));\n     \
    \ |                       ~~~~~~~~~~ ^ ~~~~~~~~~~\n      |                   \
    \       |            |\n      |                          |            vector<[...]>\n\
    \      |                          vector<[...]>\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmp8_opxbrm.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:423:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmp8_opxbrm.cpp:25:45:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   25 |         res.push_back(tri(n - 1) + tri(n - 2));\n      |           \
    \                                  ^\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmp8_opxbrm.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:1216:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::move_iterator<_IteratorL>\
    \ std::operator+(typename std::move_iterator<_IteratorL>::difference_type, const\
    \ std::move_iterator<_IteratorL>&)\u2019\n 1216 |     ope"
  stdout: ''
  timestamp: 1660102339
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    long a = 3;\n    long b = 1;\n    long\
    \ c = 2;\n    long d = 1;\n    long temp;\n    long sum = 0;\n    long tri_sum\
    \ = 0;\n    long tri_sum2 = 0;\n    long tri_sum3 = 0;\n    long tri_sum4 = 0;\n\
    \    long tri_sum5 = 0;\n    long tri_sum6 = 0;\n    long tri_sum7 = 0;\n    long\
    \ tri_sum8 = 0;\n    long tri_sum9 = 0;\n    long tri_sum10 = 0;\n    long tri_sum11\
    \ = 0;\n    long tri_sum12 = 0;\n    long tri_sum13 = 0;\n    long tri_sum14 =\
    \ 0;\n    long tri_sum15 = 0;\n    long tri_sum16 = 0;\n    long tri_sum17 = 0;\n\
    \    long tri_sum18 = 0;\n    long tri_sum19 = 0;\n    long tri_sum20 = 0;\n \
    \   long tri_sum21 = 0;\n    long tri_sum22 = 0;\n    long tri_sum23 = 0;\n  \
    \  long tri_sum24 = 0;\n    long tri_sum25 = 0;\n    long tri_sum26 = 0;\n   \
    \ long tri_sum27 = 0;\n    long tri_sum28 = 0;\n    long tri_sum29 = 0;\n    long\
    \ tri_sum30 = 0;\n    long tri_sum31 = 0;\n    long tri_sum32 = 0;\n    long tri_sum33\
    \ = 0;\n    long tri_sum34 = 0;\n    long tri_sum35 = 0;\n    long tri_sum36 =\
    \ 0;\n    long tri_sum37 = 0;\n    long tri_sum38 = 0;\n    long tri_sum39 = 0;\n\
    \    long tri_sum40 = 0;\n    long tri_sum41 = 0;\n    long tri_sum42 = 0;\n \
    \   long tri_sum43 = 0;\n    long tri_sum44 = 0;\n    long tri_sum45 = 0;\n  \
    \  long tri_sum46 = 0;\n    long tri_sum47 = 0;\n    long tri_sum48 = 0;\n   \
    \ long tri_sum49 = 0;\n    long tri_sum50 = 0;\n    long tri_sum51 = 0;\n    long\
    \ tri_sum52 = 0;\n    long tri_sum53 = 0;\n    long tri_sum54 = 0;\n    long tri_sum55\
    \ = 0;\n    long tri_sum56 = 0;\n    long tri_sum57 = 0;\n    long tri_sum58 =\
    \ 0;\n    long tri_sum59 = 0;\n    long tri_sum60 = 0;\n    \n}\nint main() {\n\
    \    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  status: Exception
  stderr: 'tmp5zbt05_9: /tmp/tmp5zbt05_9.cpp:90: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102340
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res;\n    long a = 1, b = 2, c = 3;\n    long temp;\n\
    \    long tri_sum = 0;\n    long tri_sum2 = 0;\n    long tri_sum3 = 0;\n    long\
    \ tri_sum4 = 0;\n    long tri_sum5 = 0;\n    long tri_sum6 = 0;\n    long tri_sum7\
    \ = 0;\n    long tri_sum8 = 0;\n    long tri_sum9 = 0;\n    long tri_sum10 = 0;\n\
    \    long tri_sum11 = 0;\n    long tri_sum12 = 0;\n    long tri_sum13 = 0;\n \
    \   long tri_sum14 = 0;\n    long tri_sum15 = 0;\n    long tri_sum16 = 0;\n  \
    \  long tri_sum17 = 0;\n    long tri_sum18 = 0;\n    long tri_sum19 = 0;\n   \
    \ long tri_sum20 = 0;\n    long tri_sum21 = 0;\n    long tri_sum22 = 0;\n    long\
    \ tri_sum23 = 0;\n    long tri_sum24 = 0;\n    long tri_sum25 = 0;\n    long tri_sum26\
    \ = 0;\n    long tri_sum27 = 0;\n    long tri_sum28 = 0;\n    long tri_sum29 =\
    \ 0;\n    long tri_sum30 = 0;\n    long tri_sum31 = 0;\n    long tri_sum32 = 0;\n\
    \    long tri_sum33 = 0;\n    long tri_sum34 = 0;\n    long tri_sum35 = 0;\n \
    \   long tri_sum36 = 0;\n    long tri_sum37 = 0;\n    long tri_sum38 = 0;\n  \
    \  long tri_sum39 = 0;\n    long tri_sum40 = 0;\n    long tri_sum41 = 0;\n   \
    \ long tri_sum42 = 0;\n    long tri_sum43 = 0;\n    long tri_sum44 = 0;\n    long\
    \ tri_sum45 = 0;\n    long tri_sum46 = 0;\n    long tri_sum47 = 0;\n    long tri_sum48\
    \ = 0;\n    long tri_sum49 = 0;\n    long tri_sum50 = 0;\n    long tri_sum51 =\
    \ 0;\n    long tri_sum52 = 0;\n    long tri_sum53 = 0;\n    long tri_sum54 = 0;\n\
    \    long tri_sum55 = 0;\n    long tri_sum56 = 0;\n    long tri_sum57 = 0;\n \
    \   long tri_sum58 = 0;\n    long tri_sum59 = 0;\n    long tri_sum60 = 0;\n  \
    \  long tri_sum61 = 0;\n    long tri_sum62 = 0;\n    \n}\nint main() {\n    auto\
    \ candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1, 3, 2,\
    \ 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  status: Exception
  stderr: 'tmp3kdbofkc: /tmp/tmp3kdbofkc.cpp:88: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102340
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res;\n    long a = 1;\n    long b = 1;\n    long\
    \ c = 1;\n    long d = 1;\n    long temp;\n    long temp1;\n    long temp2;\n\
    \    long temp3;\n    long temp4;\n    long temp5;\n    long temp6;\n    long\
    \ temp7;\n    long temp8;\n    long temp9;\n    long temp10;\n    long temp11;\n\
    \    long temp12;\n    long temp13;\n    long temp14;\n    long temp15;\n    long\
    \ temp16;\n    long temp17;\n    long temp18;\n    long temp19;\n    long temp20;\n\
    \    long temp21;\n    long temp22;\n    long temp23;\n    long temp24;\n    long\
    \ temp25;\n    long temp26;\n    long temp27;\n    long temp28;\n    long temp29;\n\
    \    long temp30;\n    long temp31;\n    long temp32;\n    long temp33;\n    long\
    \ temp34;\n    long temp35;\n    long temp36;\n    long temp37;\n    long temp38;\n\
    \    long temp39;\n    long temp40;\n    long temp41;\n    long temp42;\n    long\
    \ temp43;\n    long temp44;\n    long temp45;\n    long temp46;\n    long temp47;\n\
    \    long temp48;\n    long temp49;\n    long temp50;\n    long temp51;\n    long\
    \ temp52;\n    long temp53;\n    long temp54;\n    long temp55;\n    long temp56;\n\
    \    long temp57;\n    long temp58;\n    long temp59;\n    long temp60;\n    long\
    \ temp61;\n    long temp62;\n    long temp63;\n    long temp64;\n    long temp65;\n\
    \    long temp66;\n    long temp67;\n    long temp68;\n    long temp69;\n    long\
    \ temp70;\n    long temp71;\n    long temp72;\n    long temp73;\n    long temp74;\n\
    \    long temp75;\n    long temp76;\n    long temp77;\n    long temp78;\n    long\
    \ temp79;\n    long temp80;\n    long temp81;\n    long temp82;\n    long temp83;\n\
    \    long temp\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp08rsq2hw.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmp08rsq2hw.cpp:109:1: error: expected initializer before\
    \ \u2018}\u2019 token\n  109 | }\n      | ^\n/tmp/tmp08rsq2hw.cpp:109:1: warning:\
    \ no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660102339
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res;\n    long a = 1;\n    long b = 2;\n    long\
    \ c = 3;\n    long d = a + b + c;\n    long temp;\n    if (n % 2 == 0) {\n   \
    \     temp = tri(n - 1) + tri(n - 2) + tri(n + 1);\n        res.push_back(temp);\n\
    \    } else {\n        temp = tri(n - 1) + tri(n - 2) + tri(n + 1);\n        res.push_back(temp);\n\
    \        res.push_back(temp);\n    }\n    return res;\n}\nint main() {\n    auto\
    \ candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1, 3, 2,\
    \ 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpovzig3x0.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmpovzig3x0.cpp:26:27: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018std::vector<long\
    \ int>\u2019)\n   26 |         temp = tri(n - 1) + tri(n - 2) + tri(n + 1);\n\
    \      |                ~~~~~~~~~~ ^ ~~~~~~~~~~\n      |                   | \
    \           |\n      |                   |            vector<[...]>\n      | \
    \                  vector<[...]>\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpovzig3x0.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:423:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpovzig3x0.cpp:26:38:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   26 |         temp = tri(n - 1) + tri(n - 2) + tri(n + 1);\n      |      \
    \                                ^\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpovzig3x0.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:1216:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::move_iterator<_IteratorL>\
    \ std::operator+(typename std::move_iterator<_IteratorL>::difference_type, const\
    \ std::move_iterator<_IteratorL>&)\u2019\n 1216 |     operator+(typename move_iter"
  stdout: ''
  timestamp: 1660102339
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res;\n    long a = 1;\n    long b = 2;\n    long\
    \ c = 3;\n    long d = a + b + c;\n    long temp;\n    long sum = 0;\n    long\
    \ k = 0;\n    long n = n;\n    long i = 0;\n    while(i < n) {\n        temp =\
    \ d;\n        d = a + b + c;\n        a = b;\n        b = temp;\n        c = d;\n\
    \        sum++;\n        i++;\n    }\n    k = sum;\n    while(k != 0) {\n    \
    \    res.push_back(k);\n        k--;\n    }\n    return res;\n}\nint main() {\n\
    \    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplcmjpat3.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmplcmjpat3.cpp:27:10: error: declaration of \u2018long int\
    \ n\u2019 shadows a parameter\n   27 |     long n = n;\n      |          ^\n"
  stdout: ''
  timestamp: 1660102339
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    if (n == 0) return result;\n    if\
    \ (n == 1) return result;\n    if (n == 2) return { 1, 2, 3 };\n    long mid =\
    \ n / 2;\n    result.push_back(tri(mid));\n    result.push_back(tri(mid - 1) +\
    \ tri(mid - 2) + tri(mid + 1));\n    return result;\n}\nint main() {\n    auto\
    \ candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1, 3, 2,\
    \ 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmmyzwun0.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmpmmyzwun0.cpp:24:30: error: no matching function for call\
    \ to \u2018std::vector<long int>::push_back(std::vector<long int>)\u2019\n   24\
    \ |     result.push_back(tri(mid));\n      |                              ^\n\
    In file included from /usr/include/c++/9/vector:67,\n                 from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpmmyzwun0.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = long int; _Alloc = std::allocator<long int>; std::vector<_Tp, _Alloc>::value_type\
    \ = long int]\u2019\n 1184 |       push_back(const value_type& __x)\n      | \
    \      ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1184:35: note:   no known\
    \ conversion for argument 1 from \u2018std::vector<long int>\u2019 to \u2018const\
    \ value_type&\u2019 {aka \u2018const long int&\u2019}\n 1184 |       push_back(const\
    \ value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n/usr/include/c++/9/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = long int; _Alloc = std::allocator<long int>;\
    \ std::vector<_Tp, _Alloc>::value_type = long int]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018std::vector<long int>\u2019\
    \ to \u2018std::vector<long int>::value_type&&\u2019 {aka \u2018long int&&\u2019\
    }\n 1200 |       push_back(value_type&& __x)\n      |                 ~~~~~~~~~~~~~^~~\n\
    /tmp/tmpmmyzwun0.cpp:25:35: error: no match for \u2018operator+\u2019 (operand\
    \ types are \u2018std::vector<long int>\u2019 and \u2018std::vector<long int>\u2019\
    )\n   25 |     result.push_back(tri(mid - 1) + tri(mid - 2) + tri(mid + 1));\n\
    \      |           "
  stdout: ''
  timestamp: 1660102339
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res;\n    long a = 1;\n    long b = 2;\n    long\
    \ c = 3;\n    long d = 4;\n    long sum = 0;\n    long temp;\n    long temp2;\n\
    \    long temp3;\n    long temp4;\n    long temp5;\n    long temp6;\n    long\
    \ temp7;\n    long temp8;\n    long temp9;\n    long temp10;\n    long temp11;\n\
    \    long temp12;\n    long temp13;\n    long temp14;\n    long temp15;\n    long\
    \ temp16;\n    long temp17;\n    long temp18;\n    long temp19;\n    long temp20;\n\
    \    long temp21;\n    long temp22;\n    long temp23;\n    long temp24;\n    long\
    \ temp25;\n    long temp26;\n    long temp27;\n    long temp28;\n    long temp29;\n\
    \    long temp30;\n    long temp31;\n    long temp32;\n    long temp33;\n    long\
    \ temp34;\n    long temp35;\n    long temp36;\n    long temp37;\n    long temp38;\n\
    \    long temp39;\n    long temp40;\n    long temp41;\n    long temp42;\n    long\
    \ temp43;\n    long temp44;\n    long temp45;\n    long temp46;\n    long temp47;\n\
    \    long temp48;\n    long temp49;\n    long temp50;\n    long temp51;\n    long\
    \ temp52;\n    long temp53;\n    long temp54;\n    long temp55;\n    long temp56;\n\
    \    long temp57;\n    long temp58;\n    long temp59;\n    long temp60;\n    long\
    \ temp61;\n    long temp62;\n    long temp63;\n    long temp64;\n    long temp65;\n\
    \    long temp66;\n    long temp67;\n    long temp68;\n    long temp69;\n    long\
    \ temp70;\n    long temp71;\n    long temp72;\n    long temp73;\n    long temp74;\n\
    \    long temp75;\n    long temp76;\n    long temp77;\n    long temp78;\n    long\
    \ temp79;\n    long temp80;\n    long temp81;\n    long temp82;\n    long temp83;\n\
    \    long temp\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsf4obvlp.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmpsf4obvlp.cpp:109:1: error: expected initializer before\
    \ \u2018}\u2019 token\n  109 | }\n      | ^\n/tmp/tmpsf4obvlp.cpp:109:1: warning:\
    \ no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660102339
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    if (n == 0) return result;\n    if\
    \ (n == 1) return result;\n    if (n == 2) return result;\n    long a = 1;\n \
    \   long b = 2;\n    long c = 3;\n    long d = a + b + c;\n    long e = (a + b\
    \ + c) / 2;\n    long f = (a + b + c + d) / 3;\n    long g = (a + b + c + d +\
    \ e) / 4;\n    long h = (a + b + c + d + e + f) / 5;\n    long i = (a + b + c\
    \ + d + e + f + g) / 6;\n    long j = (a + b + c + d + e + f + g + h) / 7;\n \
    \   long k = (a + b + c + d + e + f + g + h + i) / 8;\n    long l = (a + b + c\
    \ + d + e + f + g + h + i + j) / 9;\n    long m = (a + b + c + d + e + f + g +\
    \ h + i + j + k) / 10;\n    long n = (a + b + c + d + e + f + g + h + i + j +\
    \ k + l) / 11;\n    long o = (a + b + c + d + e + f + g + h + i + j + k + l +\
    \ m) / 12;\n    long p = (a + b + c + d + e + f + g + h + i + j + k + l + m +\
    \ n) / 13;\n    long q = (a + b + c + d + e + f + g + h + i + j + k + l + m +\
    \ n + o) / 14;\n    long r = (a + b + c + d + e + f + g + h + i + j + k + l +\
    \ m + n + o + p) / 15;\n    long s = (a + b + c + d + e + f + g + h + i + j +\
    \ k + l + m + n + o + p + q) / 16;\n    long t = (a + b + c + d + e + f + g +\
    \ h + i + j + k + l + m + n + o + p + q + r) / 17;\n    long u = (a + b + c +\
    \ d + e + f + g + h + i + j + k + l + m + n + o + p + q + r + s) / 18;\n    long\
    \ v = (a + b + c + d + e + f + g + h + i + j + k + l + m + n + o + p + q + r +\
    \ s + t) / 19;\n    long w = (a + b + c + d + e + f + g + h + i + j + k + l +\
    \ m + n + o + \n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp59s8zis5.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmp59s8zis5.cpp:36:10: error: declaration of \u2018long int\
    \ n\u2019 shadows a parameter\n   36 |     long n = (a + b + c + d + e + f + g\
    \ + h + i + j + k + l) / 11;\n      |          ^\n/tmp/tmp59s8zis5.cpp:46:1: error:\
    \ expected primary-expression before \u2018}\u2019 token\n   46 | }\n      | ^\n\
    /tmp/tmp59s8zis5.cpp:45:74: error: expected \u2018)\u2019 before \u2018}\u2019\
    \ token\n   45 |     long w = (a + b + c + d + e + f + g + h + i + j + k + l +\
    \ m + n + o +\n      |              ~                                        \
    \                   ^\n      |                                               \
    \                           )\n   46 | }\n      | ~                          \
    \                                               \n/tmp/tmp59s8zis5.cpp:46:1: warning:\
    \ control reaches end of non-void function [-Wreturn-type]\n   46 | }\n      |\
    \ ^\n"
  stdout: ''
  timestamp: 1660102339
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res;\n    if (n == 0)\n        return res;\n   \
    \ if (n == 1)\n        res.push_back(3);\n    else\n        res.push_back(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1));\n    return res;\n}\nint main() {\n    auto\
    \ candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1, 3, 2,\
    \ 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpabesb5bv.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmpabesb5bv.cpp:25:34: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018std::vector<long\
    \ int>\u2019)\n   25 |         res.push_back(tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1));\n      |                       ~~~~~~~~~~ ^ ~~~~~~~~~~\n      |       \
    \                   |            |\n      |                          |       \
    \     vector<[...]>\n      |                          vector<[...]>\nIn file included\
    \ from /usr/include/c++/9/bits/stl_algobase.h:67,\n                 from /usr/include/c++/9/bits/specfun.h:45,\n\
    \                 from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpabesb5bv.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:423:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpabesb5bv.cpp:25:45:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   25 |         res.push_back(tri(n - 1) + tri(n - 2) + tri(n + 1));\n     \
    \ |                                             ^\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpabesb5bv.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:1216:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::move_iterator<_IteratorL>\
    \ std::operator+(typename std::move_iterator<_IteratorL>::difference_type, const\
    \ std::move_iterator<_Itera"
  stdout: ''
  timestamp: 1660102339
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res;\n    if (n == 0) res.push_back(3);\n    else\
    \ if (n % 2 == 0) res.push_back(tri(n - 1) + tri(n - 2) + tri(n + 1));\n    else\
    \ res.push_back(tri(n - 1) + tri(n - 2));\n    return res;\n}\nint main() {\n\
    \    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpaf4ytg04.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmpaf4ytg04.cpp:21:51: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018std::vector<long\
    \ int>\u2019)\n   21 |     else if (n % 2 == 0) res.push_back(tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1));\n      |                                        ~~~~~~~~~~\
    \ ^ ~~~~~~~~~~\n      |                                           |          \
    \  |\n      |                                           |            vector<[...]>\n\
    \      |                                           vector<[...]>\nIn file included\
    \ from /usr/include/c++/9/bits/stl_algobase.h:67,\n                 from /usr/include/c++/9/bits/specfun.h:45,\n\
    \                 from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpaf4ytg04.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:423:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpaf4ytg04.cpp:21:62:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   21 |     else if (n % 2 == 0) res.push_back(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1));\n      |                                                            \
    \  ^\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n     \
    \            from /usr/include/c++/9/bits/specfun.h:45,\n                 from\
    \ /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpaf4ytg04.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:1216:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::move_iterat"
  stdout: ''
  timestamp: 1660102339
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res;\n    if (n == 1)\n        res.push_back(1);\n\
    \    else if (n % 2 == 0)\n        res.push_back(tri(n - 1) + tri(n - 2));\n \
    \   else\n        res.push_back(tri(n - 1) + tri(n - 2) + tri(n + 1));\n    return\
    \ res;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpetpvpqx_.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmpetpvpqx_.cpp:23:34: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018std::vector<long\
    \ int>\u2019)\n   23 |         res.push_back(tri(n - 1) + tri(n - 2));\n     \
    \ |                       ~~~~~~~~~~ ^ ~~~~~~~~~~\n      |                   \
    \       |            |\n      |                          |            vector<[...]>\n\
    \      |                          vector<[...]>\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpetpvpqx_.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:423:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpetpvpqx_.cpp:23:45:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   23 |         res.push_back(tri(n - 1) + tri(n - 2));\n      |           \
    \                                  ^\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpetpvpqx_.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:1216:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::move_iterator<_IteratorL>\
    \ std::operator+(typename std::move_iterator<_IteratorL>::difference_type, const\
    \ std::move_iterator<_IteratorL>&)\u2019\n 1216 |     ope"
  stdout: ''
  timestamp: 1660102339
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res;\n    long a = 0, b = 1, c = 1;\n    long temp;\n\
    \    long count = 0;\n    long sum = 0;\n    while(n != 0) {\n        temp = n;\n\
    \        n = n - 1;\n        temp = temp + n;\n        sum = sum + temp;\n   \
    \     count = count + 1;\n    }\n    long temp2 = sum;\n    while(count != 0)\
    \ {\n        temp = temp2;\n        temp2 = temp2 + temp;\n        res.push_back(temp2);\n\
    \        count = count - 1;\n    }\n    return res;\n}\nint main() {\n    auto\
    \ candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1, 3, 2,\
    \ 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  status: Exception
  stderr: 'tmp24hb92ax: /tmp/tmp24hb92ax.cpp:42: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102340
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    if (n == 0) return result;\n    result.push_back(1);\
    \ \n    result.push_back(3);\n    if (n % 2 == 0) result.push_back(tri(n / 2)\
    \ + tri(n / 2 + 1) + tri(n / 2 + 2));\n    else result.push_back(tri(n / 2) +\
    \ tri(n / 2 + 1));\n    return result;\n}\nint main() {\n    auto candidate =\
    \ tri;\n    assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n   \
    \ assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n    assert(candidate((6)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n    assert(candidate((7)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80,\
    \ 9, 99, 10, 120, 11})));\n    assert(candidate((0)) == (std::vector<long>({1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({1, 3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbl9r607_.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmpbl9r607_.cpp:23:49: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018std::vector<long\
    \ int>\u2019)\n   23 |     if (n % 2 == 0) result.push_back(tri(n / 2) + tri(n\
    \ / 2 + 1) + tri(n / 2 + 2));\n      |                                      ~~~~~~~~~~\
    \ ^ ~~~~~~~~~~~~~~\n      |                                         |        \
    \    |\n      |                                         |            vector<[...]>\n\
    \      |                                         vector<[...]>\nIn file included\
    \ from /usr/include/c++/9/bits/stl_algobase.h:67,\n                 from /usr/include/c++/9/bits/specfun.h:45,\n\
    \                 from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpbl9r607_.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:423:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpbl9r607_.cpp:23:64:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   23 |     if (n % 2 == 0) result.push_back(tri(n / 2) + tri(n / 2 + 1) + tri(n\
    \ / 2 + 2));\n      |                                                        \
    \        ^\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpbl9r607_.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:1216:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::m"
  stdout: ''
  timestamp: 1660102339
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    long a = 3;\n    long b = 0;\n    long\
    \ c = 0;\n    long d = 1;\n    long temp;\n    long sum = 0;\n    long i = 0;\n\
    \    while(i < n) {\n        temp = a + b + c + d;\n        sum += temp;\n   \
    \     a = b;\n        b = c;\n        c = d;\n        d = temp;\n        ++i;\n\
    \    }\n    result.push_back(sum);\n    while(i < n) {\n        temp = a + b +\
    \ c + d;\n        sum += temp;\n        result.push_back(sum);\n        ++i;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  status: Exception
  stderr: 'tmp1flnh9sc: /tmp/tmp1flnh9sc.cpp:47: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102340
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    long a = 3;\n    long b = 1;\n    long\
    \ c = 1;\n    long d = 1;\n    long temp;\n    long temp2;\n    long temp3;\n\
    \    long temp4;\n    long temp5;\n    long temp6;\n    long temp7;\n    long\
    \ temp8;\n    long temp9;\n    long temp10;\n    long temp11;\n    long temp12;\n\
    \    long temp13;\n    long temp14;\n    long temp15;\n    long temp16;\n    long\
    \ temp17;\n    long temp18;\n    long temp19;\n    long temp20;\n    long temp21;\n\
    \    long temp22;\n    long temp23;\n    long temp24;\n    long temp25;\n    long\
    \ temp26;\n    long temp27;\n    long temp28;\n    long temp29;\n    long temp30;\n\
    \    long temp31;\n    long temp32;\n    long temp33;\n    long temp34;\n    long\
    \ temp35;\n    long temp36;\n    long temp37;\n    long temp38;\n    long temp39;\n\
    \    long temp40;\n    long temp41;\n    long temp42;\n    long temp43;\n    long\
    \ temp44;\n    long temp45;\n    long temp46;\n    long temp47;\n    long temp48;\n\
    \    long temp49;\n    long temp50;\n    long temp51;\n    long temp52;\n    long\
    \ temp53;\n    long temp54;\n    long temp55;\n    long temp56;\n    long temp57;\n\
    \    long temp58;\n    long temp59;\n    long temp60;\n    long temp61;\n    long\
    \ temp62;\n    long temp63;\n    long temp64;\n    long temp65;\n    long temp66;\n\
    \    long temp67;\n    long temp68;\n    long temp69;\n    long temp70;\n    long\
    \ temp71;\n    long temp72;\n    long temp73;\n    long temp74;\n    long temp75;\n\
    \    long temp76;\n    long temp77;\n    long temp78;\n    long temp79;\n    long\
    \ temp80;\n    long temp81;\n    long temp82;\n    long temp83;\n    long temp84;\n\
    \    long \n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbpiv0xgr.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmpbpiv0xgr.cpp:109:1: error: expected unqualified-id before\
    \ \u2018}\u2019 token\n  109 | }\n      | ^\n/tmp/tmpbpiv0xgr.cpp:109:1: warning:\
    \ no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660102339
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res;\n    if(n == 1)\n        res.push_back(3);\n\
    \    else if(n == 2)\n        res.push_back(1);\n    else if(n == 3)\n       \
    \ res.push_back(3);\n    else\n    {\n        long a = tri(n - 1) + tri(n - 2);\n\
    \        long b = tri(n + 1);\n        res.push_back(a);\n        res.push_back(b);\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqv_yrywm.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmpqv_yrywm.cpp:28:29: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018std::vector<long\
    \ int>\u2019)\n   28 |         long a = tri(n - 1) + tri(n - 2);\n      |    \
    \              ~~~~~~~~~~ ^ ~~~~~~~~~~\n      |                     |        \
    \    |\n      |                     |            vector<[...]>\n      |      \
    \               vector<[...]>\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpqv_yrywm.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:423:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpqv_yrywm.cpp:28:40:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   28 |         long a = tri(n - 1) + tri(n - 2);\n      |                 \
    \                       ^\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpqv_yrywm.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:1216:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::move_iterator<_IteratorL>\
    \ std::operator+(typename std::move_iterator<_IteratorL>::difference_type, const\
    \ std::move_iterator<_IteratorL>&)\u2019\n 1216 |     operator+(typename move_iterator<_Iterat"
  stdout: ''
  timestamp: 1660102339
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    long a = 1, b = 2, c = 3;\n    long\
    \ sum = 0;\n    long temp;\n    long temp2;\n    long temp3;\n    long temp4;\n\
    \    long temp5;\n    long temp6;\n    long temp7;\n    long temp8;\n    long\
    \ temp9;\n    long temp10;\n    long temp11;\n    long temp12;\n    long temp13;\n\
    \    long temp14;\n    long temp15;\n    long temp16;\n    long temp17;\n    long\
    \ temp18;\n    long temp19;\n    long temp20;\n    long temp21;\n    long temp22;\n\
    \    long temp23;\n    long temp24;\n    long temp25;\n    long temp26;\n    long\
    \ temp27;\n    long temp28;\n    long temp29;\n    long temp30;\n    long temp31;\n\
    \    long temp32;\n    long temp33;\n    long temp34;\n    long temp35;\n    long\
    \ temp36;\n    long temp37;\n    long temp38;\n    long temp39;\n    long temp40;\n\
    \    long temp41;\n    long temp42;\n    long temp43;\n    long temp44;\n    long\
    \ temp45;\n    long temp46;\n    long temp47;\n    long temp48;\n    long temp49;\n\
    \    long temp50;\n    long temp51;\n    long temp52;\n    long temp53;\n    long\
    \ temp54;\n    long temp55;\n    long temp56;\n    long temp57;\n    long temp58;\n\
    \    long temp59;\n    long temp60;\n    long temp61;\n    long temp62;\n    long\
    \ temp63;\n    long temp64;\n    long temp65;\n    long temp66;\n    long temp67;\n\
    \    long temp68;\n    long temp69;\n    long temp70;\n    long temp71;\n    long\
    \ temp72;\n    long temp73;\n    long temp74;\n    long temp75;\n    long temp76;\n\
    \    long temp77;\n    long temp78;\n    long temp79;\n    long temp80;\n    long\
    \ temp81;\n    long temp82;\n    long temp83;\n    long temp84;\n    long temp85;\n\
    \    long \n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7yolchn2.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmp7yolchn2.cpp:108:1: error: expected unqualified-id before\
    \ \u2018}\u2019 token\n  108 | }\n      | ^\n/tmp/tmp7yolchn2.cpp:108:1: warning:\
    \ no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660102339
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res;\n    long a = 1;\n    long b = 2;\n    long\
    \ c = 1;\n    long d = 1;\n    long temp;\n    long sum = 0;\n    long tri_sum\
    \ = 0;\n    long tri_sum2 = 0;\n    long tri_sum3 = 0;\n    long tri_sum4 = 0;\n\
    \    long tri_sum5 = 0;\n    long tri_sum6 = 0;\n    long tri_sum7 = 0;\n    long\
    \ tri_sum8 = 0;\n    long tri_sum9 = 0;\n    long tri_sum10 = 0;\n    long tri_sum11\
    \ = 0;\n    long tri_sum12 = 0;\n    long tri_sum13 = 0;\n    long tri_sum14 =\
    \ 0;\n    long tri_sum15 = 0;\n    long tri_sum16 = 0;\n    long tri_sum17 = 0;\n\
    \    long tri_sum18 = 0;\n    long tri_sum19 = 0;\n    long tri_sum20 = 0;\n \
    \   long tri_sum21 = 0;\n    long tri_sum22 = 0;\n    long tri_sum23 = 0;\n  \
    \  long tri_sum24 = 0;\n    long tri_sum25 = 0;\n    long tri_sum26 = 0;\n   \
    \ long tri_sum27 = 0;\n    long tri_sum28 = 0;\n    long tri_sum29 = 0;\n    long\
    \ tri_sum30 = 0;\n    long tri_sum31 = 0;\n    long tri_sum32 = 0;\n    long tri_sum33\
    \ = 0;\n    long tri_sum34 = 0;\n    long tri_sum35 = 0;\n    long tri_sum36 =\
    \ 0;\n    long tri_sum37 = 0;\n    long tri_sum38 = 0;\n    long tri_sum39 = 0;\n\
    \    long tri_sum40 = 0;\n    long tri_sum41 = 0;\n    long tri_sum42 = 0;\n \
    \   long tri_sum43 = 0;\n    long tri_sum44 = 0;\n    long tri_sum45 = 0;\n  \
    \  long tri_sum46 = 0;\n    long tri_sum47 = 0;\n    long tri_sum48 = 0;\n   \
    \ long tri_sum49 = 0;\n    long tri_sum50 = 0;\n    long tri_sum51 = 0;\n    long\
    \ tri_sum52 = 0;\n    long tri_sum53 = 0;\n    long tri_sum54 = 0;\n    long tri_sum55\
    \ = 0;\n    long tri_sum56 = 0;\n    long tri_sum57 = 0;\n    long tri_sum58 =\
    \ 0;\n    long tri_sum59 = 0;\n    long tri_sum60 = 0;\n    \n}\nint main() {\n\
    \    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  status: Exception
  stderr: 'tmp014s09o7: /tmp/tmp014s09o7.cpp:90: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102340
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    long a = 1, b = 2, c = 3;\n    long\
    \ d = 1;\n    long temp;\n    long sum = 0;\n    long limit = (long) sqrt(n);\n\
    \    long index = 0;\n    while(index < limit) {\n        temp = a + b + c;\n\
    \        sum += temp;\n        if(sum > n) {\n            break;\n        }\n\
    \        result.push_back(temp);\n        if(sum % 2 == 0) {\n            a +=\
    \ d;\n        }\n        else {\n            b += d;\n        }\n        c +=\
    \ d;\n        index++;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = tri;\n    assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n \
    \   assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n    assert(candidate((6)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n    assert(candidate((7)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80,\
    \ 9, 99, 10, 120, 11})));\n    assert(candidate((0)) == (std::vector<long>({1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({1, 3})));\n}\n"
  status: Exception
  stderr: 'tmp0g7o3gjj: /tmp/tmp0g7o3gjj.cpp:46: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102340
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    long a = 1;\n    long b = 2;\n    long\
    \ c = 3;\n    long d = a + b + c;\n    long temp;\n    if (n % 2 == 0) {\n   \
    \     for (int i = 0; i < n; i++) {\n            result.push_back(a);\n      \
    \      a = b;\n            b = c;\n            c = d;\n            d = a + b +\
    \ c;\n        }\n    } else {\n        for (int i = 0; i < n; i++) {\n       \
    \     result.push_back(b);\n            a = b;\n            b = c;\n         \
    \   c = d;\n            d = a + b + c;\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  status: Exception
  stderr: 'tmphume8rzw: /tmp/tmphume8rzw.cpp:46: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102340
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res;\n    if (n == 1)\n        res.push_back(1);\n\
    \    else if (n % 2 == 0)\n        res.push_back(tri(n - 1) + tri(n - 2));\n \
    \   else\n        res.push_back(tri(n - 1) + tri(n - 2) + tri(n + 1));\n    return\
    \ res;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpetpvpqx_.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmpetpvpqx_.cpp:23:34: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018std::vector<long\
    \ int>\u2019)\n   23 |         res.push_back(tri(n - 1) + tri(n - 2));\n     \
    \ |                       ~~~~~~~~~~ ^ ~~~~~~~~~~\n      |                   \
    \       |            |\n      |                          |            vector<[...]>\n\
    \      |                          vector<[...]>\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpetpvpqx_.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:423:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpetpvpqx_.cpp:23:45:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   23 |         res.push_back(tri(n - 1) + tri(n - 2));\n      |           \
    \                                  ^\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpetpvpqx_.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:1216:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::move_iterator<_IteratorL>\
    \ std::operator+(typename std::move_iterator<_IteratorL>::difference_type, const\
    \ std::move_iterator<_IteratorL>&)\u2019\n 1216 |     ope"
  stdout: ''
  timestamp: 1660102339
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    if (n == 1)\n        result.push_back(1);\n\
    \    else if (n % 2 == 0)\n        result.push_back(tri(n - 1) + tri(n - 2));\n\
    \    else\n        result.push_back(tri(n - 1) + tri(n - 2) + tri(n + 1));\n \
    \   return result;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvlo3wudh.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmpvlo3wudh.cpp:23:37: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018std::vector<long\
    \ int>\u2019)\n   23 |         result.push_back(tri(n - 1) + tri(n - 2));\n  \
    \    |                          ~~~~~~~~~~ ^ ~~~~~~~~~~\n      |             \
    \                |            |\n      |                             |       \
    \     vector<[...]>\n      |                             vector<[...]>\nIn file\
    \ included from /usr/include/c++/9/bits/stl_algobase.h:67,\n                 from\
    \ /usr/include/c++/9/bits/specfun.h:45,\n                 from /usr/include/c++/9/cmath:1927,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpvlo3wudh.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:423:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpvlo3wudh.cpp:23:48:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   23 |         result.push_back(tri(n - 1) + tri(n - 2));\n      |        \
    \                                        ^\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpvlo3wudh.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:1216:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::move_iterator<_IteratorL>\
    \ std::operator+(typename std::move_iterator<_IteratorL>::difference_type, const\
    \ std::move_iterator<_IteratorL>"
  stdout: ''
  timestamp: 1660102339
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res;\n    long a = 1;\n    long b = 1;\n    long\
    \ c = 1;\n    long d = 1;\n    long temp;\n    long sum = 0;\n    long tri_sum\
    \ = 0;\n    long tri_sum2 = 0;\n    long tri_sum3 = 0;\n    long tri_sum4 = 0;\n\
    \    long tri_sum5 = 0;\n    long tri_sum6 = 0;\n    long tri_sum7 = 0;\n    long\
    \ tri_sum8 = 0;\n    long tri_sum9 = 0;\n    long tri_sum10 = 0;\n    long tri_sum11\
    \ = 0;\n    long tri_sum12 = 0;\n    long tri_sum13 = 0;\n    long tri_sum14 =\
    \ 0;\n    long tri_sum15 = 0;\n    long tri_sum16 = 0;\n    long tri_sum17 = 0;\n\
    \    long tri_sum18 = 0;\n    long tri_sum19 = 0;\n    long tri_sum20 = 0;\n \
    \   long tri_sum21 = 0;\n    long tri_sum22 = 0;\n    long tri_sum23 = 0;\n  \
    \  long tri_sum24 = 0;\n    long tri_sum25 = 0;\n    long tri_sum26 = 0;\n   \
    \ long tri_sum27 = 0;\n    long tri_sum28 = 0;\n    long tri_sum29 = 0;\n    long\
    \ tri_sum30 = 0;\n    long tri_sum31 = 0;\n    long tri_sum32 = 0;\n    long tri_sum33\
    \ = 0;\n    long tri_sum34 = 0;\n    long tri_sum35 = 0;\n    long tri_sum36 =\
    \ 0;\n    long tri_sum37 = 0;\n    long tri_sum38 = 0;\n    long tri_sum39 = 0;\n\
    \    long tri_sum40 = 0;\n    long tri_sum41 = 0;\n    long tri_sum42 = 0;\n \
    \   long tri_sum43 = 0;\n    long tri_sum44 = 0;\n    long tri_sum45 = 0;\n  \
    \  long tri_sum46 = 0;\n    long tri_sum47 = 0;\n    long tri_sum48 = 0;\n   \
    \ long tri_sum49 = 0;\n    long tri_sum50 = 0;\n    long tri_sum51 = 0;\n    long\
    \ tri_sum52 = 0;\n    long tri_sum53 = 0;\n    long tri_sum54 = 0;\n    long tri_sum55\
    \ = 0;\n    long tri_sum56 = 0;\n    long tri_sum57 = 0;\n    long tri_sum58 =\
    \ 0;\n    long tri_sum59 = 0;\n    long tri_sum60 = 0;\n    \n}\nint main() {\n\
    \    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  status: Exception
  stderr: 'tmpqgpvdfs0: /tmp/tmpqgpvdfs0.cpp:90: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102339
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res;\n    if (n == 0) return res;\n    if (n ==\
    \ 1) return { 3 };\n    if (n % 2 == 0) {\n        long a = tri(n - 1);\n    \
    \    long b = tri(n - 2);\n        res.push_back(a);\n        res.push_back(b);\n\
    \        res.push_back(a+b);\n    } else {\n        long a = tri(n - 1);\n   \
    \     long b = tri(n - 2);\n        res.push_back(a);\n        res.push_back(b);\n\
    \        res.push_back(b+a);\n    }\n    return res;\n}\nint main() {\n    auto\
    \ candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1, 3, 2,\
    \ 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpedfmorp2.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmpedfmorp2.cpp:23:21: error: cannot convert \u2018std::vector<long\
    \ int>\u2019 to \u2018long int\u2019 in initialization\n   23 |         long a\
    \ = tri(n - 1);\n      |                  ~~~^~~~~~~\n      |                \
    \     |\n      |                     std::vector<long int>\n/tmp/tmpedfmorp2.cpp:24:21:\
    \ error: cannot convert \u2018std::vector<long int>\u2019 to \u2018long int\u2019\
    \ in initialization\n   24 |         long b = tri(n - 2);\n      |           \
    \       ~~~^~~~~~~\n      |                     |\n      |                   \
    \  std::vector<long int>\n/tmp/tmpedfmorp2.cpp:29:21: error: cannot convert \u2018\
    std::vector<long int>\u2019 to \u2018long int\u2019 in initialization\n   29 |\
    \         long a = tri(n - 1);\n      |                  ~~~^~~~~~~\n      | \
    \                    |\n      |                     std::vector<long int>\n/tmp/tmpedfmorp2.cpp:30:21:\
    \ error: cannot convert \u2018std::vector<long int>\u2019 to \u2018long int\u2019\
    \ in initialization\n   30 |         long b = tri(n - 2);\n      |           \
    \       ~~~^~~~~~~\n      |                     |\n      |                   \
    \  std::vector<long int>\n"
  stdout: ''
  timestamp: 1660102339
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res;\n    if (n == 0) res.push_back(3);\n    if\
    \ (n == 1) res.push_back(1);\n    if (n == 2) res.push_back(2);\n    if (n % 2\
    \ == 0) res.push_back(tri(n - 1) + tri(n - 2) + tri(n + 1));\n    if (n % 2 ==\
    \ 1) res.push_back(tri(n - 1) + tri(n - 2));\n    return res;\n}\nint main() {\n\
    \    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpy4by5t3h.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmpy4by5t3h.cpp:23:46: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018std::vector<long\
    \ int>\u2019)\n   23 |     if (n % 2 == 0) res.push_back(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1));\n      |                                   ~~~~~~~~~~ ^ ~~~~~~~~~~\n\
    \      |                                      |            |\n      |        \
    \                              |            vector<[...]>\n      |           \
    \                           vector<[...]>\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpy4by5t3h.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:423:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpy4by5t3h.cpp:23:57:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   23 |     if (n % 2 == 0) res.push_back(tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1));\n      |                                                         ^\nIn\
    \ file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n            \
    \     from /usr/include/c++/9/bits/specfun.h:45,\n                 from /usr/include/c++/9/cmath:1927,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpy4by5t3h.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:1216:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::move_iterator<_IteratorL>\
    \ std::operator+(typen"
  stdout: ''
  timestamp: 1660102339
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res;\n    if(n<=1)\n    {\n        res.push_back(n);\n\
    \        return res;\n    }\n    long tri_1 = tri(n - 1) + tri(n - 2);\n    long\
    \ tri_2 = tri(n - 1) + tri(n - 2) + tri(n + 1);\n    res.push_back(tri_1);\n \
    \   res.push_back(tri_2);\n    return res;\n}\nint main() {\n    auto candidate\
    \ = tri;\n    assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n \
    \   assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n    assert(candidate((6)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n    assert(candidate((7)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80,\
    \ 9, 99, 10, 120, 11})));\n    assert(candidate((0)) == (std::vector<long>({1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({1, 3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpf0e3vwcg.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmpf0e3vwcg.cpp:25:29: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018std::vector<long\
    \ int>\u2019)\n   25 |     long tri_1 = tri(n - 1) + tri(n - 2);\n      |    \
    \              ~~~~~~~~~~ ^ ~~~~~~~~~~\n      |                     |        \
    \    |\n      |                     |            vector<[...]>\n      |      \
    \               vector<[...]>\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpf0e3vwcg.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:423:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpf0e3vwcg.cpp:25:40:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   25 |     long tri_1 = tri(n - 1) + tri(n - 2);\n      |                 \
    \                       ^\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpf0e3vwcg.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:1216:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::move_iterator<_IteratorL>\
    \ std::operator+(typename std::move_iterator<_IteratorL>::difference_type, const\
    \ std::move_iterator<_IteratorL>&)\u2019\n 1216 |     operator+(typename move_iterator<_Iterat"
  stdout: ''
  timestamp: 1660102339
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    if (n == 0) result.push_back(3);\n\
    \    else if (n % 2 == 0) result.push_back(tri(n - 1) + tri(n - 2) + tri(n - 1));\n\
    \    else result.push_back(tri(n - 1) + tri(n - 2) + tri(n + 1));\n    return\
    \ result;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjmepgvc4.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmpjmepgvc4.cpp:21:54: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018std::vector<long\
    \ int>\u2019)\n   21 |     else if (n % 2 == 0) result.push_back(tri(n - 1) +\
    \ tri(n - 2) + tri(n - 1));\n      |                                         \
    \  ~~~~~~~~~~ ^ ~~~~~~~~~~\n      |                                          \
    \    |            |\n      |                                              |  \
    \          vector<[...]>\n      |                                            \
    \  vector<[...]>\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpjmepgvc4.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:423:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpjmepgvc4.cpp:21:65:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   21 |     else if (n % 2 == 0) result.push_back(tri(n - 1) + tri(n - 2) +\
    \ tri(n - 1));\n      |                                                      \
    \           ^\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpjmepgvc4.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:1216:5:\
    \ note: candidate: \u2018template<class _Iterator> const"
  stdout: ''
  timestamp: 1660102340
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res;\n    if (n == 1)\n        res.push_back(1);\n\
    \    else if (n == 2)\n        res.push_back(3);\n    else\n    {\n        long\
    \ a = tri(n - 1);\n        long b = tri(n - 2);\n        long c = tri(n + 1);\n\
    \        res.push_back(a);\n        res.push_back(b);\n        res.push_back(c);\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplw165791.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmplw165791.cpp:26:21: error: cannot convert \u2018std::vector<long\
    \ int>\u2019 to \u2018long int\u2019 in initialization\n   26 |         long a\
    \ = tri(n - 1);\n      |                  ~~~^~~~~~~\n      |                \
    \     |\n      |                     std::vector<long int>\n/tmp/tmplw165791.cpp:27:21:\
    \ error: cannot convert \u2018std::vector<long int>\u2019 to \u2018long int\u2019\
    \ in initialization\n   27 |         long b = tri(n - 2);\n      |           \
    \       ~~~^~~~~~~\n      |                     |\n      |                   \
    \  std::vector<long int>\n/tmp/tmplw165791.cpp:28:21: error: cannot convert \u2018\
    std::vector<long int>\u2019 to \u2018long int\u2019 in initialization\n   28 |\
    \         long c = tri(n + 1);\n      |                  ~~~^~~~~~~\n      | \
    \                    |\n      |                     std::vector<long int>\n"
  stdout: ''
  timestamp: 1660102339
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    long a = 1;\n    long b = 2;\n    long\
    \ c = 3;\n    long d = a + b + c;\n    long e = (a + b + c) / 2;\n    long f =\
    \ e + a + b;\n    long g = f + c + e;\n    long h = (f + c + e) / 2;\n    long\
    \ i = g + h + f;\n    long j = (g + h + f) / 2;\n    long k = (g + h + f) / 3;\n\
    \    long l = (g + h + f) / 4;\n    long m = (g + h + f) / 5;\n    long n = (g\
    \ + h + f) / 6;\n    long o = (g + h + f) / 7;\n    long p = (g + h + f) / 8;\n\
    \    long q = (g + h + f) / 9;\n    long r = (g + h + f) / 10;\n    long s = (g\
    \ + h + f) / 11;\n    long t = (g + h + f) / 12;\n    long u = (g + h + f) / 13;\n\
    \    long v = (g + h + f) / 14;\n    long w = (g + h + f) / 15;\n    long x =\
    \ (g + h + f) / 16;\n    long y = (g + h + f) / 17;\n    long z = (g + h + f)\
    \ / 18;\n    long a1 = a + a + a + a;\n    long a2 = a1 + a1 + a1;\n    long a3\
    \ = a2 + a2 + a2;\n    long a4 = a3 + a3 + a3;\n    long a5 = a4 + a4 + a4;\n\
    \    long a6 = a5 + a5 + a5;\n    long a7 = a6 + a6 + a6;\n    long a8 = a7 +\
    \ a7 + a7;\n    long a9 = a8 + a8 + a8;\n    long a10 = a9 + a9 + a9;\n    long\
    \ a11 = a10 + a10 + a10;\n    long a12 = a11 + a11 + a11;\n    long a13 = a12\
    \ + a12 + a12;\n    long a14 = a13 + a13 + a13;\n    long a15 = a14 + a14 + a14;\n\
    \    long a16 = a15 + a15 + a15;\n    long a17 = a16 + a16 + a16;\n    long a18\
    \ = a17 + a17 + a17;\n    long a19 = a18 + a18 + a18;\n    long a20 = a19 + a19\
    \ + a19;\n    long a21 = a20 + a20 + a20;\n    long a22 = a2\n}\nint main() {\n\
    \    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4ea21qjh.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmp4ea21qjh.cpp:33:10: error: declaration of \u2018long int\
    \ n\u2019 shadows a parameter\n   33 |     long n = (g + h + f) / 6;\n      |\
    \          ^\n/tmp/tmp4ea21qjh.cpp:68:1: error: expected \u2018,\u2019 or \u2018\
    ;\u2019 before \u2018}\u2019 token\n   68 | }\n      | ^\n/tmp/tmp4ea21qjh.cpp:68:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660102339
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res;\n    long a = 0, b = 1, c = 1;\n    long temp;\n\
    \    long count = 0;\n    while(n != 0) {\n        temp = n;\n        n = temp\
    \ % 2;\n        temp = temp / 2;\n        temp = a + b + c;\n        a = b;\n\
    \        b = c;\n        c = temp;\n        res.push_back(temp);\n        count++;\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660102344
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    long a = 1;\n    long b = 2;\n    long\
    \ c = 3;\n    long d = 4;\n    long sum = 0;\n    long temp;\n    long sum2;\n\
    \    long sum3;\n    long sum4;\n    long sum5;\n    long sum6;\n    long sum7;\n\
    \    long sum8;\n    long sum9;\n    long sum10;\n    long sum11;\n    long sum12;\n\
    \    long sum13;\n    long sum14;\n    long sum15;\n    long sum16;\n    long\
    \ sum17;\n    long sum18;\n    long sum19;\n    long sum20;\n    long sum21;\n\
    \    long sum22;\n    long sum23;\n    long sum24;\n    long sum25;\n    long\
    \ sum26;\n    long sum27;\n    long sum28;\n    long sum29;\n    long sum30;\n\
    \    long sum31;\n    long sum32;\n    long sum33;\n    long sum34;\n    long\
    \ sum35;\n    long sum36;\n    long sum37;\n    long sum38;\n    long sum39;\n\
    \    long sum40;\n    long sum41;\n    long sum42;\n    long sum43;\n    long\
    \ sum44;\n    long sum45;\n    long sum46;\n    long sum47;\n    long sum48;\n\
    \    long sum49;\n    long sum50;\n    long sum51;\n    long sum52;\n    long\
    \ sum53;\n    long sum54;\n    long sum55;\n    long sum56;\n    long sum57;\n\
    \    long sum58;\n    long sum59;\n    long sum60;\n    long sum61;\n    long\
    \ sum62;\n    long sum63;\n    long sum64;\n    long sum65;\n    long sum66;\n\
    \    long sum67;\n    long sum68;\n    long sum69;\n    long sum70;\n    long\
    \ sum71;\n    long sum72;\n    long sum73;\n    long sum74;\n    long sum75;\n\
    \    long sum76;\n    long sum77;\n    long sum78;\n    long sum79;\n    long\
    \ sum80;\n    long sum81;\n    long sum82;\n    long sum83;\n    long sum\n}\n\
    int main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpi895h4sl.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmpi895h4sl.cpp:109:1: error: expected initializer before\
    \ \u2018}\u2019 token\n  109 | }\n      | ^\n/tmp/tmpi895h4sl.cpp:109:1: warning:\
    \ no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660102339
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    if (n == 0)\n        return result;\n\
    \    if (n == 1)\n        result.push_back(3);\n    else\n        result.push_back(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1));\n    return result;\n}\nint main() {\n    auto\
    \ candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1, 3, 2,\
    \ 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9vao581z.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmp9vao581z.cpp:25:37: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018std::vector<long\
    \ int>\u2019)\n   25 |         result.push_back(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1));\n      |                          ~~~~~~~~~~ ^ ~~~~~~~~~~\n      |  \
    \                           |            |\n      |                          \
    \   |            vector<[...]>\n      |                             vector<[...]>\n\
    In file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n           \
    \      from /usr/include/c++/9/bits/specfun.h:45,\n                 from /usr/include/c++/9/cmath:1927,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmp9vao581z.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:423:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmp9vao581z.cpp:25:48:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   25 |         result.push_back(tri(n - 1) + tri(n - 2) + tri(n + 1));\n  \
    \    |                                                ^\nIn file included from\
    \ /usr/include/c++/9/bits/stl_algobase.h:67,\n                 from /usr/include/c++/9/bits/specfun.h:45,\n\
    \                 from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmp9vao581z.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:1216:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::move_iterator<_IteratorL>\
    \ std::operator+(typename std::move_iterator<_IteratorL>::difference_type, const\
    \ std:"
  stdout: ''
  timestamp: 1660102339
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res;\n    if (n == 1)\n        res.push_back(n);\n\
    \    else if (n % 2 == 0)\n        res.push_back(tri(n - 1) + tri(n - 2));\n \
    \   else\n        res.push_back(tri(n - 1) + tri(n - 2) + tri(n + 1));\n    return\
    \ res;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5egdvlrt.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmp5egdvlrt.cpp:23:34: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018std::vector<long\
    \ int>\u2019)\n   23 |         res.push_back(tri(n - 1) + tri(n - 2));\n     \
    \ |                       ~~~~~~~~~~ ^ ~~~~~~~~~~\n      |                   \
    \       |            |\n      |                          |            vector<[...]>\n\
    \      |                          vector<[...]>\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmp5egdvlrt.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:423:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmp5egdvlrt.cpp:23:45:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   23 |         res.push_back(tri(n - 1) + tri(n - 2));\n      |           \
    \                                  ^\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmp5egdvlrt.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:1216:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::move_iterator<_IteratorL>\
    \ std::operator+(typename std::move_iterator<_IteratorL>::difference_type, const\
    \ std::move_iterator<_IteratorL>&)\u2019\n 1216 |     ope"
  stdout: ''
  timestamp: 1660102339
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res;\n    if (n == 0) return res;\n    if (n ==\
    \ 1) return { 1 };\n    if (n % 2 == 0) {\n        res.push_back(tri(n - 1) +\
    \ tri(n - 2));\n    } else {\n        res.push_back(tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1));\n    }\n    return res;\n}\nint main() {\n    auto candidate =\
    \ tri;\n    assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n   \
    \ assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n    assert(candidate((6)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n    assert(candidate((7)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80,\
    \ 9, 99, 10, 120, 11})));\n    assert(candidate((0)) == (std::vector<long>({1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({1, 3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcirqgp5u.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmpcirqgp5u.cpp:23:34: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018std::vector<long\
    \ int>\u2019)\n   23 |         res.push_back(tri(n - 1) + tri(n - 2));\n     \
    \ |                       ~~~~~~~~~~ ^ ~~~~~~~~~~\n      |                   \
    \       |            |\n      |                          |            vector<[...]>\n\
    \      |                          vector<[...]>\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpcirqgp5u.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:423:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpcirqgp5u.cpp:23:45:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   23 |         res.push_back(tri(n - 1) + tri(n - 2));\n      |           \
    \                                  ^\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpcirqgp5u.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:1216:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::move_iterator<_IteratorL>\
    \ std::operator+(typename std::move_iterator<_IteratorL>::difference_type, const\
    \ std::move_iterator<_IteratorL>&)\u2019\n 1216 |     ope"
  stdout: ''
  timestamp: 1660102339
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res;\n    if (n == 0) return res;\n    if (n ==\
    \ 1) return res;\n    if (n == 2) return res;\n    if (n % 2 == 0) {\n       \
    \ res.push_back(n);\n        res.push_back(1);\n        res.push_back(3);\n  \
    \      res.push_back(8);\n        return res;\n    }\n    res.push_back(n);\n\
    \    res.push_back(1);\n    res.push_back(3);\n    res.push_back(8);\n    res.push_back(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1));\n    return res;\n}\nint main() {\n    auto\
    \ candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1, 3, 2,\
    \ 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpiqc0pzdr.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmpiqc0pzdr.cpp:34:30: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018std::vector<long\
    \ int>\u2019)\n   34 |     res.push_back(tri(n - 1) + tri(n - 2) + tri(n + 1));\n\
    \      |                   ~~~~~~~~~~ ^ ~~~~~~~~~~\n      |                  \
    \    |            |\n      |                      |            vector<[...]>\n\
    \      |                      vector<[...]>\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpiqc0pzdr.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:423:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpiqc0pzdr.cpp:34:41:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   34 |     res.push_back(tri(n - 1) + tri(n - 2) + tri(n + 1));\n      |  \
    \                                       ^\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpiqc0pzdr.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:1216:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::move_iterator<_IteratorL>\
    \ std::operator+(typename std::move_iterator<_IteratorL>::difference_type, const\
    \ std::move_iterator<_IteratorL>&)\u2019\n 1216 |     opera"
  stdout: ''
  timestamp: 1660102339
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res;\n    if (n == 0) return res;\n    if (n ==\
    \ 1) return { 1 };\n    if (n % 2 == 0) return tri(n - 1) + tri(n - 2) + tri(n\
    \ - 1);\n    return tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n\
    \ - 1) + tri(n - 2);\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpo0u_1gq8.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmpo0u_1gq8.cpp:22:39: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018std::vector<long\
    \ int>\u2019)\n   22 |     if (n % 2 == 0) return tri(n - 1) + tri(n - 2) + tri(n\
    \ - 1);\n      |                            ~~~~~~~~~~ ^ ~~~~~~~~~~\n      | \
    \                              |            |\n      |                       \
    \        |            vector<[...]>\n      |                               vector<[...]>\n\
    In file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n           \
    \      from /usr/include/c++/9/bits/specfun.h:45,\n                 from /usr/include/c++/9/cmath:1927,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpo0u_1gq8.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:423:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpo0u_1gq8.cpp:22:50:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   22 |     if (n % 2 == 0) return tri(n - 1) + tri(n - 2) + tri(n - 1);\n \
    \     |                                                  ^\nIn file included from\
    \ /usr/include/c++/9/bits/stl_algobase.h:67,\n                 from /usr/include/c++/9/bits/specfun.h:45,\n\
    \                 from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpo0u_1gq8.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:1216:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::move_iterator<_IteratorL>\
    \ std::operator+(typename std::move_iterator<_IteratorL>::difference_type"
  stdout: ''
  timestamp: 1660102339
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res;\n    long a = 1;\n    long b = 2;\n    long\
    \ c = 3;\n    long d = a + b + c;\n    if (n % 2 == 0) {\n        res.push_back(a);\n\
    \        res.push_back(b);\n        res.push_back(c);\n        res.push_back(d);\n\
    \    } else {\n        res.push_back(a);\n        res.push_back(b);\n        res.push_back(c);\n\
    \        res.push_back(d);\n        res.push_back(a + b + c);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  status: Exception
  stderr: 'tmpq1megu3e: /tmp/tmpq1megu3e.cpp:40: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102340
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    if (n == 0)\n        return result;\n\
    \    if (n == 1)\n        result.push_back(3);\n    return result;\n}\nint main()\
    \ {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  status: Exception
  stderr: 'tmpqxq640kw: /tmp/tmpqxq640kw.cpp:28: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102340
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    if (n == 1)\n        result.push_back(3);\n\
    \    else if (n % 2 == 0)\n        result.push_back(tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1));\n    else\n        result.push_back(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n - 3) + tri(n - 4) + tri(n - 5));\n    return result;\n}\nint main()\
    \ {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsi3csbnk.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmpsi3csbnk.cpp:23:37: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018std::vector<long\
    \ int>\u2019)\n   23 |         result.push_back(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1));\n      |                          ~~~~~~~~~~ ^ ~~~~~~~~~~\n      |  \
    \                           |            |\n      |                          \
    \   |            vector<[...]>\n      |                             vector<[...]>\n\
    In file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n           \
    \      from /usr/include/c++/9/bits/specfun.h:45,\n                 from /usr/include/c++/9/cmath:1927,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpsi3csbnk.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:423:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpsi3csbnk.cpp:23:48:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   23 |         result.push_back(tri(n - 1) + tri(n - 2) + tri(n + 1));\n  \
    \    |                                                ^\nIn file included from\
    \ /usr/include/c++/9/bits/stl_algobase.h:67,\n                 from /usr/include/c++/9/bits/specfun.h:45,\n\
    \                 from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpsi3csbnk.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:1216:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::move_iterator<_IteratorL>\
    \ std::operator+(typename std::move_iterator<_IteratorL>::difference_type, const\
    \ std:"
  stdout: ''
  timestamp: 1660102339
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    long a = 1;\n    long b = 2;\n    long\
    \ c = 3;\n    long d = a + b + c;\n    long temp;\n    if (n % 2 == 0) {\n   \
    \     temp = tri(n - 1) + tri(n - 2) + tri(n + 1);\n        result.push_back(temp);\n\
    \    }\n    else {\n        temp = tri(n - 1) + tri(n - 2) + tri(n + 1);\n   \
    \     result.push_back(temp);\n    }\n    return result;\n}\nint main() {\n  \
    \  auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmph691sblz.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmph691sblz.cpp:26:27: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018std::vector<long\
    \ int>\u2019)\n   26 |         temp = tri(n - 1) + tri(n - 2) + tri(n + 1);\n\
    \      |                ~~~~~~~~~~ ^ ~~~~~~~~~~\n      |                   | \
    \           |\n      |                   |            vector<[...]>\n      | \
    \                  vector<[...]>\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmph691sblz.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:423:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmph691sblz.cpp:26:38:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   26 |         temp = tri(n - 1) + tri(n - 2) + tri(n + 1);\n      |      \
    \                                ^\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmph691sblz.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:1216:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::move_iterator<_IteratorL>\
    \ std::operator+(typename std::move_iterator<_IteratorL>::difference_type, const\
    \ std::move_iterator<_IteratorL>&)\u2019\n 1216 |     operator+(typename move_iter"
  stdout: ''
  timestamp: 1660102338
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    long a = 1;\n    long b = 2;\n    long\
    \ c = 1;\n    long d = 1;\n    long temp;\n    long sum = 0;\n    long tri_sum\
    \ = 0;\n    long tri_sum2 = 0;\n    long tri_sum3 = 0;\n    long tri_sum4 = 0;\n\
    \    long tri_sum5 = 0;\n    long tri_sum6 = 0;\n    long tri_sum7 = 0;\n    long\
    \ tri_sum8 = 0;\n    long tri_sum9 = 0;\n    long tri_sum10 = 0;\n    long tri_sum11\
    \ = 0;\n    long tri_sum12 = 0;\n    long tri_sum13 = 0;\n    long tri_sum14 =\
    \ 0;\n    long tri_sum15 = 0;\n    long tri_sum16 = 0;\n    long tri_sum17 = 0;\n\
    \    long tri_sum18 = 0;\n    long tri_sum19 = 0;\n    long tri_sum20 = 0;\n \
    \   long tri_sum21 = 0;\n    long tri_sum22 = 0;\n    long tri_sum23 = 0;\n  \
    \  long tri_sum24 = 0;\n    long tri_sum25 = 0;\n    long tri_sum26 = 0;\n   \
    \ long tri_sum27 = 0;\n    long tri_sum28 = 0;\n    long tri_sum29 = 0;\n    long\
    \ tri_sum30 = 0;\n    long tri_sum31 = 0;\n    long tri_sum32 = 0;\n    long tri_sum33\
    \ = 0;\n    long tri_sum34 = 0;\n    long tri_sum35 = 0;\n    long tri_sum36 =\
    \ 0;\n    long tri_sum37 = 0;\n    long tri_sum38 = 0;\n    long tri_sum39 = 0;\n\
    \    long tri_sum40 = 0;\n    long tri_sum41 = 0;\n    long tri_sum42 = 0;\n \
    \   long tri_sum43 = 0;\n    long tri_sum44 = 0;\n    long tri_sum45 = 0;\n  \
    \  long tri_sum46 = 0;\n    long tri_sum47 = 0;\n    long tri_sum48 = 0;\n   \
    \ long tri_sum49 = 0;\n    long tri_sum50 = 0;\n    long tri_sum51 = 0;\n    long\
    \ tri_sum52 = 0;\n    long tri_sum53 = 0;\n    long tri_sum54 = 0;\n    long tri_sum55\
    \ = 0;\n    long tri_sum56 = 0;\n    long tri_sum57 = 0;\n    long tri_sum58 =\
    \ 0;\n    long tri_sum59 = 0;\n    long tri_sum60 = 0;\n    \n}\nint main() {\n\
    \    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  status: Exception
  stderr: 'tmpap6swg6z: /tmp/tmpap6swg6z.cpp:90: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102340
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res;\n    if (n == 0)\n        res.push_back(0);\n\
    \    else if (n == 1)\n        res.push_back(1);\n    else\n    {\n        long\
    \ a = tri(n - 1) + tri(n - 2);\n        long b = tri(n - 1) + tri(n - 2) + tri(n\
    \ - 3);\n        res.push_back(a);\n        res.push_back(b);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpp67tmw_x.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmpp67tmw_x.cpp:26:29: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018std::vector<long\
    \ int>\u2019)\n   26 |         long a = tri(n - 1) + tri(n - 2);\n      |    \
    \              ~~~~~~~~~~ ^ ~~~~~~~~~~\n      |                     |        \
    \    |\n      |                     |            vector<[...]>\n      |      \
    \               vector<[...]>\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpp67tmw_x.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:423:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpp67tmw_x.cpp:26:40:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   26 |         long a = tri(n - 1) + tri(n - 2);\n      |                 \
    \                       ^\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpp67tmw_x.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:1216:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::move_iterator<_IteratorL>\
    \ std::operator+(typename std::move_iterator<_IteratorL>::difference_type, const\
    \ std::move_iterator<_IteratorL>&)\u2019\n 1216 |     operator+(typename move_iterator<_Iterat"
  stdout: ''
  timestamp: 1660102339
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res;\n    if (n == 0) return res;\n    if (n ==\
    \ 1) return res;\n    if (n == 2) return res;\n    if (n % 2 == 0) return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1);\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n - 3) + tri(n - 4) + tri(n - 5) + tri(n - 6);\n}\nint main() {\n\
    \    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdkisueir.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmpdkisueir.cpp:23:39: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018std::vector<long\
    \ int>\u2019)\n   23 |     if (n % 2 == 0) return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1);\n      |                            ~~~~~~~~~~ ^ ~~~~~~~~~~\n      | \
    \                              |            |\n      |                       \
    \        |            vector<[...]>\n      |                               vector<[...]>\n\
    In file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n           \
    \      from /usr/include/c++/9/bits/specfun.h:45,\n                 from /usr/include/c++/9/cmath:1927,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpdkisueir.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:423:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpdkisueir.cpp:23:50:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   23 |     if (n % 2 == 0) return tri(n - 1) + tri(n - 2) + tri(n + 1);\n \
    \     |                                                  ^\nIn file included from\
    \ /usr/include/c++/9/bits/stl_algobase.h:67,\n                 from /usr/include/c++/9/bits/specfun.h:45,\n\
    \                 from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpdkisueir.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:1216:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::move_iterator<_IteratorL>\
    \ std::operator+(typename std::move_iterator<_IteratorL>::difference_type"
  stdout: ''
  timestamp: 1660102341
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    long a = 1, b = 2, c = 3;\n    long\
    \ temp;\n    long temp2;\n    long temp3;\n    long temp4;\n    long temp5;\n\
    \    long temp6;\n    long temp7;\n    long temp8;\n    long temp9;\n    long\
    \ temp10;\n    long temp11;\n    long temp12;\n    long temp13;\n    long temp14;\n\
    \    long temp15;\n    long temp16;\n    long temp17;\n    long temp18;\n    long\
    \ temp19;\n    long temp20;\n    long temp21;\n    long temp22;\n    long temp23;\n\
    \    long temp24;\n    long temp25;\n    long temp26;\n    long temp27;\n    long\
    \ temp28;\n    long temp29;\n    long temp30;\n    long temp31;\n    long temp32;\n\
    \    long temp33;\n    long temp34;\n    long temp35;\n    long temp36;\n    long\
    \ temp37;\n    long temp38;\n    long temp39;\n    long temp40;\n    long temp41;\n\
    \    long temp42;\n    long temp43;\n    long temp44;\n    long temp45;\n    long\
    \ temp46;\n    long temp47;\n    long temp48;\n    long temp49;\n    long temp50;\n\
    \    long temp51;\n    long temp52;\n    long temp53;\n    long temp54;\n    long\
    \ temp55;\n    long temp56;\n    long temp57;\n    long temp58;\n    long temp59;\n\
    \    long temp60;\n    long temp61;\n    long temp62;\n    long temp63;\n    long\
    \ temp64;\n    long temp65;\n    long temp66;\n    long temp67;\n    long temp68;\n\
    \    long temp69;\n    long temp70;\n    long temp71;\n    long temp72;\n    long\
    \ temp73;\n    long temp74;\n    long temp75;\n    long temp76;\n    long temp77;\n\
    \    long temp78;\n    long temp79;\n    long temp80;\n    long temp81;\n    long\
    \ temp82;\n    long temp83;\n    long temp84;\n    long temp85;\n    long temp86;\n\
    \    \n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3)) ==\
    \ (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  status: Exception
  stderr: 'tmpsi1j0r7t: /tmp/tmpsi1j0r7t.cpp:111: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102342
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res;\n    long a = 0, b = 1, c = 1;\n    long sum\
    \ = 0;\n    for(int i = 0; i <= n; i++) {\n        sum += c;\n        c = a +\
    \ b;\n        a = b;\n        b = sum;\n        res.push_back(c);\n    }\n   \
    \ return res;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  status: Exception
  stderr: 'tmpz3e9wav4: /tmp/tmpz3e9wav4.cpp:33: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102342
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    if (n == 0)\n        result.push_back(1);\n\
    \    else if (n % 2 == 0)\n        result.push_back(tri(n - 1) + tri(n - 2));\n\
    \    else\n        result.push_back(tri(n - 1) + tri(n - 2) + tri(n + 1));\n \
    \   return result;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpay18r9vh.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmpay18r9vh.cpp:23:37: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018std::vector<long\
    \ int>\u2019)\n   23 |         result.push_back(tri(n - 1) + tri(n - 2));\n  \
    \    |                          ~~~~~~~~~~ ^ ~~~~~~~~~~\n      |             \
    \                |            |\n      |                             |       \
    \     vector<[...]>\n      |                             vector<[...]>\nIn file\
    \ included from /usr/include/c++/9/bits/stl_algobase.h:67,\n                 from\
    \ /usr/include/c++/9/bits/specfun.h:45,\n                 from /usr/include/c++/9/cmath:1927,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpay18r9vh.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:423:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpay18r9vh.cpp:23:48:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   23 |         result.push_back(tri(n - 1) + tri(n - 2));\n      |        \
    \                                        ^\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpay18r9vh.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:1216:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::move_iterator<_IteratorL>\
    \ std::operator+(typename std::move_iterator<_IteratorL>::difference_type, const\
    \ std::move_iterator<_IteratorL>"
  stdout: ''
  timestamp: 1660102341
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res;\n    if (n == 0) return res;\n    if (n ==\
    \ 1) return res;\n    if (n % 2 == 0) return tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1);\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n -\
    \ 4) + tri(n - 5) + tri(n - 6) + tri(n - 7);\n}\nint main() {\n    auto candidate\
    \ = tri;\n    assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n \
    \   assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n    assert(candidate((6)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n    assert(candidate((7)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80,\
    \ 9, 99, 10, 120, 11})));\n    assert(candidate((0)) == (std::vector<long>({1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({1, 3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdaxt0auq.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmpdaxt0auq.cpp:22:39: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018std::vector<long\
    \ int>\u2019)\n   22 |     if (n % 2 == 0) return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1);\n      |                            ~~~~~~~~~~ ^ ~~~~~~~~~~\n      | \
    \                              |            |\n      |                       \
    \        |            vector<[...]>\n      |                               vector<[...]>\n\
    In file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n           \
    \      from /usr/include/c++/9/bits/specfun.h:45,\n                 from /usr/include/c++/9/cmath:1927,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpdaxt0auq.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:423:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpdaxt0auq.cpp:22:50:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   22 |     if (n % 2 == 0) return tri(n - 1) + tri(n - 2) + tri(n + 1);\n \
    \     |                                                  ^\nIn file included from\
    \ /usr/include/c++/9/bits/stl_algobase.h:67,\n                 from /usr/include/c++/9/bits/specfun.h:45,\n\
    \                 from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpdaxt0auq.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:1216:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::move_iterator<_IteratorL>\
    \ std::operator+(typename std::move_iterator<_IteratorL>::difference_type"
  stdout: ''
  timestamp: 1660102342
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res;\n    long a = 0, b = 1, c = 1;\n    long sum\
    \ = 0;\n    long temp;\n    long count = 0;\n    while(count < n) {\n        temp\
    \ = a + b + c;\n        sum += temp;\n        count += 1;\n        a = b;\n  \
    \      b = c;\n        c = temp;\n    }\n    res.push_back(sum);\n    while(count\
    \ < n) {\n        temp = a + b + c;\n        sum += temp;\n        count += 1;\n\
    \        a = b;\n        b = c;\n        c = temp;\n        res.push_back(sum);\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  status: Exception
  stderr: 'tmpnfvbpdyp: /tmp/tmpnfvbpdyp.cpp:46: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102342
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    long tri_sum = 0;\n    long tri_sum_temp\
    \ = 0;\n    long tri_sum_temp2 = 0;\n    long tri_sum_temp3 = 0;\n    long tri_sum_temp4\
    \ = 0;\n    long tri_sum_temp5 = 0;\n    long tri_sum_temp6 = 0;\n    long tri_sum_temp7\
    \ = 0;\n    long tri_sum_temp8 = 0;\n    long tri_sum_temp9 = 0;\n    long tri_sum_temp10\
    \ = 0;\n    long tri_sum_temp11 = 0;\n    long tri_sum_temp12 = 0;\n    long tri_sum_temp13\
    \ = 0;\n    long tri_sum_temp14 = 0;\n    long tri_sum_temp15 = 0;\n    long tri_sum_temp16\
    \ = 0;\n    long tri_sum_temp17 = 0;\n    long tri_sum_temp18 = 0;\n    long tri_sum_temp19\
    \ = 0;\n    long tri_sum_temp20 = 0;\n    long tri_sum_temp21 = 0;\n    long tri_sum_temp22\
    \ = 0;\n    long tri_sum_temp23 = 0;\n    long tri_sum_temp24 = 0;\n    long tri_sum_temp25\
    \ = 0;\n    long tri_sum_temp26 = 0;\n    long tri_sum_temp27 = 0;\n    long tri_sum_temp28\
    \ = 0;\n    long tri_sum_temp29 = 0;\n    long tri_sum_temp30 = 0;\n    long tri_sum_temp31\
    \ = 0;\n    long tri_sum_temp32 = 0;\n    long tri_sum_temp33 = 0;\n    long tri_sum_temp34\
    \ = 0;\n    long tri_sum_temp35 = 0;\n    long tri_sum_temp36 = 0;\n    long tri_sum_temp37\
    \ = 0;\n    long tri_sum_temp38 = 0;\n    long tri_sum_temp39 = 0;\n    long tri_sum_temp40\
    \ = 0;\n    long tri_sum_temp41 = 0;\n    long tri_sum_temp42 = 0;\n    long tri_sum_temp43\
    \ = 0;\n    long tri_sum_temp44 = 0;\n    long tri_sum_temp45 = 0;\n    long tri_sum_temp46\
    \ = 0;\n    long tri_sum_temp47 = 0;\n    long tri_sum_temp48 = 0;\n    long tri_sum_temp49\
    \ = 0;\n    long tri_sum_temp50 = 0;\n    long tri_sum_temp51 = 0;\n    long tri_sum_temp52\
    \ = 0;\n    long tri_sum_temp53 = 0;\n    long tri_sum_temp54 = 0;\n    long tri_sum_temp55\
    \ = 0;\n    long tri_sum_temp56 = 0;\n\n}\nint main() {\n    auto candidate =\
    \ tri;\n    assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n   \
    \ assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n    assert(candidate((6)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n    assert(candidate((7)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80,\
    \ 9, 99, 10, 120, 11})));\n    assert(candidate((0)) == (std::vector<long>({1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({1, 3})));\n}\n"
  status: Exception
  stderr: 'tmpbz5evjy5: /tmp/tmpbz5evjy5.cpp:81: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102342
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    long a = 1;\n    long b = 2;\n    long\
    \ c = 3;\n    long d = a + b + c;\n    long temp;\n    long temp2;\n    long temp3;\n\
    \    long temp4;\n    long temp5;\n    long temp6;\n    long temp7;\n    long\
    \ temp8;\n    long temp9;\n    long temp10;\n    long temp11;\n    long temp12;\n\
    \    long temp13;\n    long temp14;\n    long temp15;\n    long temp16;\n    long\
    \ temp17;\n    long temp18;\n    long temp19;\n    long temp20;\n    long temp21;\n\
    \    long temp22;\n    long temp23;\n    long temp24;\n    long temp25;\n    long\
    \ temp26;\n    long temp27;\n    long temp28;\n    long temp29;\n    long temp30;\n\
    \    long temp31;\n    long temp32;\n    long temp33;\n    long temp34;\n    long\
    \ temp35;\n    long temp36;\n    long temp37;\n    long temp38;\n    long temp39;\n\
    \    long temp40;\n    long temp41;\n    long temp42;\n    long temp43;\n    long\
    \ temp44;\n    long temp45;\n    long temp46;\n    long temp47;\n    long temp48;\n\
    \    long temp49;\n    long temp50;\n    long temp51;\n    long temp52;\n    long\
    \ temp53;\n    long temp54;\n    long temp55;\n    long temp56;\n    long temp57;\n\
    \    long temp58;\n    long temp59;\n    long temp60;\n    long temp61;\n    long\
    \ temp62;\n    long temp63;\n    long temp64;\n    long temp65;\n    long temp66;\n\
    \    long temp67;\n    long temp68;\n    long temp69;\n    long temp70;\n    long\
    \ temp71;\n    long temp72;\n    long temp73;\n    long temp74;\n    long temp75;\n\
    \    long temp76;\n    long temp77;\n    long temp78;\n    long temp79;\n    long\
    \ temp80;\n    long temp81;\n    long temp82;\n    long temp83;\n    long temp84;\n\
    }\nint main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  status: Exception
  stderr: 'tmpruu7t0n2: /tmp/tmpruu7t0n2.cpp:111: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102342
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res;\n    if (n == 0) return res;\n    if (n ==\
    \ 1) return res;\n    if (n == 2) return { 1, 2, 3 };\n    long mid = n / 2;\n\
    \    long a = tri(mid);\n    long b = tri(mid - 1);\n    long c = tri(mid + 1);\n\
    \    res.push_back(a);\n    res.push_back(b);\n    res.push_back(c);\n    res.push_back(a);\n\
    \    res.push_back(b);\n    res.push_back(c);\n    res.push_back(a);\n    res.push_back(b);\n\
    \    res.push_back(c);\n    return res;\n}\nint main() {\n    auto candidate =\
    \ tri;\n    assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n   \
    \ assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n    assert(candidate((6)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n    assert(candidate((7)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80,\
    \ 9, 99, 10, 120, 11})));\n    assert(candidate((0)) == (std::vector<long>({1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({1, 3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl32t5bom.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmpl32t5bom.cpp:24:17: error: cannot convert \u2018std::vector<long\
    \ int>\u2019 to \u2018long int\u2019 in initialization\n   24 |     long a = tri(mid);\n\
    \      |              ~~~^~~~~\n      |                 |\n      |           \
    \      std::vector<long int>\n/tmp/tmpl32t5bom.cpp:25:17: error: cannot convert\
    \ \u2018std::vector<long int>\u2019 to \u2018long int\u2019 in initialization\n\
    \   25 |     long b = tri(mid - 1);\n      |              ~~~^~~~~~~~~\n     \
    \ |                 |\n      |                 std::vector<long int>\n/tmp/tmpl32t5bom.cpp:26:17:\
    \ error: cannot convert \u2018std::vector<long int>\u2019 to \u2018long int\u2019\
    \ in initialization\n   26 |     long c = tri(mid + 1);\n      |             \
    \ ~~~^~~~~~~~~\n      |                 |\n      |                 std::vector<long\
    \ int>\n"
  stdout: ''
  timestamp: 1660102341
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    long a = 0, b = 1, c = 1;\n    long\
    \ sum = 0;\n    long temp;\n    long temp2;\n    long temp3;\n    long temp4;\n\
    \    long temp5;\n    long temp6;\n    long temp7;\n    long temp8;\n    long\
    \ temp9;\n    long temp10;\n    long temp11;\n    long temp12;\n    long temp13;\n\
    \    long temp14;\n    long temp15;\n    long temp16;\n    long temp17;\n    long\
    \ temp18;\n    long temp19;\n    long temp20;\n    long temp21;\n    long temp22;\n\
    \    long temp23;\n    long temp24;\n    long temp25;\n    long temp26;\n    long\
    \ temp27;\n    long temp28;\n    long temp29;\n    long temp30;\n    long temp31;\n\
    \    long temp32;\n    long temp33;\n    long temp34;\n    long temp35;\n    long\
    \ temp36;\n    long temp37;\n    long temp38;\n    long temp39;\n    long temp40;\n\
    \    long temp41;\n    long temp42;\n    long temp43;\n    long temp44;\n    long\
    \ temp45;\n    long temp46;\n    long temp47;\n    long temp48;\n    long temp49;\n\
    \    long temp50;\n    long temp51;\n    long temp52;\n    long temp53;\n    long\
    \ temp54;\n    long temp55;\n    long temp56;\n    long temp57;\n    long temp58;\n\
    \    long temp59;\n    long temp60;\n    long temp61;\n    long temp62;\n    long\
    \ temp63;\n    long temp64;\n    long temp65;\n    long temp66;\n    long temp67;\n\
    \    long temp68;\n    long temp69;\n    long temp70;\n    long temp71;\n    long\
    \ temp72;\n    long temp73;\n    long temp74;\n    long temp75;\n    long temp76;\n\
    \    long temp77;\n    long temp78;\n    long temp79;\n    long temp80;\n    long\
    \ temp81;\n    long temp82;\n    long temp83;\n    long temp84;\n    long temp85;\n\
    \    long \n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpf2wq8_8y.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmpf2wq8_8y.cpp:108:1: error: expected unqualified-id before\
    \ \u2018}\u2019 token\n  108 | }\n      | ^\n/tmp/tmpf2wq8_8y.cpp:108:1: warning:\
    \ no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660102341
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    if (n == 1)\n        result.push_back(3);\n\
    \    else if (n % 2 == 0)\n        result.push_back(tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1));\n    else\n        result.push_back(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n - 3) + tri(n - 4));\n    return result;\n}\nint main() {\n    auto\
    \ candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1, 3, 2,\
    \ 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5esl055p.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmp5esl055p.cpp:23:37: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018std::vector<long\
    \ int>\u2019)\n   23 |         result.push_back(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1));\n      |                          ~~~~~~~~~~ ^ ~~~~~~~~~~\n      |  \
    \                           |            |\n      |                          \
    \   |            vector<[...]>\n      |                             vector<[...]>\n\
    In file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n           \
    \      from /usr/include/c++/9/bits/specfun.h:45,\n                 from /usr/include/c++/9/cmath:1927,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmp5esl055p.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:423:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmp5esl055p.cpp:23:48:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   23 |         result.push_back(tri(n - 1) + tri(n - 2) + tri(n + 1));\n  \
    \    |                                                ^\nIn file included from\
    \ /usr/include/c++/9/bits/stl_algobase.h:67,\n                 from /usr/include/c++/9/bits/specfun.h:45,\n\
    \                 from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmp5esl055p.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:1216:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::move_iterator<_IteratorL>\
    \ std::operator+(typename std::move_iterator<_IteratorL>::difference_type, const\
    \ std:"
  stdout: ''
  timestamp: 1660102341
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    if (n == 0)\n        return result;\n\
    \    if (n == 1)\n        result.push_back(3);\n    else\n        result.push_back(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1));\n    return result;\n}\nint main() {\n    auto\
    \ candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1, 3, 2,\
    \ 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9vao581z.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmp9vao581z.cpp:25:37: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018std::vector<long\
    \ int>\u2019)\n   25 |         result.push_back(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1));\n      |                          ~~~~~~~~~~ ^ ~~~~~~~~~~\n      |  \
    \                           |            |\n      |                          \
    \   |            vector<[...]>\n      |                             vector<[...]>\n\
    In file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n           \
    \      from /usr/include/c++/9/bits/specfun.h:45,\n                 from /usr/include/c++/9/cmath:1927,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmp9vao581z.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:423:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmp9vao581z.cpp:25:48:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   25 |         result.push_back(tri(n - 1) + tri(n - 2) + tri(n + 1));\n  \
    \    |                                                ^\nIn file included from\
    \ /usr/include/c++/9/bits/stl_algobase.h:67,\n                 from /usr/include/c++/9/bits/specfun.h:45,\n\
    \                 from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmp9vao581z.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:1216:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::move_iterator<_IteratorL>\
    \ std::operator+(typename std::move_iterator<_IteratorL>::difference_type, const\
    \ std:"
  stdout: ''
  timestamp: 1660102339
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    long a = 1;\n    long b = 1;\n    long\
    \ c = 1;\n    long d = 1;\n    long temp;\n    long sum = 0;\n    long i;\n  \
    \  for(i = 0; i < n; i++) {\n        temp = a + b + c + d;\n        a = b;\n \
    \       b = c;\n        c = d;\n        d = temp;\n        result.push_back(temp);\n\
    \        sum += temp;\n    }\n    result.push_back(sum);\n    return result;\n\
    }\nint main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  status: Exception
  stderr: 'tmpnwbss07j: /tmp/tmpnwbss07j.cpp:41: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102342
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    if (n == 1)\n        result.push_back(3);\n\
    \    else if (n % 2 == 0)\n        result.push_back(tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1));\n    else\n        result.push_back(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n - 3) + tri(n - 4));\n    return result;\n}\nint main() {\n    auto\
    \ candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1, 3, 2,\
    \ 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5esl055p.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmp5esl055p.cpp:23:37: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018std::vector<long\
    \ int>\u2019)\n   23 |         result.push_back(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1));\n      |                          ~~~~~~~~~~ ^ ~~~~~~~~~~\n      |  \
    \                           |            |\n      |                          \
    \   |            vector<[...]>\n      |                             vector<[...]>\n\
    In file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n           \
    \      from /usr/include/c++/9/bits/specfun.h:45,\n                 from /usr/include/c++/9/cmath:1927,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmp5esl055p.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:423:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmp5esl055p.cpp:23:48:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   23 |         result.push_back(tri(n - 1) + tri(n - 2) + tri(n + 1));\n  \
    \    |                                                ^\nIn file included from\
    \ /usr/include/c++/9/bits/stl_algobase.h:67,\n                 from /usr/include/c++/9/bits/specfun.h:45,\n\
    \                 from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmp5esl055p.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:1216:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::move_iterator<_IteratorL>\
    \ std::operator+(typename std::move_iterator<_IteratorL>::difference_type, const\
    \ std:"
  stdout: ''
  timestamp: 1660102341
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res;\n    if (n == 0) return res;\n    if (n ==\
    \ 1) return { 1 };\n    if (n == 2) return { 1, 2, 3 };\n    if (n % 2 == 0) {\n\
    \        long a = tri(n / 2);\n        long b = tri(n / 2 + 1);\n        for (long\
    \ i = 0; i < n; i++) {\n            res.push_back(a[i] + b[i]);\n        }\n \
    \       return res;\n    } else {\n        long a = tri(n / 2);\n        long\
    \ b = tri(n / 2 + 1);\n        for (long i = 0; i < n; i++) {\n            res.push_back(a[i]\
    \ + b[i]);\n        }\n        return res;\n    }\n}\nint main() {\n    auto candidate\
    \ = tri;\n    assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n \
    \   assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n    assert(candidate((6)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n    assert(candidate((7)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80,\
    \ 9, 99, 10, 120, 11})));\n    assert(candidate((0)) == (std::vector<long>({1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({1, 3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb_pfi30_.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmpb_pfi30_.cpp:24:21: error: cannot convert \u2018std::vector<long\
    \ int>\u2019 to \u2018long int\u2019 in initialization\n   24 |         long a\
    \ = tri(n / 2);\n      |                  ~~~^~~~~~~\n      |                \
    \     |\n      |                     std::vector<long int>\n/tmp/tmpb_pfi30_.cpp:25:21:\
    \ error: cannot convert \u2018std::vector<long int>\u2019 to \u2018long int\u2019\
    \ in initialization\n   25 |         long b = tri(n / 2 + 1);\n      |       \
    \           ~~~^~~~~~~~~~~\n      |                     |\n      |           \
    \          std::vector<long int>\n/tmp/tmpb_pfi30_.cpp:27:30: error: invalid types\
    \ \u2018long int[long int]\u2019 for array subscript\n   27 |             res.push_back(a[i]\
    \ + b[i]);\n      |                              ^\n/tmp/tmpb_pfi30_.cpp:27:37:\
    \ error: invalid types \u2018long int[long int]\u2019 for array subscript\n  \
    \ 27 |             res.push_back(a[i] + b[i]);\n      |                      \
    \               ^\n/tmp/tmpb_pfi30_.cpp:31:21: error: cannot convert \u2018std::vector<long\
    \ int>\u2019 to \u2018long int\u2019 in initialization\n   31 |         long a\
    \ = tri(n / 2);\n      |                  ~~~^~~~~~~\n      |                \
    \     |\n      |                     std::vector<long int>\n/tmp/tmpb_pfi30_.cpp:32:21:\
    \ error: cannot convert \u2018std::vector<long int>\u2019 to \u2018long int\u2019\
    \ in initialization\n   32 |         long b = tri(n / 2 + 1);\n      |       \
    \           ~~~^~~~~~~~~~~\n      |                     |\n      |           \
    \          std::vector<long int>\n/tmp/tmpb_pfi30_.cpp:34:30: error: invalid types\
    \ \u2018long int[long int]\u2019 for array subscript\n   34 |             res.push_back(a[i]\
    \ + b[i]);\n      |                              ^\n/tmp/tmpb_pfi30_.cpp:34:37:\
    \ error: invalid types \u2018long int[long int]\u2019 for array subscript\n  \
    \ 34 |             res.push_back(a[i] + b[i]);\n      |                      \
    \               ^\n"
  stdout: ''
  timestamp: 1660102341
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res;\n    long a = 3;\n    long b = 1;\n    long\
    \ c = 2;\n    long d = 1;\n    long temp;\n    long temp2;\n    long temp3;\n\
    \    long temp4;\n    long temp5;\n    long temp6;\n    long temp7;\n    long\
    \ temp8;\n    long temp9;\n    long temp10;\n    long temp11;\n    long temp12;\n\
    \    long temp13;\n    long temp14;\n    long temp15;\n    long temp16;\n    long\
    \ temp17;\n    long temp18;\n    long temp19;\n    long temp20;\n    long temp21;\n\
    \    long temp22;\n    long temp23;\n    long temp24;\n    long temp25;\n    long\
    \ temp26;\n    long temp27;\n    long temp28;\n    long temp29;\n    long temp30;\n\
    \    long temp31;\n    long temp32;\n    long temp33;\n    long temp34;\n    long\
    \ temp35;\n    long temp36;\n    long temp37;\n    long temp38;\n    long temp39;\n\
    \    long temp40;\n    long temp41;\n    long temp42;\n    long temp43;\n    long\
    \ temp44;\n    long temp45;\n    long temp46;\n    long temp47;\n    long temp48;\n\
    \    long temp49;\n    long temp50;\n    long temp51;\n    long temp52;\n    long\
    \ temp53;\n    long temp54;\n    long temp55;\n    long temp56;\n    long temp57;\n\
    \    long temp58;\n    long temp59;\n    long temp60;\n    long temp61;\n    long\
    \ temp62;\n    long temp63;\n    long temp64;\n    long temp65;\n    long temp66;\n\
    \    long temp67;\n    long temp68;\n    long temp69;\n    long temp70;\n    long\
    \ temp71;\n    long temp72;\n    long temp73;\n    long temp74;\n    long temp75;\n\
    \    long temp76;\n    long temp77;\n    long temp78;\n    long temp79;\n    long\
    \ temp80;\n    long temp81;\n    long temp82;\n    long temp83;\n    long temp84;\n\
    \    long \n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpz43qo7db.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmpz43qo7db.cpp:109:1: error: expected unqualified-id before\
    \ \u2018}\u2019 token\n  109 | }\n      | ^\n/tmp/tmpz43qo7db.cpp:109:1: warning:\
    \ no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660102341
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res;\n    long a = 1;\n    long b = 2;\n    long\
    \ c = 3;\n    long d = a + b + c;\n    if (n % 2 == 0) {\n        res.push_back(a);\n\
    \        res.push_back(b);\n        res.push_back(c);\n    } else {\n        res.push_back(d);\n\
    \        res.push_back(a + b);\n        res.push_back(c + d);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  status: Exception
  stderr: 'tmp1eekj3ju: /tmp/tmp1eekj3ju.cpp:37: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102342
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    long a = 3;\n    long b = 0;\n    long\
    \ c = 0;\n    long d = 1;\n    long temp;\n    long sum = 0;\n    long tri_sum\
    \ = 0;\n    long tri_sum2 = 0;\n    long tri_sum3 = 0;\n    long tri_sum4 = 0;\n\
    \    long tri_sum5 = 0;\n    long tri_sum6 = 0;\n    long tri_sum7 = 0;\n    long\
    \ tri_sum8 = 0;\n    long tri_sum9 = 0;\n    long tri_sum10 = 0;\n    long tri_sum11\
    \ = 0;\n    long tri_sum12 = 0;\n    long tri_sum13 = 0;\n    long tri_sum14 =\
    \ 0;\n    long tri_sum15 = 0;\n    long tri_sum16 = 0;\n    long tri_sum17 = 0;\n\
    \    long tri_sum18 = 0;\n    long tri_sum19 = 0;\n    long tri_sum20 = 0;\n \
    \   long tri_sum21 = 0;\n    long tri_sum22 = 0;\n    long tri_sum23 = 0;\n  \
    \  long tri_sum24 = 0;\n    long tri_sum25 = 0;\n    long tri_sum26 = 0;\n   \
    \ long tri_sum27 = 0;\n    long tri_sum28 = 0;\n    long tri_sum29 = 0;\n    long\
    \ tri_sum30 = 0;\n    long tri_sum31 = 0;\n    long tri_sum32 = 0;\n    long tri_sum33\
    \ = 0;\n    long tri_sum34 = 0;\n    long tri_sum35 = 0;\n    long tri_sum36 =\
    \ 0;\n    long tri_sum37 = 0;\n    long tri_sum38 = 0;\n    long tri_sum39 = 0;\n\
    \    long tri_sum40 = 0;\n    long tri_sum41 = 0;\n    long tri_sum42 = 0;\n \
    \   long tri_sum43 = 0;\n    long tri_sum44 = 0;\n    long tri_sum45 = 0;\n  \
    \  long tri_sum46 = 0;\n    long tri_sum47 = 0;\n    long tri_sum48 = 0;\n   \
    \ long tri_sum49 = 0;\n    long tri_sum50 = 0;\n    long tri_sum51 = 0;\n    long\
    \ tri_sum52 = 0;\n    long tri_sum53 = 0;\n    long tri_sum54 = 0;\n    long tri_sum55\
    \ = 0;\n    long tri_sum56 = 0;\n    long tri_sum57 = 0;\n    long tri_sum58 =\
    \ 0;\n    long tri_sum59 = 0;\n    long tri_sum60 = 0;\n    \n}\nint main() {\n\
    \    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  status: Exception
  stderr: 'tmp_51g4rak: /tmp/tmp_51g4rak.cpp:90: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102342
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res;\n    if (n == 0) return res;\n    if (n ==\
    \ 1) return { 3 };\n    if (n % 2 == 0) return { tri(n / 2) + tri(n - 1) + tri(n\
    \ - 2) };\n    return { tri(n / 2) + tri(n - 1) + tri(n - 2) + tri(n / 2) };\n\
    }\nint main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6j3bh8i1.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmp6j3bh8i1.cpp:22:41: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018std::vector<long\
    \ int>\u2019)\n   22 |     if (n % 2 == 0) return { tri(n / 2) + tri(n - 1) +\
    \ tri(n - 2) };\n      |                              ~~~~~~~~~~ ^ ~~~~~~~~~~\n\
    \      |                                 |            |\n      |             \
    \                    |            vector<[...]>\n      |                     \
    \            vector<[...]>\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmp6j3bh8i1.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:423:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmp6j3bh8i1.cpp:22:52:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   22 |     if (n % 2 == 0) return { tri(n / 2) + tri(n - 1) + tri(n - 2) };\n\
    \      |                                                    ^\nIn file included\
    \ from /usr/include/c++/9/bits/stl_algobase.h:67,\n                 from /usr/include/c++/9/bits/specfun.h:45,\n\
    \                 from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmp6j3bh8i1.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:1216:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::move_iterator<_IteratorL>\
    \ std::operator+(typename std::move_iterator<_IteratorL"
  stdout: ''
  timestamp: 1660102341
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res;\n    if(n == 0)\n        return res;\n    if(n\
    \ == 1)\n        return std::vector<long>(1, 3);\n    if(n == 2)\n        return\
    \ std::vector<long>(1, 3, 2);\n    if(n == 3)\n        return std::vector<long>(1,\
    \ 3, 2, 8);\n    long mid = n / 2;\n    long left1 = tri(mid);\n    long left2\
    \ = tri(mid - 1);\n    long right1 = tri(mid + 1);\n    long right2 = tri(mid);\n\
    \    long sum = left1 + left2 + right1 + right2;\n    res.push_back(sum);\n  \
    \  res.push_back(sum + left1);\n    res.push_back(sum + left2);\n    res.push_back(sum\
    \ + right1);\n    res.push_back(sum + right2);\n    return res;\n}\nint main()\
    \ {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpm5quu0o7.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmpm5quu0o7.cpp:25:41: error: no matching function for call\
    \ to \u2018std::vector<long int>::vector(int, int, int)\u2019\n   25 |       \
    \  return std::vector<long>(1, 3, 2);\n      |                               \
    \          ^\nIn file included from /usr/include/c++/9/vector:67,\n          \
    \       from /usr/include/c++/9/functional:62,\n                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n\
    \                 from /usr/include/c++/9/algorithm:71,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n                 from\
    \ /tmp/tmpm5quu0o7.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:650:2: note: candidate:\
    \ \u2018template<class _InputIterator, class> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\u2019\n  650 |  vector(_InputIterator\
    \ __first, _InputIterator __last,\n      |  ^~~~~~\n/usr/include/c++/9/bits/stl_vector.h:650:2:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/9/bits/stl_algobase.h:65,\n                 from /usr/include/c++/9/bits/specfun.h:45,\n\
    \                 from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpm5quu0o7.cpp:2:\n/usr/include/c++/9/bits/stl_iterator_base_types.h:\
    \ In substitution of \u2018template<class _InIter> using _RequireInputIter = typename\
    \ std::enable_if<std::is_convertible<typename std::iterator_traits<_Iterator>::iterator_category,\
    \ std::input_iterator_tag>::value>::type [with _InIter = int]\u2019:\n/usr/include/c++/9/bits/stl_vector.h:649:9:\
    \   required from here\n/usr/include/c++/9/bits/stl_iterator_base_types.h:232:11:\
    \ error: no type named \u2018iterator_category\u2019 in \u2018struct std::iterator_traits<int>\u2019\
    \n  232 |     using _RequireInputIter = typename\n      |           ^~~~~~~~~~~~~~~~~\n\
    In file included from /usr/include/c++/9/vector:67,\n                 from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/i"
  stdout: ''
  timestamp: 1660102342
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    long tri_1 = 0, tri_2 = 1, tri_3 =\
    \ 2;\n    long tri_4 = tri_1 + tri_2 + tri_3;\n    long tri_5 = tri_4;\n    long\
    \ tri_6 = tri_5;\n    long tri_7 = tri_6;\n    long tri_8 = tri_7;\n    long tri_9\
    \ = tri_8;\n    long tri_10 = tri_9;\n    long tri_11 = tri_10;\n    long tri_12\
    \ = tri_11;\n    long tri_13 = tri_12;\n    long tri_14 = tri_13;\n    long tri_15\
    \ = tri_14;\n    long tri_16 = tri_15;\n    long tri_17 = tri_16;\n    long tri_18\
    \ = tri_17;\n    long tri_19 = tri_18;\n    long tri_20 = tri_19;\n    long tri_21\
    \ = tri_20;\n    long tri_22 = tri_21;\n    long tri_23 = tri_22;\n    long tri_24\
    \ = tri_23;\n    long tri_25 = tri_24;\n    long tri_26 = tri_25;\n    long tri_27\
    \ = tri_26;\n    long tri_28 = tri_27;\n    long tri_29 = tri_28;\n    long tri_30\
    \ = tri_29;\n    long tri_31 = tri_30;\n    long tri_32 = tri_31;\n    long tri_33\
    \ = tri_32;\n    long tri_34 = tri_33;\n    long tri_35 = tri_34;\n    long tri_36\
    \ = tri_35;\n    long tri_37 = tri_36;\n    long tri_38 = tri_37;\n    long tri_39\
    \ = tri_38;\n    long tri_40 = tri_39;\n    long tri_41 = tri_40;\n    long tri_42\
    \ = tri_41;\n    long tri_43 = tri_42;\n    long tri_44 = tri_43;\n    long tri_45\
    \ = tri_44;\n    long tri_46 = tri_45;\n    long tri_47 = tri_46;\n    long tri_48\
    \ = tri_47;\n    long tri_49 = tri_48;\n    long tri_50 = tri_49;\n    long tri_51\
    \ = tri\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpeyk8bgfg.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmpeyk8bgfg.cpp:68:19: error: invalid conversion from \u2018\
    std::vector<long int> (*)(long int)\u2019 to \u2018long int\u2019 [-fpermissive]\n\
    \   68 |     long tri_51 = tri\n      |                   ^~~\n      |       \
    \            |\n      |                   std::vector<long int> (*)(long int)\n\
    /tmp/tmpeyk8bgfg.cpp:69:1: error: expected \u2018,\u2019 or \u2018;\u2019 before\
    \ \u2018}\u2019 token\n   69 | }\n      | ^\n/tmp/tmpeyk8bgfg.cpp:69:1: warning:\
    \ no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660102342
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    if (n <= 2) {\n        result.push_back(1);\n\
    \        result.push_back(2);\n        return result;\n    }\n    long tri_1 =\
    \ tri(n - 1) + tri(n - 2);\n    long tri_2 = tri(n - 1) + tri(n - 2) + tri(n -\
    \ 3);\n    result.push_back(tri_1);\n    result.push_back(tri_2);\n    return\
    \ result;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpys59lvsp.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmpys59lvsp.cpp:25:29: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018std::vector<long\
    \ int>\u2019)\n   25 |     long tri_1 = tri(n - 1) + tri(n - 2);\n      |    \
    \              ~~~~~~~~~~ ^ ~~~~~~~~~~\n      |                     |        \
    \    |\n      |                     |            vector<[...]>\n      |      \
    \               vector<[...]>\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpys59lvsp.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:423:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpys59lvsp.cpp:25:40:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   25 |     long tri_1 = tri(n - 1) + tri(n - 2);\n      |                 \
    \                       ^\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpys59lvsp.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:1216:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::move_iterator<_IteratorL>\
    \ std::operator+(typename std::move_iterator<_IteratorL>::difference_type, const\
    \ std::move_iterator<_IteratorL>&)\u2019\n 1216 |     operator+(typename move_iterator<_Iterat"
  stdout: ''
  timestamp: 1660102342
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res;\n    if (n == 1)\n        res.push_back(3);\n\
    \    else if (n % 2 == 0)\n        res.push_back(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1));\n    else\n        res.push_back(tri(n - 1) + tri(n - 2) + tri(n + 1)\
    \ + tri(n - 3));\n    return res;\n}\nint main() {\n    auto candidate = tri;\n\
    \    assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkpnsjvvv.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmpkpnsjvvv.cpp:23:34: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018std::vector<long\
    \ int>\u2019)\n   23 |         res.push_back(tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1));\n      |                       ~~~~~~~~~~ ^ ~~~~~~~~~~\n      |       \
    \                   |            |\n      |                          |       \
    \     vector<[...]>\n      |                          vector<[...]>\nIn file included\
    \ from /usr/include/c++/9/bits/stl_algobase.h:67,\n                 from /usr/include/c++/9/bits/specfun.h:45,\n\
    \                 from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpkpnsjvvv.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:423:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpkpnsjvvv.cpp:23:45:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   23 |         res.push_back(tri(n - 1) + tri(n - 2) + tri(n + 1));\n     \
    \ |                                             ^\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpkpnsjvvv.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:1216:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::move_iterator<_IteratorL>\
    \ std::operator+(typename std::move_iterator<_IteratorL>::difference_type, const\
    \ std::move_iterator<_Itera"
  stdout: ''
  timestamp: 1660102342
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    long a = 1;\n    long b = 2;\n    long\
    \ c = 1;\n    long d = 1;\n    long sum = 0;\n    long temp = 0;\n    long temp1\
    \ = 0;\n    long temp2 = 0;\n    long temp3 = 0;\n    long temp4 = 0;\n    long\
    \ temp5 = 0;\n    long temp6 = 0;\n    long temp7 = 0;\n    long temp8 = 0;\n\
    \    long temp9 = 0;\n    long temp10 = 0;\n    long temp11 = 0;\n    long temp12\
    \ = 0;\n    long temp13 = 0;\n    long temp14 = 0;\n    long temp15 = 0;\n   \
    \ long temp16 = 0;\n    long temp17 = 0;\n    long temp18 = 0;\n    long temp19\
    \ = 0;\n    long temp20 = 0;\n    long temp21 = 0;\n    long temp22 = 0;\n   \
    \ long temp23 = 0;\n    long temp24 = 0;\n    long temp25 = 0;\n    long temp26\
    \ = 0;\n    long temp27 = 0;\n    long temp28 = 0;\n    long temp29 = 0;\n   \
    \ long temp30 = 0;\n    long temp31 = 0;\n    long temp32 = 0;\n    long temp33\
    \ = 0;\n    long temp34 = 0;\n    long temp35 = 0;\n    long temp36 = 0;\n   \
    \ long temp37 = 0;\n    long temp38 = 0;\n    long temp39 = 0;\n    long temp40\
    \ = 0;\n    long temp41 = 0;\n    long temp42 = 0;\n    long temp43 = 0;\n   \
    \ long temp44 = 0;\n    long temp45 = 0;\n    long temp46 = 0;\n    long temp47\
    \ = 0;\n    long temp48 = 0;\n    long temp49 = 0;\n    long temp50 = 0;\n   \
    \ long temp51 = 0;\n    long temp52 = 0;\n    long temp53 = 0;\n    long temp54\
    \ = 0;\n    long temp55 = 0;\n    long temp56 = 0;\n    long temp57 = 0;\n   \
    \ long temp58 = 0;\n    long temp59 = 0;\n    long temp60 = 0;\n    long temp61\
    \ = 0;\n    long temp62 = 0;\n    long temp63 = 0;\n    long temp64 = 0;\n   \
    \ long temp65 = 0;\n    long temp66 = 0;\n    long temp67 = 0;\n    long temp68\
    \ = 0;\n    long temp69 = 0;\n    long temp70 = 0;\n    long temp71 = 0;\n   \
    \ long temp72 = 0;\n    long temp73 = 0;\n    long temp74 = 0;\n    long temp75\
    \ = 0;\n    long temp76 = 0;\n    long temp77 = 0;\n    long temp78 = 0;\n   \
    \ long temp79 = 0;\n    long temp80 = 0;\n    \n}\nint main() {\n    auto candidate\
    \ = tri;\n    assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n \
    \   assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n    assert(candidate((6)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n    assert(candidate((7)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80,\
    \ 9, 99, 10, 120, 11})));\n    assert(candidate((0)) == (std::vector<long>({1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({1, 3})));\n}\n"
  status: Exception
  stderr: 'tmp823me1am: /tmp/tmp823me1am.cpp:110: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102342
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res;\n    long tri_1 = 1, tri_2 = 2, tri_3 = 1;\n\
    \    long tri_n = tri_1;\n    long tri_n_1 = tri_2;\n    long tri_n_2 = tri_3;\n\
    \    long tri_n_3 = tri_n;\n    long tri_n_4 = tri_n_1;\n    long tri_n_5 = tri_n_2;\n\
    \    long tri_n_6 = tri_n_3;\n    long tri_n_7 = tri_n_4;\n    long tri_n_8 =\
    \ tri_n_5;\n    long tri_n_9 = tri_n_6;\n    long tri_n_10 = tri_n_7;\n    long\
    \ tri_n_11 = tri_n_8;\n    long tri_n_12 = tri_n_9;\n    long tri_n_13 = tri_n_10;\n\
    \    long tri_n_14 = tri_n_11;\n    long tri_n_15 = tri_n_12;\n    long tri_n_16\
    \ = tri_n_13;\n    long tri_n_17 = tri_n_14;\n    long tri_n_18 = tri_n_15;\n\
    \    long tri_n_19 = tri_n_16;\n    long tri_n_20 = tri_n_17;\n    long tri_n_21\
    \ = tri_n_18;\n    long tri_n_22 = tri_n_19;\n    long tri_n_23 = tri_n_20;\n\
    \    long tri_n_24 = tri_n_21;\n    long tri_n_25 = tri_n_22;\n    long tri_n_26\
    \ = tri_n_23;\n    long tri_n_27 = tri_n_24;\n    long tri_n_28 = tri_n_25;\n\
    \    long tri_n_29 = tri_n_26;\n    long tri_n_30 = tri_n_27;\n    long tri_n_31\
    \ = tri_n_28;\n    long tri_n_32 = tri_n_29;\n    long tri_n_33 = tri_n_30;\n\
    \    long tri_n_34 = tri_n_31;\n    long tri_n_35 = tri_n_32;\n    long tri_n_36\
    \ = tri_n_33;\n    long tri_n_37 = tri_n_34;\n    long tri_n_38 = tri_n_35;\n\
    \    long tri_n_39 = tri_n_36;\n    long tri_n_40 = tri_n_37\n}\nint main() {\n\
    \    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpg18ozdp2.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmpg18ozdp2.cpp:62:1: error: expected \u2018,\u2019 or \u2018\
    ;\u2019 before \u2018}\u2019 token\n   62 | }\n      | ^\n/tmp/tmpg18ozdp2.cpp:62:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660102342
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    if (n == 1)\n        result.push_back(3);\n\
    \    else if (n % 2 == 0)\n        result.push_back(tri(n - 1) + tri(n - 2) +\
    \ tri(n - 1));\n    else\n        result.push_back(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1));\n    return result;\n}\nint main() {\n    auto candidate = tri;\n   \
    \ assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzbd7w_uy.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmpzbd7w_uy.cpp:23:37: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018std::vector<long\
    \ int>\u2019)\n   23 |         result.push_back(tri(n - 1) + tri(n - 2) + tri(n\
    \ - 1));\n      |                          ~~~~~~~~~~ ^ ~~~~~~~~~~\n      |  \
    \                           |            |\n      |                          \
    \   |            vector<[...]>\n      |                             vector<[...]>\n\
    In file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n           \
    \      from /usr/include/c++/9/bits/specfun.h:45,\n                 from /usr/include/c++/9/cmath:1927,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpzbd7w_uy.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:423:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpzbd7w_uy.cpp:23:48:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   23 |         result.push_back(tri(n - 1) + tri(n - 2) + tri(n - 1));\n  \
    \    |                                                ^\nIn file included from\
    \ /usr/include/c++/9/bits/stl_algobase.h:67,\n                 from /usr/include/c++/9/bits/specfun.h:45,\n\
    \                 from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpzbd7w_uy.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:1216:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::move_iterator<_IteratorL>\
    \ std::operator+(typename std::move_iterator<_IteratorL>::difference_type, const\
    \ std:"
  stdout: ''
  timestamp: 1660102341
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res;\n    if (n == 1)\n        res.push_back(3);\n\
    \    else if (n % 2 == 0)\n        res.push_back(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1));\n    else\n        res.push_back(tri(n - 1) + tri(n - 2) + tri(n + 1)\
    \ + tri(n - 3) + tri(n - 4) + tri(n - 5) + tri(n - 6));\n    return res;\n}\n\
    int main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjrt5fdo7.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmpjrt5fdo7.cpp:23:34: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018std::vector<long\
    \ int>\u2019)\n   23 |         res.push_back(tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1));\n      |                       ~~~~~~~~~~ ^ ~~~~~~~~~~\n      |       \
    \                   |            |\n      |                          |       \
    \     vector<[...]>\n      |                          vector<[...]>\nIn file included\
    \ from /usr/include/c++/9/bits/stl_algobase.h:67,\n                 from /usr/include/c++/9/bits/specfun.h:45,\n\
    \                 from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpjrt5fdo7.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:423:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpjrt5fdo7.cpp:23:45:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   23 |         res.push_back(tri(n - 1) + tri(n - 2) + tri(n + 1));\n     \
    \ |                                             ^\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpjrt5fdo7.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:1216:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::move_iterator<_IteratorL>\
    \ std::operator+(typename std::move_iterator<_IteratorL>::difference_type, const\
    \ std::move_iterator<_Itera"
  stdout: ''
  timestamp: 1660102342
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    long a = 1, b = 2, c = 3;\n    long\
    \ d = a + b + c;\n    long temp;\n    long tri_num = n;\n    while(tri_num > 0)\
    \ {\n        temp = tri_num % 2;\n        tri_num = (tri_num - temp) / 2;\n  \
    \      if(temp == 1) {\n            result.push_back(c);\n        }\n        else\
    \ {\n            result.push_back(b);\n        }\n        b = c;\n        c =\
    \ d;\n        d = a + b + c;\n        a = temp;\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  status: Exception
  stderr: 'tmp7hh3d43d: /tmp/tmp7hh3d43d.cpp:42: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102342
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res;\n    if (n == 1)\n        res.push_back(1);\n\
    \    else if (n % 2 == 0)\n        res.push_back(tri(n - 1) + tri(n - 2));\n \
    \   else\n        res.push_back(tri(n - 1) + tri(n - 2) + tri(n + 1));\n    return\
    \ res;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpetpvpqx_.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmpetpvpqx_.cpp:23:34: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018std::vector<long\
    \ int>\u2019)\n   23 |         res.push_back(tri(n - 1) + tri(n - 2));\n     \
    \ |                       ~~~~~~~~~~ ^ ~~~~~~~~~~\n      |                   \
    \       |            |\n      |                          |            vector<[...]>\n\
    \      |                          vector<[...]>\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpetpvpqx_.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:423:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpetpvpqx_.cpp:23:45:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   23 |         res.push_back(tri(n - 1) + tri(n - 2));\n      |           \
    \                                  ^\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpetpvpqx_.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:1216:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::move_iterator<_IteratorL>\
    \ std::operator+(typename std::move_iterator<_IteratorL>::difference_type, const\
    \ std::move_iterator<_IteratorL>&)\u2019\n 1216 |     ope"
  stdout: ''
  timestamp: 1660102339
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    long a = 1;\n    long b = 2;\n    long\
    \ c = 3;\n    long d = 4;\n    long e = 5;\n    long f = 6;\n    long g = 7;\n\
    \    long h = 8;\n    long i = 1;\n    long j = 2;\n    long k = 3;\n    long\
    \ l = 4;\n    long m = 5;\n    long n = 1;\n    long o = 2;\n    long p = 1;\n\
    \    long q = 3;\n    long r = 4;\n    long s = 5;\n    long t = 1;\n    long\
    \ u = 2;\n    long v = 3;\n    long w = 4;\n    long x = 5;\n    long y = 6;\n\
    \    long z = 7;\n    long a = 1;\n    long b = 2;\n    long c = 3;\n    long\
    \ d = 4;\n    long e = 5;\n    long f = 6;\n    long g = 7;\n    long h = 8;\n\
    \    long i = 1;\n    long j = 2;\n    long k = 3;\n    long l = 4;\n    long\
    \ m = 5;\n    long n = 1;\n    long o = 2;\n    long p = 1;\n    long q = 3;\n\
    \    long r = 4;\n    long s = 5;\n    long t = 1;\n    long u = 2;\n    long\
    \ v = 3;\n    long w = 4;\n    long x = 5;\n    long y = 6;\n    long z = 7;\n\
    \    long a = 1;\n    long b = 2;\n    long c = 3;\n    long d = 4;\n    long\
    \ e = 5;\n    long f = 6;\n    long g = 7;\n    long h = 8;\n    long i = 1;\n\
    \    long j = 2;\n    long k = 3;\n    long l = 4;\n    long m = 5;\n    long\
    \ n = 1;\n    long o = 2;\n    long p = 1;\n    long q = 3;\n    long r = 4;\n\
    \    long s = 5;\n    long t = 1;\n    long u = 2;\n    long v = 3;\n    long\
    \ w = 4;\n    long x = 5;\n    long y = 6;\n    long z = 7;\n    long a = 1;\n\
    \    long b = 2;\n    long c = 3;\n    long d = 4;\n    long e = 5;\n    long\
    \ f = 6;\n    long g = 7;\n    long h = 8;\n    long i = 1;\n    long j = 2;\n\
    \    long k = 3;\n    long l = 4;\n    long m = 5;\n    long n = 1;\n    long\
    \ o = 2;\n    long p = 1;\n    long q = 3;\n    long r = 4;\n    long s = 5;\n\
    \    long t = 1;\n    long u = 2;\n    long v = 3;\n    long w = 4;\n    \n}\n\
    int main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcvcj3j8n.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmpcvcj3j8n.cpp:33:10: error: declaration of \u2018long int\
    \ n\u2019 shadows a parameter\n   33 |     long n = 1;\n      |          ^\n/tmp/tmpcvcj3j8n.cpp:46:10:\
    \ error: redeclaration of \u2018long int a\u2019\n   46 |     long a = 1;\n  \
    \    |          ^\n/tmp/tmpcvcj3j8n.cpp:20:10: note: \u2018long int a\u2019 previously\
    \ declared here\n   20 |     long a = 1;\n      |          ^\n/tmp/tmpcvcj3j8n.cpp:47:10:\
    \ error: redeclaration of \u2018long int b\u2019\n   47 |     long b = 2;\n  \
    \    |          ^\n/tmp/tmpcvcj3j8n.cpp:21:10: note: \u2018long int b\u2019 previously\
    \ declared here\n   21 |     long b = 2;\n      |          ^\n/tmp/tmpcvcj3j8n.cpp:48:10:\
    \ error: redeclaration of \u2018long int c\u2019\n   48 |     long c = 3;\n  \
    \    |          ^\n/tmp/tmpcvcj3j8n.cpp:22:10: note: \u2018long int c\u2019 previously\
    \ declared here\n   22 |     long c = 3;\n      |          ^\n/tmp/tmpcvcj3j8n.cpp:49:10:\
    \ error: redeclaration of \u2018long int d\u2019\n   49 |     long d = 4;\n  \
    \    |          ^\n/tmp/tmpcvcj3j8n.cpp:23:10: note: \u2018long int d\u2019 previously\
    \ declared here\n   23 |     long d = 4;\n      |          ^\n/tmp/tmpcvcj3j8n.cpp:50:10:\
    \ error: redeclaration of \u2018long int e\u2019\n   50 |     long e = 5;\n  \
    \    |          ^\n/tmp/tmpcvcj3j8n.cpp:24:10: note: \u2018long int e\u2019 previously\
    \ declared here\n   24 |     long e = 5;\n      |          ^\n/tmp/tmpcvcj3j8n.cpp:51:10:\
    \ error: redeclaration of \u2018long int f\u2019\n   51 |     long f = 6;\n  \
    \    |          ^\n/tmp/tmpcvcj3j8n.cpp:25:10: note: \u2018long int f\u2019 previously\
    \ declared here\n   25 |     long f = 6;\n      |          ^\n/tmp/tmpcvcj3j8n.cpp:52:10:\
    \ error: redeclaration of \u2018long int g\u2019\n   52 |     long g = 7;\n  \
    \    |          ^\n/tmp/tmpcvcj3j8n.cpp:26:10: note: \u2018long int g\u2019 previously\
    \ declared here\n   26 |     long g = 7;\n      |          ^\n/tmp/tmpcvcj3j8n.cpp:53:10:\
    \ error: redeclaration of \u2018long int h\u2019\n   53 |     long h = 8;\n  \
    \    |          ^\n/tmp/tmpcvcj3j8n.cpp:27:10: note: \u2018long int h\u2019 previously\
    \ declared here\n   27 |     long h = 8;\n      |     "
  stdout: ''
  timestamp: 1660102342
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    long a = 3;\n    long b = 1;\n    long\
    \ c = 2;\n    long d = 1;\n    long temp;\n    long sum = 0;\n    long temp2;\n\
    \    long temp3;\n    long temp4;\n    long temp5;\n    long temp6;\n    long\
    \ temp7;\n    long temp8;\n    long temp9;\n    long temp10;\n    long temp11;\n\
    \    long temp12;\n    long temp13;\n    long temp14;\n    long temp15;\n    long\
    \ temp16;\n    long temp17;\n    long temp18;\n    long temp19;\n    long temp20;\n\
    \    long temp21;\n    long temp22;\n    long temp23;\n    long temp24;\n    long\
    \ temp25;\n    long temp26;\n    long temp27;\n    long temp28;\n    long temp29;\n\
    \    long temp30;\n    long temp31;\n    long temp32;\n    long temp33;\n    long\
    \ temp34;\n    long temp35;\n    long temp36;\n    long temp37;\n    long temp38;\n\
    \    long temp39;\n    long temp40;\n    long temp41;\n    long temp42;\n    long\
    \ temp43;\n    long temp44;\n    long temp45;\n    long temp46;\n    long temp47;\n\
    \    long temp48;\n    long temp49;\n    long temp50;\n    long temp51;\n    long\
    \ temp52;\n    long temp53;\n    long temp54;\n    long temp55;\n    long temp56;\n\
    \    long temp57;\n    long temp58;\n    long temp59;\n    long temp60;\n    long\
    \ temp61;\n    long temp62;\n    long temp63;\n    long temp64;\n    long temp65;\n\
    \    long temp66;\n    long temp67;\n    long temp68;\n    long temp69;\n    long\
    \ temp70;\n    long temp71;\n    long temp72;\n    long temp73;\n    long temp74;\n\
    \    long temp75;\n    long temp76;\n    long temp77;\n    long temp78;\n    long\
    \ temp79;\n    long temp80;\n    long temp81;\n    long temp82;\n    long temp83;\n\
    \    long temp\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsum13n6x.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmpsum13n6x.cpp:109:1: error: expected initializer before\
    \ \u2018}\u2019 token\n  109 | }\n      | ^\n/tmp/tmpsum13n6x.cpp:109:1: warning:\
    \ no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660102342
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res;\n    if (n == 0) res.push_back(3);\n    else\
    \ if (n == 1) res.push_back(1);\n    else if (n == 2) res.push_back(2);\n    else\
    \ {\n        long a = tri(n - 1);\n        long b = tri(n - 2);\n        long\
    \ c = tri(n + 1);\n        res.push_back(a);\n        res.push_back(b);\n    \
    \    res.push_back(c);\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = tri;\n    assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n \
    \   assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n    assert(candidate((6)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n    assert(candidate((7)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80,\
    \ 9, 99, 10, 120, 11})));\n    assert(candidate((0)) == (std::vector<long>({1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({1, 3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpailigeot.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmpailigeot.cpp:24:21: error: cannot convert \u2018std::vector<long\
    \ int>\u2019 to \u2018long int\u2019 in initialization\n   24 |         long a\
    \ = tri(n - 1);\n      |                  ~~~^~~~~~~\n      |                \
    \     |\n      |                     std::vector<long int>\n/tmp/tmpailigeot.cpp:25:21:\
    \ error: cannot convert \u2018std::vector<long int>\u2019 to \u2018long int\u2019\
    \ in initialization\n   25 |         long b = tri(n - 2);\n      |           \
    \       ~~~^~~~~~~\n      |                     |\n      |                   \
    \  std::vector<long int>\n/tmp/tmpailigeot.cpp:26:21: error: cannot convert \u2018\
    std::vector<long int>\u2019 to \u2018long int\u2019 in initialization\n   26 |\
    \         long c = tri(n + 1);\n      |                  ~~~^~~~~~~\n      | \
    \                    |\n      |                     std::vector<long int>\n"
  stdout: ''
  timestamp: 1660102342
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    if (n == 1)\n        result.push_back(3);\n\
    \    else if (n % 2 == 0)\n        result.push_back(tri(n - 1) + tri(n - 2) +\
    \ tri(n - 3));\n    else\n        result.push_back(tri(n - 1) + tri(n - 2) + tri(n\
    \ - 3) + tri(n - 4));\n    return result;\n}\nint main() {\n    auto candidate\
    \ = tri;\n    assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n \
    \   assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n    assert(candidate((6)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n    assert(candidate((7)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80,\
    \ 9, 99, 10, 120, 11})));\n    assert(candidate((0)) == (std::vector<long>({1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({1, 3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8ix4rgwf.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmp8ix4rgwf.cpp:23:37: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018std::vector<long\
    \ int>\u2019)\n   23 |         result.push_back(tri(n - 1) + tri(n - 2) + tri(n\
    \ - 3));\n      |                          ~~~~~~~~~~ ^ ~~~~~~~~~~\n      |  \
    \                           |            |\n      |                          \
    \   |            vector<[...]>\n      |                             vector<[...]>\n\
    In file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n           \
    \      from /usr/include/c++/9/bits/specfun.h:45,\n                 from /usr/include/c++/9/cmath:1927,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmp8ix4rgwf.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:423:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmp8ix4rgwf.cpp:23:48:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   23 |         result.push_back(tri(n - 1) + tri(n - 2) + tri(n - 3));\n  \
    \    |                                                ^\nIn file included from\
    \ /usr/include/c++/9/bits/stl_algobase.h:67,\n                 from /usr/include/c++/9/bits/specfun.h:45,\n\
    \                 from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmp8ix4rgwf.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:1216:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::move_iterator<_IteratorL>\
    \ std::operator+(typename std::move_iterator<_IteratorL>::difference_type, const\
    \ std:"
  stdout: ''
  timestamp: 1660102342
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res;\n    if (n == 0) return res;\n    if (n ==\
    \ 1) return { 1 };\n    if (n == 2) return { 1, 2, 3 };\n    if (n % 2 == 0) return\
    \ tri(n - 1) + tri(n - 2) + tri(n - 1);\n    return tri(n - 1) + tri(n - 2) +\
    \ tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2);\n}\nint main() {\n    auto\
    \ candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1, 3, 2,\
    \ 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpp71z81hr.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmpp71z81hr.cpp:23:39: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018std::vector<long\
    \ int>\u2019)\n   23 |     if (n % 2 == 0) return tri(n - 1) + tri(n - 2) + tri(n\
    \ - 1);\n      |                            ~~~~~~~~~~ ^ ~~~~~~~~~~\n      | \
    \                              |            |\n      |                       \
    \        |            vector<[...]>\n      |                               vector<[...]>\n\
    In file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n           \
    \      from /usr/include/c++/9/bits/specfun.h:45,\n                 from /usr/include/c++/9/cmath:1927,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpp71z81hr.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:423:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpp71z81hr.cpp:23:50:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   23 |     if (n % 2 == 0) return tri(n - 1) + tri(n - 2) + tri(n - 1);\n \
    \     |                                                  ^\nIn file included from\
    \ /usr/include/c++/9/bits/stl_algobase.h:67,\n                 from /usr/include/c++/9/bits/specfun.h:45,\n\
    \                 from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpp71z81hr.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:1216:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::move_iterator<_IteratorL>\
    \ std::operator+(typename std::move_iterator<_IteratorL>::difference_type"
  stdout: ''
  timestamp: 1660102342
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    if (n == 0) return result;\n    result.push_back(n);\n\
    \    if (n % 2 == 0) result.push_back(tri(n / 2) + tri(n / 2 + 1));\n    else\
    \ result.push_back(tri(n / 2) + tri(n / 2 - 1));\n    return result;\n}\nint main()\
    \ {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5g0g56oq.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmp5g0g56oq.cpp:22:49: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018std::vector<long\
    \ int>\u2019)\n   22 |     if (n % 2 == 0) result.push_back(tri(n / 2) + tri(n\
    \ / 2 + 1));\n      |                                      ~~~~~~~~~~ ^ ~~~~~~~~~~~~~~\n\
    \      |                                         |            |\n      |     \
    \                                    |            vector<[...]>\n      |     \
    \                                    vector<[...]>\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmp5g0g56oq.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:423:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmp5g0g56oq.cpp:22:64:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   22 |     if (n % 2 == 0) result.push_back(tri(n / 2) + tri(n / 2 + 1));\n\
    \      |                                                                ^\nIn\
    \ file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n            \
    \     from /usr/include/c++/9/bits/specfun.h:45,\n                 from /usr/include/c++/9/cmath:1927,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmp5g0g56oq.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:1216:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::move_iterator<_IteratorL>\
    \ std::oper"
  stdout: ''
  timestamp: 1660102342
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res;\n    long a = 1;\n    long b = 2;\n    long\
    \ c = 3;\n    long d = a + b + c;\n    long temp;\n    if (n % 2 == 0) {\n   \
    \     temp = tri(n - 1) + tri(n - 2) + tri(n + 1);\n        res.push_back(temp);\n\
    \    } else {\n        temp = tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2);\n\
    \        res.push_back(temp);\n    }\n    return res;\n}\nint main() {\n    auto\
    \ candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1, 3, 2,\
    \ 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpibb57249.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmpibb57249.cpp:26:27: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018std::vector<long\
    \ int>\u2019)\n   26 |         temp = tri(n - 1) + tri(n - 2) + tri(n + 1);\n\
    \      |                ~~~~~~~~~~ ^ ~~~~~~~~~~\n      |                   | \
    \           |\n      |                   |            vector<[...]>\n      | \
    \                  vector<[...]>\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpibb57249.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:423:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpibb57249.cpp:26:38:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   26 |         temp = tri(n - 1) + tri(n - 2) + tri(n + 1);\n      |      \
    \                                ^\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpibb57249.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:1216:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::move_iterator<_IteratorL>\
    \ std::operator+(typename std::move_iterator<_IteratorL>::difference_type, const\
    \ std::move_iterator<_IteratorL>&)\u2019\n 1216 |     operator+(typename move_iter"
  stdout: ''
  timestamp: 1660102342
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    long a = 3;\n    long b = 1;\n    long\
    \ c = 2;\n    long d = 1;\n    long sum = 0;\n    long temp;\n    long temp1;\n\
    \    long temp2;\n    long temp3;\n    long temp4;\n    long temp5;\n    long\
    \ temp6;\n    long temp7;\n    long temp8;\n    long temp9;\n    long temp10;\n\
    \    long temp11;\n    long temp12;\n    long temp13;\n    long temp14;\n    long\
    \ temp15;\n    long temp16;\n    long temp17;\n    long temp18;\n    long temp19;\n\
    \    long temp20;\n    long temp21;\n    long temp22;\n    long temp23;\n    long\
    \ temp24;\n    long temp25;\n    long temp26;\n    long temp27;\n    long temp28;\n\
    \    long temp29;\n    long temp30;\n    long temp31;\n    long temp32;\n    long\
    \ temp33;\n    long temp34;\n    long temp35;\n    long temp36;\n    long temp37;\n\
    \    long temp38;\n    long temp39;\n    long temp40;\n    long temp41;\n    long\
    \ temp42;\n    long temp43;\n    long temp44;\n    long temp45;\n    long temp46;\n\
    \    long temp47;\n    long temp48;\n    long temp49;\n    long temp50;\n    long\
    \ temp51;\n    long temp52;\n    long temp53;\n    long temp54;\n    long temp55;\n\
    \    long temp56;\n    long temp57;\n    long temp58;\n    long temp59;\n    long\
    \ temp60;\n    long temp61;\n    long temp62;\n    long temp63;\n    long temp64;\n\
    \    long temp65;\n    long temp66;\n    long temp67;\n    long temp68;\n    long\
    \ temp69;\n    long temp70;\n    long temp71;\n    long temp72;\n    long temp73;\n\
    \    long temp74;\n    long temp75;\n    long temp76;\n    long temp77;\n    long\
    \ temp78;\n    long temp79;\n    long temp80;\n    long temp81;\n    long temp82;\n\
    \    long temp83\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnjxcc4jd.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmpnjxcc4jd.cpp:109:1: error: expected initializer before\
    \ \u2018}\u2019 token\n  109 | }\n      | ^\n/tmp/tmpnjxcc4jd.cpp:109:1: warning:\
    \ no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660102341
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    long tri_1 = 1, tri_2 = 2, tri_3 =\
    \ tri_1 + tri_2;\n    long tri_4 = tri_3 + tri_1;\n    long tri_5 = tri_4 + tri_2;\n\
    \    long tri_6 = tri_5 + tri_3;\n    long tri_7 = tri_6 + tri_4;\n    long tri_8\
    \ = tri_7 + tri_5;\n    long tri_9 = tri_8 + tri_6;\n    long tri_10 = tri_9 +\
    \ tri_7;\n    long tri_11 = tri_10 + tri_8;\n    long tri_12 = tri_11 + tri_9;\n\
    \    long tri_13 = tri_12 + tri_10;\n    long tri_14 = tri_13 + tri_11;\n    long\
    \ tri_15 = tri_14 + tri_12;\n    long tri_16 = tri_15 + tri_13;\n    long tri_17\
    \ = tri_16 + tri_14;\n    long tri_18 = tri_17 + tri_15;\n    long tri_19 = tri_18\
    \ + tri_16;\n    long tri_20 = tri_19 + tri_17;\n    long tri_21 = tri_20 + tri_18;\n\
    \    long tri_22 = tri_21 + tri_19;\n    long tri_23 = tri_22 + tri_20;\n    long\
    \ tri_24 = tri_23 + tri_21;\n    long tri_25 = tri_24 + tri_22;\n    long tri_26\
    \ = tri_25 + tri_23;\n    long tri_27 = tri_26 + tri_24;\n    long tri_28 = tri_27\
    \ + tri_25;\n    long tri_29 = tri_28 + tri_26;\n    long tri_30 = tri_29 + tri_27;\n\
    \    long tri_31 = tri_30 + tri_28;\n    long tri_32 = tri_31 + tri_29;\n    long\
    \ tri_33 = tri_32 + tri_30;\n    long tri_34 = tri_33 + tri_31;\n    long tri_35\
    \ = tri_34 + tri_32;\n    long tri_36 = tri_35 + tri_33;\n    long tri_37 = tri_36\
    \ + tri_34;\n    long tri_38 = tri_37 + tri_35\n}\nint main() {\n    auto candidate\
    \ = tri;\n    assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n \
    \   assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n    assert(candidate((6)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n    assert(candidate((7)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80,\
    \ 9, 99, 10, 120, 11})));\n    assert(candidate((0)) == (std::vector<long>({1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({1, 3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpm4m7mt86.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmpm4m7mt86.cpp:56:1: error: expected \u2018,\u2019 or \u2018\
    ;\u2019 before \u2018}\u2019 token\n   56 | }\n      | ^\n/tmp/tmpm4m7mt86.cpp:56:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660102342
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    long a = 1, b = 2, c = 3;\n    long\
    \ temp;\n    long i = 0;\n    while(i < n) {\n        temp = a + b + c;\n    \
    \    result.push_back(temp);\n        a = b;\n        b = c;\n        c = temp;\n\
    \        i++;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = tri;\n    assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n \
    \   assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n    assert(candidate((6)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n    assert(candidate((7)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80,\
    \ 9, 99, 10, 120, 11})));\n    assert(candidate((0)) == (std::vector<long>({1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({1, 3})));\n}\n"
  status: Exception
  stderr: 'tmps27bft4u: /tmp/tmps27bft4u.cpp:35: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102343
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    long a = 3;\n    long b = 0;\n    long\
    \ c = 0;\n    long d = 1;\n    long temp;\n    long sum = 0;\n    long limit =\
    \ (n+1);\n    for(int i = 0; i <= limit; i++){\n        temp = a + b + c + d;\n\
    \        sum += temp;\n        a = b;\n        b = c;\n        c = d;\n      \
    \  d = temp;\n        result.push_back(sum);\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  status: Exception
  stderr: 'tmp0dpe4uy_: /tmp/tmp0dpe4uy_.cpp:40: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102343
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    long a = 1;\n    long b = 2;\n    long\
    \ c = 3;\n    long d = 4;\n    long sum = 0;\n    long temp;\n    long count =\
    \ 0;\n    long index = 0;\n    long sum2 = 0;\n    long sum3 = 0;\n    long sum4\
    \ = 0;\n    long sum5 = 0;\n    long sum6 = 0;\n    long sum7 = 0;\n    long sum8\
    \ = 0;\n    long sum9 = 0;\n    long sum10 = 0;\n    long sum11 = 0;\n    long\
    \ sum12 = 0;\n    long sum13 = 0;\n    long sum14 = 0;\n    long sum15 = 0;\n\
    \    long sum16 = 0;\n    long sum17 = 0;\n    long sum18 = 0;\n    long sum19\
    \ = 0;\n    long sum20 = 0;\n    long sum21 = 0;\n    long sum22 = 0;\n    long\
    \ sum23 = 0;\n    long sum24 = 0;\n    long sum25 = 0;\n    long sum26 = 0;\n\
    \    long sum27 = 0;\n    long sum28 = 0;\n    long sum29 = 0;\n    long sum30\
    \ = 0;\n    long sum31 = 0;\n    long sum32 = 0;\n    long sum33 = 0;\n    long\
    \ sum34 = 0;\n    long sum35 = 0;\n    long sum36 = 0;\n    long sum37 = 0;\n\
    \    long sum38 = 0;\n    long sum39 = 0;\n    long sum40 = 0;\n    long sum41\
    \ = 0;\n    long sum42 = 0;\n    long sum43 = 0;\n    long sum44 = 0;\n    long\
    \ sum45 = 0;\n    long sum46 = 0;\n    long sum47 = 0;\n    long sum48 = 0;\n\
    \    long sum49 = 0;\n    long sum50 = 0;\n    long sum51 = 0;\n    long sum52\
    \ = 0;\n    long sum53 = 0;\n    long sum54 = 0;\n    long sum55 = 0;\n    long\
    \ sum56 = 0;\n    long sum57 = 0;\n    long sum58 = 0;\n    long sum59 = 0;\n\
    \    long sum60 = 0;\n    long sum61 = 0;\n    long sum62 = 0;\n    long sum63\
    \ = 0;\n    long sum64 = 0;\n    long sum65 = 0;\n    long sum66 = 0;\n    long\
    \ sum67 = 0;\n    long sum68 = 0;\n    long sum69 = 0;\n    long sum70 = 0;\n\
    \    long sum71 = 0;\n    long sum72 = 0;\n    long sum73 = 0;\n    long sum74\
    \ = 0;\n    long sum75 = 0;\n    long sum76 = 0;\n    long sum77 = 0;\n    long\
    \ sum78 = 0;\n    long sum79 = 0;\n    long sum\n}\nint main() {\n    auto candidate\
    \ = tri;\n    assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n \
    \   assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n    assert(candidate((6)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n    assert(candidate((7)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80,\
    \ 9, 99, 10, 120, 11})));\n    assert(candidate((0)) == (std::vector<long>({1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({1, 3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp09_tx67k.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmp09_tx67k.cpp:107:1: error: expected initializer before\
    \ \u2018}\u2019 token\n  107 | }\n      | ^\n/tmp/tmp09_tx67k.cpp:107:1: warning:\
    \ no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660102342
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    long a = 1;\n    long b = 2;\n    long\
    \ c = 3;\n    long d = 4;\n    long temp;\n    long temp2;\n    long temp3;\n\
    \    long temp4;\n    long temp5;\n    long temp6;\n    long temp7;\n    long\
    \ temp8;\n    long temp9;\n    long temp10;\n    long temp11;\n    long temp12;\n\
    \    long temp13;\n    long temp14;\n    long temp15;\n    long temp16;\n    long\
    \ temp17;\n    long temp18;\n    long temp19;\n    long temp20;\n    long temp21;\n\
    \    long temp22;\n    long temp23;\n    long temp24;\n    long temp25;\n    long\
    \ temp26;\n    long temp27;\n    long temp28;\n    long temp29;\n    long temp30;\n\
    \    long temp31;\n    long temp32;\n    long temp33;\n    long temp34;\n    long\
    \ temp35;\n    long temp36;\n    long temp37;\n    long temp38;\n    long temp39;\n\
    \    long temp40;\n    long temp41;\n    long temp42;\n    long temp43;\n    long\
    \ temp44;\n    long temp45;\n    long temp46;\n    long temp47;\n    long temp48;\n\
    \    long temp49;\n    long temp50;\n    long temp51;\n    long temp52;\n    long\
    \ temp53;\n    long temp54;\n    long temp55;\n    long temp56;\n    long temp57;\n\
    \    long temp58;\n    long temp59;\n    long temp60;\n    long temp61;\n    long\
    \ temp62;\n    long temp63;\n    long temp64;\n    long temp65;\n    long temp66;\n\
    \    long temp67;\n    long temp68;\n    long temp69;\n    long temp70;\n    long\
    \ temp71;\n    long temp72;\n    long temp73;\n    long temp74;\n    long temp75;\n\
    \    long temp76;\n    long temp77;\n    long temp78;\n    long temp79;\n    long\
    \ temp80;\n    long temp81;\n    long temp82;\n    long temp83;\n    long temp84;\n\
    \    long \n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbfcd4bt8.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmpbfcd4bt8.cpp:109:1: error: expected unqualified-id before\
    \ \u2018}\u2019 token\n  109 | }\n      | ^\n/tmp/tmpbfcd4bt8.cpp:109:1: warning:\
    \ no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660102342
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res;\n    if (n == 1) res.push_back(3);\n    if\
    \ (n == 2) res.push_back(1);\n    if (n % 2 == 0) res.push_back(tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1));\n    else res.push_back(tri(n - 1) + tri(n - 2));\n    return\
    \ res;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsnjt0dps.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmpsnjt0dps.cpp:22:46: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018std::vector<long\
    \ int>\u2019)\n   22 |     if (n % 2 == 0) res.push_back(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1));\n      |                                   ~~~~~~~~~~ ^ ~~~~~~~~~~\n\
    \      |                                      |            |\n      |        \
    \                              |            vector<[...]>\n      |           \
    \                           vector<[...]>\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpsnjt0dps.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:423:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpsnjt0dps.cpp:22:57:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   22 |     if (n % 2 == 0) res.push_back(tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1));\n      |                                                         ^\nIn\
    \ file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n            \
    \     from /usr/include/c++/9/bits/specfun.h:45,\n                 from /usr/include/c++/9/cmath:1927,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpsnjt0dps.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:1216:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::move_iterator<_IteratorL>\
    \ std::operator+(typen"
  stdout: ''
  timestamp: 1660102342
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res;\n    if(n == 0) res.push_back(0);\n    if(n\
    \ == 1) res.push_back(1);\n    if(n == 2) res.push_back(3);\n    if(n == 3) res.push_back(8);\n\
    \    if(n == 4) res.push_back(13);\n    if(n == 5) res.push_back(21);\n    if(n\
    \ == 6) res.push_back(34);\n    if(n == 7) res.push_back(55);\n    if(n == 8)\
    \ res.push_back(89);\n    if(n == 9) res.push_back(144);\n    if(n == 10) res.push_back(233);\n\
    \    if(n == 11) res.push_back(377);\n    if(n == 12) res.push_back(610);\n  \
    \  if(n == 13) res.push_back(987);\n    if(n == 14) res.push_back(1597);\n   \
    \ if(n == 15) res.push_back(2584);\n    if(n == 16) res.push_back(4181);\n   \
    \ if(n == 17) res.push_back(6765);\n    if(n == 18) res.push_back(10946);\n  \
    \  if(n == 19) res.push_back(17711);\n    if(n == 20) res.push_back(28657);\n\
    \    if(n == 21) res.push_back(46368);\n    if(n == 22) res.push_back(75025);\n\
    \    if(n == 23) res.push_back(121393);\n    if(n == 24) res.push_back(196418);\n\
    \    if(n == 25) res.push_back(317811);\n    if(n == 26) res.push_back(514229);\n\
    \    if(n == 27) res.push_back(832041);\n    if(n == 28) res.push_back(1346269);\n\
    \    if(n == 29) res.push_back(2178309);\n    if(n == 30) res.(3915898);\n   \
    \ if(n == 31) res.(5702887);\n    if(n == 32) res.(9307708);\n    if(n == 33)\
    \ res.(15183529);\n    if(n == 34) res.(30952739);\n    if(n == 35) res.(61512801);\n\
    \    if(n == 36) res.(102334151);\n    if(n == 37) res.(165580141);\n    if(n\
    \ == 38) res.(267914291);\n    if(n == 39) res.(433494437);\n    if(n == 40) res.(701408733);\n\
    \    if(n == 41) res.(1134903173);\n    if(n == 42) res.(1836311903);\n    if(n\
    \ == 43) res.(2971215073);\n    if(n == 44) res.(4807526973);\n    if(n == 45)\
    \ res.(7778742047);\n    if(n == 46) \n}\nint main() {\n    auto candidate = tri;\n\
    \    assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprg92rbgp.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmprg92rbgp.cpp:50:21: error: expected unqualified-id before\
    \ \u2018(\u2019 token\n   50 |     if(n == 30) res.(3915898);\n      |       \
    \              ^\n/tmp/tmprg92rbgp.cpp:51:21: error: expected unqualified-id before\
    \ \u2018(\u2019 token\n   51 |     if(n == 31) res.(5702887);\n      |       \
    \              ^\n/tmp/tmprg92rbgp.cpp:52:21: error: expected unqualified-id before\
    \ \u2018(\u2019 token\n   52 |     if(n == 32) res.(9307708);\n      |       \
    \              ^\n/tmp/tmprg92rbgp.cpp:53:21: error: expected unqualified-id before\
    \ \u2018(\u2019 token\n   53 |     if(n == 33) res.(15183529);\n      |      \
    \               ^\n/tmp/tmprg92rbgp.cpp:54:21: error: expected unqualified-id\
    \ before \u2018(\u2019 token\n   54 |     if(n == 34) res.(30952739);\n      |\
    \                     ^\n/tmp/tmprg92rbgp.cpp:55:21: error: expected unqualified-id\
    \ before \u2018(\u2019 token\n   55 |     if(n == 35) res.(61512801);\n      |\
    \                     ^\n/tmp/tmprg92rbgp.cpp:56:21: error: expected unqualified-id\
    \ before \u2018(\u2019 token\n   56 |     if(n == 36) res.(102334151);\n     \
    \ |                     ^\n/tmp/tmprg92rbgp.cpp:57:21: error: expected unqualified-id\
    \ before \u2018(\u2019 token\n   57 |     if(n == 37) res.(165580141);\n     \
    \ |                     ^\n/tmp/tmprg92rbgp.cpp:58:21: error: expected unqualified-id\
    \ before \u2018(\u2019 token\n   58 |     if(n == 38) res.(267914291);\n     \
    \ |                     ^\n/tmp/tmprg92rbgp.cpp:59:21: error: expected unqualified-id\
    \ before \u2018(\u2019 token\n   59 |     if(n == 39) res.(433494437);\n     \
    \ |                     ^\n/tmp/tmprg92rbgp.cpp:60:21: error: expected unqualified-id\
    \ before \u2018(\u2019 token\n   60 |     if(n == 40) res.(701408733);\n     \
    \ |                     ^\n/tmp/tmprg92rbgp.cpp:61:21: error: expected unqualified-id\
    \ before \u2018(\u2019 token\n   61 |     if(n == 41) res.(1134903173);\n    \
    \  |                     ^\n/tmp/tmprg92rbgp.cpp:62:21: error: expected unqualified-id\
    \ before \u2018(\u2019 token\n   62 |     if(n == 42) res.(1836311903);\n    \
    \  |                     ^\n/tmp/tmprg92rbg"
  stdout: ''
  timestamp: 1660102342
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res;\n    if (n == 1)\n        res.push_back(1);\n\
    \    else if (n % 2 == 0)\n        res.push_back(tri(n - 1) + tri(n - 2));\n \
    \   else\n        res.push_back(tri(n - 1) + tri(n - 2) + tri(n + 1));\n    return\
    \ res;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpetpvpqx_.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmpetpvpqx_.cpp:23:34: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018std::vector<long\
    \ int>\u2019)\n   23 |         res.push_back(tri(n - 1) + tri(n - 2));\n     \
    \ |                       ~~~~~~~~~~ ^ ~~~~~~~~~~\n      |                   \
    \       |            |\n      |                          |            vector<[...]>\n\
    \      |                          vector<[...]>\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpetpvpqx_.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:423:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpetpvpqx_.cpp:23:45:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   23 |         res.push_back(tri(n - 1) + tri(n - 2));\n      |           \
    \                                  ^\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpetpvpqx_.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:1216:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::move_iterator<_IteratorL>\
    \ std::operator+(typename std::move_iterator<_IteratorL>::difference_type, const\
    \ std::move_iterator<_IteratorL>&)\u2019\n 1216 |     ope"
  stdout: ''
  timestamp: 1660102339
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res;\n    long a = 0, b = 1, c = 1;\n    long temp;\n\
    \    long count = 0;\n    long limit = (n+2)/3;\n    long temp2;\n    long temp3;\n\
    \    while(count < limit){\n        temp = a;\n        temp2 = b;\n        temp3\
    \ = c;\n        a = b;\n        b = c;\n        c = temp + temp2 + temp3;\n  \
    \      count ++;\n    }\n    long temp4;\n    long temp5;\n    long temp6;\n \
    \   long temp7;\n    long temp8;\n    long temp9;\n    long temp10;\n    long\
    \ temp11;\n    long temp12;\n    long temp13;\n    long temp14;\n    long temp15;\n\
    \    long temp16;\n    long temp17;\n    long temp18;\n    long temp19;\n    long\
    \ temp20;\n    long temp21;\n    long temp22;\n    long temp23;\n    long temp24;\n\
    \    long temp25;\n    long temp26;\n    long temp27;\n    long temp28;\n    long\
    \ temp29;\n    long temp30;\n    long temp31;\n    long temp32;\n    long temp33;\n\
    \    long temp34;\n    long temp35;\n    long temp36;\n    long temp37;\n    long\
    \ temp38;\n    long temp39;\n    long temp40;\n    long temp41;\n    long temp42;\n\
    \    long temp43;\n    long temp44;\n    long temp45;\n    long temp46;\n    long\
    \ temp47;\n    long temp48;\n    long temp49;\n    long temp50;\n    long temp51;\n\
    \    long temp52;\n    long temp53;\n    long temp54;\n    long temp55;\n    long\
    \ temp56;\n    long temp57;\n    long temp58;\n    long temp59;\n    long temp60;\n\
    \    long temp61;\n    long temp62;\n    long temp63;\n    long temp64;\n    long\
    \ temp65;\n    long temp66;\n    long temp67;\n    long temp68;\n    long temp69;\n\
    \    long temp70;\n    long temp71;\n    long temp72;\n    long temp73;\n    long\
    \ temp74;\n    long temp75;\n    long temp76;\n    long temp77;\n    long \n}\n\
    int main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprc3ah6bw.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmprc3ah6bw.cpp:110:1: error: expected unqualified-id before\
    \ \u2018}\u2019 token\n  110 | }\n      | ^\n/tmp/tmprc3ah6bw.cpp:110:1: warning:\
    \ no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660102342
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    long a = 3;\n    long b = 0;\n    long\
    \ c = 0;\n    long d = 1;\n    long temp;\n    long temp2;\n    long temp3;\n\
    \    long temp4;\n    long temp5;\n    long temp6;\n    long temp7;\n    long\
    \ temp8;\n    long temp9;\n    long temp10;\n    long temp11;\n    long temp12;\n\
    \    long temp13;\n    long temp14;\n    long temp15;\n    long temp16;\n    long\
    \ temp17;\n    long temp18;\n    long temp19;\n    long temp20;\n    long temp21;\n\
    \    long temp22;\n    long temp23;\n    long temp24;\n    long temp25;\n    long\
    \ temp26;\n    long temp27;\n    long temp28;\n    long temp29;\n    long temp30;\n\
    \    long temp31;\n    long temp32;\n    long temp33;\n    long temp34;\n    long\
    \ temp35;\n    long temp36;\n    long temp37;\n    long temp38;\n    long temp39;\n\
    \    long temp40;\n    long temp41;\n    long temp42;\n    long temp43;\n    long\
    \ temp44;\n    long temp45;\n    long temp46;\n    long temp47;\n    long temp48;\n\
    \    long temp49;\n    long temp50;\n    long temp51;\n    long temp52;\n    long\
    \ temp53;\n    long temp54;\n    long temp55;\n    long temp56;\n    long temp57;\n\
    \    long temp58;\n    long temp59;\n    long temp60;\n    long temp61;\n    long\
    \ temp62;\n    long temp63;\n    long temp64;\n    long temp65;\n    long temp66;\n\
    \    long temp67;\n    long temp68;\n    long temp69;\n    long temp70;\n    long\
    \ temp71;\n    long temp72;\n    long temp73;\n    long temp74;\n    long temp75;\n\
    \    long temp76;\n    long temp77;\n    long temp78;\n    long temp79;\n    long\
    \ temp80;\n    long temp81;\n    long temp82;\n    long temp83;\n    long temp84;\n\
    \    long \n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnoh0gwft.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmpnoh0gwft.cpp:109:1: error: expected unqualified-id before\
    \ \u2018}\u2019 token\n  109 | }\n      | ^\n/tmp/tmpnoh0gwft.cpp:109:1: warning:\
    \ no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660102342
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    if (n == 0) {\n        result.push_back(0);\n\
    \        result.push_back(1);\n        return result;\n    }\n    if (n == 1)\
    \ {\n        result.push_back(1);\n        return result;\n    }\n    if (n ==\
    \ 2) {\n        result.push_back(2);\n        return result;\n    }\n    if (n\
    \ % 2 == 0) {\n        result.push_back(tri(n - 1) + tri(n - 2) + tri(n + 1));\n\
    \    } else {\n        result.push_back(tri(n - 1) + tri(n - 2) + tri(n + 1) +\
    \ tri(n - 3) + tri(n - 4));\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1, 3, 2,\
    \ 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3h8t_gav.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmp3h8t_gav.cpp:34:37: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018std::vector<long\
    \ int>\u2019)\n   34 |         result.push_back(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1));\n      |                          ~~~~~~~~~~ ^ ~~~~~~~~~~\n      |  \
    \                           |            |\n      |                          \
    \   |            vector<[...]>\n      |                             vector<[...]>\n\
    In file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n           \
    \      from /usr/include/c++/9/bits/specfun.h:45,\n                 from /usr/include/c++/9/cmath:1927,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmp3h8t_gav.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:423:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmp3h8t_gav.cpp:34:48:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   34 |         result.push_back(tri(n - 1) + tri(n - 2) + tri(n + 1));\n  \
    \    |                                                ^\nIn file included from\
    \ /usr/include/c++/9/bits/stl_algobase.h:67,\n                 from /usr/include/c++/9/bits/specfun.h:45,\n\
    \                 from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmp3h8t_gav.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:1216:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::move_iterator<_IteratorL>\
    \ std::operator+(typename std::move_iterator<_IteratorL>::difference_type, const\
    \ std:"
  stdout: ''
  timestamp: 1660102343
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    long a = 1;\n    long b = 2;\n    long\
    \ c = 3;\n    long d = 1;\n    long e = 1;\n    long f = 0;\n    long g = 1;\n\
    \    long h = 1;\n    long i = 1;\n    long j = 1;\n    long k = 1;\n    long\
    \ l = 1;\n    long m = 1;\n    long n = 1;\n    long o = 1;\n    long p = 1;\n\
    \    long q = 1;\n    long r = 1;\n    long s = 1;\n    long t = 1;\n    long\
    \ u = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n    long y = 1;\n\
    \    long z = 1;\n    long a = 1;\n    long b = 2;\n    long c = 3;\n    long\
    \ d = 1;\n    long e = 1;\n    long f = 0;\n    long g = 1;\n    long h = 1;\n\
    \    long i = 1;\n    long j = 1;\n    long k = 1;\n    long l = 1;\n    long\
    \ m = 1;\n    long n = 1;\n    long o = 1;\n    long p = 1;\n    long q = 1;\n\
    \    long r = 1;\n    long s = 1;\n    long t = 1;\n    long u = 1;\n    long\
    \ v = 1;\n    long w = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n\
    \    long a = 1;\n    long b = 2;\n    long c = 3;\n    long d = 1;\n    long\
    \ e = 1;\n    long f = 0;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n\
    \    long j = 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n    long\
    \ n = 1;\n    long o = 1;\n    long p = 1;\n    long q = 1;\n    long r = 1;\n\
    \    long s = 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n    long\
    \ w = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n    long a = 1;\n\
    \    long b = 2;\n    long c = 3;\n    long d = 1;\n    long e = 1;\n    long\
    \ f = 0;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n    long j = 1;\n\
    \    long k = 1;\n    long l = 1;\n    long m = 1;\n    long n = 1;\n    long\
    \ o = 1;\n    long p = 1;\n    long q = 1;\n    long r = 1;\n    long s = 1;\n\
    \    long t = 1;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n    \n}\n\
    int main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnyfpj3z2.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmpnyfpj3z2.cpp:33:10: error: declaration of \u2018long int\
    \ n\u2019 shadows a parameter\n   33 |     long n = 1;\n      |          ^\n/tmp/tmpnyfpj3z2.cpp:46:10:\
    \ error: redeclaration of \u2018long int a\u2019\n   46 |     long a = 1;\n  \
    \    |          ^\n/tmp/tmpnyfpj3z2.cpp:20:10: note: \u2018long int a\u2019 previously\
    \ declared here\n   20 |     long a = 1;\n      |          ^\n/tmp/tmpnyfpj3z2.cpp:47:10:\
    \ error: redeclaration of \u2018long int b\u2019\n   47 |     long b = 2;\n  \
    \    |          ^\n/tmp/tmpnyfpj3z2.cpp:21:10: note: \u2018long int b\u2019 previously\
    \ declared here\n   21 |     long b = 2;\n      |          ^\n/tmp/tmpnyfpj3z2.cpp:48:10:\
    \ error: redeclaration of \u2018long int c\u2019\n   48 |     long c = 3;\n  \
    \    |          ^\n/tmp/tmpnyfpj3z2.cpp:22:10: note: \u2018long int c\u2019 previously\
    \ declared here\n   22 |     long c = 3;\n      |          ^\n/tmp/tmpnyfpj3z2.cpp:49:10:\
    \ error: redeclaration of \u2018long int d\u2019\n   49 |     long d = 1;\n  \
    \    |          ^\n/tmp/tmpnyfpj3z2.cpp:23:10: note: \u2018long int d\u2019 previously\
    \ declared here\n   23 |     long d = 1;\n      |          ^\n/tmp/tmpnyfpj3z2.cpp:50:10:\
    \ error: redeclaration of \u2018long int e\u2019\n   50 |     long e = 1;\n  \
    \    |          ^\n/tmp/tmpnyfpj3z2.cpp:24:10: note: \u2018long int e\u2019 previously\
    \ declared here\n   24 |     long e = 1;\n      |          ^\n/tmp/tmpnyfpj3z2.cpp:51:10:\
    \ error: redeclaration of \u2018long int f\u2019\n   51 |     long f = 0;\n  \
    \    |          ^\n/tmp/tmpnyfpj3z2.cpp:25:10: note: \u2018long int f\u2019 previously\
    \ declared here\n   25 |     long f = 0;\n      |          ^\n/tmp/tmpnyfpj3z2.cpp:52:10:\
    \ error: redeclaration of \u2018long int g\u2019\n   52 |     long g = 1;\n  \
    \    |          ^\n/tmp/tmpnyfpj3z2.cpp:26:10: note: \u2018long int g\u2019 previously\
    \ declared here\n   26 |     long g = 1;\n      |          ^\n/tmp/tmpnyfpj3z2.cpp:53:10:\
    \ error: redeclaration of \u2018long int h\u2019\n   53 |     long h = 1;\n  \
    \    |          ^\n/tmp/tmpnyfpj3z2.cpp:27:10: note: \u2018long int h\u2019 previously\
    \ declared here\n   27 |     long h = 1;\n      |     "
  stdout: ''
  timestamp: 1660102342
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res;\n    if (n == 0)\n        return res;\n   \
    \ if (n == 1)\n        res.push_back(3);\n    else if (n % 2 == 0)\n        res.push_back(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1));\n    else\n        res.push_back(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4));\n    return res;\n}\n\
    int main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfx0ddjjw.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmpfx0ddjjw.cpp:25:34: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018std::vector<long\
    \ int>\u2019)\n   25 |         res.push_back(tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1));\n      |                       ~~~~~~~~~~ ^ ~~~~~~~~~~\n      |       \
    \                   |            |\n      |                          |       \
    \     vector<[...]>\n      |                          vector<[...]>\nIn file included\
    \ from /usr/include/c++/9/bits/stl_algobase.h:67,\n                 from /usr/include/c++/9/bits/specfun.h:45,\n\
    \                 from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpfx0ddjjw.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:423:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpfx0ddjjw.cpp:25:45:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   25 |         res.push_back(tri(n - 1) + tri(n - 2) + tri(n + 1));\n     \
    \ |                                             ^\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpfx0ddjjw.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:1216:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::move_iterator<_IteratorL>\
    \ std::operator+(typename std::move_iterator<_IteratorL>::difference_type, const\
    \ std::move_iterator<_Itera"
  stdout: ''
  timestamp: 1660102343
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    long a = 1;\n    long b = 2;\n    long\
    \ c = 3;\n    long d = 1;\n    long e = 1;\n    long f = 0;\n    long g = 1;\n\
    \    long h = 1;\n    long i = 1;\n    long j = 1;\n    long k = 1;\n    long\
    \ l = 1;\n    long m = 1;\n    long n = 1;\n    long o = 1;\n    long p = 1;\n\
    \    long q = 1;\n    long r = 1;\n    long s = 1;\n    long t = 1;\n    long\
    \ u = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n    long y = 1;\n\
    \    long z = 1;\n    long a = 1;\n    long b = 2;\n    long c = 3;\n    long\
    \ d = 1;\n    long e = 1;\n    long f = 0;\n    long g = 1;\n    long h = 1;\n\
    \    long i = 1;\n    long j = 1;\n    long k = 1;\n    long l = 1;\n    long\
    \ m = 1;\n    long n = 1;\n    long o = 1;\n    long p = 1;\n    long q = 1;\n\
    \    long r = 1;\n    long s = 1;\n    long t = 1;\n    long u = 1;\n    long\
    \ v = 1;\n    long w = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n\
    \    long a = 1;\n    long b = 2;\n    long c = 3;\n    long d = 1;\n    long\
    \ e = 1;\n    long f = 0;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n\
    \    long j = 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n    long\
    \ n = 1;\n    long o = 1;\n    long p = 1;\n    long q = 1;\n    long r = 1;\n\
    \    long s = 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n    long\
    \ w = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n    long a = 1;\n\
    \    long b = 2;\n    long c = 3;\n    long d = 1;\n    long e = 1;\n    long\
    \ f = 0;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n    long j = 1;\n\
    \    long k = 1;\n    long l = 1;\n    long m = 1;\n    long n = 1;\n    long\
    \ o = 1;\n    long p = 1;\n    long q = 1;\n    long r = 1;\n    long s = 1;\n\
    \    long t = 1;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n    \n}\n\
    int main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnyfpj3z2.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmpnyfpj3z2.cpp:33:10: error: declaration of \u2018long int\
    \ n\u2019 shadows a parameter\n   33 |     long n = 1;\n      |          ^\n/tmp/tmpnyfpj3z2.cpp:46:10:\
    \ error: redeclaration of \u2018long int a\u2019\n   46 |     long a = 1;\n  \
    \    |          ^\n/tmp/tmpnyfpj3z2.cpp:20:10: note: \u2018long int a\u2019 previously\
    \ declared here\n   20 |     long a = 1;\n      |          ^\n/tmp/tmpnyfpj3z2.cpp:47:10:\
    \ error: redeclaration of \u2018long int b\u2019\n   47 |     long b = 2;\n  \
    \    |          ^\n/tmp/tmpnyfpj3z2.cpp:21:10: note: \u2018long int b\u2019 previously\
    \ declared here\n   21 |     long b = 2;\n      |          ^\n/tmp/tmpnyfpj3z2.cpp:48:10:\
    \ error: redeclaration of \u2018long int c\u2019\n   48 |     long c = 3;\n  \
    \    |          ^\n/tmp/tmpnyfpj3z2.cpp:22:10: note: \u2018long int c\u2019 previously\
    \ declared here\n   22 |     long c = 3;\n      |          ^\n/tmp/tmpnyfpj3z2.cpp:49:10:\
    \ error: redeclaration of \u2018long int d\u2019\n   49 |     long d = 1;\n  \
    \    |          ^\n/tmp/tmpnyfpj3z2.cpp:23:10: note: \u2018long int d\u2019 previously\
    \ declared here\n   23 |     long d = 1;\n      |          ^\n/tmp/tmpnyfpj3z2.cpp:50:10:\
    \ error: redeclaration of \u2018long int e\u2019\n   50 |     long e = 1;\n  \
    \    |          ^\n/tmp/tmpnyfpj3z2.cpp:24:10: note: \u2018long int e\u2019 previously\
    \ declared here\n   24 |     long e = 1;\n      |          ^\n/tmp/tmpnyfpj3z2.cpp:51:10:\
    \ error: redeclaration of \u2018long int f\u2019\n   51 |     long f = 0;\n  \
    \    |          ^\n/tmp/tmpnyfpj3z2.cpp:25:10: note: \u2018long int f\u2019 previously\
    \ declared here\n   25 |     long f = 0;\n      |          ^\n/tmp/tmpnyfpj3z2.cpp:52:10:\
    \ error: redeclaration of \u2018long int g\u2019\n   52 |     long g = 1;\n  \
    \    |          ^\n/tmp/tmpnyfpj3z2.cpp:26:10: note: \u2018long int g\u2019 previously\
    \ declared here\n   26 |     long g = 1;\n      |          ^\n/tmp/tmpnyfpj3z2.cpp:53:10:\
    \ error: redeclaration of \u2018long int h\u2019\n   53 |     long h = 1;\n  \
    \    |          ^\n/tmp/tmpnyfpj3z2.cpp:27:10: note: \u2018long int h\u2019 previously\
    \ declared here\n   27 |     long h = 1;\n      |     "
  stdout: ''
  timestamp: 1660102342
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    long a = 1, b = 2, c = 3;\n    long\
    \ sum = 0;\n    long temp;\n    \n    for(int i = 0; i < n; i++) {\n        temp\
    \ = a + b + c;\n        sum = temp % 10;\n        result.push_back(sum);\n   \
    \     a = b;\n        b = c;\n        c = temp;\n    }\n    \n    return result;\n\
    }\nint main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  status: Exception
  stderr: 'tmpy1hh8ec4: /tmp/tmpy1hh8ec4.cpp:37: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102344
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    if (n == 1)\n        result.push_back(1);\n\
    \    else if (n % 2 == 0)\n        result.push_back(tri(n - 1) + tri(n - 2));\n\
    \    else\n        result.push_back(tri(n - 1) + tri(n - 2) + tri(n + 1));\n \
    \   return result;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvlo3wudh.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmpvlo3wudh.cpp:23:37: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018std::vector<long\
    \ int>\u2019)\n   23 |         result.push_back(tri(n - 1) + tri(n - 2));\n  \
    \    |                          ~~~~~~~~~~ ^ ~~~~~~~~~~\n      |             \
    \                |            |\n      |                             |       \
    \     vector<[...]>\n      |                             vector<[...]>\nIn file\
    \ included from /usr/include/c++/9/bits/stl_algobase.h:67,\n                 from\
    \ /usr/include/c++/9/bits/specfun.h:45,\n                 from /usr/include/c++/9/cmath:1927,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpvlo3wudh.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:423:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpvlo3wudh.cpp:23:48:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   23 |         result.push_back(tri(n - 1) + tri(n - 2));\n      |        \
    \                                        ^\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpvlo3wudh.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:1216:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::move_iterator<_IteratorL>\
    \ std::operator+(typename std::move_iterator<_IteratorL>::difference_type, const\
    \ std::move_iterator<_IteratorL>"
  stdout: ''
  timestamp: 1660102339
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res;\n    long a = 3;\n    long b = 1;\n    long\
    \ c = 2;\n    long d = 1;\n    long temp;\n    long sum = 0;\n    long tri_sum\
    \ = 0;\n    long tri_sum2 = 0;\n    long tri_sum3 = 0;\n    long tri_sum4 = 0;\n\
    \    long tri_sum5 = 0;\n    long tri_sum6 = 0;\n    long tri_sum7 = 0;\n    long\
    \ tri_sum8 = 0;\n    long tri_sum9 = 0;\n    long tri_sum10 = 0;\n    long tri_sum11\
    \ = 0;\n    long tri_sum12 = 0;\n    long tri_sum13 = 0;\n    long tri_sum14 =\
    \ 0;\n    long tri_sum15 = 0;\n    long tri_sum16 = 0;\n    long tri_sum17 = 0;\n\
    \    long tri_sum18 = 0;\n    long tri_sum19 = 0;\n    long tri_sum20 = 0;\n \
    \   long tri_sum21 = 0;\n    long tri_sum22 = 0;\n    long tri_sum23 = 0;\n  \
    \  long tri_sum24 = 0;\n    long tri_sum25 = 0;\n    long tri_sum26 = 0;\n   \
    \ long tri_sum27 = 0;\n    long tri_sum28 = 0;\n    long tri_sum29 = 0;\n    long\
    \ tri_sum30 = 0;\n    long tri_sum31 = 0;\n    long tri_sum32 = 0;\n    long tri_sum33\
    \ = 0;\n    long tri_sum34 = 0;\n    long tri_sum35 = 0;\n    long tri_sum36 =\
    \ 0;\n    long tri_sum37 = 0;\n    long tri_sum38 = 0;\n    long tri_sum39 = 0;\n\
    \    long tri_sum40 = 0;\n    long tri_sum41 = 0;\n    long tri_sum42 = 0;\n \
    \   long tri_sum43 = 0;\n    long tri_sum44 = 0;\n    long tri_sum45 = 0;\n  \
    \  long tri_sum46 = 0;\n    long tri_sum47 = 0;\n    long tri_sum48 = 0;\n   \
    \ long tri_sum49 = 0;\n    long tri_sum50 = 0;\n    long tri_sum51 = 0;\n    long\
    \ tri_sum52 = 0;\n    long tri_sum53 = 0;\n    long tri_sum54 = 0;\n    long tri_sum55\
    \ = 0;\n    long tri_sum56 = 0;\n    long tri_sum57 = 0;\n    long tri_sum58 =\
    \ 0;\n    long tri_sum59 = 0;\n    long tri_sum60 = 0;\n    \n}\nint main() {\n\
    \    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  status: Exception
  stderr: 'tmpz3g3zcx3: /tmp/tmpz3g3zcx3.cpp:90: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102344
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    long tri_1 = 1, tri_2 = 2, tri_3 =\
    \ tri_1 + tri_2;\n    long tri_4 = tri_3;\n    long tri_5 = tri_4;\n    long tri_6\
    \ = tri_5;\n    long tri_7 = tri_6;\n    long tri_8 = tri_7;\n    long tri_9 =\
    \ tri_8;\n    long tri_10 = tri_9;\n    long tri_11 = tri_10;\n    long tri_12\
    \ = tri_11;\n    long tri_13 = tri_12;\n    long tri_14 = tri_13;\n    long tri_15\
    \ = tri_14;\n    long tri_16 = tri_15;\n    long tri_17 = tri_16;\n    long tri_18\
    \ = tri_17;\n    long tri_19 = tri_18;\n    long tri_20 = tri_19;\n    long tri_21\
    \ = tri_20;\n    long tri_22 = tri_21;\n    long tri_23 = tri_22;\n    long tri_24\
    \ = tri_23;\n    long tri_25 = tri_24;\n    long tri_26 = tri_25;\n    long tri_27\
    \ = tri_26;\n    long tri_28 = tri_27;\n    long tri_29 = tri_28;\n    long tri_30\
    \ = tri_29;\n    long tri_31 = tri_30;\n    long tri_32 = tri_31;\n    long tri_33\
    \ = tri_32;\n    long tri_34 = tri_33;\n    long tri_35 = tri_34;\n    long tri_36\
    \ = tri_35;\n    long tri_37 = tri_36;\n    long tri_38 = tri_37;\n    long tri_39\
    \ = tri_38;\n    long tri_40 = tri_39;\n    long tri_41 = tri_40;\n    long tri_42\
    \ = tri_41;\n    long tri_43 = tri_42;\n    long tri_44 = tri_43;\n    long tri_45\
    \ = tri_44;\n    long tri_46 = tri_45;\n    long tri_47 = tri_46;\n    long tri_48\
    \ = tri_47;\n    long tri_49 = tri_48;\n    long tri_50 = tri_49;\n    long tri_51\
    \ = tri_50\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpd6u7xmd3.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmpd6u7xmd3.cpp:69:1: error: expected \u2018,\u2019 or \u2018\
    ;\u2019 before \u2018}\u2019 token\n   69 | }\n      | ^\n/tmp/tmpd6u7xmd3.cpp:69:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660102344
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res;\n    if (n == 1)\n        res.push_back(1);\n\
    \    else if (n % 2 == 0)\n        res.push_back(tri(n - 1) + tri(n - 2));\n \
    \   else\n        res.push_back(tri(n - 1) + tri(n - 2) + tri(n + 1));\n    return\
    \ res;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpetpvpqx_.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmpetpvpqx_.cpp:23:34: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018std::vector<long\
    \ int>\u2019)\n   23 |         res.push_back(tri(n - 1) + tri(n - 2));\n     \
    \ |                       ~~~~~~~~~~ ^ ~~~~~~~~~~\n      |                   \
    \       |            |\n      |                          |            vector<[...]>\n\
    \      |                          vector<[...]>\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpetpvpqx_.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:423:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpetpvpqx_.cpp:23:45:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   23 |         res.push_back(tri(n - 1) + tri(n - 2));\n      |           \
    \                                  ^\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpetpvpqx_.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:1216:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::move_iterator<_IteratorL>\
    \ std::operator+(typename std::move_iterator<_IteratorL>::difference_type, const\
    \ std::move_iterator<_IteratorL>&)\u2019\n 1216 |     ope"
  stdout: ''
  timestamp: 1660102339
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    long a = 1;\n    long b = 1;\n    long\
    \ c = 1;\n    long d = 1;\n    long temp;\n    long tri_sum = 0;\n    long tri_sum2\
    \ = 0;\n    long tri_sum3 = 0;\n    long tri_sum4 = 0;\n    long tri_sum5 = 0;\n\
    \    long tri_sum6 = 0;\n    long tri_sum7 = 0;\n    long tri_sum8 = 0;\n    long\
    \ tri_sum9 = 0;\n    long tri_sum10 = 0;\n    long tri_sum11 = 0;\n    long tri_sum12\
    \ = 0;\n    long tri_sum13 = 0;\n    long tri_sum14 = 0;\n    long tri_sum15 =\
    \ 0;\n    long tri_sum16 = 0;\n    long tri_sum17 = 0;\n    long tri_sum18 = 0;\n\
    \    long tri_sum19 = 0;\n    long tri_sum20 = 0;\n    long tri_sum21 = 0;\n \
    \   long tri_sum22 = 0;\n    long tri_sum23 = 0;\n    long tri_sum24 = 0;\n  \
    \  long tri_sum25 = 0;\n    long tri_sum26 = 0;\n    long tri_sum27 = 0;\n   \
    \ long tri_sum28 = 0;\n    long tri_sum29 = 0;\n    long tri_sum30 = 0;\n    long\
    \ tri_sum31 = 0;\n    long tri_sum32 = 0;\n    long tri_sum33 = 0;\n    long tri_sum34\
    \ = 0;\n    long tri_sum35 = 0;\n    long tri_sum36 = 0;\n    long tri_sum37 =\
    \ 0;\n    long tri_sum38 = 0;\n    long tri_sum39 = 0;\n    long tri_sum40 = 0;\n\
    \    long tri_sum41 = 0;\n    long tri_sum42 = 0;\n    long tri_sum43 = 0;\n \
    \   long tri_sum44 = 0;\n    long tri_sum45 = 0;\n    long tri_sum46 = 0;\n  \
    \  long tri_sum47 = 0;\n    long tri_sum48 = 0;\n    long tri_sum49 = 0;\n   \
    \ long tri_sum50 = 0;\n    long tri_sum51 = 0;\n    long tri_sum52 = 0;\n    long\
    \ tri_sum53 = 0;\n    long tri_sum54 = 0;\n    long tri_sum55 = 0;\n    long tri_sum56\
    \ = 0;\n    long tri_sum57 = 0;\n    long tri_sum58 = 0;\n    long tri_sum59 =\
    \ 0;\n    long tri_sum60 = 0;\n    long tri_sum61\n}\nint main() {\n    auto candidate\
    \ = tri;\n    assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n \
    \   assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n    assert(candidate((6)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n    assert(candidate((7)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80,\
    \ 9, 99, 10, 120, 11})));\n    assert(candidate((0)) == (std::vector<long>({1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({1, 3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbog4pguh.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmpbog4pguh.cpp:86:1: error: expected initializer before \u2018\
    }\u2019 token\n   86 | }\n      | ^\n/tmp/tmpbog4pguh.cpp:86:1: warning: no return\
    \ statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660102344
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res;\n    if (n <= 1) {\n        res.push_back(1);\n\
    \        return res;\n    }\n    if (n % 2 == 0) {\n        res.push_back(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1));\n    } else {\n        res.push_back(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4) + tri(n - 5));\n  \
    \  }\n    return res;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1dy1usws.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmp1dy1usws.cpp:25:34: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018std::vector<long\
    \ int>\u2019)\n   25 |         res.push_back(tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1));\n      |                       ~~~~~~~~~~ ^ ~~~~~~~~~~\n      |       \
    \                   |            |\n      |                          |       \
    \     vector<[...]>\n      |                          vector<[...]>\nIn file included\
    \ from /usr/include/c++/9/bits/stl_algobase.h:67,\n                 from /usr/include/c++/9/bits/specfun.h:45,\n\
    \                 from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmp1dy1usws.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:423:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmp1dy1usws.cpp:25:45:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   25 |         res.push_back(tri(n - 1) + tri(n - 2) + tri(n + 1));\n     \
    \ |                                             ^\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmp1dy1usws.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:1216:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::move_iterator<_IteratorL>\
    \ std::operator+(typename std::move_iterator<_IteratorL>::difference_type, const\
    \ std::move_iterator<_Itera"
  stdout: ''
  timestamp: 1660102344
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res;\n    if (n == 1)\n        res.push_back(3);\n\
    \    else if (n % 2 == 0)\n        res.push_back(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1));\n    else\n        res.push_back(tri(n - 1) + tri(n - 2) + tri(n + 1)\
    \ + tri(n - 3) + tri(n - 4));\n    return res;\n}\nint main() {\n    auto candidate\
    \ = tri;\n    assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n \
    \   assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n    assert(candidate((6)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n    assert(candidate((7)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80,\
    \ 9, 99, 10, 120, 11})));\n    assert(candidate((0)) == (std::vector<long>({1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({1, 3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpp9vpjz38.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmpp9vpjz38.cpp:23:34: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018std::vector<long\
    \ int>\u2019)\n   23 |         res.push_back(tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1));\n      |                       ~~~~~~~~~~ ^ ~~~~~~~~~~\n      |       \
    \                   |            |\n      |                          |       \
    \     vector<[...]>\n      |                          vector<[...]>\nIn file included\
    \ from /usr/include/c++/9/bits/stl_algobase.h:67,\n                 from /usr/include/c++/9/bits/specfun.h:45,\n\
    \                 from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpp9vpjz38.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:423:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpp9vpjz38.cpp:23:45:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   23 |         res.push_back(tri(n - 1) + tri(n - 2) + tri(n + 1));\n     \
    \ |                                             ^\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpp9vpjz38.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:1216:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::move_iterator<_IteratorL>\
    \ std::operator+(typename std::move_iterator<_IteratorL>::difference_type, const\
    \ std::move_iterator<_Itera"
  stdout: ''
  timestamp: 1660102344
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    long a = 3;\n    long b = 1;\n    long\
    \ c = 2;\n    long d = 1;\n    long temp;\n    long sum = 0;\n    long tri_sum\
    \ = 0;\n    long tri_sum2 = 0;\n    long tri_sum3 = 0;\n    long tri_sum4 = 0;\n\
    \    long tri_sum5 = 0;\n    long tri_sum6 = 0;\n    long tri_sum7 = 0;\n    long\
    \ tri_sum8 = 0;\n    long tri_sum9 = 0;\n    long tri_sum10 = 0;\n    long tri_sum11\
    \ = 0;\n    long tri_sum12 = 0;\n    long tri_sum13 = 0;\n    long tri_sum14 =\
    \ 0;\n    long tri_sum15 = 0;\n    long tri_sum16 = 0;\n    long tri_sum17 = 0;\n\
    \    long tri_sum18 = 0;\n    long tri_sum19 = 0;\n    long tri_sum20 = 0;\n \
    \   long tri_sum21 = 0;\n    long tri_sum22 = 0;\n    long tri_sum23 = 0;\n  \
    \  long tri_sum24 = 0;\n    long tri_sum25 = 0;\n    long tri_sum26 = 0;\n   \
    \ long tri_sum27 = 0;\n    long tri_sum28 = 0;\n    long tri_sum29 = 0;\n    long\
    \ tri_sum30 = 0;\n    long tri_sum31 = 0;\n    long tri_sum32 = 0;\n    long tri_sum33\
    \ = 0;\n    long tri_sum34 = 0;\n    long tri_sum35 = 0;\n    long tri_sum36 =\
    \ 0;\n    long tri_sum37 = 0;\n    long tri_sum38 = 0;\n    long tri_sum39 = 0;\n\
    \    long tri_sum40 = 0;\n    long tri_sum41 = 0;\n    long tri_sum42 = 0;\n \
    \   long tri_sum43 = 0;\n    long tri_sum44 = 0;\n    long tri_sum45 = 0;\n  \
    \  long tri_sum46 = 0;\n    long tri_sum47 = 0;\n    long tri_sum48 = 0;\n   \
    \ long tri_sum49 = 0;\n    long tri_sum50 = 0;\n    long tri_sum51 = 0;\n    long\
    \ tri_sum52 = 0;\n    long tri_sum53 = 0;\n    long tri_sum54 = 0;\n    long tri_sum55\
    \ = 0;\n    long tri_sum56 = 0;\n    long tri_sum57 = 0;\n    long tri_sum58 =\
    \ 0;\n    long tri_sum59 = 0;\n    long tri_sum60 = 0;\n    \n}\nint main() {\n\
    \    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  status: Exception
  stderr: 'tmp5zbt05_9: /tmp/tmp5zbt05_9.cpp:90: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102340
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res;\n    if (n == 1)\n        res.push_back(3);\n\
    \    else if (n % 2 == 0)\n        res.push_back(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1));\n    else\n        res.push_back(tri(n - 1) + tri(n - 2) + tri(n + 1)\
    \ + tri(n - 3) + tri(n - 4));\n    return res;\n}\nint main() {\n    auto candidate\
    \ = tri;\n    assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n \
    \   assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n    assert(candidate((6)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n    assert(candidate((7)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80,\
    \ 9, 99, 10, 120, 11})));\n    assert(candidate((0)) == (std::vector<long>({1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({1, 3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpp9vpjz38.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmpp9vpjz38.cpp:23:34: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018std::vector<long\
    \ int>\u2019)\n   23 |         res.push_back(tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1));\n      |                       ~~~~~~~~~~ ^ ~~~~~~~~~~\n      |       \
    \                   |            |\n      |                          |       \
    \     vector<[...]>\n      |                          vector<[...]>\nIn file included\
    \ from /usr/include/c++/9/bits/stl_algobase.h:67,\n                 from /usr/include/c++/9/bits/specfun.h:45,\n\
    \                 from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpp9vpjz38.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:423:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpp9vpjz38.cpp:23:45:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   23 |         res.push_back(tri(n - 1) + tri(n - 2) + tri(n + 1));\n     \
    \ |                                             ^\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpp9vpjz38.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:1216:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::move_iterator<_IteratorL>\
    \ std::operator+(typename std::move_iterator<_IteratorL>::difference_type, const\
    \ std::move_iterator<_Itera"
  stdout: ''
  timestamp: 1660102344
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res;\n    long a = 3;\n    long b = 0;\n    long\
    \ c = 1;\n    long d = 1;\n    long temp;\n    long tri_sum = 0;\n    long tri_sum2\
    \ = 0;\n    long tri_sum3 = 0;\n    long tri_sum4 = 0;\n    long tri_sum5 = 0;\n\
    \    long tri_sum6 = 0;\n    long tri_sum7 = 0;\n    long tri_sum8 = 0;\n    long\
    \ tri_sum9 = 0;\n    long tri_sum10 = 0;\n    long tri_sum11 = 0;\n    long tri_sum12\
    \ = 0;\n    long tri_sum13 = 0;\n    long tri_sum14 = 0;\n    long tri_sum15 =\
    \ 0;\n    long tri_sum16 = 0;\n    long tri_sum17 = 0;\n    long tri_sum18 = 0;\n\
    \    long tri_sum19 = 0;\n    long tri_sum20 = 0;\n    long tri_sum21 = 0;\n \
    \   long tri_sum22 = 0;\n    long tri_sum23 = 0;\n    long tri_sum24 = 0;\n  \
    \  long tri_sum25 = 0;\n    long tri_sum26 = 0;\n    long tri_sum27 = 0;\n   \
    \ long tri_sum28 = 0;\n    long tri_sum29 = 0;\n    long tri_sum30 = 0;\n    long\
    \ tri_sum31 = 0;\n    long tri_sum32 = 0;\n    long tri_sum33 = 0;\n    long tri_sum34\
    \ = 0;\n    long tri_sum35 = 0;\n    long tri_sum36 = 0;\n    long tri_sum37 =\
    \ 0;\n    long tri_sum38 = 0;\n    long tri_sum39 = 0;\n    long tri_sum40 = 0;\n\
    \    long tri_sum41 = 0;\n    long tri_sum42 = 0;\n    long tri_sum43 = 0;\n \
    \   long tri_sum44 = 0;\n    long tri_sum45 = 0;\n    long tri_sum46 = 0;\n  \
    \  long tri_sum47 = 0;\n    long tri_sum48 = 0;\n    long tri_sum49 = 0;\n   \
    \ long tri_sum50 = 0;\n    long tri_sum51 = 0;\n    long tri_sum52 = 0;\n    long\
    \ tri_sum53 = 0;\n    long tri_sum54 = 0;\n    long tri_sum55 = 0;\n    long tri_sum56\
    \ = 0;\n    long tri_sum57 = 0;\n    long tri_sum58 = 0;\n    long tri_sum59 =\
    \ 0;\n    long tri_sum60 = 0;\n    long tri_sum61\n}\nint main() {\n    auto candidate\
    \ = tri;\n    assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n \
    \   assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n    assert(candidate((6)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n    assert(candidate((7)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80,\
    \ 9, 99, 10, 120, 11})));\n    assert(candidate((0)) == (std::vector<long>({1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({1, 3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9o_t189m.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmp9o_t189m.cpp:86:1: error: expected initializer before \u2018\
    }\u2019 token\n   86 | }\n      | ^\n/tmp/tmp9o_t189m.cpp:86:1: warning: no return\
    \ statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660102344
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    long tri_1 = 1, tri_2 = 2, tri_3 =\
    \ tri_1 + tri_2;\n    long tri_4 = tri_3;\n    long tri_5 = tri_4;\n    long tri_6\
    \ = tri_5;\n    long tri_7 = tri_6;\n    long tri_8 = tri_7;\n    long tri_9 =\
    \ tri_8;\n    long tri_10 = tri_9;\n    long tri_11 = tri_10;\n    long tri_12\
    \ = tri_11;\n    long tri_13 = tri_12;\n    long tri_14 = tri_13;\n    long tri_15\
    \ = tri_14;\n    long tri_16 = tri_15;\n    long tri_17 = tri_16;\n    long tri_18\
    \ = tri_17;\n    long tri_19 = tri_18;\n    long tri_20 = tri_19;\n    long tri_21\
    \ = tri_20;\n    long tri_22 = tri_21;\n    long tri_23 = tri_22;\n    long tri_24\
    \ = tri_23;\n    long tri_25 = tri_24;\n    long tri_26 = tri_25;\n    long tri_27\
    \ = tri_26;\n    long tri_28 = tri_27;\n    long tri_29 = tri_28;\n    long tri_30\
    \ = tri_29;\n    long tri_31 = tri_30;\n    long tri_32 = tri_31;\n    long tri_33\
    \ = tri_32;\n    long tri_34 = tri_33;\n    long tri_35 = tri_34;\n    long tri_36\
    \ = tri_35;\n    long tri_37 = tri_36;\n    long tri_38 = tri_37;\n    long tri_39\
    \ = tri_38;\n    long tri_40 = tri_39;\n    long tri_41 = tri_40;\n    long tri_42\
    \ = tri_41;\n    long tri_43 = tri_42;\n    long tri_44 = tri_43;\n    long tri_45\
    \ = tri_44;\n    long tri_46 = tri_45;\n    long tri_47 = tri_46;\n    long tri_48\
    \ = tri_47;\n    long tri_49 = tri_48;\n    long tri_50 = tri_49;\n    long tri_51\
    \ = tri_\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdph87_yh.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmpdph87_yh.cpp:68:19: error: \u2018tri_\u2019 was not declared\
    \ in this scope; did you mean \u2018tri_9\u2019?\n   68 |     long tri_51 = tri_\n\
    \      |                   ^~~~\n      |                   tri_9\n/tmp/tmpdph87_yh.cpp:69:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   69 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660102344
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res;\n    if(n<=0)\n        return res;\n    long\
    \ a = 1;\n    long b = 2;\n    long c = 1;\n    long d = 1;\n    long temp;\n\
    \    long temp1;\n    long temp2;\n    long temp3;\n    long temp4;\n    long\
    \ temp5;\n    long temp6;\n    long temp7;\n    long temp8;\n    long temp9;\n\
    \    long temp10;\n    long temp11;\n    long temp12;\n    long temp13;\n    long\
    \ temp14;\n    long temp15;\n    long temp16;\n    long temp17;\n    long temp18;\n\
    \    long temp19;\n    long temp20;\n    long temp21;\n    long temp22;\n    long\
    \ temp23;\n    long temp24;\n    long temp25;\n    long temp26;\n    long temp27;\n\
    \    long temp28;\n    long temp29;\n    long temp30;\n    long temp31;\n    long\
    \ temp32;\n    long temp33;\n    long temp34;\n    long temp35;\n    long temp36;\n\
    \    long temp37;\n    long temp38;\n    long temp39;\n    long temp40;\n    long\
    \ temp41;\n    long temp42;\n    long temp43;\n    long temp44;\n    long temp45;\n\
    \    long temp46;\n    long temp47;\n    long temp48;\n    long temp49;\n    long\
    \ temp50;\n    long temp51;\n    long temp52;\n    long temp53;\n    long temp54;\n\
    \    long temp55;\n    long temp56;\n    long temp57;\n    long temp58;\n    long\
    \ temp59;\n    long temp60;\n    long temp61;\n    long temp62;\n    long temp63;\n\
    \    long temp64;\n    long temp65;\n    long temp66;\n    long temp67;\n    long\
    \ temp68;\n    long temp69;\n    long temp70;\n    long temp71;\n    long temp72;\n\
    \    long temp73;\n    long temp74;\n    long temp75;\n    long temp76;\n    long\
    \ temp77;\n    long temp78;\n    long temp79;\n    long temp80;\n    long temp81;\n\
    \    long temp82;\n    \n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  status: Exception
  stderr: 'tmp4_gjpxlq: /tmp/tmp4_gjpxlq.cpp:113: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102344
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    long a = 1;\n    long b = 2;\n    long\
    \ c = 1;\n    long d = 1;\n    long temp;\n    long tri_sum = 0;\n    long tri_sum2\
    \ = 0;\n    long tri_sum3 = 0;\n    long tri_sum4 = 0;\n    long tri_sum5 = 0;\n\
    \    long tri_sum6 = 0;\n    long tri_sum7 = 0;\n    long tri_sum8 = 0;\n    long\
    \ tri_sum9 = 0;\n    long tri_sum10 = 0;\n    long tri_sum11 = 0;\n    long tri_sum12\
    \ = 0;\n    long tri_sum13 = 0;\n    long tri_sum14 = 0;\n    long tri_sum15 =\
    \ 0;\n    long tri_sum16 = 0;\n    long tri_sum17 = 0;\n    long tri_sum18 = 0;\n\
    \    long tri_sum19 = 0;\n    long tri_sum20 = 0;\n    long tri_sum21 = 0;\n \
    \   long tri_sum22 = 0;\n    long tri_sum23 = 0;\n    long tri_sum24 = 0;\n  \
    \  long tri_sum25 = 0;\n    long tri_sum26 = 0;\n    long tri_sum27 = 0;\n   \
    \ long tri_sum28 = 0;\n    long tri_sum29 = 0;\n    long tri_sum30 = 0;\n    long\
    \ tri_sum31 = 0;\n    long tri_sum32 = 0;\n    long tri_sum33 = 0;\n    long tri_sum34\
    \ = 0;\n    long tri_sum35 = 0;\n    long tri_sum36 = 0;\n    long tri_sum37 =\
    \ 0;\n    long tri_sum38 = 0;\n    long tri_sum39 = 0;\n    long tri_sum40 = 0;\n\
    \    long tri_sum41 = 0;\n    long tri_sum42 = 0;\n    long tri_sum43 = 0;\n \
    \   long tri_sum44 = 0;\n    long tri_sum45 = 0;\n    long tri_sum46 = 0;\n  \
    \  long tri_sum47 = 0;\n    long tri_sum48 = 0;\n    long tri_sum49 = 0;\n   \
    \ long tri_sum50 = 0;\n    long tri_sum51 = 0;\n    long tri_sum52 = 0;\n    long\
    \ tri_sum53 = 0;\n    long tri_sum54 = 0;\n    long tri_sum55 = 0;\n    long tri_sum56\
    \ = 0;\n    long tri_sum57 = 0;\n    long tri_sum58 = 0;\n    long tri_sum59 =\
    \ 0;\n    long tri_sum60 = 0;\n    long tri_sum61\n}\nint main() {\n    auto candidate\
    \ = tri;\n    assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n \
    \   assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n    assert(candidate((6)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n    assert(candidate((7)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80,\
    \ 9, 99, 10, 120, 11})));\n    assert(candidate((0)) == (std::vector<long>({1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({1, 3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7orxn98k.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmp7orxn98k.cpp:86:1: error: expected initializer before \u2018\
    }\u2019 token\n   86 | }\n      | ^\n/tmp/tmp7orxn98k.cpp:86:1: warning: no return\
    \ statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660102344
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res;\n    long a = 1;\n    long b = 1;\n    long\
    \ c = 1;\n    long d = 1;\n    long temp;\n    long i;\n    for(i = 1; i <= n;\
    \ i++) {\n        temp = a;\n        a = b;\n        b = c + d;\n        c = temp;\n\
    \        d = a + b + c;\n        res.push_back(d);\n    }\n    return res;\n}\n\
    int main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  status: Exception
  stderr: 'tmpve94xhdt: /tmp/tmpve94xhdt.cpp:38: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102344
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    long prev = 1;\n    long curr = 1;\n\
    \    long next = 1;\n    long sum = 0;\n    long i = 1;\n    long j = 1;\n   \
    \ long k = 1;\n    long sum = 0;\n    long temp;\n    long temp2;\n    long temp3;\n\
    \    long temp4;\n    long temp5;\n    long temp6;\n    long temp7;\n    long\
    \ temp8;\n    long temp9;\n    long temp10;\n    long temp11;\n    long temp12;\n\
    \    long temp13;\n    long temp14;\n    long temp15;\n    long temp16;\n    long\
    \ temp17;\n    long temp18;\n    long temp19;\n    long temp20;\n    long temp21;\n\
    \    long temp22;\n    long temp23;\n    long temp24;\n    long temp25;\n    long\
    \ temp26;\n    long temp27;\n    long temp28;\n    long temp29;\n    long temp30;\n\
    \    long temp31;\n    long temp32;\n    long temp33;\n    long temp34;\n    long\
    \ temp35;\n    long temp36;\n    long temp37;\n    long temp38;\n    long temp39;\n\
    \    long temp40;\n    long temp41;\n    long temp42;\n    long temp43;\n    long\
    \ temp44;\n    long temp45;\n    long temp46;\n    long temp47;\n    long temp48;\n\
    \    long temp49;\n    long temp50;\n    long temp51;\n    long temp52;\n    long\
    \ temp53;\n    long temp54;\n    long temp55;\n    long temp56;\n    long temp57;\n\
    \    long temp58;\n    long temp59;\n    long temp60;\n    long temp61;\n    long\
    \ temp62;\n    long temp63;\n    long temp64;\n    long temp65;\n    long temp66;\n\
    \    long temp67;\n    long temp68;\n    long temp69;\n    long temp70;\n    long\
    \ temp71;\n    long temp72;\n    long temp73;\n    long temp74;\n    long temp75;\n\
    \    long temp76;\n    long temp77;\n    long temp78;\n    long temp79;\n    long\
    \ temp80;\n    long temp81;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0d4pvx_v.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmp0d4pvx_v.cpp:27:10: error: redeclaration of \u2018long\
    \ int sum\u2019\n   27 |     long sum = 0;\n      |          ^~~\n/tmp/tmp0d4pvx_v.cpp:23:10:\
    \ note: \u2018long int sum\u2019 previously declared here\n   23 |     long sum\
    \ = 0;\n      |          ^~~\n/tmp/tmp0d4pvx_v.cpp:109:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n  109 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660102344
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    long tri_sum = 1;\n    long tri_sum2\
    \ = 1;\n    long tri_sum3 = 1;\n    long tri_sum4 = 1;\n    long tri_sum5 = 1;\n\
    \    long tri_sum6 = 1;\n    long tri_sum7 = 1;\n    long tri_sum8 = 1;\n    long\
    \ tri_sum9 = 1;\n    long tri_sum10 = 1;\n    long tri_sum11 = 1;\n    long tri_sum12\
    \ = 1;\n    long tri_sum13 = 1;\n    long tri_sum14 = 1;\n    long tri_sum15 =\
    \ 1;\n    long tri_sum16 = 1;\n    long tri_sum17 = 1;\n    long tri_sum18 = 1;\n\
    \    long tri_sum19 = 1;\n    long tri_sum20 = 1;\n    long tri_sum21 = 1;\n \
    \   long tri_sum22 = 1;\n    long tri_sum23 = 1;\n    long tri_sum24 = 1;\n  \
    \  long tri_sum25 = 1;\n    long tri_sum26 = 1;\n    long tri_sum27 = 1;\n   \
    \ long tri_sum28 = 1;\n    long tri_sum29 = 1;\n    long tri_sum30 = 1;\n    long\
    \ tri_sum31 = 1;\n    long tri_sum32 = 1;\n    long tri_sum33 = 1;\n    long tri_sum34\
    \ = 1;\n    long tri_sum35 = 1;\n    long tri_sum36 = 1;\n    long tri_sum37 =\
    \ 1;\n    long tri_sum38 = 1;\n    long tri_sum39 = 1;\n    long tri_sum40 = 1;\n\
    \    long tri_sum41 = 1;\n    long tri_sum42 = 1;\n    long tri_sum43 = 1;\n \
    \   long tri_sum44 = 1;\n    long tri_sum45 = 1;\n    long tri_sum46 = 1;\n  \
    \  long tri_sum47 = 1;\n    long tri_sum48 = 1;\n    long tri_sum49 = 1;\n   \
    \ long tri_sum50 = 1;\n    long tri_sum51 = 1;\n    long tri_sum52 = 1;\n    long\
    \ tri_sum53 = 1;\n    long tri_sum54 = 1;\n    long tri_sum55 = 1;\n    long tri_sum56\
    \ = 1;\n    long tri_sum57 = 1;\n    long tri_sum58 = 1;\n    long tri_sum59 =\
    \ 1;\n    long tri_sum60 = 1;\n    long tri_sum61 = 1;\n    long tri_sum62 = 1;\n\
    \    long tri_sum63 = 1;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  status: Exception
  stderr: 'tmpqjyo28bn: /tmp/tmpqjyo28bn.cpp:86: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102344
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res;\n    if (n == 0)\n        return res;\n   \
    \ if (n == 1)\n        return std::vector<long>{3};\n    if (n == 2)\n       \
    \ return std::vector<long>{1, 3};\n    if (n % 2 == 0)\n        return tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1);\n    return tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1) + tri(n - 3) + tri(n - 4);\n}\nint main() {\n    auto candidate = tri;\n\
    \    assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8qkmrv1b.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmp8qkmrv1b.cpp:27:27: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018std::vector<long\
    \ int>\u2019)\n   27 |         return tri(n - 1) + tri(n - 2) + tri(n + 1);\n\
    \      |                ~~~~~~~~~~ ^ ~~~~~~~~~~\n      |                   | \
    \           |\n      |                   |            vector<[...]>\n      | \
    \                  vector<[...]>\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmp8qkmrv1b.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:423:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmp8qkmrv1b.cpp:27:38:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   27 |         return tri(n - 1) + tri(n - 2) + tri(n + 1);\n      |      \
    \                                ^\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmp8qkmrv1b.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:1216:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::move_iterator<_IteratorL>\
    \ std::operator+(typename std::move_iterator<_IteratorL>::difference_type, const\
    \ std::move_iterator<_IteratorL>&)\u2019\n 1216 |     operator+(typename move_iter"
  stdout: ''
  timestamp: 1660102344
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    if (n == 1)\n        result.push_back(3);\n\
    \    else if (n % 2 == 0)\n        result.push_back(tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1));\n    else\n        result.push_back(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n - 3) + tri(n - 4));\n    return result;\n}\nint main() {\n    auto\
    \ candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1, 3, 2,\
    \ 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5esl055p.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmp5esl055p.cpp:23:37: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018std::vector<long\
    \ int>\u2019)\n   23 |         result.push_back(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1));\n      |                          ~~~~~~~~~~ ^ ~~~~~~~~~~\n      |  \
    \                           |            |\n      |                          \
    \   |            vector<[...]>\n      |                             vector<[...]>\n\
    In file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n           \
    \      from /usr/include/c++/9/bits/specfun.h:45,\n                 from /usr/include/c++/9/cmath:1927,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmp5esl055p.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:423:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmp5esl055p.cpp:23:48:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   23 |         result.push_back(tri(n - 1) + tri(n - 2) + tri(n + 1));\n  \
    \    |                                                ^\nIn file included from\
    \ /usr/include/c++/9/bits/stl_algobase.h:67,\n                 from /usr/include/c++/9/bits/specfun.h:45,\n\
    \                 from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmp5esl055p.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:1216:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::move_iterator<_IteratorL>\
    \ std::operator+(typename std::move_iterator<_IteratorL>::difference_type, const\
    \ std:"
  stdout: ''
  timestamp: 1660102341
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res;\n    if (n == 1)\n        res.push_back(1);\n\
    \    else if (n == 2)\n        res.push_back(3);\n    else if (n % 2 == 0)\n \
    \       res.push_back(tri(n - 1) + tri(n - 2) + tri(n + 1));\n    else\n     \
    \   res.push_back(tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2));\n    return\
    \ res;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp04j3im_1.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmp04j3im_1.cpp:25:34: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018std::vector<long\
    \ int>\u2019)\n   25 |         res.push_back(tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1));\n      |                       ~~~~~~~~~~ ^ ~~~~~~~~~~\n      |       \
    \                   |            |\n      |                          |       \
    \     vector<[...]>\n      |                          vector<[...]>\nIn file included\
    \ from /usr/include/c++/9/bits/stl_algobase.h:67,\n                 from /usr/include/c++/9/bits/specfun.h:45,\n\
    \                 from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmp04j3im_1.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:423:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmp04j3im_1.cpp:25:45:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   25 |         res.push_back(tri(n - 1) + tri(n - 2) + tri(n + 1));\n     \
    \ |                                             ^\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmp04j3im_1.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:1216:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::move_iterator<_IteratorL>\
    \ std::operator+(typename std::move_iterator<_IteratorL>::difference_type, const\
    \ std::move_iterator<_Itera"
  stdout: ''
  timestamp: 1660102344
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res;\n    long a = 3;\n    long b = 1;\n    long\
    \ c = 1;\n    long d = 1;\n    long temp;\n    long sum = 0;\n    long k = 0;\n\
    \    long i;\n    for(i = 1; i <= n; i++) {\n        temp = a + b + c + d;\n \
    \       sum += temp;\n        a = b;\n        b = c;\n        c = d;\n       \
    \ d = temp;\n        res[k] = sum;\n        k++;\n    }\n    return res;\n}\n\
    int main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660102345
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res;\n    if (n == 0) return res;\n    if (n ==\
    \ 1) return { 1 };\n    if (n == 2) return { 1, 2, 3 };\n    if (n % 2 == 0) {\n\
    \        long mid = n / 2;\n        long left = tri(mid);\n        long right\
    \ = tri(mid - 1) + tri(mid + 1);\n        for (long i = 0; i < left + right; i++)\
    \ {\n            res.push_back(i);\n        }\n    } else {\n        long mid\
    \ = n / 2;\n        long left = tri(mid - 1) + tri(mid + 1);\n        long right\
    \ = tri(mid);\n        for (long i = 0; i < left + right; i++) {\n           \
    \ res.push_back(i);\n        }\n    }\n    return res;\n}\nint main() {\n    auto\
    \ candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1, 3, 2,\
    \ 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfcqcxjbx.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmpfcqcxjbx.cpp:25:24: error: cannot convert \u2018std::vector<long\
    \ int>\u2019 to \u2018long int\u2019 in initialization\n   25 |         long left\
    \ = tri(mid);\n      |                     ~~~^~~~~\n      |                 \
    \       |\n      |                        std::vector<long int>\n/tmp/tmpfcqcxjbx.cpp:26:35:\
    \ error: no match for \u2018operator+\u2019 (operand types are \u2018std::vector<long\
    \ int>\u2019 and \u2018std::vector<long int>\u2019)\n   26 |         long right\
    \ = tri(mid - 1) + tri(mid + 1);\n      |                      ~~~~~~~~~~~~ ^\
    \ ~~~~~~~~~~~~\n      |                         |              |\n      |    \
    \                     vector<[...]>  vector<[...]>\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpfcqcxjbx.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:423:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpfcqcxjbx.cpp:26:48:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   26 |         long right = tri(mid - 1) + tri(mid + 1);\n      |         \
    \                                       ^\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpfcqcxjbx.cpp:2:\n/usr/include/c++/9/bits/"
  stdout: ''
  timestamp: 1660102344
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res;\n    long a = 1;\n    long b = 1;\n    long\
    \ c = 1;\n    long d = 1;\n    long temp;\n    long temp2;\n    long temp3;\n\
    \    long temp4;\n    long temp5;\n    long temp6;\n    long temp7;\n    long\
    \ temp8;\n    long temp9;\n    long temp10;\n    long temp11;\n    long temp12;\n\
    \    long temp13;\n    long temp14;\n    long temp15;\n    long temp16;\n    long\
    \ temp17;\n    long temp18;\n    long temp19;\n    long temp20;\n    long temp21;\n\
    \    long temp22;\n    long temp23;\n    long temp24;\n    long temp25;\n    long\
    \ temp26;\n    long temp27;\n    long temp28;\n    long temp29;\n    long temp30;\n\
    \    long temp31;\n    long temp32;\n    long temp33;\n    long temp34;\n    long\
    \ temp35;\n    long temp36;\n    long temp37;\n    long temp38;\n    long temp39;\n\
    \    long temp40;\n    long temp41;\n    long temp42;\n    long temp43;\n    long\
    \ temp44;\n    long temp45;\n    long temp46;\n    long temp47;\n    long temp48;\n\
    \    long temp49;\n    long temp50;\n    long temp51;\n    long temp52;\n    long\
    \ temp53;\n    long temp54;\n    long temp55;\n    long temp56;\n    long temp57;\n\
    \    long temp58;\n    long temp59;\n    long temp60;\n    long temp61;\n    long\
    \ temp62;\n    long temp63;\n    long temp64;\n    long temp65;\n    long temp66;\n\
    \    long temp67;\n    long temp68;\n    long temp69;\n    long temp70;\n    long\
    \ temp71;\n    long temp72;\n    long temp73;\n    long temp74;\n    long temp75;\n\
    \    long temp76;\n    long temp77;\n    long temp78;\n    long temp79;\n    long\
    \ temp80;\n    long temp81;\n    long temp82;\n    long temp83;\n    long temp84;\n\
    \    long \n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpton1drls.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmpton1drls.cpp:109:1: error: expected unqualified-id before\
    \ \u2018}\u2019 token\n  109 | }\n      | ^\n/tmp/tmpton1drls.cpp:109:1: warning:\
    \ no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660102344
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res;\n    if (n == 0) return res;\n    if (n ==\
    \ 1) return std::vector<long>{3};\n    if (n == 2) return std::vector<long>{1,\
    \ 3};\n    if (n % 2 == 0) return tri(n - 1) + tri(n - 2) + tri(n + 1);\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2);\n}\nint main() {\n    auto\
    \ candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1, 3, 2,\
    \ 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjzml9vzt.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmpjzml9vzt.cpp:23:39: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018std::vector<long\
    \ int>\u2019)\n   23 |     if (n % 2 == 0) return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1);\n      |                            ~~~~~~~~~~ ^ ~~~~~~~~~~\n      | \
    \                              |            |\n      |                       \
    \        |            vector<[...]>\n      |                               vector<[...]>\n\
    In file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n           \
    \      from /usr/include/c++/9/bits/specfun.h:45,\n                 from /usr/include/c++/9/cmath:1927,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpjzml9vzt.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:423:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpjzml9vzt.cpp:23:50:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   23 |     if (n % 2 == 0) return tri(n - 1) + tri(n - 2) + tri(n + 1);\n \
    \     |                                                  ^\nIn file included from\
    \ /usr/include/c++/9/bits/stl_algobase.h:67,\n                 from /usr/include/c++/9/bits/specfun.h:45,\n\
    \                 from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpjzml9vzt.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:1216:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::move_iterator<_IteratorL>\
    \ std::operator+(typename std::move_iterator<_IteratorL>::difference_type"
  stdout: ''
  timestamp: 1660102344
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    if (n == 1)\n        result.push_back(3);\n\
    \    else if (n % 2 == 0)\n        result.push_back(tri(n - 1) + tri(n - 2) +\
    \ tri(n - 3));\n    else\n        result.push_back(tri(n - 1) + tri(n - 2) + tri(n\
    \ - 3) + tri(n - 4));\n    return result;\n}\nint main() {\n    auto candidate\
    \ = tri;\n    assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n \
    \   assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n    assert(candidate((6)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n    assert(candidate((7)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80,\
    \ 9, 99, 10, 120, 11})));\n    assert(candidate((0)) == (std::vector<long>({1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({1, 3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8ix4rgwf.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmp8ix4rgwf.cpp:23:37: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018std::vector<long\
    \ int>\u2019)\n   23 |         result.push_back(tri(n - 1) + tri(n - 2) + tri(n\
    \ - 3));\n      |                          ~~~~~~~~~~ ^ ~~~~~~~~~~\n      |  \
    \                           |            |\n      |                          \
    \   |            vector<[...]>\n      |                             vector<[...]>\n\
    In file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n           \
    \      from /usr/include/c++/9/bits/specfun.h:45,\n                 from /usr/include/c++/9/cmath:1927,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmp8ix4rgwf.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:423:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmp8ix4rgwf.cpp:23:48:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   23 |         result.push_back(tri(n - 1) + tri(n - 2) + tri(n - 3));\n  \
    \    |                                                ^\nIn file included from\
    \ /usr/include/c++/9/bits/stl_algobase.h:67,\n                 from /usr/include/c++/9/bits/specfun.h:45,\n\
    \                 from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmp8ix4rgwf.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:1216:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::move_iterator<_IteratorL>\
    \ std::operator+(typename std::move_iterator<_IteratorL>::difference_type, const\
    \ std:"
  stdout: ''
  timestamp: 1660102342
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res;\n    long a = 1, b = 2, c = 3;\n    long temp;\n\
    \    long count = 0;\n    while(count < n) {\n        temp = a;\n        a = b;\n\
    \        b = c;\n        c = temp + a + b;\n        res.push_back(c);\n      \
    \  count++;\n    }\n    return res;\n}\nint main() {\n    auto candidate = tri;\n\
    \    assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  status: Exception
  stderr: 'tmpman57j2u: /tmp/tmpman57j2u.cpp:35: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102345
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    long a = 1;\n    long b = 2;\n    long\
    \ c = 1;\n    long d = 1;\n    long temp;\n    long i;\n    for(i = 0; i < n;\
    \ i++) {\n        if(i%2 == 0) {\n            temp = a;\n            a = b;\n\
    \            b = temp + c;\n            c = d;\n            d = a + b;\n     \
    \       result.push_back(d);\n        } else {\n            temp = a;\n      \
    \      a = b;\n            b = temp + c;\n            c = d;\n            d =\
    \ a + b;\n            result.push_back(d);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  status: Exception
  stderr: 'tmpkam_1fes: /tmp/tmpkam_1fes.cpp:47: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102345
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res;\n    long a = 1;\n    long b = 2;\n    long\
    \ c = 3;\n    long d = a + b + c;\n    long temp;\n    if (n % 2 == 0) {\n   \
    \     temp = tri(n - 1) + tri(n - 2) + tri(n + 1);\n        res.push_back(temp);\n\
    \    } else {\n        temp = tri(n - 1) + tri(n - 2) + tri(n + 1);\n        res.push_back(temp);\n\
    \        temp = tri(n - 1) + tri(n - 2) + tri(n + 1);\n        res.push_back(temp);\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsbu19z4s.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmpsbu19z4s.cpp:26:27: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018std::vector<long\
    \ int>\u2019)\n   26 |         temp = tri(n - 1) + tri(n - 2) + tri(n + 1);\n\
    \      |                ~~~~~~~~~~ ^ ~~~~~~~~~~\n      |                   | \
    \           |\n      |                   |            vector<[...]>\n      | \
    \                  vector<[...]>\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpsbu19z4s.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:423:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpsbu19z4s.cpp:26:38:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   26 |         temp = tri(n - 1) + tri(n - 2) + tri(n + 1);\n      |      \
    \                                ^\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpsbu19z4s.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:1216:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::move_iterator<_IteratorL>\
    \ std::operator+(typename std::move_iterator<_IteratorL>::difference_type, const\
    \ std::move_iterator<_IteratorL>&)\u2019\n 1216 |     operator+(typename move_iter"
  stdout: ''
  timestamp: 1660102344
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    if (n == 1)\n    {\n        result.push_back(1);\n\
    \        return result;\n    }\n    if (n == 2)\n    {\n        result.push_back(3);\n\
    \        return result;\n    }\n    long tri_1 = tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1);\n    long tri_2 = tri(n - 2) + tri(n - 1) + tri(n + 1);\n    long tri_3\
    \ = tri(n - 1) + tri(n + 1) + tri(n + 2);\n    result.push_back(tri_1);\n    result.push_back(tri_2);\n\
    \    result.push_back(tri_3);\n    return result;\n}\nint main() {\n    auto candidate\
    \ = tri;\n    assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n \
    \   assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n    assert(candidate((6)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n    assert(candidate((7)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80,\
    \ 9, 99, 10, 120, 11})));\n    assert(candidate((0)) == (std::vector<long>({1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({1, 3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6by_iorb.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmp6by_iorb.cpp:30:29: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018std::vector<long\
    \ int>\u2019)\n   30 |     long tri_1 = tri(n - 1) + tri(n - 2) + tri(n + 1);\n\
    \      |                  ~~~~~~~~~~ ^ ~~~~~~~~~~\n      |                   \
    \  |            |\n      |                     |            vector<[...]>\n  \
    \    |                     vector<[...]>\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmp6by_iorb.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:423:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmp6by_iorb.cpp:30:40:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   30 |     long tri_1 = tri(n - 1) + tri(n - 2) + tri(n + 1);\n      |    \
    \                                    ^\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmp6by_iorb.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:1216:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::move_iterator<_IteratorL>\
    \ std::operator+(typename std::move_iterator<_IteratorL>::difference_type, const\
    \ std::move_iterator<_IteratorL>&)\u2019\n 1216 |     operator+(type"
  stdout: ''
  timestamp: 1660102344
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res;\n    long a = 1;\n    long b = 2;\n    long\
    \ c = a + b;\n    long d = c + b;\n    long e = d + c;\n    long f = e + d;\n\
    \    long g = f + e;\n    long h = g + f;\n    long i = h + g;\n    long j = i\
    \ + h;\n    long k = j + i;\n    long l = k + j;\n    long m = l + k;\n    long\
    \ n = m + l;\n    long o = n + m;\n    res.push_back(a);\n    res.push_back(b);\n\
    \    res.push_back(c);\n    res.push_back(d);\n    res.push_back(e);\n    res.push_back(f);\n\
    \    res.push_back(g);\n    res.push_back(h);\n    res.push_back(i);\n    res.push_back(j);\n\
    \    res.push_back(k);\n    res.push_back(l);\n    res.push_back(m);\n    res.push_back(o);\n\
    \    return res;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptdb_8a47.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmptdb_8a47.cpp:33:10: error: declaration of \u2018long int\
    \ n\u2019 shadows a parameter\n   33 |     long n = m + l;\n      |          ^\n"
  stdout: ''
  timestamp: 1660102344
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    if (n == 1)\n        result.push_back(3);\n\
    \    else if (n % 2 == 0)\n        result.push_back(tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1));\n    else\n        result.push_back(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n - 3));\n    return result;\n}\nint main() {\n    auto candidate\
    \ = tri;\n    assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n \
    \   assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n    assert(candidate((6)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n    assert(candidate((7)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80,\
    \ 9, 99, 10, 120, 11})));\n    assert(candidate((0)) == (std::vector<long>({1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({1, 3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplf_6jyk0.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmplf_6jyk0.cpp:23:37: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018std::vector<long\
    \ int>\u2019)\n   23 |         result.push_back(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1));\n      |                          ~~~~~~~~~~ ^ ~~~~~~~~~~\n      |  \
    \                           |            |\n      |                          \
    \   |            vector<[...]>\n      |                             vector<[...]>\n\
    In file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n           \
    \      from /usr/include/c++/9/bits/specfun.h:45,\n                 from /usr/include/c++/9/cmath:1927,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmplf_6jyk0.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:423:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmplf_6jyk0.cpp:23:48:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   23 |         result.push_back(tri(n - 1) + tri(n - 2) + tri(n + 1));\n  \
    \    |                                                ^\nIn file included from\
    \ /usr/include/c++/9/bits/stl_algobase.h:67,\n                 from /usr/include/c++/9/bits/specfun.h:45,\n\
    \                 from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmplf_6jyk0.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:1216:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::move_iterator<_IteratorL>\
    \ std::operator+(typename std::move_iterator<_IteratorL>::difference_type, const\
    \ std:"
  stdout: ''
  timestamp: 1660102344
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res;\n    if (n == 0) return res;\n    if (n ==\
    \ 1) return { 1 };\n    if (n % 2 == 0) return { tri(n / 2) + tri(n / 2 + 1) +\
    \ tri(n / 2 + 2) };\n    return { tri(n / 2) + tri(n / 2 + 1) + tri(n / 2 + 2)\
    \ };\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3)) ==\
    \ (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp34mpj1_n.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmp34mpj1_n.cpp:22:41: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018std::vector<long\
    \ int>\u2019)\n   22 |     if (n % 2 == 0) return { tri(n / 2) + tri(n / 2 + 1)\
    \ + tri(n / 2 + 2) };\n      |                              ~~~~~~~~~~ ^ ~~~~~~~~~~~~~~\n\
    \      |                                 |            |\n      |             \
    \                    |            vector<[...]>\n      |                     \
    \            vector<[...]>\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmp34mpj1_n.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:423:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmp34mpj1_n.cpp:22:56:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   22 |     if (n % 2 == 0) return { tri(n / 2) + tri(n / 2 + 1) + tri(n / 2\
    \ + 2) };\n      |                                                        ^\n\
    In file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n           \
    \      from /usr/include/c++/9/bits/specfun.h:45,\n                 from /usr/include/c++/9/cmath:1927,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmp34mpj1_n.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:1216:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::move_iterator<_IteratorL>\
    \ std::operator+(typename std::"
  stdout: ''
  timestamp: 1660102344
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    long a = 3;\n    long b = 0;\n    long\
    \ c = 1;\n    long d = 1;\n    long temp;\n    long sum = 0;\n    long tri_sum\
    \ = 0;\n    long tri_sum2 = 0;\n    long tri_sum3 = 0;\n    long tri_sum4 = 0;\n\
    \    long tri_sum5 = 0;\n    long tri_sum6 = 0;\n    long tri_sum7 = 0;\n    long\
    \ tri_sum8 = 0;\n    long tri_sum9 = 0;\n    long tri_sum10 = 0;\n    long tri_sum11\
    \ = 0;\n    long tri_sum12 = 0;\n    long tri_sum13 = 0;\n    long tri_sum14 =\
    \ 0;\n    long tri_sum15 = 0;\n    long tri_sum16 = 0;\n    long tri_sum17 = 0;\n\
    \    long tri_sum18 = 0;\n    long tri_sum19 = 0;\n    long tri_sum20 = 0;\n \
    \   long tri_sum21 = 0;\n    long tri_sum22 = 0;\n    long tri_sum23 = 0;\n  \
    \  long tri_sum24 = 0;\n    long tri_sum25 = 0;\n    long tri_sum26 = 0;\n   \
    \ long tri_sum27 = 0;\n    long tri_sum28 = 0;\n    long tri_sum29 = 0;\n    long\
    \ tri_sum30 = 0;\n    long tri_sum31 = 0;\n    long tri_sum32 = 0;\n    long tri_sum33\
    \ = 0;\n    long tri_sum34 = 0;\n    long tri_sum35 = 0;\n    long tri_sum36 =\
    \ 0;\n    long tri_sum37 = 0;\n    long tri_sum38 = 0;\n    long tri_sum39 = 0;\n\
    \    long tri_sum40 = 0;\n    long tri_sum41 = 0;\n    long tri_sum42 = 0;\n \
    \   long tri_sum43 = 0;\n    long tri_sum44 = 0;\n    long tri_sum45 = 0;\n  \
    \  long tri_sum46 = 0;\n    long tri_sum47 = 0;\n    long tri_sum48 = 0;\n   \
    \ long tri_sum49 = 0;\n    long tri_sum50 = 0;\n    long tri_sum51 = 0;\n    long\
    \ tri_sum52 = 0;\n    long tri_sum53 = 0;\n    long tri_sum54 = 0;\n    long tri_sum55\
    \ = 0;\n    long tri_sum56 = 0;\n    long tri_sum57 = 0;\n    long tri_sum58 =\
    \ 0;\n    long tri_sum59 = 0;\n    long tri_sum60 = 0;\n    \n}\nint main() {\n\
    \    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  status: Exception
  stderr: 'tmpf5ip7h13: /tmp/tmpf5ip7h13.cpp:90: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102345
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res;\n    if (n == 0) return res;\n    if (n ==\
    \ 1) return std::vector<long>{3};\n    if (n % 2 == 0) return tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1);\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n\
    \ - 3) + tri(n - 4);\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpaksgp91r.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmpaksgp91r.cpp:22:39: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018std::vector<long\
    \ int>\u2019)\n   22 |     if (n % 2 == 0) return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1);\n      |                            ~~~~~~~~~~ ^ ~~~~~~~~~~\n      | \
    \                              |            |\n      |                       \
    \        |            vector<[...]>\n      |                               vector<[...]>\n\
    In file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n           \
    \      from /usr/include/c++/9/bits/specfun.h:45,\n                 from /usr/include/c++/9/cmath:1927,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpaksgp91r.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:423:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpaksgp91r.cpp:22:50:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   22 |     if (n % 2 == 0) return tri(n - 1) + tri(n - 2) + tri(n + 1);\n \
    \     |                                                  ^\nIn file included from\
    \ /usr/include/c++/9/bits/stl_algobase.h:67,\n                 from /usr/include/c++/9/bits/specfun.h:45,\n\
    \                 from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpaksgp91r.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:1216:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::move_iterator<_IteratorL>\
    \ std::operator+(typename std::move_iterator<_IteratorL>::difference_type"
  stdout: ''
  timestamp: 1660102344
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    long a = 1;\n    long b = 2;\n    long\
    \ c = 1;\n    long d = 1;\n    long temp;\n    long sum = 0;\n    long count =\
    \ 0;\n    long limit = (long) sqrt(n);\n    long mid;\n    long tri_sum = 0;\n\
    \    long tri_count = 0;\n    long tri_limit = (long) sqrt(n);\n    long tri_mid;\n\
    \    long tri_sum2 = 0;\n    long tri_count2 = 0;\n    long tri_limit2 = (long)\
    \ sqrt(n);\n    long tri_mid2;\n    long tri_sum3 = 0;\n    long tri_count3 =\
    \ 0;\n    long tri_limit3 = (long) sqrt(n);\n    long tri_mid3;\n    long tri_sum4\
    \ = 0;\n    long tri_count4 = 0;\n    long tri_limit4 = (long) sqrt(n);\n    long\
    \ tri_mid4;\n    long tri_sum5 = 0;\n    long tri_count5 = 0;\n    long tri_limit5\
    \ = (long) sqrt(n);\n    long tri_mid5;\n    long tri_sum6 = 0;\n    long tri_count6\
    \ = 0;\n    long tri_limit6 = (long) sqrt(n);\n    long tri_mid6;\n    long tri_sum7\
    \ = 0;\n    long tri_count7 = 0;\n    long tri_limit7 = (long) sqrt(n);\n    long\
    \ tri_mid7;\n    long tri_sum8 = 0;\n    long tri_count8 = 0;\n    long tri_limit8\
    \ = (long) sqrt(n);\n    long tri_mid8;\n    long tri_sum9 = 0;\n    long tri_count9\
    \ = 0;\n    long tri_limit9 = (long) sqrt(n);\n    long tri_mid9;\n    long tri_sum10\
    \ = 0;\n    long tri_count10 = 0;\n    long tri_limit10 = (long) sqrt(n);\n  \
    \  long tri_mid10;\n    long tri_sum11 = 0;\n    long tri_count11 = 0;\n    long\
    \ tri_limit11 = (long) sqrt(n);\n    long tri_mid11;\n    long tri_sum12 = 0;\n\
    \    long tri_count12 = 0;\n    long tri_limit12 = (long) sqrt(n);\n    long tri_mid12;\n\
    \    long tri_sum13 = 0;\n    long tri_count13 = 0;\n    long tri_limit13 = (long)\
    \ sqrt(n);\n    long tri_mid13;\n    long tri_sum14 = 0;\n    long tri_count14\
    \ = 0;\n    long tri_limit14 = (long) sqrt(n);\n    \n}\nint main() {\n    auto\
    \ candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1, 3, 2,\
    \ 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  status: Exception
  stderr: 'tmpmdk7buf5: /tmp/tmpmdk7buf5.cpp:88: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102345
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res;\n    long a = 1;\n    long b = 2;\n    long\
    \ c = 3;\n    long d = 4;\n    long temp;\n    long sum = 0;\n    long tri_sum\
    \ = 0;\n    long tri_sum2 = 0;\n    long tri_sum3 = 0;\n    long tri_sum4 = 0;\n\
    \    long tri_sum5 = 0;\n    long tri_sum6 = 0;\n    long tri_sum7 = 0;\n    long\
    \ tri_sum8 = 0;\n    long tri_sum9 = 0;\n    long tri_sum10 = 0;\n    long tri_sum11\
    \ = 0;\n    long tri_sum12 = 0;\n    long tri_sum13 = 0;\n    long tri_sum14 =\
    \ 0;\n    long tri_sum15 = 0;\n    long tri_sum16 = 0;\n    long tri_sum17 = 0;\n\
    \    long tri_sum18 = 0;\n    long tri_sum19 = 0;\n    long tri_sum20 = 0;\n \
    \   long tri_sum21 = 0;\n    long tri_sum22 = 0;\n    long tri_sum23 = 0;\n  \
    \  long tri_sum24 = 0;\n    long tri_sum25 = 0;\n    long tri_sum26 = 0;\n   \
    \ long tri_sum27 = 0;\n    long tri_sum28 = 0;\n    long tri_sum29 = 0;\n    long\
    \ tri_sum30 = 0;\n    long tri_sum31 = 0;\n    long tri_sum32 = 0;\n    long tri_sum33\
    \ = 0;\n    long tri_sum34 = 0;\n    long tri_sum35 = 0;\n    long tri_sum36 =\
    \ 0;\n    long tri_sum37 = 0;\n    long tri_sum38 = 0;\n    long tri_sum39 = 0;\n\
    \    long tri_sum40 = 0;\n    long tri_sum41 = 0;\n    long tri_sum42 = 0;\n \
    \   long tri_sum43 = 0;\n    long tri_sum44 = 0;\n    long tri_sum45 = 0;\n  \
    \  long tri_sum46 = 0;\n    long tri_sum47 = 0;\n    long tri_sum48 = 0;\n   \
    \ long tri_sum49 = 0;\n    long tri_sum50 = 0;\n    long tri_sum51 = 0;\n    long\
    \ tri_sum52 = 0;\n    long tri_sum53 = 0;\n    long tri_sum54 = 0;\n    long tri_sum55\
    \ = 0;\n    long tri_sum56 = 0;\n    long tri_sum57 = 0;\n    long tri_sum58 =\
    \ 0;\n    long tri_sum59 = 0;\n    long tri_sum60 = 0;\n    \n}\nint main() {\n\
    \    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  status: Exception
  stderr: 'tmp6ri5_3hs: /tmp/tmp6ri5_3hs.cpp:90: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102345
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    if (n == 0) return result;\n    if\
    \ (n == 1) return { 3 };\n    if (n % 2 == 0) return { tri(n / 2) + tri(n - 1)\
    \ + tri(n / 2) };\n    return { tri(n / 2) + tri(n - 1) + tri(n / 2) + tri(n /\
    \ 2) };\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprdgfb312.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmprdgfb312.cpp:22:41: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018std::vector<long\
    \ int>\u2019)\n   22 |     if (n % 2 == 0) return { tri(n / 2) + tri(n - 1) +\
    \ tri(n / 2) };\n      |                              ~~~~~~~~~~ ^ ~~~~~~~~~~\n\
    \      |                                 |            |\n      |             \
    \                    |            vector<[...]>\n      |                     \
    \            vector<[...]>\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmprdgfb312.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:423:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmprdgfb312.cpp:22:52:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   22 |     if (n % 2 == 0) return { tri(n / 2) + tri(n - 1) + tri(n / 2) };\n\
    \      |                                                    ^\nIn file included\
    \ from /usr/include/c++/9/bits/stl_algobase.h:67,\n                 from /usr/include/c++/9/bits/specfun.h:45,\n\
    \                 from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmprdgfb312.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:1216:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::move_iterator<_IteratorL>\
    \ std::operator+(typename std::move_iterator<_IteratorL"
  stdout: ''
  timestamp: 1660102344
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    long a = 1;\n    long b = 1;\n    long\
    \ c = 1;\n    long d = 1;\n    long temp;\n    long temp2;\n    long temp3;\n\
    \    long temp4;\n    long temp5;\n    long temp6;\n    long temp7;\n    long\
    \ temp8;\n    long temp9;\n    long temp10;\n    long temp11;\n    long temp12;\n\
    \    long temp13;\n    long temp14;\n    long temp15;\n    long temp16;\n    long\
    \ temp17;\n    long temp18;\n    long temp19;\n    long temp20;\n    long temp21;\n\
    \    long temp22;\n    long temp23;\n    long temp24;\n    long temp25;\n    long\
    \ temp26;\n    long temp27;\n    long temp28;\n    long temp29;\n    long temp30;\n\
    \    long temp31;\n    long temp32;\n    long temp33;\n    long temp34;\n    long\
    \ temp35;\n    long temp36;\n    long temp37;\n    long temp38;\n    long temp39;\n\
    \    long temp40;\n    long temp41;\n    long temp42;\n    long temp43;\n    long\
    \ temp44;\n    long temp45;\n    long temp46;\n    long temp47;\n    long temp48;\n\
    \    long temp49;\n    long temp50;\n    long temp51;\n    long temp52;\n    long\
    \ temp53;\n    long temp54;\n    long temp55;\n    long temp56;\n    long temp57;\n\
    \    long temp58;\n    long temp59;\n    long temp60;\n    long temp61;\n    long\
    \ temp62;\n    long temp63;\n    long temp64;\n    long temp65;\n    long temp66;\n\
    \    long temp67;\n    long temp68;\n    long temp69;\n    long temp70;\n    long\
    \ temp71;\n    long temp72;\n    long temp73;\n    long temp74;\n    long temp75;\n\
    \    long temp76;\n    long temp77;\n    long temp78;\n    long temp79;\n    long\
    \ temp80;\n    long temp81;\n    long temp82;\n    long temp83;\n    long temp84;\n\
    \    long \n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp__qwew3h.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmp__qwew3h.cpp:109:1: error: expected unqualified-id before\
    \ \u2018}\u2019 token\n  109 | }\n      | ^\n/tmp/tmp__qwew3h.cpp:109:1: warning:\
    \ no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660102344
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    long a = 0, b = 1, c = 1;\n    long\
    \ sum = 0;\n    long temp;\n    \n    for(int i = 1; i <= n; i++) {\n        temp\
    \ = a + b + c;\n        a = b;\n        b = c;\n        c = temp;\n        result.push_back(temp);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  status: Exception
  stderr: 'tmp0nxt8ym0: /tmp/tmp0nxt8ym0.cpp:35: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102345
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res;\n    if (n == 0)\n        return res;\n   \
    \ if (n == 1)\n        return std::vector<long>(1, 3);\n    if (n == 2)\n    \
    \    return std::vector<long>(1, 3, 2);\n    long a = tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1);\n    res.push_back(a);\n    return res;\n}\nint main() {\n   \
    \ auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1, 3,\
    \ 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl1b67fy4.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmpl1b67fy4.cpp:25:41: error: no matching function for call\
    \ to \u2018std::vector<long int>::vector(int, int, int)\u2019\n   25 |       \
    \  return std::vector<long>(1, 3, 2);\n      |                               \
    \          ^\nIn file included from /usr/include/c++/9/vector:67,\n          \
    \       from /usr/include/c++/9/functional:62,\n                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n\
    \                 from /usr/include/c++/9/algorithm:71,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n                 from\
    \ /tmp/tmpl1b67fy4.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:650:2: note: candidate:\
    \ \u2018template<class _InputIterator, class> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\u2019\n  650 |  vector(_InputIterator\
    \ __first, _InputIterator __last,\n      |  ^~~~~~\n/usr/include/c++/9/bits/stl_vector.h:650:2:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/9/bits/stl_algobase.h:65,\n                 from /usr/include/c++/9/bits/specfun.h:45,\n\
    \                 from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpl1b67fy4.cpp:2:\n/usr/include/c++/9/bits/stl_iterator_base_types.h:\
    \ In substitution of \u2018template<class _InIter> using _RequireInputIter = typename\
    \ std::enable_if<std::is_convertible<typename std::iterator_traits<_Iterator>::iterator_category,\
    \ std::input_iterator_tag>::value>::type [with _InIter = int]\u2019:\n/usr/include/c++/9/bits/stl_vector.h:649:9:\
    \   required from here\n/usr/include/c++/9/bits/stl_iterator_base_types.h:232:11:\
    \ error: no type named \u2018iterator_category\u2019 in \u2018struct std::iterator_traits<int>\u2019\
    \n  232 |     using _RequireInputIter = typename\n      |           ^~~~~~~~~~~~~~~~~\n\
    In file included from /usr/include/c++/9/vector:67,\n                 from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/i"
  stdout: ''
  timestamp: 1660102345
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    long tri_sum = 1;\n    long tri_sum_prev\
    \ = 1;\n    long tri_sum_next = 1;\n    long tri_sum_next_prev = 1;\n    long\
    \ tri_sum_next_next_prev = 1;\n    long tri_sum_next_next_next_prev = 1;\n   \
    \ long tri_sum_next_next_next_next_prev = 1;\n    long tri_sum_next_next_next_next_next_prev\
    \ = 1;\n    long tri_sum_next_next_next_next_next_next_prev = 1;\n    long tri_sum_next_next_next_next_next_next_next_prev\
    \ = 1;\n    long tri_sum_next_next_next_next_next_next_next_next_prev = 1;\n \
    \   long tri_sum_next_next_next_next_next_next_next_next_next_prev = 1;\n    long\
    \ tri_sum_next_next_next_next_next_next_next_next_next_next_prev = 1;\n    long\
    \ tri_sum_next_next_next_next_next_next_next_next_next_next_next_prev = 1;\n \
    \   long tri_sum_next_next_next_next_next_next_next_next_next_next_next_next_prev\
    \ = 1;\n    long tri_sum_next_next_next_next_next_next_next_next_next_next_next_next_next_prev\
    \ = 1;\n    long tri_sum_next_next_next_next_next_next_next_next_next_next_next_next_next_next_prev\
    \ = 1;\n    long tri_sum_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_prev\
    \ = 1;\n    long tri_sum_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_prev\
    \ = 1;\n    long tri_sum_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_prev\
    \ = 1;\n    long tri_sum_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_prev\
    \ = 1;\n    long tri_sum_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_prev\
    \ = 1;\n    long tri_sum_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_prev\
    \ = 1;\n    long tri_sum_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_prev\
    \ = 1;\n    long tri_sum_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_prev\
    \ = 1;\n    long tri_sum_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_prev\
    \ = 1;\n    long tri_sum_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_prev\
    \ = 1;\n    long tri_\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpd_b87tb7.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmpd_b87tb7.cpp:39:10: error: redeclaration of \u2018long\
    \ int tri_sum_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_prev\u2019\
    \n   39 |     long tri_sum_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_prev\
    \ = 1;\n      |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpd_b87tb7.cpp:38:10: note: \u2018long int tri_sum_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_prev\u2019\
    \ previously declared here\n   38 |     long tri_sum_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_prev\
    \ = 1;\n      |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpd_b87tb7.cpp:42:10: error: redeclaration of \u2018long int tri_sum_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_prev\u2019\
    \n   42 |     long tri_sum_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_prev\
    \ = 1;\n      |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpd_b87tb7.cpp:41:10: note: \u2018long int tri_sum_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_prev\u2019\
    \ previously declared here\n   41 |     long tri_sum_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_prev\
    \ = 1;\n      |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpd_b87tb7.cpp:48:1: error: expected initializer before \u2018}\u2019 token\n\
    \   48 | }\n      | ^\n/tmp/tmpd_b87tb7.cpp:48:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660102345
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    long a = 0, b = 1, c = 1;\n    long\
    \ temp;\n    long sum = 0;\n    long count = 0;\n    long limit = (long) sqrt(n);\n\
    \    long mid;\n    long sum1 = 0;\n    long sum2 = 0;\n    long sum3 = 0;\n \
    \   long sum4 = 0;\n    long sum5 = 0;\n    long sum6 = 0;\n    long sum7 = 0;\n\
    \    long sum8 = 0;\n    long sum9 = 0;\n    long sum10 = 0;\n    long sum11 =\
    \ 0;\n    long sum12 = 0;\n    long sum13 = 0;\n    long sum14 = 0;\n    long\
    \ sum15 = 0;\n    long sum16 = 0;\n    long sum17 = 0;\n    long sum18 = 0;\n\
    \    long sum19 = 0;\n    long sum20 = 0;\n    long sum21 = 0;\n    long sum22\
    \ = 0;\n    long sum23 = 0;\n    long sum24 = 0;\n    long sum25 = 0;\n    long\
    \ sum26 = 0;\n    long sum27 = 0;\n    long sum28 = 0;\n    long sum29 = 0;\n\
    \    long sum30 = 0;\n    long sum31 = 0;\n    long sum32 = 0;\n    long sum33\
    \ = 0;\n    long sum34 = 0;\n    long sum35 = 0;\n    long sum36 = 0;\n    long\
    \ sum37 = 0;\n    long sum38 = 0;\n    long sum39 = 0;\n    long sum40 = 0;\n\
    \    long sum41 = 0;\n    long sum42 = 0;\n    long sum43 = 0;\n    long sum44\
    \ = 0;\n    long sum45 = 0;\n    long sum46 = 0;\n    long sum47 = 0;\n    long\
    \ sum48 = 0;\n    long sum49 = 0;\n    long sum50 = 0;\n    long sum51 = 0;\n\
    \    long sum52 = 0;\n    long sum53 = 0;\n    long sum54 = 0;\n    long sum55\
    \ = 0;\n    long sum56 = 0;\n    long sum57 = 0;\n    long sum58 = 0;\n    long\
    \ sum59 = 0;\n    long sum60 = 0;\n    long sum61 = 0;\n    long sum62 = 0;\n\
    \    long sum63 = 0;\n    long sum64 = 0;\n    long sum65 = 0;\n    long sum66\
    \ = 0;\n    long sum67 = 0;\n    long sum68 = 0;\n    long sum69 = 0;\n    long\
    \ sum70 = 0;\n    long sum71 = 0;\n    long sum72 = 0;\n    long sum73 = 0;\n\
    \    long sum74 = 0;\n    long sum75 = 0;\n    long sum76 = 0;\n    long sum77\
    \ = 0;\n    long sum78 = 0;\n    long sum79 = 0;\n\n}\nint main() {\n    auto\
    \ candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1, 3, 2,\
    \ 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  status: Exception
  stderr: 'tmp5lpvl6n2: /tmp/tmp5lpvl6n2.cpp:109: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102345
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    if (n == 1)\n    {\n        result.push_back(1);\n\
    \        return result;\n    }\n    if (n == 2)\n    {\n        result.push_back(3);\n\
    \        return result;\n    }\n    if (n % 2 == 0)\n    {\n        result.push_back(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1));\n    }\n    else\n    {\n        result.push_back(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4));\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpx1dt3gk8.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmpx1dt3gk8.cpp:32:37: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018std::vector<long\
    \ int>\u2019)\n   32 |         result.push_back(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1));\n      |                          ~~~~~~~~~~ ^ ~~~~~~~~~~\n      |  \
    \                           |            |\n      |                          \
    \   |            vector<[...]>\n      |                             vector<[...]>\n\
    In file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n           \
    \      from /usr/include/c++/9/bits/specfun.h:45,\n                 from /usr/include/c++/9/cmath:1927,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpx1dt3gk8.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:423:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpx1dt3gk8.cpp:32:48:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   32 |         result.push_back(tri(n - 1) + tri(n - 2) + tri(n + 1));\n  \
    \    |                                                ^\nIn file included from\
    \ /usr/include/c++/9/bits/stl_algobase.h:67,\n                 from /usr/include/c++/9/bits/specfun.h:45,\n\
    \                 from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpx1dt3gk8.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:1216:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::move_iterator<_IteratorL>\
    \ std::operator+(typename std::move_iterator<_IteratorL>::difference_type, const\
    \ std:"
  stdout: ''
  timestamp: 1660102345
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    if (n == 0) result.push_back(1);\n\
    \    if (n == 1) result.push_back(3);\n    if (n == 2) result.push_back(3);\n\
    \    if (n % 2 == 0) result.push_back(tri(n - 1) + tri(n - 2) + tri(n + 1));\n\
    \    else result.push_back(tri(n - 1) + tri(n - 2));\n    return result;\n}\n\
    int main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp63fwyevh.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmp63fwyevh.cpp:23:49: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018std::vector<long\
    \ int>\u2019)\n   23 |     if (n % 2 == 0) result.push_back(tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1));\n      |                                      ~~~~~~~~~~\
    \ ^ ~~~~~~~~~~\n      |                                         |            |\n\
    \      |                                         |            vector<[...]>\n\
    \      |                                         vector<[...]>\nIn file included\
    \ from /usr/include/c++/9/bits/stl_algobase.h:67,\n                 from /usr/include/c++/9/bits/specfun.h:45,\n\
    \                 from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmp63fwyevh.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:423:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmp63fwyevh.cpp:23:60:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   23 |     if (n % 2 == 0) result.push_back(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1));\n      |                                                            ^\n\
    In file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n           \
    \      from /usr/include/c++/9/bits/specfun.h:45,\n                 from /usr/include/c++/9/cmath:1927,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmp63fwyevh.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:1216:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::move_iterator<_IteratorL>"
  stdout: ''
  timestamp: 1660102344
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res;\n    long a = 1;\n    long b = 2;\n    long\
    \ c = 3;\n    long d = a + b + c;\n    if (n % 2 == 0) {\n        res.push_back(a);\n\
    \        res.push_back(b);\n        res.push_back(c);\n    } else {\n        res.push_back(a);\n\
    \        res.push_back(b);\n        res.push_back(d);\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  status: Exception
  stderr: 'tmpv5dzxw42: /tmp/tmpv5dzxw42.cpp:37: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102345
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res;\n    long a = 1;\n    long b = 2;\n    long\
    \ c = a + b;\n    long d = c;\n    long e = d;\n    long f = e;\n    long g =\
    \ f;\n    long h = g;\n    long i = h;\n    long j = i;\n    long k = j;\n   \
    \ long l = k;\n    long m = l;\n    long n = m;\n    long o = n;\n    long p =\
    \ o;\n    long q = p;\n    long r = q;\n    long s = r;\n    long t = s;\n   \
    \ long u = t;\n    long v = u;\n    long w = v;\n    long x = w;\n    long y =\
    \ x;\n    long z = y;\n    long a = z;\n    long b = a + b;\n    long c = c +\
    \ d;\n    long d = c + e;\n    long e = d + f;\n    long f = e + g;\n    long\
    \ g = f + h;\n    long h = g + i;\n    long i = h + j;\n    long j = i + k;\n\
    \    long k = j + l;\n    long l = k + m;\n    long m = l + n;\n    long n = m\
    \ + o;\n    long o = n + p;\n    long p = o + q;\n    long q = p + r;\n    long\
    \ r = q + s;\n    long s = r + t;\n    long t = s + u;\n    long u = t + v;\n\
    \    long v = u + w;\n    long w = v + x;\n    long x = w + y;\n    long y = x\
    \ + z;\n    long z = y + a;\n    long a = z + b;\n    res.push_back(a);\n    res.push_back(b);\n\
    \    res.push_back(c);\n    res.push_back(d);\n    res.push_back(e);\n    res.push_back(f);\n\
    \    res.push_back(g);\n    res.push_back(h);\n    res.push_back(i);\n    res.push_back(j);\n\
    \    res.push_back(k);\n    res.push_back(l);\n    res.push_back(m);\n    res.push_back(n);\n\
    \    res.push_back(o);\n    res.push_back(p);\n    res.push_back(q);\n    res.push_back(r);\n\
    \    res.push_back(s);\n    res.push_back(t);\n    res.push_back(u);\n    res.push_back(v);\n\
    \    res.push_back(w);\n    res.push_back(x);\n    res.push_back(y);\n    res.push_back(z);\n\
    \    return res;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpo7t8nrc_.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmpo7t8nrc_.cpp:33:10: error: declaration of \u2018long int\
    \ n\u2019 shadows a parameter\n   33 |     long n = m;\n      |          ^\n/tmp/tmpo7t8nrc_.cpp:46:10:\
    \ error: redeclaration of \u2018long int a\u2019\n   46 |     long a = z;\n  \
    \    |          ^\n/tmp/tmpo7t8nrc_.cpp:20:10: note: \u2018long int a\u2019 previously\
    \ declared here\n   20 |     long a = 1;\n      |          ^\n/tmp/tmpo7t8nrc_.cpp:47:10:\
    \ error: redeclaration of \u2018long int b\u2019\n   47 |     long b = a + b;\n\
    \      |          ^\n/tmp/tmpo7t8nrc_.cpp:21:10: note: \u2018long int b\u2019\
    \ previously declared here\n   21 |     long b = 2;\n      |          ^\n/tmp/tmpo7t8nrc_.cpp:48:10:\
    \ error: redeclaration of \u2018long int c\u2019\n   48 |     long c = c + d;\n\
    \      |          ^\n/tmp/tmpo7t8nrc_.cpp:22:10: note: \u2018long int c\u2019\
    \ previously declared here\n   22 |     long c = a + b;\n      |          ^\n\
    /tmp/tmpo7t8nrc_.cpp:49:10: error: redeclaration of \u2018long int d\u2019\n \
    \  49 |     long d = c + e;\n      |          ^\n/tmp/tmpo7t8nrc_.cpp:23:10: note:\
    \ \u2018long int d\u2019 previously declared here\n   23 |     long d = c;\n \
    \     |          ^\n/tmp/tmpo7t8nrc_.cpp:50:10: error: redeclaration of \u2018\
    long int e\u2019\n   50 |     long e = d + f;\n      |          ^\n/tmp/tmpo7t8nrc_.cpp:24:10:\
    \ note: \u2018long int e\u2019 previously declared here\n   24 |     long e =\
    \ d;\n      |          ^\n/tmp/tmpo7t8nrc_.cpp:51:10: error: redeclaration of\
    \ \u2018long int f\u2019\n   51 |     long f = e + g;\n      |          ^\n/tmp/tmpo7t8nrc_.cpp:25:10:\
    \ note: \u2018long int f\u2019 previously declared here\n   25 |     long f =\
    \ e;\n      |          ^\n/tmp/tmpo7t8nrc_.cpp:52:10: error: redeclaration of\
    \ \u2018long int g\u2019\n   52 |     long g = f + h;\n      |          ^\n/tmp/tmpo7t8nrc_.cpp:26:10:\
    \ note: \u2018long int g\u2019 previously declared here\n   26 |     long g =\
    \ f;\n      |          ^\n/tmp/tmpo7t8nrc_.cpp:53:10: error: redeclaration of\
    \ \u2018long int h\u2019\n   53 |     long h = g + i;\n      |          ^\n/tmp/tmpo7t8nrc_.cpp:27:10:\
    \ note: \u2018long int h\u2019 previously declared here\n   2"
  stdout: ''
  timestamp: 1660102345
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res;\n    if(n<=1)\n    {\n        res.push_back(n);\n\
    \        return res;\n    }\n    long tri_1 = tri(n-1);\n    long tri_2 = tri(n-2);\n\
    \    long tri_3 = tri(n+1);\n    res.push_back(tri_1);\n    res.push_back(tri_2);\n\
    \    res.push_back(tri_3);\n    return res;\n}\nint main() {\n    auto candidate\
    \ = tri;\n    assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n \
    \   assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n    assert(candidate((6)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n    assert(candidate((7)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80,\
    \ 9, 99, 10, 120, 11})));\n    assert(candidate((0)) == (std::vector<long>({1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({1, 3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzqgny1xu.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmpzqgny1xu.cpp:25:21: error: cannot convert \u2018std::vector<long\
    \ int>\u2019 to \u2018long int\u2019 in initialization\n   25 |     long tri_1\
    \ = tri(n-1);\n      |                  ~~~^~~~~\n      |                    \
    \ |\n      |                     std::vector<long int>\n/tmp/tmpzqgny1xu.cpp:26:21:\
    \ error: cannot convert \u2018std::vector<long int>\u2019 to \u2018long int\u2019\
    \ in initialization\n   26 |     long tri_2 = tri(n-2);\n      |             \
    \     ~~~^~~~~\n      |                     |\n      |                     std::vector<long\
    \ int>\n/tmp/tmpzqgny1xu.cpp:27:21: error: cannot convert \u2018std::vector<long\
    \ int>\u2019 to \u2018long int\u2019 in initialization\n   27 |     long tri_3\
    \ = tri(n+1);\n      |                  ~~~^~~~~\n      |                    \
    \ |\n      |                     std::vector<long int>\n"
  stdout: ''
  timestamp: 1660102345
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    if (n == 0) return result;\n    if\
    \ (n == 1) return result;\n    if (n == 2) return { 1, 2, 3 };\n    if (n % 2\
    \ == 0) return tri(n - 1) + tri(n - 2) + tri(n + 1);\n    return tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4);\n}\nint main() {\n    auto\
    \ candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1, 3, 2,\
    \ 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9r89uezk.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmp9r89uezk.cpp:23:39: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018std::vector<long\
    \ int>\u2019)\n   23 |     if (n % 2 == 0) return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1);\n      |                            ~~~~~~~~~~ ^ ~~~~~~~~~~\n      | \
    \                              |            |\n      |                       \
    \        |            vector<[...]>\n      |                               vector<[...]>\n\
    In file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n           \
    \      from /usr/include/c++/9/bits/specfun.h:45,\n                 from /usr/include/c++/9/cmath:1927,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmp9r89uezk.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:423:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmp9r89uezk.cpp:23:50:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   23 |     if (n % 2 == 0) return tri(n - 1) + tri(n - 2) + tri(n + 1);\n \
    \     |                                                  ^\nIn file included from\
    \ /usr/include/c++/9/bits/stl_algobase.h:67,\n                 from /usr/include/c++/9/bits/specfun.h:45,\n\
    \                 from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmp9r89uezk.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:1216:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::move_iterator<_IteratorL>\
    \ std::operator+(typename std::move_iterator<_IteratorL>::difference_type"
  stdout: ''
  timestamp: 1660102345
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    long a = 3;\n    long b = 1;\n    long\
    \ c = 2;\n    long d = 1;\n    long temp;\n    long sum = 0;\n    long count =\
    \ 1;\n    long temp2;\n    long temp3;\n    long temp4;\n    long temp5;\n   \
    \ long temp6;\n    long temp7;\n    long temp8;\n    long temp9;\n    long temp10;\n\
    \    long temp11;\n    long temp12;\n    long temp13;\n    long temp14;\n    long\
    \ temp15;\n    long temp16;\n    long temp17;\n    long temp18;\n    long temp19;\n\
    \    long temp20;\n    long temp21;\n    long temp22;\n    long temp23;\n    long\
    \ temp24;\n    long temp25;\n    long temp26;\n    long temp27;\n    long temp28;\n\
    \    long temp29;\n    long temp30;\n    long temp31;\n    long temp32;\n    long\
    \ temp33;\n    long temp34;\n    long temp35;\n    long temp36;\n    long temp37;\n\
    \    long temp38;\n    long temp39;\n    long temp40;\n    long temp41;\n    long\
    \ temp42;\n    long temp43;\n    long temp44;\n    long temp45;\n    long temp46;\n\
    \    long temp47;\n    long temp48;\n    long temp49;\n    long temp50;\n    long\
    \ temp51;\n    long temp52;\n    long temp53;\n    long temp54;\n    long temp55;\n\
    \    long temp56;\n    long temp57;\n    long temp58;\n    long temp59;\n    long\
    \ temp60;\n    long temp61;\n    long temp62;\n    long temp63;\n    long temp64;\n\
    \    long temp65;\n    long temp66;\n    long temp67;\n    long temp68;\n    long\
    \ temp69;\n    long temp70;\n    long temp71;\n    long temp72;\n    long temp73;\n\
    \    long temp74;\n    long temp75;\n    long temp76;\n    long temp77;\n    long\
    \ temp78;\n    long temp79;\n    long temp80;\n    long temp81;\n    long temp82;\n\
    \    long temp83\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9b4prpyo.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmp9b4prpyo.cpp:109:1: error: expected initializer before\
    \ \u2018}\u2019 token\n  109 | }\n      | ^\n/tmp/tmp9b4prpyo.cpp:109:1: warning:\
    \ no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660102345
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res;\n    if(n == 0) res.push_back(0);\n    if(n\
    \ == 1) res.push_back(1);\n    if(n == 2) res.push_back(3);\n    if(n == 3) res.push_back(8);\n\
    \    if(n == 4) res.push_back(13);\n    if(n == 5) res.push_back(21);\n    if(n\
    \ == 6) res.push_back(34);\n    if(n == 7) res.push_back(55);\n    if(n == 8)\
    \ res.push_back(89);\n    if(n == 9) res.push_back(144);\n    if(n == 10) res.push_back(233);\n\
    \    if(n == 11) res.push_back(377);\n    if(n == 12) res.push_back(610);\n  \
    \  if(n == 13) res.push_back(987);\n    if(n == 14) res.push_back(1597);\n   \
    \ if(n == 15) res.push_back(2584);\n    if(n == 16) res.push_back(4181);\n   \
    \ if(n == 17) res.push_back(6765);\n    if(n == 18) res.push_back(10946);\n  \
    \  if(n == 19) res.push_back(17711);\n    if(n == 20) res.push_back(28657);\n\
    \    if(n == 21) res.push_back(46368);\n    if(n == 22) res.push_back(75025);\n\
    \    if(n == 23) res.push_back(121393);\n    if(n == 24) res.push_back(196418);\n\
    \    if(n == 25) res.push_back(317811);\n    if(n == 26) res.push_back(514229);\n\
    \    if(n == 27) res.push_back(832041);\n    if(n == 28) res.push_back(1346269);\n\
    \    if(n == 29) res.push_back(2178309);\n    if(n == 30) res.(394651);\n    if(n\
    \ == 31) res.(633825);\n    if(n == 32) res.(1084823);\n    if(n == 33) res.(1611258);\n\
    \    if(n == 34) res.(2577483);\n    if(n == 35) res.(4183459);\n    if(n == 36)\
    \ res.(6778859);\n    if(n == 37) res.(10940069);\n    if(n == 38) res.(17711129);\n\
    \    if(n == 39) res.(28657228);\n    if(n == 40) res.(46368457);\n    if(n ==\
    \ 41) res.(75025324);\n    if(n == 42) res.(121392103);\n    if(n == 43) res.(196418519);\n\
    \    if(n == 44) res.(317811773);\n    if(n == 45) res.(514229191);\n    if(n\
    \ == 46) res.(832041277);\n    if(n\n}\nint main() {\n    auto candidate = tri;\n\
    \    assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpw8l8yi2v.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmpw8l8yi2v.cpp:50:21: error: expected unqualified-id before\
    \ \u2018(\u2019 token\n   50 |     if(n == 30) res.(394651);\n      |        \
    \             ^\n/tmp/tmpw8l8yi2v.cpp:51:21: error: expected unqualified-id before\
    \ \u2018(\u2019 token\n   51 |     if(n == 31) res.(633825);\n      |        \
    \             ^\n/tmp/tmpw8l8yi2v.cpp:52:21: error: expected unqualified-id before\
    \ \u2018(\u2019 token\n   52 |     if(n == 32) res.(1084823);\n      |       \
    \              ^\n/tmp/tmpw8l8yi2v.cpp:53:21: error: expected unqualified-id before\
    \ \u2018(\u2019 token\n   53 |     if(n == 33) res.(1611258);\n      |       \
    \              ^\n/tmp/tmpw8l8yi2v.cpp:54:21: error: expected unqualified-id before\
    \ \u2018(\u2019 token\n   54 |     if(n == 34) res.(2577483);\n      |       \
    \              ^\n/tmp/tmpw8l8yi2v.cpp:55:21: error: expected unqualified-id before\
    \ \u2018(\u2019 token\n   55 |     if(n == 35) res.(4183459);\n      |       \
    \              ^\n/tmp/tmpw8l8yi2v.cpp:56:21: error: expected unqualified-id before\
    \ \u2018(\u2019 token\n   56 |     if(n == 36) res.(6778859);\n      |       \
    \              ^\n/tmp/tmpw8l8yi2v.cpp:57:21: error: expected unqualified-id before\
    \ \u2018(\u2019 token\n   57 |     if(n == 37) res.(10940069);\n      |      \
    \               ^\n/tmp/tmpw8l8yi2v.cpp:58:21: error: expected unqualified-id\
    \ before \u2018(\u2019 token\n   58 |     if(n == 38) res.(17711129);\n      |\
    \                     ^\n/tmp/tmpw8l8yi2v.cpp:59:21: error: expected unqualified-id\
    \ before \u2018(\u2019 token\n   59 |     if(n == 39) res.(28657228);\n      |\
    \                     ^\n/tmp/tmpw8l8yi2v.cpp:60:21: error: expected unqualified-id\
    \ before \u2018(\u2019 token\n   60 |     if(n == 40) res.(46368457);\n      |\
    \                     ^\n/tmp/tmpw8l8yi2v.cpp:61:21: error: expected unqualified-id\
    \ before \u2018(\u2019 token\n   61 |     if(n == 41) res.(75025324);\n      |\
    \                     ^\n/tmp/tmpw8l8yi2v.cpp:62:21: error: expected unqualified-id\
    \ before \u2018(\u2019 token\n   62 |     if(n == 42) res.(121392103);\n     \
    \ |                     ^\n/tmp/tmpw8l8yi2v.cpp:63:21: e"
  stdout: ''
  timestamp: 1660102345
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res;\n    long a = 0;\n    long b = 1;\n    long\
    \ c = 1;\n    long d = 1;\n    long temp;\n    long temp1;\n    long temp2;\n\
    \    long temp3;\n    long temp4;\n    long temp5;\n    long temp6;\n    long\
    \ temp7;\n    long temp8;\n    long temp9;\n    long temp10;\n    long temp11;\n\
    \    long temp12;\n    long temp13;\n    long temp14;\n    long temp15;\n    long\
    \ temp16;\n    long temp17;\n    long temp18;\n    long temp19;\n    long temp20;\n\
    \    long temp21;\n    long temp22;\n    long temp23;\n    long temp24;\n    long\
    \ temp25;\n    long temp26;\n    long temp27;\n    long temp28;\n    long temp29;\n\
    \    long temp30;\n    long temp31;\n    long temp32;\n    long temp33;\n    long\
    \ temp34;\n    long temp35;\n    long temp36;\n    long temp37;\n    long temp38;\n\
    \    long temp39;\n    long temp40;\n    long temp41;\n    long temp42;\n    long\
    \ temp43;\n    long temp44;\n    long temp45;\n    long temp46;\n    long temp47;\n\
    \    long temp48;\n    long temp49;\n    long temp50;\n    long temp51;\n    long\
    \ temp52;\n    long temp53;\n    long temp54;\n    long temp55;\n    long temp56;\n\
    \    long temp57;\n    long temp58;\n    long temp59;\n    long temp60;\n    long\
    \ temp61;\n    long temp62;\n    long temp63;\n    long temp64;\n    long temp65;\n\
    \    long temp66;\n    long temp67;\n    long temp68;\n    long temp69;\n    long\
    \ temp70;\n    long temp71;\n    long temp72;\n    long temp73;\n    long temp74;\n\
    \    long temp75;\n    long temp76;\n    long temp77;\n    long temp78;\n    long\
    \ temp79;\n    long temp80;\n    long temp81;\n    long temp82;\n    long temp83;\n\
    \    long temp\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp762cpy6e.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmp762cpy6e.cpp:109:1: error: expected initializer before\
    \ \u2018}\u2019 token\n  109 | }\n      | ^\n/tmp/tmp762cpy6e.cpp:109:1: warning:\
    \ no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660102345
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res;\n    if (n == 1)\n        res.push_back(1);\n\
    \    else if (n % 2 == 0)\n        res.push_back(tri(n - 1) + tri(n - 2));\n \
    \   else\n        res.push_back(tri(n - 1) + tri(n - 2) + tri(n + 1));\n    return\
    \ res;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpetpvpqx_.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmpetpvpqx_.cpp:23:34: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018std::vector<long\
    \ int>\u2019)\n   23 |         res.push_back(tri(n - 1) + tri(n - 2));\n     \
    \ |                       ~~~~~~~~~~ ^ ~~~~~~~~~~\n      |                   \
    \       |            |\n      |                          |            vector<[...]>\n\
    \      |                          vector<[...]>\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpetpvpqx_.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:423:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpetpvpqx_.cpp:23:45:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   23 |         res.push_back(tri(n - 1) + tri(n - 2));\n      |           \
    \                                  ^\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpetpvpqx_.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:1216:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::move_iterator<_IteratorL>\
    \ std::operator+(typename std::move_iterator<_IteratorL>::difference_type, const\
    \ std::move_iterator<_IteratorL>&)\u2019\n 1216 |     ope"
  stdout: ''
  timestamp: 1660102339
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res;\n    long a = 1;\n    long b = 1;\n    long\
    \ c = 1;\n    long d = 1;\n    long sum = 0;\n    long temp;\n    long i;\n  \
    \  for(i = 1; i <= n; i++) {\n        temp = a + b + c + d;\n        a = b;\n\
    \        b = c;\n        c = d;\n        d = temp;\n        sum += temp;\n   \
    \     res.push_back(sum);\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = tri;\n    assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n \
    \   assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n    assert(candidate((6)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n    assert(candidate((7)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80,\
    \ 9, 99, 10, 120, 11})));\n    assert(candidate((0)) == (std::vector<long>({1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({1, 3})));\n}\n"
  status: Exception
  stderr: 'tmpaldhnndm: /tmp/tmpaldhnndm.cpp:40: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102346
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    if (n <= 1) {\n        result.push_back(n);\n\
    \        return result;\n    }\n    long a = 1;\n    long b = 1;\n    long c =\
    \ 1;\n    long d = 1;\n    long temp;\n    long tri_sum = 0;\n    long tri_sum2\
    \ = 0;\n    long tri_sum3 = 0;\n    long tri_sum4 = 0;\n    long tri_sum5 = 0;\n\
    \    long tri_sum6 = 0;\n    long tri_sum7 = 0;\n    long tri_sum8 = 0;\n    long\
    \ tri_sum9 = 0;\n    long tri_sum10 = 0;\n    long tri_sum11 = 0;\n    long tri_sum12\
    \ = 0;\n    long tri_sum13 = 0;\n    long tri_sum14 = 0;\n    long tri_sum15 =\
    \ 0;\n    long tri_sum16 = 0;\n    long tri_sum17 = 0;\n    long tri_sum18 = 0;\n\
    \    long tri_sum19 = 0;\n    long tri_sum20 = 0;\n    long tri_sum21 = 0;\n \
    \   long tri_sum22 = 0;\n    long tri_sum23 = 0;\n    long tri_sum24 = 0;\n  \
    \  long tri_sum25 = 0;\n    long tri_sum26 = 0;\n    long tri_sum27 = 0;\n   \
    \ long tri_sum28 = 0;\n    long tri_sum29 = 0;\n    long tri_sum30 = 0;\n    long\
    \ tri_sum31 = 0;\n    long tri_sum32 = 0;\n    long tri_sum33 = 0;\n    long tri_sum34\
    \ = 0;\n    long tri_sum35 = 0;\n    long tri_sum36 = 0;\n    long tri_sum37 =\
    \ 0;\n    long tri_sum38 = 0;\n    long tri_sum39 = 0;\n    long tri_sum40 = 0;\n\
    \    long tri_sum41 = 0;\n    long tri_sum42 = 0;\n    long tri_sum43 = 0;\n \
    \   long tri_sum44 = 0;\n    long tri_sum45 = 0;\n    long tri_sum46 = 0;\n  \
    \  long tri_sum47 = 0;\n    long tri_sum48 = 0;\n    long tri_sum49 = 0;\n   \
    \ long tri_sum50 = 0;\n    long tri_sum51 = 0;\n    long tri_sum52 = 0;\n    long\
    \ tri_sum53 = 0;\n    long tri_sum54 = 0;\n    long tri_sum55 = 0;\n    long tri_sum56\
    \ = 0;\n    long tri_sum57 = 0;\n    long tri_sum58 = 0;\n    long tri_sum59 =\
    \ 0;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3)) ==\
    \ (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  status: Exception
  stderr: 'tmp362y6wz9: /tmp/tmp362y6wz9.cpp:91: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102346
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    if (n == 1)\n        result.push_back(3);\n\
    \    else if (n % 2 == 0)\n        result.push_back(tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1));\n    else\n        result.push_back(tri(n - 1) + tri(n - 2) + tri(n\
    \ - 3));\n    return result;\n}\nint main() {\n    auto candidate = tri;\n   \
    \ assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbs0hzr0p.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmpbs0hzr0p.cpp:23:37: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018std::vector<long\
    \ int>\u2019)\n   23 |         result.push_back(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1));\n      |                          ~~~~~~~~~~ ^ ~~~~~~~~~~\n      |  \
    \                           |            |\n      |                          \
    \   |            vector<[...]>\n      |                             vector<[...]>\n\
    In file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n           \
    \      from /usr/include/c++/9/bits/specfun.h:45,\n                 from /usr/include/c++/9/cmath:1927,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpbs0hzr0p.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:423:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpbs0hzr0p.cpp:23:48:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   23 |         result.push_back(tri(n - 1) + tri(n - 2) + tri(n + 1));\n  \
    \    |                                                ^\nIn file included from\
    \ /usr/include/c++/9/bits/stl_algobase.h:67,\n                 from /usr/include/c++/9/bits/specfun.h:45,\n\
    \                 from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpbs0hzr0p.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:1216:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::move_iterator<_IteratorL>\
    \ std::operator+(typename std::move_iterator<_IteratorL>::difference_type, const\
    \ std:"
  stdout: ''
  timestamp: 1660102346
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    if (n == 0)\n        return result;\n\
    \    if (n == 1)\n        result.push_back(3);\n    else if (n % 2 == 0)\n   \
    \     result.push_back(tri(n - 1) + tri(n - 2) + tri(n + 1));\n    else\n    \
    \    result.push_back(tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3));\n  \
    \  return result;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp43rh3drq.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmp43rh3drq.cpp:25:37: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018std::vector<long\
    \ int>\u2019)\n   25 |         result.push_back(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1));\n      |                          ~~~~~~~~~~ ^ ~~~~~~~~~~\n      |  \
    \                           |            |\n      |                          \
    \   |            vector<[...]>\n      |                             vector<[...]>\n\
    In file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n           \
    \      from /usr/include/c++/9/bits/specfun.h:45,\n                 from /usr/include/c++/9/cmath:1927,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmp43rh3drq.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:423:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmp43rh3drq.cpp:25:48:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   25 |         result.push_back(tri(n - 1) + tri(n - 2) + tri(n + 1));\n  \
    \    |                                                ^\nIn file included from\
    \ /usr/include/c++/9/bits/stl_algobase.h:67,\n                 from /usr/include/c++/9/bits/specfun.h:45,\n\
    \                 from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmp43rh3drq.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:1216:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::move_iterator<_IteratorL>\
    \ std::operator+(typename std::move_iterator<_IteratorL>::difference_type, const\
    \ std:"
  stdout: ''
  timestamp: 1660102346
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    if (n == 0)\n        return result;\n\
    \    if (n == 1)\n        result.push_back(3);\n    else if (n % 2 == 0)\n   \
    \     result.push_back(tri(n - 1) + tri(n - 2) + tri(n + 1));\n    else\n    \
    \    result.push_back(tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n\
    \ - 4));\n    return result;\n}\nint main() {\n    auto candidate = tri;\n   \
    \ assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5ot8zcni.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmp5ot8zcni.cpp:25:37: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018std::vector<long\
    \ int>\u2019)\n   25 |         result.push_back(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1));\n      |                          ~~~~~~~~~~ ^ ~~~~~~~~~~\n      |  \
    \                           |            |\n      |                          \
    \   |            vector<[...]>\n      |                             vector<[...]>\n\
    In file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n           \
    \      from /usr/include/c++/9/bits/specfun.h:45,\n                 from /usr/include/c++/9/cmath:1927,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmp5ot8zcni.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:423:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmp5ot8zcni.cpp:25:48:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   25 |         result.push_back(tri(n - 1) + tri(n - 2) + tri(n + 1));\n  \
    \    |                                                ^\nIn file included from\
    \ /usr/include/c++/9/bits/stl_algobase.h:67,\n                 from /usr/include/c++/9/bits/specfun.h:45,\n\
    \                 from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmp5ot8zcni.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:1216:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::move_iterator<_IteratorL>\
    \ std::operator+(typename std::move_iterator<_IteratorL>::difference_type, const\
    \ std:"
  stdout: ''
  timestamp: 1660102346
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res;\n    if (n <= 1) {\n        res.push_back(1);\n\
    \        res.push_back(1);\n        res.push_back(1);\n        res.push_back(1);\n\
    \        return res;\n    }\n    if (n % 2 == 0) {\n        res.push_back(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1));\n    } else {\n        res.push_back(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4) + tri(n + 2));\n  \
    \  }\n    return res;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3gz__y8z.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmp3gz__y8z.cpp:28:34: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018std::vector<long\
    \ int>\u2019)\n   28 |         res.push_back(tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1));\n      |                       ~~~~~~~~~~ ^ ~~~~~~~~~~\n      |       \
    \                   |            |\n      |                          |       \
    \     vector<[...]>\n      |                          vector<[...]>\nIn file included\
    \ from /usr/include/c++/9/bits/stl_algobase.h:67,\n                 from /usr/include/c++/9/bits/specfun.h:45,\n\
    \                 from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmp3gz__y8z.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:423:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmp3gz__y8z.cpp:28:45:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   28 |         res.push_back(tri(n - 1) + tri(n - 2) + tri(n + 1));\n     \
    \ |                                             ^\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmp3gz__y8z.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:1216:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::move_iterator<_IteratorL>\
    \ std::operator+(typename std::move_iterator<_IteratorL>::difference_type, const\
    \ std::move_iterator<_Itera"
  stdout: ''
  timestamp: 1660102346
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res;\n    if (n == 0) return res;\n    if (n ==\
    \ 1) return { 1 };\n    if (n % 2 == 0) {\n        long a = tri(n - 1) + tri(n\
    \ - 2);\n        res.push_back(a);\n        return res;\n    }\n    long b = tri(n\
    \ - 1) + tri(n - 2) + tri(n - 3);\n    res.push_back(b);\n    return res;\n}\n\
    int main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_xq51hu8.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmp_xq51hu8.cpp:23:29: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018std::vector<long\
    \ int>\u2019)\n   23 |         long a = tri(n - 1) + tri(n - 2);\n      |    \
    \              ~~~~~~~~~~ ^ ~~~~~~~~~~\n      |                     |        \
    \    |\n      |                     |            vector<[...]>\n      |      \
    \               vector<[...]>\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmp_xq51hu8.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:423:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmp_xq51hu8.cpp:23:40:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   23 |         long a = tri(n - 1) + tri(n - 2);\n      |                 \
    \                       ^\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmp_xq51hu8.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:1216:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::move_iterator<_IteratorL>\
    \ std::operator+(typename std::move_iterator<_IteratorL>::difference_type, const\
    \ std::move_iterator<_IteratorL>&)\u2019\n 1216 |     operator+(typename move_iterator<_Iterat"
  stdout: ''
  timestamp: 1660102346
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res;\n    if (n == 1)\n        res.push_back(1);\n\
    \    else if (n % 2 == 0)\n        res.push_back(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1));\n    else\n        res.push_back(tri(n - 1) + tri(n - 2) + tri(n + 1)\
    \ + tri(n - 3) + tri(n - 4));\n    return res;\n}\nint main() {\n    auto candidate\
    \ = tri;\n    assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n \
    \   assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n    assert(candidate((6)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n    assert(candidate((7)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80,\
    \ 9, 99, 10, 120, 11})));\n    assert(candidate((0)) == (std::vector<long>({1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({1, 3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpr8urwjy4.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmpr8urwjy4.cpp:23:34: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018std::vector<long\
    \ int>\u2019)\n   23 |         res.push_back(tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1));\n      |                       ~~~~~~~~~~ ^ ~~~~~~~~~~\n      |       \
    \                   |            |\n      |                          |       \
    \     vector<[...]>\n      |                          vector<[...]>\nIn file included\
    \ from /usr/include/c++/9/bits/stl_algobase.h:67,\n                 from /usr/include/c++/9/bits/specfun.h:45,\n\
    \                 from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpr8urwjy4.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:423:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpr8urwjy4.cpp:23:45:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   23 |         res.push_back(tri(n - 1) + tri(n - 2) + tri(n + 1));\n     \
    \ |                                             ^\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpr8urwjy4.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:1216:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::move_iterator<_IteratorL>\
    \ std::operator+(typename std::move_iterator<_IteratorL>::difference_type, const\
    \ std::move_iterator<_Itera"
  stdout: ''
  timestamp: 1660102346
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    if (n == 0) return result;\n    long\
    \ a = 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n    long temp;\n\
    \    long temp2;\n    long temp3;\n    long temp4;\n    long temp5;\n    long\
    \ temp6;\n    long temp7;\n    long temp8;\n    long temp9;\n    long temp10;\n\
    \    long temp11;\n    long temp12;\n    long temp13;\n    long temp14;\n    long\
    \ temp15;\n    long temp16;\n    long temp17;\n    long temp18;\n    long temp19;\n\
    \    long temp20;\n    long temp21;\n    long temp22;\n    long temp23;\n    long\
    \ temp24;\n    long temp25;\n    long temp26;\n    long temp27;\n    long temp28;\n\
    \    long temp29;\n    long temp30;\n    long temp31;\n    long temp32;\n    long\
    \ temp33;\n    long temp34;\n    long temp35;\n    long temp36;\n    long temp37;\n\
    \    long temp38;\n    long temp39;\n    long temp40;\n    long temp41;\n    long\
    \ temp42;\n    long temp43;\n    long temp44;\n    long temp45;\n    long temp46;\n\
    \    long temp47;\n    long temp48;\n    long temp49;\n    long temp50;\n    long\
    \ temp51;\n    long temp52;\n    long temp53;\n    long temp54;\n    long temp55;\n\
    \    long temp56;\n    long temp57;\n    long temp58;\n    long temp59;\n    long\
    \ temp60;\n    long temp61;\n    long temp62;\n    long temp63;\n    long temp64;\n\
    \    long temp65;\n    long temp66;\n    long temp67;\n    long temp68;\n    long\
    \ temp69;\n    long temp70;\n    long temp71;\n    long temp72;\n    long temp73;\n\
    \    long temp74;\n    long temp75;\n    long temp76;\n    long temp77;\n    long\
    \ temp78;\n    long temp79;\n    long temp80;\n    long temp81;\n    long temp82;\n\
    \    long temp83;\n    long \n}\nint main() {\n    auto candidate = tri;\n   \
    \ assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpskj1b11z.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmpskj1b11z.cpp:109:1: error: expected unqualified-id before\
    \ \u2018}\u2019 token\n  109 | }\n      | ^\n/tmp/tmpskj1b11z.cpp:109:1: warning:\
    \ control reaches end of non-void function [-Wreturn-type]\n  109 | }\n      |\
    \ ^\n"
  stdout: ''
  timestamp: 1660102346
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    long a = 1;\n    long b = 2;\n    long\
    \ c = 1;\n    long d = 1;\n    long temp;\n    long temp2;\n    long temp3;\n\
    \    long temp4;\n    long temp5;\n    long temp6;\n    long temp7;\n    long\
    \ temp8;\n    long temp9;\n    long temp10;\n    long temp11;\n    long temp12;\n\
    \    long temp13;\n    long temp14;\n    long temp15;\n    long temp16;\n    long\
    \ temp17;\n    long temp18;\n    long temp19;\n    long temp20;\n    long temp21;\n\
    \    long temp22;\n    long temp23;\n    long temp24;\n    long temp25;\n    long\
    \ temp26;\n    long temp27;\n    long temp28;\n    long temp29;\n    long temp30;\n\
    \    long temp31;\n    long temp32;\n    long temp33;\n    long temp34;\n    long\
    \ temp35;\n    long temp36;\n    long temp37;\n    long temp38;\n    long temp39;\n\
    \    long temp40;\n    long temp41;\n    long temp42;\n    long temp43;\n    long\
    \ temp44;\n    long temp45;\n    long temp46;\n    long temp47;\n    long temp48;\n\
    \    long temp49;\n    long temp50;\n    long temp51;\n    long temp52;\n    long\
    \ temp53;\n    long temp54;\n    long temp55;\n    long temp56;\n    long temp57;\n\
    \    long temp58;\n    long temp59;\n    long temp60;\n    long temp61;\n    long\
    \ temp62;\n    long temp63;\n    long temp64;\n    long temp65;\n    long temp66;\n\
    \    long temp67;\n    long temp68;\n    long temp69;\n    long temp70;\n    long\
    \ temp71;\n    long temp72;\n    long temp73;\n    long temp74;\n    long temp75;\n\
    \    long temp76;\n    long temp77;\n    long temp78;\n    long temp79;\n    long\
    \ temp80;\n    long temp81;\n    long temp82;\n    long temp83;\n    long temp84;\n\
    \    long \n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgunnugua.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmpgunnugua.cpp:109:1: error: expected unqualified-id before\
    \ \u2018}\u2019 token\n  109 | }\n      | ^\n/tmp/tmpgunnugua.cpp:109:1: warning:\
    \ no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660102346
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    if (n == 1)\n        result.push_back(3);\n\
    \    else if (n % 2 == 0)\n        result.push_back(tri(n - 1) + tri(n - 2) +\
    \ tri(n - 1));\n    else\n        result.push_back(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1));\n    return result;\n}\nint main() {\n    auto candidate = tri;\n   \
    \ assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzbd7w_uy.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmpzbd7w_uy.cpp:23:37: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018std::vector<long\
    \ int>\u2019)\n   23 |         result.push_back(tri(n - 1) + tri(n - 2) + tri(n\
    \ - 1));\n      |                          ~~~~~~~~~~ ^ ~~~~~~~~~~\n      |  \
    \                           |            |\n      |                          \
    \   |            vector<[...]>\n      |                             vector<[...]>\n\
    In file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n           \
    \      from /usr/include/c++/9/bits/specfun.h:45,\n                 from /usr/include/c++/9/cmath:1927,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpzbd7w_uy.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:423:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpzbd7w_uy.cpp:23:48:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   23 |         result.push_back(tri(n - 1) + tri(n - 2) + tri(n - 1));\n  \
    \    |                                                ^\nIn file included from\
    \ /usr/include/c++/9/bits/stl_algobase.h:67,\n                 from /usr/include/c++/9/bits/specfun.h:45,\n\
    \                 from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpzbd7w_uy.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:1216:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::move_iterator<_IteratorL>\
    \ std::operator+(typename std::move_iterator<_IteratorL>::difference_type, const\
    \ std:"
  stdout: ''
  timestamp: 1660102341
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res;\n    if (n == 1)\n        res.push_back(3);\n\
    \    else if (n % 2 == 0)\n        res.push_back(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1));\n    else\n        res.push_back(tri(n - 1) + tri(n - 2) + tri(n - 3)\
    \ + tri(n + 1));\n    return res;\n}\nint main() {\n    auto candidate = tri;\n\
    \    assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptxk2aolr.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmptxk2aolr.cpp:23:34: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018std::vector<long\
    \ int>\u2019)\n   23 |         res.push_back(tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1));\n      |                       ~~~~~~~~~~ ^ ~~~~~~~~~~\n      |       \
    \                   |            |\n      |                          |       \
    \     vector<[...]>\n      |                          vector<[...]>\nIn file included\
    \ from /usr/include/c++/9/bits/stl_algobase.h:67,\n                 from /usr/include/c++/9/bits/specfun.h:45,\n\
    \                 from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmptxk2aolr.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:423:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmptxk2aolr.cpp:23:45:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   23 |         res.push_back(tri(n - 1) + tri(n - 2) + tri(n + 1));\n     \
    \ |                                             ^\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmptxk2aolr.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:1216:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::move_iterator<_IteratorL>\
    \ std::operator+(typename std::move_iterator<_IteratorL>::difference_type, const\
    \ std::move_iterator<_Itera"
  stdout: ''
  timestamp: 1660102346
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    if (n == 0) {\n        result.push_back(1);\n\
    \        result.push_back(1);\n        result.push_back(1);\n        return result;\n\
    \    }\n    if (n == 1) {\n        result.push_back(3);\n        return result;\n\
    \    }\n    if (n == 2) {\n        result.push_back(3);\n        result.push_back(2);\n\
    \        return result;\n    }\n    long tri1 = tri(n - 1) + tri(n - 2) + tri(n\
    \ - 3);\n    long tri2 = tri(n - 2) + tri(n - 1) + tri(n - 3);\n    long tri3\
    \ = tri(n - 3) + tri(n - 1) + tri(n - 2);\n    result.push_back(tri1);\n    result.push_back(tri2);\n\
    \    result.push_back(tri3);\n    return result;\n}\nint main() {\n    auto candidate\
    \ = tri;\n    assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n \
    \   assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n    assert(candidate((6)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n    assert(candidate((7)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80,\
    \ 9, 99, 10, 120, 11})));\n    assert(candidate((0)) == (std::vector<long>({1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({1, 3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvlz_y_bu.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmpvlz_y_bu.cpp:35:28: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018std::vector<long\
    \ int>\u2019)\n   35 |     long tri1 = tri(n - 1) + tri(n - 2) + tri(n - 3);\n\
    \      |                 ~~~~~~~~~~ ^ ~~~~~~~~~~\n      |                    |\
    \            |\n      |                    |            vector<[...]>\n      |\
    \                    vector<[...]>\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpvlz_y_bu.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:423:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpvlz_y_bu.cpp:35:39:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   35 |     long tri1 = tri(n - 1) + tri(n - 2) + tri(n - 3);\n      |     \
    \                                  ^\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpvlz_y_bu.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:1216:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::move_iterator<_IteratorL>\
    \ std::operator+(typename std::move_iterator<_IteratorL>::difference_type, const\
    \ std::move_iterator<_IteratorL>&)\u2019\n 1216 |     operator+(typename mo"
  stdout: ''
  timestamp: 1660102346
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    if (n == 1)\n        result.push_back(3);\n\
    \    else if (n % 2 == 0)\n        result.push_back(tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1));\n    else\n        result.push_back(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n - 3) + tri(n - 4));\n    return result;\n}\nint main() {\n    auto\
    \ candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1, 3, 2,\
    \ 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5esl055p.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmp5esl055p.cpp:23:37: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018std::vector<long\
    \ int>\u2019)\n   23 |         result.push_back(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1));\n      |                          ~~~~~~~~~~ ^ ~~~~~~~~~~\n      |  \
    \                           |            |\n      |                          \
    \   |            vector<[...]>\n      |                             vector<[...]>\n\
    In file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n           \
    \      from /usr/include/c++/9/bits/specfun.h:45,\n                 from /usr/include/c++/9/cmath:1927,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmp5esl055p.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:423:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmp5esl055p.cpp:23:48:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   23 |         result.push_back(tri(n - 1) + tri(n - 2) + tri(n + 1));\n  \
    \    |                                                ^\nIn file included from\
    \ /usr/include/c++/9/bits/stl_algobase.h:67,\n                 from /usr/include/c++/9/bits/specfun.h:45,\n\
    \                 from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmp5esl055p.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:1216:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::move_iterator<_IteratorL>\
    \ std::operator+(typename std::move_iterator<_IteratorL>::difference_type, const\
    \ std:"
  stdout: ''
  timestamp: 1660102341
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    long a = 1;\n    long b = 2;\n    long\
    \ c = 3;\n    long d = a + b + c;\n    long temp;\n    if (n % 2 == 0) {\n   \
    \     for (int i = 3; i <= n; i++) {\n            temp = a;\n            a = b;\n\
    \            b = c + d;\n            c = temp;\n            d = a + b + c;\n \
    \           result.push_back(d);\n        }\n    } else {\n        for (int i\
    \ = 3; i <= n; i++) {\n            temp = a;\n            a = b;\n           \
    \ b = c + d;\n            c = temp;\n            d = a + b + c;\n            result.push_back(d);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = tri;\n\
    \    assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  status: Exception
  stderr: 'tmp77_6qaz5: /tmp/tmp77_6qaz5.cpp:48: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102346
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    long a = 1;\n    long b = 2;\n    long\
    \ c = 3;\n    long d = 1;\n    long temp;\n    long sum = 0;\n    long tri_sum\
    \ = 0;\n    long tri_sum2 = 0;\n    long tri_sum3 = 0;\n    long tri_sum4 = 0;\n\
    \    long tri_sum5 = 0;\n    long tri_sum6 = 0;\n    long tri_sum7 = 0;\n    long\
    \ tri_sum8 = 0;\n    long tri_sum9 = 0;\n    long tri_sum10 = 0;\n    long tri_sum11\
    \ = 0;\n    long tri_sum12 = 0;\n    long tri_sum13 = 0;\n    long tri_sum14 =\
    \ 0;\n    long tri_sum15 = 0;\n    long tri_sum16 = 0;\n    long tri_sum17 = 0;\n\
    \    long tri_sum18 = 0;\n    long tri_sum19 = 0;\n    long tri_sum20 = 0;\n \
    \   long tri_sum21 = 0;\n    long tri_sum22 = 0;\n    long tri_sum23 = 0;\n  \
    \  long tri_sum24 = 0;\n    long tri_sum25 = 0;\n    long tri_sum26 = 0;\n   \
    \ long tri_sum27 = 0;\n    long tri_sum28 = 0;\n    long tri_sum29 = 0;\n    long\
    \ tri_sum30 = 0;\n    long tri_sum31 = 0;\n    long tri_sum32 = 0;\n    long tri_sum33\
    \ = 0;\n    long tri_sum34 = 0;\n    long tri_sum35 = 0;\n    long tri_sum36 =\
    \ 0;\n    long tri_sum37 = 0;\n    long tri_sum38 = 0;\n    long tri_sum39 = 0;\n\
    \    long tri_sum40 = 0;\n    long tri_sum41 = 0;\n    long tri_sum42 = 0;\n \
    \   long tri_sum43 = 0;\n    long tri_sum44 = 0;\n    long tri_sum45 = 0;\n  \
    \  long tri_sum46 = 0;\n    long tri_sum47 = 0;\n    long tri_sum48 = 0;\n   \
    \ long tri_sum49 = 0;\n    long tri_sum50 = 0;\n    long tri_sum51 = 0;\n    long\
    \ tri_sum52 = 0;\n    long tri_sum53 = 0;\n    long tri_sum54 = 0;\n    long tri_sum55\
    \ = 0;\n    long tri_sum56 = 0;\n    long tri_sum57 = 0;\n    long tri_sum58 =\
    \ 0;\n    long tri_sum59 = 0;\n    long tri_sum60 = 0;\n    \n}\nint main() {\n\
    \    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  status: Exception
  stderr: 'tmp1vq4hix7: /tmp/tmp1vq4hix7.cpp:90: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102347
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    if (n == 1)\n        result.push_back(3);\n\
    \    else if (n % 2 == 0)\n        result.push_back(tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1));\n    else\n        result.push_back(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n - 3) + tri(n - 4) + tri(n - 5));\n    return result;\n}\nint main()\
    \ {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsi3csbnk.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmpsi3csbnk.cpp:23:37: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018std::vector<long\
    \ int>\u2019)\n   23 |         result.push_back(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1));\n      |                          ~~~~~~~~~~ ^ ~~~~~~~~~~\n      |  \
    \                           |            |\n      |                          \
    \   |            vector<[...]>\n      |                             vector<[...]>\n\
    In file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n           \
    \      from /usr/include/c++/9/bits/specfun.h:45,\n                 from /usr/include/c++/9/cmath:1927,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpsi3csbnk.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:423:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpsi3csbnk.cpp:23:48:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   23 |         result.push_back(tri(n - 1) + tri(n - 2) + tri(n + 1));\n  \
    \    |                                                ^\nIn file included from\
    \ /usr/include/c++/9/bits/stl_algobase.h:67,\n                 from /usr/include/c++/9/bits/specfun.h:45,\n\
    \                 from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpsi3csbnk.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:1216:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::move_iterator<_IteratorL>\
    \ std::operator+(typename std::move_iterator<_IteratorL>::difference_type, const\
    \ std:"
  stdout: ''
  timestamp: 1660102339
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res;\n    long a = 1;\n    long b = 2;\n    long\
    \ c = 3;\n    long d = a + b + c;\n    long temp;\n    if (n % 2 == 0) {\n   \
    \     temp = a;\n        a = b;\n        b = temp + c;\n        c = d;\n     \
    \   d = a + b + c;\n    }\n    long temp2 = a;\n    a = b;\n    b = temp2 + c;\n\
    \    c = d;\n    d = a + b + c;\n    res.push_back(a);\n    res.push_back(b);\n\
    \    res.push_back(c);\n    res.push_back(d);\n    return res;\n}\nint main()\
    \ {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  status: Exception
  stderr: 'tmpppninbu8: /tmp/tmpppninbu8.cpp:45: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102347
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    if (n == 0) result.push_back(1);\n\
    \    else if (n == 1) result.push_back(3);\n    else if (n % 2 == 0) result.push_back(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1));\n    else result.push_back(tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4));\n    return result;\n}\nint main()\
    \ {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppr38qfdu.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmppr38qfdu.cpp:22:54: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018std::vector<long\
    \ int>\u2019)\n   22 |     else if (n % 2 == 0) result.push_back(tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1));\n      |                                         \
    \  ~~~~~~~~~~ ^ ~~~~~~~~~~\n      |                                          \
    \    |            |\n      |                                              |  \
    \          vector<[...]>\n      |                                            \
    \  vector<[...]>\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmppr38qfdu.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:423:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmppr38qfdu.cpp:22:65:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   22 |     else if (n % 2 == 0) result.push_back(tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1));\n      |                                                      \
    \           ^\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmppr38qfdu.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:1216:5:\
    \ note: candidate: \u2018template<class _Iterator> const"
  stdout: ''
  timestamp: 1660102346
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    if (n == 1)\n        result.push_back(3);\n\
    \    else if (n % 2 == 0)\n        result.push_back(tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1));\n    else\n        result.push_back(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n - 3));\n    return result;\n}\nint main() {\n    auto candidate\
    \ = tri;\n    assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n \
    \   assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n    assert(candidate((6)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n    assert(candidate((7)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80,\
    \ 9, 99, 10, 120, 11})));\n    assert(candidate((0)) == (std::vector<long>({1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({1, 3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplf_6jyk0.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmplf_6jyk0.cpp:23:37: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018std::vector<long\
    \ int>\u2019)\n   23 |         result.push_back(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1));\n      |                          ~~~~~~~~~~ ^ ~~~~~~~~~~\n      |  \
    \                           |            |\n      |                          \
    \   |            vector<[...]>\n      |                             vector<[...]>\n\
    In file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n           \
    \      from /usr/include/c++/9/bits/specfun.h:45,\n                 from /usr/include/c++/9/cmath:1927,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmplf_6jyk0.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:423:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmplf_6jyk0.cpp:23:48:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   23 |         result.push_back(tri(n - 1) + tri(n - 2) + tri(n + 1));\n  \
    \    |                                                ^\nIn file included from\
    \ /usr/include/c++/9/bits/stl_algobase.h:67,\n                 from /usr/include/c++/9/bits/specfun.h:45,\n\
    \                 from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmplf_6jyk0.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:1216:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::move_iterator<_IteratorL>\
    \ std::operator+(typename std::move_iterator<_IteratorL>::difference_type, const\
    \ std:"
  stdout: ''
  timestamp: 1660102344
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    if (n == 1)\n        result.push_back(3);\n\
    \    else if (n % 2 == 0)\n        result.push_back(tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1));\n    else\n        result.push_back(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n - 3) + tri(n - 4));\n    return result;\n}\nint main() {\n    auto\
    \ candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1, 3, 2,\
    \ 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5esl055p.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmp5esl055p.cpp:23:37: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018std::vector<long\
    \ int>\u2019)\n   23 |         result.push_back(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1));\n      |                          ~~~~~~~~~~ ^ ~~~~~~~~~~\n      |  \
    \                           |            |\n      |                          \
    \   |            vector<[...]>\n      |                             vector<[...]>\n\
    In file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n           \
    \      from /usr/include/c++/9/bits/specfun.h:45,\n                 from /usr/include/c++/9/cmath:1927,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmp5esl055p.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:423:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmp5esl055p.cpp:23:48:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   23 |         result.push_back(tri(n - 1) + tri(n - 2) + tri(n + 1));\n  \
    \    |                                                ^\nIn file included from\
    \ /usr/include/c++/9/bits/stl_algobase.h:67,\n                 from /usr/include/c++/9/bits/specfun.h:45,\n\
    \                 from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmp5esl055p.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:1216:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::move_iterator<_IteratorL>\
    \ std::operator+(typename std::move_iterator<_IteratorL>::difference_type, const\
    \ std:"
  stdout: ''
  timestamp: 1660102341
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res;\n    if (n == 0) return res;\n    if (n ==\
    \ 1) return { 1 };\n    if (n == 2) return { 1, 2, 3 };\n    if (n % 2 == 0) return\
    \ tri(n / 2) + tri(n / 2 + 1) + tri(n / 2 + 2);\n    return tri(n / 2) + tri(n\
    \ / 2 + 1) + tri(n / 2 + 2);\n}\nint main() {\n    auto candidate = tri;\n   \
    \ assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpk_96vjmu.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmpk_96vjmu.cpp:23:39: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018std::vector<long\
    \ int>\u2019)\n   23 |     if (n % 2 == 0) return tri(n / 2) + tri(n / 2 + 1)\
    \ + tri(n / 2 + 2);\n      |                            ~~~~~~~~~~ ^ ~~~~~~~~~~~~~~\n\
    \      |                               |            |\n      |               \
    \                |            vector<[...]>\n      |                         \
    \      vector<[...]>\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpk_96vjmu.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:423:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpk_96vjmu.cpp:23:54:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   23 |     if (n % 2 == 0) return tri(n / 2) + tri(n / 2 + 1) + tri(n / 2 +\
    \ 2);\n      |                                                      ^\nIn file\
    \ included from /usr/include/c++/9/bits/stl_algobase.h:67,\n                 from\
    \ /usr/include/c++/9/bits/specfun.h:45,\n                 from /usr/include/c++/9/cmath:1927,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpk_96vjmu.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:1216:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::move_iterator<_IteratorL>\
    \ std::operator+(typename std::move_iterator<_Ite"
  stdout: ''
  timestamp: 1660102346
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res;\n    if (n == 0)\n        return res;\n   \
    \ if (n == 1)\n        res.push_back(3);\n    else\n        res.push_back(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1));\n    return res;\n}\nint main() {\n    auto\
    \ candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1, 3, 2,\
    \ 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpabesb5bv.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmpabesb5bv.cpp:25:34: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018std::vector<long\
    \ int>\u2019)\n   25 |         res.push_back(tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1));\n      |                       ~~~~~~~~~~ ^ ~~~~~~~~~~\n      |       \
    \                   |            |\n      |                          |       \
    \     vector<[...]>\n      |                          vector<[...]>\nIn file included\
    \ from /usr/include/c++/9/bits/stl_algobase.h:67,\n                 from /usr/include/c++/9/bits/specfun.h:45,\n\
    \                 from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpabesb5bv.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:423:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpabesb5bv.cpp:25:45:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   25 |         res.push_back(tri(n - 1) + tri(n - 2) + tri(n + 1));\n     \
    \ |                                             ^\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpabesb5bv.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:1216:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::move_iterator<_IteratorL>\
    \ std::operator+(typename std::move_iterator<_IteratorL>::difference_type, const\
    \ std::move_iterator<_Itera"
  stdout: ''
  timestamp: 1660102339
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res;\n    if (n == 0) return res;\n    if (n ==\
    \ 1) return res;\n    if (n == 2) return res;\n    if (n % 2 == 0) return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1);\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1);\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_umpdzhn.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmp_umpdzhn.cpp:23:39: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018std::vector<long\
    \ int>\u2019)\n   23 |     if (n % 2 == 0) return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1);\n      |                            ~~~~~~~~~~ ^ ~~~~~~~~~~\n      | \
    \                              |            |\n      |                       \
    \        |            vector<[...]>\n      |                               vector<[...]>\n\
    In file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n           \
    \      from /usr/include/c++/9/bits/specfun.h:45,\n                 from /usr/include/c++/9/cmath:1927,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmp_umpdzhn.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:423:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmp_umpdzhn.cpp:23:50:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   23 |     if (n % 2 == 0) return tri(n - 1) + tri(n - 2) + tri(n + 1);\n \
    \     |                                                  ^\nIn file included from\
    \ /usr/include/c++/9/bits/stl_algobase.h:67,\n                 from /usr/include/c++/9/bits/specfun.h:45,\n\
    \                 from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmp_umpdzhn.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:1216:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::move_iterator<_IteratorL>\
    \ std::operator+(typename std::move_iterator<_IteratorL>::difference_type"
  stdout: ''
  timestamp: 1660102346
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res;\n    if (n == 1)\n        res.push_back(1);\n\
    \    else if (n % 2 == 0)\n        res.push_back(tri(n - 1) + tri(n - 2));\n \
    \   else\n        res.push_back(tri(n - 1) + tri(n - 2) + tri(n + 1));\n    return\
    \ res;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpetpvpqx_.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmpetpvpqx_.cpp:23:34: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018std::vector<long\
    \ int>\u2019)\n   23 |         res.push_back(tri(n - 1) + tri(n - 2));\n     \
    \ |                       ~~~~~~~~~~ ^ ~~~~~~~~~~\n      |                   \
    \       |            |\n      |                          |            vector<[...]>\n\
    \      |                          vector<[...]>\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpetpvpqx_.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:423:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpetpvpqx_.cpp:23:45:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   23 |         res.push_back(tri(n - 1) + tri(n - 2));\n      |           \
    \                                  ^\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpetpvpqx_.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:1216:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::move_iterator<_IteratorL>\
    \ std::operator+(typename std::move_iterator<_IteratorL>::difference_type, const\
    \ std::move_iterator<_IteratorL>&)\u2019\n 1216 |     ope"
  stdout: ''
  timestamp: 1660102339
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    long tri_1 = 1, tri_2 = 2, tri_3 =\
    \ tri_1 + tri_2;\n    long tri_4 = tri_3 + tri_1;\n    long tri_5 = tri_4 + tri_2;\n\
    \    long tri_6 = tri_5 + tri_3;\n    long tri_7 = tri_6 + tri_4;\n    long tri_8\
    \ = tri_7 + tri_5;\n    long tri_9 = tri_8 + tri_6;\n    long tri_10 = tri_9 +\
    \ tri_7;\n    long tri_11 = tri_10 + tri_8;\n    long tri_12 = tri_11 + tri_9;\n\
    \    long tri_13 = tri_12 + tri_10;\n    long tri_14 = tri_13 + tri_11;\n    long\
    \ tri_15 = tri_14 + tri_12;\n    long tri_16 = tri_15 + tri_13;\n    long tri_17\
    \ = tri_16 + tri_14;\n    long tri_18 = tri_17 + tri_15;\n    long tri_19 = tri_18\
    \ + tri_16;\n    long tri_20 = tri_19 + tri_17;\n    long tri_21 = tri_20 + tri_18;\n\
    \    long tri_22 = tri_21 + tri_19;\n    long tri_23 = tri_22 + tri_20;\n    long\
    \ tri_24 = tri_23 + tri_21;\n    long tri_25 = tri_24 + tri_22;\n    long tri_26\
    \ = tri_25 + tri_23;\n    long tri_27 = tri_26 + tri_24;\n    long tri_28 = tri_27\
    \ + tri_25;\n    long tri_29 = tri_28 + tri_26;\n    long tri_30 = tri_29 + tri_27;\n\
    \    long tri_31 = tri_30 + tri_28;\n    long tri_32 = tri_31 + tri_29;\n    long\
    \ tri_33 = tri_32 + tri_30;\n    long tri_34 = tri_33 + tri_31;\n    long tri_35\
    \ = tri_34 + tri_32;\n    long tri_36 = tri_35 + tri_33;\n    long tri_37 = tri_36\
    \ + tri_34;\n    long tri_38 = tri_37 + tri_35\n}\nint main() {\n    auto candidate\
    \ = tri;\n    assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n \
    \   assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n    assert(candidate((6)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n    assert(candidate((7)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80,\
    \ 9, 99, 10, 120, 11})));\n    assert(candidate((0)) == (std::vector<long>({1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({1, 3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpm4m7mt86.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmpm4m7mt86.cpp:56:1: error: expected \u2018,\u2019 or \u2018\
    ;\u2019 before \u2018}\u2019 token\n   56 | }\n      | ^\n/tmp/tmpm4m7mt86.cpp:56:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660102342
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res;\n    long a = 0, b = 1, c = 1;\n    long temp;\n\
    \    long temp2;\n    long temp3;\n    long temp4;\n    long temp5;\n    long\
    \ temp6;\n    long temp7;\n    long temp8;\n    long temp9;\n    long temp10;\n\
    \    long temp11;\n    long temp12;\n    long temp13;\n    long temp14;\n    long\
    \ temp15;\n    long temp16;\n    long temp17;\n    long temp18;\n    long temp19;\n\
    \    long temp20;\n    long temp21;\n    long temp22;\n    long temp23;\n    long\
    \ temp24;\n    long temp25;\n    long temp26;\n    long temp27;\n    long temp28;\n\
    \    long temp29;\n    long temp30;\n    long temp31;\n    long temp32;\n    long\
    \ temp33;\n    long temp34;\n    long temp35;\n    long temp36;\n    long temp37;\n\
    \    long temp38;\n    long temp39;\n    long temp40;\n    long temp41;\n    long\
    \ temp42;\n    long temp43;\n    long temp44;\n    long temp45;\n    long temp46;\n\
    \    long temp47;\n    long temp48;\n    long temp49;\n    long temp50;\n    long\
    \ temp51;\n    long temp52;\n    long temp53;\n    long temp54;\n    long temp55;\n\
    \    long temp56;\n    long temp57;\n    long temp58;\n    long temp59;\n    long\
    \ temp60;\n    long temp61;\n    long temp62;\n    long temp63;\n    long temp64;\n\
    \    long temp65;\n    long temp66;\n    long temp67;\n    long temp68;\n    long\
    \ temp69;\n    long temp70;\n    long temp71;\n    long temp72;\n    long temp73;\n\
    \    long temp74;\n    long temp75;\n    long temp76;\n    long temp77;\n    long\
    \ temp78;\n    long temp79;\n    long temp80;\n    long temp81;\n    long temp82;\n\
    \    long temp83;\n    long temp84;\n    long temp85;\n    long temp86;\n    \n\
    }\nint main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  status: Exception
  stderr: 'tmpdbnmipsd: /tmp/tmpdbnmipsd.cpp:111: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102346
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res;\n    if (n == 0) return res;\n    if (n ==\
    \ 1) return res;\n    if (n == 2) return { 1, 2, 3 };\n    if (n % 2 == 0) {\n\
    \        long a = tri(n / 2);\n        long b = tri(n - 1);\n        long c =\
    \ tri(n - 2);\n        res.push_back(a);\n        res.push_back(b);\n        res.push_back(c);\n\
    \        return res;\n    } else {\n        long a = tri(n / 2);\n        long\
    \ b = tri(n - 1);\n        long c = tri(n - 2);\n        res.push_back(a);\n \
    \       res.push_back(b);\n        res.push_back(c);\n        res.push_back(a\
    \ + b);\n        res.push_back(a + c);\n        res.push_back(b + c);\n      \
    \  return res;\n    }\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyww5yssw.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmpyww5yssw.cpp:24:21: error: cannot convert \u2018std::vector<long\
    \ int>\u2019 to \u2018long int\u2019 in initialization\n   24 |         long a\
    \ = tri(n / 2);\n      |                  ~~~^~~~~~~\n      |                \
    \     |\n      |                     std::vector<long int>\n/tmp/tmpyww5yssw.cpp:25:21:\
    \ error: cannot convert \u2018std::vector<long int>\u2019 to \u2018long int\u2019\
    \ in initialization\n   25 |         long b = tri(n - 1);\n      |           \
    \       ~~~^~~~~~~\n      |                     |\n      |                   \
    \  std::vector<long int>\n/tmp/tmpyww5yssw.cpp:26:21: error: cannot convert \u2018\
    std::vector<long int>\u2019 to \u2018long int\u2019 in initialization\n   26 |\
    \         long c = tri(n - 2);\n      |                  ~~~^~~~~~~\n      | \
    \                    |\n      |                     std::vector<long int>\n/tmp/tmpyww5yssw.cpp:32:21:\
    \ error: cannot convert \u2018std::vector<long int>\u2019 to \u2018long int\u2019\
    \ in initialization\n   32 |         long a = tri(n / 2);\n      |           \
    \       ~~~^~~~~~~\n      |                     |\n      |                   \
    \  std::vector<long int>\n/tmp/tmpyww5yssw.cpp:33:21: error: cannot convert \u2018\
    std::vector<long int>\u2019 to \u2018long int\u2019 in initialization\n   33 |\
    \         long b = tri(n - 1);\n      |                  ~~~^~~~~~~\n      | \
    \                    |\n      |                     std::vector<long int>\n/tmp/tmpyww5yssw.cpp:34:21:\
    \ error: cannot convert \u2018std::vector<long int>\u2019 to \u2018long int\u2019\
    \ in initialization\n   34 |         long c = tri(n - 2);\n      |           \
    \       ~~~^~~~~~~\n      |                     |\n      |                   \
    \  std::vector<long int>\n"
  stdout: ''
  timestamp: 1660102346
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    if (n <= 1)\n        return result;\n\
    \    long a = 1;\n    long b = 2;\n    long c = 3;\n    long d = a + b + c;\n\
    \    if (n % 2 == 0)\n        c = d;\n    else\n        d = c;\n    result.push_back(a);\n\
    \    result.push_back(b);\n    result.push_back(c);\n    result.push_back(d);\n\
    \    long mid = n / 2;\n    if (mid % 2 == 0)\n        mid = mid;\n    else\n\
    \        mid = mid+1;\n    long mid2 = mid + mid;\n    long mid3 = mid2 + mid;\n\
    \    long mid4 = mid3 + mid;\n    result.push_back(mid);\n    result.push_back(mid2);\n\
    \    result.push_back(mid3);\n    result.push_back(mid4);\n    return result;\n\
    }\nint main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  status: Exception
  stderr: 'tmpvcvrsp1l: /tmp/tmpvcvrsp1l.cpp:50: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102347
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res;\n    if(n<=1)\n    {\n        res.push_back(n);\n\
    \        return res;\n    }\n    long a = 1;\n    long b = 2;\n    long c = 3;\n\
    \    long d = a + b + c;\n    long temp;\n    for(int i=0;i<n;i++)\n    {\n  \
    \      temp = a;\n        a = b;\n        b = c;\n        c = d;\n        d =\
    \ temp + a + b + c;\n        res.push_back(d);\n    }\n    return res;\n}\nint\
    \ main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  status: Exception
  stderr: 'tmp1p9_760l: /tmp/tmp1p9_760l.cpp:43: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102347
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res;\n    long tri_sum = 0;\n    long tri_sum_temp\
    \ = 0;\n    long tri_sum_temp2 = 0;\n    long tri_sum_temp3 = 0;\n    long tri_sum_temp4\
    \ = 0;\n    long tri_sum_temp5 = 0;\n    long tri_sum_temp6 = 0;\n    long tri_sum_temp7\
    \ = 0;\n    long tri_sum_temp8 = 0;\n    long tri_sum_temp9 = 0;\n    long tri_sum_temp10\
    \ = 0;\n    long tri_sum_temp11 = 0;\n    long tri_sum_temp12 = 0;\n    long tri_sum_temp13\
    \ = 0;\n    long tri_sum_temp14 = 0;\n    long tri_sum_temp15 = 0;\n    long tri_sum_temp16\
    \ = 0;\n    long tri_sum_temp17 = 0;\n    long tri_sum_temp18 = 0;\n    long tri_sum_temp19\
    \ = 0;\n    long tri_sum_temp20 = 0;\n    long tri_sum_temp21 = 0;\n    long tri_sum_temp22\
    \ = 0;\n    long tri_sum_temp23 = 0;\n    long tri_sum_temp24 = 0;\n    long tri_sum_temp25\
    \ = 0;\n    long tri_sum_temp26 = 0;\n    long tri_sum_temp27 = 0;\n    long tri_sum_temp28\
    \ = 0;\n    long tri_sum_temp29 = 0;\n    long tri_sum_temp30 = 0;\n    long tri_sum_temp31\
    \ = 0;\n    long tri_sum_temp32 = 0;\n    long tri_sum_temp33 = 0;\n    long tri_sum_temp34\
    \ = 0;\n    long tri_sum_temp35 = 0;\n    long tri_sum_temp36 = 0;\n    long tri_sum_temp37\
    \ = 0;\n    long tri_sum_temp38 = 0;\n    long tri_sum_temp39 = 0;\n    long tri_sum_temp40\
    \ = 0;\n    long tri_sum_temp41 = 0;\n    long tri_sum_temp42 = 0;\n    long tri_sum_temp43\
    \ = 0;\n    long tri_sum_temp44 = 0;\n    long tri_sum_temp45 = 0;\n    long tri_sum_temp46\
    \ = 0;\n    long tri_sum_temp47 = 0;\n    long tri_sum_temp48 = 0;\n    long tri_sum_temp49\
    \ = 0;\n    long tri_sum_temp50 = 0;\n    long tri_sum_temp51 = 0;\n    long tri_sum_temp52\
    \ = 0;\n    long tri_sum_temp53 = 0;\n    long tri_sum_temp54 = 0;\n    long tri_sum_temp55\
    \ = 0;\n    long tri_sum_temp56 = 0;\n\n}\nint main() {\n    auto candidate =\
    \ tri;\n    assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n   \
    \ assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n    assert(candidate((6)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n    assert(candidate((7)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80,\
    \ 9, 99, 10, 120, 11})));\n    assert(candidate((0)) == (std::vector<long>({1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({1, 3})));\n}\n"
  status: Exception
  stderr: 'tmpan9mqehn: /tmp/tmpan9mqehn.cpp:81: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102347
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    if (n <= 1) result.push_back(1);\n\
    \    else if (n % 2 == 0) result.push_back(tri(n - 1) + tri(n - 2));\n    else\
    \ result.push_back(tri(n - 1) + tri(n - 2) + tri(n - 3));\n    return result;\n\
    }\nint main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpx5b3y_46.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmpx5b3y_46.cpp:21:54: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018std::vector<long\
    \ int>\u2019)\n   21 |     else if (n % 2 == 0) result.push_back(tri(n - 1) +\
    \ tri(n - 2));\n      |                                           ~~~~~~~~~~ ^\
    \ ~~~~~~~~~~\n      |                                              |         \
    \   |\n      |                                              |            vector<[...]>\n\
    \      |                                              vector<[...]>\nIn file included\
    \ from /usr/include/c++/9/bits/stl_algobase.h:67,\n                 from /usr/include/c++/9/bits/specfun.h:45,\n\
    \                 from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpx5b3y_46.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:423:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpx5b3y_46.cpp:21:65:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   21 |     else if (n % 2 == 0) result.push_back(tri(n - 1) + tri(n - 2));\n\
    \      |                                                                 ^\nIn\
    \ file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n            \
    \     from /usr/include/c++/9/bits/specfun.h:45,\n                 from /usr/include/c++/9/cmath:1927,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpx5b3y_46.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:1216:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::move_iterator<_I"
  stdout: ''
  timestamp: 1660102346
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    if (n == 1)\n        result.push_back(1);\n\
    \    else if (n % 2 == 0)\n        result.push_back(tri(n - 1) + tri(n - 2));\n\
    \    else\n        result.push_back(tri(n - 1) + tri(n - 2) + tri(n + 1));\n \
    \   return result;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvlo3wudh.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmpvlo3wudh.cpp:23:37: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018std::vector<long\
    \ int>\u2019)\n   23 |         result.push_back(tri(n - 1) + tri(n - 2));\n  \
    \    |                          ~~~~~~~~~~ ^ ~~~~~~~~~~\n      |             \
    \                |            |\n      |                             |       \
    \     vector<[...]>\n      |                             vector<[...]>\nIn file\
    \ included from /usr/include/c++/9/bits/stl_algobase.h:67,\n                 from\
    \ /usr/include/c++/9/bits/specfun.h:45,\n                 from /usr/include/c++/9/cmath:1927,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpvlo3wudh.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:423:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpvlo3wudh.cpp:23:48:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   23 |         result.push_back(tri(n - 1) + tri(n - 2));\n      |        \
    \                                        ^\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpvlo3wudh.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:1216:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::move_iterator<_IteratorL>\
    \ std::operator+(typename std::move_iterator<_IteratorL>::difference_type, const\
    \ std::move_iterator<_IteratorL>"
  stdout: ''
  timestamp: 1660102339
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    if (n == 0) result.push_back(1);\n\
    \    else if (n == 1) result.push_back(3);\n    else {\n        long a = tri(n\
    \ - 1);\n        long b = tri(n - 2);\n        long c = tri(n - 3);\n        result.push_back(a);\n\
    \        result.push_back(b);\n        result.push_back(c);\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplw27_rym.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmplw27_rym.cpp:23:21: error: cannot convert \u2018std::vector<long\
    \ int>\u2019 to \u2018long int\u2019 in initialization\n   23 |         long a\
    \ = tri(n - 1);\n      |                  ~~~^~~~~~~\n      |                \
    \     |\n      |                     std::vector<long int>\n/tmp/tmplw27_rym.cpp:24:21:\
    \ error: cannot convert \u2018std::vector<long int>\u2019 to \u2018long int\u2019\
    \ in initialization\n   24 |         long b = tri(n - 2);\n      |           \
    \       ~~~^~~~~~~\n      |                     |\n      |                   \
    \  std::vector<long int>\n/tmp/tmplw27_rym.cpp:25:21: error: cannot convert \u2018\
    std::vector<long int>\u2019 to \u2018long int\u2019 in initialization\n   25 |\
    \         long c = tri(n - 3);\n      |                  ~~~^~~~~~~\n      | \
    \                    |\n      |                     std::vector<long int>\n"
  stdout: ''
  timestamp: 1660102346
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    long a = 1;\n    long b = 2;\n    long\
    \ c = 1;\n    long d = 1;\n    long sum = 0;\n    long temp;\n    long temp1;\n\
    \    long temp2;\n    long temp3;\n    long temp4;\n    long temp5;\n    long\
    \ temp6;\n    long temp7;\n    long temp8;\n    long temp9;\n    long temp10;\n\
    \    long temp11;\n    long temp12;\n    long temp13;\n    long temp14;\n    long\
    \ temp15;\n    long temp16;\n    long temp17;\n    long temp18;\n    long temp19;\n\
    \    long temp20;\n    long temp21;\n    long temp22;\n    long temp23;\n    long\
    \ temp24;\n    long temp25;\n    long temp26;\n    long temp27;\n    long temp28;\n\
    \    long temp29;\n    long temp30;\n    long temp31;\n    long temp32;\n    long\
    \ temp33;\n    long temp34;\n    long temp35;\n    long temp36;\n    long temp37;\n\
    \    long temp38;\n    long temp39;\n    long temp40;\n    long temp41;\n    long\
    \ temp42;\n    long temp43;\n    long temp44;\n    long temp45;\n    long temp46;\n\
    \    long temp47;\n    long temp48;\n    long temp49;\n    long temp50;\n    long\
    \ temp51;\n    long temp52;\n    long temp53;\n    long temp54;\n    long temp55;\n\
    \    long temp56;\n    long temp57;\n    long temp58;\n    long temp59;\n    long\
    \ temp60;\n    long temp61;\n    long temp62;\n    long temp63;\n    long temp64;\n\
    \    long temp65;\n    long temp66;\n    long temp67;\n    long temp68;\n    long\
    \ temp69;\n    long temp70;\n    long temp71;\n    long temp72;\n    long temp73;\n\
    \    long temp74;\n    long temp75;\n    long temp76;\n    long temp77;\n    long\
    \ temp78;\n    long temp79;\n    long temp80;\n    long temp81;\n    long temp82;\n\
    \    long temp83\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpr1rvvhc0.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmpr1rvvhc0.cpp:109:1: error: expected initializer before\
    \ \u2018}\u2019 token\n  109 | }\n      | ^\n/tmp/tmpr1rvvhc0.cpp:109:1: warning:\
    \ no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660102346
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    if (n == 0) return result;\n    if\
    \ (n == 1) return result;\n    long a = 1;\n    long b = 2;\n    long c = 1;\n\
    \    long d = 1;\n    long temp;\n    while (n > 1) {\n        temp = a + b +\
    \ c + d;\n        result.push_back(temp);\n        a = b;\n        b = c;\n  \
    \      c = d;\n        d = temp;\n        n--;\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  status: Exception
  stderr: 'tmpuxvvtylu: /tmp/tmpuxvvtylu.cpp:40: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102347
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res;\n    long a = 1, b = 2, c = 3;\n    long temp;\n\
    \    if (n == 0)\n    {\n        res.push_back(a);\n        res.push_back(b);\n\
    \        res.push_back(c);\n        return res;\n    }\n    else if (n == 1)\n\
    \    {\n        res.push_back(a);\n        res.push_back(b);\n        res.push_back(c);\n\
    \        return res;\n    }\n    else if (n == 2)\n    {\n        res.push_back(a);\n\
    \        res.push_back(b);\n        res.push_back(c);\n        return res;\n \
    \   }\n    else\n    {\n        temp = tri(n - 1) + tri(n - 2) + tri(n + 1);\n\
    \        res.push_back(temp);\n        return res;\n    }\n}\nint main() {\n \
    \   auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkqavhb42.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmpkqavhb42.cpp:45:27: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018std::vector<long\
    \ int>\u2019)\n   45 |         temp = tri(n - 1) + tri(n - 2) + tri(n + 1);\n\
    \      |                ~~~~~~~~~~ ^ ~~~~~~~~~~\n      |                   | \
    \           |\n      |                   |            vector<[...]>\n      | \
    \                  vector<[...]>\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpkqavhb42.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:423:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpkqavhb42.cpp:45:38:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   45 |         temp = tri(n - 1) + tri(n - 2) + tri(n + 1);\n      |      \
    \                                ^\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpkqavhb42.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:1216:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::move_iterator<_IteratorL>\
    \ std::operator+(typename std::move_iterator<_IteratorL>::difference_type, const\
    \ std::move_iterator<_IteratorL>&)\u2019\n 1216 |     operator+(typename move_iter"
  stdout: ''
  timestamp: 1660102346
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res;\n    long a = 1;\n    long b = 2;\n    long\
    \ c = 3;\n    long d = a + b + c;\n    long temp;\n    long temp2;\n    long temp3;\n\
    \    long temp4;\n    long temp5;\n    long temp6;\n    long temp7;\n    long\
    \ temp8;\n    long temp9;\n    long temp10;\n    long temp11;\n    long temp12;\n\
    \    long temp13;\n    long temp14;\n    long temp15;\n    long temp16;\n    long\
    \ temp17;\n    long temp18;\n    long temp19;\n    long temp20;\n    long temp21;\n\
    \    long temp22;\n    long temp23;\n    long temp24;\n    long temp25;\n    long\
    \ temp26;\n    long temp27;\n    long temp28;\n    long temp29;\n    long temp30;\n\
    \    long temp31;\n    long temp32;\n    long temp33;\n    long temp34;\n    long\
    \ temp35;\n    long temp36;\n    long temp37;\n    long temp38;\n    long temp39;\n\
    \    long temp40;\n    long temp41;\n    long temp42;\n    long temp43;\n    long\
    \ temp44;\n    long temp45;\n    long temp46;\n    long temp47;\n    long temp48;\n\
    \    long temp49;\n    long temp50;\n    long temp51;\n    long temp52;\n    long\
    \ temp53;\n    long temp54;\n    long temp55;\n    long temp56;\n    long temp57;\n\
    \    long temp58;\n    long temp59;\n    long temp60;\n    long temp61;\n    long\
    \ temp62;\n    long temp63;\n    long temp64;\n    long temp65;\n    long temp66;\n\
    \    long temp67;\n    long temp68;\n    long temp69;\n    long temp70;\n    long\
    \ temp71;\n    long temp72;\n    long temp73;\n    long temp74;\n    long temp75;\n\
    \    long temp76;\n    long temp77;\n    long temp78;\n    long temp79;\n    long\
    \ temp80;\n    long temp81;\n    long temp82;\n    long temp83;\n    long temp84;\n\
    }\nint main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  status: Exception
  stderr: 'tmpnl8349_1: /tmp/tmpnl8349_1.cpp:111: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102340
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res;\n    if (n <= 1) return res;\n    long a =\
    \ 1, b = 2, c = 3;\n    while (c < n) {\n        res.push_back(c);\n        c\
    \ = a + b + c;\n        a = b;\n        b = c;\n    }\n    return res;\n}\nint\
    \ main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  status: Exception
  stderr: 'tmp7k_gwjtn: /tmp/tmp7k_gwjtn.cpp:32: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102347
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    if (n == 0) result.push_back(1);\n\
    \    else if (n == 1) result.push_back(3);\n    else if (n == 2) result.push_back(3);\n\
    \    else if (n % 2 == 0) result.push_back(tri(n - 1) + tri(n - 2) + tri(n + 1));\n\
    \    else result.push_back(tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3));\n\
    \    return result;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwozzymq2.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmpwozzymq2.cpp:23:54: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018std::vector<long\
    \ int>\u2019)\n   23 |     else if (n % 2 == 0) result.push_back(tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1));\n      |                                         \
    \  ~~~~~~~~~~ ^ ~~~~~~~~~~\n      |                                          \
    \    |            |\n      |                                              |  \
    \          vector<[...]>\n      |                                            \
    \  vector<[...]>\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpwozzymq2.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:423:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpwozzymq2.cpp:23:65:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   23 |     else if (n % 2 == 0) result.push_back(tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1));\n      |                                                      \
    \           ^\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpwozzymq2.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:1216:5:\
    \ note: candidate: \u2018template<class _Iterator> const"
  stdout: ''
  timestamp: 1660102346
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res;\n    if (n == 1)\n        res.push_back(3);\n\
    \    else if (n % 2 == 0)\n        res.push_back(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1));\n    else\n        res.push_back(tri(n - 1) + tri(n - 2) + tri(n - 1));\n\
    \    return res;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp96ga8yj0.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmp96ga8yj0.cpp:23:34: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018std::vector<long\
    \ int>\u2019)\n   23 |         res.push_back(tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1));\n      |                       ~~~~~~~~~~ ^ ~~~~~~~~~~\n      |       \
    \                   |            |\n      |                          |       \
    \     vector<[...]>\n      |                          vector<[...]>\nIn file included\
    \ from /usr/include/c++/9/bits/stl_algobase.h:67,\n                 from /usr/include/c++/9/bits/specfun.h:45,\n\
    \                 from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmp96ga8yj0.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:423:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmp96ga8yj0.cpp:23:45:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   23 |         res.push_back(tri(n - 1) + tri(n - 2) + tri(n + 1));\n     \
    \ |                                             ^\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmp96ga8yj0.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:1216:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::move_iterator<_IteratorL>\
    \ std::operator+(typename std::move_iterator<_IteratorL>::difference_type, const\
    \ std::move_iterator<_Itera"
  stdout: ''
  timestamp: 1660102347
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res;\n    if (n == 0)\n        return res;\n   \
    \ if (n == 1)\n        res.push_back(3);\n    else if (n % 2 == 0)\n        res.push_back(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1));\n    else\n        res.push_back(tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4) + tri(n - 5) + tri(n - 6));\n\
    \    return res;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfdl12h9a.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmpfdl12h9a.cpp:25:34: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018std::vector<long\
    \ int>\u2019)\n   25 |         res.push_back(tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1));\n      |                       ~~~~~~~~~~ ^ ~~~~~~~~~~\n      |       \
    \                   |            |\n      |                          |       \
    \     vector<[...]>\n      |                          vector<[...]>\nIn file included\
    \ from /usr/include/c++/9/bits/stl_algobase.h:67,\n                 from /usr/include/c++/9/bits/specfun.h:45,\n\
    \                 from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpfdl12h9a.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:423:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpfdl12h9a.cpp:25:45:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   25 |         res.push_back(tri(n - 1) + tri(n - 2) + tri(n + 1));\n     \
    \ |                                             ^\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpfdl12h9a.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:1216:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::move_iterator<_IteratorL>\
    \ std::operator+(typename std::move_iterator<_IteratorL>::difference_type, const\
    \ std::move_iterator<_Itera"
  stdout: ''
  timestamp: 1660102346
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    if (n == 1)\n        result.push_back(3);\n\
    \    else if (n % 2 == 0)\n        result.push_back(tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1));\n    else\n        result.push_back(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n - 3) + tri(n - 4));\n    return result;\n}\nint main() {\n    auto\
    \ candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1, 3, 2,\
    \ 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5esl055p.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmp5esl055p.cpp:23:37: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018std::vector<long\
    \ int>\u2019)\n   23 |         result.push_back(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1));\n      |                          ~~~~~~~~~~ ^ ~~~~~~~~~~\n      |  \
    \                           |            |\n      |                          \
    \   |            vector<[...]>\n      |                             vector<[...]>\n\
    In file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n           \
    \      from /usr/include/c++/9/bits/specfun.h:45,\n                 from /usr/include/c++/9/cmath:1927,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmp5esl055p.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:423:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmp5esl055p.cpp:23:48:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   23 |         result.push_back(tri(n - 1) + tri(n - 2) + tri(n + 1));\n  \
    \    |                                                ^\nIn file included from\
    \ /usr/include/c++/9/bits/stl_algobase.h:67,\n                 from /usr/include/c++/9/bits/specfun.h:45,\n\
    \                 from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmp5esl055p.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:1216:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::move_iterator<_IteratorL>\
    \ std::operator+(typename std::move_iterator<_IteratorL>::difference_type, const\
    \ std:"
  stdout: ''
  timestamp: 1660102341
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    long a = 1;\n    long b = 2;\n    long\
    \ c = 3;\n    long d = 4;\n    long temp;\n    long sum = 0;\n    long temp2;\n\
    \    long sum2 = 0;\n    long sum3 = 0;\n    long sum4 = 0;\n    long sum5 = 0;\n\
    \    long sum6 = 0;\n    long sum7 = 0;\n    long sum8 = 0;\n    long sum9 = 0;\n\
    \    long sum10 = 0;\n    long sum11 = 0;\n    long sum12 = 0;\n    long sum13\
    \ = 0;\n    long sum14 = 0;\n    long sum15 = 0;\n    long sum16 = 0;\n    long\
    \ sum17 = 0;\n    long sum18 = 0;\n    long sum19 = 0;\n    long sum20 = 0;\n\
    \    long sum21 = 0;\n    long sum22 = 0;\n    long sum23 = 0;\n    long sum24\
    \ = 0;\n    long sum25 = 0;\n    long sum26 = 0;\n    long sum27 = 0;\n    long\
    \ sum28 = 0;\n    long sum29 = 0;\n    long sum30 = 0;\n    long sum31 = 0;\n\
    \    long sum32 = 0;\n    long sum33 = 0;\n    long sum34 = 0;\n    long sum35\
    \ = 0;\n    long sum36 = 0;\n    long sum37 = 0;\n    long sum38 = 0;\n    long\
    \ sum39 = 0;\n    long sum40 = 0;\n    long sum41 = 0;\n    long sum42 = 0;\n\
    \    long sum43 = 0;\n    long sum44 = 0;\n    long sum45 = 0;\n    long sum46\
    \ = 0;\n    long sum47 = 0;\n    long sum48 = 0;\n    long sum49 = 0;\n    long\
    \ sum50 = 0;\n    long sum51 = 0;\n    long sum52 = 0;\n    long sum53 = 0;\n\
    \    long sum54 = 0;\n    long sum55 = 0;\n    long sum56 = 0;\n    long sum57\
    \ = 0;\n    long sum58 = 0;\n    long sum59 = 0;\n    long sum60 = 0;\n    long\
    \ sum61 = 0;\n    long sum62 = 0;\n    long sum63 = 0;\n    long sum64 = 0;\n\
    \    long sum65 = 0;\n    long sum66 = 0;\n    long sum67 = 0;\n    long sum68\
    \ = 0;\n    long sum69 = 0;\n    long sum70 = 0;\n    long sum71 = 0;\n    long\
    \ sum72 = 0;\n    long sum73 = 0;\n    long sum74 = 0;\n    long sum75 = 0;\n\
    \    long sum76 = 0;\n    long sum77 = 0;\n    long sum78 = 0;\n    long sum79\
    \ = 0;\n    long sum80 = 0;\n    \n}\nint main() {\n    auto candidate = tri;\n\
    \    assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  status: Exception
  stderr: 'tmpvrc93kwk: /tmp/tmpvrc93kwk.cpp:110: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102347
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res;\n    if(n == 0)\n    {\n        res.push_back(0);\n\
    \        res.push_back(1);\n    }\n    else if(n == 1)\n    {\n        res.push_back(3);\n\
    \    }\n    else if(n == 2)\n    {\n        res.push_back(3);\n        res.push_back(2);\n\
    \    }\n    else\n    {\n        long mid = n / 2;\n        res.push_back(tri(mid));\n\
    \        res.push_back(tri(mid + 1) + tri(mid + 2));\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpy1rj87y3.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmpy1rj87y3.cpp:37:31: error: no matching function for call\
    \ to \u2018std::vector<long int>::push_back(std::vector<long int>)\u2019\n   37\
    \ |         res.push_back(tri(mid));\n      |                               ^\n\
    In file included from /usr/include/c++/9/vector:67,\n                 from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpy1rj87y3.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = long int; _Alloc = std::allocator<long int>; std::vector<_Tp, _Alloc>::value_type\
    \ = long int]\u2019\n 1184 |       push_back(const value_type& __x)\n      | \
    \      ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1184:35: note:   no known\
    \ conversion for argument 1 from \u2018std::vector<long int>\u2019 to \u2018const\
    \ value_type&\u2019 {aka \u2018const long int&\u2019}\n 1184 |       push_back(const\
    \ value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n/usr/include/c++/9/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = long int; _Alloc = std::allocator<long int>;\
    \ std::vector<_Tp, _Alloc>::value_type = long int]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018std::vector<long int>\u2019\
    \ to \u2018std::vector<long int>::value_type&&\u2019 {aka \u2018long int&&\u2019\
    }\n 1200 |       push_back(value_type&& __x)\n      |                 ~~~~~~~~~~~~~^~~\n\
    /tmp/tmpy1rj87y3.cpp:38:36: error: no match for \u2018operator+\u2019 (operand\
    \ types are \u2018std::vector<long int>\u2019 and \u2018std::vector<long int>\u2019\
    )\n   38 |         res.push_back(tri(mid + 1) + tri(mid + 2));\n      |      \
    \                 "
  stdout: ''
  timestamp: 1660102347
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res;\n    if (n == 1)\n        res.push_back(n);\n\
    \    else if (n % 2 == 0)\n        res.push_back(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1));\n    else\n        res.push_back(tri(n - 1) + tri(n - 2) + tri(n + 1)\
    \ + tri(n - 3));\n    return res;\n}\nint main() {\n    auto candidate = tri;\n\
    \    assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvfhqdbjb.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmpvfhqdbjb.cpp:23:34: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018std::vector<long\
    \ int>\u2019)\n   23 |         res.push_back(tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1));\n      |                       ~~~~~~~~~~ ^ ~~~~~~~~~~\n      |       \
    \                   |            |\n      |                          |       \
    \     vector<[...]>\n      |                          vector<[...]>\nIn file included\
    \ from /usr/include/c++/9/bits/stl_algobase.h:67,\n                 from /usr/include/c++/9/bits/specfun.h:45,\n\
    \                 from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpvfhqdbjb.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:423:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpvfhqdbjb.cpp:23:45:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   23 |         res.push_back(tri(n - 1) + tri(n - 2) + tri(n + 1));\n     \
    \ |                                             ^\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpvfhqdbjb.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:1216:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::move_iterator<_IteratorL>\
    \ std::operator+(typename std::move_iterator<_IteratorL>::difference_type, const\
    \ std::move_iterator<_Itera"
  stdout: ''
  timestamp: 1660102347
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res;\n    if (n == 0) res.push_back(1);\n    else\
    \ if (n == 1) res.push_back(3);\n    else {\n        long a = 1;\n        long\
    \ b = 1;\n        long c = 1;\n        long d = 1;\n        long temp;\n     \
    \   long temp2;\n        long temp3;\n        long temp4;\n        long temp5;\n\
    \        long temp6;\n        long temp7;\n        long temp8;\n        long temp9;\n\
    \        long temp10;\n        long temp11;\n        long temp12;\n        long\
    \ temp13;\n        long temp14;\n        long temp15;\n        long temp16;\n\
    \        long temp17;\n        long temp18;\n        long temp19;\n        long\
    \ temp20;\n        long temp21;\n        long temp22;\n        long temp23;\n\
    \        long temp24;\n        long temp25;\n        long temp26;\n        long\
    \ temp27;\n        long temp28;\n        long temp29;\n        long temp30;\n\
    \        long temp31;\n        long temp32;\n        long temp33;\n        long\
    \ temp34;\n        long temp35;\n        long temp36;\n        long temp37;\n\
    \        long temp38;\n        long temp39;\n        long temp40;\n        long\
    \ temp41;\n        long temp42;\n        long temp43;\n        long temp44;\n\
    \        long temp45;\n        long temp46;\n        long temp47;\n        long\
    \ temp48;\n        long temp49;\n        long temp50;\n        long temp51;\n\
    \        long temp52;\n        long temp53;\n        long temp54;\n        long\
    \ temp55;\n        long temp56;\n        long temp57;\n        long temp58;\n\
    \        long temp59;\n        long temp60;\n        long temp61;\n        long\
    \ temp62;\n        long temp63;\n        long temp64;\n        long temp65;\n\
    \        long temp66;\n        long temp67;\n        long temp68;\n        long\
    \ temp69;\n        long temp70;\n        long temp71;\n        long temp72;\n\
    \        long temp73;\n        long temp74;\n        long temp75;\n        long\
    \ temp76;\n        long temp77;\n        long temp78;\n        long temp79;\n\
    \        long temp80;\n        long temp81;\n        long temp8\n}\nint main()\
    \ {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvs5s9p42.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmpvs5s9p42.cpp:109:1: error: expected initializer before\
    \ \u2018}\u2019 token\n  109 | }\n      | ^\n/tmp/tmpvs5s9p42.cpp:110:12: error:\
    \ a function-definition is not allowed here before \u2018{\u2019 token\n  110\
    \ | int main() {\n      |            ^\n/tmp/tmpvs5s9p42.cpp:122:1: error: expected\
    \ \u2018}\u2019 at end of input\n  122 | }\n      | ^\n/tmp/tmpvs5s9p42.cpp:18:31:\
    \ note: to match this \u2018{\u2019\n   18 | std::vector<long> tri(long n) {\n\
    \      |                               ^\n/tmp/tmpvs5s9p42.cpp:122:1: warning:\
    \ no return statement in function returning non-void [-Wreturn-type]\n  122 |\
    \ }\n      | ^\n"
  stdout: ''
  timestamp: 1660102346
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res;\n    if (n <= 1) {\n        res.push_back(n);\n\
    \        return res;\n    }\n    res.push_back(3);\n    if (n % 2 == 0) {\n  \
    \      res.push_back(tri(n - 1) + tri(n - 2) + tri(n + 1));\n    } else {\n  \
    \      res.push_back(tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3));\n   \
    \ }\n    return res;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpj83i6r81.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmpj83i6r81.cpp:26:34: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018std::vector<long\
    \ int>\u2019)\n   26 |         res.push_back(tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1));\n      |                       ~~~~~~~~~~ ^ ~~~~~~~~~~\n      |       \
    \                   |            |\n      |                          |       \
    \     vector<[...]>\n      |                          vector<[...]>\nIn file included\
    \ from /usr/include/c++/9/bits/stl_algobase.h:67,\n                 from /usr/include/c++/9/bits/specfun.h:45,\n\
    \                 from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpj83i6r81.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:423:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpj83i6r81.cpp:26:45:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   26 |         res.push_back(tri(n - 1) + tri(n - 2) + tri(n + 1));\n     \
    \ |                                             ^\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpj83i6r81.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:1216:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::move_iterator<_IteratorL>\
    \ std::operator+(typename std::move_iterator<_IteratorL>::difference_type, const\
    \ std::move_iterator<_Itera"
  stdout: ''
  timestamp: 1660102347
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    if (n == 1)\n        result.push_back(3);\n\
    \    else if (n % 2 == 0)\n        result.push_back(tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1));\n    else\n        result.push_back(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n - 3) + tri(n - 4));\n    return result;\n}\nint main() {\n    auto\
    \ candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1, 3, 2,\
    \ 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5esl055p.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmp5esl055p.cpp:23:37: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018std::vector<long\
    \ int>\u2019)\n   23 |         result.push_back(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1));\n      |                          ~~~~~~~~~~ ^ ~~~~~~~~~~\n      |  \
    \                           |            |\n      |                          \
    \   |            vector<[...]>\n      |                             vector<[...]>\n\
    In file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n           \
    \      from /usr/include/c++/9/bits/specfun.h:45,\n                 from /usr/include/c++/9/cmath:1927,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmp5esl055p.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:423:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmp5esl055p.cpp:23:48:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   23 |         result.push_back(tri(n - 1) + tri(n - 2) + tri(n + 1));\n  \
    \    |                                                ^\nIn file included from\
    \ /usr/include/c++/9/bits/stl_algobase.h:67,\n                 from /usr/include/c++/9/bits/specfun.h:45,\n\
    \                 from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmp5esl055p.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:1216:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::move_iterator<_IteratorL>\
    \ std::operator+(typename std::move_iterator<_IteratorL>::difference_type, const\
    \ std:"
  stdout: ''
  timestamp: 1660102341
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    long a = 1, b = 2, c = 3;\n    long\
    \ temp;\n    long sum = 0;\n    long count = 0;\n    long limit = (n + 1) / 2;\n\
    \    while(count < limit) {\n        temp = a + b + c;\n        sum += temp;\n\
    \        a = b;\n        b = c;\n        c = temp;\n        count++;\n    }\n\
    \    result.push_back(sum);\n    while(count < n) {\n        temp = a + b + c;\n\
    \        sum += temp;\n        a = b;\n        b = c;\n        c = temp;\n   \
    \     count++;\n        result.push_back(sum);\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  status: Exception
  stderr: 'tmpe49_490w: /tmp/tmpe49_490w.cpp:47: int main(): Assertion `candidate((3))
    == (std::vector<long>({1, 3, 2, 8}))'' failed.

    '
  stdout: ''
  timestamp: 1660102347
