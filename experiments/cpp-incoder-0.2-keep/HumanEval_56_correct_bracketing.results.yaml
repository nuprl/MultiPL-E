name: HumanEval_56_correct_bracketing
language: cpp
results:
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    bool result\
    \ = true;\n    for (auto c : brackets) {\n        if (c != '<' && c != '>') {\n\
    \            result = false;\n            break;\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpcu2ttu3k: /tmp/tmpcu2ttu3k.cpp:29: int main(): Assertion `candidate((\"\
    <<<><>>>>\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    size_t\
    \ open_brackets = 0;\n    size_t close_brackets = 0;\n    size_t brackets_size\
    \ = brackets.size();\n    for (size_t i = 0; i < brackets_size; i++) {\n     \
    \   if (brackets[i] == '<') {\n            open_brackets++;\n        } else if\
    \ (brackets[i] == '>') {\n            close_brackets++;\n        }\n    }\n  \
    \  if (open_brackets == close_brackets) {\n        return true;\n    } else {\n\
    \        return false;\n    }\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  stdout: ''
  stderr: "tmp55d5kjoo: /tmp/tmp55d5kjoo.cpp:37: int main(): Assertion `candidate((\"\
    ><<>\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    std::string\
    \ opening_brackets = brackets;\n    std::string closing_brackets;\n    size_t\
    \ opening_brackets_size = opening_brackets.size();\n    size_t closing_brackets_size\
    \ = 0;\n    for (size_t i = 0; i < opening_brackets_size; i++) {\n        if (opening_brackets[i]\
    \ == '<') {\n            closing_brackets += '<';\n            closing_brackets_size\
    \ += 1;\n        } else if (opening_brackets[i] == '>') {\n            closing_brackets\
    \ += '>';\n            closing_brackets_size += 1;\n        } else {\n       \
    \     closing_brackets += opening_brackets[i];\n            closing_brackets_size\
    \ += 1;\n        }\n    }\n    if (closing_brackets_size == opening_brackets_size)\
    \ {\n        return true;\n    } else {\n        return false;\n    }\n}\nint\
    \ main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpn28pvopd: /tmp/tmpn28pvopd.cpp:42: int main(): Assertion `candidate((\"\
    <<<><>>>>\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    bool result\
    \ = true;\n    for (size_t i = 0; i < brackets.size(); ++i) {\n        if (brackets[i]\
    \ == '<') {\n            if (brackets[i + 1] == '>') {\n                result\
    \ += true;\n            } else {\n                result = false;\n          \
    \  }\n        } else if (brackets[i] == '>') {\n            if (brackets[i + 1]\
    \ == '<') {\n                result += true;\n            } else {\n         \
    \       result = false;\n            }\n        } else {\n            result =\
    \ false;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"\
    <<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n\
    \    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"\
    <<<><>>>>\")) == (false));\n    assert(candidate((\"><<>\")) == (false));\n  \
    \  assert(candidate((\"<\")) == (false));\n    assert(candidate((\"<<<<\")) ==\
    \ (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpelpne5vi: /tmp/tmpelpne5vi.cpp:36: int main(): Assertion `candidate((\"\
    <>\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    // Your\
    \ code here\n    bool correct = false;\n    int opening_brackets = 0;\n    int\
    \ closing_brackets = 0;\n    for (int i = 0; i < brackets.length(); i++) {\n \
    \       if (brackets[i] == '<') {\n            opening_brackets++;\n        }\n\
    \        if (brackets[i] == '>') {\n            closing_brackets++;\n        }\n\
    \    }\n    if (opening_brackets == closing_brackets) {\n        correct = true;\n\
    \    }\n    return correct;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  stdout: ''
  stderr: "tmpynps66uq: /tmp/tmpynps66uq.cpp:38: int main(): Assertion `candidate((\"\
    ><<>\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    size_t\
    \ open_brackets = 0;\n    size_t close_brackets = 0;\n    size_t open_brackets_end\
    \ = 0;\n    size_t close_brackets_end = 0;\n    size_t i = 0;\n    size_t j =\
    \ 0;\n    bool result = false;\n    while(i < brackets.size()) {\n        if(brackets[i]\
    \ == '<') {\n            open_brackets++;\n            open_brackets_end = i;\n\
    \        }\n        else if(brackets[i] == '>') {\n            close_brackets++;\n\
    \            close_brackets_end = i;\n        }\n        i++;\n    }\n    if(open_brackets\
    \ == close_brackets) {\n        result = true;\n    }\n    else if((open_brackets\
    \ == open_brackets_end) && (close_brackets == close_brackets_end)) {\n       \
    \ result = true;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"\
    <<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n\
    \    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"\
    <<<><>>>>\")) == (false));\n    assert(candidate((\"><<>\")) == (false));\n  \
    \  assert(candidate((\"<\")) == (false));\n    assert(candidate((\"<<<<\")) ==\
    \ (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpt76uu7w2: /tmp/tmpt76uu7w2.cpp:47: int main(): Assertion `candidate((\"\
    ><<>\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    bool result\
    \ = true;\n    for (size_t i = 0; i < brackets.length(); i++) {\n        if (brackets[i]\
    \ != '<') {\n            result = false;\n            break;\n        }\n    }\n\
    \    for (size_t i = 0; i < brackets.length(); i++) {\n        if (brackets[i]\
    \ != '>') {\n            result = false;\n            break;\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  stdout: ''
  stderr: "tmpasomsnj7: /tmp/tmpasomsnj7.cpp:31: int main(): Assertion `candidate((\"\
    <>\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    int len\
    \ = brackets.size();\n    for (int i = 0; i < len; ++i) {\n        if (brackets[i]\
    \ == '<') {\n            if (brackets[i + 1] == '>') {\n                return\
    \ true;\n            }\n        }\n    }\n    return false;\n}\nint main() {\n\
    \    auto candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpbolivybp: /tmp/tmpbolivybp.cpp:30: int main(): Assertion `candidate((\"\
    <<<><>>>>\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    int opening_brackets\
    \ = 0;\n    int closing_brackets = 0;\n    for (int i = 0; i < brackets.length();\
    \ i++) {\n        if (brackets[i] == '<') {\n            opening_brackets++;\n\
    \        } else if (brackets[i] == '>') {\n            closing_brackets++;\n \
    \       }\n    }\n    return opening_brackets == closing_brackets;\n}\nint main()\
    \ {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"<>\"))\
    \ == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp7h3dhcds: /tmp/tmp7h3dhcds.cpp:32: int main(): Assertion `candidate((\"\
    ><<>\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    bool result\
    \ = true;\n    for (auto c : brackets) {\n        if (c == '<') {\n          \
    \  if (brackets[brackets.size() - 1] != '>') {\n                result = false;\n\
    \            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpeauahwqy: /tmp/tmpeauahwqy.cpp:30: int main(): Assertion `candidate((\"\
    <<<><>>>>\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    bool result\
    \ = true;\n    for (auto c : brackets) {\n        if (c == '<') {\n          \
    \  if (brackets[brackets.size() - 1] != '>') {\n                result = false;\n\
    \            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpz1iwh5z9: /tmp/tmpz1iwh5z9.cpp:30: int main(): Assertion `candidate((\"\
    <<<><>>>>\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    size_t\
    \ opening_brackets = brackets.size();\n    size_t closing_brackets = 0;\n    for\
    \ (size_t i = 0; i < brackets.size(); ++i) {\n        if (brackets[i] == '<')\
    \ {\n            ++opening_brackets;\n        } else if (brackets[i] == '>') {\n\
    \            ++closing_brackets;\n        } else {\n            return false;\n\
    \        }\n    }\n    return opening_brackets == closing_brackets;\n}\nint main()\
    \ {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"<>\"))\
    \ == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpy3a3woz1: /tmp/tmpy3a3woz1.cpp:29: int main(): Assertion `candidate((\"\
    <>\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    bool result\
    \ = true;\n    for (auto c : brackets) {\n        if (c != '<' && c != '>') {\n\
    \            result = false;\n            break;\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpl32qvw60: /tmp/tmpl32qvw60.cpp:29: int main(): Assertion `candidate((\"\
    <<<><>>>>\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    bool correct\
    \ = true;\n    for (auto c : brackets) {\n        if (c == '<') {\n          \
    \  correct = false;\n            break;\n        }\n    }\n    return correct;\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmphftj4xf2: /tmp/tmphftj4xf2.cpp:25: int main(): Assertion `candidate((\"\
    <>\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    size_t\
    \ brackets_size = brackets.size();\n    bool result = true;\n    for (size_t i\
    \ = 0; i < brackets_size; ++i) {\n        bool found = false;\n        for (size_t\
    \ j = 0; j < brackets_size; ++j) {\n            if (brackets[i] == brackets[j])\
    \ {\n                found = true;\n                break;\n            }\n  \
    \      }\n        if (!found) {\n            result = false;\n            break;\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  stdout: ''
  stderr: "tmpgg9twxuk: /tmp/tmpgg9twxuk.cpp:37: int main(): Assertion `candidate((\"\
    <<<><>>>>\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    size_t\
    \ brackets_size = brackets.size();\n    size_t open_brackets_size = 0;\n    size_t\
    \ close_brackets_size = 0;\n    for (size_t i = 0; i < brackets_size; ++i) {\n\
    \        if (brackets[i] == '<') {\n            open_brackets_size++;\n      \
    \  } else if (brackets[i] == '>') {\n            close_brackets_size++;\n    \
    \    }\n    }\n    if (open_brackets_size != close_brackets_size) {\n        return\
    \ false;\n    }\n    for (size_t i = 0; i < brackets_size; ++i) {\n        if\
    \ (brackets[i] == '<') {\n            if (open_brackets_size != close_brackets_size)\
    \ {\n                return false;\n            }\n        } else if (brackets[i]\
    \ == '>') {\n            if (open_brackets_size != close_brackets_size) {\n  \
    \              return false;\n            }\n        }\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpoqdq3fi7: /tmp/tmpoqdq3fi7.cpp:47: int main(): Assertion `candidate((\"\
    ><<>\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    // initialize\
    \ a stack\n    stack<char> brackets_stack;\n    // initialize a boolean to keep\
    \ track of whether brackets are balanced\n    bool brackets_balanced = true;\n\
    \    // initialize a boolean to keep track of whether brackets are open\n    bool\
    \ brackets_open = true;\n    // initialize a boolean to keep track of whether\
    \ brackets are closed\n    bool brackets_closed = true;\n    // initialize a boolean\
    \ to keep track of whether brackets are open\n    bool brackets_open = true;\n\
    \    // initialize a boolean to keep track of whether brackets are closed\n  \
    \  bool brackets_closed = true;\n    // initialize a boolean to keep track of\
    \ whether brackets are open\n    bool brackets_open = true;\n    // initialize\
    \ a boolean to keep track of whether brackets are closed\n    bool brackets_closed\
    \ = true;\n    // initialize a boolean to keep track of whether brackets are open\n\
    \    bool brackets_open = true;\n    // initialize a boolean to keep track of\
    \ whether brackets are closed\n    bool brackets_closed = true;\n    // initialize\
    \ a boolean to keep track of whether brackets are open\n    bool brackets_open\
    \ = true;\n    // initialize a boolean to keep track of whether brackets are closed\n\
    \    bool brackets_closed = true;\n    // initialize a boolean to keep track of\
    \ whether brackets are open\n    bool brackets_open = true;\n    // initialize\
    \ a boolean to keep track of whether brackets are closed\n    bool brackets_closed\
    \ = true;\n    // initialize a boolean to keep track of whether brackets are open\n\
    \    bool brackets_open = true;\n    // initialize a boolean to keep track of\
    \ whether brackets are closed\n    bool brackets_closed = true;\n    // initialize\
    \ a boolean to keep track of whether brackets are open\n    bool brackets_open\
    \ = true;\n    // initialize a boolean to keep track of whether brackets are closed\n\
    \    bool brackets_closed = true;\n    // initialize a boolean to keep track of\
    \ whether brackets are open\n    bool brackets_open = true;\n    // initialize\
    \ a boolean to keep track of whether brackets are closed\n    bool brackets_closed\
    \ = true;\n    // initialize a boolean to keep track of whether brackets are open\n\
    \    bool brackets_open = true;\n    // initialize a boolean to keep track of\
    \ whether brackets are closed\n    bool brackets_closed = true;\n    // initialize\
    \ a boolean to keep track of whether brackets are open\n    bool brackets_open\
    \ = true;\n    // initialize a boolean to keep track of whether brackets are closed\n\
    \    bool brackets_closed = true;\n    // initialize a boolean to keep track of\
    \ whether brackets are open\n    bool brackets_open = true;\n    // initialize\
    \ a boolean to keep track of whether brackets are closed\n    bool brackets_closed\
    \ = true;\n    // initialize a boolean to keep track of whether brackets are open\n\
    \    bool brackets_open = true;\n    // initialize a \n}\nint main() {\n    auto\
    \ candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpod62na_6.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmpod62na_6.cpp:15:5: error: \u2018stack\u2019 was not declared in this\
    \ scope; did you mean \u2018std::stack\u2019?\n   15 |     stack<char> brackets_stack;\n\
    \      |     ^~~~~\n      |     std::stack\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/stack:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:89,\n\
    \                 from /tmp/tmpod62na_6.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_stack.h:99:11:\
    \ note: \u2018std::stack\u2019 declared here\n   99 |     class stack\n      |\
    \           ^~~~~\n/tmp/tmpod62na_6.cpp:15:11: error: expected primary-expression\
    \ before \u2018char\u2019\n   15 |     stack<char> brackets_stack;\n      |  \
    \         ^~~~\n/tmp/tmpod62na_6.cpp:23:10: error: redeclaration of \u2018bool\
    \ brackets_open\u2019\n   23 |     bool brackets_open = true;\n      |       \
    \   ^~~~~~~~~~~~~\n/tmp/tmpod62na_6.cpp:19:10: note: \u2018bool brackets_open\u2019\
    \ previously declared here\n   19 |     bool brackets_open = true;\n      |  \
    \        ^~~~~~~~~~~~~\n/tmp/tmpod62na_6.cpp:25:10: error: redeclaration of \u2018\
    bool brackets_closed\u2019\n   25 |     bool brackets_closed = true;\n      |\
    \          ^~~~~~~~~~~~~~~\n/tmp/tmpod62na_6.cpp:21:10: note: \u2018bool brackets_closed\u2019\
    \ previously declared here\n   21 |     bool brackets_closed = true;\n      |\
    \          ^~~~~~~~~~~~~~~\n/tmp/tmpod62na_6.cpp:27:10: error: redeclaration of\
    \ \u2018bool brackets_open\u2019\n   27 |     bool brackets_open = true;\n   \
    \   |          ^~~~~~~~~~~~~\n/tmp/tmpod62na_6.cpp:19:10: note: \u2018bool brackets_open\u2019\
    \ previously declared here\n   19 |     bool brackets_open = true;\n      |  \
    \        ^~~~~~~~~~~~~\n/tmp/tmpod62na_6.cpp:29:10: error: redeclaration of \u2018\
    bool brackets_closed\u2019\n   29 |     bool brackets_closed = true;\n      |\
    \          ^~~~~~~~~~~~~~~\n/tmp/tmpod62na_6.cpp:21:10: note: \u2018bool brackets_closed\u2019\
    \ previously declared here\n   21 |     bool brackets_closed = true;\n      |\
    \          ^~~~~~~~~~~~~~~\n/tmp/tmpod62na_6.cpp:31:10: error: redeclaration of\
    \ \u2018bool"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    std::string\
    \ opening_brackets = brackets;\n    std::string closing_brackets;\n    std::string\
    \ opening_bracket;\n    std::string closing_bracket;\n    bool result = false;\n\
    \    for (size_t i = 0; i < opening_brackets.size(); i++) {\n        opening_bracket\
    \ = opening_brackets.substr(0, i);\n        closing_bracket = opening_brackets.substr(i\
    \ + 1, opening_brackets.size() - i);\n        if (opening_bracket == \"<\" &&\
    \ closing_bracket == \">\") {\n            result = true;\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  stdout: ''
  stderr: "tmpu5fghdti: /tmp/tmpu5fghdti.cpp:30: int main(): Assertion `candidate((\"\
    <>\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    std::string\
    \ opening_brackets = brackets;\n    std::string closing_brackets;\n    bool result\
    \ = false;\n    for(size_t i = 0; i < opening_brackets.size(); i++) {\n      \
    \  if(opening_brackets[i] == '<') {\n            closing_brackets += '<';\n  \
    \          result += true;\n        }\n        else if(opening_brackets[i] ==\
    \ '>') {\n            closing_brackets += '>';\n            result += true;\n\
    \        }\n        else {\n            result += false;\n        }\n    }\n \
    \   for(size_t i = 0; i < closing_brackets.size(); i++) {\n        if(closing_brackets[i]\
    \ == '<') {\n            result += true;\n        }\n        else if(closing_brackets[i]\
    \ == '>') {\n            result += true;\n        }\n        else {\n        \
    \    result += false;\n        }\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp55rmelf2: /tmp/tmp55rmelf2.cpp:49: int main(): Assertion `candidate((\"\
    <<<><>>>>\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    bool result\
    \ = true;\n    for (auto c : brackets) {\n        if (c == '<') {\n          \
    \  result &= (brackets.find('>') != brackets.npos);\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpd27u6ddm: /tmp/tmpd27u6ddm.cpp:28: int main(): Assertion `candidate((\"\
    <<<><>>>>\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    int open_brackets\
    \ = 0;\n    int close_brackets = 0;\n    for (int i = 0; i < brackets.length();\
    \ i++) {\n        if (brackets[i] == '<') {\n            open_brackets++;\n  \
    \      } else if (brackets[i] == '>') {\n            close_brackets++;\n     \
    \   }\n    }\n    return open_brackets == close_brackets;\n}\nint main() {\n \
    \   auto candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpdxb07ibe: /tmp/tmpdxb07ibe.cpp:32: int main(): Assertion `candidate((\"\
    ><<>\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    int open_brackets\
    \ = 0;\n    int close_brackets = 0;\n    for(int i = 0; i < brackets.length();\
    \ i++) {\n        if(brackets[i] == '<') {\n            open_brackets++;\n   \
    \     }\n        if(brackets[i] == '>') {\n            close_brackets++;\n   \
    \     }\n    }\n    return open_brackets == close_brackets;\n}\nint main() {\n\
    \    auto candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpnsr10g0e: /tmp/tmpnsr10g0e.cpp:33: int main(): Assertion `candidate((\"\
    ><<>\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    int open_brackets\
    \ = 0;\n    int close_brackets = 0;\n    for (int i = 0; i < brackets.size();\
    \ i++) {\n        if (brackets[i] == '<') {\n            open_brackets++;\n  \
    \      } else if (brackets[i] == '>') {\n            close_brackets++;\n     \
    \   }\n    }\n    return open_brackets == close_brackets;\n}\nint main() {\n \
    \   auto candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp6k56sp14: /tmp/tmp6k56sp14.cpp:32: int main(): Assertion `candidate((\"\
    ><<>\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    int open_brackets\
    \ = 0;\n    int close_brackets = 0;\n    for (int i = 0; i < brackets.length();\
    \ i++) {\n        if (brackets[i] == '<') {\n            open_brackets++;\n  \
    \      } else if (brackets[i] == '>') {\n            close_brackets++;\n     \
    \   }\n    }\n    return open_brackets == close_brackets;\n}\nint main() {\n \
    \   auto candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp96e31t11: /tmp/tmp96e31t11.cpp:32: int main(): Assertion `candidate((\"\
    ><<>\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    size_t\
    \ open_brackets = brackets.size();\n    size_t close_brackets = 0;\n    for (size_t\
    \ i = 0; i < brackets.size(); ++i) {\n        if (brackets[i] == '<') {\n    \
    \        ++open_brackets;\n        } else if (brackets[i] == '>') {\n        \
    \    ++close_brackets;\n        } else {\n            return false;\n        }\n\
    \    }\n    return open_brackets == close_brackets;\n}\nint main() {\n    auto\
    \ candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpqht_xt8s: /tmp/tmpqht_xt8s.cpp:29: int main(): Assertion `candidate((\"\
    <>\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    bool result\
    \ = true;\n    for (size_t i = 0; i < brackets.length(); ++i) {\n        if (brackets[i]\
    \ == '<') {\n            result &= (brackets[i + 1] == '>');\n            i +=\
    \ 2;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"\
    <<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n\
    \    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"\
    <<<><>>>>\")) == (false));\n    assert(candidate((\"><<>\")) == (false));\n  \
    \  assert(candidate((\"<\")) == (false));\n    assert(candidate((\"<<<<\")) ==\
    \ (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp__tn8z4p: /tmp/tmp__tn8z4p.cpp:26: int main(): Assertion `candidate((\"\
    <<><>>\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    size_t\
    \ open_brackets = 0;\n    size_t close_brackets = 0;\n    for (size_t i = 0; i\
    \ < brackets.size(); ++i) {\n        if (brackets[i] == '<') {\n            ++open_brackets;\n\
    \        } else if (brackets[i] == '>') {\n            ++close_brackets;\n   \
    \     } else {\n            return false;\n        }\n    }\n    return open_brackets\
    \ == close_brackets;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  stdout: ''
  stderr: "tmpqdrwuib_: /tmp/tmpqdrwuib_.cpp:34: int main(): Assertion `candidate((\"\
    ><<>\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    int open_brackets\
    \ = 0;\n    int close_brackets = 0;\n    for (int i = 0; i < brackets.size();\
    \ i++) {\n        if (brackets[i] == '<') {\n            open_brackets++;\n  \
    \      } else if (brackets[i] == '>') {\n            close_brackets++;\n     \
    \   }\n    }\n    return open_brackets == close_brackets;\n}\nint main() {\n \
    \   auto candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp31mu4gqs: /tmp/tmp31mu4gqs.cpp:32: int main(): Assertion `candidate((\"\
    ><<>\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    size_t\
    \ len = brackets.size();\n    bool result = true;\n    for(size_t i = 0; i < len;\
    \ ++i) {\n        char c = brackets[i];\n        if(c == '<') {\n            if(brackets[i+1]\
    \ == '>') {\n                ++i;\n            } else {\n                result\
    \ = false;\n                break;\n            }\n        } else if(c == '>')\
    \ {\n            if(brackets[i-1] == '<') {\n                --i;\n          \
    \  } else {\n                result = false;\n                break;\n       \
    \     }\n        } else {\n            result = false;\n            break;\n \
    \       }\n    }\n    return result;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  stdout: ''
  stderr: "tmpv0gd7ckb: /tmp/tmpv0gd7ckb.cpp:42: int main(): Assertion `candidate((\"\
    <<><>>\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    size_t\
    \ len = brackets.size();\n    bool result = true;\n    for (size_t i = 0; i <\
    \ len; ++i) {\n        if (brackets[i] == '<') {\n            if (brackets[i +\
    \ 1] != '>') {\n                result = false;\n                break;\n    \
    \        }\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"\
    <<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n\
    \    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"\
    <<<><>>>>\")) == (false));\n    assert(candidate((\"><<>\")) == (false));\n  \
    \  assert(candidate((\"<\")) == (false));\n    assert(candidate((\"<<<<\")) ==\
    \ (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpnpqy5wnb: /tmp/tmpnpqy5wnb.cpp:29: int main(): Assertion `candidate((\"\
    <<><>>\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    std::string\
    \ opening_brackets = \"<\";\n    std::string closing_brackets = \">\";\n    std::string\
    \ opening_brackets_reversed = \">\";\n    std::string closing_brackets_reversed\
    \ = \"<\";\n    std::string opening_brackets_reversed_2 = \">\";\n    std::string\
    \ closing_brackets_reversed_2 = \"<\";\n    std::string opening_brackets_reversed_3\
    \ = \"<\";\n    std::string closing_brackets_reversed_3 = \">\";\n    std::string\
    \ opening_brackets_reversed_4 = \"<\";\n    std::string closing_brackets_reversed_4\
    \ = \">\";\n    std::string opening_brackets_reversed_5 = \"<\";\n    std::string\
    \ closing_brackets_reversed_5 = \">\";\n    std::string opening_brackets_reversed_6\
    \ = \"<\";\n    std::string closing_brackets_reversed_6 = \">\";\n    std::string\
    \ opening_brackets_reversed_7 = \"<\";\n    std::string closing_brackets_reversed_7\
    \ = \">\";\n    std::string opening_brackets_reversed_8 = \"<\";\n    std::string\
    \ closing_brackets_reversed_8 = \">\";\n    std::string opening_brackets_reversed_9\
    \ = \"<\";\n    std::string closing_brackets_reversed_9 = \">\";\n    std::string\
    \ opening_brackets_reversed_10 = \"<\";\n    std::string closing_brackets_reversed_10\
    \ = \">\";\n    std::string opening_brackets_reversed_11 = \"<\";\n    std::string\
    \ closing_brackets_reversed_11 = \">\";\n    std::string opening_brackets_reversed_12\
    \ = \"<\";\n    std::string closing_brackets_reversed_12 = \">\";\n    std::string\
    \ opening_brackets_reversed_13 = \"<\";\n    std::string closing_brackets_reversed_13\
    \ = \">\";\n    std::string opening_brackets_reversed_14 = \"<\";\n    std::string\
    \ closing_brackets_reversed_14 = \">\";\n    std::string opening_brackets_reversed_15\
    \ = \"<\";\n    std::string closing_brackets_reversed_15 = \">\";\n    std::string\
    \ opening_brackets_reversed_16 = \"<\";\n    std::string closing_brackets_reversed_16\
    \ = \">\";\n    std::string opening_brackets_reversed_17 = \"<\";\n    std::string\
    \ closing_brackets_reversed_17 = \">\";\n    std::string opening_brackets_reversed_18\
    \ = \"\n}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0mrtlosq.cpp:50:48: warning: missing terminating \" character\n\
    \   50 |     std::string opening_brackets_reversed_18 = \"\n      |          \
    \                                      ^\n/tmp/tmp0mrtlosq.cpp:50:48: error: missing\
    \ terminating \" character\n/tmp/tmp0mrtlosq.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmp0mrtlosq.cpp:51:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   51 | }\n      | ^\n/tmp/tmp0mrtlosq.cpp:51:1: error: expected\
    \ \u2018,\u2019 or \u2018;\u2019 before \u2018}\u2019 token\n/tmp/tmp0mrtlosq.cpp:51:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    // Your\
    \ code here\n    bool result = true;\n    for(int i = 0; i < brackets.size() -\
    \ 1; i++) {\n        if(brackets[i] != brackets[i + 1]) {\n            result\
    \ = false;\n            break;\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"<>\"))\
    \ == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp6xlr3lfh: /tmp/tmp6xlr3lfh.cpp:26: int main(): Assertion `candidate((\"\
    <>\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    bool correct\
    \ = true;\n    for (size_t i = 0; i < brackets.length(); ++i) {\n        if (brackets[i]\
    \ != '<' && brackets[i] != '>') {\n            correct = false;\n            break;\n\
    \        }\n    }\n    return correct;\n}\nint main() {\n    auto candidate =\
    \ correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"\
    <<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n\
    \    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"\
    <<<><>>>>\")) == (false));\n    assert(candidate((\"><<>\")) == (false));\n  \
    \  assert(candidate((\"<\")) == (false));\n    assert(candidate((\"<<<<\")) ==\
    \ (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpueqa555w: /tmp/tmpueqa555w.cpp:29: int main(): Assertion `candidate((\"\
    <<<><>>>>\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    std::string\
    \ opening_brackets = \"<\";\n    std::string closing_brackets = \">\";\n    std::string\
    \ opening_closing_brackets = \"\";\n    std::string opening_closing_brackets_reverse\
    \ = \"\";\n    std::string opening_closing_brackets_reverse_reverse = \"\";\n\
    \    std::string opening_closing_brackets_reverse_reverse_2 = \"\";\n    std::string\
    \ opening_closing_brackets_reverse_reverse_3 = \"\";\n    std::string opening_closing_brackets_reverse_reverse_4\
    \ = \"\";\n    std::string opening_closing_brackets_reverse_reverse_5 = \"\";\n\
    \    std::string opening_closing_brackets_reverse_reverse_6 = \"\";\n    std::string\
    \ opening_closing_brackets_reverse_reverse_7 = \"\";\n    std::string opening_closing_brackets_reverse_reverse_8\
    \ = \"\";\n    std::string opening_closing_brackets_reverse_reverse_9 = \"\";\n\
    \    std::string opening_closing_brackets_reverse_reverse_10 = \"\";\n    std::string\
    \ opening_closing_brackets_reverse_reverse_11 = \"\";\n    std::string opening_closing_brackets_reverse_reverse_12\
    \ = \"\";\n    std::string opening_closing_brackets_reverse_reverse_13 = \"\"\
    ;\n    std::string opening_closing_brackets_reverse_reverse_14 = \"\";\n    std::string\
    \ opening_closing_brackets_reverse_reverse_15 = \"\";\n    std::string opening_closing_brackets_reverse_reverse_16\
    \ = \"\";\n    std::string opening_closing_brackets_reverse_reverse_17 = \"\"\
    ;\n    std::string opening_closing_brackets_reverse_reverse_18 = \"\";\n    std::string\
    \ opening_closing_brackets_reverse_reverse_19 = \"\";\n    std::string opening_closing_brackets_reverse_reverse_20\
    \ = \"\";\n    std::string opening_closing_brackets_reverse_reverse_21 = \"\"\
    ;\n    std::string opening_closing_brackets_reverse_reverse_22 = \"\";\n    std::string\
    \ opening_closing_brackets_reverse_reverse_23 = \"\";\n    std::string opening_closing_brackets_reverse_reverse_24\
    \ = \"\";\n    std::string opening_closing_brackets_reverse_reverse_25 = \"\"\
    ;\n    std::string opening_closing_brackets_reverse_reverse_26 = \"\";\n    std::string\
    \ opening_closing_brackets_reverse_reverse_27 = \"\";\n    std::string opening_closing_brackets_reverse_reverse_28\
    \ = \"\";\n    std::string opening_closing_brackets_reverse_reverse_29 = \"\"\
    ;\n    std::string opening_closing_brackets_reverse_reverse_30 = \"\";\n    std::string\
    \ opening_closing_brackets_reverse_reverse_31 = \"\";\n    std::string \n}\nint\
    \ main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpykk8lfwx.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmpykk8lfwx.cpp:50:1: error: expected unqualified-id before \u2018}\u2019\
    \ token\n   50 | }\n      | ^\n/tmp/tmpykk8lfwx.cpp:50:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    int open_brackets\
    \ = 0;\n    int close_brackets = 0;\n    for (int i = 0; i < brackets.length();\
    \ i++) {\n        if (brackets[i] == '<') {\n            open_brackets++;\n  \
    \      } else if (brackets[i] == '>') {\n            close_brackets++;\n     \
    \   }\n    }\n    return open_brackets == close_brackets;\n}\nint main() {\n \
    \   auto candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpls7cs8ef: /tmp/tmpls7cs8ef.cpp:32: int main(): Assertion `candidate((\"\
    ><<>\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    bool result\
    \ = true;\n    for (auto &c : brackets) {\n        if (c == '<') {\n         \
    \   if (brackets[brackets.size() - 1] != '>') {\n                result = false;\n\
    \            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp9iqsah4j: /tmp/tmp9iqsah4j.cpp:30: int main(): Assertion `candidate((\"\
    <<<><>>>>\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    int open_brackets\
    \ = 0;\n    int close_brackets = 0;\n    for (int i = 0; i < brackets.length();\
    \ i++) {\n        if (brackets[i] == '<') {\n            open_brackets++;\n  \
    \      } else if (brackets[i] == '>') {\n            close_brackets++;\n     \
    \   }\n    }\n    if (open_brackets != close_brackets) {\n        return false;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  stdout: ''
  stderr: "tmp3ibyzvuf: /tmp/tmp3ibyzvuf.cpp:35: int main(): Assertion `candidate((\"\
    ><<>\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    bool correct\
    \ = true;\n    for (auto c : brackets) {\n        if (c == '<') {\n          \
    \  correct = correct && false;\n        } else if (c == '>') {\n            correct\
    \ = correct && true;\n        } else {\n            correct = correct && false;\n\
    \        }\n    }\n    return correct;\n}\nint main() {\n    auto candidate =\
    \ correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"\
    <<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n\
    \    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"\
    <<<><>>>>\")) == (false));\n    assert(candidate((\"><<>\")) == (false));\n  \
    \  assert(candidate((\"<\")) == (false));\n    assert(candidate((\"<<<<\")) ==\
    \ (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp98arj71x: /tmp/tmp98arj71x.cpp:28: int main(): Assertion `candidate((\"\
    <>\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    bool result\
    \ = true;\n    for (auto c : brackets) {\n        if (c == '<') {\n          \
    \  if (brackets[brackets.size() - 1] != '>') {\n                result = false;\n\
    \            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp7dj1ifog: /tmp/tmp7dj1ifog.cpp:30: int main(): Assertion `candidate((\"\
    <<<><>>>>\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    size_t\
    \ open_brackets = 0;\n    size_t close_brackets = 0;\n    for (size_t i = 0; i\
    \ < brackets.size(); ++i) {\n        if (brackets[i] == '<') {\n            ++open_brackets;\n\
    \        } else if (brackets[i] == '>') {\n            ++close_brackets;\n   \
    \     }\n    }\n    return open_brackets == close_brackets;\n}\nint main() {\n\
    \    auto candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp8sn1v3md: /tmp/tmp8sn1v3md.cpp:32: int main(): Assertion `candidate((\"\
    ><<>\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    bool result\
    \ = true;\n    for (auto c : brackets) {\n        if (c != '<' && c != '>') {\n\
    \            result = false;\n            break;\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpzj3i4bbk: /tmp/tmpzj3i4bbk.cpp:29: int main(): Assertion `candidate((\"\
    <<<><>>>>\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    bool result\
    \ = true;\n    for (auto c : brackets) {\n        if (c == '<') {\n          \
    \  if (brackets[brackets.size() - 1] != '>') {\n                result = false;\n\
    \                break;\n            }\n        } else if (c == '>') {\n     \
    \       if (brackets[brackets.size() - 1] != '<') {\n                result =\
    \ false;\n                break;\n            }\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpidunriob: /tmp/tmpidunriob.cpp:32: int main(): Assertion `candidate((\"\
    <>\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    size_t\
    \ len = brackets.size();\n    bool result = true;\n    size_t i = 0;\n    while\
    \ (i < len) {\n        if (brackets[i] == '<') {\n            i++;\n         \
    \   if (i >= len) {\n                result = false;\n                break;\n\
    \            }\n            if (brackets[i] != '>') {\n                result\
    \ = false;\n                break;\n            }\n            i++;\n        }\
    \ else {\n            i++;\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"<>\"))\
    \ == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpaud46yvt: /tmp/tmpaud46yvt.cpp:38: int main(): Assertion `candidate((\"\
    <<><>>\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    bool result\
    \ = true;\n    for (size_t i = 0; i < brackets.length(); i++) {\n        if (brackets[i]\
    \ != '<') result = false;\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpjuqfyagd: /tmp/tmpjuqfyagd.cpp:22: int main(): Assertion `candidate((\"\
    <>\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    size_t\
    \ open_brackets = brackets.size();\n    size_t close_brackets = 0;\n    for (size_t\
    \ i = 0; i < brackets.size(); ++i) {\n        if (brackets[i] == '<') {\n    \
    \        ++open_brackets;\n        } else if (brackets[i] == '>') {\n        \
    \    ++close_brackets;\n        } else {\n            return false;\n        }\n\
    \    }\n    return open_brackets == close_brackets;\n}\nint main() {\n    auto\
    \ candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp6dlss5ju: /tmp/tmp6dlss5ju.cpp:29: int main(): Assertion `candidate((\"\
    <>\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    bool correct\
    \ = true;\n    for (auto c : brackets) {\n        if (c == '<') {\n          \
    \  if (brackets[brackets.size() - 1] != '>') {\n                correct = false;\n\
    \                break;\n            }\n        }\n    }\n    return correct;\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpn3fge976: /tmp/tmpn3fge976.cpp:31: int main(): Assertion `candidate((\"\
    <<<><>>>>\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    bool result\
    \ = true;\n    for (auto c : brackets) {\n        if (c == '<') {\n          \
    \  if (brackets[brackets.size() - 1] != '>') {\n                result = false;\n\
    \                break;\n            }\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpdwvdjp65: /tmp/tmpdwvdjp65.cpp:31: int main(): Assertion `candidate((\"\
    <<<><>>>>\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    size_t\
    \ brackets_size = brackets.size();\n    size_t opening_brackets_size = 0;\n  \
    \  size_t closing_brackets_size = 0;\n    for (size_t i = 0; i < brackets_size;\
    \ ++i) {\n        if (brackets[i] == '<') {\n            opening_brackets_size++;\n\
    \        } else if (brackets[i] == '>') {\n            closing_brackets_size++;\n\
    \        }\n    }\n    if (opening_brackets_size != closing_brackets_size) {\n\
    \        return false;\n    }\n    for (size_t i = 0; i < brackets_size; ++i)\
    \ {\n        if (brackets[i] == '<') {\n            if (opening_brackets_size\
    \ != closing_brackets_size) {\n                return false;\n            }\n\
    \        } else if (brackets[i] == '>') {\n            if (opening_brackets_size\
    \ != closing_brackets_size) {\n                return false;\n            }\n\
    \        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  stdout: ''
  stderr: "tmpbnajc8b2: /tmp/tmpbnajc8b2.cpp:47: int main(): Assertion `candidate((\"\
    ><<>\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    int len\
    \ = brackets.size();\n    for (int i = 0; i < len; ++i) {\n        if (brackets[i]\
    \ == '<') {\n            if (brackets[i - 1] == '>') {\n                return\
    \ true;\n            }\n        }\n    }\n    return false;\n}\nint main() {\n\
    \    auto candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmphays111i: /tmp/tmphays111i.cpp:26: int main(): Assertion `candidate((\"\
    <>\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    bool result\
    \ = true;\n    for (auto c : brackets) {\n        if (c == '<') {\n          \
    \  if (brackets[brackets.size() - 1] != '>') {\n                result = false;\n\
    \            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp3yxhfx0v: /tmp/tmp3yxhfx0v.cpp:30: int main(): Assertion `candidate((\"\
    <<<><>>>>\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    size_t\
    \ len = brackets.size();\n    bool result = true;\n    for (size_t i = 0; i <\
    \ len; ++i) {\n        char c = brackets[i];\n        if (c == '<') {\n      \
    \      if (i + 1 < len && brackets[i + 1] == '>') {\n                ++i;\n  \
    \          } else {\n                result = false;\n            }\n        }\
    \ else if (c == '>') {\n            if (i + 1 < len && brackets[i + 1] == '<')\
    \ {\n                ++i;\n            } else {\n                result = false;\n\
    \            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpaf9o6xb6: /tmp/tmpaf9o6xb6.cpp:37: int main(): Assertion `candidate((\"\
    <<><>>\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    int brackets_size\
    \ = brackets.size();\n    int opening_brackets_size = 0;\n    int closing_brackets_size\
    \ = 0;\n    for (int i = 0; i < brackets_size; ++i) {\n        if (brackets[i]\
    \ == '<') {\n            opening_brackets_size++;\n        } else if (brackets[i]\
    \ == '>') {\n            closing_brackets_size++;\n        }\n    }\n    if (opening_brackets_size\
    \ == closing_brackets_size) {\n        return true;\n    } else {\n        return\
    \ false;\n    }\n}\nint main() {\n    auto candidate = correct_bracketing;\n \
    \   assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"))\
    \ == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  stdout: ''
  stderr: "tmpa41191ev: /tmp/tmpa41191ev.cpp:37: int main(): Assertion `candidate((\"\
    ><<>\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    bool result\
    \ = true;\n    for (auto c : brackets) {\n        if (c == '<') {\n          \
    \  if (brackets[brackets.size() - 1] != '>') {\n                result = false;\n\
    \            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpn617i6xy: /tmp/tmpn617i6xy.cpp:30: int main(): Assertion `candidate((\"\
    <<<><>>>>\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    int len\
    \ = brackets.size();\n    for (int i = 0; i < len; ++i) {\n        if (brackets[i]\
    \ == '<') {\n            if (brackets[i + 1] == '>') {\n                return\
    \ true;\n            }\n        }\n    }\n    return false;\n}\nint main() {\n\
    \    auto candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpqujqfmft: /tmp/tmpqujqfmft.cpp:30: int main(): Assertion `candidate((\"\
    <<<><>>>>\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    size_t\
    \ open_brackets = 0;\n    size_t close_brackets = 0;\n    for (size_t i = 0; i\
    \ < brackets.size(); i++) {\n        if (brackets[i] == '<') {\n            open_brackets++;\n\
    \        } else if (brackets[i] == '>') {\n            close_brackets++;\n   \
    \     }\n    }\n    return open_brackets == close_brackets;\n}\nint main() {\n\
    \    auto candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpclebgha5: /tmp/tmpclebgha5.cpp:32: int main(): Assertion `candidate((\"\
    ><<>\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    size_t\
    \ open_brackets = 0;\n    size_t close_brackets = 0;\n    for (size_t i = 0; i\
    \ < brackets.size(); ++i) {\n        if (brackets[i] == '<') {\n            ++open_brackets;\n\
    \        } else if (brackets[i] == '>') {\n            ++close_brackets;\n   \
    \     } else {\n            return false;\n        }\n    }\n    return open_brackets\
    \ == close_brackets;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  stdout: ''
  stderr: "tmpvrhbmrei: /tmp/tmpvrhbmrei.cpp:34: int main(): Assertion `candidate((\"\
    ><<>\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    size_t\
    \ open_brackets = brackets.size();\n    size_t close_brackets = 0;\n    for (size_t\
    \ i = 0; i < brackets.size(); i++) {\n        if (brackets[i] == '<') {\n    \
    \        open_brackets--;\n        } else if (brackets[i] == '>') {\n        \
    \    close_brackets++;\n        }\n    }\n    return open_brackets == close_brackets;\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpukjr606n: /tmp/tmpukjr606n.cpp:31: int main(): Assertion `candidate((\"\
    <<<><>>>>\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    bool result\
    \ = true;\n    for (size_t i = 0; i < brackets.length(); i++) {\n        if (brackets[i]\
    \ != '<') {\n            result = false;\n            break;\n        }\n    }\n\
    \    for (size_t i = 0; i < brackets.length(); i++) {\n        if (brackets[i]\
    \ != '>') {\n            result = false;\n            break;\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  stdout: ''
  stderr: "tmplbk1y02e: /tmp/tmplbk1y02e.cpp:31: int main(): Assertion `candidate((\"\
    <>\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    std::string\
    \ opening_brackets = \"<\";\n    std::string closing_brackets = \">\";\n    std::string\
    \ opening_brackets_size = opening_brackets.size();\n    std::string closing_brackets_size\
    \ = closing_brackets.size();\n    std::string opening_brackets_string = \"\";\n\
    \    std::string closing_brackets_string = \"\";\n    std::string opening_brackets_string_reverse\
    \ = \"\";\n    std::string closing_brackets_string_reverse = \"\";\n    std::string\
    \ opening_brackets_string_reverse_2 = \"\";\n    std::string closing_brackets_string_reverse_2\
    \ = \"\";\n    std::string opening_brackets_string_reverse_3 = \"\";\n    std::string\
    \ closing_brackets_string_reverse_3 = \"\";\n    std::string opening_brackets_string_reverse_4\
    \ = \"\";\n    std::string closing_brackets_string_reverse_4 = \"\";\n    std::string\
    \ opening_brackets_string_reverse_5 = \"\";\n    std::string closing_brackets_string_reverse_5\
    \ = \"\";\n    std::string opening_brackets_string_reverse_6 = \"\";\n    std::string\
    \ closing_brackets_string_reverse_6 = \"\";\n    std::string opening_brackets_string_reverse_7\
    \ = \"\";\n    std::string closing_brackets_string_reverse_7 = \"\";\n    std::string\
    \ opening_brackets_string_reverse_8 = \"\";\n    std::string closing_brackets_string_reverse_8\
    \ = \"\";\n    std::string opening_brackets_string_reverse_9 = \"\";\n    std::string\
    \ closing_brackets_string_reverse_9 = \"\";\n    std::string opening_brackets_string_reverse_10\
    \ = \"\";\n    std::string closing_brackets_string_reverse_10 = \"\";\n    std::string\
    \ opening_brackets_string_reverse_11 = \"\";\n    std::string closing_brackets_string_reverse_11\
    \ = \"\";\n    std::string opening_brackets_string_reverse_12 = \"\";\n    std::string\
    \ closing_brackets_string_reverse_12 = \"\";\n    std::string opening_brackets_string_reverse_13\
    \ = \"\";\n    std::string closing_brackets_string_reverse_13 = \"\";\n    std::string\
    \ opening_brackets_string_reverse_14 = \"\";\n    std::string closing_brackets_string_reverse_14\
    \ = \"\";\n    std::string opening_brackets_string_reverse_15 = \"\";\n    std::string\
    \ closing_brackets_string_reverse_15 = \"\";\n    std::string opening_brackets_string_reverse_16\
    \ = \"\";\n    std::string closing_brackets_string_reverse_16 = \"\";\n    std::string\
    \ opening_brackets_\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpe1wavhze.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmpe1wavhze.cpp:16:62: error: conversion from \u2018std::__cxx11::basic_string<char>::size_type\u2019\
    \ {aka \u2018long unsigned int\u2019} to non-scalar type \u2018std::string\u2019\
    \ {aka \u2018std::__cxx11::basic_string<char>\u2019} requested\n   16 |     std::string\
    \ opening_brackets_size = opening_brackets.size();\n      |                  \
    \                       ~~~~~~~~~~~~~~~~~~~~~^~\n/tmp/tmpe1wavhze.cpp:17:62: error:\
    \ conversion from \u2018std::__cxx11::basic_string<char>::size_type\u2019 {aka\
    \ \u2018long unsigned int\u2019} to non-scalar type \u2018std::string\u2019 {aka\
    \ \u2018std::__cxx11::basic_string<char>\u2019} requested\n   17 |     std::string\
    \ closing_brackets_size = closing_brackets.size();\n      |                  \
    \                       ~~~~~~~~~~~~~~~~~~~~~^~\n/tmp/tmpe1wavhze.cpp:53:1: error:\
    \ expected initializer before \u2018}\u2019 token\n   53 | }\n      | ^\n/tmp/tmpe1wavhze.cpp:53:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    size_t\
    \ open_brackets = 0;\n    size_t close_brackets = 0;\n    for (size_t i = 0; i\
    \ < brackets.size(); ++i) {\n        if (brackets[i] == '<') {\n            ++open_brackets;\n\
    \        } else if (brackets[i] == '>') {\n            ++close_brackets;\n   \
    \     } else {\n            return false;\n        }\n    }\n    return open_brackets\
    \ == close_brackets;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  stdout: ''
  stderr: "tmpifdhcjjs: /tmp/tmpifdhcjjs.cpp:34: int main(): Assertion `candidate((\"\
    ><<>\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    int open_brackets\
    \ = 0;\n    int close_brackets = 0;\n    for (int i = 0; i < brackets.length();\
    \ i++) {\n        if (brackets[i] == '<') {\n            open_brackets++;\n  \
    \      } else if (brackets[i] == '>') {\n            close_brackets++;\n     \
    \   }\n    }\n    return open_brackets == close_brackets;\n}\nint main() {\n \
    \   auto candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpahdnhgkx: /tmp/tmpahdnhgkx.cpp:32: int main(): Assertion `candidate((\"\
    ><<>\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    bool correct\
    \ = true;\n    for (auto c : brackets) {\n        if (c == '<') {\n          \
    \  if (brackets[brackets.size() - 1] != '>') {\n                correct = false;\n\
    \                break;\n            }\n        }\n    }\n    return correct;\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp6rs8b4ew: /tmp/tmp6rs8b4ew.cpp:31: int main(): Assertion `candidate((\"\
    <<<><>>>>\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    size_t\
    \ open_brackets = brackets.size();\n    size_t close_brackets = 0;\n    for (size_t\
    \ i = 0; i < brackets.size(); i++) {\n        if (brackets[i] == '<') {\n    \
    \        open_brackets--;\n        } else if (brackets[i] == '>') {\n        \
    \    close_brackets++;\n        }\n    }\n    return open_brackets == close_brackets;\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpkhvnezmr: /tmp/tmpkhvnezmr.cpp:31: int main(): Assertion `candidate((\"\
    <<<><>>>>\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    int open_brackets\
    \ = 0;\n    int close_brackets = 0;\n    for (int i = 0; i < brackets.length();\
    \ i++) {\n        if (brackets[i] == '<') {\n            open_brackets++;\n  \
    \      } else if (brackets[i] == '>') {\n            close_brackets++;\n     \
    \   }\n    }\n    return open_brackets == close_brackets;\n}\nint main() {\n \
    \   auto candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp4ja0w5pc: /tmp/tmp4ja0w5pc.cpp:32: int main(): Assertion `candidate((\"\
    ><<>\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    bool result\
    \ = true;\n    for (auto c : brackets) {\n        if (c != \">\" && c != \"<\"\
    \ && c != \">>\" && c != \"<<\") {\n            result = false;\n        }\n \
    \   }\n    return result;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmptoclpmo5.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmptoclpmo5.cpp:16:18: error: ISO C++ forbids comparison between pointer\
    \ and integer [-fpermissive]\n   16 |         if (c != \">\" && c != \"<\" &&\
    \ c != \">>\" && c != \"<<\") {\n      |                  ^~~\n/tmp/tmptoclpmo5.cpp:16:30:\
    \ error: ISO C++ forbids comparison between pointer and integer [-fpermissive]\n\
    \   16 |         if (c != \">\" && c != \"<\" && c != \">>\" && c != \"<<\") {\n\
    \      |                              ^~~\n/tmp/tmptoclpmo5.cpp:16:42: error:\
    \ ISO C++ forbids comparison between pointer and integer [-fpermissive]\n   16\
    \ |         if (c != \">\" && c != \"<\" && c != \">>\" && c != \"<<\") {\n  \
    \    |                                          ^~~~\n/tmp/tmptoclpmo5.cpp:16:55:\
    \ error: ISO C++ forbids comparison between pointer and integer [-fpermissive]\n\
    \   16 |         if (c != \">\" && c != \"<\" && c != \">>\" && c != \"<<\") {\n\
    \      |                                                       ^~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    size_t\
    \ open_brackets = 0;\n    size_t close_brackets = 0;\n    size_t i = 0;\n    size_t\
    \ j = 0;\n    while (brackets[i] != '\\0') {\n        if (brackets[i] == '<')\
    \ {\n            open_brackets++;\n        } else if (brackets[i] == '>') {\n\
    \            close_brackets++;\n        }\n        i++;\n    }\n    if (open_brackets\
    \ == close_brackets) {\n        return true;\n    }\n    return false;\n}\nint\
    \ main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmplhfco3te: /tmp/tmplhfco3te.cpp:38: int main(): Assertion `candidate((\"\
    ><<>\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    size_t\
    \ open_brackets = 0;\n    size_t close_brackets = 0;\n    size_t open_brackets_size\
    \ = brackets.size();\n    size_t close_brackets_size = brackets.size();\n    size_t\
    \ i = 0;\n    while (i < open_brackets_size) {\n        if (brackets[i] == '<')\
    \ {\n            open_brackets++;\n        }\n        if (brackets[i] == '>')\
    \ {\n            close_brackets++;\n        }\n        i++;\n    }\n    if (open_brackets\
    \ == close_brackets) {\n        return true;\n    }\n    return false;\n}\nint\
    \ main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp6_9dddsc: /tmp/tmp6_9dddsc.cpp:40: int main(): Assertion `candidate((\"\
    ><<>\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    size_t\
    \ brackets_size = brackets.size();\n    bool result = true;\n    for (size_t i\
    \ = 0; i < brackets_size; i++) {\n        if (brackets[i] != '<') {\n        \
    \    result = false;\n            break;\n        }\n    }\n    for (size_t i\
    \ = 0; i < brackets_size; i++) {\n        if (brackets[i] != '>') {\n        \
    \    result = false;\n            break;\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp24uzpyr_: /tmp/tmp24uzpyr_.cpp:32: int main(): Assertion `candidate((\"\
    <>\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    bool result\
    \ = true;\n    for (auto c : brackets) {\n        if (c == '<') {\n          \
    \  result &= (brackets[brackets.size() - 1] == '>');\n        } else {\n     \
    \       result &= (brackets[brackets.size() - 1] == '<');\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  stdout: ''
  stderr: "tmpmr2054id: /tmp/tmpmr2054id.cpp:26: int main(): Assertion `candidate((\"\
    <>\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    bool result\
    \ = true;\n    for (auto c : brackets) {\n        if (c == '<') {\n          \
    \  if (brackets[brackets.size() - 1] != '>') {\n                result = false;\n\
    \            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmplf4g6uf5: /tmp/tmplf4g6uf5.cpp:30: int main(): Assertion `candidate((\"\
    <<<><>>>>\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    bool result\
    \ = true;\n    size_t brackets_size = brackets.size();\n    for (size_t i = 0;\
    \ i < brackets_size; i++) {\n        char c = brackets[i];\n        if (c == '<')\
    \ {\n            if (brackets[i - 1] == '<') {\n                result = false;\n\
    \                break;\n            }\n        } else if (c == '>') {\n     \
    \       if (brackets[i - 1] == '>') {\n                result = false;\n     \
    \           break;\n            }\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmparab4mzz: /tmp/tmparab4mzz.cpp:35: int main(): Assertion `candidate((\"\
    <<><>>\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    bool result\
    \ = true;\n    for (auto c : brackets) {\n        if (c != '<' && c != '>') {\n\
    \            result = false;\n            break;\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpjbxgt1rh: /tmp/tmpjbxgt1rh.cpp:29: int main(): Assertion `candidate((\"\
    <<<><>>>>\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    // Your\
    \ code here\n    bool flag = false;\n    for (int i = 0; i < brackets.size();\
    \ i++) {\n        if (brackets[i] == '<') {\n            if (brackets[i + 1] ==\
    \ '>') {\n                flag = true;\n            }\n        }\n    }\n    return\
    \ flag;\n}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpnov7ojrp: /tmp/tmpnov7ojrp.cpp:31: int main(): Assertion `candidate((\"\
    <<<><>>>>\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    bool result\
    \ = true;\n    for (size_t i = 0; i < brackets.length(); i++) {\n        if (brackets[i]\
    \ != '<' && brackets[i] != '>') {\n            result = false;\n            break;\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  stdout: ''
  stderr: "tmpawwjneen: /tmp/tmpawwjneen.cpp:29: int main(): Assertion `candidate((\"\
    <<<><>>>>\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    size_t\
    \ brackets_size = brackets.size();\n    size_t open_brackets_size = 0;\n    for\
    \ (size_t i = 0; i < brackets_size; ++i) {\n        if (brackets[i] == '<') {\n\
    \            open_brackets_size++;\n        }\n    }\n    if (open_brackets_size\
    \ != brackets_size) {\n        return false;\n    }\n    size_t close_brackets_size\
    \ = 0;\n    for (size_t i = 0; i < brackets_size; ++i) {\n        if (brackets[i]\
    \ == '>') {\n            close_brackets_size++;\n        }\n    }\n    if (close_brackets_size\
    \ != brackets_size) {\n        return false;\n    }\n    size_t open_brackets_index\
    \ = 0;\n    size_t close_brackets_index = 0;\n    for (size_t i = 0; i < brackets_size;\
    \ ++i) {\n        if (brackets[i] == '<') {\n            open_brackets_index++;\n\
    \        }\n        if (brackets[i] == '>') {\n            close_brackets_index++;\n\
    \        }\n    }\n    if (open_brackets_index != close_brackets_index) {\n  \
    \      return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"\
    <<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n\
    \    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"\
    <<<><>>>>\")) == (false));\n    assert(candidate((\"><<>\")) == (false));\n  \
    \  assert(candidate((\"<\")) == (false));\n    assert(candidate((\"<<<<\")) ==\
    \ (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpdtgbgjq7: /tmp/tmpdtgbgjq7.cpp:50: int main(): Assertion `candidate((\"\
    <>\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    bool result\
    \ = true;\n    size_t open_brackets = 0;\n    size_t close_brackets = 0;\n   \
    \ size_t open_brackets_index = 0;\n    size_t close_brackets_index = 0;\n    for\
    \ (size_t i = 0; i < brackets.size(); i++) {\n        if (brackets[i] == '<')\
    \ {\n            open_brackets++;\n            open_brackets_index = i;\n    \
    \    } else if (brackets[i] == '>') {\n            close_brackets++;\n       \
    \     close_brackets_index = i;\n        }\n    }\n    if (open_brackets == close_brackets)\
    \ {\n        if (open_brackets_index == close_brackets_index) {\n            if\
    \ (open_brackets_index == brackets.size() - 1) {\n                result = false;\n\
    \            } else {\n                open_brackets_index++;\n              \
    \  close_brackets_index++;\n            }\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpu_yjnqxq: /tmp/tmpu_yjnqxq.cpp:46: int main(): Assertion `candidate((\"\
    <<<><>>>>\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    bool result\
    \ = true;\n    for (auto c : brackets) {\n        if (c == '<') {\n          \
    \  if (brackets[brackets.size() - 1] != '>') {\n                result = false;\n\
    \            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp94rxq17l: /tmp/tmp94rxq17l.cpp:30: int main(): Assertion `candidate((\"\
    <<<><>>>>\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    int len\
    \ = brackets.size();\n    for (int i = 0; i < len; ++i) {\n        if (brackets[i]\
    \ == '<') {\n            if (brackets[i - 1] == '>') {\n                return\
    \ true;\n            }\n        }\n    }\n    return false;\n}\nint main() {\n\
    \    auto candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpxrzupsmb: /tmp/tmpxrzupsmb.cpp:26: int main(): Assertion `candidate((\"\
    <>\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    size_t\
    \ brackets_size = brackets.size();\n    size_t open_brackets_size = 0;\n    size_t\
    \ close_brackets_size = 0;\n    for (size_t i = 0; i < brackets_size; i++) {\n\
    \        if (brackets[i] == '<') {\n            open_brackets_size++;\n      \
    \  } else if (brackets[i] == '>') {\n            close_brackets_size++;\n    \
    \    }\n    }\n    if (open_brackets_size == close_brackets_size) {\n        return\
    \ true;\n    } else {\n        return false;\n    }\n}\nint main() {\n    auto\
    \ candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmppf0_f91m: /tmp/tmppf0_f91m.cpp:37: int main(): Assertion `candidate((\"\
    ><<>\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    bool result\
    \ = true;\n    for (auto c : brackets) {\n        if (c != \">\" && c != \"<\"\
    ) {\n            result = false;\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfehgy8pm.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmpfehgy8pm.cpp:16:18: error: ISO C++ forbids comparison between pointer\
    \ and integer [-fpermissive]\n   16 |         if (c != \">\" && c != \"<\") {\n\
    \      |                  ^~~\n/tmp/tmpfehgy8pm.cpp:16:30: error: ISO C++ forbids\
    \ comparison between pointer and integer [-fpermissive]\n   16 |         if (c\
    \ != \">\" && c != \"<\") {\n      |                              ^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    bool result\
    \ = true;\n    for (auto c : brackets) {\n        if (c != \">\" && c != \"<\"\
    \ && c != \"<\" && c != \">\") {\n            result = false;\n            break;\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpqe34edl8.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmpqe34edl8.cpp:16:18: error: ISO C++ forbids comparison between pointer\
    \ and integer [-fpermissive]\n   16 |         if (c != \">\" && c != \"<\" &&\
    \ c != \"<\" && c != \">\") {\n      |                  ^~~\n/tmp/tmpqe34edl8.cpp:16:30:\
    \ error: ISO C++ forbids comparison between pointer and integer [-fpermissive]\n\
    \   16 |         if (c != \">\" && c != \"<\" && c != \"<\" && c != \">\") {\n\
    \      |                              ^~~\n/tmp/tmpqe34edl8.cpp:16:42: error:\
    \ ISO C++ forbids comparison between pointer and integer [-fpermissive]\n   16\
    \ |         if (c != \">\" && c != \"<\" && c != \"<\" && c != \">\") {\n    \
    \  |                                          ^~~\n/tmp/tmpqe34edl8.cpp:16:54:\
    \ error: ISO C++ forbids comparison between pointer and integer [-fpermissive]\n\
    \   16 |         if (c != \">\" && c != \"<\" && c != \"<\" && c != \">\") {\n\
    \      |                                                      ^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    int open_brackets\
    \ = 0;\n    int close_brackets = 0;\n    for (int i = 0; i < brackets.length();\
    \ i++) {\n        if (brackets[i] == '<') {\n            open_brackets++;\n  \
    \      } else if (brackets[i] == '>') {\n            close_brackets++;\n     \
    \   }\n    }\n    return open_brackets == close_brackets;\n}\nint main() {\n \
    \   auto candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpvbnr997m: /tmp/tmpvbnr997m.cpp:32: int main(): Assertion `candidate((\"\
    ><<>\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    bool result\
    \ = true;\n    for (size_t i = 0; i < brackets.length(); ++i) {\n        if (brackets[i]\
    \ == '<') {\n            if (brackets[i + 1] == '>') {\n                ++i;\n\
    \            } else {\n                result = false;\n                break;\n\
    \            }\n        } else if (brackets[i] == '>') {\n            if (brackets[i\
    \ + 1] == '<') {\n                ++i;\n            } else {\n               \
    \ result = false;\n                break;\n            }\n        }\n    }\n \
    \   return result;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  stdout: ''
  stderr: "tmpe98xxb78: /tmp/tmpe98xxb78.cpp:37: int main(): Assertion `candidate((\"\
    <<><>>\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    bool result\
    \ = true;\n    for (size_t i = 0; i < brackets.length(); ++i) {\n        if (brackets[i]\
    \ == '<') {\n            if (brackets[i + 1] == '>') {\n                result\
    \ = true;\n            } else {\n                result = false;\n           \
    \ }\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"\
    <<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n\
    \    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"\
    <<<><>>>>\")) == (false));\n    assert(candidate((\"><<>\")) == (false));\n  \
    \  assert(candidate((\"<\")) == (false));\n    assert(candidate((\"<<<<\")) ==\
    \ (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpkp86aabn: /tmp/tmpkp86aabn.cpp:32: int main(): Assertion `candidate((\"\
    <<<><>>>>\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    std::string\
    \ opening_brackets, closing_brackets;\n    size_t opening_brackets_size = brackets.size();\n\
    \    size_t closing_brackets_size = brackets.size();\n    bool result = false;\n\
    \    for (size_t i = 0; i < opening_brackets_size; i++) {\n        opening_brackets[i]\
    \ = brackets[i];\n    }\n    for (size_t i = 0; i < closing_brackets_size; i++)\
    \ {\n        closing_brackets[i] = brackets[i];\n    }\n    for (size_t i = 0;\
    \ i < opening_brackets_size; i++) {\n        if (closing_brackets[i] == '>') {\n\
    \            closing_brackets[i] = '<';\n            opening_brackets_size--;\n\
    \        }\n        if (closing_brackets[i] == '<') {\n            closing_brackets[i]\
    \ = '>';\n            opening_brackets_size--;\n        }\n    }\n    for (size_t\
    \ i = 0; i < closing_brackets_size; i++) {\n        if (opening_brackets[i] ==\
    \ '<') {\n            opening_brackets[i] = '>';\n            closing_brackets_size--;\n\
    \        }\n        if (opening_brackets[i] == '>') {\n            opening_brackets[i]\
    \ = '<';\n            closing_brackets_size--;\n        }\n    }\n    if (opening_brackets_size\
    \ == 0 && closing_brackets_size == 0) {\n        result = true;\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp7xj8c5hm: /tmp/tmp7xj8c5hm.cpp:51: int main(): Assertion `candidate((\"\
    <>\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    // Your\
    \ code here\n    bool result = true;\n    for (size_t i = 0; i < brackets.size();\
    \ i++) {\n        if (brackets[i] != '<') {\n            result = false;\n   \
    \         break;\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpc0j5_z9_: /tmp/tmpc0j5_z9_.cpp:26: int main(): Assertion `candidate((\"\
    <>\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    size_t\
    \ brackets_size = brackets.size();\n    bool result = true;\n    size_t open_brackets\
    \ = 0;\n    for (size_t i = 0; i < brackets_size; ++i) {\n        char c = brackets[i];\n\
    \        if (c == '<') {\n            ++open_brackets;\n        } else if (c ==\
    \ '>') {\n            --open_brackets;\n        } else {\n            result =\
    \ false;\n            break;\n        }\n    }\n    return result && open_brackets\
    \ == 0;\n}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpykg65j5b: /tmp/tmpykg65j5b.cpp:37: int main(): Assertion `candidate((\"\
    ><<>\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    int open_brackets\
    \ = 0;\n    int close_brackets = 0;\n    for (int i = 0; i < brackets.size();\
    \ ++i) {\n        if (brackets[i] == '<') {\n            ++open_brackets;\n  \
    \      } else if (brackets[i] == '>') {\n            ++close_brackets;\n     \
    \   }\n    }\n    return open_brackets == close_brackets;\n}\nint main() {\n \
    \   auto candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp1q6y2clq: /tmp/tmp1q6y2clq.cpp:32: int main(): Assertion `candidate((\"\
    ><<>\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    std::string\
    \ opening_brackets = \"<\";\n    std::string closing_brackets = \">\";\n    std::string\
    \ opening_brackets_reversed = \">\";\n    std::string closing_brackets_reversed\
    \ = \"<\";\n    std::string opening_brackets_reversed_2 = \">>\";\n    std::string\
    \ closing_brackets_reversed_2 = \"<<\";\n    std::string opening_brackets_reversed_3\
    \ = \"<<<\";\n    std::string closing_brackets_reversed_3 = \"<<<\";\n    std::string\
    \ opening_brackets_reversed_4 = \"<<<>>\";\n    std::string closing_brackets_reversed_4\
    \ = \"<<<>>\";\n    std::string opening_brackets_reversed_5 = \"<<<>>>>>\";\n\
    \    std::string closing_brackets_reversed_5 = \"<<<>>>>>\";\n    std::string\
    \ opening_brackets_reversed_6 = \"<<<>>>>>\";\n    std::string closing_brackets_reversed_6\
    \ = \"<<<>>>>>\";\n    std::string opening_brackets_reversed_7 = \"<<<>>>>>\"\
    ;\n    std::string closing_brackets_reversed_7 = \"<<<>>>>>\";\n    std::string\
    \ opening_brackets_reversed_8 = \"<<<>>>>>\";\n    std::string closing_brackets_reversed_8\
    \ = \"<<<>>>>>\";\n    std::string opening_brackets_reversed_9 = \"<<<>>>>>\"\
    ;\n    std::string closing_brackets_reversed_9 = \"<<<>>>>>\";\n    std::string\
    \ opening_brackets_reversed_10 = \"<<<>>>>>\";\n    std::string closing_brackets_reversed_10\
    \ = \"<<<>>>>>\";\n    std::string opening_brackets_reversed_11 = \"<<<>>>>>\"\
    ;\n    std::string closing_brackets_reversed_11 = \"<<<>>>>>\";\n    std::string\
    \ opening_brackets_reversed_12 = \"<<<>>>>>\";\n    std::string closing_brackets_reversed_12\
    \ = \"<<<>>>>>\";\n    std::string opening_brackets_reversed_13 = \"<<<>>>>>\"\
    ;\n    std::string closing_brackets_reversed_13 = \"<<<>>>>>\";\n    std::string\
    \ opening_brackets_reversed_14 = \"<<<>>>>>\";\n    std::string closing_brackets_reversed_14\
    \ = \"<<<>>>>>\";\n    std::string opening_brackets_reversed_15 = \"<<<>>>>>\"\
    ;\n    std::string closing_b\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdjscp4ab.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmpdjscp4ab.cpp:46:1: error: expected initializer before \u2018}\u2019\
    \ token\n   46 | }\n      | ^\n/tmp/tmpdjscp4ab.cpp:46:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    size_t\
    \ open_brackets = brackets.size();\n    size_t close_brackets = 0;\n    for (size_t\
    \ i = 0; i < brackets.size(); ++i) {\n        if (brackets[i] == '<') {\n    \
    \        ++open_brackets;\n        } else if (brackets[i] == '>') {\n        \
    \    ++close_brackets;\n        } else {\n            return false;\n        }\n\
    \    }\n    return open_brackets == close_brackets;\n}\nint main() {\n    auto\
    \ candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp_kj_t9mi: /tmp/tmp_kj_t9mi.cpp:29: int main(): Assertion `candidate((\"\
    <>\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    bool result\
    \ = true;\n    for (size_t i = 0; i < brackets.size(); i++) {\n        if (brackets[i]\
    \ != '<') result = false;\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp7hbanxry: /tmp/tmp7hbanxry.cpp:22: int main(): Assertion `candidate((\"\
    <>\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    size_t\
    \ open_brackets = brackets.size();\n    size_t close_brackets = 0;\n    for (size_t\
    \ i = 0; i < brackets.size(); ++i) {\n        if (brackets[i] == '<') {\n    \
    \        ++open_brackets;\n        } else if (brackets[i] == '>') {\n        \
    \    ++close_brackets;\n        } else {\n            return false;\n        }\n\
    \    }\n    return open_brackets == close_brackets;\n}\nint main() {\n    auto\
    \ candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp0lfx17qd: /tmp/tmp0lfx17qd.cpp:29: int main(): Assertion `candidate((\"\
    <>\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    bool result\
    \ = true;\n    for (size_t i = 0; i < brackets.size(); i++) {\n        if (brackets[i]\
    \ != '<') {\n            result = false;\n            break;\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  stdout: ''
  stderr: "tmpou4u6kmb: /tmp/tmpou4u6kmb.cpp:25: int main(): Assertion `candidate((\"\
    <>\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    bool result\
    \ = true;\n    for (auto c : brackets) {\n        if (c != \">\" && c != \"<\"\
    ) {\n            result = false;\n            break;\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdzkklnrn.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmpdzkklnrn.cpp:16:18: error: ISO C++ forbids comparison between pointer\
    \ and integer [-fpermissive]\n   16 |         if (c != \">\" && c != \"<\") {\n\
    \      |                  ^~~\n/tmp/tmpdzkklnrn.cpp:16:30: error: ISO C++ forbids\
    \ comparison between pointer and integer [-fpermissive]\n   16 |         if (c\
    \ != \">\" && c != \"<\") {\n      |                              ^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    std::string\
    \ opening_brackets;\n    std::string closing_brackets;\n    std::string opening_brackets_stack;\n\
    \    std::string closing_brackets_stack;\n    bool found = false;\n    for (size_t\
    \ i = 0; i < brackets.size(); i++) {\n        if (brackets[i] == '<') {\n    \
    \        opening_brackets += brackets[i];\n            opening_brackets_stack\
    \ += brackets[i];\n        } else if (brackets[i] == '>') {\n            closing_brackets\
    \ += brackets[i];\n            closing_brackets_stack += brackets[i];\n      \
    \  } else {\n            if (opening_brackets_stack.size() == 0) {\n         \
    \       found = true;\n                break;\n            }\n            if (closing_brackets_stack.size()\
    \ == 0) {\n                found = true;\n                break;\n           \
    \ }\n            if (opening_brackets_stack == closing_brackets_stack) {\n   \
    \             found = true;\n                break;\n            }\n        }\n\
    \    }\n    return found;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  stdout: ''
  stderr: "tmpq5mu8cdp: /tmp/tmpq5mu8cdp.cpp:45: int main(): Assertion `candidate((\"\
    <>\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    int open_brackets\
    \ = 0;\n    int close_brackets = 0;\n    for (int i = 0; i < brackets.length();\
    \ i++) {\n        if (brackets[i] == '<') {\n            open_brackets++;\n  \
    \      } else if (brackets[i] == '>') {\n            close_brackets++;\n     \
    \   }\n    }\n    return open_brackets == close_brackets;\n}\nint main() {\n \
    \   auto candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpddzwflp5: /tmp/tmpddzwflp5.cpp:32: int main(): Assertion `candidate((\"\
    ><<>\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    std::string\
    \ opening_brackets = brackets;\n    std::string closing_brackets = brackets;\n\
    \    opening_brackets.erase(std::remove(opening_brackets.begin(), opening_brackets.end(),\
    \ '<'), opening_brackets.end());\n    closing_brackets.erase(std::remove(closing_brackets.begin(),\
    \ closing_brackets.end(), '>'), closing_brackets.end());\n    return opening_brackets\
    \ == closing_brackets;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  stdout: ''
  stderr: "tmp4_fmbsmn: /tmp/tmp4_fmbsmn.cpp:22: int main(): Assertion `candidate((\"\
    <>\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    bool result\
    \ = true;\n    for (size_t i = 0; i < brackets.length(); i++) {\n        if (brackets[i]\
    \ == '<') {\n            if (brackets[i + 1] == '>') {\n                result\
    \ = true;\n            } else {\n                result = false;\n           \
    \ }\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"\
    <<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n\
    \    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"\
    <<<><>>>>\")) == (false));\n    assert(candidate((\"><<>\")) == (false));\n  \
    \  assert(candidate((\"<\")) == (false));\n    assert(candidate((\"<<<<\")) ==\
    \ (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp6b93wd28: /tmp/tmp6b93wd28.cpp:32: int main(): Assertion `candidate((\"\
    <<<><>>>>\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    size_t\
    \ brackets_size = brackets.size();\n    size_t open_brackets_size = 0;\n    size_t\
    \ close_brackets_size = 0;\n    for (size_t i = 0; i < brackets_size; ++i) {\n\
    \        if (brackets[i] == '<') {\n            open_brackets_size++;\n      \
    \  } else if (brackets[i] == '>') {\n            close_brackets_size++;\n    \
    \    }\n    }\n    if (open_brackets_size == close_brackets_size) {\n        return\
    \ true;\n    } else {\n        return false;\n    }\n}\nint main() {\n    auto\
    \ candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp32pxsaik: /tmp/tmp32pxsaik.cpp:37: int main(): Assertion `candidate((\"\
    ><<>\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    bool result\
    \ = true;\n    for (size_t i = 0; i < brackets.length(); i++) {\n        if (brackets[i]\
    \ == '<') {\n            if (brackets[i + 1] == '>') {\n                result\
    \ = true;\n            } else {\n                result = false;\n           \
    \ }\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"\
    <<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n\
    \    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"\
    <<<><>>>>\")) == (false));\n    assert(candidate((\"><<>\")) == (false));\n  \
    \  assert(candidate((\"<\")) == (false));\n    assert(candidate((\"<<<<\")) ==\
    \ (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpww1ui_2p: /tmp/tmpww1ui_2p.cpp:32: int main(): Assertion `candidate((\"\
    <<<><>>>>\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    std::string\
    \ opening_brackets, closing_brackets;\n    size_t opening_brackets_size = brackets.size();\n\
    \    size_t closing_brackets_size = brackets.size();\n    size_t i = 0;\n    size_t\
    \ j = 0;\n    while (i < opening_brackets_size) {\n        opening_brackets =\
    \ brackets.substr(i, 1);\n        closing_brackets = brackets.substr(j, 1);\n\
    \        if (opening_brackets != closing_brackets) {\n            return false;\n\
    \        }\n        i += 1;\n        j += 1;\n    }\n    return true;\n}\nint\
    \ main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpp1ypa5r2: /tmp/tmpp1ypa5r2.cpp:36: int main(): Assertion `candidate((\"\
    <<<><>>>>\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    int brackets_size\
    \ = brackets.size();\n    for (int i = 0; i < brackets_size; i++) {\n        if\
    \ (brackets[i] == '<') {\n            if (brackets[i - 1] == '>') {\n        \
    \        return true;\n            }\n        }\n    }\n    return false;\n}\n\
    int main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmppyupnpc9: /tmp/tmppyupnpc9.cpp:26: int main(): Assertion `candidate((\"\
    <>\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    bool correct\
    \ = true;\n    for (auto c : brackets) {\n        if (c == '<') {\n          \
    \  if (brackets[brackets.size() - 1] != '>') {\n                correct = false;\n\
    \                break;\n            }\n        }\n    }\n    return correct;\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmptcg33j7z: /tmp/tmptcg33j7z.cpp:31: int main(): Assertion `candidate((\"\
    <<<><>>>>\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    int open_brackets\
    \ = 0;\n    int close_brackets = 0;\n    std::string open_brackets_string = \"\
    \";\n    std::string close_brackets_string = \"\";\n    for (int i = 0; i < brackets.length();\
    \ i++) {\n        if (brackets[i] == '<') {\n            open_brackets++;\n  \
    \          open_brackets_string += brackets[i];\n        } else if (brackets[i]\
    \ == '>') {\n            close_brackets++;\n            close_brackets_string\
    \ += brackets[i];\n        }\n    }\n    if (open_brackets == close_brackets)\
    \ {\n        return true;\n    } else {\n        return false;\n    }\n}\nint\
    \ main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp6hlvbeiy: /tmp/tmp6hlvbeiy.cpp:40: int main(): Assertion `candidate((\"\
    ><<>\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    size_t\
    \ open_brackets = brackets.size();\n    size_t close_brackets = 0;\n    for (size_t\
    \ i = 0; i < brackets.size(); ++i) {\n        if (brackets[i] == '<') {\n    \
    \        ++open_brackets;\n        } else if (brackets[i] == '>') {\n        \
    \    ++close_brackets;\n        }\n    }\n    return open_brackets == close_brackets;\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpj9t3f2ed: /tmp/tmpj9t3f2ed.cpp:27: int main(): Assertion `candidate((\"\
    <>\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    bool correct\
    \ = true;\n    for (size_t i = 0; i < brackets.length(); ++i) {\n        if (brackets[i]\
    \ == '<') {\n            if (brackets[i + 1] == '>') {\n                correct\
    \ = false;\n                break;\n            }\n        }\n    }\n    return\
    \ correct;\n}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp5w1gct16: /tmp/tmp5w1gct16.cpp:27: int main(): Assertion `candidate((\"\
    <>\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    size_t\
    \ open_brackets = brackets.size();\n    size_t close_brackets = 0;\n    for (size_t\
    \ i = 0; i < brackets.size(); ++i) {\n        if (brackets[i] == '<') {\n    \
    \        ++close_brackets;\n        } else if (brackets[i] == '>') {\n       \
    \     --close_brackets;\n        }\n    }\n    return open_brackets == close_brackets;\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmplo_zf02l: /tmp/tmplo_zf02l.cpp:27: int main(): Assertion `candidate((\"\
    <>\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    int opening_brackets\
    \ = 0;\n    int closing_brackets = 0;\n    for (int i = 0; i < brackets.length();\
    \ i++) {\n        if (brackets[i] == '<') {\n            opening_brackets++;\n\
    \        } else if (brackets[i] == '>') {\n            closing_brackets++;\n \
    \       }\n    }\n    return opening_brackets == closing_brackets;\n}\nint main()\
    \ {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"<>\"))\
    \ == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpcthr1vm1: /tmp/tmpcthr1vm1.cpp:32: int main(): Assertion `candidate((\"\
    ><<>\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    size_t\
    \ open_brackets = 0;\n    size_t close_brackets = 0;\n    for (size_t i = 0; i\
    \ < brackets.size(); ++i) {\n        if (brackets[i] == '<') {\n            ++open_brackets;\n\
    \        } else if (brackets[i] == '>') {\n            ++close_brackets;\n   \
    \     } else {\n            return false;\n        }\n    }\n    return open_brackets\
    \ == close_brackets;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  stdout: ''
  stderr: "tmpfzmqpp_v: /tmp/tmpfzmqpp_v.cpp:34: int main(): Assertion `candidate((\"\
    ><<>\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    size_t\
    \ open_brackets = brackets.size();\n    size_t close_brackets = 0;\n    for (size_t\
    \ i = 0; i < brackets.size(); i++) {\n        if (brackets[i] == '<') {\n    \
    \        open_brackets--;\n        }\n        if (brackets[i] == '>') {\n    \
    \        close_brackets++;\n        }\n    }\n    return open_brackets == close_brackets;\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp3ihgwl64: /tmp/tmp3ihgwl64.cpp:32: int main(): Assertion `candidate((\"\
    <<<><>>>>\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    size_t\
    \ len = brackets.size();\n    bool result = true;\n    for (size_t i = 0; i <\
    \ len; ++i) {\n        char c = brackets[i];\n        if (c == '<') {\n      \
    \      if (brackets[i + 1] != '<') {\n                result = false;\n      \
    \      }\n        }\n        else if (c == '>') {\n            if (brackets[i\
    \ + 1] != '>') {\n                result = false;\n            }\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  stdout: ''
  stderr: "tmp61fb_f_a: /tmp/tmp61fb_f_a.cpp:33: int main(): Assertion `candidate((\"\
    <>\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    int open_brackets\
    \ = 0;\n    int close_brackets = 0;\n    for (int i = 0; i < brackets.length();\
    \ i++) {\n        if (brackets[i] == '<') {\n            open_brackets++;\n  \
    \      } else if (brackets[i] == '>') {\n            close_brackets++;\n     \
    \   }\n    }\n    if (open_brackets == close_brackets) {\n        return true;\n\
    \    } else {\n        return false;\n    }\n}\nint main() {\n    auto candidate\
    \ = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"\
    <<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n\
    \    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"\
    <<<><>>>>\")) == (false));\n    assert(candidate((\"><<>\")) == (false));\n  \
    \  assert(candidate((\"<\")) == (false));\n    assert(candidate((\"<<<<\")) ==\
    \ (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpzeldhfmn: /tmp/tmpzeldhfmn.cpp:36: int main(): Assertion `candidate((\"\
    ><<>\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    size_t\
    \ opening_brackets = brackets.size();\n    size_t closing_brackets = 0;\n    for\
    \ (size_t i = 0; i < brackets.size(); ++i) {\n        if (brackets[i] == '<')\
    \ {\n            ++opening_brackets;\n        } else if (brackets[i] == '>') {\n\
    \            ++closing_brackets;\n        }\n    }\n    return opening_brackets\
    \ == closing_brackets;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  stdout: ''
  stderr: "tmpmzz36gqa: /tmp/tmpmzz36gqa.cpp:27: int main(): Assertion `candidate((\"\
    <>\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    std::string\
    \ opening_brackets = brackets;\n    std::string closing_brackets = brackets;\n\
    \    opening_brackets.erase(opening_brackets.begin(), std::find(opening_brackets.begin(),\
    \ opening_brackets.end(), '<'));\n    closing_brackets.erase(closing_brackets.begin(),\
    \ std::find(closing_brackets.begin(), closing_brackets.end(), '>'));\n    return\
    \ opening_brackets == closing_brackets;\n}\nint main() {\n    auto candidate =\
    \ correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"\
    <<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n\
    \    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"\
    <<<><>>>>\")) == (false));\n    assert(candidate((\"><<>\")) == (false));\n  \
    \  assert(candidate((\"<\")) == (false));\n    assert(candidate((\"<<<<\")) ==\
    \ (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp1miqd889: /tmp/tmp1miqd889.cpp:22: int main(): Assertion `candidate((\"\
    <>\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    bool result\
    \ = true;\n    for (size_t i = 0; i < brackets.length(); ++i) {\n        if (brackets[i]\
    \ == '<') {\n            if (brackets[i + 1] == '>') {\n                result\
    \ = true;\n            }\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"<>\"))\
    \ == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpfbzzt5mc: /tmp/tmpfbzzt5mc.cpp:30: int main(): Assertion `candidate((\"\
    <<<><>>>>\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    int len\
    \ = brackets.size();\n    for (int i = 0; i < len; ++i) {\n        if (brackets[i]\
    \ == '<') {\n            if (brackets[i - 1] == '>') {\n                return\
    \ true;\n            }\n        }\n    }\n    return false;\n}\nint main() {\n\
    \    auto candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpizp9pjax: /tmp/tmpizp9pjax.cpp:26: int main(): Assertion `candidate((\"\
    <>\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    size_t\
    \ open_brackets = 0;\n    size_t close_brackets = 0;\n    for (size_t i = 0; i\
    \ < brackets.length(); i++) {\n        if (brackets[i] == '<') {\n           \
    \ open_brackets++;\n        } else if (brackets[i] == '>') {\n            close_brackets++;\n\
    \        }\n    }\n    return open_brackets == close_brackets;\n}\nint main()\
    \ {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"<>\"))\
    \ == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpnp2w_b3e: /tmp/tmpnp2w_b3e.cpp:32: int main(): Assertion `candidate((\"\
    ><<>\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    std::string\
    \ opening_brackets = \"<\";\n    std::string closing_brackets = \">\";\n    std::string\
    \ opening_closing_brackets = \"\";\n    std::string opening_closing_brackets_reverse\
    \ = \"\";\n    std::string opening_closing_brackets_reverse_reverse = \"\";\n\
    \    std::string opening_closing_brackets_reverse_reverse_2 = \"\";\n    std::string\
    \ opening_closing_brackets_reverse_reverse_3 = \"\";\n    std::string opening_closing_brackets_reverse_reverse_4\
    \ = \"\";\n    std::string opening_closing_brackets_reverse_reverse_5 = \"\";\n\
    \    std::string opening_closing_brackets_reverse_reverse_6 = \"\";\n    std::string\
    \ opening_closing_brackets_reverse_reverse_7 = \"\";\n    std::string opening_closing_brackets_reverse_reverse_8\
    \ = \"\";\n    std::string opening_closing_brackets_reverse_reverse_9 = \"\";\n\
    \    std::string opening_closing_brackets_reverse_reverse_10 = \"\";\n    std::string\
    \ opening_closing_brackets_reverse_reverse_11 = \"\";\n    std::string opening_closing_brackets_reverse_reverse_12\
    \ = \"\";\n    std::string opening_closing_brackets_reverse_reverse_13 = \"\"\
    ;\n    std::string opening_closing_brackets_reverse_reverse_14 = \"\";\n    std::string\
    \ opening_closing_brackets_reverse_reverse_15 = \"\";\n    std::string opening_closing_brackets_reverse_reverse_16\
    \ = \"\";\n    std::string opening_closing_brackets_reverse_reverse_17 = \"\"\
    ;\n    std::string opening_closing_brackets_reverse_reverse_18 = \"\";\n    std::string\
    \ opening_closing_brackets_reverse_reverse_19 = \"\";\n    std::string opening_closing_brackets_reverse_reverse_20\
    \ = \"\";\n    std::string opening_closing_brackets_reverse_reverse_21 = \"\"\
    ;\n    std::string opening_closing_brackets_reverse_reverse_22 = \"\";\n    std::string\
    \ opening_closing_brackets_reverse_reverse_23 = \"\";\n    std::string opening_closing_brackets_reverse_reverse_24\
    \ = \"\";\n    std::string opening_closing_brackets_reverse_reverse_25 = \"\"\
    ;\n    std::string opening_closing_brackets_reverse_reverse_26 = \"\";\n    std::string\
    \ opening_closing_brackets_reverse_reverse_27 = \"\";\n    std::string opening_closing_brackets_reverse_reverse_28\
    \ = \"\";\n    std::string opening_closing_brackets_reverse_reverse_29 = \"\"\
    ;\n    std::string opening_closing_brackets_reverse_reverse_30 = \"\";\n    std::string\
    \ opening_closing_brackets_reverse_reverse_31 = \"\";\n    std::string \n}\nint\
    \ main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3erwh3rz.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmp3erwh3rz.cpp:50:1: error: expected unqualified-id before \u2018}\u2019\
    \ token\n   50 | }\n      | ^\n/tmp/tmp3erwh3rz.cpp:50:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    int len\
    \ = brackets.size();\n    for (int i = 0; i < len; ++i) {\n        if (brackets[i]\
    \ == '<') {\n            if (brackets[i + 1] == '>') {\n                return\
    \ true;\n            }\n        }\n    }\n    return false;\n}\nint main() {\n\
    \    auto candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpx2eziefb: /tmp/tmpx2eziefb.cpp:30: int main(): Assertion `candidate((\"\
    <<<><>>>>\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    size_t\
    \ open_brackets = 0;\n    size_t close_brackets = 0;\n    size_t open_brackets_index\
    \ = 0;\n    size_t close_brackets_index = 0;\n    size_t i = 0;\n    size_t j\
    \ = 0;\n    bool result = false;\n    while (brackets[i] != '\\0') {\n       \
    \ if (brackets[i] == '<') {\n            open_brackets++;\n            open_brackets_index++;\n\
    \        } else if (brackets[i] == '>') {\n            close_brackets++;\n   \
    \         close_brackets_index++;\n        }\n        i++;\n    }\n    if (open_brackets\
    \ == close_brackets) {\n        if (open_brackets == open_brackets_index) {\n\
    \            result = true;\n        } else {\n            result = false;\n \
    \       }\n    }\n    return result;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  stdout: ''
  stderr: "tmpslq7zpzp: /tmp/tmpslq7zpzp.cpp:47: int main(): Assertion `candidate((\"\
    ><<>\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    bool result\
    \ = true;\n    for (auto c : brackets) {\n        if (c == '<') {\n          \
    \  if (brackets[brackets.size() - 1] != '>') {\n                result = false;\n\
    \            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp5tf_c8ze: /tmp/tmp5tf_c8ze.cpp:30: int main(): Assertion `candidate((\"\
    <<<><>>>>\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    int len\
    \ = brackets.size();\n    for (int i = 0; i < len; ++i) {\n        if (brackets[i]\
    \ == '<') {\n            if (brackets[i + 1] == '>') {\n                return\
    \ true;\n            }\n        }\n    }\n    return false;\n}\nint main() {\n\
    \    auto candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpca_g0hxc: /tmp/tmpca_g0hxc.cpp:30: int main(): Assertion `candidate((\"\
    <<<><>>>>\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    std::string\
    \ opening_brackets = brackets;\n    std::string closing_brackets = brackets;\n\
    \    opening_brackets.erase(opening_brackets.begin(), std::find(opening_brackets.begin(),\
    \ opening_brackets.end(), '<'));\n    closing_brackets.erase(closing_brackets.begin(),\
    \ std::find(closing_brackets.begin(), closing_brackets.end(), '>'));\n    return\
    \ opening_brackets == closing_brackets;\n}\nint main() {\n    auto candidate =\
    \ correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"\
    <<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n\
    \    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"\
    <<<><>>>>\")) == (false));\n    assert(candidate((\"><<>\")) == (false));\n  \
    \  assert(candidate((\"<\")) == (false));\n    assert(candidate((\"<<<<\")) ==\
    \ (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpq57j5sw1: /tmp/tmpq57j5sw1.cpp:22: int main(): Assertion `candidate((\"\
    <>\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    int open_brackets\
    \ = 0;\n    int close_brackets = 0;\n    for (int i = 0; i < brackets.length();\
    \ i++) {\n        if (brackets[i] == '<') {\n            open_brackets++;\n  \
    \      } else if (brackets[i] == '>') {\n            close_brackets++;\n     \
    \   }\n    }\n    return open_brackets == close_brackets;\n}\nint main() {\n \
    \   auto candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmps2kj8x8a: /tmp/tmps2kj8x8a.cpp:32: int main(): Assertion `candidate((\"\
    ><<>\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    std::string\
    \ opening_brackets, closing_brackets;\n    opening_brackets = brackets;\n    closing_brackets\
    \ = brackets;\n    opening_brackets.erase(std::remove(opening_brackets.begin(),\
    \ opening_brackets.end(), '<'), opening_brackets.end());\n    closing_brackets.erase(std::remove(closing_brackets.begin(),\
    \ closing_brackets.end(), '>'), closing_brackets.end());\n    return opening_brackets\
    \ == closing_brackets;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  stdout: ''
  stderr: "tmpwz7rzkp4: /tmp/tmpwz7rzkp4.cpp:23: int main(): Assertion `candidate((\"\
    <>\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    size_t\
    \ open_brackets = 0;\n    size_t close_brackets = 0;\n    size_t open_brackets_index\
    \ = 0;\n    size_t close_brackets_index = 0;\n    size_t open_brackets_size =\
    \ brackets.size();\n    size_t close_brackets_size = brackets.size();\n    while\
    \ (open_brackets_index < open_brackets_size) {\n        if (brackets[open_brackets_index]\
    \ == '<') {\n            open_brackets++;\n            open_brackets_index++;\n\
    \        }\n        else if (brackets[open_brackets_index] == '>') {\n       \
    \     close_brackets++;\n            open_brackets_index++;\n        }\n     \
    \   else {\n            open_brackets++;\n            close_brackets++;\n    \
    \    }\n    }\n    while (close_brackets_index < close_brackets_size) {\n    \
    \    if (brackets[close_brackets_index] == '<') {\n            close_brackets++;\n\
    \            close_brackets_index++;\n        }\n        else if (brackets[close_brackets_index]\
    \ == '>') {\n            open_brackets++;\n            close_brackets_index++;\n\
    \        }\n        else {\n            close_brackets++;\n            open_brackets++;\n\
    \        }\n    }\n    return open_brackets == close_brackets;\n}\nint main()\
    \ {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"<>\"))\
    \ == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpqtvpxvqf: /tmp/tmpqtvpxvqf.cpp:56: int main(): Assertion `candidate((\"\
    <<<><>>>>\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    int len\
    \ = brackets.size();\n    for (int i = 0; i < len; ++i) {\n        if (brackets[i]\
    \ == '<') {\n            if (brackets[i + 1] == '>') {\n                return\
    \ true;\n            }\n        }\n    }\n    return false;\n}\nint main() {\n\
    \    auto candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpx6epqwid: /tmp/tmpx6epqwid.cpp:30: int main(): Assertion `candidate((\"\
    <<<><>>>>\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    size_t\
    \ open_brackets = 0;\n    size_t close_brackets = 0;\n    for (size_t i = 0; i\
    \ < brackets.size(); ++i) {\n        if (brackets[i] == '<') {\n            ++open_brackets;\n\
    \        } else if (brackets[i] == '>') {\n            ++close_brackets;\n   \
    \     } else {\n            return false;\n        }\n    }\n    return open_brackets\
    \ == close_brackets;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  stdout: ''
  stderr: "tmppfr6o_rd: /tmp/tmppfr6o_rd.cpp:34: int main(): Assertion `candidate((\"\
    ><<>\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    int open_brackets\
    \ = 0;\n    int close_brackets = 0;\n    for (int i = 0; i < brackets.length();\
    \ i++) {\n        if (brackets[i] == '<') {\n            open_brackets++;\n  \
    \      } else if (brackets[i] == '>') {\n            close_brackets++;\n     \
    \   }\n    }\n    if (open_brackets == close_brackets) {\n        return true;\n\
    \    } else {\n        return false;\n    }\n}\nint main() {\n    auto candidate\
    \ = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"\
    <<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n\
    \    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"\
    <<<><>>>>\")) == (false));\n    assert(candidate((\"><<>\")) == (false));\n  \
    \  assert(candidate((\"<\")) == (false));\n    assert(candidate((\"<<<<\")) ==\
    \ (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpucktzdch: /tmp/tmpucktzdch.cpp:36: int main(): Assertion `candidate((\"\
    ><<>\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    int open_brackets\
    \ = 0;\n    int close_brackets = 0;\n    for (int i = 0; i < brackets.length();\
    \ i++) {\n        if (brackets[i] == '<') {\n            open_brackets++;\n  \
    \      } else if (brackets[i] == '>') {\n            close_brackets++;\n     \
    \   }\n    }\n    return open_brackets == close_brackets;\n}\nint main() {\n \
    \   auto candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpl0c3mtug: /tmp/tmpl0c3mtug.cpp:32: int main(): Assertion `candidate((\"\
    ><<>\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    size_t\
    \ opening_brackets = 0;\n    size_t closing_brackets = 0;\n    size_t brackets_size\
    \ = brackets.size();\n    for (size_t i = 0; i < brackets_size; ++i) {\n     \
    \   char c = brackets[i];\n        if (c == '<') {\n            ++opening_brackets;\n\
    \        } else if (c == '>') {\n            ++closing_brackets;\n        } else\
    \ {\n            return false;\n        }\n    }\n    return opening_brackets\
    \ == closing_brackets;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  stdout: ''
  stderr: "tmpq_4gut3l: /tmp/tmpq_4gut3l.cpp:36: int main(): Assertion `candidate((\"\
    ><<>\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    std::string\
    \ opening_brackets;\n    std::string closing_brackets;\n    std::string brackets_copy\
    \ = brackets;\n    for (size_t i = 0; i < brackets_copy.size(); i++) {\n     \
    \   if (brackets_copy[i] == '<') {\n            opening_brackets += brackets_copy[i];\n\
    \        } else if (brackets_copy[i] == '>') {\n            closing_brackets +=\
    \ brackets_copy[i];\n        }\n    }\n    if (opening_brackets == closing_brackets)\
    \ {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto\
    \ candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpis3et40g: /tmp/tmpis3et40g.cpp:31: int main(): Assertion `candidate((\"\
    <>\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    bool correct\
    \ = true;\n    for (auto c : brackets) {\n        if (c == '<') {\n          \
    \  correct = false;\n            break;\n        }\n    }\n    return correct;\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp_ujbk57p: /tmp/tmp_ujbk57p.cpp:25: int main(): Assertion `candidate((\"\
    <>\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    size_t\
    \ brackets_size = brackets.size();\n    size_t open_brackets = 0;\n    size_t\
    \ close_brackets = 0;\n    for (size_t i = 0; i < brackets_size; ++i) {\n    \
    \    char c = brackets[i];\n        if (c == '<') {\n            open_brackets++;\n\
    \        } else if (c == '>') {\n            close_brackets++;\n        }\n  \
    \  }\n    if (open_brackets != close_brackets) {\n        return false;\n    }\n\
    \    return true;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  stdout: ''
  stderr: "tmp2n3wtj7d: /tmp/tmp2n3wtj7d.cpp:37: int main(): Assertion `candidate((\"\
    ><<>\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    bool result\
    \ = true;\n    for (auto c : brackets) {\n        if (c != '>' && c != '<') {\n\
    \            result = false;\n            break;\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp51v3l6wx: /tmp/tmp51v3l6wx.cpp:29: int main(): Assertion `candidate((\"\
    <<<><>>>>\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    int open_brackets\
    \ = 0;\n    int close_brackets = 0;\n    for (int i = 0; i < brackets.length();\
    \ i++) {\n        if (brackets[i] == '<') {\n            open_brackets++;\n  \
    \      } else if (brackets[i] == '>') {\n            close_brackets++;\n     \
    \   }\n    }\n    return open_brackets == close_brackets;\n}\nint main() {\n \
    \   auto candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp10za3x9i: /tmp/tmp10za3x9i.cpp:32: int main(): Assertion `candidate((\"\
    ><<>\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    // initialize\
    \ a stack to keep track of brackets\n    std::stack<char> brackets_stack;\n  \
    \  // initialize a boolean to keep track of whether brackets are balanced\n  \
    \  bool brackets_balanced = true;\n    // initialize a boolean to keep track of\
    \ whether brackets are open\n    bool brackets_open = true;\n    // initialize\
    \ a boolean to keep track of whether brackets are closed\n    bool brackets_closed\
    \ = true;\n    // initialize a boolean to keep track of whether brackets are correct\n\
    \    bool brackets_correct = true;\n    // initialize a boolean to keep track\
    \ of whether brackets are correct\n    bool brackets_correct = true;\n    // initialize\
    \ a boolean to keep track of whether brackets are correct\n    bool brackets_correct\
    \ = true;\n    // initialize a boolean to keep track of whether brackets are correct\n\
    \    bool brackets_correct = true;\n    // initialize a boolean to keep track\
    \ of whether brackets are correct\n    bool brackets_correct = true;\n    // initialize\
    \ a boolean to keep track of whether brackets are correct\n    bool brackets_correct\
    \ = true;\n    // initialize a boolean to keep track of whether brackets are correct\n\
    \    bool brackets_correct = true;\n    // initialize a boolean to keep track\
    \ of whether brackets are correct\n    bool brackets_correct = true;\n    // initialize\
    \ a boolean to keep track of whether brackets are correct\n    bool brackets_correct\
    \ = true;\n    // initialize a boolean to keep track of whether brackets are correct\n\
    \    bool brackets_correct = true;\n    // initialize a boolean to keep track\
    \ of whether brackets are correct\n    bool brackets_correct = true;\n    // initialize\
    \ a boolean to keep track of whether brackets are correct\n    bool brackets_correct\
    \ = true;\n    // initialize a boolean to keep track of whether brackets are correct\n\
    \    bool brackets_correct = true;\n    // initialize a boolean to keep track\
    \ of whether brackets are correct\n    bool brackets_correct = true;\n    // initialize\
    \ a boolean to keep track of whether brackets are correct\n    bool brackets_correct\
    \ = true;\n    // initialize a boolean to keep track of whether brackets are correct\n\
    \    bool brackets_correct = true;\n    // initialize a boolean to keep track\
    \ of whether brackets are correct\n    bool brackets_correct = true;\n    // initialize\
    \ a boolean to keep track of whether brackets are correct\n    bool brackets_correct\
    \ = true;\n    // initialize a boolean to keep track of whether brackets are correct\n\
    \    bool brackets_correct = true;\n    // initialize a boolean to keep track\
    \ of whether brackets are correct\n    bool brackets_correct = true;\n    // initialize\
    \ a boolean to keep track of whether brackets are correct\n    bool brackets_correct\
    \ = true;\n    // initialize a boolean to keep track of whether brackets are correct\n\
    \    bool brackets_correct = true;\n    // initialize a boolean to keep track\
    \ of whether brackets are correct\n    bool brackets_correct\n}\nint main() {\n\
    \    auto candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpgqnpvjbb.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmpgqnpvjbb.cpp:25:10: error: redeclaration of \u2018bool brackets_correct\u2019\
    \n   25 |     bool brackets_correct = true;\n      |          ^~~~~~~~~~~~~~~~\n\
    /tmp/tmpgqnpvjbb.cpp:23:10: note: \u2018bool brackets_correct\u2019 previously\
    \ declared here\n   23 |     bool brackets_correct = true;\n      |          ^~~~~~~~~~~~~~~~\n\
    /tmp/tmpgqnpvjbb.cpp:27:10: error: redeclaration of \u2018bool brackets_correct\u2019\
    \n   27 |     bool brackets_correct = true;\n      |          ^~~~~~~~~~~~~~~~\n\
    /tmp/tmpgqnpvjbb.cpp:23:10: note: \u2018bool brackets_correct\u2019 previously\
    \ declared here\n   23 |     bool brackets_correct = true;\n      |          ^~~~~~~~~~~~~~~~\n\
    /tmp/tmpgqnpvjbb.cpp:29:10: error: redeclaration of \u2018bool brackets_correct\u2019\
    \n   29 |     bool brackets_correct = true;\n      |          ^~~~~~~~~~~~~~~~\n\
    /tmp/tmpgqnpvjbb.cpp:23:10: note: \u2018bool brackets_correct\u2019 previously\
    \ declared here\n   23 |     bool brackets_correct = true;\n      |          ^~~~~~~~~~~~~~~~\n\
    /tmp/tmpgqnpvjbb.cpp:31:10: error: redeclaration of \u2018bool brackets_correct\u2019\
    \n   31 |     bool brackets_correct = true;\n      |          ^~~~~~~~~~~~~~~~\n\
    /tmp/tmpgqnpvjbb.cpp:23:10: note: \u2018bool brackets_correct\u2019 previously\
    \ declared here\n   23 |     bool brackets_correct = true;\n      |          ^~~~~~~~~~~~~~~~\n\
    /tmp/tmpgqnpvjbb.cpp:33:10: error: redeclaration of \u2018bool brackets_correct\u2019\
    \n   33 |     bool brackets_correct = true;\n      |          ^~~~~~~~~~~~~~~~\n\
    /tmp/tmpgqnpvjbb.cpp:23:10: note: \u2018bool brackets_correct\u2019 previously\
    \ declared here\n   23 |     bool brackets_correct = true;\n      |          ^~~~~~~~~~~~~~~~\n\
    /tmp/tmpgqnpvjbb.cpp:35:10: error: redeclaration of \u2018bool brackets_correct\u2019\
    \n   35 |     bool brackets_correct = true;\n      |          ^~~~~~~~~~~~~~~~\n\
    /tmp/tmpgqnpvjbb.cpp:23:10: note: \u2018bool brackets_correct\u2019 previously\
    \ declared here\n   23 |     bool brackets_correct = true;\n      |          ^~~~~~~~~~~~~~~~\n\
    /tmp/tmpgqnpvjbb.cpp:37:10: error: redeclaration of \u2018bool brackets_correct\u2019\
    \n   37 |     bool brackets_correc"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    // Your\
    \ code here\n    bool flag = false;\n    int count = 0;\n    for(int i = 0; i\
    \ < brackets.length(); i++) {\n        if(brackets[i] == '<') {\n            count++;\n\
    \        }\n        if(brackets[i] == '>') {\n            count--;\n        }\n\
    \        if(count < 0) {\n            flag = false;\n            break;\n    \
    \    }\n    }\n    return flag;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  stdout: ''
  stderr: "tmpzwhtofxp: /tmp/tmpzwhtofxp.cpp:33: int main(): Assertion `candidate((\"\
    <>\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    int len\
    \ = brackets.size();\n    for (int i = 0; i < len; ++i) {\n        if (brackets[i]\
    \ == '<') {\n            if (brackets[i - 1] == '<') {\n                return\
    \ false;\n            }\n        } else if (brackets[i] == '>') {\n          \
    \  if (brackets[i - 1] == '>') {\n                return false;\n            }\n\
    \        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  stdout: ''
  stderr: "tmp017avmls: /tmp/tmp017avmls.cpp:31: int main(): Assertion `candidate((\"\
    <<><>>\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    bool result\
    \ = true;\n    for (auto c : brackets) {\n        if (c == '<') {\n          \
    \  if (brackets[brackets.size() - 1] != '>') {\n                result = false;\n\
    \                break;\n            }\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpcblyjqoi: /tmp/tmpcblyjqoi.cpp:31: int main(): Assertion `candidate((\"\
    <<<><>>>>\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    size_t\
    \ len = brackets.size();\n    bool result = true;\n    for (size_t i = 0; i <\
    \ len; ++i) {\n        char c = brackets[i];\n        if (c == '<') {\n      \
    \      if (i + 1 < len && brackets[i + 1] == '>') {\n                ++i;\n  \
    \          } else {\n                result = false;\n                break;\n\
    \            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpj86cov6u: /tmp/tmpj86cov6u.cpp:32: int main(): Assertion `candidate((\"\
    <<><>>\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    size_t\
    \ open_brackets = 0;\n    size_t close_brackets = 0;\n    size_t i = 0;\n    size_t\
    \ j = 0;\n    while (brackets[i] != '\\0') {\n        if (brackets[i] == '<')\
    \ {\n            open_brackets++;\n        } else if (brackets[i] == '>') {\n\
    \            close_brackets++;\n        }\n        i++;\n    }\n    if (open_brackets\
    \ == close_brackets) {\n        return true;\n    } else {\n        return false;\n\
    \    }\n}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpdyuwrv39: /tmp/tmpdyuwrv39.cpp:39: int main(): Assertion `candidate((\"\
    ><<>\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    size_t\
    \ len = brackets.size();\n    bool ret = true;\n    std::string opening_brackets;\n\
    \    std::string closing_brackets;\n    for (size_t i = 0; i < len; ++i) {\n \
    \       char c = brackets[i];\n        if (c == '<') {\n            opening_brackets\
    \ += c;\n        } else if (c == '>') {\n            closing_brackets += c;\n\
    \        } else {\n            ret = false;\n            break;\n        }\n \
    \   }\n    if (opening_brackets != closing_brackets) {\n        ret = false;\n\
    \    }\n    return ret;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  stdout: ''
  stderr: "tmpdea961ds: /tmp/tmpdea961ds.cpp:36: int main(): Assertion `candidate((\"\
    <>\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    int open_brackets\
    \ = 0;\n    int close_brackets = 0;\n    for (int i = 0; i < brackets.size();\
    \ i++) {\n        if (brackets[i] == '<') {\n            open_brackets++;\n  \
    \      } else if (brackets[i] == '>') {\n            close_brackets++;\n     \
    \   }\n    }\n    return open_brackets == close_brackets;\n}\nint main() {\n \
    \   auto candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp_nrvgwg_: /tmp/tmp_nrvgwg_.cpp:32: int main(): Assertion `candidate((\"\
    ><<>\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    bool result\
    \ = true;\n    size_t open_brackets = 0;\n    size_t close_brackets = 0;\n   \
    \ size_t open_brackets_size = brackets.size();\n    size_t close_brackets_size\
    \ = brackets.size();\n    size_t i = 0;\n    while (i < open_brackets_size) {\n\
    \        if (brackets[i] == '<') {\n            open_brackets++;\n        }\n\
    \        else if (brackets[i] == '>') {\n            close_brackets++;\n     \
    \   }\n        i++;\n    }\n    if (open_brackets != close_brackets) {\n     \
    \   result = false;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"\
    <<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n\
    \    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"\
    <<<><>>>>\")) == (false));\n    assert(candidate((\"><<>\")) == (false));\n  \
    \  assert(candidate((\"<\")) == (false));\n    assert(candidate((\"<<<<\")) ==\
    \ (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpcwkg3qjn: /tmp/tmpcwkg3qjn.cpp:41: int main(): Assertion `candidate((\"\
    ><<>\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    bool result\
    \ = true;\n    for (auto c : brackets) {\n        if (c == '<') {\n          \
    \  if (brackets[brackets.size() - 1] != '>') {\n                result = false;\n\
    \            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpyym042kz: /tmp/tmpyym042kz.cpp:30: int main(): Assertion `candidate((\"\
    <<<><>>>>\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    bool result\
    \ = true;\n    for (size_t i = 0; i < brackets.size(); i++) {\n        if (brackets[i]\
    \ != '<') result = false;\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp_jy055xo: /tmp/tmp_jy055xo.cpp:22: int main(): Assertion `candidate((\"\
    <>\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    std::string\
    \ opening_brackets = brackets;\n    std::string closing_brackets = brackets;\n\
    \    opening_brackets.erase(std::remove(opening_brackets.begin(), opening_brackets.end(),\
    \ '<'), opening_brackets.end());\n    closing_brackets.erase(std::remove(closing_brackets.begin(),\
    \ closing_brackets.end(), '>'), closing_brackets.end());\n    return opening_brackets\
    \ == closing_brackets;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  stdout: ''
  stderr: "tmpk1jrt6k1: /tmp/tmpk1jrt6k1.cpp:22: int main(): Assertion `candidate((\"\
    <>\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    bool result\
    \ = true;\n    for (size_t i = 0; i < brackets.length(); i++) {\n        if (brackets[i]\
    \ == '<') {\n            if (brackets[i + 1] != '>') {\n                result\
    \ = false;\n                break;\n            }\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp5matx4j3: /tmp/tmp5matx4j3.cpp:28: int main(): Assertion `candidate((\"\
    <<><>>\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    size_t\
    \ open_brackets = brackets.size();\n    size_t close_brackets = 0;\n    for (size_t\
    \ i = 0; i < brackets.size(); ++i) {\n        if (brackets[i] == '<') {\n    \
    \        ++open_brackets;\n        } else if (brackets[i] == '>') {\n        \
    \    ++close_brackets;\n        } else {\n            return false;\n        }\n\
    \    }\n    return open_brackets == close_brackets;\n}\nint main() {\n    auto\
    \ candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpxc60rhwq: /tmp/tmpxc60rhwq.cpp:29: int main(): Assertion `candidate((\"\
    <>\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    std::string\
    \ opening_brackets, closing_brackets;\n    opening_brackets = brackets;\n    closing_brackets\
    \ = brackets;\n    opening_brackets.erase(std::remove(opening_brackets.begin(),\
    \ opening_brackets.end(), '<'), opening_brackets.end());\n    closing_brackets.erase(std::remove(closing_brackets.begin(),\
    \ closing_brackets.end(), '>'), closing_brackets.end());\n    return opening_brackets\
    \ == closing_brackets;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  stdout: ''
  stderr: "tmpledz5pft: /tmp/tmpledz5pft.cpp:23: int main(): Assertion `candidate((\"\
    <>\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    bool correct\
    \ = true;\n    for (size_t i = 0; i < brackets.length(); ++i) {\n        if (brackets[i]\
    \ == '<') {\n            if (brackets[i + 1] == '>') {\n                correct\
    \ = false;\n                break;\n            }\n        }\n    }\n    return\
    \ correct;\n}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp_39z0ajc: /tmp/tmp_39z0ajc.cpp:27: int main(): Assertion `candidate((\"\
    <>\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    size_t\
    \ len = brackets.size();\n    bool ret = true;\n    for (size_t i = 0; i < len;\
    \ ++i) {\n        if (brackets[i] == '<') {\n            if (brackets[i + 1] ==\
    \ '>') {\n                ret = true;\n            } else {\n                ret\
    \ = false;\n                break;\n            }\n        }\n    }\n    return\
    \ ret;\n}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp5us3qaab: /tmp/tmp5us3qaab.cpp:31: int main(): Assertion `candidate((\"\
    <<><>>\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    int opening_brackets\
    \ = 0;\n    int closing_brackets = 0;\n    for (int i = 0; i < brackets.length();\
    \ i++) {\n        if (brackets[i] == '<') {\n            opening_brackets++;\n\
    \        } else if (brackets[i] == '>') {\n            closing_brackets++;\n \
    \       }\n    }\n    return opening_brackets == closing_brackets;\n}\nint main()\
    \ {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"<>\"))\
    \ == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpu65ediq6: /tmp/tmpu65ediq6.cpp:32: int main(): Assertion `candidate((\"\
    ><<>\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    size_t\
    \ len = brackets.size();\n    bool ret = true;\n    for (size_t i = 0; i < len;\
    \ ++i) {\n        if (brackets[i] != '<') {\n            ret = false;\n      \
    \      break;\n        }\n    }\n    for (size_t i = 0; i < len; ++i) {\n    \
    \    if (brackets[i] != '>') {\n            ret = false;\n            break;\n\
    \        }\n    }\n    return ret;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  stdout: ''
  stderr: "tmpn02ext1i: /tmp/tmpn02ext1i.cpp:32: int main(): Assertion `candidate((\"\
    <>\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    std::string\
    \ opening_brackets = brackets;\n    std::string closing_brackets = brackets;\n\
    \    opening_brackets.erase(std::remove(opening_brackets.begin(), opening_brackets.end(),\
    \ '<'), opening_brackets.end());\n    closing_brackets.erase(std::remove(closing_brackets.begin(),\
    \ closing_brackets.end(), '>'), closing_brackets.end());\n    return opening_brackets\
    \ == closing_brackets;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  stdout: ''
  stderr: "tmpdy39b5y1: /tmp/tmpdy39b5y1.cpp:22: int main(): Assertion `candidate((\"\
    <>\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    bool result\
    \ = true;\n    for (auto c : brackets) {\n        if (c == '<') {\n          \
    \  if (brackets[brackets.size() - 1] != '>') {\n                result = false;\n\
    \                break;\n            }\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpmvgoodim: /tmp/tmpmvgoodim.cpp:31: int main(): Assertion `candidate((\"\
    <<<><>>>>\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    std::string\
    \ opening_brackets = brackets;\n    std::string closing_brackets = brackets;\n\
    \    std::string opening_brackets_copy = opening_brackets;\n    std::string closing_brackets_copy\
    \ = closing_brackets;\n    bool result = false;\n    while (opening_brackets_copy.size()\
    \ > 0) {\n        opening_brackets_copy.erase(opening_brackets_copy.begin());\n\
    \        closing_brackets_copy.erase(closing_brackets_copy.begin());\n       \
    \ if (opening_brackets_copy.size() == 0) {\n            result = closing_brackets_copy.size()\
    \ == 0;\n            break;\n        }\n        if (closing_brackets_copy.size()\
    \ == 0) {\n            result = opening_brackets_copy.size() == 0;\n         \
    \   break;\n        }\n        if (opening_brackets_copy.front() != closing_brackets_copy.front())\
    \ {\n            result = false;\n            break;\n        }\n        opening_brackets_copy.erase(opening_brackets_copy.begin());\n\
    \        closing_brackets_copy.erase(closing_brackets_copy.begin());\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  stdout: ''
  stderr: "tmpafc8l4ot: /tmp/tmpafc8l4ot.cpp:41: int main(): Assertion `candidate((\"\
    <>\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    bool result\
    \ = true;\n    size_t open_brackets = 0;\n    size_t close_brackets = 0;\n   \
    \ for (size_t i = 0; i < brackets.length(); ++i) {\n        if (brackets[i] ==\
    \ '<') {\n            ++open_brackets;\n        } else if (brackets[i] == '>')\
    \ {\n            ++close_brackets;\n        } else {\n            assert(false);\n\
    \        }\n    }\n    if (open_brackets != close_brackets) {\n        result\
    \ = false;\n    }\n    return result;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  stdout: ''
  stderr: "tmpudi2ma18: /tmp/tmpudi2ma18.cpp:38: int main(): Assertion `candidate((\"\
    ><<>\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    bool correct\
    \ = true;\n    for (auto c : brackets) {\n        if (c == '<') {\n          \
    \  if (brackets[brackets.size() - 1] != '>') {\n                correct = false;\n\
    \                break;\n            }\n        } else if (c == '>') {\n     \
    \       if (brackets[brackets.size() - 2] != '<') {\n                correct =\
    \ false;\n                break;\n            }\n        }\n    }\n    return\
    \ correct;\n}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmppvfrj_ll: /tmp/tmppvfrj_ll.cpp:33: int main(): Assertion `candidate((\"\
    <<><>>\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    int open_brackets\
    \ = 0;\n    int close_brackets = 0;\n    for (int i = 0; i < brackets.length();\
    \ i++) {\n        if (brackets[i] == '<') {\n            open_brackets++;\n  \
    \      } else if (brackets[i] == '>') {\n            close_brackets++;\n     \
    \   }\n    }\n    if (open_brackets != close_brackets) {\n        return false;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  stdout: ''
  stderr: "tmp12j43ivg: /tmp/tmp12j43ivg.cpp:35: int main(): Assertion `candidate((\"\
    ><<>\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    // Your\
    \ code here\n    bool result = true;\n    for(int i = 0; i < brackets.size() -\
    \ 1; i++) {\n        if(brackets[i] == '<' && brackets[i+1] == '>') {\n      \
    \      result = false;\n        }\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpw09owa63: /tmp/tmpw09owa63.cpp:25: int main(): Assertion `candidate((\"\
    <>\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    bool result\
    \ = true;\n    for (size_t i = 0; i < brackets.length(); ++i) {\n        if (brackets[i]\
    \ != '<' && brackets[i] != '>') {\n            result = false;\n            break;\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  stdout: ''
  stderr: "tmpm2q8v2nr: /tmp/tmpm2q8v2nr.cpp:29: int main(): Assertion `candidate((\"\
    <<<><>>>>\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    bool result\
    \ = true;\n    size_t opening_brackets = 0;\n    size_t closing_brackets = 0;\n\
    \    for (size_t i = 0; i < brackets.size(); ++i) {\n        if (brackets[i] ==\
    \ '<') {\n            ++opening_brackets;\n        } else if (brackets[i] == '>')\
    \ {\n            ++closing_brackets;\n        } else {\n            assert(brackets[i]\
    \ == '(');\n            assert(brackets[i + 1] == ')');\n            ++opening_brackets;\n\
    \            ++closing_brackets;\n        }\n    }\n    if (opening_brackets !=\
    \ closing_brackets) {\n        result = false;\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpth8a8wdi: /tmp/tmpth8a8wdi.cpp:41: int main(): Assertion `candidate((\"\
    ><<>\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    bool result\
    \ = true;\n    for (size_t i = 0; i < brackets.length(); i++) {\n        if (brackets[i]\
    \ == '<') {\n            if (brackets[i + 1] == '>') {\n                result\
    \ = true;\n            }\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"<>\"))\
    \ == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpem2fohps: /tmp/tmpem2fohps.cpp:30: int main(): Assertion `candidate((\"\
    <<<><>>>>\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    bool result\
    \ = true;\n    for (auto c : brackets) {\n        if (c == '<') {\n          \
    \  if (brackets[brackets.size() - 1] != '>') {\n                result = false;\n\
    \            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpe1wgeh9r: /tmp/tmpe1wgeh9r.cpp:30: int main(): Assertion `candidate((\"\
    <<<><>>>>\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    bool result\
    \ = true;\n    for (size_t i = 0; i < brackets.length(); i++) {\n        if (brackets[i]\
    \ == '<') {\n            if (brackets[i + 1] == '>') {\n                result\
    \ += true;\n                i += 2;\n            } else {\n                result\
    \ += false;\n            }\n        } else {\n            result += false;\n \
    \       }\n    }\n    return result;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  stdout: ''
  stderr: "tmp293iatl6: /tmp/tmp293iatl6.cpp:35: int main(): Assertion `candidate((\"\
    <<<><>>>>\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    bool result\
    \ = true;\n    for (size_t i = 0; i < brackets.length(); ++i) {\n        if (brackets[i]\
    \ != '<' && brackets[i] != '>') {\n            result = false;\n        }\n  \
    \  }\n    return result;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  stdout: ''
  stderr: "tmpwlmpaxga: /tmp/tmpwlmpaxga.cpp:28: int main(): Assertion `candidate((\"\
    <<<><>>>>\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    size_t\
    \ open_brackets = brackets.size() - 1;\n    size_t close_brackets = 0;\n    for\
    \ (size_t i = 0; i < brackets.size(); i++) {\n        if (brackets[i] == '<')\
    \ {\n            open_brackets--;\n        } else if (brackets[i] == '>') {\n\
    \            close_brackets++;\n        }\n    }\n    return open_brackets ==\
    \ close_brackets;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  stdout: ''
  stderr: "tmpcof38xb6: /tmp/tmpcof38xb6.cpp:27: int main(): Assertion `candidate((\"\
    <>\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    int len\
    \ = brackets.size();\n    for (int i = 0; i < len; ++i) {\n        if (brackets[i]\
    \ == '<') {\n            if (brackets[i + 1] == '>') {\n                return\
    \ true;\n            }\n        }\n    }\n    return false;\n}\nint main() {\n\
    \    auto candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpa3l8nqy1: /tmp/tmpa3l8nqy1.cpp:30: int main(): Assertion `candidate((\"\
    <<<><>>>>\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    size_t\
    \ open_brackets = 0;\n    size_t close_brackets = 0;\n    size_t open_brackets_index\
    \ = 0;\n    size_t close_brackets_index = 0;\n    for (size_t i = 0; i < brackets.size();\
    \ i++) {\n        if (brackets[i] == '<') {\n            open_brackets++;\n  \
    \          open_brackets_index = i;\n        } else if (brackets[i] == '>') {\n\
    \            close_brackets++;\n            close_brackets_index = i;\n      \
    \  }\n    }\n    if (open_brackets == close_brackets) {\n        return true;\n\
    \    }\n    return false;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  stdout: ''
  stderr: "tmpwj8z7ja0: /tmp/tmpwj8z7ja0.cpp:39: int main(): Assertion `candidate((\"\
    ><<>\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    bool result\
    \ = true;\n    for (auto &c : brackets) {\n        if (c != '<' && c != '>') {\n\
    \            result = false;\n            break;\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpic4nmc94: /tmp/tmpic4nmc94.cpp:29: int main(): Assertion `candidate((\"\
    <<<><>>>>\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    size_t\
    \ open_brackets = 0;\n    size_t close_brackets = 0;\n    for (size_t i = 0; i\
    \ < brackets.size(); i++) {\n        if (brackets[i] == '<') {\n            open_brackets++;\n\
    \        } else if (brackets[i] == '>') {\n            close_brackets++;\n   \
    \     }\n    }\n    return open_brackets == close_brackets;\n}\nint main() {\n\
    \    auto candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpqoitjap8: /tmp/tmpqoitjap8.cpp:32: int main(): Assertion `candidate((\"\
    ><<>\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    size_t\
    \ open_brackets = 0;\n    size_t close_brackets = 0;\n    for (size_t i = 0; i\
    \ < brackets.size(); ++i) {\n        if (brackets[i] == '<') {\n            ++open_brackets;\n\
    \        } else if (brackets[i] == '>') {\n            ++close_brackets;\n   \
    \     } else {\n            return false;\n        }\n    }\n    if (open_brackets\
    \ != close_brackets) {\n        return false;\n    }\n    return true;\n}\nint\
    \ main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpy9e77qtx: /tmp/tmpy9e77qtx.cpp:37: int main(): Assertion `candidate((\"\
    ><<>\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    // Your\
    \ code here\n    bool result = true;\n    for(int i = 0; i < brackets.size() -\
    \ 1; i++) {\n        if(brackets[i] != brackets[i + 1]) {\n            result\
    \ = false;\n            break;\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"<>\"))\
    \ == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpuzf3khl3: /tmp/tmpuzf3khl3.cpp:26: int main(): Assertion `candidate((\"\
    <>\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    bool result\
    \ = true;\n    for (size_t i = 0; i < brackets.length(); i++) {\n        if (brackets[i]\
    \ == '<') {\n            if (brackets[i + 1] == '>') {\n                result\
    \ = true;\n            } else {\n                result = false;\n           \
    \ }\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"\
    <<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n\
    \    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"\
    <<<><>>>>\")) == (false));\n    assert(candidate((\"><<>\")) == (false));\n  \
    \  assert(candidate((\"<\")) == (false));\n    assert(candidate((\"<<<<\")) ==\
    \ (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp2f1jpsab: /tmp/tmp2f1jpsab.cpp:32: int main(): Assertion `candidate((\"\
    <<<><>>>>\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    int len\
    \ = brackets.size();\n    for (int i = 0; i < len; ++i) {\n        if (brackets[i]\
    \ == '<') {\n            if (brackets[i + 1] == '>') {\n                return\
    \ true;\n            }\n        }\n    }\n    return false;\n}\nint main() {\n\
    \    auto candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp37p1_aqa: /tmp/tmp37p1_aqa.cpp:30: int main(): Assertion `candidate((\"\
    <<<><>>>>\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    bool result\
    \ = true;\n    for (size_t i = 0; i < brackets.length(); ++i) {\n        if (brackets[i]\
    \ != '<') {\n            result = false;\n            break;\n        }\n    }\n\
    \    for (size_t i = 0; i < brackets.length(); ++i) {\n        if (brackets[i]\
    \ != '>') {\n            result = false;\n            break;\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  stdout: ''
  stderr: "tmpxeg72lnc: /tmp/tmpxeg72lnc.cpp:31: int main(): Assertion `candidate((\"\
    <>\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    bool result\
    \ = true;\n    for (auto c : brackets) {\n        if (c != '<' && c != '>') {\n\
    \            result = false;\n            break;\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpopu50xoc: /tmp/tmpopu50xoc.cpp:29: int main(): Assertion `candidate((\"\
    <<<><>>>>\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    std::string\
    \ opening_brackets = brackets;\n    std::string closing_brackets = brackets;\n\
    \    opening_brackets.erase(opening_brackets.begin(), std::find(opening_brackets.begin(),\
    \ opening_brackets.end(), '<'));\n    closing_brackets.erase(closing_brackets.begin(),\
    \ std::find(closing_brackets.begin(), closing_brackets.end(), '>'));\n    return\
    \ opening_brackets == closing_brackets;\n}\nint main() {\n    auto candidate =\
    \ correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"\
    <<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n\
    \    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"\
    <<<><>>>>\")) == (false));\n    assert(candidate((\"><<>\")) == (false));\n  \
    \  assert(candidate((\"<\")) == (false));\n    assert(candidate((\"<<<<\")) ==\
    \ (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpx75x8xc2: /tmp/tmpx75x8xc2.cpp:22: int main(): Assertion `candidate((\"\
    <>\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    // Your\
    \ code here\n    bool result = true;\n    for(int i = 0; i < brackets.size();\
    \ i++) {\n        if(brackets[i] == '<') {\n            if(brackets[i+1] == '>')\
    \ {\n                result = false;\n            }\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp07d9xldv: /tmp/tmp07d9xldv.cpp:27: int main(): Assertion `candidate((\"\
    <>\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    bool result\
    \ = true;\n    for (size_t i = 0; i < brackets.length(); ++i) {\n        if (brackets[i]\
    \ == '<') {\n            if (brackets[i + 1] == '>') {\n                result\
    \ = true;\n                i += 2;\n            } else {\n                result\
    \ = false;\n            }\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"<>\"))\
    \ == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp3vj9alh7: /tmp/tmp3vj9alh7.cpp:33: int main(): Assertion `candidate((\"\
    <<<><>>>>\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    bool result\
    \ = true;\n    for (auto c : brackets) {\n        if (c == '<') {\n          \
    \  if (brackets[brackets.size() - 1] != '>') {\n                result = false;\n\
    \                break;\n            }\n        } else if (c == '>') {\n     \
    \       if (brackets[brackets.size() - 1] != '<') {\n                result =\
    \ false;\n                break;\n            }\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpkn3_sqno: /tmp/tmpkn3_sqno.cpp:32: int main(): Assertion `candidate((\"\
    <>\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    std::string\
    \ opening_brackets, closing_brackets;\n    opening_brackets = brackets;\n    closing_brackets\
    \ = brackets;\n    bool result = true;\n    for (size_t i = 0; i < brackets.size();\
    \ i++) {\n        if (brackets[i] == '<') {\n            opening_brackets[i] =\
    \ '<';\n            closing_brackets[i] = '>';\n        } else if (brackets[i]\
    \ == '>') {\n            opening_brackets[i] = '>';\n            closing_brackets[i]\
    \ = '<';\n        }\n    }\n    for (size_t i = 0; i < opening_brackets.size();\
    \ i++) {\n        if (opening_brackets[i] != closing_brackets[i]) {\n        \
    \    result = false;\n        }\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpt1wfo5u1: /tmp/tmpt1wfo5u1.cpp:36: int main(): Assertion `candidate((\"\
    <>\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    bool result\
    \ = true;\n    for (auto c : brackets) {\n        if (c != \">\" && c != \"<\"\
    \ && c != \">>\" && c != \"<<\") {\n            result = false;\n        }\n \
    \   }\n    return result;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpa2wkftkx.cpp: In function \u2018bool correct_bracketing(std::string)\u2019\
    :\n/tmp/tmpa2wkftkx.cpp:16:18: error: ISO C++ forbids comparison between pointer\
    \ and integer [-fpermissive]\n   16 |         if (c != \">\" && c != \"<\" &&\
    \ c != \">>\" && c != \"<<\") {\n      |                  ^~~\n/tmp/tmpa2wkftkx.cpp:16:30:\
    \ error: ISO C++ forbids comparison between pointer and integer [-fpermissive]\n\
    \   16 |         if (c != \">\" && c != \"<\" && c != \">>\" && c != \"<<\") {\n\
    \      |                              ^~~\n/tmp/tmpa2wkftkx.cpp:16:42: error:\
    \ ISO C++ forbids comparison between pointer and integer [-fpermissive]\n   16\
    \ |         if (c != \">\" && c != \"<\" && c != \">>\" && c != \"<<\") {\n  \
    \    |                                          ^~~~\n/tmp/tmpa2wkftkx.cpp:16:55:\
    \ error: ISO C++ forbids comparison between pointer and integer [-fpermissive]\n\
    \   16 |         if (c != \">\" && c != \"<\" && c != \">>\" && c != \"<<\") {\n\
    \      |                                                       ^~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    size_t\
    \ open_brackets = 0;\n    size_t close_brackets = 0;\n    for (size_t i = 0; i\
    \ < brackets.size(); ++i) {\n        if (brackets[i] == '<') {\n            open_brackets++;\n\
    \        } else if (brackets[i] == '>') {\n            close_brackets++;\n   \
    \     }\n    }\n    return open_brackets == close_brackets;\n}\nint main() {\n\
    \    auto candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpmjflt1qy: /tmp/tmpmjflt1qy.cpp:32: int main(): Assertion `candidate((\"\
    ><<>\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    std::string\
    \ opening_brackets, closing_brackets;\n    opening_brackets = brackets;\n    closing_brackets\
    \ = brackets;\n    opening_brackets.erase(std::remove(opening_brackets.begin(),\
    \ opening_brackets.end(), '<'), opening_brackets.end());\n    closing_brackets.erase(std::remove(closing_brackets.begin(),\
    \ closing_brackets.end(), '>'), closing_brackets.end());\n    return opening_brackets\
    \ == closing_brackets;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  stdout: ''
  stderr: "tmpp6c2k53l: /tmp/tmpp6c2k53l.cpp:23: int main(): Assertion `candidate((\"\
    <>\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    size_t\
    \ brackets_size = brackets.size();\n    size_t opening_brackets_size = 0;\n  \
    \  size_t closing_brackets_size = 0;\n    for (size_t i = 0; i < brackets_size;\
    \ ++i) {\n        if (brackets[i] == '<') {\n            opening_brackets_size++;\n\
    \        } else if (brackets[i] == '>') {\n            closing_brackets_size++;\n\
    \        }\n    }\n    if (opening_brackets_size != closing_brackets_size) {\n\
    \        return false;\n    }\n    for (size_t i = 0; i < brackets_size; ++i)\
    \ {\n        if (brackets[i] == '<') {\n            if (opening_brackets_size\
    \ == closing_brackets_size) {\n                return false;\n            }\n\
    \        } else if (brackets[i] == '>') {\n            if (opening_brackets_size\
    \ < closing_brackets_size) {\n                return false;\n            }\n \
    \       }\n    }\n    return true;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  stdout: ''
  stderr: "tmps3dxgp7y: /tmp/tmps3dxgp7y.cpp:42: int main(): Assertion `candidate((\"\
    <>\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    size_t\
    \ brackets_size = brackets.size();\n    size_t opening_brackets_size = 0;\n  \
    \  size_t closing_brackets_size = 0;\n    for (size_t i = 0; i < brackets_size;\
    \ ++i) {\n        if (brackets[i] == '<') {\n            opening_brackets_size++;\n\
    \        } else if (brackets[i] == '>') {\n            closing_brackets_size++;\n\
    \        }\n    }\n    if (opening_brackets_size == closing_brackets_size) {\n\
    \        return true;\n    } else {\n        return false;\n    }\n}\nint main()\
    \ {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"<>\"))\
    \ == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmptqhxc0b7: /tmp/tmptqhxc0b7.cpp:37: int main(): Assertion `candidate((\"\
    ><<>\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    size_t\
    \ open_brackets = 0;\n    size_t close_brackets = 0;\n    for (size_t i = 0; i\
    \ < brackets.size(); ++i) {\n        if (brackets[i] == '<') {\n            ++open_brackets;\n\
    \        } else if (brackets[i] == '>') {\n            ++close_brackets;\n   \
    \     } else {\n            return false;\n        }\n    }\n    return open_brackets\
    \ == close_brackets;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  stdout: ''
  stderr: "tmpwh5k1_4b: /tmp/tmpwh5k1_4b.cpp:34: int main(): Assertion `candidate((\"\
    ><<>\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    // Your\
    \ code here\n    bool result = true;\n    for (size_t i = 0; i < brackets.length();\
    \ i++) {\n        if (brackets[i] == '<') {\n            if (brackets[i + 1] ==\
    \ '>') {\n                result = true;\n            } else {\n             \
    \   result = false;\n            }\n        }\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp17px89od: /tmp/tmp17px89od.cpp:33: int main(): Assertion `candidate((\"\
    <<<><>>>>\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    size_t\
    \ brackets_size = brackets.size();\n    size_t opening_brackets_size = 0;\n  \
    \  for (size_t i = 0; i < brackets_size; ++i) {\n        if (brackets[i] == '<')\
    \ {\n            ++opening_brackets_size;\n        } else if (brackets[i] == '>')\
    \ {\n            --opening_brackets_size;\n        }\n    }\n    return opening_brackets_size\
    \ == 0;\n}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp8hcmzazp: /tmp/tmp8hcmzazp.cpp:32: int main(): Assertion `candidate((\"\
    ><<>\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    size_t\
    \ open_brackets = 0;\n    size_t close_brackets = 0;\n    for (size_t i = 0; i\
    \ < brackets.size(); ++i) {\n        if (brackets[i] == '<') {\n            open_brackets++;\n\
    \        } else if (brackets[i] == '>') {\n            close_brackets++;\n   \
    \     }\n    }\n    return open_brackets == close_brackets;\n}\nint main() {\n\
    \    auto candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpo_wub4kk: /tmp/tmpo_wub4kk.cpp:32: int main(): Assertion `candidate((\"\
    ><<>\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    int len\
    \ = brackets.size();\n    for (int i = 0; i < len; ++i) {\n        if (brackets[i]\
    \ == '<') {\n            if (brackets[i - 1] == '>') {\n                return\
    \ true;\n            }\n        }\n    }\n    return false;\n}\nint main() {\n\
    \    auto candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpb8s2gg0m: /tmp/tmpb8s2gg0m.cpp:26: int main(): Assertion `candidate((\"\
    <>\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    size_t\
    \ bracket_count = 0;\n    size_t open_bracket = 0;\n    size_t close_bracket =\
    \ 0;\n    bool result = true;\n    for (size_t i = 0; i < brackets.size(); i++)\
    \ {\n        if (brackets[i] == '<') {\n            open_bracket = i;\n      \
    \      bracket_count++;\n        }\n        if (brackets[i] == '>') {\n      \
    \      close_bracket = i;\n            bracket_count++;\n        }\n        if\
    \ (bracket_count == 2) {\n            if (open_bracket != close_bracket) {\n \
    \               result = false;\n            }\n            bracket_count = 0;\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  stdout: ''
  stderr: "tmptlgpa3me: /tmp/tmptlgpa3me.cpp:38: int main(): Assertion `candidate((\"\
    <>\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    size_t\
    \ open_brackets = 0;\n    size_t close_brackets = 0;\n    for (size_t i = 0; i\
    \ < brackets.size(); ++i) {\n        if (brackets[i] == '<') {\n            ++open_brackets;\n\
    \        } else if (brackets[i] == '>') {\n            ++close_brackets;\n   \
    \     } else {\n            return false;\n        }\n    }\n    return open_brackets\
    \ == close_brackets;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"<<><>>\"\
    )) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n    assert(candidate((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"<<<><>>>>\"\
    )) == (false));\n    assert(candidate((\"><<>\")) == (false));\n    assert(candidate((\"\
    <\")) == (false));\n    assert(candidate((\"<<<<\")) == (false));\n    assert(candidate((\"\
    >\")) == (false));\n    assert(candidate((\"<<>\")) == (false));\n    assert(candidate((\"\
    <><><<><>><>><<>\")) == (false));\n    assert(candidate((\"<><><<><>><>>><>\"\
    )) == (false));\n}\n"
  stdout: ''
  stderr: "tmpf_u2yddi: /tmp/tmpf_u2yddi.cpp:34: int main(): Assertion `candidate((\"\
    ><<>\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    bool result\
    \ = true;\n    for (auto c : brackets) {\n        if (c == '<') {\n          \
    \  if (brackets[brackets.size() - 1] != '>') {\n                result = false;\n\
    \            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpczogg8h6: /tmp/tmpczogg8h6.cpp:30: int main(): Assertion `candidate((\"\
    <<<><>>>>\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    int open_brackets\
    \ = 0;\n    int close_brackets = 0;\n    for(int i = 0; i < brackets.length();\
    \ i++) {\n        if(brackets[i] == '<') {\n            open_brackets++;\n   \
    \     }\n        else if(brackets[i] == '>') {\n            close_brackets++;\n\
    \        }\n    }\n    return open_brackets == close_brackets;\n}\nint main()\
    \ {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"<>\"))\
    \ == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
    <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmppu4ou022: /tmp/tmppu4ou022.cpp:33: int main(): Assertion `candidate((\"\
    ><<>\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    // Write\
    \ your code here.\n    bool correct = true;\n    int opening_brackets = 0;\n \
    \   int closing_brackets = 0;\n    for (int i = 0; i < brackets.length(); i++)\
    \ {\n        if (brackets[i] == '<') {\n            opening_brackets++;\n    \
    \    }\n        if (brackets[i] == '>') {\n            closing_brackets++;\n \
    \       }\n    }\n    if (opening_brackets == closing_brackets) {\n        correct\
    \ = false;\n    }\n    return correct;\n}\nint main() {\n    auto candidate =\
    \ correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n    assert(candidate((\"\
    <<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\")) == (true));\n\
    \    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(candidate((\"\
    <<<><>>>>\")) == (false));\n    assert(candidate((\"><<>\")) == (false));\n  \
    \  assert(candidate((\"<\")) == (false));\n    assert(candidate((\"<<<<\")) ==\
    \ (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp14qwc_vh: /tmp/tmp14qwc_vh.cpp:33: int main(): Assertion `candidate((\"\
    <>\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"<\" and \">\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing(\"<\")\n// False\n// >>> correct_bracketing(\"\
    <>\")\n// True\n// >>> correct_bracketing(\"<<><>>\")\n// True\n// >>> correct_bracketing(\"\
    ><<>\")\n// False\nbool correct_bracketing(std::string brackets) {\n    bool correct\
    \ = true;\n    for (auto c : brackets) {\n        if (c == '<') {\n          \
    \  if (brackets[brackets.size() - 1] != '>') {\n                correct = false;\n\
    \            }\n        }\n    }\n    return correct;\n}\nint main() {\n    auto\
    \ candidate = correct_bracketing;\n    assert(candidate((\"<>\")) == (true));\n\
    \    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"<><><<><>><>\"\
    )) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
    ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
    <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
    <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
    \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpw_riqr1h: /tmp/tmpw_riqr1h.cpp:30: int main(): Assertion `candidate((\"\
    <<<><>>>>\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
