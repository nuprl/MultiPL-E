name: HumanEval_102_choose_num
language: cpp
results:
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    long m\
    \ = 1;\n    long n = y;\n    long k = 0;\n    while (m <= n) {\n        if (m\
    \ % 2 == 0) {\n            ans = m;\n            break;\n        }\n        m\
    \ += 2;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp158ebpuk: /tmp/tmp158ebpuk.cpp:25: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ while (x+1 < y) {\n        if (x%2 == 0) {\n            ans = x;\n         \
    \   break;\n        }\n        x++;\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmposuyk2jk: /tmp/tmposuyk2jk.cpp:27: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ while (x+1 < y) {\n        if (x%2 == 0) {\n            ans = x;\n         \
    \   break;\n        }\n        x++;\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp1ciua6ub: /tmp/tmp1ciua6ub.cpp:27: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long mid = (x + y) / 2;\n        ans = choose_num(mid, y);\n \
    \       if (ans == -1) {\n            ans = choose_num(x, mid);\n        }\n \
    \   } else {\n        long mid = (y + x) / 2;\n        ans = choose_num(x, mid);\n\
    \        if (ans == -1) {\n            ans = choose_num(y, mid);\n        }\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n \
    \   assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12)) ==\
    \ (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // Write your code here\n \
    \   long ans = -1;\n    long mid = (x + y) / 2;\n    if (x >= y) {\n        while\
    \ (x <= mid) {\n            if (x % 2 == 0) {\n                ans = x;\n    \
    \            break;\n            }\n            x += 2;\n        }\n    } else\
    \ {\n        while (y <= mid) {\n            if (y % 2 == 0) {\n             \
    \   ans = y;\n                break;\n            }\n            y += 2;\n   \
    \     }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp5azv3hw7: /tmp/tmp5azv3hw7.cpp:34: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // Write your code here\n \
    \   long ans = -1;\n    if (x >= y) {\n        long mid = (x + y) / 2;\n     \
    \   if (mid % 2 == 0) {\n            ans = mid;\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp89ful4y8: /tmp/tmp89ful4y8.cpp:22: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ while (x+1 < y) {\n        long mid = (x+y)/2;\n        if (mid % 2 == 0) {\n\
    \            ans = mid;\n            x = mid+1;\n        } else {\n          \
    \  y = mid;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpyfoc70sv: /tmp/tmpyfoc70sv.cpp:29: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    long m\
    \ = 1;\n    long n = y;\n    long k = 0;\n    while (m <= n) {\n        k = m\
    \ * m + (n - m) * (n - m);\n        if (k >= x && k <= y) {\n            ans =\
    \ k;\n            break;\n        }\n        m += 2;\n        n -= 2;\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpicntawez: /tmp/tmpicntawez.cpp:27: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ while (x<y) {\n        long mid = (x+y)/2;\n        if (mid%2 == 0) {\n    \
    \        ans = mid;\n            x = mid+1;\n        } else {\n            y =\
    \ mid;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpofm7d07q: /tmp/tmpofm7d07q.cpp:29: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    long mid\
    \ = (x + y) / 2;\n    if (x <= mid) {\n        ans = x;\n    } else if (mid <=\
    \ y) {\n        ans = mid;\n    } else {\n        ans = y;\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpl1v6bci_: /tmp/tmpl1v6bci_.cpp:23: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ while (x % 2 == 0 && y % 2 == 0) {\n        long temp = x;\n        x = y;\n\
    \        y = temp;\n    }\n    if (x == y) {\n        ans = x;\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpl2tiu6of: /tmp/tmpl2tiu6of.cpp:28: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // Write your code here\n \
    \   long ans = -1;\n    long mid = (x + y) / 2;\n    if (mid % 2 == 0) {\n   \
    \     ans = mid;\n    }\n    else {\n        if (mid < x && mid < y) {\n     \
    \       ans = mid;\n        }\n        else if (mid > x && mid > y) {\n      \
    \      ans = mid;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpmj8icm6m: /tmp/tmpmj8icm6m.cpp:28: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ long mid = (x + y) / 2;\n    while (x <= y) {\n        if (mid % 2 == 0) {\n\
    \            ans = mid;\n            break;\n        }\n        mid = (mid + y)\
    \ / 2;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpxm8cjk8c: /tmp/tmpxm8cjk8c.cpp:29: int main(): Assertion `candidate((13),\
    \ (12)) == (-1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ long mid = (x + y) / 2;\n    if (mid % 2 == 0) {\n        ans = mid;\n    }\
    \ else {\n        ans = choose_num(mid, y);\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpsla7q2t_: /tmp/tmpsla7q2t_.cpp:27: int main(): Assertion `candidate((13),\
    \ (12)) == (-1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // Write your code here\n \
    \   long ans = -1;\n    if (x >= y) {\n        long mid = (x + y) / 2;\n     \
    \   if (mid % 2 == 0) {\n            ans = mid;\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpq_tebvvv: /tmp/tmpq_tebvvv.cpp:22: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long mid = x + (y - x) / 2;\n        ans = choose_num(mid, y);\n\
    \        if (ans == -1) {\n            ans = mid;\n        }\n    } else {\n \
    \       long mid = y + (x - y) / 2;\n        ans = choose_num(x, mid);\n     \
    \   if (ans == -1) {\n            ans = mid;\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ while (x<y) {\n        long mid = x + (y-x)/2;\n        if (mid % 2 == 0) {\n\
    \            ans = mid;\n            break;\n        }\n        x = mid;\n   \
    \ }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpp3eg18ag: /tmp/tmpp3eg18ag.cpp:29: int main(): Assertion `candidate((13),\
    \ (12)) == (-1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    long mid\
    \ = (x + y) / 2;\n    if (x <= mid) {\n        ans = x;\n    } else if (y <= mid)\
    \ {\n        ans = y;\n    } else {\n        ans = mid;\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpfi6t4zy6: /tmp/tmpfi6t4zy6.cpp:23: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ while (x<y) {\n        long mid = (x+y)/2;\n        if (mid%2 == 0) {\n    \
    \        ans = mid;\n            break;\n        }\n        if (mid%2 == 1) {\n\
    \            y = mid;\n        }\n        else {\n            x = mid;\n     \
    \   }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpbzbkhr4x: /tmp/tmpbzbkhr4x.cpp:33: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long mid = (x + y) / 2;\n        long a = choose_num(x, mid);\n\
    \        long b = choose_num(mid, y);\n        if ((a != -1) && (b != -1)) {\n\
    \            ans = a > b ? a : b;\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpwiasxeca: /tmp/tmpwiasxeca.cpp:23: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // Write your code here\n \
    \   long ans = -1;\n    long mid = (x + y) / 2;\n    long l = (x + y) % 2;\n \
    \   if (l == 0)\n        mid = x + y;\n    else if (l == 1)\n        mid = y +\
    \ x;\n    long temp = 0;\n    while (temp < mid) {\n        temp = temp + 2;\n\
    \    }\n    ans = temp;\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpgibfyfat: /tmp/tmpgibfyfat.cpp:27: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if (x >= y) {\n        return\
    \ -1;\n    }\n    long mid = x + (y - x) / 2;\n    if (mid % 2 == 0) {\n     \
    \   return mid;\n    }\n    return choose_num(mid, y);\n}\nint main() {\n    auto\
    \ candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpkv_bet7f: /tmp/tmpkv_bet7f.cpp:23: int main(): Assertion `candidate((33),\
    \ (12354)) == (12354)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if (x >= y) {\n        return\
    \ -1;\n    }\n    long mid = (x + y) / 2;\n    if (mid % 2 == 0) {\n        return\
    \ mid;\n    }\n    return choose_num(mid, y);\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpm0yxrnqs: /tmp/tmpm0yxrnqs.cpp:23: int main(): Assertion `candidate((33),\
    \ (12354)) == (12354)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long mid = (x + y) / 2;\n        if (mid % 2 == 0) {\n       \
    \     ans = mid;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpamn3g4zh: /tmp/tmpamn3g4zh.cpp:21: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long mid = x + (y - x) / 2;\n        if (mid % 2 == 0) {\n   \
    \         ans = mid;\n        }\n    }\n    return ans;\n}\nint main() {\n   \
    \ auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n \
    \   assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpn2s8nm2b: /tmp/tmpn2s8nm2b.cpp:21: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long mid = x + (y - x) / 2;\n        ans = choose_num(mid, y);\n\
    \        if (ans == -1) {\n            ans = mid;\n        }\n    } else {\n \
    \       long mid = y + (x - y) / 2;\n        ans = choose_num(x, mid);\n     \
    \   if (ans == -1) {\n            ans = mid;\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // Write your code here\n \
    \   long ans = -1;\n    if (x >= y) {\n        long mid = x + (y - x) / 2;\n \
    \       if (mid % 2 == 0) {\n            ans = mid;\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmps2ch7r9e: /tmp/tmps2ch7r9e.cpp:22: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if (x > y) {\n        long\
    \ temp = x;\n        x = y;\n        y = temp;\n    }\n    long ans = -1;\n  \
    \  while (x != y) {\n        if (x % 2 == 0) {\n            x = x / 2;\n     \
    \       ans = ans * 2 + x;\n        } else {\n            y = y / 2;\n       \
    \     ans = ans * 2 + y;\n        }\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp1z8sezng: /tmp/tmp1z8sezng.cpp:29: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // Write your code here\n \
    \   long ans = -1;\n    long mid = (x + y) / 2;\n    long l1 = (x % 2 == 0);\n\
    \    long l2 = (y % 2 == 0);\n    if (l1 && l2) {\n        ans = mid;\n    } else\
    \ if (l1) {\n        ans = mid;\n    } else if (l2) {\n        ans = mid;\n  \
    \  } else {\n        ans = -1;\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpvgiyb_qv: /tmp/tmpvgiyb_qv.cpp:28: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ long mid = x + (y - x) / 2;\n    while (x <= y) {\n        if (mid % 2 == 0)\
    \ {\n            ans = mid;\n            break;\n        }\n        mid++;\n \
    \   }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n  \
    \  assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12)) ==\
    \ (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpx4ukiw_q: /tmp/tmpx4ukiw_q.cpp:29: int main(): Assertion `candidate((13),\
    \ (12)) == (-1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    assert(x >= 0 && y >= 0);\n\
    \    long ans = -1;\n    if (x <= y) {\n        long mid = (x + y) / 2;\n    \
    \    if (mid % 2 == 0) {\n            ans = mid;\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp41rzxa3v: /tmp/tmp41rzxa3v.cpp:22: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ while (x<y) {\n        long mid = x + (y-x)/2;\n        if (mid % 2 == 0) {\n\
    \            ans = mid;\n            break;\n        }\n        x = mid;\n   \
    \ }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp3k3ruohn: /tmp/tmp3k3ruohn.cpp:29: int main(): Assertion `candidate((13),\
    \ (12)) == (-1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    long m\
    \ = 1;\n    long n = y;\n    long temp;\n    while (m <= n) {\n        temp =\
    \ m * m;\n        if (temp > n) {\n            temp = n;\n        }\n        if\
    \ (temp >= x && temp <= y) {\n            ans = temp;\n            break;\n  \
    \      }\n        m += 2;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp9ohpba4z: /tmp/tmp9ohpba4z.cpp:29: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ long mid = (x + y) / 2;\n    while (x <= y) {\n        if ((x % 2) == 0) {\n\
    \            ans = mid;\n            break;\n        }\n        mid = (mid + y)\
    \ / 2;\n        x++;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmphvjjzfo7: /tmp/tmphvjjzfo7.cpp:29: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >\
    \ y) {\n        swap(x, y);\n    }\n    // If x is even, then y must be even.\n\
    \    if (x % 2 == 0) {\n        if (y % 2 == 0) {\n            ans = x;\n    \
    \    } else {\n            ans = -1;\n        }\n    } else {\n        if (y %\
    \ 2 == 0) {\n            ans = y;\n        } else {\n            ans = -1;\n \
    \       }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzj99602t.cpp: In function \u2018long int choose_num(long int, long\
    \ int)\u2019:\n/tmp/tmpzj99602t.cpp:12:9: error: \u2018swap\u2019 was not declared\
    \ in this scope\n   12 |         swap(x, y);\n      |         ^~~~\n/tmp/tmpzj99602t.cpp:12:9:\
    \ note: suggested alternatives:\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpzj99602t.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:2029:5:\
    \ note:   \u2018std::__cxx11::swap\u2019\n 2029 |     swap(match_results<_Bi_iter,\
    \ _Alloc>& __lhs,\n      |     ^~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/exception:143,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpzj99602t.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/exception_ptr.h:166:5:\
    \ note:   \u2018std::__exception_ptr::swap\u2019\n  166 |     swap(exception_ptr&\
    \ __lhs, exception_ptr& __rhs)\n      |     ^~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/nested_exception.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/exception:144,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/incl"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ while (x+1 < y) {\n        if ((x & 1) == 0) {\n            ans = x;\n     \
    \       break;\n        }\n        x <<= 1;\n        y >>= 1;\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpapagenuw: /tmp/tmpapagenuw.cpp:28: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    assert(x >= 0 && y >= 0);\n\
    \    long ans = -1;\n    long mid = (x + y) / 2;\n    long diff = x - mid;\n \
    \   if (diff % 2 == 0) {\n        ans = mid;\n    } else {\n        ans = choose_num(mid,\
    \ y);\n    }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp7wlgpzwx: /tmp/tmp7wlgpzwx.cpp:24: int main(): Assertion `candidate((13),\
    \ (12)) == (-1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long mid = x + (y - x) / 2;\n        ans = choose_num(mid, y);\n\
    \        if (ans == -1) {\n            ans = mid;\n        }\n    } else {\n \
    \       long mid = y + (x - y) / 2;\n        ans = choose_num(x, mid);\n     \
    \   if (ans == -1) {\n            ans = mid;\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ while (x++ < y) {\n        if (x % 2 == 0) {\n            ans = x;\n       \
    \     break;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmppo1bguvs: /tmp/tmppo1bguvs.cpp:28: int main(): Assertion `candidate((33),\
    \ (12354)) == (12354)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if (x >= y) {\n        return\
    \ -1;\n    }\n    long mid = x + (y - x) / 2;\n    if (mid % 2 == 0) {\n     \
    \   return mid;\n    }\n    return choose_num(mid, y);\n}\nint main() {\n    auto\
    \ candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpkvkumkbf: /tmp/tmpkvkumkbf.cpp:23: int main(): Assertion `candidate((33),\
    \ (12354)) == (12354)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ long mid = (x + y) / 2;\n    while (x <= y) {\n        if (mid % 2 == 0) {\n\
    \            ans = mid;\n            break;\n        }\n        mid = (mid + y)\
    \ / 2;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpmmwyv6qz: /tmp/tmpmmwyv6qz.cpp:29: int main(): Assertion `candidate((13),\
    \ (12)) == (-1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if (x > y) {\n        long\
    \ temp = x;\n        x = y;\n        y = temp;\n    }\n    long ans = -1;\n  \
    \  for (long i = x; i <= y; i++) {\n        if (i % 2 == 0) {\n            ans\
    \ = i;\n            break;\n        }\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp2ote_pg3: /tmp/tmp2ote_pg3.cpp:26: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long mid = x + (y - x) / 2;\n        ans = choose_num(mid, y);\n\
    \        if (ans == -1) {\n            ans = mid;\n        }\n    } else {\n \
    \       long mid = y + (x - y) / 2;\n        ans = choose_num(x, mid);\n     \
    \   if (ans == -1) {\n            ans = mid;\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ while (x<y) {\n        long mid = (x + y)/2;\n        if (mid % 2 == 0) {\n\
    \            ans = mid;\n            break;\n        }\n        else if (mid %\
    \ 2 != 0) {\n            y = mid;\n        }\n        else {\n            x =\
    \ mid;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpd0kjtlbr: /tmp/tmpd0kjtlbr.cpp:33: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ while (x<y) {\n        long mid = (x+y)/2;\n        if (mid%2 == 0) {\n    \
    \        ans = mid;\n            break;\n        }\n        if (mid%2 != 0) {\n\
    \            y = mid;\n        }\n        else {\n            x = mid;\n     \
    \   }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpbqytijyb: /tmp/tmpbqytijyb.cpp:33: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long mid = (x + y) / 2;\n        if (mid % 2 == 0) {\n       \
    \     ans = mid;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp47_jiqh6: /tmp/tmp47_jiqh6.cpp:21: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long mid = (x + y) / 2;\n        if (mid % 2 == 0) {\n       \
    \     ans = mid;\n        } else {\n            ans = choose_num(mid, y);\n  \
    \      }\n    } else {\n        long mid = (x + y) / 2;\n        if (mid % 2 ==\
    \ 0) {\n            ans = mid;\n        } else {\n            ans = choose_num(x,\
    \ mid);\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp3uw_hj5x: /tmp/tmp3uw_hj5x.cpp:30: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    long mid\
    \ = (x + y) / 2;\n    if (x <= mid) {\n        ans = x;\n    } else if (y <= mid)\
    \ {\n        ans = y;\n    } else {\n        ans = mid;\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpfz4vn6tx: /tmp/tmpfz4vn6tx.cpp:23: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if (x >= y) {\n        return\
    \ -1;\n    }\n    long mid = (x + y) / 2;\n    if (mid % 2 == 0) {\n        return\
    \ mid;\n    } else {\n        return choose_num(mid, y);\n    }\n}\nint main()\
    \ {\n    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp0mc1z6s1: /tmp/tmp0mc1z6s1.cpp:24: int main(): Assertion `candidate((33),\
    \ (12354)) == (12354)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ while (x != y) {\n        long mid = (x + y) / 2;\n        if (mid % 2 == 0)\
    \ {\n            ans = mid;\n            x = mid + 1;\n        } else {\n    \
    \        y = mid;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpp8tc1ysp: /tmp/tmpp8tc1ysp.cpp:29: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ while (y) {\n        if (x % 2 == 0) {\n            ans = y;\n            break;\n\
    \        }\n        y /= 2;\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp3apoheyg: /tmp/tmp3apoheyg.cpp:27: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long mid = x + (y - x) / 2;\n        long a = choose_num(x, mid);\n\
    \        long b = choose_num(mid, y);\n        ans = a > b ? a : b;\n    } else\
    \ {\n        long mid = y + (x - y) / 2;\n        long a = choose_num(y, mid);\n\
    \        long b = choose_num(mid, x);\n        ans = a > b ? a : b;\n    }\n \
    \   return ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // Write your code here\n \
    \   long ans = -1;\n    if (x >= y) {\n        long mid = (x + y) / 2;\n     \
    \   if (mid % 2 == 0) {\n            ans = mid;\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp3nysd788: /tmp/tmp3nysd788.cpp:22: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ while (x+1 < y) {\n        long mid = (x+y)/2;\n        if (mid % 2 == 0) {\n\
    \            ans = mid;\n            x = mid;\n        } else {\n            y\
    \ = mid;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpo0ionzbg: /tmp/tmpo0ionzbg.cpp:29: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ while (x<y) {\n        long mid = (x+y)/2;\n        if (mid%2 == 0) {\n    \
    \        ans = mid;\n            x = mid+1;\n        } else {\n            y =\
    \ mid;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp3_c6c1je: /tmp/tmp3_c6c1je.cpp:29: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // Write your code here\n \
    \   long ans = -1;\n    if (x >= y) {\n        long mid = x + (y - x) / 2;\n \
    \       long res = choose_num(mid, y);\n        if (res > ans)\n            ans\
    \ = res;\n    }\n    else if (x <= y) {\n        long mid = x + (y - x) / 2;\n\
    \        long res = choose_num(x, mid);\n        if (res > ans)\n            ans\
    \ = res;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    long m\
    \ = 1;\n    long n = y;\n    long k = 0;\n    long temp;\n    while(m <= n) {\n\
    \        temp = m;\n        m = n;\n        n = temp;\n        k++;\n    }\n \
    \   while(k >= 0) {\n        temp = k;\n        k = k / 2;\n        if(temp %\
    \ 2 == 0) {\n            ans = temp;\n            break;\n        }\n    }\n \
    \   return ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmptj_01zrt: /tmp/tmptj_01zrt.cpp:33: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if (x >= y) {\n        return\
    \ -1;\n    }\n    long mid = (x + y) / 2;\n    if (mid % 2 == 0) {\n        return\
    \ mid;\n    }\n    return choose_num(mid, y);\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpi0hngycs: /tmp/tmpi0hngycs.cpp:23: int main(): Assertion `candidate((33),\
    \ (12354)) == (12354)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    long temp;\n\
    \    temp = x;\n    while (temp <= y) {\n        if (temp % 2 == 0) {\n      \
    \      ans = temp;\n            break;\n        }\n        temp++;\n    }\n  \
    \  return ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpy2mxqefp: /tmp/tmpy2mxqefp.cpp:24: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ while (x+1 < y) {\n        if (x%2 == 0) {\n            x = x + 1;\n       \
    \ } else {\n            y = y - 1;\n        }\n    }\n    if (x%2 == 0) {\n  \
    \      ans = x;\n    }\n    return ans;\n}\nint main() {\n    auto candidate =\
    \ choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpn8m3o9kp: /tmp/tmpn8m3o9kp.cpp:30: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // Write your code here\n \
    \   long ans = -1;\n    long m = x;\n    long n = y;\n    long temp;\n    while(m\
    \ <= n) {\n        temp = m*m;\n        if(temp > n) {\n            temp = n;\n\
    \        }\n        if(temp % 2 == 0) {\n            ans = temp;\n           \
    \ break;\n        }\n        m += 1;\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpvh0f4qxq: /tmp/tmpvh0f4qxq.cpp:30: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    assert(x >= 0 && y >= 0);\n\
    \    if (x > y) {\n        long temp = x;\n        x = y;\n        y = temp;\n\
    \    }\n    long ans = -1;\n    for (long i = 0; i <= y; i++) {\n        if (x\
    \ % 2 == 0) {\n            ans = i;\n            break;\n        }\n        x\
    \ /= 2;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpx2mkqgqv: /tmp/tmpx2mkqgqv.cpp:28: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ while (x<y) {\n        long mid = (x + y)/2;\n        if (mid % 2 == 0) {\n\
    \            ans = mid;\n            break;\n        }\n        else if (mid <\
    \ y) {\n            x = mid + 1;\n        }\n        else {\n            y = mid\
    \ - 1;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpz6zuzn6w: /tmp/tmpz6zuzn6w.cpp:34: int main(): Assertion `candidate((13),\
    \ (12)) == (-1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    long mid\
    \ = (x + y) / 2;\n    if (mid % 2 == 0) {\n        ans = mid;\n    } else {\n\
    \        if (x <= mid) {\n            ans = mid;\n        } else {\n         \
    \   ans = mid;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpkpy0dk1o: /tmp/tmpkpy0dk1o.cpp:25: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    assert(x >= 0 && y >= 0);\n\
    \    long ans = -1;\n    if (x > y) {\n        long temp = x;\n        x = y;\n\
    \        y = temp;\n    }\n    for (long i = x; i <= y; i++) {\n        if (i\
    \ % 2 == 0) {\n            ans = i;\n            break;\n        }\n    }\n  \
    \  return ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpqf9dchb7: /tmp/tmpqf9dchb7.cpp:27: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >\
    \ y) {\n        swap(x, y);\n    }\n    for (long i = x; i <= y; i++) {\n    \
    \    if (i % 2 == 0) {\n            ans = i;\n            break;\n        }\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n \
    \   assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12)) ==\
    \ (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpmcjkw3eh.cpp: In function \u2018long int choose_num(long int, long\
    \ int)\u2019:\n/tmp/tmpmcjkw3eh.cpp:12:9: error: \u2018swap\u2019 was not declared\
    \ in this scope\n   12 |         swap(x, y);\n      |         ^~~~\n/tmp/tmpmcjkw3eh.cpp:12:9:\
    \ note: suggested alternatives:\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpmcjkw3eh.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:2029:5:\
    \ note:   \u2018std::__cxx11::swap\u2019\n 2029 |     swap(match_results<_Bi_iter,\
    \ _Alloc>& __lhs,\n      |     ^~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/exception:143,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpmcjkw3eh.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/exception_ptr.h:166:5:\
    \ note:   \u2018std::__exception_ptr::swap\u2019\n  166 |     swap(exception_ptr&\
    \ __lhs, exception_ptr& __rhs)\n      |     ^~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/nested_exception.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/exception:144,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/incl"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long mid = (x + y) / 2;\n        long mid2 = mid * mid;\n    \
    \    if (mid2 > x) {\n            ans = mid;\n        } else if (mid2 < y) {\n\
    \            ans = mid;\n        } else {\n            ans = mid2;\n        }\n\
    \    } else {\n        long mid = (x + y) / 2;\n        long mid2 = mid * mid;\n\
    \        if (mid2 < y) {\n            ans = mid;\n        } else {\n         \
    \   ans = mid2;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpm4x5qzwg: /tmp/tmpm4x5qzwg.cpp:34: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // Write your code here\n \
    \   long ans = -1;\n    if (x >= y) {\n        long mid = (x + y) / 2;\n     \
    \   if (mid % 2 == 0) {\n            ans = mid;\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp8iyd0mwm: /tmp/tmp8iyd0mwm.cpp:22: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >\
    \ y) {\n        swap(x, y);\n    }\n    // If x is smaller than y, then x must\
    \ be even.\n    if (x <= y) {\n        // If x is even, then y must be even.\n\
    \        if ((x % 2) == 0) {\n            if ((y % 2) == 0) {\n              \
    \  ans = x;\n            }\n            else {\n                ans = y;\n   \
    \         }\n        }\n        // If x is odd, then y must be odd.\n        else\
    \ {\n            if ((y % 2) == 1) {\n                ans = x;\n            }\n\
    \            else {\n                ans = y;\n            }\n        }\n    }\n\
    \    // If y is smaller than x, then y must be even.\n    else {\n        // If\
    \ y is even, then x must be even.\n        if ((y % 2) == 0) {\n            if\
    \ ((x % 2) == 0) {\n                ans = y;\n            }\n            else\
    \ {\n                ans = x;\n            }\n        }\n        // If y is odd,\
    \ then x must be odd.\n        else {\n            if ((x % 2) == 1) {\n     \
    \           ans = y;\n            }\n            else {\n                ans =\
    \ x;\n            }\n        }\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpbniblvkb.cpp: In function \u2018long int choose_num(long int, long\
    \ int)\u2019:\n/tmp/tmpbniblvkb.cpp:12:9: error: \u2018swap\u2019 was not declared\
    \ in this scope\n   12 |         swap(x, y);\n      |         ^~~~\n/tmp/tmpbniblvkb.cpp:12:9:\
    \ note: suggested alternatives:\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpbniblvkb.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:2029:5:\
    \ note:   \u2018std::__cxx11::swap\u2019\n 2029 |     swap(match_results<_Bi_iter,\
    \ _Alloc>& __lhs,\n      |     ^~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/exception:143,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpbniblvkb.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/exception_ptr.h:166:5:\
    \ note:   \u2018std::__exception_ptr::swap\u2019\n  166 |     swap(exception_ptr&\
    \ __lhs, exception_ptr& __rhs)\n      |     ^~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/nested_exception.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/exception:144,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/incl"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ while (x != y) {\n        if (x % 2 == 0) {\n            x = x / 2;\n      \
    \  } else {\n            y = y / 2;\n        }\n    }\n    if (x == y) {\n   \
    \     ans = x;\n    }\n    return ans;\n}\nint main() {\n    auto candidate =\
    \ choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpp66_6g1s: /tmp/tmpp66_6g1s.cpp:30: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long mid = (x + y) / 2;\n        ans = choose_num(mid, y);\n \
    \       if (ans == -1) {\n            ans = choose_num(x, mid);\n        }\n \
    \   } else {\n        long mid = (x + y) / 2;\n        ans = choose_num(x, mid);\n\
    \        if (ans == -1) {\n            ans = choose_num(y, mid);\n        }\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n \
    \   assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12)) ==\
    \ (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    long m\
    \ = 1;\n    long n = y;\n    long k;\n    long temp;\n    while (m <= n) {\n \
    \       k = m;\n        temp = m;\n        while (temp <= n) {\n            if\
    \ (k % 2 == 0 && temp % 2 == 0) {\n                ans = temp;\n             \
    \   break;\n            }\n            temp++;\n        }\n        m++;\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpa7e_sz3q: /tmp/tmpa7e_sz3q.cpp:32: int main(): Assertion `candidate((13),\
    \ (12)) == (-1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    assert(x >= 0 && y >= 0);\n\
    \    long ans = -1;\n    long mid = (x + y) / 2;\n    if (mid % 2 == 0) {\n  \
    \      ans = mid;\n    }\n    if (mid > x) {\n        ans = mid;\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpawnn5e68: /tmp/tmpawnn5e68.cpp:23: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // Write your code here\n \
    \   long ans = -1;\n    long mid = (x + y) / 2;\n    if (mid % 2 == 0) {\n   \
    \     ans = mid;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp5xk2i9kw: /tmp/tmp5xk2i9kw.cpp:20: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ while (x != y) {\n        if (x % 2 == 0) {\n            x = x / 2;\n      \
    \  } else {\n            y = y / 2;\n        }\n    }\n    if (x == y) {\n   \
    \     ans = x;\n    }\n    return ans;\n}\nint main() {\n    auto candidate =\
    \ choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp520ud9p2: /tmp/tmp520ud9p2.cpp:30: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long mid = x + (y - x) / 2;\n        ans = choose_num(mid, y);\n\
    \        if (ans == -1) {\n            ans = mid;\n        }\n    } else {\n \
    \       long mid = y + (x - y) / 2;\n        ans = choose_num(x, mid);\n     \
    \   if (ans == -1) {\n            ans = mid;\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ while (x<y) {\n        long mid = (x+y)/2;\n        if (mid%2 == 0) {\n    \
    \        ans = mid;\n            break;\n        }\n        if (mid%2 != 0) {\n\
    \            y = mid;\n        }\n        else {\n            x = mid;\n     \
    \   }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpnjw8n1is: /tmp/tmpnjw8n1is.cpp:33: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long mid = (x + y) / 2;\n        ans = choose_num(x, mid);\n \
    \       if (ans == -1) {\n            ans = choose_num(mid + 1, y);\n        }\n\
    \    } else {\n        long mid = (x + y) / 2;\n        ans = choose_num(mid,\
    \ y);\n        if (ans == -1) {\n            ans = choose_num(x, mid - 1);\n \
    \       }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ while (x+1 < y) {\n        long mid = (x+y)/2;\n        if (mid % 2 == 0) {\n\
    \            ans = mid;\n            x = mid;\n        } else {\n            y\
    \ = mid;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmptfts57ak: /tmp/tmptfts57ak.cpp:29: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long mid = x + (y - x) / 2;\n        ans = choose_num(mid, y);\n\
    \        if (ans == -1) {\n            ans = mid;\n        }\n    } else {\n \
    \       long mid = y + (x - y) / 2;\n        ans = choose_num(x, mid);\n     \
    \   if (ans == -1) {\n            ans = mid;\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long mid = x + (y - x) / 2;\n        ans = choose_num(mid, y);\n\
    \        if (ans == -1) {\n            ans = mid;\n        }\n    } else {\n \
    \       long mid = y + (x - y) / 2;\n        ans = choose_num(x, mid);\n     \
    \   if (ans == -1) {\n            ans = mid;\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ while (x != y) {\n        if (x % 2 == 0) {\n            x = x / 2;\n      \
    \      ans = ans * 2 + x;\n        } else {\n            y = y / 2;\n        \
    \    ans = ans * 2 + y;\n        }\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpyewugkqm: /tmp/tmpyewugkqm.cpp:29: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    long mid\
    \ = (x + y) / 2;\n    long left_bound = mid;\n    long right_bound = mid;\n  \
    \  while (left_bound < right_bound) {\n        long mid = (left_bound + right_bound)\
    \ / 2;\n        if (mid * mid <= left_bound * right_bound) {\n            ans\
    \ = mid;\n            left_bound = mid;\n        } else {\n            right_bound\
    \ = mid;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpaalvtrw3: /tmp/tmpaalvtrw3.cpp:27: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ while (x % 2 == 0 && y % 2 == 0) {\n        long temp = x;\n        x = y;\n\
    \        y = temp;\n    }\n    if (x == y) {\n        ans = x;\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpy2hp1ask: /tmp/tmpy2hp1ask.cpp:28: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long mid = x + (y - x) / 2;\n        ans = choose_num(mid, y);\n\
    \        if (ans == -1) {\n            ans = mid;\n        }\n    } else {\n \
    \       long mid = y + (x - y) / 2;\n        ans = choose_num(x, mid);\n     \
    \   if (ans == -1) {\n            ans = mid;\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ while (x+1 < y) {\n        long mid = (x+y)/2;\n        if (mid%2 == 0) {\n\
    \            ans = mid;\n            x = mid+1;\n        } else {\n          \
    \  y = mid;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpadirn_6o: /tmp/tmpadirn_6o.cpp:29: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long mid = (x + y) / 2;\n        if (mid % 2 == 0) {\n       \
    \     ans = mid;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp7gj567hp: /tmp/tmp7gj567hp.cpp:21: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long mid = x + (y - x) / 2;\n        if (mid % 2 == 0) {\n   \
    \         ans = mid;\n        }\n        else {\n            ans = choose_num(mid,\
    \ y);\n        }\n    }\n    else {\n        long mid = y + (x - y) / 2;\n   \
    \     if (mid % 2 == 0) {\n            ans = mid;\n        }\n        else {\n\
    \            ans = choose_num(x, mid);\n        }\n    }\n    return ans;\n}\n\
    int main() {\n    auto candidate = choose_num;\n    assert(candidate((12), (15))\
    \ == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ long mid = (x + y) / 2;\n    while (x != mid && y != mid && x % 2 == 0 && y\
    \ % 2 == 0) {\n        if (x <= mid) {\n            x = mid + 1;\n        } else\
    \ {\n            y = mid - 1;\n        }\n        mid = (x + y) / 2;\n    }\n\
    \    if (x == mid) {\n        ans = mid;\n    } else if (y == mid) {\n       \
    \ ans = mid;\n    } else {\n        ans = -1;\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = choose_num;\n    assert(candidate((12), (15))\
    \ == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp980hqgp0: /tmp/tmp980hqgp0.cpp:36: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // Write your code here\n \
    \   long ans = -1;\n    long m = 1;\n    long n = y;\n    long q = x;\n    long\
    \ r = x;\n    long s = 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n\
    \    long w = 1;\n    long x = x;\n    long y = y;\n    long z = x;\n    long\
    \ a = x;\n    long b = y;\n    long c = x;\n    long d = y;\n    long e = x;\n\
    \    long f = y;\n    long g = x;\n    long h = y;\n    long i = x;\n    long\
    \ j = y;\n    long k = x;\n    long l = y;\n    long m = 1;\n    long n = y;\n\
    \    long q = x;\n    long r = x;\n    long s = 1;\n    long t = 1;\n    long\
    \ u = 1;\n    long v = 1;\n    long w = 1;\n    long x = x;\n    long y = y;\n\
    \    long z = x;\n    long a = x;\n    long b = y;\n    long c = x;\n    long\
    \ d = y;\n    long e = x;\n    long f = y;\n    long g = x;\n    long h = y;\n\
    \    long i = x;\n    long j = y;\n    long k = x;\n    long l = y;\n    long\
    \ m = 1;\n    long n = y;\n    long q = x;\n    long r = x;\n    long s = 1;\n\
    \    long t = 1;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n    long\
    \ x = x;\n    long y = y;\n    long z = x;\n    long a = x;\n    long b = y;\n\
    \    long c = x;\n    long d = y;\n    long e = x;\n    long f = y;\n    long\
    \ g = x;\n    long h = y;\n    long i = x;\n    long j = y;\n    long k = x;\n\
    \    long l = y;\n    long m = 1;\n    long n = y;\n    long q = x;\n    long\
    \ r = x;\n    long s = 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n\
    \    long w = 1;\n    long x = x;\n    long y = y;\n    long z = x;\n    long\
    \ a = x;\n    long b = y;\n    long c = x;\n    long d = y;\n    long e = x;\n\
    \    long f = y;\n    long g = x;\n    long h = y;\n    long i = x;\n    long\
    \ j = y;\n    long k = x;\n    long l = y;\n    long m = 1;\n    long n = y;\n\
    \    long q = x;\n    long r = x;\n    \n}\nint main() {\n    auto candidate =\
    \ choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdsq1z0hj.cpp: In function \u2018long int choose_num(long int, long\
    \ int)\u2019:\n/tmp/tmpdsq1z0hj.cpp:21:10: error: declaration of \u2018long int\
    \ x\u2019 shadows a parameter\n   21 |     long x = x;\n      |          ^\n/tmp/tmpdsq1z0hj.cpp:22:10:\
    \ error: declaration of \u2018long int y\u2019 shadows a parameter\n   22 |  \
    \   long y = y;\n      |          ^\n/tmp/tmpdsq1z0hj.cpp:36:10: error: redeclaration\
    \ of \u2018long int m\u2019\n   36 |     long m = 1;\n      |          ^\n/tmp/tmpdsq1z0hj.cpp:12:10:\
    \ note: \u2018long int m\u2019 previously declared here\n   12 |     long m =\
    \ 1;\n      |          ^\n/tmp/tmpdsq1z0hj.cpp:37:10: error: redeclaration of\
    \ \u2018long int n\u2019\n   37 |     long n = y;\n      |          ^\n/tmp/tmpdsq1z0hj.cpp:13:10:\
    \ note: \u2018long int n\u2019 previously declared here\n   13 |     long n =\
    \ y;\n      |          ^\n/tmp/tmpdsq1z0hj.cpp:38:10: error: redeclaration of\
    \ \u2018long int q\u2019\n   38 |     long q = x;\n      |          ^\n/tmp/tmpdsq1z0hj.cpp:14:10:\
    \ note: \u2018long int q\u2019 previously declared here\n   14 |     long q =\
    \ x;\n      |          ^\n/tmp/tmpdsq1z0hj.cpp:39:10: error: redeclaration of\
    \ \u2018long int r\u2019\n   39 |     long r = x;\n      |          ^\n/tmp/tmpdsq1z0hj.cpp:15:10:\
    \ note: \u2018long int r\u2019 previously declared here\n   15 |     long r =\
    \ x;\n      |          ^\n/tmp/tmpdsq1z0hj.cpp:40:10: error: redeclaration of\
    \ \u2018long int s\u2019\n   40 |     long s = 1;\n      |          ^\n/tmp/tmpdsq1z0hj.cpp:16:10:\
    \ note: \u2018long int s\u2019 previously declared here\n   16 |     long s =\
    \ 1;\n      |          ^\n/tmp/tmpdsq1z0hj.cpp:41:10: error: redeclaration of\
    \ \u2018long int t\u2019\n   41 |     long t = 1;\n      |          ^\n/tmp/tmpdsq1z0hj.cpp:17:10:\
    \ note: \u2018long int t\u2019 previously declared here\n   17 |     long t =\
    \ 1;\n      |          ^\n/tmp/tmpdsq1z0hj.cpp:42:10: error: redeclaration of\
    \ \u2018long int u\u2019\n   42 |     long u = 1;\n      |          ^\n/tmp/tmpdsq1z0hj.cpp:18:10:\
    \ note: \u2018long int u\u2019 previously declared here\n   18 |     long u =\
    \ 1;\n      |          ^\n/tmp/tmpdsq1z0hj.cpp:43:10: error: redeclaration of\
    \ \u2018long int v\u2019\n   43 |     long v = 1;\n      |          ^\n/tmp/tmpdsq1z0hj.cpp:19:10:\
    \ note: \u2018long int v\u2019 pre"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ while (x<y) {\n        long mid = (x + y)/2;\n        if (mid % 2 == 0) {\n\
    \            ans = mid;\n            break;\n        }\n        else if (mid <\
    \ y) {\n            y = mid;\n        }\n        else {\n            x = mid;\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmprkam0zjq: /tmp/tmprkam0zjq.cpp:33: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long mid = x + (y - x) / 2;\n        ans = choose_num(mid, y);\n\
    \        if (ans == -1) {\n            ans = mid;\n        }\n    } else {\n \
    \       long mid = y + (x - y) / 2;\n        ans = choose_num(x, mid);\n     \
    \   if (ans == -1) {\n            ans = mid;\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // Write your code here\n \
    \   long ans = -1;\n    long m = 1;\n    long n = y;\n    long temp;\n    while(m\
    \ <= n) {\n        temp = m;\n        m = n%m;\n        n = temp;\n    }\n   \
    \ temp = m;\n    m = x;\n    x = temp;\n    while(m <= x) {\n        temp = m;\n\
    \        m = n%m;\n        n = temp;\n    }\n    temp = m;\n    m = y;\n    y\
    \ = temp;\n    while(m <= y) {\n        temp = m;\n        m = n%m;\n        n\
    \ = temp;\n    }\n    ans = n;\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -8
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if (x > y) {\n        long\
    \ temp = x;\n        x = y;\n        y = temp;\n    }\n    long ans = -1;\n  \
    \  while (x != y) {\n        if (x % 2 == 0) {\n            x = x / 2;\n     \
    \   } else {\n            y = y / 2;\n        }\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = choose_num;\n    assert(candidate((12), (15))\
    \ == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpobqxvxma: /tmp/tmpobqxvxma.cpp:27: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ while (x<y) {\n        long mid = (x+y)/2;\n        if (mid%2 == 0) {\n    \
    \        ans = mid;\n            break;\n        }\n        if (mid%2 == 1) {\n\
    \            y = mid;\n        }\n        else {\n            x = mid;\n     \
    \   }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp6eip2ls8: /tmp/tmp6eip2ls8.cpp:33: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if (x >= y) {\n        return\
    \ -1;\n    }\n    long mid = (x + y) / 2;\n    if (mid % 2 == 0) {\n        return\
    \ mid;\n    }\n    return choose_num(mid, y);\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpphtlf1ux: /tmp/tmpphtlf1ux.cpp:23: int main(): Assertion `candidate((33),\
    \ (12354)) == (12354)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    long m\
    \ = 1;\n    long n = y;\n    long k = 0;\n    long i = 0;\n    long j = 0;\n \
    \   long temp = 0;\n    while (i < n) {\n        j = i;\n        while (j < n\
    \ && m % 2 == 0) {\n            j = j + 1;\n            m = m / 2;\n        }\n\
    \        if (m == 0) {\n            ans = i;\n            break;\n        }\n\
    \        temp = m;\n        m = n;\n        n = j;\n        k = i;\n        while\
    \ (k != k + 1) {\n            i = i + 1;\n            k = k + 1;\n        }\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n \
    \   assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12)) ==\
    \ (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ while (x<y) {\n        if (x%2 == 0) {\n            ans = x;\n            break;\n\
    \        }\n        x++;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp7t0ht7yr: /tmp/tmp7t0ht7yr.cpp:27: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if (x >= y) {\n        return\
    \ -1;\n    }\n    long mid = (x + y) / 2;\n    if (mid % 2 == 0) {\n        return\
    \ mid;\n    }\n    return choose_num(mid, y);\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpj8lbg0cy: /tmp/tmpj8lbg0cy.cpp:23: int main(): Assertion `candidate((33),\
    \ (12354)) == (12354)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ long mid = (x + y) / 2;\n    if (mid % 2 == 0) {\n        ans = mid;\n    }\
    \ else {\n        if (mid > x) {\n            ans = mid;\n        } else {\n \
    \           ans = x;\n        }\n    }\n    return ans;\n}\nint main() {\n   \
    \ auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n \
    \   assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpkxelo6b0: /tmp/tmpkxelo6b0.cpp:30: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // Write your code here\n \
    \   long ans = -1;\n    if (x >= y) {\n        long temp = x;\n        x = y;\n\
    \        y = temp;\n    }\n    while (x<y) {\n        if (x%2 == 0) {\n      \
    \      ans = x;\n            break;\n        }\n        x++;\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpl_bu6pc9: /tmp/tmpl_bu6pc9.cpp:28: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ while (x<y) {\n        long mid = (x+y)/2;\n        if (mid % 2 == 0) {\n  \
    \          ans = mid;\n            break;\n        }\n        if (mid > y) {\n\
    \            y = mid;\n        } else {\n            x = mid;\n        }\n   \
    \ }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp5m6449ac: /tmp/tmp5m6449ac.cpp:33: int main(): Assertion `candidate((13),\
    \ (12)) == (-1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ long mid = (x + y) / 2;\n    while (x <= y) {\n        if ((x % 2) == 0) {\n\
    \            ans = mid;\n            break;\n        }\n        mid = (mid + y)\
    \ / 2;\n        x++;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpu5e3dt4i: /tmp/tmpu5e3dt4i.cpp:29: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long mid = (x + y) / 2;\n        ans = choose_num(x, mid);\n \
    \       if (ans == -1) {\n            ans = choose_num(mid + 1, y);\n        }\n\
    \    } else {\n        long mid = (x + y) / 2;\n        ans = choose_num(mid,\
    \ y);\n        if (ans == -1) {\n            ans = choose_num(x, mid - 1);\n \
    \       }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ while (x < y) {\n        long mid = (x + y) / 2;\n        if (mid % 2 == 0)\
    \ {\n            ans = mid;\n            break;\n        }\n        if (mid >\
    \ y) {\n            y = mid;\n        } else {\n            x = mid;\n       \
    \ }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpxmhx0ma2: /tmp/tmpxmhx0ma2.cpp:33: int main(): Assertion `candidate((13),\
    \ (12)) == (-1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long mid = x + (y - x) / 2;\n        ans = choose_num(mid, y);\n\
    \        if (ans == -1) {\n            ans = mid;\n        }\n    } else {\n \
    \       long mid = y + (x - y) / 2;\n        ans = choose_num(x, mid);\n     \
    \   if (ans == -1) {\n            ans = mid;\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ while (x++ < y) {\n        if (x%2 == 0) {\n            ans = x;\n         \
    \   break;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp243_ejiz: /tmp/tmp243_ejiz.cpp:28: int main(): Assertion `candidate((33),\
    \ (12354)) == (12354)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >\
    \ y) {\n        swap(x, y);\n    }\n    long mid = (x + y) / 2;\n    if (mid %\
    \ 2 == 0) {\n        ans = mid;\n    } else {\n        if (mid < x || mid > y)\
    \ {\n            ans = -1;\n        } else {\n            ans = mid;\n       \
    \ }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpmdd02eg1.cpp: In function \u2018long int choose_num(long int, long\
    \ int)\u2019:\n/tmp/tmpmdd02eg1.cpp:12:9: error: \u2018swap\u2019 was not declared\
    \ in this scope\n   12 |         swap(x, y);\n      |         ^~~~\n/tmp/tmpmdd02eg1.cpp:12:9:\
    \ note: suggested alternatives:\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpmdd02eg1.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:2029:5:\
    \ note:   \u2018std::__cxx11::swap\u2019\n 2029 |     swap(match_results<_Bi_iter,\
    \ _Alloc>& __lhs,\n      |     ^~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/exception:143,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpmdd02eg1.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/exception_ptr.h:166:5:\
    \ note:   \u2018std::__exception_ptr::swap\u2019\n  166 |     swap(exception_ptr&\
    \ __lhs, exception_ptr& __rhs)\n      |     ^~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/nested_exception.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/exception:144,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/incl"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // Write your code here\n \
    \   long ans = -1;\n    long mid = (x + y) / 2;\n    if (x >= y) {\n        while\
    \ (x < y) {\n            if (mid % 2 == 0) {\n                ans = mid;\n   \
    \             break;\n            }\n            mid = (mid + y) / 2;\n      \
    \  }\n    } else {\n        while (y < x) {\n            if (mid % 2 == 0) {\n\
    \                ans = mid;\n                break;\n            }\n         \
    \   mid = (mid + x) / 2;\n        }\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpqbywi_fj: /tmp/tmpqbywi_fj.cpp:34: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ while (x<y) {\n        long mid = (x+y)/2;\n        if (mid%2 == 0) {\n    \
    \        ans = mid;\n            break;\n        }\n        if (mid%2 == 1) {\n\
    \            y = mid;\n        } else {\n            x = mid;\n        }\n   \
    \ }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp0qauasul: /tmp/tmp0qauasul.cpp:32: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // Write your code here\n \
    \   long ans = -1;\n    long mid = (x + y) / 2;\n    if (mid % 2 == 0) {\n   \
    \     ans = mid;\n    } else {\n        if (x > mid) {\n            ans = choose_num(mid,\
    \ y);\n        } else {\n            ans = choose_num(x, mid);\n        }\n  \
    \  }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n   \
    \ assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12)) ==\
    \ (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp6qkvi76o: /tmp/tmp6qkvi76o.cpp:26: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long mid = (x + y) / 2;\n        if (mid % 2 == 0) {\n       \
    \     ans = mid;\n        } else {\n            ans = choose_num(mid, y);\n  \
    \      }\n    } else {\n        long mid = (x + y) / 2;\n        if (mid % 2 ==\
    \ 0) {\n            ans = mid;\n        } else {\n            ans = choose_num(x,\
    \ mid);\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp8upivsts: /tmp/tmp8upivsts.cpp:30: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ while (x <= y) {\n        if (x % 2 == 0) {\n            ans = x;\n        \
    \    break;\n        }\n        x += 2;\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpurl48bl9: /tmp/tmpurl48bl9.cpp:27: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if (x >= y) {\n        return\
    \ -1;\n    }\n    long mid = (x + y) / 2;\n    if (mid % 2 == 0) {\n        return\
    \ mid;\n    }\n    return choose_num(mid, y);\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmppoat3nmn: /tmp/tmppoat3nmn.cpp:23: int main(): Assertion `candidate((33),\
    \ (12354)) == (12354)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ long mid = (x + y) / 2;\n    while (x <= y) {\n        if (mid % 2 == 0) {\n\
    \            ans = mid;\n            break;\n        }\n        mid = (x + y)\
    \ / 2;\n        x++;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpm5hz_wrn: /tmp/tmpm5hz_wrn.cpp:30: int main(): Assertion `candidate((13),\
    \ (12)) == (-1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long mid = (x + y) / 2;\n        long a = choose_num(x, mid);\n\
    \        long b = choose_num(mid, y);\n        if ((a >= 0) && (b >= 0)) {\n \
    \           ans = a > b ? a : b;\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpbpu4rh1a: /tmp/tmpbpu4rh1a.cpp:23: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    long mid\
    \ = (x + y) / 2;\n    if (x <= mid) {\n        ans = x;\n    } else if (y <= mid)\
    \ {\n        ans = y;\n    } else {\n        ans = mid;\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp_ek2ds0e: /tmp/tmp_ek2ds0e.cpp:23: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long mid = x + (y - x) / 2;\n        if (mid > 0 && mid < y) {\n\
    \            ans = mid;\n        }\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpvdl2p3_4: /tmp/tmpvdl2p3_4.cpp:21: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long mid = x + (y - x) / 2;\n        ans = choose_num(mid, y);\n\
    \        if (ans == -1) {\n            ans = mid;\n        }\n    } else {\n \
    \       long mid = y + (x - y) / 2;\n        ans = choose_num(x, mid);\n     \
    \   if (ans == -1) {\n            ans = mid;\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // Write your code here\n \
    \   long ans = -1;\n    long m = 1;\n    long n = y;\n    long d = 1;\n    while\
    \ (m <= n) {\n        if (m % 2 == 0) {\n            ans = m;\n            break;\n\
    \        }\n        m += d;\n        d *= 2;\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpa4qu1w14: /tmp/tmpa4qu1w14.cpp:27: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // Write your code here\n \
    \   long ans = -1;\n    long mid = (x + y) / 2;\n    long sum = 0;\n    long even\
    \ = 1;\n    long odd = 0;\n    while (x <= y) {\n        if (mid % 2 == 0) {\n\
    \            sum += mid;\n            even++;\n        } else {\n            sum\
    \ += mid * 2;\n            odd++;\n        }\n        mid = (x + y) / 2;\n   \
    \ }\n    if (sum % 2 == 0) {\n        ans = sum / 2;\n    } else {\n        ans\
    \ = sum / 2;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ if (x == 0 || y == 0) {\n        return -1;\n    }\n    long mid = (x + y) /\
    \ 2;\n    if (mid % 2 == 0) {\n        ans = mid;\n    } else {\n        ans =\
    \ choose_num(mid, y);\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpyiw1cmct: /tmp/tmpyiw1cmct.cpp:30: int main(): Assertion `candidate((13),\
    \ (12)) == (-1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ while (x+1 < y) {\n        long mid = (x+y)/2;\n        if (mid%2 == 0) {\n\
    \            ans = mid;\n            x = mid+1;\n        } else {\n          \
    \  y = mid;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp5dn9l0x6: /tmp/tmp5dn9l0x6.cpp:29: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ long mid = (x + y) / 2;\n    while (x <= y) {\n        if (mid % 2 == 0) {\n\
    \            ans = mid;\n            break;\n        }\n        mid = (mid + y)\
    \ / 2;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpe5a7dmn6: /tmp/tmpe5a7dmn6.cpp:29: int main(): Assertion `candidate((13),\
    \ (12)) == (-1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    long m\
    \ = 1;\n    long n = y;\n    while (m <= n) {\n        if (x % m == 0 && y % n\
    \ == 0) {\n            ans = m;\n            break;\n        }\n        m += 2;\n\
    \        n -= 2;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpzbnq8q09: /tmp/tmpzbnq8q09.cpp:25: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // Write your code here\n \
    \   long ans = -1;\n    if (x >= y) {\n        long temp = x;\n        x = y;\n\
    \        y = temp;\n    }\n    while (x <= y) {\n        if (x % 2 == 0) {\n \
    \           ans = x;\n            break;\n        }\n        x++;\n    }\n   \
    \ return ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp57cs1yyl: /tmp/tmp57cs1yyl.cpp:28: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    long mid\
    \ = (x + y) / 2;\n    if (x <= mid) {\n        ans = x;\n    } else if (mid <=\
    \ y) {\n        ans = mid;\n    } else {\n        ans = y;\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpxzd9qwx1: /tmp/tmpxzd9qwx1.cpp:23: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long mid = x + (y - x) / 2;\n        long lcm = x * y;\n     \
    \   while (true) {\n            long temp = mid;\n            mid = lcm / temp;\n\
    \            lcm = temp;\n            if (mid > ans) {\n                ans =\
    \ mid;\n            }\n            if (mid == x || mid == y) {\n             \
    \   break;\n            }\n        }\n    } else {\n        long mid = y + (x\
    \ - y) / 2;\n        long lcm = y * x;\n        while (true) {\n            long\
    \ temp = mid;\n            mid = lcm / temp;\n            lcm = temp;\n      \
    \      if (mid > ans) {\n                ans = mid;\n            }\n         \
    \   if (mid == x || mid == y) {\n                break;\n            }\n     \
    \   }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmposvx4rtq: /tmp/tmposvx4rtq.cpp:44: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ while (x+1 < y) {\n        if ((x % 2) == 0) {\n            ans = x;\n     \
    \       break;\n        }\n        ans = x+1;\n        x++;\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpefideije: /tmp/tmpefideije.cpp:28: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ while (x<y) {\n        long mid = (x + y)/2;\n        if (mid % 2 == 0) {\n\
    \            ans = mid;\n            x = mid + 1;\n        } else {\n        \
    \    y = mid;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpyq7d0wk_: /tmp/tmpyq7d0wk_.cpp:29: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if (x > y) {\n        long\
    \ temp = x;\n        x = y;\n        y = temp;\n    }\n    long ans = -1;\n  \
    \  long limit = y;\n    while (x <= limit) {\n        if ((x % 2) == 0) {\n  \
    \          ans = x;\n            break;\n        }\n        ++x;\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpjhqehexo: /tmp/tmpjhqehexo.cpp:28: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ while (x+1 < y) {\n        if (x%2 == 0) {\n            ans = x;\n         \
    \   break;\n        }\n        x++;\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp_fix017k: /tmp/tmp_fix017k.cpp:27: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ while (x+1 < y) {\n        if (x%2 == 0) {\n            ans = x;\n         \
    \   break;\n        }\n        x++;\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpjx3ym6wk: /tmp/tmpjx3ym6wk.cpp:27: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ while (x % 2 == 0 && y % 2 == 0) {\n        long temp = x;\n        x = y;\n\
    \        y = temp;\n    }\n    if (x % 2 == 0 && y % 2 == 0) {\n        ans =\
    \ x;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpnip8i6bg: /tmp/tmpnip8i6bg.cpp:28: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ while (y) {\n        if (y & 1) {\n            ans = y;\n            break;\n\
    \        }\n        y >>= 1;\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp2opvnkdl: /tmp/tmp2opvnkdl.cpp:27: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long mid = x + (y - x) / 2;\n        if (mid % 2 == 0) {\n   \
    \         ans = mid;\n        }\n        else {\n            ans = choose_num(mid,\
    \ y);\n        }\n    }\n    else {\n        long mid = y + (x - y) / 2;\n   \
    \     if (mid % 2 == 0) {\n            ans = mid;\n        }\n        else {\n\
    \            ans = choose_num(x, mid);\n        }\n    }\n    return ans;\n}\n\
    int main() {\n    auto candidate = choose_num;\n    assert(candidate((12), (15))\
    \ == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // Write your code here\n \
    \   long ans = -1;\n    long mid = (x + y) / 2;\n    if (mid % 2 == 0) {\n   \
    \     ans = mid;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp1ukik50y: /tmp/tmp1ukik50y.cpp:20: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ while (x+1 < y) {\n        long mid = (x+y)/2;\n        if (mid%2 == 0) {\n\
    \            ans = mid;\n            x = mid+1;\n        } else {\n          \
    \  y = mid;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp_tgfwrh3: /tmp/tmp_tgfwrh3.cpp:29: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // Write your code here\n \
    \   long ans = -1;\n    long mid = (x + y) / 2;\n    if (x <= mid) {\n       \
    \ ans = x;\n    } else if (mid <= y) {\n        ans = mid;\n    } else {\n   \
    \     ans = y;\n    }\n    return ans;\n}\nint main() {\n    auto candidate =\
    \ choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpooyvvyeh: /tmp/tmpooyvvyeh.cpp:24: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ long mid = (x + y) / 2;\n    if (mid % 2 == 0) {\n        ans = mid;\n    }\
    \ else {\n        ans = choose_num(mid, y);\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpsfxs_i_p: /tmp/tmpsfxs_i_p.cpp:27: int main(): Assertion `candidate((13),\
    \ (12)) == (-1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ long mid = (x + y) / 2;\n    while (x != mid && y != mid && mid % 2 == 0) {\n\
    \        if (x <= mid) {\n            x = mid + 1;\n        } else {\n       \
    \     y = mid - 1;\n        }\n        mid = (x + y) / 2;\n    }\n    if (x ==\
    \ mid) {\n        ans = mid;\n    } else if (y == mid) {\n        ans = mid;\n\
    \    } else {\n        ans = -1;\n    }\n    return ans;\n}\nint main() {\n  \
    \  auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpjkxpekrm: /tmp/tmpjkxpekrm.cpp:36: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ while (x<y) {\n        long mid = (x + y) / 2;\n        if (mid % 2 == 0) {\n\
    \            ans = mid;\n            x = mid + 1;\n        } else {\n        \
    \    y = mid;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpol7h0oyk: /tmp/tmpol7h0oyk.cpp:29: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // Write your code here\n \
    \   long ans = -1;\n    long mid = (x + y) / 2;\n    if (mid % 2 == 0) {\n   \
    \     ans = mid;\n    } else {\n        if (x <= mid) {\n            ans = mid;\n\
    \        } else {\n            ans = mid;\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp5mhr6g4b: /tmp/tmp5mhr6g4b.cpp:26: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    long mid\
    \ = (x + y) / 2;\n    if (x <= mid) {\n        ans = x;\n    } else if (y <= mid)\
    \ {\n        ans = y;\n    } else {\n        ans = mid;\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpigbhbt24: /tmp/tmpigbhbt24.cpp:23: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long mid = x + (y - x) / 2;\n        ans = choose_num(mid, y);\n\
    \        if (ans == -1) {\n            ans = mid;\n        }\n    } else {\n \
    \       long mid = y + (x - y) / 2;\n        ans = choose_num(x, mid);\n     \
    \   if (ans == -1) {\n            ans = mid;\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ long mid = (x + y) / 2;\n    while (x != mid && y != mid) {\n        if (x %\
    \ 2 == 0 && y % 2 == 0) {\n            ans = mid;\n            break;\n      \
    \  }\n        if (x % 2 == 0) {\n            y = mid - 1;\n        } else {\n\
    \            x = mid + 1;\n        }\n        mid = (x + y) / 2;\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp4ywb8hrs: /tmp/tmp4ywb8hrs.cpp:33: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ long mid = (x + y) / 2;\n    while (x <= y) {\n        if (mid % 2 == 0) {\n\
    \            ans = mid;\n            break;\n        }\n        mid = (mid + y)\
    \ / 2;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpkbb5kycc: /tmp/tmpkbb5kycc.cpp:29: int main(): Assertion `candidate((13),\
    \ (12)) == (-1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long mid = x + (y - x) / 2;\n        ans = choose_num(mid, y);\n\
    \        if (ans == -1) {\n            ans = mid;\n        }\n    } else {\n \
    \       long mid = y + (x - y) / 2;\n        ans = choose_num(x, mid);\n     \
    \   if (ans == -1) {\n            ans = mid;\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    assert(x >= 0 && y >= 0);\n\
    \    long ans = -1;\n    long mid = (x + y) / 2;\n    if (mid % 2 == 0) {\n  \
    \      ans = mid;\n    } else {\n        if (x <= mid) {\n            ans = mid;\n\
    \        } else {\n            ans = mid;\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp1oem4j2s: /tmp/tmp1oem4j2s.cpp:26: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    assert(x >= 0 && y >= 0);\n\
    \    long ans = -1;\n    if (x > y) {\n        long temp = x;\n        x = y;\n\
    \        y = temp;\n    }\n    long mid = x + (y - x) / 2;\n    while (x <= y)\
    \ {\n        if (mid % 2 == 0) {\n            ans = mid;\n            break;\n\
    \        }\n        mid++;\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpw5onnaxu: /tmp/tmpw5onnaxu.cpp:30: int main(): Assertion `candidate((13),\
    \ (12)) == (-1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ while (x+1 < y) {\n        long mid = (x+y)/2;\n        if (mid % 2 == 0) {\n\
    \            ans = mid;\n            x = mid;\n        } else {\n            y\
    \ = mid;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpexrcnjp9: /tmp/tmpexrcnjp9.cpp:29: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ while (x<y) {\n        long mid = (x+y)/2;\n        if (mid%2 == 0) {\n    \
    \        ans = mid;\n            x = mid+1;\n        }\n        else {\n     \
    \       y = mid;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp9l1prvtp: /tmp/tmp9l1prvtp.cpp:30: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if (x >= y) {\n        return\
    \ -1;\n    }\n    long mid = (x + y) / 2;\n    if (mid % 2 == 0) {\n        return\
    \ mid;\n    }\n    return choose_num(mid, y);\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpryz8t7lp: /tmp/tmpryz8t7lp.cpp:23: int main(): Assertion `candidate((33),\
    \ (12354)) == (12354)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ while (x+1 < y) {\n        if ((x % 2) == 0) {\n            ans = x;\n     \
    \       break;\n        }\n        ans = x + 1;\n        x++;\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpr_qbxlr_: /tmp/tmpr_qbxlr_.cpp:28: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ long mid = (x + y) / 2;\n    while (x <= y) {\n        if (mid % 2 == 0) {\n\
    \            ans = mid;\n            break;\n        }\n        mid = (mid + y)\
    \ / 2;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpig5nxlet: /tmp/tmpig5nxlet.cpp:29: int main(): Assertion `candidate((13),\
    \ (12)) == (-1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ while (y) {\n        if (x % 2 == 0) {\n            ans = y;\n            break;\n\
    \        }\n        y /= 2;\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpwzazn4gk: /tmp/tmpwzazn4gk.cpp:27: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ long mid = (x + y) / 2;\n    while (x <= y) {\n        if (mid % 2 == 0) {\n\
    \            ans = mid;\n            break;\n        }\n        mid = (mid + y)\
    \ / 2;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpm0slrk7n: /tmp/tmpm0slrk7n.cpp:29: int main(): Assertion `candidate((13),\
    \ (12)) == (-1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ while (x+1 < y) {\n        long mid = (x+y)/2;\n        if (mid % 2 == 0) {\n\
    \            ans = mid;\n            x = mid+1;\n        } else {\n          \
    \  y = mid;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpktux6zed: /tmp/tmpktux6zed.cpp:29: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if (x >= y) {\n        return\
    \ -1;\n    }\n    long mid = (x + y) / 2;\n    if (mid % 2 == 0) {\n        return\
    \ mid;\n    }\n    return choose_num(mid, y);\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpiy8a6pzu: /tmp/tmpiy8a6pzu.cpp:23: int main(): Assertion `candidate((33),\
    \ (12354)) == (12354)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // Write your code here\n \
    \   long ans = -1;\n    long mid = (x + y) / 2;\n    long left_num = x;\n    long\
    \ right_num = y;\n    while (left_num < mid) {\n        left_num += y;\n    }\n\
    \    while (right_num > mid) {\n        right_num -= y;\n    }\n    if (left_num\
    \ == mid) {\n        ans = mid;\n    } else if (right_num == mid) {\n        ans\
    \ = mid;\n    } else {\n        ans = left_num;\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = choose_num;\n    assert(candidate((12), (15))\
    \ == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp2hkx0kfb: /tmp/tmp2hkx0kfb.cpp:32: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if (x > y) {\n        long\
    \ temp = x;\n        x = y;\n        y = temp;\n    }\n    long mid = (x + y)\
    \ / 2;\n    long ans = mid;\n    while (ans % 2 == 0) {\n        mid = (x + y)\
    \ / 2;\n        ans = mid;\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp5i960yzm: /tmp/tmp5i960yzm.cpp:25: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    long mid\
    \ = (x + y) / 2;\n    if (x <= y) {\n        if (mid % 2 == 0) {\n           \
    \ ans = mid;\n        } else {\n            ans = choose_num(x, mid);\n      \
    \  }\n    } else {\n        if (mid % 2 == 0) {\n            ans = mid;\n    \
    \    } else {\n            ans = choose_num(mid, y);\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpscvd5x9u: /tmp/tmpscvd5x9u.cpp:29: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ while (x<y) {\n        if (x%2 == 0) {\n            ans = x;\n            break;\n\
    \        }\n        x++;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpsz6ndeys: /tmp/tmpsz6ndeys.cpp:27: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >\
    \ y) {\n        swap(x, y);\n    }\n    while (x != y) {\n        long mid = (x\
    \ + y) / 2;\n        if (mid % 2 == 0) {\n            ans = mid;\n           \
    \ break;\n        }\n        if (mid > y) {\n            y = mid;\n        } else\
    \ {\n            x = mid;\n        }\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpshfjinh5.cpp: In function \u2018long int choose_num(long int, long\
    \ int)\u2019:\n/tmp/tmpshfjinh5.cpp:12:9: error: \u2018swap\u2019 was not declared\
    \ in this scope\n   12 |         swap(x, y);\n      |         ^~~~\n/tmp/tmpshfjinh5.cpp:12:9:\
    \ note: suggested alternatives:\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpshfjinh5.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:2029:5:\
    \ note:   \u2018std::__cxx11::swap\u2019\n 2029 |     swap(match_results<_Bi_iter,\
    \ _Alloc>& __lhs,\n      |     ^~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/exception:143,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpshfjinh5.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/exception_ptr.h:166:5:\
    \ note:   \u2018std::__exception_ptr::swap\u2019\n  166 |     swap(exception_ptr&\
    \ __lhs, exception_ptr& __rhs)\n      |     ^~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/nested_exception.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/exception:144,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/incl"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // Write your code here\n \
    \   long ans = -1;\n    if (x >= y) {\n        long mid = x + (y - x) / 2;\n \
    \       long mid2 = mid + (mid - x) / 2;\n        if (mid2 % 2 == 0) {\n     \
    \       ans = mid;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp84_uc800: /tmp/tmp84_uc800.cpp:23: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ while (x<y) {\n        long mid = (x+y)/2;\n        if (mid%2 == 0) {\n    \
    \        ans = mid;\n            break;\n        }\n        if (mid%2 == 1) {\n\
    \            y = mid;\n        }\n        else {\n            x = mid;\n     \
    \   }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmprcqfrtfk: /tmp/tmprcqfrtfk.cpp:33: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ long mid = (x + y) / 2;\n    if (mid % 2 == 0) {\n        ans = mid;\n    }\
    \ else {\n        if (mid < x || mid > y) {\n            ans = mid;\n        }\
    \ else {\n            ans = choose_num(x, mid);\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp9qhq7dhi: /tmp/tmp9qhq7dhi.cpp:30: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // Write your code here\n \
    \   long ans = -1;\n    long mid = (x + y) / 2;\n    if (mid % 2 == 0) {\n   \
    \     ans = mid;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp6lkeygs9: /tmp/tmp6lkeygs9.cpp:20: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ while (x < y) {\n        long mid = (x + y) / 2;\n        if (mid % 2 == 0)\
    \ {\n            ans = mid;\n            x = mid + 1;\n        } else {\n    \
    \        y = mid;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmplltqhpbz: /tmp/tmplltqhpbz.cpp:29: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ while (y) {\n        long mid = (x + y) / 2;\n        if (mid * mid <= y) {\n\
    \            x = mid;\n        } else {\n            y = mid;\n        }\n   \
    \ }\n    if (x == y) {\n        ans = x;\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ long mid = (x + y) / 2;\n    while (x != mid && y != mid) {\n        if (x %\
    \ 2 == 0 && y % 2 == 0) {\n            ans = mid;\n            break;\n      \
    \  } else if (x % 2 == 0 && y % 2 != 0) {\n            y = mid - 1;\n        }\
    \ else if (x % 2 != 0 && y % 2 == 0) {\n            x = mid + 1;\n        } else\
    \ {\n            x = mid + 1;\n            y = mid - 1;\n        }\n        mid\
    \ = (x + y) / 2;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp4lngwmr3: /tmp/tmp4lngwmr3.cpp:35: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    long mid\
    \ = (x + y) / 2;\n    if (x <= y) {\n        while (x <= y) {\n            if\
    \ (x % 2 == 0) {\n                ans = x;\n                break;\n         \
    \   }\n            x = x + 1;\n        }\n    } else {\n        while (y <= x)\
    \ {\n            if (y % 2 == 0) {\n                ans = y;\n               \
    \ break;\n            }\n            y = y + 1;\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp1gi0fde1: /tmp/tmp1gi0fde1.cpp:33: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // Write your code here\n \
    \   long ans = -1;\n    long m = 1;\n    long n = y;\n    long k = 0;\n    long\
    \ temp;\n    while(m <= n) {\n        temp = m;\n        m = n + k;\n        n\
    \ = temp;\n        k++;\n    }\n    while(m > n) {\n        temp = m;\n      \
    \  m = n - k;\n        n = temp;\n        k--;\n    }\n    while(m % 2 == 0) {\n\
    \        temp = m;\n        m = m + k;\n        n = temp;\n        k++;\n    }\n\
    \    while(n % 2 == 0) {\n        temp = n;\n        n = n - k;\n        m = temp;\n\
    \        k--;\n    }\n    if(m > n) {\n        ans = m;\n    }\n    else {\n \
    \       ans = n;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpczkhxvyi: /tmp/tmpczkhxvyi.cpp:50: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ while (x+1 < y) {\n        long mid = x + (y - x) / 2;\n        if (mid % 2\
    \ == 0) {\n            ans = mid;\n            x = mid;\n        } else {\n  \
    \          y = mid;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmptkpt52he: /tmp/tmptkpt52he.cpp:29: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ while (x+1 < y) {\n        long mid = (x+y)/2;\n        if (mid%2 == 0) {\n\
    \            ans = mid;\n            x = mid+1;\n        } else {\n          \
    \  y = mid;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpc_wsqf4f: /tmp/tmpc_wsqf4f.cpp:29: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    assert(x >= 0 && y >= 0);\n\
    \    if (x < y) {\n        long temp = x;\n        x = y;\n        y = temp;\n\
    \    }\n    long ans = -1;\n    long max_num = x;\n    long min_num = y;\n   \
    \ while (max_num < y) {\n        max_num += max_num;\n        min_num += min_num;\n\
    \    }\n    while (max_num >= y) {\n        ans = max_num;\n        max_num -=\
    \ max_num;\n        min_num -= min_num;\n    }\n    while (min_num >= x) {\n \
    \       ans = min_num;\n        min_num -= min_num;\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmphxctgqvv: /tmp/tmphxctgqvv.cpp:36: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long mid = x + (y - x) / 2;\n        ans = choose_num(mid, y);\n\
    \        if (ans == -1) {\n            ans = mid;\n        }\n    } else {\n \
    \       long mid = y + (x - y) / 2;\n        ans = choose_num(x, mid);\n     \
    \   if (ans == -1) {\n            ans = mid;\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long mid = (x + y) / 2;\n        if (mid % 2 == 0) {\n       \
    \     ans = mid;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmproy8rzdn: /tmp/tmproy8rzdn.cpp:21: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long mid = x + (y - x) / 2;\n        ans = choose_num(mid, y);\n\
    \        if (ans == -1) {\n            ans = mid;\n        }\n    } else {\n \
    \       long mid = y + (x - y) / 2;\n        ans = choose_num(x, mid);\n     \
    \   if (ans == -1) {\n            ans = mid;\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // Write your code here\n \
    \   long ans = -1;\n    if (x >= y) {\n        long temp = x;\n        x = y;\n\
    \        y = temp;\n    }\n    while (x<y) {\n        long mid = (x+y)/2;\n  \
    \      if (mid%2 == 0) {\n            ans = mid;\n            break;\n       \
    \ }\n        if (mid%2 != 0) {\n            x = mid;\n        } else {\n     \
    \       y = mid;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmplpzz2sdo: /tmp/tmplpzz2sdo.cpp:34: int main(): Assertion `candidate((13),\
    \ (12)) == (-1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    long mid\
    \ = (x + y) / 2;\n    if (x <= mid) {\n        ans = x;\n    } else if (mid <=\
    \ y) {\n        ans = mid;\n    } else {\n        ans = y;\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp4iwthwz3: /tmp/tmp4iwthwz3.cpp:23: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ if (x % 2 == 0) {\n        long temp1 = x;\n        x = y;\n        y = temp1;\n\
    \    }\n    while (x != 0) {\n        long temp2 = x;\n        x = y % x;\n  \
    \      y = temp2;\n    }\n    if (y % 2 == 0) {\n        ans = y;\n    }\n   \
    \ return ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpnm7sd65h: /tmp/tmpnm7sd65h.cpp:33: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    assert(x >= 0 && y >= 0);\n\
    \    long ans = -1;\n    long mid = (x + y) / 2;\n    long left = mid - 1;\n \
    \   long right = mid;\n    while (left >= 0 && right < y) {\n        if (left\
    \ % 2 == 0 && right % 2 == 0) {\n            ans = mid;\n            break;\n\
    \        }\n        if (left % 2 == 0) {\n            ans = left;\n          \
    \  break;\n        }\n        if (right % 2 == 0) {\n            ans = right;\n\
    \            break;\n        }\n        left--;\n        right++;\n    }\n   \
    \ return ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp6jnztxi3: /tmp/tmp6jnztxi3.cpp:35: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // Write your code here\n \
    \   long ans = -1;\n    long mid = (x + y) / 2;\n    if (x <= mid) {\n       \
    \ ans = x;\n    } else if (y <= mid) {\n        ans = y;\n    } else {\n     \
    \   ans = mid;\n    }\n    return ans;\n}\nint main() {\n    auto candidate =\
    \ choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpe1xqbkdz: /tmp/tmpe1xqbkdz.cpp:24: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ while (x <= y) {\n        if (x % 2 == 0) {\n            ans = x;\n        \
    \    break;\n        }\n        x += 2;\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpr68brij7: /tmp/tmpr68brij7.cpp:27: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // Write your code here\n \
    \   long ans = -1;\n    long mid = (x + y) / 2;\n    if (mid % 2 == 0) {\n   \
    \     ans = mid;\n    } else {\n        if (mid < x && mid > y) {\n          \
    \  ans = mid;\n        } else if (mid > x && mid < y) {\n            ans = mid;\n\
    \        } else {\n            ans = -1;\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp7j25raeb: /tmp/tmp7j25raeb.cpp:28: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if (x >= y) {\n        return\
    \ -1;\n    }\n    long mid = (x + y) / 2;\n    if (mid % 2 == 0) {\n        return\
    \ mid;\n    }\n    return choose_num(mid, y);\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpzyqb83_c: /tmp/tmpzyqb83_c.cpp:23: int main(): Assertion `candidate((33),\
    \ (12354)) == (12354)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ long mid = (x + y) / 2;\n    while (x <= y) {\n        if (mid % 2 == 0) {\n\
    \            ans = mid;\n            break;\n        }\n        mid = (mid + y)\
    \ / 2;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp3qm9rr3i: /tmp/tmp3qm9rr3i.cpp:29: int main(): Assertion `candidate((13),\
    \ (12)) == (-1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ while (x<y) {\n        long mid = (x+y)/2;\n        if (mid%2 == 0) {\n    \
    \        ans = mid;\n            x = mid+1;\n        } else {\n            y =\
    \ mid;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpuligdzyd: /tmp/tmpuligdzyd.cpp:29: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ long mid = x + (y - x) / 2;\n    while (x <= y) {\n        if (mid % 2 == 0)\
    \ {\n            ans = mid;\n            break;\n        }\n        mid++;\n \
    \   }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n  \
    \  assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12)) ==\
    \ (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp6s28yzog: /tmp/tmp6s28yzog.cpp:29: int main(): Assertion `candidate((13),\
    \ (12)) == (-1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ long mid = (x + y) / 2;\n    while (x != mid) {\n        if (x % 2 == 0 && y\
    \ % 2 == 0) {\n            ans = mid;\n            break;\n        } else if (x\
    \ % 2 == 0 && y % 2 != 0) {\n            y = mid;\n        } else if (x % 2 !=\
    \ 0 && y % 2 == 0) {\n            x = mid;\n        } else {\n            mid\
    \ = (x + y) / 2;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ while (x+1 < y) {\n        long mid = (x+y)/2;\n        if (mid % 2 == 0) {\n\
    \            ans = mid;\n            x = mid+1;\n        } else {\n          \
    \  y = mid;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpru_ifthy: /tmp/tmpru_ifthy.cpp:29: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // Write your code here\n \
    \   long ans = -1;\n    long mid = (x + y) / 2;\n    if (mid % 2 == 0) {\n   \
    \     ans = mid;\n    } else {\n        if (x <= mid) {\n            ans = mid;\n\
    \        } else if (y <= mid) {\n            ans = mid;\n        } else {\n  \
    \          ans = -1;\n        }\n    }\n    return ans;\n}\nint main() {\n   \
    \ auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n \
    \   assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpf7wqzgqx: /tmp/tmpf7wqzgqx.cpp:28: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ while (x<y) {\n        long mid = (x+y)/2;\n        if (mid%2 == 0) {\n    \
    \        ans = mid;\n            break;\n        }\n        if (mid%2 == 1) {\n\
    \            y = mid;\n        }\n        else {\n            x = mid;\n     \
    \   }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp7w824sev: /tmp/tmp7w824sev.cpp:33: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    assert(x >= 0 && y >= 0);\n\
    \    long ans = -1;\n    long x_even = x % 2 == 0;\n    long y_even = y % 2 ==\
    \ 0;\n    if (x_even && y_even) {\n        long x_odd = x % 2 == 1;\n        long\
    \ y_odd = y % 2 == 1;\n        if (x_odd && y_odd) {\n            long x_even\
    \ = x % 2 == 0;\n            long y_even = y % 2 == 0;\n            if (x_even\
    \ && y_even) {\n                long x_odd = x % 2 == 1;\n                long\
    \ y_odd = y % 2 == 1;\n                if (x_odd && y_odd) {\n               \
    \     long x_even = x % 2 == 0;\n                    long y_even = y % 2 == 0;\n\
    \                    if (x_even && y_even) {\n                        long x_odd\
    \ = x % 2 == 1;\n                        long y_odd = y % 2 == 1;\n          \
    \              if (x_odd && y_odd) {\n                            long x_even\
    \ = x % 2 == 0;\n                            long y_even = y % 2 == 0;\n     \
    \                       if (x_even && y_even) {\n                            \
    \    long x_odd = x % 2 == 1;\n                                long y_odd = y\
    \ % 2 == 1;\n                                if (x_odd && y_odd) {\n         \
    \                           long x_even = x % 2 == 0;\n                      \
    \              long y_even = y % 2 == 0;\n                                   \
    \ if (x_even && y_even) {\n                                        long x_odd\
    \ = x % 2 == 1;\n                                        long y_odd = y % 2 ==\
    \ 1;\n                                        if (x_odd && y_odd) {\n        \
    \                                    long x_even = x % 2 == 0;\n             \
    \                               long y_even = y % 2 == 0;\n                  \
    \                          if (x_even && y_even) {\n                         \
    \                       long x_odd = x % 2 == 1;\n                           \
    \                     long y_odd = y % 2 == 1;\n                             \
    \                   if (x_odd && y_odd) {\n                                  \
    \                  long x_even = x % 2 == 0;\n                               \
    \                     long y_even = y % 2 == 0;\n                            \
    \                        if (x_even && y_even) {\n                           \
    \                             long x_odd = x % 2 == 1;\n                     \
    \                                   long y_odd = y % 2 == 1;\n               \
    \                                         if (x_odd && y_odd) {\n            \
    \                                                long x_even = x % 2 == 0;\n \
    \                                                           long y_even = y %\
    \ 2 == 0;\n                                                            if (x_even\
    \ && y_even) {\n                                                             \
    \   long x_odd = x % 2 == 1;\n                                               \
    \                 long y_odd = y % 2 == 1;\n                                 \
    \                               if (x_odd && y_odd) {\n                      \
    \                                              long x_even = x % 2 == 0;\n   \
    \                                                                 long y_even\
    \ = y % 2 == 0;\n                                                            \
    \        if (x_even && y_even) {\n                                           \
    \                             long x_odd = x % 2 == \n}\nint main() {\n    auto\
    \ candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8w3oo3lt.cpp: In function \u2018long int choose_num(long int, long\
    \ int)\u2019:\n/tmp/tmp8w3oo3lt.cpp:64:1: error: expected primary-expression before\
    \ \u2018}\u2019 token\n   64 | }\n      | ^\n/tmp/tmp8w3oo3lt.cpp:65:12: error:\
    \ a function-definition is not allowed here before \u2018{\u2019 token\n   65\
    \ | int main() {\n      |            ^\n/tmp/tmp8w3oo3lt.cpp:75:1: error: expected\
    \ \u2018}\u2019 at end of input\n   75 | }\n      | ^\n/tmp/tmp8w3oo3lt.cpp:59:85:\
    \ note: to match this \u2018{\u2019\n   59 |                                 \
    \                                if (x_odd && y_odd) {\n      |              \
    \                                                                       ^\n/tmp/tmp8w3oo3lt.cpp:75:1:\
    \ error: expected \u2018}\u2019 at end of input\n   75 | }\n      | ^\n/tmp/tmp8w3oo3lt.cpp:56:83:\
    \ note: to match this \u2018{\u2019\n   56 |                                 \
    \                            if (x_even && y_even) {\n      |                \
    \                                                                   ^\n/tmp/tmp8w3oo3lt.cpp:75:1:\
    \ error: expected \u2018}\u2019 at end of input\n   75 | }\n      | ^\n/tmp/tmp8w3oo3lt.cpp:53:77:\
    \ note: to match this \u2018{\u2019\n   53 |                                 \
    \                        if (x_odd && y_odd) {\n      |                      \
    \                                                       ^\n/tmp/tmp8w3oo3lt.cpp:75:1:\
    \ error: expected \u2018}\u2019 at end of input\n   75 | }\n      | ^\n/tmp/tmp8w3oo3lt.cpp:50:75:\
    \ note: to match this \u2018{\u2019\n   50 |                                 \
    \                    if (x_even && y_even) {\n      |                        \
    \                                                   ^\n/tmp/tmp8w3oo3lt.cpp:75:1:\
    \ error: expected \u2018}\u2019 at end of input\n   75 | }\n      | ^\n/tmp/tmp8w3oo3lt.cpp:47:69:\
    \ note: to match this \u2018{\u2019\n   47 |                                 \
    \                if (x_odd && y_odd) {\n      |                              \
    \                                       ^\n/tmp/tmp8w3oo3lt.cpp:75:1: error: expected\
    \ \u2018}\u2019 at end of input\n   75 | }\n      | ^\n/tmp/tmp8w3oo3lt.cpp:44:67:\
    \ note: to match this \u2018{\u2019\n   44 |                                 \
    \            if (x_"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long mid = (x + y) / 2;\n        if (mid % 2 == 0) {\n       \
    \     ans = mid;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpfiq8kagl: /tmp/tmpfiq8kagl.cpp:21: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    long temp;\n\
    \    while (x <= y) {\n        temp = x;\n        x = y;\n        y = temp;\n\
    \    }\n    while (x % 2 == 0) {\n        x /= 2;\n    }\n    while (y % 2 ==\
    \ 0) {\n        y /= 2;\n    }\n    if (x == y) {\n        ans = x;\n    }\n \
    \   return ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmphu5yxf35: /tmp/tmphu5yxf35.cpp:30: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if (x >= y) {\n        return\
    \ -1;\n    }\n    long mid = (x + y) / 2;\n    if (mid % 2 == 0) {\n        return\
    \ mid;\n    }\n    return choose_num(mid, y);\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp0i3z408l: /tmp/tmp0i3z408l.cpp:23: int main(): Assertion `candidate((33),\
    \ (12354)) == (12354)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // Write your code here\n \
    \   long ans = -1;\n    long mid = (x + y) / 2;\n    if (mid % 2 == 0) {\n   \
    \     ans = mid;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp490569fj: /tmp/tmp490569fj.cpp:20: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long mid = (x + y) / 2;\n        if (mid % 2 == 0) {\n       \
    \     ans = mid;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpd8yshkt2: /tmp/tmpd8yshkt2.cpp:21: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
