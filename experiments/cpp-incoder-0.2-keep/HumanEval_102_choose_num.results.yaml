name: HumanEval_102_choose_num
language: cpp
results:
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    long m\
    \ = 1;\n    long n = y;\n    long k = 0;\n    while (m <= n) {\n        if (m\
    \ % 2 == 0) {\n            ans = m;\n            break;\n        }\n        m\
    \ += 2;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpluh8eexw: /tmp/tmpluh8eexw.cpp:25: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ while (x+1 < y) {\n        if (x%2 == 0) {\n            ans = x;\n         \
    \   break;\n        }\n        x++;\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpitiqn2tz: /tmp/tmpitiqn2tz.cpp:27: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ while (x+1 < y) {\n        if (x%2 == 0) {\n            ans = x;\n         \
    \   break;\n        }\n        x++;\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp_aby8_93: /tmp/tmp_aby8_93.cpp:27: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long mid = (x + y) / 2;\n        ans = choose_num(mid, y);\n \
    \       if (ans == -1) {\n            ans = choose_num(x, mid);\n        }\n \
    \   } else {\n        long mid = (y + x) / 2;\n        ans = choose_num(x, mid);\n\
    \        if (ans == -1) {\n            ans = choose_num(y, mid);\n        }\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n \
    \   assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12)) ==\
    \ (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // Write your code here\n \
    \   long ans = -1;\n    long mid = (x + y) / 2;\n    if (x >= y) {\n        while\
    \ (x <= mid) {\n            if (x % 2 == 0) {\n                ans = x;\n    \
    \            break;\n            }\n            x += 2;\n        }\n    } else\
    \ {\n        while (y <= mid) {\n            if (y % 2 == 0) {\n             \
    \   ans = y;\n                break;\n            }\n            y += 2;\n   \
    \     }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp_hg4cfh6: /tmp/tmp_hg4cfh6.cpp:34: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // Write your code here\n \
    \   long ans = -1;\n    if (x >= y) {\n        long mid = (x + y) / 2;\n     \
    \   if (mid % 2 == 0) {\n            ans = mid;\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpcb_arjuo: /tmp/tmpcb_arjuo.cpp:22: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ while (x+1 < y) {\n        long mid = (x+y)/2;\n        if (mid % 2 == 0) {\n\
    \            ans = mid;\n            x = mid+1;\n        } else {\n          \
    \  y = mid;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp4s3o2kts: /tmp/tmp4s3o2kts.cpp:29: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    long m\
    \ = 1;\n    long n = y;\n    long k = 0;\n    while (m <= n) {\n        k = m\
    \ * m + (n - m) * (n - m);\n        if (k >= x && k <= y) {\n            ans =\
    \ k;\n            break;\n        }\n        m += 2;\n        n -= 2;\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpd16bt742: /tmp/tmpd16bt742.cpp:27: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ while (x<y) {\n        long mid = (x+y)/2;\n        if (mid%2 == 0) {\n    \
    \        ans = mid;\n            x = mid+1;\n        } else {\n            y =\
    \ mid;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpciqtag7b: /tmp/tmpciqtag7b.cpp:29: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    long mid\
    \ = (x + y) / 2;\n    if (x <= mid) {\n        ans = x;\n    } else if (mid <=\
    \ y) {\n        ans = mid;\n    } else {\n        ans = y;\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpq5perhyu: /tmp/tmpq5perhyu.cpp:23: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ while (x % 2 == 0 && y % 2 == 0) {\n        long temp = x;\n        x = y;\n\
    \        y = temp;\n    }\n    if (x == y) {\n        ans = x;\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp34hy0_ua: /tmp/tmp34hy0_ua.cpp:28: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // Write your code here\n \
    \   long ans = -1;\n    long mid = (x + y) / 2;\n    if (mid % 2 == 0) {\n   \
    \     ans = mid;\n    }\n    else {\n        if (mid < x && mid < y) {\n     \
    \       ans = mid;\n        }\n        else if (mid > x && mid > y) {\n      \
    \      ans = mid;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmptljl7rcr: /tmp/tmptljl7rcr.cpp:28: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ long mid = (x + y) / 2;\n    while (x <= y) {\n        if (mid % 2 == 0) {\n\
    \            ans = mid;\n            break;\n        }\n        mid = (mid + y)\
    \ / 2;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpnjo6ks5j: /tmp/tmpnjo6ks5j.cpp:29: int main(): Assertion `candidate((13),\
    \ (12)) == (-1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ long mid = (x + y) / 2;\n    if (mid % 2 == 0) {\n        ans = mid;\n    }\
    \ else {\n        ans = choose_num(mid, y);\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmppw3sk3pw: /tmp/tmppw3sk3pw.cpp:27: int main(): Assertion `candidate((13),\
    \ (12)) == (-1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // Write your code here\n \
    \   long ans = -1;\n    if (x >= y) {\n        long mid = (x + y) / 2;\n     \
    \   if (mid % 2 == 0) {\n            ans = mid;\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpp2k_in85: /tmp/tmpp2k_in85.cpp:22: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long mid = x + (y - x) / 2;\n        ans = choose_num(mid, y);\n\
    \        if (ans == -1) {\n            ans = mid;\n        }\n    } else {\n \
    \       long mid = y + (x - y) / 2;\n        ans = choose_num(x, mid);\n     \
    \   if (ans == -1) {\n            ans = mid;\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ while (x<y) {\n        long mid = x + (y-x)/2;\n        if (mid % 2 == 0) {\n\
    \            ans = mid;\n            break;\n        }\n        x = mid;\n   \
    \ }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp65o2djew: /tmp/tmp65o2djew.cpp:29: int main(): Assertion `candidate((13),\
    \ (12)) == (-1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    long mid\
    \ = (x + y) / 2;\n    if (x <= mid) {\n        ans = x;\n    } else if (y <= mid)\
    \ {\n        ans = y;\n    } else {\n        ans = mid;\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpqlc52zcb: /tmp/tmpqlc52zcb.cpp:23: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ while (x<y) {\n        long mid = (x+y)/2;\n        if (mid%2 == 0) {\n    \
    \        ans = mid;\n            break;\n        }\n        if (mid%2 == 1) {\n\
    \            y = mid;\n        }\n        else {\n            x = mid;\n     \
    \   }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmps6oj67rh: /tmp/tmps6oj67rh.cpp:33: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long mid = (x + y) / 2;\n        long a = choose_num(x, mid);\n\
    \        long b = choose_num(mid, y);\n        if ((a != -1) && (b != -1)) {\n\
    \            ans = a > b ? a : b;\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp5gnb4_ux: /tmp/tmp5gnb4_ux.cpp:23: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // Write your code here\n \
    \   long ans = -1;\n    long mid = (x + y) / 2;\n    long l = (x + y) % 2;\n \
    \   if (l == 0)\n        mid = x + y;\n    else if (l == 1)\n        mid = y +\
    \ x;\n    long temp = 0;\n    while (temp < mid) {\n        temp = temp + 2;\n\
    \    }\n    ans = temp;\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpblmso74n: /tmp/tmpblmso74n.cpp:27: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if (x >= y) {\n        return\
    \ -1;\n    }\n    long mid = x + (y - x) / 2;\n    if (mid % 2 == 0) {\n     \
    \   return mid;\n    }\n    return choose_num(mid, y);\n}\nint main() {\n    auto\
    \ candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpt5vw4t6g: /tmp/tmpt5vw4t6g.cpp:23: int main(): Assertion `candidate((33),\
    \ (12354)) == (12354)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if (x >= y) {\n        return\
    \ -1;\n    }\n    long mid = (x + y) / 2;\n    if (mid % 2 == 0) {\n        return\
    \ mid;\n    }\n    return choose_num(mid, y);\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmplynhh0_g: /tmp/tmplynhh0_g.cpp:23: int main(): Assertion `candidate((33),\
    \ (12354)) == (12354)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long mid = (x + y) / 2;\n        if (mid % 2 == 0) {\n       \
    \     ans = mid;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpb7q7yud9: /tmp/tmpb7q7yud9.cpp:21: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long mid = x + (y - x) / 2;\n        if (mid % 2 == 0) {\n   \
    \         ans = mid;\n        }\n    }\n    return ans;\n}\nint main() {\n   \
    \ auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n \
    \   assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpr6mc3qx8: /tmp/tmpr6mc3qx8.cpp:21: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long mid = x + (y - x) / 2;\n        ans = choose_num(mid, y);\n\
    \        if (ans == -1) {\n            ans = mid;\n        }\n    } else {\n \
    \       long mid = y + (x - y) / 2;\n        ans = choose_num(x, mid);\n     \
    \   if (ans == -1) {\n            ans = mid;\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // Write your code here\n \
    \   long ans = -1;\n    if (x >= y) {\n        long mid = x + (y - x) / 2;\n \
    \       if (mid % 2 == 0) {\n            ans = mid;\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp5vs64ace: /tmp/tmp5vs64ace.cpp:22: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if (x > y) {\n        long\
    \ temp = x;\n        x = y;\n        y = temp;\n    }\n    long ans = -1;\n  \
    \  while (x != y) {\n        if (x % 2 == 0) {\n            x = x / 2;\n     \
    \       ans = ans * 2 + x;\n        } else {\n            y = y / 2;\n       \
    \     ans = ans * 2 + y;\n        }\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpa3jvnt36: /tmp/tmpa3jvnt36.cpp:29: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // Write your code here\n \
    \   long ans = -1;\n    long mid = (x + y) / 2;\n    long l1 = (x % 2 == 0);\n\
    \    long l2 = (y % 2 == 0);\n    if (l1 && l2) {\n        ans = mid;\n    } else\
    \ if (l1) {\n        ans = mid;\n    } else if (l2) {\n        ans = mid;\n  \
    \  } else {\n        ans = -1;\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpmw1pih0g: /tmp/tmpmw1pih0g.cpp:28: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ long mid = x + (y - x) / 2;\n    while (x <= y) {\n        if (mid % 2 == 0)\
    \ {\n            ans = mid;\n            break;\n        }\n        mid++;\n \
    \   }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n  \
    \  assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12)) ==\
    \ (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpew0pse7q: /tmp/tmpew0pse7q.cpp:29: int main(): Assertion `candidate((13),\
    \ (12)) == (-1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    assert(x >= 0 && y >= 0);\n\
    \    long ans = -1;\n    if (x <= y) {\n        long mid = (x + y) / 2;\n    \
    \    if (mid % 2 == 0) {\n            ans = mid;\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmppevhlkmi: /tmp/tmppevhlkmi.cpp:22: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ while (x<y) {\n        long mid = x + (y-x)/2;\n        if (mid % 2 == 0) {\n\
    \            ans = mid;\n            break;\n        }\n        x = mid;\n   \
    \ }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpzqqaf4d4: /tmp/tmpzqqaf4d4.cpp:29: int main(): Assertion `candidate((13),\
    \ (12)) == (-1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    long m\
    \ = 1;\n    long n = y;\n    long temp;\n    while (m <= n) {\n        temp =\
    \ m * m;\n        if (temp > n) {\n            temp = n;\n        }\n        if\
    \ (temp >= x && temp <= y) {\n            ans = temp;\n            break;\n  \
    \      }\n        m += 2;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp57prutey: /tmp/tmp57prutey.cpp:29: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ long mid = (x + y) / 2;\n    while (x <= y) {\n        if ((x % 2) == 0) {\n\
    \            ans = mid;\n            break;\n        }\n        mid = (mid + y)\
    \ / 2;\n        x++;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpy4lqraku: /tmp/tmpy4lqraku.cpp:29: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >\
    \ y) {\n        swap(x, y);\n    }\n    // If x is even, then y must be even.\n\
    \    if (x % 2 == 0) {\n        if (y % 2 == 0) {\n            ans = x;\n    \
    \    } else {\n            ans = -1;\n        }\n    } else {\n        if (y %\
    \ 2 == 0) {\n            ans = y;\n        } else {\n            ans = -1;\n \
    \       }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1yp_2egu.cpp: In function \u2018long int choose_num(long int, long\
    \ int)\u2019:\n/tmp/tmp1yp_2egu.cpp:12:9: error: \u2018swap\u2019 was not declared\
    \ in this scope\n   12 |         swap(x, y);\n      |         ^~~~\n/tmp/tmp1yp_2egu.cpp:12:9:\
    \ note: suggested alternatives:\nIn file included from /usr/include/c++/9/regex:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmp1yp_2egu.cpp:2:\n/usr/include/c++/9/bits/regex.h:2029:5:\
    \ note:   \u2018std::__cxx11::swap\u2019\n 2029 |     swap(match_results<_Bi_iter,\
    \ _Alloc>& __lhs,\n      |     ^~~~\nIn file included from /usr/include/c++/9/exception:143,\n\
    \                 from /usr/include/c++/9/ios:39,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp1yp_2egu.cpp:2:\n/usr/include/c++/9/bits/exception_ptr.h:166:5: note:\
    \   \u2018std::__exception_ptr::swap\u2019\n  166 |     swap(exception_ptr& __lhs,\
    \ exception_ptr& __rhs)\n      |     ^~~~\nIn file included from /usr/include/c++/9/bits/nested_exception.h:40,\n\
    \                 from /usr/include/c++/9/exception:144,\n                 from\
    \ /usr/include/c++/9/ios:39,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp1yp_2egu.cpp:2:\n/usr/include/c++/9/bits/move.h:182:5: note:   \u2018\
    std::swap\u2019\n  182 |     swap(_Tp& __a, _Tp& __b)\n      |     ^~~~\n/usr/include/c++/9/bits/move.h:182:5:\
    \ note:   \u2018std::swap\u2019\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ while (x+1 < y) {\n        if ((x & 1) == 0) {\n            ans = x;\n     \
    \       break;\n        }\n        x <<= 1;\n        y >>= 1;\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpf60uoij6: /tmp/tmpf60uoij6.cpp:28: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    assert(x >= 0 && y >= 0);\n\
    \    long ans = -1;\n    long mid = (x + y) / 2;\n    long diff = x - mid;\n \
    \   if (diff % 2 == 0) {\n        ans = mid;\n    } else {\n        ans = choose_num(mid,\
    \ y);\n    }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpn5wcyqlx: /tmp/tmpn5wcyqlx.cpp:24: int main(): Assertion `candidate((13),\
    \ (12)) == (-1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long mid = x + (y - x) / 2;\n        ans = choose_num(mid, y);\n\
    \        if (ans == -1) {\n            ans = mid;\n        }\n    } else {\n \
    \       long mid = y + (x - y) / 2;\n        ans = choose_num(x, mid);\n     \
    \   if (ans == -1) {\n            ans = mid;\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ while (x++ < y) {\n        if (x % 2 == 0) {\n            ans = x;\n       \
    \     break;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp5irz4ov_: /tmp/tmp5irz4ov_.cpp:28: int main(): Assertion `candidate((33),\
    \ (12354)) == (12354)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if (x >= y) {\n        return\
    \ -1;\n    }\n    long mid = x + (y - x) / 2;\n    if (mid % 2 == 0) {\n     \
    \   return mid;\n    }\n    return choose_num(mid, y);\n}\nint main() {\n    auto\
    \ candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp18ikgq22: /tmp/tmp18ikgq22.cpp:23: int main(): Assertion `candidate((33),\
    \ (12354)) == (12354)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ long mid = (x + y) / 2;\n    while (x <= y) {\n        if (mid % 2 == 0) {\n\
    \            ans = mid;\n            break;\n        }\n        mid = (mid + y)\
    \ / 2;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpxzjh667r: /tmp/tmpxzjh667r.cpp:29: int main(): Assertion `candidate((13),\
    \ (12)) == (-1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if (x > y) {\n        long\
    \ temp = x;\n        x = y;\n        y = temp;\n    }\n    long ans = -1;\n  \
    \  for (long i = x; i <= y; i++) {\n        if (i % 2 == 0) {\n            ans\
    \ = i;\n            break;\n        }\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpf3p6t38c: /tmp/tmpf3p6t38c.cpp:26: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long mid = x + (y - x) / 2;\n        ans = choose_num(mid, y);\n\
    \        if (ans == -1) {\n            ans = mid;\n        }\n    } else {\n \
    \       long mid = y + (x - y) / 2;\n        ans = choose_num(x, mid);\n     \
    \   if (ans == -1) {\n            ans = mid;\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ while (x<y) {\n        long mid = (x + y)/2;\n        if (mid % 2 == 0) {\n\
    \            ans = mid;\n            break;\n        }\n        else if (mid %\
    \ 2 != 0) {\n            y = mid;\n        }\n        else {\n            x =\
    \ mid;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp4hf56yed: /tmp/tmp4hf56yed.cpp:33: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ while (x<y) {\n        long mid = (x+y)/2;\n        if (mid%2 == 0) {\n    \
    \        ans = mid;\n            break;\n        }\n        if (mid%2 != 0) {\n\
    \            y = mid;\n        }\n        else {\n            x = mid;\n     \
    \   }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp3jpenktz: /tmp/tmp3jpenktz.cpp:33: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long mid = (x + y) / 2;\n        if (mid % 2 == 0) {\n       \
    \     ans = mid;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpuwlx7dky: /tmp/tmpuwlx7dky.cpp:21: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long mid = (x + y) / 2;\n        if (mid % 2 == 0) {\n       \
    \     ans = mid;\n        } else {\n            ans = choose_num(mid, y);\n  \
    \      }\n    } else {\n        long mid = (x + y) / 2;\n        if (mid % 2 ==\
    \ 0) {\n            ans = mid;\n        } else {\n            ans = choose_num(x,\
    \ mid);\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpjx2ntltf: /tmp/tmpjx2ntltf.cpp:30: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    long mid\
    \ = (x + y) / 2;\n    if (x <= mid) {\n        ans = x;\n    } else if (y <= mid)\
    \ {\n        ans = y;\n    } else {\n        ans = mid;\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpzdmhphf9: /tmp/tmpzdmhphf9.cpp:23: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if (x >= y) {\n        return\
    \ -1;\n    }\n    long mid = (x + y) / 2;\n    if (mid % 2 == 0) {\n        return\
    \ mid;\n    } else {\n        return choose_num(mid, y);\n    }\n}\nint main()\
    \ {\n    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpdbx74e62: /tmp/tmpdbx74e62.cpp:24: int main(): Assertion `candidate((33),\
    \ (12354)) == (12354)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ while (x != y) {\n        long mid = (x + y) / 2;\n        if (mid % 2 == 0)\
    \ {\n            ans = mid;\n            x = mid + 1;\n        } else {\n    \
    \        y = mid;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp7mqrya_y: /tmp/tmp7mqrya_y.cpp:29: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ while (y) {\n        if (x % 2 == 0) {\n            ans = y;\n            break;\n\
    \        }\n        y /= 2;\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpna3q6lbz: /tmp/tmpna3q6lbz.cpp:27: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long mid = x + (y - x) / 2;\n        long a = choose_num(x, mid);\n\
    \        long b = choose_num(mid, y);\n        ans = a > b ? a : b;\n    } else\
    \ {\n        long mid = y + (x - y) / 2;\n        long a = choose_num(y, mid);\n\
    \        long b = choose_num(mid, x);\n        ans = a > b ? a : b;\n    }\n \
    \   return ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // Write your code here\n \
    \   long ans = -1;\n    if (x >= y) {\n        long mid = (x + y) / 2;\n     \
    \   if (mid % 2 == 0) {\n            ans = mid;\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp_q0wiofh: /tmp/tmp_q0wiofh.cpp:22: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ while (x+1 < y) {\n        long mid = (x+y)/2;\n        if (mid % 2 == 0) {\n\
    \            ans = mid;\n            x = mid;\n        } else {\n            y\
    \ = mid;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpbrtsbthn: /tmp/tmpbrtsbthn.cpp:29: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ while (x<y) {\n        long mid = (x+y)/2;\n        if (mid%2 == 0) {\n    \
    \        ans = mid;\n            x = mid+1;\n        } else {\n            y =\
    \ mid;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpxdvbgj6_: /tmp/tmpxdvbgj6_.cpp:29: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // Write your code here\n \
    \   long ans = -1;\n    if (x >= y) {\n        long mid = x + (y - x) / 2;\n \
    \       long res = choose_num(mid, y);\n        if (res > ans)\n            ans\
    \ = res;\n    }\n    else if (x <= y) {\n        long mid = x + (y - x) / 2;\n\
    \        long res = choose_num(x, mid);\n        if (res > ans)\n            ans\
    \ = res;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    long m\
    \ = 1;\n    long n = y;\n    long k = 0;\n    long temp;\n    while(m <= n) {\n\
    \        temp = m;\n        m = n;\n        n = temp;\n        k++;\n    }\n \
    \   while(k >= 0) {\n        temp = k;\n        k = k / 2;\n        if(temp %\
    \ 2 == 0) {\n            ans = temp;\n            break;\n        }\n    }\n \
    \   return ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp7u7kimqr: /tmp/tmp7u7kimqr.cpp:33: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if (x >= y) {\n        return\
    \ -1;\n    }\n    long mid = (x + y) / 2;\n    if (mid % 2 == 0) {\n        return\
    \ mid;\n    }\n    return choose_num(mid, y);\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp411uxx_3: /tmp/tmp411uxx_3.cpp:23: int main(): Assertion `candidate((33),\
    \ (12354)) == (12354)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    long temp;\n\
    \    temp = x;\n    while (temp <= y) {\n        if (temp % 2 == 0) {\n      \
    \      ans = temp;\n            break;\n        }\n        temp++;\n    }\n  \
    \  return ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp6l4wbkv4: /tmp/tmp6l4wbkv4.cpp:24: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ while (x+1 < y) {\n        if (x%2 == 0) {\n            x = x + 1;\n       \
    \ } else {\n            y = y - 1;\n        }\n    }\n    if (x%2 == 0) {\n  \
    \      ans = x;\n    }\n    return ans;\n}\nint main() {\n    auto candidate =\
    \ choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp6qb74j35: /tmp/tmp6qb74j35.cpp:30: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // Write your code here\n \
    \   long ans = -1;\n    long m = x;\n    long n = y;\n    long temp;\n    while(m\
    \ <= n) {\n        temp = m*m;\n        if(temp > n) {\n            temp = n;\n\
    \        }\n        if(temp % 2 == 0) {\n            ans = temp;\n           \
    \ break;\n        }\n        m += 1;\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpee_0ioyu: /tmp/tmpee_0ioyu.cpp:30: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    assert(x >= 0 && y >= 0);\n\
    \    if (x > y) {\n        long temp = x;\n        x = y;\n        y = temp;\n\
    \    }\n    long ans = -1;\n    for (long i = 0; i <= y; i++) {\n        if (x\
    \ % 2 == 0) {\n            ans = i;\n            break;\n        }\n        x\
    \ /= 2;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpgcd6ptva: /tmp/tmpgcd6ptva.cpp:28: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ while (x<y) {\n        long mid = (x + y)/2;\n        if (mid % 2 == 0) {\n\
    \            ans = mid;\n            break;\n        }\n        else if (mid <\
    \ y) {\n            x = mid + 1;\n        }\n        else {\n            y = mid\
    \ - 1;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp4fm5sm7b: /tmp/tmp4fm5sm7b.cpp:34: int main(): Assertion `candidate((13),\
    \ (12)) == (-1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    long mid\
    \ = (x + y) / 2;\n    if (mid % 2 == 0) {\n        ans = mid;\n    } else {\n\
    \        if (x <= mid) {\n            ans = mid;\n        } else {\n         \
    \   ans = mid;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp268lc1p3: /tmp/tmp268lc1p3.cpp:25: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    assert(x >= 0 && y >= 0);\n\
    \    long ans = -1;\n    if (x > y) {\n        long temp = x;\n        x = y;\n\
    \        y = temp;\n    }\n    for (long i = x; i <= y; i++) {\n        if (i\
    \ % 2 == 0) {\n            ans = i;\n            break;\n        }\n    }\n  \
    \  return ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp5xwz41q1: /tmp/tmp5xwz41q1.cpp:27: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >\
    \ y) {\n        swap(x, y);\n    }\n    for (long i = x; i <= y; i++) {\n    \
    \    if (i % 2 == 0) {\n            ans = i;\n            break;\n        }\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n \
    \   assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12)) ==\
    \ (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpyk0k33uc.cpp: In function \u2018long int choose_num(long int, long\
    \ int)\u2019:\n/tmp/tmpyk0k33uc.cpp:12:9: error: \u2018swap\u2019 was not declared\
    \ in this scope\n   12 |         swap(x, y);\n      |         ^~~~\n/tmp/tmpyk0k33uc.cpp:12:9:\
    \ note: suggested alternatives:\nIn file included from /usr/include/c++/9/regex:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpyk0k33uc.cpp:2:\n/usr/include/c++/9/bits/regex.h:2029:5:\
    \ note:   \u2018std::__cxx11::swap\u2019\n 2029 |     swap(match_results<_Bi_iter,\
    \ _Alloc>& __lhs,\n      |     ^~~~\nIn file included from /usr/include/c++/9/exception:143,\n\
    \                 from /usr/include/c++/9/ios:39,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpyk0k33uc.cpp:2:\n/usr/include/c++/9/bits/exception_ptr.h:166:5: note:\
    \   \u2018std::__exception_ptr::swap\u2019\n  166 |     swap(exception_ptr& __lhs,\
    \ exception_ptr& __rhs)\n      |     ^~~~\nIn file included from /usr/include/c++/9/bits/nested_exception.h:40,\n\
    \                 from /usr/include/c++/9/exception:144,\n                 from\
    \ /usr/include/c++/9/ios:39,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpyk0k33uc.cpp:2:\n/usr/include/c++/9/bits/move.h:182:5: note:   \u2018\
    std::swap\u2019\n  182 |     swap(_Tp& __a, _Tp& __b)\n      |     ^~~~\n/usr/include/c++/9/bits/move.h:182:5:\
    \ note:   \u2018std::swap\u2019\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long mid = (x + y) / 2;\n        long mid2 = mid * mid;\n    \
    \    if (mid2 > x) {\n            ans = mid;\n        } else if (mid2 < y) {\n\
    \            ans = mid;\n        } else {\n            ans = mid2;\n        }\n\
    \    } else {\n        long mid = (x + y) / 2;\n        long mid2 = mid * mid;\n\
    \        if (mid2 < y) {\n            ans = mid;\n        } else {\n         \
    \   ans = mid2;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpbd9kcy9k: /tmp/tmpbd9kcy9k.cpp:34: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // Write your code here\n \
    \   long ans = -1;\n    if (x >= y) {\n        long mid = (x + y) / 2;\n     \
    \   if (mid % 2 == 0) {\n            ans = mid;\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp4fxmmd0v: /tmp/tmp4fxmmd0v.cpp:22: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >\
    \ y) {\n        swap(x, y);\n    }\n    // If x is smaller than y, then x must\
    \ be even.\n    if (x <= y) {\n        // If x is even, then y must be even.\n\
    \        if ((x % 2) == 0) {\n            if ((y % 2) == 0) {\n              \
    \  ans = x;\n            }\n            else {\n                ans = y;\n   \
    \         }\n        }\n        // If x is odd, then y must be odd.\n        else\
    \ {\n            if ((y % 2) == 1) {\n                ans = x;\n            }\n\
    \            else {\n                ans = y;\n            }\n        }\n    }\n\
    \    // If y is smaller than x, then y must be even.\n    else {\n        // If\
    \ y is even, then x must be even.\n        if ((y % 2) == 0) {\n            if\
    \ ((x % 2) == 0) {\n                ans = y;\n            }\n            else\
    \ {\n                ans = x;\n            }\n        }\n        // If y is odd,\
    \ then x must be odd.\n        else {\n            if ((x % 2) == 1) {\n     \
    \           ans = y;\n            }\n            else {\n                ans =\
    \ x;\n            }\n        }\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp29j9boqp.cpp: In function \u2018long int choose_num(long int, long\
    \ int)\u2019:\n/tmp/tmp29j9boqp.cpp:12:9: error: \u2018swap\u2019 was not declared\
    \ in this scope\n   12 |         swap(x, y);\n      |         ^~~~\n/tmp/tmp29j9boqp.cpp:12:9:\
    \ note: suggested alternatives:\nIn file included from /usr/include/c++/9/regex:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmp29j9boqp.cpp:2:\n/usr/include/c++/9/bits/regex.h:2029:5:\
    \ note:   \u2018std::__cxx11::swap\u2019\n 2029 |     swap(match_results<_Bi_iter,\
    \ _Alloc>& __lhs,\n      |     ^~~~\nIn file included from /usr/include/c++/9/exception:143,\n\
    \                 from /usr/include/c++/9/ios:39,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp29j9boqp.cpp:2:\n/usr/include/c++/9/bits/exception_ptr.h:166:5: note:\
    \   \u2018std::__exception_ptr::swap\u2019\n  166 |     swap(exception_ptr& __lhs,\
    \ exception_ptr& __rhs)\n      |     ^~~~\nIn file included from /usr/include/c++/9/bits/nested_exception.h:40,\n\
    \                 from /usr/include/c++/9/exception:144,\n                 from\
    \ /usr/include/c++/9/ios:39,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp29j9boqp.cpp:2:\n/usr/include/c++/9/bits/move.h:182:5: note:   \u2018\
    std::swap\u2019\n  182 |     swap(_Tp& __a, _Tp& __b)\n      |     ^~~~\n/usr/include/c++/9/bits/move.h:182:5:\
    \ note:   \u2018std::swap\u2019\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ while (x != y) {\n        if (x % 2 == 0) {\n            x = x / 2;\n      \
    \  } else {\n            y = y / 2;\n        }\n    }\n    if (x == y) {\n   \
    \     ans = x;\n    }\n    return ans;\n}\nint main() {\n    auto candidate =\
    \ choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpbbp21nm9: /tmp/tmpbbp21nm9.cpp:30: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long mid = (x + y) / 2;\n        ans = choose_num(mid, y);\n \
    \       if (ans == -1) {\n            ans = choose_num(x, mid);\n        }\n \
    \   } else {\n        long mid = (x + y) / 2;\n        ans = choose_num(x, mid);\n\
    \        if (ans == -1) {\n            ans = choose_num(y, mid);\n        }\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n \
    \   assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12)) ==\
    \ (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    long m\
    \ = 1;\n    long n = y;\n    long k;\n    long temp;\n    while (m <= n) {\n \
    \       k = m;\n        temp = m;\n        while (temp <= n) {\n            if\
    \ (k % 2 == 0 && temp % 2 == 0) {\n                ans = temp;\n             \
    \   break;\n            }\n            temp++;\n        }\n        m++;\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpd1aj8_xw: /tmp/tmpd1aj8_xw.cpp:32: int main(): Assertion `candidate((13),\
    \ (12)) == (-1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    assert(x >= 0 && y >= 0);\n\
    \    long ans = -1;\n    long mid = (x + y) / 2;\n    if (mid % 2 == 0) {\n  \
    \      ans = mid;\n    }\n    if (mid > x) {\n        ans = mid;\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpj8yxbwu0: /tmp/tmpj8yxbwu0.cpp:23: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // Write your code here\n \
    \   long ans = -1;\n    long mid = (x + y) / 2;\n    if (mid % 2 == 0) {\n   \
    \     ans = mid;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpk83meltn: /tmp/tmpk83meltn.cpp:20: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ while (x != y) {\n        if (x % 2 == 0) {\n            x = x / 2;\n      \
    \  } else {\n            y = y / 2;\n        }\n    }\n    if (x == y) {\n   \
    \     ans = x;\n    }\n    return ans;\n}\nint main() {\n    auto candidate =\
    \ choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp3hoc46hl: /tmp/tmp3hoc46hl.cpp:30: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long mid = x + (y - x) / 2;\n        ans = choose_num(mid, y);\n\
    \        if (ans == -1) {\n            ans = mid;\n        }\n    } else {\n \
    \       long mid = y + (x - y) / 2;\n        ans = choose_num(x, mid);\n     \
    \   if (ans == -1) {\n            ans = mid;\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ while (x<y) {\n        long mid = (x+y)/2;\n        if (mid%2 == 0) {\n    \
    \        ans = mid;\n            break;\n        }\n        if (mid%2 != 0) {\n\
    \            y = mid;\n        }\n        else {\n            x = mid;\n     \
    \   }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpbegg8k4x: /tmp/tmpbegg8k4x.cpp:33: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long mid = (x + y) / 2;\n        ans = choose_num(x, mid);\n \
    \       if (ans == -1) {\n            ans = choose_num(mid + 1, y);\n        }\n\
    \    } else {\n        long mid = (x + y) / 2;\n        ans = choose_num(mid,\
    \ y);\n        if (ans == -1) {\n            ans = choose_num(x, mid - 1);\n \
    \       }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ while (x+1 < y) {\n        long mid = (x+y)/2;\n        if (mid % 2 == 0) {\n\
    \            ans = mid;\n            x = mid;\n        } else {\n            y\
    \ = mid;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp8r6uy68v: /tmp/tmp8r6uy68v.cpp:29: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long mid = x + (y - x) / 2;\n        ans = choose_num(mid, y);\n\
    \        if (ans == -1) {\n            ans = mid;\n        }\n    } else {\n \
    \       long mid = y + (x - y) / 2;\n        ans = choose_num(x, mid);\n     \
    \   if (ans == -1) {\n            ans = mid;\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long mid = x + (y - x) / 2;\n        ans = choose_num(mid, y);\n\
    \        if (ans == -1) {\n            ans = mid;\n        }\n    } else {\n \
    \       long mid = y + (x - y) / 2;\n        ans = choose_num(x, mid);\n     \
    \   if (ans == -1) {\n            ans = mid;\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ while (x != y) {\n        if (x % 2 == 0) {\n            x = x / 2;\n      \
    \      ans = ans * 2 + x;\n        } else {\n            y = y / 2;\n        \
    \    ans = ans * 2 + y;\n        }\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp5mbtbgf2: /tmp/tmp5mbtbgf2.cpp:29: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    long mid\
    \ = (x + y) / 2;\n    long left_bound = mid;\n    long right_bound = mid;\n  \
    \  while (left_bound < right_bound) {\n        long mid = (left_bound + right_bound)\
    \ / 2;\n        if (mid * mid <= left_bound * right_bound) {\n            ans\
    \ = mid;\n            left_bound = mid;\n        } else {\n            right_bound\
    \ = mid;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp467y_9ya: /tmp/tmp467y_9ya.cpp:27: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ while (x % 2 == 0 && y % 2 == 0) {\n        long temp = x;\n        x = y;\n\
    \        y = temp;\n    }\n    if (x == y) {\n        ans = x;\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp4vjfowa1: /tmp/tmp4vjfowa1.cpp:28: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long mid = x + (y - x) / 2;\n        ans = choose_num(mid, y);\n\
    \        if (ans == -1) {\n            ans = mid;\n        }\n    } else {\n \
    \       long mid = y + (x - y) / 2;\n        ans = choose_num(x, mid);\n     \
    \   if (ans == -1) {\n            ans = mid;\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ while (x+1 < y) {\n        long mid = (x+y)/2;\n        if (mid%2 == 0) {\n\
    \            ans = mid;\n            x = mid+1;\n        } else {\n          \
    \  y = mid;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmplq9taqhz: /tmp/tmplq9taqhz.cpp:29: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long mid = (x + y) / 2;\n        if (mid % 2 == 0) {\n       \
    \     ans = mid;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpwwj6y0ai: /tmp/tmpwwj6y0ai.cpp:21: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long mid = x + (y - x) / 2;\n        if (mid % 2 == 0) {\n   \
    \         ans = mid;\n        }\n        else {\n            ans = choose_num(mid,\
    \ y);\n        }\n    }\n    else {\n        long mid = y + (x - y) / 2;\n   \
    \     if (mid % 2 == 0) {\n            ans = mid;\n        }\n        else {\n\
    \            ans = choose_num(x, mid);\n        }\n    }\n    return ans;\n}\n\
    int main() {\n    auto candidate = choose_num;\n    assert(candidate((12), (15))\
    \ == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ long mid = (x + y) / 2;\n    while (x != mid && y != mid && x % 2 == 0 && y\
    \ % 2 == 0) {\n        if (x <= mid) {\n            x = mid + 1;\n        } else\
    \ {\n            y = mid - 1;\n        }\n        mid = (x + y) / 2;\n    }\n\
    \    if (x == mid) {\n        ans = mid;\n    } else if (y == mid) {\n       \
    \ ans = mid;\n    } else {\n        ans = -1;\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = choose_num;\n    assert(candidate((12), (15))\
    \ == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpdinbkpck: /tmp/tmpdinbkpck.cpp:36: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // Write your code here\n \
    \   long ans = -1;\n    long m = 1;\n    long n = y;\n    long q = x;\n    long\
    \ r = x;\n    long s = 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n\
    \    long w = 1;\n    long x = x;\n    long y = y;\n    long z = x;\n    long\
    \ a = x;\n    long b = y;\n    long c = x;\n    long d = y;\n    long e = x;\n\
    \    long f = y;\n    long g = x;\n    long h = y;\n    long i = x;\n    long\
    \ j = y;\n    long k = x;\n    long l = y;\n    long m = 1;\n    long n = y;\n\
    \    long q = x;\n    long r = x;\n    long s = 1;\n    long t = 1;\n    long\
    \ u = 1;\n    long v = 1;\n    long w = 1;\n    long x = x;\n    long y = y;\n\
    \    long z = x;\n    long a = x;\n    long b = y;\n    long c = x;\n    long\
    \ d = y;\n    long e = x;\n    long f = y;\n    long g = x;\n    long h = y;\n\
    \    long i = x;\n    long j = y;\n    long k = x;\n    long l = y;\n    long\
    \ m = 1;\n    long n = y;\n    long q = x;\n    long r = x;\n    long s = 1;\n\
    \    long t = 1;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n    long\
    \ x = x;\n    long y = y;\n    long z = x;\n    long a = x;\n    long b = y;\n\
    \    long c = x;\n    long d = y;\n    long e = x;\n    long f = y;\n    long\
    \ g = x;\n    long h = y;\n    long i = x;\n    long j = y;\n    long k = x;\n\
    \    long l = y;\n    long m = 1;\n    long n = y;\n    long q = x;\n    long\
    \ r = x;\n    long s = 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n\
    \    long w = 1;\n    long x = x;\n    long y = y;\n    long z = x;\n    long\
    \ a = x;\n    long b = y;\n    long c = x;\n    long d = y;\n    long e = x;\n\
    \    long f = y;\n    long g = x;\n    long h = y;\n    long i = x;\n    long\
    \ j = y;\n    long k = x;\n    long l = y;\n    long m = 1;\n    long n = y;\n\
    \    long q = x;\n    long r = x;\n    \n}\nint main() {\n    auto candidate =\
    \ choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7pfn5pvo.cpp: In function \u2018long int choose_num(long int, long\
    \ int)\u2019:\n/tmp/tmp7pfn5pvo.cpp:21:10: error: declaration of \u2018long int\
    \ x\u2019 shadows a parameter\n   21 |     long x = x;\n      |          ^\n/tmp/tmp7pfn5pvo.cpp:22:10:\
    \ error: declaration of \u2018long int y\u2019 shadows a parameter\n   22 |  \
    \   long y = y;\n      |          ^\n/tmp/tmp7pfn5pvo.cpp:36:10: error: redeclaration\
    \ of \u2018long int m\u2019\n   36 |     long m = 1;\n      |          ^\n/tmp/tmp7pfn5pvo.cpp:12:10:\
    \ note: \u2018long int m\u2019 previously declared here\n   12 |     long m =\
    \ 1;\n      |          ^\n/tmp/tmp7pfn5pvo.cpp:37:10: error: redeclaration of\
    \ \u2018long int n\u2019\n   37 |     long n = y;\n      |          ^\n/tmp/tmp7pfn5pvo.cpp:13:10:\
    \ note: \u2018long int n\u2019 previously declared here\n   13 |     long n =\
    \ y;\n      |          ^\n/tmp/tmp7pfn5pvo.cpp:38:10: error: redeclaration of\
    \ \u2018long int q\u2019\n   38 |     long q = x;\n      |          ^\n/tmp/tmp7pfn5pvo.cpp:14:10:\
    \ note: \u2018long int q\u2019 previously declared here\n   14 |     long q =\
    \ x;\n      |          ^\n/tmp/tmp7pfn5pvo.cpp:39:10: error: redeclaration of\
    \ \u2018long int r\u2019\n   39 |     long r = x;\n      |          ^\n/tmp/tmp7pfn5pvo.cpp:15:10:\
    \ note: \u2018long int r\u2019 previously declared here\n   15 |     long r =\
    \ x;\n      |          ^\n/tmp/tmp7pfn5pvo.cpp:40:10: error: redeclaration of\
    \ \u2018long int s\u2019\n   40 |     long s = 1;\n      |          ^\n/tmp/tmp7pfn5pvo.cpp:16:10:\
    \ note: \u2018long int s\u2019 previously declared here\n   16 |     long s =\
    \ 1;\n      |          ^\n/tmp/tmp7pfn5pvo.cpp:41:10: error: redeclaration of\
    \ \u2018long int t\u2019\n   41 |     long t = 1;\n      |          ^\n/tmp/tmp7pfn5pvo.cpp:17:10:\
    \ note: \u2018long int t\u2019 previously declared here\n   17 |     long t =\
    \ 1;\n      |          ^\n/tmp/tmp7pfn5pvo.cpp:42:10: error: redeclaration of\
    \ \u2018long int u\u2019\n   42 |     long u = 1;\n      |          ^\n/tmp/tmp7pfn5pvo.cpp:18:10:\
    \ note: \u2018long int u\u2019 previously declared here\n   18 |     long u =\
    \ 1;\n      |          ^\n/tmp/tmp7pfn5pvo.cpp:43:10: error: redeclaration of\
    \ \u2018long int v\u2019\n   43 |     long v = 1;\n      |          ^\n/tmp/tmp7pfn5pvo.cpp:19:10:\
    \ note: \u2018long int v\u2019 previously declared here\n   19 |     long v =\
    \ 1;\n      |          ^\n/tmp/tmp7pfn5pvo.cpp:44:10: error: redeclaration of\
    \ \u2018long int w\u2019\n   44 |     long w = 1;\n      |          ^\n/tmp/tmp7pfn5pvo.cpp:20:10:\
    \ note: \u2018long int w\u2019 previously declared here\n   20 |     long w =\
    \ 1;\n      |          ^\n/tmp/tmp7pfn5pvo.cpp:45:10: error: redeclaration of\
    \ \u2018long int x\u2019\n   45 |     long x = x;\n      |          ^\n/tmp/tmp7pfn5pvo.cpp:21:10:\
    \ note: \u2018long int x\u2019 previously declared here\n   21 |     long x =\
    \ x;\n      |          ^\n/tmp/tmp7pfn5pvo.cpp:46:10: error: redeclaration of\
    \ \u2018long int y\u2019\n   46 |     long y = y;\n      |          ^\n/tmp/tmp7pfn5pvo.cpp:22:10:\
    \ note: \u2018long int y\u2019 previously declared here\n   22 |     long y =\
    \ y;\n      |          ^\n/tmp/tmp7pfn5pvo.cpp:47:10: error: redeclaration of\
    \ \u2018long int z\u2019\n   47 |     long z = x;\n      |          ^\n/tmp/tmp7pfn5pvo.cpp:23:10:\
    \ note: \u2018long int z\u2019 previously declared here\n   23 |     long z =\
    \ x;\n      |          ^\n/tmp/tmp7pfn5pvo.cpp:48:10: error: redeclaration of\
    \ \u2018long int a\u2019\n   48 |     long a = x;\n      |          ^\n/tmp/tmp7pfn5pvo.cpp:24:10:\
    \ note: \u2018long int a\u2019 previously declared here\n   24 |     long a =\
    \ x;\n      |          ^\n/tmp/tmp7pfn5pvo.cpp:49:10: error: redeclaration of\
    \ \u2018long int b\u2019\n   49 |     long b = y;\n      |          ^\n/tmp/tmp7pfn5pvo.cpp:25:10:\
    \ note: \u2018long int b\u2019 previously declared here\n   25 |     long b =\
    \ y;\n      |          ^\n/tmp/tmp7pfn5pvo.cpp:50:10: error: redeclaration of\
    \ \u2018long int c\u2019\n   50 |     long c = x;\n      |          ^\n/tmp/tmp7pfn5pvo.cpp:26:10:\
    \ note: \u2018long int c\u2019 previously declared here\n   26 |     long c =\
    \ x;\n      |          ^\n/tmp/tmp7pfn5pvo.cpp:51:10: error: redeclaration of\
    \ \u2018long int d\u2019\n   51 |     long d = y;\n      |          ^\n/tmp/tmp7pfn5pvo.cpp:27:10:\
    \ note: \u2018long int d\u2019 previously declared here\n   27 |     long d =\
    \ y;\n      |          ^\n/tmp/tmp7pfn5pvo.cpp:52:10: error: redeclaration of\
    \ \u2018long int e\u2019\n   52 |     long e = x;\n      |          ^\n/tmp/tmp7pfn5pvo.cpp:28:10:\
    \ note: \u2018long int e\u2019 previously declared here\n   28 |     long e =\
    \ x;\n      |          ^\n/tmp/tmp7pfn5pvo.cpp:53:10: error: redeclaration of\
    \ \u2018long int f\u2019\n   53 |     long f = y;\n      |          ^\n/tmp/tmp7pfn5pvo.cpp:29:10:\
    \ note: \u2018long int f\u2019 previously declared here\n   29 |     long f =\
    \ y;\n      |          ^\n/tmp/tmp7pfn5pvo.cpp:54:10: error: redeclaration of\
    \ \u2018long int g\u2019\n   54 |     long g = x;\n      |          ^\n/tmp/tmp7pfn5pvo.cpp:30:10:\
    \ note: \u2018long int g\u2019 previously declared here\n   30 |     long g =\
    \ x;\n      |          ^\n/tmp/tmp7pfn5pvo.cpp:55:10: error: redeclaration of\
    \ \u2018long int h\u2019\n   55 |     long h = y;\n      |          ^\n/tmp/tmp7pfn5pvo.cpp:31:10:\
    \ note: \u2018long int h\u2019 previously declared here\n   31 |     long h =\
    \ y;\n      |          ^\n/tmp/tmp7pfn5pvo.cpp:56:10: error: redeclaration of\
    \ \u2018long int i\u2019\n   56 |     long i = x;\n      |          ^\n/tmp/tmp7pfn5pvo.cpp:32:10:\
    \ note: \u2018long int i\u2019 previously declared here\n   32 |     long i =\
    \ x;\n      |          ^\n/tmp/tmp7pfn5pvo.cpp:57:10: error: redeclaration of\
    \ \u2018long int j\u2019\n   57 |     long j = y;\n      |          ^\n/tmp/tmp7pfn5pvo.cpp:33:10:\
    \ note: \u2018long int j\u2019 previously declared here\n   33 |     long j =\
    \ y;\n      |          ^\n/tmp/tmp7pfn5pvo.cpp:58:10: error: redeclaration of\
    \ \u2018long int k\u2019\n   58 |     long k = x;\n      |          ^\n/tmp/tmp7pfn5pvo.cpp:34:10:\
    \ note: \u2018long int k\u2019 previously declared here\n   34 |     long k =\
    \ x;\n      |          ^\n/tmp/tmp7pfn5pvo.cpp:59:10: error: redeclaration of\
    \ \u2018long int l\u2019\n   59 |     long l = y;\n      |          ^\n/tmp/tmp7pfn5pvo.cpp:35:10:\
    \ note: \u2018long int l\u2019 previously declared here\n   35 |     long l =\
    \ y;\n      |          ^\n/tmp/tmp7pfn5pvo.cpp:60:10: error: redeclaration of\
    \ \u2018long int m\u2019\n   60 |     long m = 1;\n      |          ^\n/tmp/tmp7pfn5pvo.cpp:12:10:\
    \ note: \u2018long int m\u2019 previously declared here\n   12 |     long m =\
    \ 1;\n      |          ^\n/tmp/tmp7pfn5pvo.cpp:61:10: error: redeclaration of\
    \ \u2018long int n\u2019\n   61 |     long n = y;\n      |          ^\n/tmp/tmp7pfn5pvo.cpp:13:10:\
    \ note: \u2018long int n\u2019 previously declared here\n   13 |     long n =\
    \ y;\n      |          ^\n/tmp/tmp7pfn5pvo.cpp:62:10: error: redeclaration of\
    \ \u2018long int q\u2019\n   62 |     long q = x;\n      |          ^\n/tmp/tmp7pfn5pvo.cpp:14:10:\
    \ note: \u2018long int q\u2019 previously declared here\n   14 |     long q =\
    \ x;\n      |          ^\n/tmp/tmp7pfn5pvo.cpp:63:10: error: redeclaration of\
    \ \u2018long int r\u2019\n   63 |     long r = x;\n      |          ^\n/tmp/tmp7pfn5pvo.cpp:15:10:\
    \ note: \u2018long int r\u2019 previously declared here\n   15 |     long r =\
    \ x;\n      |          ^\n/tmp/tmp7pfn5pvo.cpp:64:10: error: redeclaration of\
    \ \u2018long int s\u2019\n   64 |     long s = 1;\n      |          ^\n/tmp/tmp7pfn5pvo.cpp:16:10:\
    \ note: \u2018long int s\u2019 previously declared here\n   16 |     long s =\
    \ 1;\n      |          ^\n/tmp/tmp7pfn5pvo.cpp:65:10: error: redeclaration of\
    \ \u2018long int t\u2019\n   65 |     long t = 1;\n      |          ^\n/tmp/tmp7pfn5pvo.cpp:17:10:\
    \ note: \u2018long int t\u2019 previously declared here\n   17 |     long t =\
    \ 1;\n      |          ^\n/tmp/tmp7pfn5pvo.cpp:66:10: error: redeclaration of\
    \ \u2018long int u\u2019\n   66 |     long u = 1;\n      |          ^\n/tmp/tmp7pfn5pvo.cpp:18:10:\
    \ note: \u2018long int u\u2019 previously declared here\n   18 |     long u =\
    \ 1;\n      |          ^\n/tmp/tmp7pfn5pvo.cpp:67:10: error: redeclaration of\
    \ \u2018long int v\u2019\n   67 |     long v = 1;\n      |          ^\n/tmp/tmp7pfn5pvo.cpp:19:10:\
    \ note: \u2018long int v\u2019 previously declared here\n   19 |     long v =\
    \ 1;\n      |          ^\n/tmp/tmp7pfn5pvo.cpp:68:10: error: redeclaration of\
    \ \u2018long int w\u2019\n   68 |     long w = 1;\n      |          ^\n/tmp/tmp7pfn5pvo.cpp:20:10:\
    \ note: \u2018long int w\u2019 previously declared here\n   20 |     long w =\
    \ 1;\n      |          ^\n/tmp/tmp7pfn5pvo.cpp:69:10: error: redeclaration of\
    \ \u2018long int x\u2019\n   69 |     long x = x;\n      |          ^\n/tmp/tmp7pfn5pvo.cpp:21:10:\
    \ note: \u2018long int x\u2019 previously declared here\n   21 |     long x =\
    \ x;\n      |          ^\n/tmp/tmp7pfn5pvo.cpp:70:10: error: redeclaration of\
    \ \u2018long int y\u2019\n   70 |     long y = y;\n      |          ^\n/tmp/tmp7pfn5pvo.cpp:22:10:\
    \ note: \u2018long int y\u2019 previously declared here\n   22 |     long y =\
    \ y;\n      |          ^\n/tmp/tmp7pfn5pvo.cpp:71:10: error: redeclaration of\
    \ \u2018long int z\u2019\n   71 |     long z = x;\n      |          ^\n/tmp/tmp7pfn5pvo.cpp:23:10:\
    \ note: \u2018long int z\u2019 previously declared here\n   23 |     long z =\
    \ x;\n      |          ^\n/tmp/tmp7pfn5pvo.cpp:72:10: error: redeclaration of\
    \ \u2018long int a\u2019\n   72 |     long a = x;\n      |          ^\n/tmp/tmp7pfn5pvo.cpp:24:10:\
    \ note: \u2018long int a\u2019 previously declared here\n   24 |     long a =\
    \ x;\n      |          ^\n/tmp/tmp7pfn5pvo.cpp:73:10: error: redeclaration of\
    \ \u2018long int b\u2019\n   73 |     long b = y;\n      |          ^\n/tmp/tmp7pfn5pvo.cpp:25:10:\
    \ note: \u2018long int b\u2019 previously declared here\n   25 |     long b =\
    \ y;\n      |          ^\n/tmp/tmp7pfn5pvo.cpp:74:10: error: redeclaration of\
    \ \u2018long int c\u2019\n   74 |     long c = x;\n      |          ^\n/tmp/tmp7pfn5pvo.cpp:26:10:\
    \ note: \u2018long int c\u2019 previously declared here\n   26 |     long c =\
    \ x;\n      |          ^\n/tmp/tmp7pfn5pvo.cpp:75:10: error: redeclaration of\
    \ \u2018long int d\u2019\n   75 |     long d = y;\n      |          ^\n/tmp/tmp7pfn5pvo.cpp:27:10:\
    \ note: \u2018long int d\u2019 previously declared here\n   27 |     long d =\
    \ y;\n      |          ^\n/tmp/tmp7pfn5pvo.cpp:76:10: error: redeclaration of\
    \ \u2018long int e\u2019\n   76 |     long e = x;\n      |          ^\n/tmp/tmp7pfn5pvo.cpp:28:10:\
    \ note: \u2018long int e\u2019 previously declared here\n   28 |     long e =\
    \ x;\n      |          ^\n/tmp/tmp7pfn5pvo.cpp:77:10: error: redeclaration of\
    \ \u2018long int f\u2019\n   77 |     long f = y;\n      |          ^\n/tmp/tmp7pfn5pvo.cpp:29:10:\
    \ note: \u2018long int f\u2019 previously declared here\n   29 |     long f =\
    \ y;\n      |          ^\n/tmp/tmp7pfn5pvo.cpp:78:10: error: redeclaration of\
    \ \u2018long int g\u2019\n   78 |     long g = x;\n      |          ^\n/tmp/tmp7pfn5pvo.cpp:30:10:\
    \ note: \u2018long int g\u2019 previously declared here\n   30 |     long g =\
    \ x;\n      |          ^\n/tmp/tmp7pfn5pvo.cpp:79:10: error: redeclaration of\
    \ \u2018long int h\u2019\n   79 |     long h = y;\n      |          ^\n/tmp/tmp7pfn5pvo.cpp:31:10:\
    \ note: \u2018long int h\u2019 previously declared here\n   31 |     long h =\
    \ y;\n      |          ^\n/tmp/tmp7pfn5pvo.cpp:80:10: error: redeclaration of\
    \ \u2018long int i\u2019\n   80 |     long i = x;\n      |          ^\n/tmp/tmp7pfn5pvo.cpp:32:10:\
    \ note: \u2018long int i\u2019 previously declared here\n   32 |     long i =\
    \ x;\n      |          ^\n/tmp/tmp7pfn5pvo.cpp:81:10: error: redeclaration of\
    \ \u2018long int j\u2019\n   81 |     long j = y;\n      |          ^\n/tmp/tmp7pfn5pvo.cpp:33:10:\
    \ note: \u2018long int j\u2019 previously declared here\n   33 |     long j =\
    \ y;\n      |          ^\n/tmp/tmp7pfn5pvo.cpp:82:10: error: redeclaration of\
    \ \u2018long int k\u2019\n   82 |     long k = x;\n      |          ^\n/tmp/tmp7pfn5pvo.cpp:34:10:\
    \ note: \u2018long int k\u2019 previously declared here\n   34 |     long k =\
    \ x;\n      |          ^\n/tmp/tmp7pfn5pvo.cpp:83:10: error: redeclaration of\
    \ \u2018long int l\u2019\n   83 |     long l = y;\n      |          ^\n/tmp/tmp7pfn5pvo.cpp:35:10:\
    \ note: \u2018long int l\u2019 previously declared here\n   35 |     long l =\
    \ y;\n      |          ^\n/tmp/tmp7pfn5pvo.cpp:84:10: error: redeclaration of\
    \ \u2018long int m\u2019\n   84 |     long m = 1;\n      |          ^\n/tmp/tmp7pfn5pvo.cpp:12:10:\
    \ note: \u2018long int m\u2019 previously declared here\n   12 |     long m =\
    \ 1;\n      |          ^\n/tmp/tmp7pfn5pvo.cpp:85:10: error: redeclaration of\
    \ \u2018long int n\u2019\n   85 |     long n = y;\n      |          ^\n/tmp/tmp7pfn5pvo.cpp:13:10:\
    \ note: \u2018long int n\u2019 previously declared here\n   13 |     long n =\
    \ y;\n      |          ^\n/tmp/tmp7pfn5pvo.cpp:86:10: error: redeclaration of\
    \ \u2018long int q\u2019\n   86 |     long q = x;\n      |          ^\n/tmp/tmp7pfn5pvo.cpp:14:10:\
    \ note: \u2018long int q\u2019 previously declared here\n   14 |     long q =\
    \ x;\n      |          ^\n/tmp/tmp7pfn5pvo.cpp:87:10: error: redeclaration of\
    \ \u2018long int r\u2019\n   87 |     long r = x;\n      |          ^\n/tmp/tmp7pfn5pvo.cpp:15:10:\
    \ note: \u2018long int r\u2019 previously declared here\n   15 |     long r =\
    \ x;\n      |          ^\n/tmp/tmp7pfn5pvo.cpp:88:10: error: redeclaration of\
    \ \u2018long int s\u2019\n   88 |     long s = 1;\n      |          ^\n/tmp/tmp7pfn5pvo.cpp:16:10:\
    \ note: \u2018long int s\u2019 previously declared here\n   16 |     long s =\
    \ 1;\n      |          ^\n/tmp/tmp7pfn5pvo.cpp:89:10: error: redeclaration of\
    \ \u2018long int t\u2019\n   89 |     long t = 1;\n      |          ^\n/tmp/tmp7pfn5pvo.cpp:17:10:\
    \ note: \u2018long int t\u2019 previously declared here\n   17 |     long t =\
    \ 1;\n      |          ^\n/tmp/tmp7pfn5pvo.cpp:90:10: error: redeclaration of\
    \ \u2018long int u\u2019\n   90 |     long u = 1;\n      |          ^\n/tmp/tmp7pfn5pvo.cpp:18:10:\
    \ note: \u2018long int u\u2019 previously declared here\n   18 |     long u =\
    \ 1;\n      |          ^\n/tmp/tmp7pfn5pvo.cpp:91:10: error: redeclaration of\
    \ \u2018long int v\u2019\n   91 |     long v = 1;\n      |          ^\n/tmp/tmp7pfn5pvo.cpp:19:10:\
    \ note: \u2018long int v\u2019 previously declared here\n   19 |     long v =\
    \ 1;\n      |          ^\n/tmp/tmp7pfn5pvo.cpp:92:10: error: redeclaration of\
    \ \u2018long int w\u2019\n   92 |     long w = 1;\n      |          ^\n/tmp/tmp7pfn5pvo.cpp:20:10:\
    \ note: \u2018long int w\u2019 previously declared here\n   20 |     long w =\
    \ 1;\n      |          ^\n/tmp/tmp7pfn5pvo.cpp:93:10: error: redeclaration of\
    \ \u2018long int x\u2019\n   93 |     long x = x;\n      |          ^\n/tmp/tmp7pfn5pvo.cpp:21:10:\
    \ note: \u2018long int x\u2019 previously declared here\n   21 |     long x =\
    \ x;\n      |          ^\n/tmp/tmp7pfn5pvo.cpp:94:10: error: redeclaration of\
    \ \u2018long int y\u2019\n   94 |     long y = y;\n      |          ^\n/tmp/tmp7pfn5pvo.cpp:22:10:\
    \ note: \u2018long int y\u2019 previously declared here\n   22 |     long y =\
    \ y;\n      |          ^\n/tmp/tmp7pfn5pvo.cpp:95:10: error: redeclaration of\
    \ \u2018long int z\u2019\n   95 |     long z = x;\n      |          ^\n/tmp/tmp7pfn5pvo.cpp:23:10:\
    \ note: \u2018long int z\u2019 previously declared here\n   23 |     long z =\
    \ x;\n      |          ^\n/tmp/tmp7pfn5pvo.cpp:96:10: error: redeclaration of\
    \ \u2018long int a\u2019\n   96 |     long a = x;\n      |          ^\n/tmp/tmp7pfn5pvo.cpp:24:10:\
    \ note: \u2018long int a\u2019 previously declared here\n   24 |     long a =\
    \ x;\n      |          ^\n/tmp/tmp7pfn5pvo.cpp:97:10: error: redeclaration of\
    \ \u2018long int b\u2019\n   97 |     long b = y;\n      |          ^\n/tmp/tmp7pfn5pvo.cpp:25:10:\
    \ note: \u2018long int b\u2019 previously declared here\n   25 |     long b =\
    \ y;\n      |          ^\n/tmp/tmp7pfn5pvo.cpp:98:10: error: redeclaration of\
    \ \u2018long int c\u2019\n   98 |     long c = x;\n      |          ^\n/tmp/tmp7pfn5pvo.cpp:26:10:\
    \ note: \u2018long int c\u2019 previously declared here\n   26 |     long c =\
    \ x;\n      |          ^\n/tmp/tmp7pfn5pvo.cpp:99:10: error: redeclaration of\
    \ \u2018long int d\u2019\n   99 |     long d = y;\n      |          ^\n/tmp/tmp7pfn5pvo.cpp:27:10:\
    \ note: \u2018long int d\u2019 previously declared here\n   27 |     long d =\
    \ y;\n      |          ^\n/tmp/tmp7pfn5pvo.cpp:100:10: error: redeclaration of\
    \ \u2018long int e\u2019\n  100 |     long e = x;\n      |          ^\n/tmp/tmp7pfn5pvo.cpp:28:10:\
    \ note: \u2018long int e\u2019 previously declared here\n   28 |     long e =\
    \ x;\n      |          ^\n/tmp/tmp7pfn5pvo.cpp:101:10: error: redeclaration of\
    \ \u2018long int f\u2019\n  101 |     long f = y;\n      |          ^\n/tmp/tmp7pfn5pvo.cpp:29:10:\
    \ note: \u2018long int f\u2019 previously declared here\n   29 |     long f =\
    \ y;\n      |          ^\n/tmp/tmp7pfn5pvo.cpp:102:10: error: redeclaration of\
    \ \u2018long int g\u2019\n  102 |     long g = x;\n      |          ^\n/tmp/tmp7pfn5pvo.cpp:30:10:\
    \ note: \u2018long int g\u2019 previously declared here\n   30 |     long g =\
    \ x;\n      |          ^\n/tmp/tmp7pfn5pvo.cpp:103:10: error: redeclaration of\
    \ \u2018long int h\u2019\n  103 |     long h = y;\n      |          ^\n/tmp/tmp7pfn5pvo.cpp:31:10:\
    \ note: \u2018long int h\u2019 previously declared here\n   31 |     long h =\
    \ y;\n      |          ^\n/tmp/tmp7pfn5pvo.cpp:104:10: error: redeclaration of\
    \ \u2018long int i\u2019\n  104 |     long i = x;\n      |          ^\n/tmp/tmp7pfn5pvo.cpp:32:10:\
    \ note: \u2018long int i\u2019 previously declared here\n   32 |     long i =\
    \ x;\n      |          ^\n/tmp/tmp7pfn5pvo.cpp:105:10: error: redeclaration of\
    \ \u2018long int j\u2019\n  105 |     long j = y;\n      |          ^\n/tmp/tmp7pfn5pvo.cpp:33:10:\
    \ note: \u2018long int j\u2019 previously declared here\n   33 |     long j =\
    \ y;\n      |          ^\n/tmp/tmp7pfn5pvo.cpp:106:10: error: redeclaration of\
    \ \u2018long int k\u2019\n  106 |     long k = x;\n      |          ^\n/tmp/tmp7pfn5pvo.cpp:34:10:\
    \ note: \u2018long int k\u2019 previously declared here\n   34 |     long k =\
    \ x;\n      |          ^\n/tmp/tmp7pfn5pvo.cpp:107:10: error: redeclaration of\
    \ \u2018long int l\u2019\n  107 |     long l = y;\n      |          ^\n/tmp/tmp7pfn5pvo.cpp:35:10:\
    \ note: \u2018long int l\u2019 previously declared here\n   35 |     long l =\
    \ y;\n      |          ^\n/tmp/tmp7pfn5pvo.cpp:108:10: error: redeclaration of\
    \ \u2018long int m\u2019\n  108 |     long m = 1;\n      |          ^\n/tmp/tmp7pfn5pvo.cpp:12:10:\
    \ note: \u2018long int m\u2019 previously declared here\n   12 |     long m =\
    \ 1;\n      |          ^\n/tmp/tmp7pfn5pvo.cpp:109:10: error: redeclaration of\
    \ \u2018long int n\u2019\n  109 |     long n = y;\n      |          ^\n/tmp/tmp7pfn5pvo.cpp:13:10:\
    \ note: \u2018long int n\u2019 previously declared here\n   13 |     long n =\
    \ y;\n      |          ^\n/tmp/tmp7pfn5pvo.cpp:110:10: error: redeclaration of\
    \ \u2018long int q\u2019\n  110 |     long q = x;\n      |          ^\n/tmp/tmp7pfn5pvo.cpp:14:10:\
    \ note: \u2018long int q\u2019 previously declared here\n   14 |     long q =\
    \ x;\n      |          ^\n/tmp/tmp7pfn5pvo.cpp:111:10: error: redeclaration of\
    \ \u2018long int r\u2019\n  111 |     long r = x;\n      |          ^\n/tmp/tmp7pfn5pvo.cpp:15:10:\
    \ note: \u2018long int r\u2019 previously declared here\n   15 |     long r =\
    \ x;\n      |          ^\n/tmp/tmp7pfn5pvo.cpp:113:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n  113 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ while (x<y) {\n        long mid = (x + y)/2;\n        if (mid % 2 == 0) {\n\
    \            ans = mid;\n            break;\n        }\n        else if (mid <\
    \ y) {\n            y = mid;\n        }\n        else {\n            x = mid;\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp5x28u70b: /tmp/tmp5x28u70b.cpp:33: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long mid = x + (y - x) / 2;\n        ans = choose_num(mid, y);\n\
    \        if (ans == -1) {\n            ans = mid;\n        }\n    } else {\n \
    \       long mid = y + (x - y) / 2;\n        ans = choose_num(x, mid);\n     \
    \   if (ans == -1) {\n            ans = mid;\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // Write your code here\n \
    \   long ans = -1;\n    long m = 1;\n    long n = y;\n    long temp;\n    while(m\
    \ <= n) {\n        temp = m;\n        m = n%m;\n        n = temp;\n    }\n   \
    \ temp = m;\n    m = x;\n    x = temp;\n    while(m <= x) {\n        temp = m;\n\
    \        m = n%m;\n        n = temp;\n    }\n    temp = m;\n    m = y;\n    y\
    \ = temp;\n    while(m <= y) {\n        temp = m;\n        m = n%m;\n        n\
    \ = temp;\n    }\n    ans = n;\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -8
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if (x > y) {\n        long\
    \ temp = x;\n        x = y;\n        y = temp;\n    }\n    long ans = -1;\n  \
    \  while (x != y) {\n        if (x % 2 == 0) {\n            x = x / 2;\n     \
    \   } else {\n            y = y / 2;\n        }\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = choose_num;\n    assert(candidate((12), (15))\
    \ == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp0i764qdp: /tmp/tmp0i764qdp.cpp:27: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ while (x<y) {\n        long mid = (x+y)/2;\n        if (mid%2 == 0) {\n    \
    \        ans = mid;\n            break;\n        }\n        if (mid%2 == 1) {\n\
    \            y = mid;\n        }\n        else {\n            x = mid;\n     \
    \   }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpxr1oet9r: /tmp/tmpxr1oet9r.cpp:33: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if (x >= y) {\n        return\
    \ -1;\n    }\n    long mid = (x + y) / 2;\n    if (mid % 2 == 0) {\n        return\
    \ mid;\n    }\n    return choose_num(mid, y);\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpdvnifogl: /tmp/tmpdvnifogl.cpp:23: int main(): Assertion `candidate((33),\
    \ (12354)) == (12354)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    long m\
    \ = 1;\n    long n = y;\n    long k = 0;\n    long i = 0;\n    long j = 0;\n \
    \   long temp = 0;\n    while (i < n) {\n        j = i;\n        while (j < n\
    \ && m % 2 == 0) {\n            j = j + 1;\n            m = m / 2;\n        }\n\
    \        if (m == 0) {\n            ans = i;\n            break;\n        }\n\
    \        temp = m;\n        m = n;\n        n = j;\n        k = i;\n        while\
    \ (k != k + 1) {\n            i = i + 1;\n            k = k + 1;\n        }\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n \
    \   assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12)) ==\
    \ (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ while (x<y) {\n        if (x%2 == 0) {\n            ans = x;\n            break;\n\
    \        }\n        x++;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpsc0bzkr1: /tmp/tmpsc0bzkr1.cpp:27: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if (x >= y) {\n        return\
    \ -1;\n    }\n    long mid = (x + y) / 2;\n    if (mid % 2 == 0) {\n        return\
    \ mid;\n    }\n    return choose_num(mid, y);\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpdf79gupc: /tmp/tmpdf79gupc.cpp:23: int main(): Assertion `candidate((33),\
    \ (12354)) == (12354)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ long mid = (x + y) / 2;\n    if (mid % 2 == 0) {\n        ans = mid;\n    }\
    \ else {\n        if (mid > x) {\n            ans = mid;\n        } else {\n \
    \           ans = x;\n        }\n    }\n    return ans;\n}\nint main() {\n   \
    \ auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n \
    \   assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpmju6ul21: /tmp/tmpmju6ul21.cpp:30: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // Write your code here\n \
    \   long ans = -1;\n    if (x >= y) {\n        long temp = x;\n        x = y;\n\
    \        y = temp;\n    }\n    while (x<y) {\n        if (x%2 == 0) {\n      \
    \      ans = x;\n            break;\n        }\n        x++;\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpdz0l8l45: /tmp/tmpdz0l8l45.cpp:28: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ while (x<y) {\n        long mid = (x+y)/2;\n        if (mid % 2 == 0) {\n  \
    \          ans = mid;\n            break;\n        }\n        if (mid > y) {\n\
    \            y = mid;\n        } else {\n            x = mid;\n        }\n   \
    \ }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp0rmdvt_d: /tmp/tmp0rmdvt_d.cpp:33: int main(): Assertion `candidate((13),\
    \ (12)) == (-1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ long mid = (x + y) / 2;\n    while (x <= y) {\n        if ((x % 2) == 0) {\n\
    \            ans = mid;\n            break;\n        }\n        mid = (mid + y)\
    \ / 2;\n        x++;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpq9sutw8m: /tmp/tmpq9sutw8m.cpp:29: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long mid = (x + y) / 2;\n        ans = choose_num(x, mid);\n \
    \       if (ans == -1) {\n            ans = choose_num(mid + 1, y);\n        }\n\
    \    } else {\n        long mid = (x + y) / 2;\n        ans = choose_num(mid,\
    \ y);\n        if (ans == -1) {\n            ans = choose_num(x, mid - 1);\n \
    \       }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ while (x < y) {\n        long mid = (x + y) / 2;\n        if (mid % 2 == 0)\
    \ {\n            ans = mid;\n            break;\n        }\n        if (mid >\
    \ y) {\n            y = mid;\n        } else {\n            x = mid;\n       \
    \ }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpn4vbuuy_: /tmp/tmpn4vbuuy_.cpp:33: int main(): Assertion `candidate((13),\
    \ (12)) == (-1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long mid = x + (y - x) / 2;\n        ans = choose_num(mid, y);\n\
    \        if (ans == -1) {\n            ans = mid;\n        }\n    } else {\n \
    \       long mid = y + (x - y) / 2;\n        ans = choose_num(x, mid);\n     \
    \   if (ans == -1) {\n            ans = mid;\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ while (x++ < y) {\n        if (x%2 == 0) {\n            ans = x;\n         \
    \   break;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpl88wga18: /tmp/tmpl88wga18.cpp:28: int main(): Assertion `candidate((33),\
    \ (12354)) == (12354)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >\
    \ y) {\n        swap(x, y);\n    }\n    long mid = (x + y) / 2;\n    if (mid %\
    \ 2 == 0) {\n        ans = mid;\n    } else {\n        if (mid < x || mid > y)\
    \ {\n            ans = -1;\n        } else {\n            ans = mid;\n       \
    \ }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp9uxkk305.cpp: In function \u2018long int choose_num(long int, long\
    \ int)\u2019:\n/tmp/tmp9uxkk305.cpp:12:9: error: \u2018swap\u2019 was not declared\
    \ in this scope\n   12 |         swap(x, y);\n      |         ^~~~\n/tmp/tmp9uxkk305.cpp:12:9:\
    \ note: suggested alternatives:\nIn file included from /usr/include/c++/9/regex:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmp9uxkk305.cpp:2:\n/usr/include/c++/9/bits/regex.h:2029:5:\
    \ note:   \u2018std::__cxx11::swap\u2019\n 2029 |     swap(match_results<_Bi_iter,\
    \ _Alloc>& __lhs,\n      |     ^~~~\nIn file included from /usr/include/c++/9/exception:143,\n\
    \                 from /usr/include/c++/9/ios:39,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp9uxkk305.cpp:2:\n/usr/include/c++/9/bits/exception_ptr.h:166:5: note:\
    \   \u2018std::__exception_ptr::swap\u2019\n  166 |     swap(exception_ptr& __lhs,\
    \ exception_ptr& __rhs)\n      |     ^~~~\nIn file included from /usr/include/c++/9/bits/nested_exception.h:40,\n\
    \                 from /usr/include/c++/9/exception:144,\n                 from\
    \ /usr/include/c++/9/ios:39,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp9uxkk305.cpp:2:\n/usr/include/c++/9/bits/move.h:182:5: note:   \u2018\
    std::swap\u2019\n  182 |     swap(_Tp& __a, _Tp& __b)\n      |     ^~~~\n/usr/include/c++/9/bits/move.h:182:5:\
    \ note:   \u2018std::swap\u2019\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // Write your code here\n \
    \   long ans = -1;\n    long mid = (x + y) / 2;\n    if (x >= y) {\n        while\
    \ (x < y) {\n            if (mid % 2 == 0) {\n                ans = mid;\n   \
    \             break;\n            }\n            mid = (mid + y) / 2;\n      \
    \  }\n    } else {\n        while (y < x) {\n            if (mid % 2 == 0) {\n\
    \                ans = mid;\n                break;\n            }\n         \
    \   mid = (mid + x) / 2;\n        }\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpnmyfuoai: /tmp/tmpnmyfuoai.cpp:34: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ while (x<y) {\n        long mid = (x+y)/2;\n        if (mid%2 == 0) {\n    \
    \        ans = mid;\n            break;\n        }\n        if (mid%2 == 1) {\n\
    \            y = mid;\n        } else {\n            x = mid;\n        }\n   \
    \ }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmps56znn5x: /tmp/tmps56znn5x.cpp:32: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // Write your code here\n \
    \   long ans = -1;\n    long mid = (x + y) / 2;\n    if (mid % 2 == 0) {\n   \
    \     ans = mid;\n    } else {\n        if (x > mid) {\n            ans = choose_num(mid,\
    \ y);\n        } else {\n            ans = choose_num(x, mid);\n        }\n  \
    \  }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n   \
    \ assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12)) ==\
    \ (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp336aqr4v: /tmp/tmp336aqr4v.cpp:26: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long mid = (x + y) / 2;\n        if (mid % 2 == 0) {\n       \
    \     ans = mid;\n        } else {\n            ans = choose_num(mid, y);\n  \
    \      }\n    } else {\n        long mid = (x + y) / 2;\n        if (mid % 2 ==\
    \ 0) {\n            ans = mid;\n        } else {\n            ans = choose_num(x,\
    \ mid);\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpasg2smqc: /tmp/tmpasg2smqc.cpp:30: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ while (x <= y) {\n        if (x % 2 == 0) {\n            ans = x;\n        \
    \    break;\n        }\n        x += 2;\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp07hq9ay3: /tmp/tmp07hq9ay3.cpp:27: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if (x >= y) {\n        return\
    \ -1;\n    }\n    long mid = (x + y) / 2;\n    if (mid % 2 == 0) {\n        return\
    \ mid;\n    }\n    return choose_num(mid, y);\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpfxe16w81: /tmp/tmpfxe16w81.cpp:23: int main(): Assertion `candidate((33),\
    \ (12354)) == (12354)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ long mid = (x + y) / 2;\n    while (x <= y) {\n        if (mid % 2 == 0) {\n\
    \            ans = mid;\n            break;\n        }\n        mid = (x + y)\
    \ / 2;\n        x++;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmppt1yli6f: /tmp/tmppt1yli6f.cpp:30: int main(): Assertion `candidate((13),\
    \ (12)) == (-1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long mid = (x + y) / 2;\n        long a = choose_num(x, mid);\n\
    \        long b = choose_num(mid, y);\n        if ((a >= 0) && (b >= 0)) {\n \
    \           ans = a > b ? a : b;\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp6visvqxa: /tmp/tmp6visvqxa.cpp:23: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    long mid\
    \ = (x + y) / 2;\n    if (x <= mid) {\n        ans = x;\n    } else if (y <= mid)\
    \ {\n        ans = y;\n    } else {\n        ans = mid;\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmphp6rerlr: /tmp/tmphp6rerlr.cpp:23: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long mid = x + (y - x) / 2;\n        if (mid > 0 && mid < y) {\n\
    \            ans = mid;\n        }\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpbioeo691: /tmp/tmpbioeo691.cpp:21: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long mid = x + (y - x) / 2;\n        ans = choose_num(mid, y);\n\
    \        if (ans == -1) {\n            ans = mid;\n        }\n    } else {\n \
    \       long mid = y + (x - y) / 2;\n        ans = choose_num(x, mid);\n     \
    \   if (ans == -1) {\n            ans = mid;\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // Write your code here\n \
    \   long ans = -1;\n    long m = 1;\n    long n = y;\n    long d = 1;\n    while\
    \ (m <= n) {\n        if (m % 2 == 0) {\n            ans = m;\n            break;\n\
    \        }\n        m += d;\n        d *= 2;\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpj2gfs7uz: /tmp/tmpj2gfs7uz.cpp:27: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // Write your code here\n \
    \   long ans = -1;\n    long mid = (x + y) / 2;\n    long sum = 0;\n    long even\
    \ = 1;\n    long odd = 0;\n    while (x <= y) {\n        if (mid % 2 == 0) {\n\
    \            sum += mid;\n            even++;\n        } else {\n            sum\
    \ += mid * 2;\n            odd++;\n        }\n        mid = (x + y) / 2;\n   \
    \ }\n    if (sum % 2 == 0) {\n        ans = sum / 2;\n    } else {\n        ans\
    \ = sum / 2;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ if (x == 0 || y == 0) {\n        return -1;\n    }\n    long mid = (x + y) /\
    \ 2;\n    if (mid % 2 == 0) {\n        ans = mid;\n    } else {\n        ans =\
    \ choose_num(mid, y);\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpdnfw7zr8: /tmp/tmpdnfw7zr8.cpp:30: int main(): Assertion `candidate((13),\
    \ (12)) == (-1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ while (x+1 < y) {\n        long mid = (x+y)/2;\n        if (mid%2 == 0) {\n\
    \            ans = mid;\n            x = mid+1;\n        } else {\n          \
    \  y = mid;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp82aqjvih: /tmp/tmp82aqjvih.cpp:29: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ long mid = (x + y) / 2;\n    while (x <= y) {\n        if (mid % 2 == 0) {\n\
    \            ans = mid;\n            break;\n        }\n        mid = (mid + y)\
    \ / 2;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpefb_hjde: /tmp/tmpefb_hjde.cpp:29: int main(): Assertion `candidate((13),\
    \ (12)) == (-1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    long m\
    \ = 1;\n    long n = y;\n    while (m <= n) {\n        if (x % m == 0 && y % n\
    \ == 0) {\n            ans = m;\n            break;\n        }\n        m += 2;\n\
    \        n -= 2;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpiq76hucr: /tmp/tmpiq76hucr.cpp:25: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // Write your code here\n \
    \   long ans = -1;\n    if (x >= y) {\n        long temp = x;\n        x = y;\n\
    \        y = temp;\n    }\n    while (x <= y) {\n        if (x % 2 == 0) {\n \
    \           ans = x;\n            break;\n        }\n        x++;\n    }\n   \
    \ return ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp_2e3tedp: /tmp/tmp_2e3tedp.cpp:28: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    long mid\
    \ = (x + y) / 2;\n    if (x <= mid) {\n        ans = x;\n    } else if (mid <=\
    \ y) {\n        ans = mid;\n    } else {\n        ans = y;\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp9cao1dl9: /tmp/tmp9cao1dl9.cpp:23: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long mid = x + (y - x) / 2;\n        long lcm = x * y;\n     \
    \   while (true) {\n            long temp = mid;\n            mid = lcm / temp;\n\
    \            lcm = temp;\n            if (mid > ans) {\n                ans =\
    \ mid;\n            }\n            if (mid == x || mid == y) {\n             \
    \   break;\n            }\n        }\n    } else {\n        long mid = y + (x\
    \ - y) / 2;\n        long lcm = y * x;\n        while (true) {\n            long\
    \ temp = mid;\n            mid = lcm / temp;\n            lcm = temp;\n      \
    \      if (mid > ans) {\n                ans = mid;\n            }\n         \
    \   if (mid == x || mid == y) {\n                break;\n            }\n     \
    \   }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp_zz0gdhg: /tmp/tmp_zz0gdhg.cpp:44: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ while (x+1 < y) {\n        if ((x % 2) == 0) {\n            ans = x;\n     \
    \       break;\n        }\n        ans = x+1;\n        x++;\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpuyonavaq: /tmp/tmpuyonavaq.cpp:28: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ while (x<y) {\n        long mid = (x + y)/2;\n        if (mid % 2 == 0) {\n\
    \            ans = mid;\n            x = mid + 1;\n        } else {\n        \
    \    y = mid;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpkfiyrv6f: /tmp/tmpkfiyrv6f.cpp:29: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if (x > y) {\n        long\
    \ temp = x;\n        x = y;\n        y = temp;\n    }\n    long ans = -1;\n  \
    \  long limit = y;\n    while (x <= limit) {\n        if ((x % 2) == 0) {\n  \
    \          ans = x;\n            break;\n        }\n        ++x;\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpdj3lwac9: /tmp/tmpdj3lwac9.cpp:28: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ while (x+1 < y) {\n        if (x%2 == 0) {\n            ans = x;\n         \
    \   break;\n        }\n        x++;\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpblo8y145: /tmp/tmpblo8y145.cpp:27: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ while (x+1 < y) {\n        if (x%2 == 0) {\n            ans = x;\n         \
    \   break;\n        }\n        x++;\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp4mi6qhev: /tmp/tmp4mi6qhev.cpp:27: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ while (x % 2 == 0 && y % 2 == 0) {\n        long temp = x;\n        x = y;\n\
    \        y = temp;\n    }\n    if (x % 2 == 0 && y % 2 == 0) {\n        ans =\
    \ x;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp9fp8hew4: /tmp/tmp9fp8hew4.cpp:28: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ while (y) {\n        if (y & 1) {\n            ans = y;\n            break;\n\
    \        }\n        y >>= 1;\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpc75pi2fo: /tmp/tmpc75pi2fo.cpp:27: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long mid = x + (y - x) / 2;\n        if (mid % 2 == 0) {\n   \
    \         ans = mid;\n        }\n        else {\n            ans = choose_num(mid,\
    \ y);\n        }\n    }\n    else {\n        long mid = y + (x - y) / 2;\n   \
    \     if (mid % 2 == 0) {\n            ans = mid;\n        }\n        else {\n\
    \            ans = choose_num(x, mid);\n        }\n    }\n    return ans;\n}\n\
    int main() {\n    auto candidate = choose_num;\n    assert(candidate((12), (15))\
    \ == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // Write your code here\n \
    \   long ans = -1;\n    long mid = (x + y) / 2;\n    if (mid % 2 == 0) {\n   \
    \     ans = mid;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp7wfrz62d: /tmp/tmp7wfrz62d.cpp:20: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ while (x+1 < y) {\n        long mid = (x+y)/2;\n        if (mid%2 == 0) {\n\
    \            ans = mid;\n            x = mid+1;\n        } else {\n          \
    \  y = mid;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpogye726w: /tmp/tmpogye726w.cpp:29: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // Write your code here\n \
    \   long ans = -1;\n    long mid = (x + y) / 2;\n    if (x <= mid) {\n       \
    \ ans = x;\n    } else if (mid <= y) {\n        ans = mid;\n    } else {\n   \
    \     ans = y;\n    }\n    return ans;\n}\nint main() {\n    auto candidate =\
    \ choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpz2j2a383: /tmp/tmpz2j2a383.cpp:24: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ long mid = (x + y) / 2;\n    if (mid % 2 == 0) {\n        ans = mid;\n    }\
    \ else {\n        ans = choose_num(mid, y);\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp5tzt3h67: /tmp/tmp5tzt3h67.cpp:27: int main(): Assertion `candidate((13),\
    \ (12)) == (-1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ long mid = (x + y) / 2;\n    while (x != mid && y != mid && mid % 2 == 0) {\n\
    \        if (x <= mid) {\n            x = mid + 1;\n        } else {\n       \
    \     y = mid - 1;\n        }\n        mid = (x + y) / 2;\n    }\n    if (x ==\
    \ mid) {\n        ans = mid;\n    } else if (y == mid) {\n        ans = mid;\n\
    \    } else {\n        ans = -1;\n    }\n    return ans;\n}\nint main() {\n  \
    \  auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp0gd8shl4: /tmp/tmp0gd8shl4.cpp:36: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ while (x<y) {\n        long mid = (x + y) / 2;\n        if (mid % 2 == 0) {\n\
    \            ans = mid;\n            x = mid + 1;\n        } else {\n        \
    \    y = mid;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpnpnpur3w: /tmp/tmpnpnpur3w.cpp:29: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // Write your code here\n \
    \   long ans = -1;\n    long mid = (x + y) / 2;\n    if (mid % 2 == 0) {\n   \
    \     ans = mid;\n    } else {\n        if (x <= mid) {\n            ans = mid;\n\
    \        } else {\n            ans = mid;\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpptvaw06h: /tmp/tmpptvaw06h.cpp:26: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    long mid\
    \ = (x + y) / 2;\n    if (x <= mid) {\n        ans = x;\n    } else if (y <= mid)\
    \ {\n        ans = y;\n    } else {\n        ans = mid;\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpho6uxvrq: /tmp/tmpho6uxvrq.cpp:23: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long mid = x + (y - x) / 2;\n        ans = choose_num(mid, y);\n\
    \        if (ans == -1) {\n            ans = mid;\n        }\n    } else {\n \
    \       long mid = y + (x - y) / 2;\n        ans = choose_num(x, mid);\n     \
    \   if (ans == -1) {\n            ans = mid;\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ long mid = (x + y) / 2;\n    while (x != mid && y != mid) {\n        if (x %\
    \ 2 == 0 && y % 2 == 0) {\n            ans = mid;\n            break;\n      \
    \  }\n        if (x % 2 == 0) {\n            y = mid - 1;\n        } else {\n\
    \            x = mid + 1;\n        }\n        mid = (x + y) / 2;\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpnf0qj1i5: /tmp/tmpnf0qj1i5.cpp:33: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ long mid = (x + y) / 2;\n    while (x <= y) {\n        if (mid % 2 == 0) {\n\
    \            ans = mid;\n            break;\n        }\n        mid = (mid + y)\
    \ / 2;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp__ats97t: /tmp/tmp__ats97t.cpp:29: int main(): Assertion `candidate((13),\
    \ (12)) == (-1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long mid = x + (y - x) / 2;\n        ans = choose_num(mid, y);\n\
    \        if (ans == -1) {\n            ans = mid;\n        }\n    } else {\n \
    \       long mid = y + (x - y) / 2;\n        ans = choose_num(x, mid);\n     \
    \   if (ans == -1) {\n            ans = mid;\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    assert(x >= 0 && y >= 0);\n\
    \    long ans = -1;\n    long mid = (x + y) / 2;\n    if (mid % 2 == 0) {\n  \
    \      ans = mid;\n    } else {\n        if (x <= mid) {\n            ans = mid;\n\
    \        } else {\n            ans = mid;\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp4j0od5f_: /tmp/tmp4j0od5f_.cpp:26: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    assert(x >= 0 && y >= 0);\n\
    \    long ans = -1;\n    if (x > y) {\n        long temp = x;\n        x = y;\n\
    \        y = temp;\n    }\n    long mid = x + (y - x) / 2;\n    while (x <= y)\
    \ {\n        if (mid % 2 == 0) {\n            ans = mid;\n            break;\n\
    \        }\n        mid++;\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpvvicl7_h: /tmp/tmpvvicl7_h.cpp:30: int main(): Assertion `candidate((13),\
    \ (12)) == (-1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ while (x+1 < y) {\n        long mid = (x+y)/2;\n        if (mid % 2 == 0) {\n\
    \            ans = mid;\n            x = mid;\n        } else {\n            y\
    \ = mid;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmptqz2s5eg: /tmp/tmptqz2s5eg.cpp:29: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ while (x<y) {\n        long mid = (x+y)/2;\n        if (mid%2 == 0) {\n    \
    \        ans = mid;\n            x = mid+1;\n        }\n        else {\n     \
    \       y = mid;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp8t7xn0ln: /tmp/tmp8t7xn0ln.cpp:30: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if (x >= y) {\n        return\
    \ -1;\n    }\n    long mid = (x + y) / 2;\n    if (mid % 2 == 0) {\n        return\
    \ mid;\n    }\n    return choose_num(mid, y);\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp9q4fu_cc: /tmp/tmp9q4fu_cc.cpp:23: int main(): Assertion `candidate((33),\
    \ (12354)) == (12354)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ while (x+1 < y) {\n        if ((x % 2) == 0) {\n            ans = x;\n     \
    \       break;\n        }\n        ans = x + 1;\n        x++;\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp4pit49zz: /tmp/tmp4pit49zz.cpp:28: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ long mid = (x + y) / 2;\n    while (x <= y) {\n        if (mid % 2 == 0) {\n\
    \            ans = mid;\n            break;\n        }\n        mid = (mid + y)\
    \ / 2;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpej0huqvp: /tmp/tmpej0huqvp.cpp:29: int main(): Assertion `candidate((13),\
    \ (12)) == (-1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ while (y) {\n        if (x % 2 == 0) {\n            ans = y;\n            break;\n\
    \        }\n        y /= 2;\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmphmlclzpk: /tmp/tmphmlclzpk.cpp:27: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ long mid = (x + y) / 2;\n    while (x <= y) {\n        if (mid % 2 == 0) {\n\
    \            ans = mid;\n            break;\n        }\n        mid = (mid + y)\
    \ / 2;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpldukgffq: /tmp/tmpldukgffq.cpp:29: int main(): Assertion `candidate((13),\
    \ (12)) == (-1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ while (x+1 < y) {\n        long mid = (x+y)/2;\n        if (mid % 2 == 0) {\n\
    \            ans = mid;\n            x = mid+1;\n        } else {\n          \
    \  y = mid;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpgt98i2dy: /tmp/tmpgt98i2dy.cpp:29: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if (x >= y) {\n        return\
    \ -1;\n    }\n    long mid = (x + y) / 2;\n    if (mid % 2 == 0) {\n        return\
    \ mid;\n    }\n    return choose_num(mid, y);\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpmpvao321: /tmp/tmpmpvao321.cpp:23: int main(): Assertion `candidate((33),\
    \ (12354)) == (12354)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // Write your code here\n \
    \   long ans = -1;\n    long mid = (x + y) / 2;\n    long left_num = x;\n    long\
    \ right_num = y;\n    while (left_num < mid) {\n        left_num += y;\n    }\n\
    \    while (right_num > mid) {\n        right_num -= y;\n    }\n    if (left_num\
    \ == mid) {\n        ans = mid;\n    } else if (right_num == mid) {\n        ans\
    \ = mid;\n    } else {\n        ans = left_num;\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = choose_num;\n    assert(candidate((12), (15))\
    \ == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp017aizpz: /tmp/tmp017aizpz.cpp:32: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if (x > y) {\n        long\
    \ temp = x;\n        x = y;\n        y = temp;\n    }\n    long mid = (x + y)\
    \ / 2;\n    long ans = mid;\n    while (ans % 2 == 0) {\n        mid = (x + y)\
    \ / 2;\n        ans = mid;\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpcj_jav_8: /tmp/tmpcj_jav_8.cpp:25: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    long mid\
    \ = (x + y) / 2;\n    if (x <= y) {\n        if (mid % 2 == 0) {\n           \
    \ ans = mid;\n        } else {\n            ans = choose_num(x, mid);\n      \
    \  }\n    } else {\n        if (mid % 2 == 0) {\n            ans = mid;\n    \
    \    } else {\n            ans = choose_num(mid, y);\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpdhs7txt5: /tmp/tmpdhs7txt5.cpp:29: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ while (x<y) {\n        if (x%2 == 0) {\n            ans = x;\n            break;\n\
    \        }\n        x++;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmplils225g: /tmp/tmplils225g.cpp:27: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >\
    \ y) {\n        swap(x, y);\n    }\n    while (x != y) {\n        long mid = (x\
    \ + y) / 2;\n        if (mid % 2 == 0) {\n            ans = mid;\n           \
    \ break;\n        }\n        if (mid > y) {\n            y = mid;\n        } else\
    \ {\n            x = mid;\n        }\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5p9nu8tf.cpp: In function \u2018long int choose_num(long int, long\
    \ int)\u2019:\n/tmp/tmp5p9nu8tf.cpp:12:9: error: \u2018swap\u2019 was not declared\
    \ in this scope\n   12 |         swap(x, y);\n      |         ^~~~\n/tmp/tmp5p9nu8tf.cpp:12:9:\
    \ note: suggested alternatives:\nIn file included from /usr/include/c++/9/regex:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmp5p9nu8tf.cpp:2:\n/usr/include/c++/9/bits/regex.h:2029:5:\
    \ note:   \u2018std::__cxx11::swap\u2019\n 2029 |     swap(match_results<_Bi_iter,\
    \ _Alloc>& __lhs,\n      |     ^~~~\nIn file included from /usr/include/c++/9/exception:143,\n\
    \                 from /usr/include/c++/9/ios:39,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp5p9nu8tf.cpp:2:\n/usr/include/c++/9/bits/exception_ptr.h:166:5: note:\
    \   \u2018std::__exception_ptr::swap\u2019\n  166 |     swap(exception_ptr& __lhs,\
    \ exception_ptr& __rhs)\n      |     ^~~~\nIn file included from /usr/include/c++/9/bits/nested_exception.h:40,\n\
    \                 from /usr/include/c++/9/exception:144,\n                 from\
    \ /usr/include/c++/9/ios:39,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp5p9nu8tf.cpp:2:\n/usr/include/c++/9/bits/move.h:182:5: note:   \u2018\
    std::swap\u2019\n  182 |     swap(_Tp& __a, _Tp& __b)\n      |     ^~~~\n/usr/include/c++/9/bits/move.h:182:5:\
    \ note:   \u2018std::swap\u2019\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // Write your code here\n \
    \   long ans = -1;\n    if (x >= y) {\n        long mid = x + (y - x) / 2;\n \
    \       long mid2 = mid + (mid - x) / 2;\n        if (mid2 % 2 == 0) {\n     \
    \       ans = mid;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpk0pp7vch: /tmp/tmpk0pp7vch.cpp:23: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ while (x<y) {\n        long mid = (x+y)/2;\n        if (mid%2 == 0) {\n    \
    \        ans = mid;\n            break;\n        }\n        if (mid%2 == 1) {\n\
    \            y = mid;\n        }\n        else {\n            x = mid;\n     \
    \   }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp_9t4juk5: /tmp/tmp_9t4juk5.cpp:33: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ long mid = (x + y) / 2;\n    if (mid % 2 == 0) {\n        ans = mid;\n    }\
    \ else {\n        if (mid < x || mid > y) {\n            ans = mid;\n        }\
    \ else {\n            ans = choose_num(x, mid);\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpbqxklhvg: /tmp/tmpbqxklhvg.cpp:30: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // Write your code here\n \
    \   long ans = -1;\n    long mid = (x + y) / 2;\n    if (mid % 2 == 0) {\n   \
    \     ans = mid;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpaw9fpfag: /tmp/tmpaw9fpfag.cpp:20: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ while (x < y) {\n        long mid = (x + y) / 2;\n        if (mid % 2 == 0)\
    \ {\n            ans = mid;\n            x = mid + 1;\n        } else {\n    \
    \        y = mid;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpw2sgev04: /tmp/tmpw2sgev04.cpp:29: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ while (y) {\n        long mid = (x + y) / 2;\n        if (mid * mid <= y) {\n\
    \            x = mid;\n        } else {\n            y = mid;\n        }\n   \
    \ }\n    if (x == y) {\n        ans = x;\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ long mid = (x + y) / 2;\n    while (x != mid && y != mid) {\n        if (x %\
    \ 2 == 0 && y % 2 == 0) {\n            ans = mid;\n            break;\n      \
    \  } else if (x % 2 == 0 && y % 2 != 0) {\n            y = mid - 1;\n        }\
    \ else if (x % 2 != 0 && y % 2 == 0) {\n            x = mid + 1;\n        } else\
    \ {\n            x = mid + 1;\n            y = mid - 1;\n        }\n        mid\
    \ = (x + y) / 2;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpou7o0t2y: /tmp/tmpou7o0t2y.cpp:35: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    long mid\
    \ = (x + y) / 2;\n    if (x <= y) {\n        while (x <= y) {\n            if\
    \ (x % 2 == 0) {\n                ans = x;\n                break;\n         \
    \   }\n            x = x + 1;\n        }\n    } else {\n        while (y <= x)\
    \ {\n            if (y % 2 == 0) {\n                ans = y;\n               \
    \ break;\n            }\n            y = y + 1;\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmphr058bl_: /tmp/tmphr058bl_.cpp:33: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // Write your code here\n \
    \   long ans = -1;\n    long m = 1;\n    long n = y;\n    long k = 0;\n    long\
    \ temp;\n    while(m <= n) {\n        temp = m;\n        m = n + k;\n        n\
    \ = temp;\n        k++;\n    }\n    while(m > n) {\n        temp = m;\n      \
    \  m = n - k;\n        n = temp;\n        k--;\n    }\n    while(m % 2 == 0) {\n\
    \        temp = m;\n        m = m + k;\n        n = temp;\n        k++;\n    }\n\
    \    while(n % 2 == 0) {\n        temp = n;\n        n = n - k;\n        m = temp;\n\
    \        k--;\n    }\n    if(m > n) {\n        ans = m;\n    }\n    else {\n \
    \       ans = n;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmplhc9b0tr: /tmp/tmplhc9b0tr.cpp:50: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ while (x+1 < y) {\n        long mid = x + (y - x) / 2;\n        if (mid % 2\
    \ == 0) {\n            ans = mid;\n            x = mid;\n        } else {\n  \
    \          y = mid;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpoz7v0x__: /tmp/tmpoz7v0x__.cpp:29: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ while (x+1 < y) {\n        long mid = (x+y)/2;\n        if (mid%2 == 0) {\n\
    \            ans = mid;\n            x = mid+1;\n        } else {\n          \
    \  y = mid;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpnxpb3k33: /tmp/tmpnxpb3k33.cpp:29: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    assert(x >= 0 && y >= 0);\n\
    \    if (x < y) {\n        long temp = x;\n        x = y;\n        y = temp;\n\
    \    }\n    long ans = -1;\n    long max_num = x;\n    long min_num = y;\n   \
    \ while (max_num < y) {\n        max_num += max_num;\n        min_num += min_num;\n\
    \    }\n    while (max_num >= y) {\n        ans = max_num;\n        max_num -=\
    \ max_num;\n        min_num -= min_num;\n    }\n    while (min_num >= x) {\n \
    \       ans = min_num;\n        min_num -= min_num;\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp5_cb9fhs: /tmp/tmp5_cb9fhs.cpp:36: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long mid = x + (y - x) / 2;\n        ans = choose_num(mid, y);\n\
    \        if (ans == -1) {\n            ans = mid;\n        }\n    } else {\n \
    \       long mid = y + (x - y) / 2;\n        ans = choose_num(x, mid);\n     \
    \   if (ans == -1) {\n            ans = mid;\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long mid = (x + y) / 2;\n        if (mid % 2 == 0) {\n       \
    \     ans = mid;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpiq4yce8v: /tmp/tmpiq4yce8v.cpp:21: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long mid = x + (y - x) / 2;\n        ans = choose_num(mid, y);\n\
    \        if (ans == -1) {\n            ans = mid;\n        }\n    } else {\n \
    \       long mid = y + (x - y) / 2;\n        ans = choose_num(x, mid);\n     \
    \   if (ans == -1) {\n            ans = mid;\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // Write your code here\n \
    \   long ans = -1;\n    if (x >= y) {\n        long temp = x;\n        x = y;\n\
    \        y = temp;\n    }\n    while (x<y) {\n        long mid = (x+y)/2;\n  \
    \      if (mid%2 == 0) {\n            ans = mid;\n            break;\n       \
    \ }\n        if (mid%2 != 0) {\n            x = mid;\n        } else {\n     \
    \       y = mid;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp4wr7skjv: /tmp/tmp4wr7skjv.cpp:34: int main(): Assertion `candidate((13),\
    \ (12)) == (-1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    long mid\
    \ = (x + y) / 2;\n    if (x <= mid) {\n        ans = x;\n    } else if (mid <=\
    \ y) {\n        ans = mid;\n    } else {\n        ans = y;\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpk78qzjgc: /tmp/tmpk78qzjgc.cpp:23: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ if (x % 2 == 0) {\n        long temp1 = x;\n        x = y;\n        y = temp1;\n\
    \    }\n    while (x != 0) {\n        long temp2 = x;\n        x = y % x;\n  \
    \      y = temp2;\n    }\n    if (y % 2 == 0) {\n        ans = y;\n    }\n   \
    \ return ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmps_vka1k9: /tmp/tmps_vka1k9.cpp:33: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    assert(x >= 0 && y >= 0);\n\
    \    long ans = -1;\n    long mid = (x + y) / 2;\n    long left = mid - 1;\n \
    \   long right = mid;\n    while (left >= 0 && right < y) {\n        if (left\
    \ % 2 == 0 && right % 2 == 0) {\n            ans = mid;\n            break;\n\
    \        }\n        if (left % 2 == 0) {\n            ans = left;\n          \
    \  break;\n        }\n        if (right % 2 == 0) {\n            ans = right;\n\
    \            break;\n        }\n        left--;\n        right++;\n    }\n   \
    \ return ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpic5_5y6q: /tmp/tmpic5_5y6q.cpp:35: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // Write your code here\n \
    \   long ans = -1;\n    long mid = (x + y) / 2;\n    if (x <= mid) {\n       \
    \ ans = x;\n    } else if (y <= mid) {\n        ans = y;\n    } else {\n     \
    \   ans = mid;\n    }\n    return ans;\n}\nint main() {\n    auto candidate =\
    \ choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpz9bjg3hx: /tmp/tmpz9bjg3hx.cpp:24: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ while (x <= y) {\n        if (x % 2 == 0) {\n            ans = x;\n        \
    \    break;\n        }\n        x += 2;\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpvqhsx0my: /tmp/tmpvqhsx0my.cpp:27: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // Write your code here\n \
    \   long ans = -1;\n    long mid = (x + y) / 2;\n    if (mid % 2 == 0) {\n   \
    \     ans = mid;\n    } else {\n        if (mid < x && mid > y) {\n          \
    \  ans = mid;\n        } else if (mid > x && mid < y) {\n            ans = mid;\n\
    \        } else {\n            ans = -1;\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp8la1ct2s: /tmp/tmp8la1ct2s.cpp:28: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if (x >= y) {\n        return\
    \ -1;\n    }\n    long mid = (x + y) / 2;\n    if (mid % 2 == 0) {\n        return\
    \ mid;\n    }\n    return choose_num(mid, y);\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpoieh9ez7: /tmp/tmpoieh9ez7.cpp:23: int main(): Assertion `candidate((33),\
    \ (12354)) == (12354)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ long mid = (x + y) / 2;\n    while (x <= y) {\n        if (mid % 2 == 0) {\n\
    \            ans = mid;\n            break;\n        }\n        mid = (mid + y)\
    \ / 2;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp3cb3xiw6: /tmp/tmp3cb3xiw6.cpp:29: int main(): Assertion `candidate((13),\
    \ (12)) == (-1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ while (x<y) {\n        long mid = (x+y)/2;\n        if (mid%2 == 0) {\n    \
    \        ans = mid;\n            x = mid+1;\n        } else {\n            y =\
    \ mid;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmp4bjig3jo: /tmp/tmp4bjig3jo.cpp:29: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ long mid = x + (y - x) / 2;\n    while (x <= y) {\n        if (mid % 2 == 0)\
    \ {\n            ans = mid;\n            break;\n        }\n        mid++;\n \
    \   }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n  \
    \  assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12)) ==\
    \ (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpcutsmze_: /tmp/tmpcutsmze_.cpp:29: int main(): Assertion `candidate((13),\
    \ (12)) == (-1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ long mid = (x + y) / 2;\n    while (x != mid) {\n        if (x % 2 == 0 && y\
    \ % 2 == 0) {\n            ans = mid;\n            break;\n        } else if (x\
    \ % 2 == 0 && y % 2 != 0) {\n            y = mid;\n        } else if (x % 2 !=\
    \ 0 && y % 2 == 0) {\n            x = mid;\n        } else {\n            mid\
    \ = (x + y) / 2;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ while (x+1 < y) {\n        long mid = (x+y)/2;\n        if (mid % 2 == 0) {\n\
    \            ans = mid;\n            x = mid+1;\n        } else {\n          \
    \  y = mid;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpf7ea9gas: /tmp/tmpf7ea9gas.cpp:29: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // Write your code here\n \
    \   long ans = -1;\n    long mid = (x + y) / 2;\n    if (mid % 2 == 0) {\n   \
    \     ans = mid;\n    } else {\n        if (x <= mid) {\n            ans = mid;\n\
    \        } else if (y <= mid) {\n            ans = mid;\n        } else {\n  \
    \          ans = -1;\n        }\n    }\n    return ans;\n}\nint main() {\n   \
    \ auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n \
    \   assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpc1jkztqm: /tmp/tmpc1jkztqm.cpp:28: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ while (x<y) {\n        long mid = (x+y)/2;\n        if (mid%2 == 0) {\n    \
    \        ans = mid;\n            break;\n        }\n        if (mid%2 == 1) {\n\
    \            y = mid;\n        }\n        else {\n            x = mid;\n     \
    \   }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpma8i71sm: /tmp/tmpma8i71sm.cpp:33: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    assert(x >= 0 && y >= 0);\n\
    \    long ans = -1;\n    long x_even = x % 2 == 0;\n    long y_even = y % 2 ==\
    \ 0;\n    if (x_even && y_even) {\n        long x_odd = x % 2 == 1;\n        long\
    \ y_odd = y % 2 == 1;\n        if (x_odd && y_odd) {\n            long x_even\
    \ = x % 2 == 0;\n            long y_even = y % 2 == 0;\n            if (x_even\
    \ && y_even) {\n                long x_odd = x % 2 == 1;\n                long\
    \ y_odd = y % 2 == 1;\n                if (x_odd && y_odd) {\n               \
    \     long x_even = x % 2 == 0;\n                    long y_even = y % 2 == 0;\n\
    \                    if (x_even && y_even) {\n                        long x_odd\
    \ = x % 2 == 1;\n                        long y_odd = y % 2 == 1;\n          \
    \              if (x_odd && y_odd) {\n                            long x_even\
    \ = x % 2 == 0;\n                            long y_even = y % 2 == 0;\n     \
    \                       if (x_even && y_even) {\n                            \
    \    long x_odd = x % 2 == 1;\n                                long y_odd = y\
    \ % 2 == 1;\n                                if (x_odd && y_odd) {\n         \
    \                           long x_even = x % 2 == 0;\n                      \
    \              long y_even = y % 2 == 0;\n                                   \
    \ if (x_even && y_even) {\n                                        long x_odd\
    \ = x % 2 == 1;\n                                        long y_odd = y % 2 ==\
    \ 1;\n                                        if (x_odd && y_odd) {\n        \
    \                                    long x_even = x % 2 == 0;\n             \
    \                               long y_even = y % 2 == 0;\n                  \
    \                          if (x_even && y_even) {\n                         \
    \                       long x_odd = x % 2 == 1;\n                           \
    \                     long y_odd = y % 2 == 1;\n                             \
    \                   if (x_odd && y_odd) {\n                                  \
    \                  long x_even = x % 2 == 0;\n                               \
    \                     long y_even = y % 2 == 0;\n                            \
    \                        if (x_even && y_even) {\n                           \
    \                             long x_odd = x % 2 == 1;\n                     \
    \                                   long y_odd = y % 2 == 1;\n               \
    \                                         if (x_odd && y_odd) {\n            \
    \                                                long x_even = x % 2 == 0;\n \
    \                                                           long y_even = y %\
    \ 2 == 0;\n                                                            if (x_even\
    \ && y_even) {\n                                                             \
    \   long x_odd = x % 2 == 1;\n                                               \
    \                 long y_odd = y % 2 == 1;\n                                 \
    \                               if (x_odd && y_odd) {\n                      \
    \                                              long x_even = x % 2 == 0;\n   \
    \                                                                 long y_even\
    \ = y % 2 == 0;\n                                                            \
    \        if (x_even && y_even) {\n                                           \
    \                             long x_odd = x % 2 == \n}\nint main() {\n    auto\
    \ candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7hng_wv_.cpp: In function \u2018long int choose_num(long int, long\
    \ int)\u2019:\n/tmp/tmp7hng_wv_.cpp:64:1: error: expected primary-expression before\
    \ \u2018}\u2019 token\n   64 | }\n      | ^\n/tmp/tmp7hng_wv_.cpp:65:12: error:\
    \ a function-definition is not allowed here before \u2018{\u2019 token\n   65\
    \ | int main() {\n      |            ^\n/tmp/tmp7hng_wv_.cpp:75:1: error: expected\
    \ \u2018}\u2019 at end of input\n   75 | }\n      | ^\n/tmp/tmp7hng_wv_.cpp:59:85:\
    \ note: to match this \u2018{\u2019\n   59 |                                 \
    \                                if (x_odd && y_odd) {\n      |              \
    \                                                                       ^\n/tmp/tmp7hng_wv_.cpp:75:1:\
    \ error: expected \u2018}\u2019 at end of input\n   75 | }\n      | ^\n/tmp/tmp7hng_wv_.cpp:56:83:\
    \ note: to match this \u2018{\u2019\n   56 |                                 \
    \                            if (x_even && y_even) {\n      |                \
    \                                                                   ^\n/tmp/tmp7hng_wv_.cpp:75:1:\
    \ error: expected \u2018}\u2019 at end of input\n   75 | }\n      | ^\n/tmp/tmp7hng_wv_.cpp:53:77:\
    \ note: to match this \u2018{\u2019\n   53 |                                 \
    \                        if (x_odd && y_odd) {\n      |                      \
    \                                                       ^\n/tmp/tmp7hng_wv_.cpp:75:1:\
    \ error: expected \u2018}\u2019 at end of input\n   75 | }\n      | ^\n/tmp/tmp7hng_wv_.cpp:50:75:\
    \ note: to match this \u2018{\u2019\n   50 |                                 \
    \                    if (x_even && y_even) {\n      |                        \
    \                                                   ^\n/tmp/tmp7hng_wv_.cpp:75:1:\
    \ error: expected \u2018}\u2019 at end of input\n   75 | }\n      | ^\n/tmp/tmp7hng_wv_.cpp:47:69:\
    \ note: to match this \u2018{\u2019\n   47 |                                 \
    \                if (x_odd && y_odd) {\n      |                              \
    \                                       ^\n/tmp/tmp7hng_wv_.cpp:75:1: error: expected\
    \ \u2018}\u2019 at end of input\n   75 | }\n      | ^\n/tmp/tmp7hng_wv_.cpp:44:67:\
    \ note: to match this \u2018{\u2019\n   44 |                                 \
    \            if (x_even && y_even) {\n      |                                \
    \                                   ^\n/tmp/tmp7hng_wv_.cpp:75:1: error: expected\
    \ \u2018}\u2019 at end of input\n   75 | }\n      | ^\n/tmp/tmp7hng_wv_.cpp:41:61:\
    \ note: to match this \u2018{\u2019\n   41 |                                 \
    \        if (x_odd && y_odd) {\n      |                                      \
    \                       ^\n/tmp/tmp7hng_wv_.cpp:75:1: error: expected \u2018}\u2019\
    \ at end of input\n   75 | }\n      | ^\n/tmp/tmp7hng_wv_.cpp:38:59: note: to\
    \ match this \u2018{\u2019\n   38 |                                     if (x_even\
    \ && y_even) {\n      |                                                      \
    \     ^\n/tmp/tmp7hng_wv_.cpp:75:1: error: expected \u2018}\u2019 at end of input\n\
    \   75 | }\n      | ^\n/tmp/tmp7hng_wv_.cpp:35:53: note: to match this \u2018\
    {\u2019\n   35 |                                 if (x_odd && y_odd) {\n     \
    \ |                                                     ^\n/tmp/tmp7hng_wv_.cpp:75:1:\
    \ error: expected \u2018}\u2019 at end of input\n   75 | }\n      | ^\n/tmp/tmp7hng_wv_.cpp:32:51:\
    \ note: to match this \u2018{\u2019\n   32 |                             if (x_even\
    \ && y_even) {\n      |                                                   ^\n\
    /tmp/tmp7hng_wv_.cpp:75:1: error: expected \u2018}\u2019 at end of input\n   75\
    \ | }\n      | ^\n/tmp/tmp7hng_wv_.cpp:29:45: note: to match this \u2018{\u2019\
    \n   29 |                         if (x_odd && y_odd) {\n      |             \
    \                                ^\n/tmp/tmp7hng_wv_.cpp:75:1: error: expected\
    \ \u2018}\u2019 at end of input\n   75 | }\n      | ^\n/tmp/tmp7hng_wv_.cpp:26:43:\
    \ note: to match this \u2018{\u2019\n   26 |                     if (x_even &&\
    \ y_even) {\n      |                                           ^\n/tmp/tmp7hng_wv_.cpp:75:1:\
    \ error: expected \u2018}\u2019 at end of input\n   75 | }\n      | ^\n/tmp/tmp7hng_wv_.cpp:23:37:\
    \ note: to match this \u2018{\u2019\n   23 |                 if (x_odd && y_odd)\
    \ {\n      |                                     ^\n/tmp/tmp7hng_wv_.cpp:75:1:\
    \ error: expected \u2018}\u2019 at end of input\n   75 | }\n      | ^\n/tmp/tmp7hng_wv_.cpp:20:35:\
    \ note: to match this \u2018{\u2019\n   20 |             if (x_even && y_even)\
    \ {\n      |                                   ^\n/tmp/tmp7hng_wv_.cpp:75:1: error:\
    \ expected \u2018}\u2019 at end of input\n   75 | }\n      | ^\n/tmp/tmp7hng_wv_.cpp:17:29:\
    \ note: to match this \u2018{\u2019\n   17 |         if (x_odd && y_odd) {\n \
    \     |                             ^\n/tmp/tmp7hng_wv_.cpp:75:1: error: expected\
    \ \u2018}\u2019 at end of input\n   75 | }\n      | ^\n/tmp/tmp7hng_wv_.cpp:14:27:\
    \ note: to match this \u2018{\u2019\n   14 |     if (x_even && y_even) {\n   \
    \   |                           ^\n/tmp/tmp7hng_wv_.cpp:75:1: error: expected\
    \ \u2018}\u2019 at end of input\n   75 | }\n      | ^\n/tmp/tmp7hng_wv_.cpp:9:33:\
    \ note: to match this \u2018{\u2019\n    9 | long choose_num(long x, long y) {\n\
    \      |                                 ^\n/tmp/tmp7hng_wv_.cpp:75:1: warning:\
    \ control reaches end of non-void function [-Wreturn-type]\n   75 | }\n      |\
    \ ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long mid = (x + y) / 2;\n        if (mid % 2 == 0) {\n       \
    \     ans = mid;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpavxg6ewd: /tmp/tmpavxg6ewd.cpp:21: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    long temp;\n\
    \    while (x <= y) {\n        temp = x;\n        x = y;\n        y = temp;\n\
    \    }\n    while (x % 2 == 0) {\n        x /= 2;\n    }\n    while (y % 2 ==\
    \ 0) {\n        y /= 2;\n    }\n    if (x == y) {\n        ans = x;\n    }\n \
    \   return ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpa43fp1ve: /tmp/tmpa43fp1ve.cpp:30: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if (x >= y) {\n        return\
    \ -1;\n    }\n    long mid = (x + y) / 2;\n    if (mid % 2 == 0) {\n        return\
    \ mid;\n    }\n    return choose_num(mid, y);\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpe4xdvks1: /tmp/tmpe4xdvks1.cpp:23: int main(): Assertion `candidate((33),\
    \ (12354)) == (12354)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // Write your code here\n \
    \   long ans = -1;\n    long mid = (x + y) / 2;\n    if (mid % 2 == 0) {\n   \
    \     ans = mid;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmprjfdsrx0: /tmp/tmprjfdsrx0.cpp:20: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long mid = (x + y) / 2;\n        if (mid % 2 == 0) {\n       \
    \     ans = mid;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  stdout: ''
  stderr: "tmpswwtbdx8: /tmp/tmpswwtbdx8.cpp:21: int main(): Assertion `candidate((12),\
    \ (15)) == (14)' failed.\n"
  exit_code: -6
  status: Exception
