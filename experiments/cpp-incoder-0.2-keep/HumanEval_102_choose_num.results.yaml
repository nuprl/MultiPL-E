language: cpp
name: HumanEval_102_choose_num
results:
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    long m\
    \ = 1;\n    long n = y;\n    long k = 0;\n    while (m <= n) {\n        if (m\
    \ % 2 == 0) {\n            ans = m;\n            break;\n        }\n        m\
    \ += 2;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpikb542o5: /tmp/tmpikb542o5.cpp:25: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098693
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ while (x+1 < y) {\n        if (x%2 == 0) {\n            ans = x;\n         \
    \   break;\n        }\n        x++;\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpd0ip_8zv: /tmp/tmpd0ip_8zv.cpp:27: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098693
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ while (x+1 < y) {\n        if (x%2 == 0) {\n            ans = x;\n         \
    \   break;\n        }\n        x++;\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpeoxc7yfm: /tmp/tmpeoxc7yfm.cpp:27: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098693
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long mid = (x + y) / 2;\n        ans = choose_num(mid, y);\n \
    \       if (ans == -1) {\n            ans = choose_num(x, mid);\n        }\n \
    \   } else {\n        long mid = (y + x) / 2;\n        ans = choose_num(x, mid);\n\
    \        if (ans == -1) {\n            ans = choose_num(y, mid);\n        }\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n \
    \   assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12)) ==\
    \ (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660098693
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // Write your code here\n \
    \   long ans = -1;\n    long mid = (x + y) / 2;\n    if (x >= y) {\n        while\
    \ (x <= mid) {\n            if (x % 2 == 0) {\n                ans = x;\n    \
    \            break;\n            }\n            x += 2;\n        }\n    } else\
    \ {\n        while (y <= mid) {\n            if (y % 2 == 0) {\n             \
    \   ans = y;\n                break;\n            }\n            y += 2;\n   \
    \     }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmphed8s117: /tmp/tmphed8s117.cpp:34: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098693
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // Write your code here\n \
    \   long ans = -1;\n    if (x >= y) {\n        long mid = (x + y) / 2;\n     \
    \   if (mid % 2 == 0) {\n            ans = mid;\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp9fdftxgd: /tmp/tmp9fdftxgd.cpp:22: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098693
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ while (x+1 < y) {\n        long mid = (x+y)/2;\n        if (mid % 2 == 0) {\n\
    \            ans = mid;\n            x = mid+1;\n        } else {\n          \
    \  y = mid;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpijmon9m_: /tmp/tmpijmon9m_.cpp:29: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098693
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    long m\
    \ = 1;\n    long n = y;\n    long k = 0;\n    while (m <= n) {\n        k = m\
    \ * m + (n - m) * (n - m);\n        if (k >= x && k <= y) {\n            ans =\
    \ k;\n            break;\n        }\n        m += 2;\n        n -= 2;\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpr85uagqm: /tmp/tmpr85uagqm.cpp:27: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098693
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ while (x<y) {\n        long mid = (x+y)/2;\n        if (mid%2 == 0) {\n    \
    \        ans = mid;\n            x = mid+1;\n        } else {\n            y =\
    \ mid;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpbo_y8qv9: /tmp/tmpbo_y8qv9.cpp:29: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098693
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    long mid\
    \ = (x + y) / 2;\n    if (x <= mid) {\n        ans = x;\n    } else if (mid <=\
    \ y) {\n        ans = mid;\n    } else {\n        ans = y;\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpen7judt6: /tmp/tmpen7judt6.cpp:23: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098693
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ while (x % 2 == 0 && y % 2 == 0) {\n        long temp = x;\n        x = y;\n\
    \        y = temp;\n    }\n    if (x == y) {\n        ans = x;\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp6_83u34a: /tmp/tmp6_83u34a.cpp:28: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098693
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // Write your code here\n \
    \   long ans = -1;\n    long mid = (x + y) / 2;\n    if (mid % 2 == 0) {\n   \
    \     ans = mid;\n    }\n    else {\n        if (mid < x && mid < y) {\n     \
    \       ans = mid;\n        }\n        else if (mid > x && mid > y) {\n      \
    \      ans = mid;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmplv77625z: /tmp/tmplv77625z.cpp:28: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098693
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ long mid = (x + y) / 2;\n    while (x <= y) {\n        if (mid % 2 == 0) {\n\
    \            ans = mid;\n            break;\n        }\n        mid = (mid + y)\
    \ / 2;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpmpruhbsk: /tmp/tmpmpruhbsk.cpp:29: int main(): Assertion `candidate((13),
    (12)) == (-1)'' failed.

    '
  stdout: ''
  timestamp: 1660098693
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ long mid = (x + y) / 2;\n    if (mid % 2 == 0) {\n        ans = mid;\n    }\
    \ else {\n        ans = choose_num(mid, y);\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpw05ck51a: /tmp/tmpw05ck51a.cpp:27: int main(): Assertion `candidate((13),
    (12)) == (-1)'' failed.

    '
  stdout: ''
  timestamp: 1660098693
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // Write your code here\n \
    \   long ans = -1;\n    if (x >= y) {\n        long mid = (x + y) / 2;\n     \
    \   if (mid % 2 == 0) {\n            ans = mid;\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp9fdftxgd: /tmp/tmp9fdftxgd.cpp:22: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098693
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long mid = x + (y - x) / 2;\n        ans = choose_num(mid, y);\n\
    \        if (ans == -1) {\n            ans = mid;\n        }\n    } else {\n \
    \       long mid = y + (x - y) / 2;\n        ans = choose_num(x, mid);\n     \
    \   if (ans == -1) {\n            ans = mid;\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660098693
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ while (x<y) {\n        long mid = x + (y-x)/2;\n        if (mid % 2 == 0) {\n\
    \            ans = mid;\n            break;\n        }\n        x = mid;\n   \
    \ }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpknx3mndk: /tmp/tmpknx3mndk.cpp:29: int main(): Assertion `candidate((13),
    (12)) == (-1)'' failed.

    '
  stdout: ''
  timestamp: 1660098693
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    long mid\
    \ = (x + y) / 2;\n    if (x <= mid) {\n        ans = x;\n    } else if (y <= mid)\
    \ {\n        ans = y;\n    } else {\n        ans = mid;\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp0n8ed5gp: /tmp/tmp0n8ed5gp.cpp:23: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098693
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ while (x<y) {\n        long mid = (x+y)/2;\n        if (mid%2 == 0) {\n    \
    \        ans = mid;\n            break;\n        }\n        if (mid%2 == 1) {\n\
    \            y = mid;\n        }\n        else {\n            x = mid;\n     \
    \   }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpe3qi4rwi: /tmp/tmpe3qi4rwi.cpp:33: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098693
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long mid = (x + y) / 2;\n        long a = choose_num(x, mid);\n\
    \        long b = choose_num(mid, y);\n        if ((a != -1) && (b != -1)) {\n\
    \            ans = a > b ? a : b;\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp41o3uf_9: /tmp/tmp41o3uf_9.cpp:23: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098693
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // Write your code here\n \
    \   long ans = -1;\n    long mid = (x + y) / 2;\n    long l = (x + y) % 2;\n \
    \   if (l == 0)\n        mid = x + y;\n    else if (l == 1)\n        mid = y +\
    \ x;\n    long temp = 0;\n    while (temp < mid) {\n        temp = temp + 2;\n\
    \    }\n    ans = temp;\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpnu2sknz5: /tmp/tmpnu2sknz5.cpp:27: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098693
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if (x >= y) {\n        return\
    \ -1;\n    }\n    long mid = x + (y - x) / 2;\n    if (mid % 2 == 0) {\n     \
    \   return mid;\n    }\n    return choose_num(mid, y);\n}\nint main() {\n    auto\
    \ candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp5lnzmtse: /tmp/tmp5lnzmtse.cpp:23: int main(): Assertion `candidate((33),
    (12354)) == (12354)'' failed.

    '
  stdout: ''
  timestamp: 1660098693
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if (x >= y) {\n        return\
    \ -1;\n    }\n    long mid = (x + y) / 2;\n    if (mid % 2 == 0) {\n        return\
    \ mid;\n    }\n    return choose_num(mid, y);\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpl2q8qqt2: /tmp/tmpl2q8qqt2.cpp:23: int main(): Assertion `candidate((33),
    (12354)) == (12354)'' failed.

    '
  stdout: ''
  timestamp: 1660098693
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long mid = (x + y) / 2;\n        if (mid % 2 == 0) {\n       \
    \     ans = mid;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpbq1k09s7: /tmp/tmpbq1k09s7.cpp:21: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098693
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long mid = x + (y - x) / 2;\n        if (mid % 2 == 0) {\n   \
    \         ans = mid;\n        }\n    }\n    return ans;\n}\nint main() {\n   \
    \ auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n \
    \   assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpciko8x8o: /tmp/tmpciko8x8o.cpp:21: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098693
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long mid = x + (y - x) / 2;\n        ans = choose_num(mid, y);\n\
    \        if (ans == -1) {\n            ans = mid;\n        }\n    } else {\n \
    \       long mid = y + (x - y) / 2;\n        ans = choose_num(x, mid);\n     \
    \   if (ans == -1) {\n            ans = mid;\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660098693
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // Write your code here\n \
    \   long ans = -1;\n    if (x >= y) {\n        long mid = x + (y - x) / 2;\n \
    \       if (mid % 2 == 0) {\n            ans = mid;\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpxijzkh06: /tmp/tmpxijzkh06.cpp:22: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098693
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if (x > y) {\n        long\
    \ temp = x;\n        x = y;\n        y = temp;\n    }\n    long ans = -1;\n  \
    \  while (x != y) {\n        if (x % 2 == 0) {\n            x = x / 2;\n     \
    \       ans = ans * 2 + x;\n        } else {\n            y = y / 2;\n       \
    \     ans = ans * 2 + y;\n        }\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpu786ppnl: /tmp/tmpu786ppnl.cpp:29: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098693
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // Write your code here\n \
    \   long ans = -1;\n    long mid = (x + y) / 2;\n    long l1 = (x % 2 == 0);\n\
    \    long l2 = (y % 2 == 0);\n    if (l1 && l2) {\n        ans = mid;\n    } else\
    \ if (l1) {\n        ans = mid;\n    } else if (l2) {\n        ans = mid;\n  \
    \  } else {\n        ans = -1;\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpwsho9wl_: /tmp/tmpwsho9wl_.cpp:28: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098693
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ long mid = x + (y - x) / 2;\n    while (x <= y) {\n        if (mid % 2 == 0)\
    \ {\n            ans = mid;\n            break;\n        }\n        mid++;\n \
    \   }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n  \
    \  assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12)) ==\
    \ (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpv017ay7l: /tmp/tmpv017ay7l.cpp:29: int main(): Assertion `candidate((13),
    (12)) == (-1)'' failed.

    '
  stdout: ''
  timestamp: 1660098693
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    assert(x >= 0 && y >= 0);\n\
    \    long ans = -1;\n    if (x <= y) {\n        long mid = (x + y) / 2;\n    \
    \    if (mid % 2 == 0) {\n            ans = mid;\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpedp0d6we: /tmp/tmpedp0d6we.cpp:22: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098693
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ while (x<y) {\n        long mid = x + (y-x)/2;\n        if (mid % 2 == 0) {\n\
    \            ans = mid;\n            break;\n        }\n        x = mid;\n   \
    \ }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpknx3mndk: /tmp/tmpknx3mndk.cpp:29: int main(): Assertion `candidate((13),
    (12)) == (-1)'' failed.

    '
  stdout: ''
  timestamp: 1660098693
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    long m\
    \ = 1;\n    long n = y;\n    long temp;\n    while (m <= n) {\n        temp =\
    \ m * m;\n        if (temp > n) {\n            temp = n;\n        }\n        if\
    \ (temp >= x && temp <= y) {\n            ans = temp;\n            break;\n  \
    \      }\n        m += 2;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpvj4iriw5: /tmp/tmpvj4iriw5.cpp:29: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098693
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ long mid = (x + y) / 2;\n    while (x <= y) {\n        if ((x % 2) == 0) {\n\
    \            ans = mid;\n            break;\n        }\n        mid = (mid + y)\
    \ / 2;\n        x++;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpqvx9nlb3: /tmp/tmpqvx9nlb3.cpp:29: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098693
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >\
    \ y) {\n        swap(x, y);\n    }\n    // If x is even, then y must be even.\n\
    \    if (x % 2 == 0) {\n        if (y % 2 == 0) {\n            ans = x;\n    \
    \    } else {\n            ans = -1;\n        }\n    } else {\n        if (y %\
    \ 2 == 0) {\n            ans = y;\n        } else {\n            ans = -1;\n \
    \       }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcuj91mgc.cpp: In function \u2018long int choose_num(long int, long\
    \ int)\u2019:\n/tmp/tmpcuj91mgc.cpp:12:9: error: \u2018swap\u2019 was not declared\
    \ in this scope\n   12 |         swap(x, y);\n      |         ^~~~\n/tmp/tmpcuj91mgc.cpp:12:9:\
    \ note: suggested alternatives:\nIn file included from /usr/include/c++/9/regex:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpcuj91mgc.cpp:2:\n/usr/include/c++/9/bits/regex.h:2029:5:\
    \ note:   \u2018std::__cxx11::swap\u2019\n 2029 |     swap(match_results<_Bi_iter,\
    \ _Alloc>& __lhs,\n      |     ^~~~\nIn file included from /usr/include/c++/9/bits/stl_pair.h:59,\n\
    \                 from /usr/include/c++/9/bits/stl_algobase.h:64,\n          \
    \       from /usr/include/c++/9/bits/specfun.h:45,\n                 from /usr/include/c++/9/cmath:1927,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpcuj91mgc.cpp:2:\n/usr/include/c++/9/bits/move.h:182:5:\
    \ note:   \u2018std::swap\u2019\n  182 |     swap(_Tp& __a, _Tp& __b)\n      |\
    \     ^~~~\n/usr/include/c++/9/bits/move.h:182:5: note:   \u2018std::swap\u2019\
    \nIn file included from /usr/include/c++/9/exception:143,\n                 from\
    \ /usr/include/c++/9/ios:39,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpcuj91mgc.cpp:2:\n/usr/include/c++/9/bits/exception_ptr.h:166:5: note:\
    \   \u2018std::__exception_ptr::swap\u2019\n  166 |     swap(exception_ptr& __lhs,\
    \ exception_ptr& __rhs)\n      |     ^~~~\nIn file included from /usr/include/c++/9/filesystem:37,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:129,\n\
    \                 from /tmp/tmpcuj91mgc.cpp:2:\n/usr/include/c++/9/bits/fs_path.h:611:15:\
    \ note:   \u2018std::filesystem::__cxx11::swap\u2019\n  611 |   inline void swap(path&\
    \ __lhs, path& __rhs) "
  stdout: ''
  timestamp: 1660098692
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ while (x+1 < y) {\n        if ((x & 1) == 0) {\n            ans = x;\n     \
    \       break;\n        }\n        x <<= 1;\n        y >>= 1;\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpcukq8uip: /tmp/tmpcukq8uip.cpp:28: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098693
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    assert(x >= 0 && y >= 0);\n\
    \    long ans = -1;\n    long mid = (x + y) / 2;\n    long diff = x - mid;\n \
    \   if (diff % 2 == 0) {\n        ans = mid;\n    } else {\n        ans = choose_num(mid,\
    \ y);\n    }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpg9jt8v8q: /tmp/tmpg9jt8v8q.cpp:24: int main(): Assertion `candidate((13),
    (12)) == (-1)'' failed.

    '
  stdout: ''
  timestamp: 1660098693
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long mid = x + (y - x) / 2;\n        ans = choose_num(mid, y);\n\
    \        if (ans == -1) {\n            ans = mid;\n        }\n    } else {\n \
    \       long mid = y + (x - y) / 2;\n        ans = choose_num(x, mid);\n     \
    \   if (ans == -1) {\n            ans = mid;\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660098693
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ while (x++ < y) {\n        if (x % 2 == 0) {\n            ans = x;\n       \
    \     break;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp_g1jcz7n: /tmp/tmp_g1jcz7n.cpp:28: int main(): Assertion `candidate((33),
    (12354)) == (12354)'' failed.

    '
  stdout: ''
  timestamp: 1660098692
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if (x >= y) {\n        return\
    \ -1;\n    }\n    long mid = x + (y - x) / 2;\n    if (mid % 2 == 0) {\n     \
    \   return mid;\n    }\n    return choose_num(mid, y);\n}\nint main() {\n    auto\
    \ candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp5lnzmtse: /tmp/tmp5lnzmtse.cpp:23: int main(): Assertion `candidate((33),
    (12354)) == (12354)'' failed.

    '
  stdout: ''
  timestamp: 1660098693
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ long mid = (x + y) / 2;\n    while (x <= y) {\n        if (mid % 2 == 0) {\n\
    \            ans = mid;\n            break;\n        }\n        mid = (mid + y)\
    \ / 2;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpmpruhbsk: /tmp/tmpmpruhbsk.cpp:29: int main(): Assertion `candidate((13),
    (12)) == (-1)'' failed.

    '
  stdout: ''
  timestamp: 1660098693
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if (x > y) {\n        long\
    \ temp = x;\n        x = y;\n        y = temp;\n    }\n    long ans = -1;\n  \
    \  for (long i = x; i <= y; i++) {\n        if (i % 2 == 0) {\n            ans\
    \ = i;\n            break;\n        }\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp3cvzlgsq: /tmp/tmp3cvzlgsq.cpp:26: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098693
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long mid = x + (y - x) / 2;\n        ans = choose_num(mid, y);\n\
    \        if (ans == -1) {\n            ans = mid;\n        }\n    } else {\n \
    \       long mid = y + (x - y) / 2;\n        ans = choose_num(x, mid);\n     \
    \   if (ans == -1) {\n            ans = mid;\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660098693
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ while (x<y) {\n        long mid = (x + y)/2;\n        if (mid % 2 == 0) {\n\
    \            ans = mid;\n            break;\n        }\n        else if (mid %\
    \ 2 != 0) {\n            y = mid;\n        }\n        else {\n            x =\
    \ mid;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp6m07e6er: /tmp/tmp6m07e6er.cpp:33: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098693
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ while (x<y) {\n        long mid = (x+y)/2;\n        if (mid%2 == 0) {\n    \
    \        ans = mid;\n            break;\n        }\n        if (mid%2 != 0) {\n\
    \            y = mid;\n        }\n        else {\n            x = mid;\n     \
    \   }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpkqx6nfdb: /tmp/tmpkqx6nfdb.cpp:33: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098692
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long mid = (x + y) / 2;\n        if (mid % 2 == 0) {\n       \
    \     ans = mid;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpbq1k09s7: /tmp/tmpbq1k09s7.cpp:21: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098693
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long mid = (x + y) / 2;\n        if (mid % 2 == 0) {\n       \
    \     ans = mid;\n        } else {\n            ans = choose_num(mid, y);\n  \
    \      }\n    } else {\n        long mid = (x + y) / 2;\n        if (mid % 2 ==\
    \ 0) {\n            ans = mid;\n        } else {\n            ans = choose_num(x,\
    \ mid);\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpn6j2ysnw: /tmp/tmpn6j2ysnw.cpp:30: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098693
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    long mid\
    \ = (x + y) / 2;\n    if (x <= mid) {\n        ans = x;\n    } else if (y <= mid)\
    \ {\n        ans = y;\n    } else {\n        ans = mid;\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp0n8ed5gp: /tmp/tmp0n8ed5gp.cpp:23: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098693
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if (x >= y) {\n        return\
    \ -1;\n    }\n    long mid = (x + y) / 2;\n    if (mid % 2 == 0) {\n        return\
    \ mid;\n    } else {\n        return choose_num(mid, y);\n    }\n}\nint main()\
    \ {\n    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp6vwsa7od: /tmp/tmp6vwsa7od.cpp:24: int main(): Assertion `candidate((33),
    (12354)) == (12354)'' failed.

    '
  stdout: ''
  timestamp: 1660098693
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ while (x != y) {\n        long mid = (x + y) / 2;\n        if (mid % 2 == 0)\
    \ {\n            ans = mid;\n            x = mid + 1;\n        } else {\n    \
    \        y = mid;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp5eqvq1yn: /tmp/tmp5eqvq1yn.cpp:29: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098693
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ while (y) {\n        if (x % 2 == 0) {\n            ans = y;\n            break;\n\
    \        }\n        y /= 2;\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp129jd54o: /tmp/tmp129jd54o.cpp:27: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098693
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long mid = x + (y - x) / 2;\n        long a = choose_num(x, mid);\n\
    \        long b = choose_num(mid, y);\n        ans = a > b ? a : b;\n    } else\
    \ {\n        long mid = y + (x - y) / 2;\n        long a = choose_num(y, mid);\n\
    \        long b = choose_num(mid, x);\n        ans = a > b ? a : b;\n    }\n \
    \   return ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660098693
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // Write your code here\n \
    \   long ans = -1;\n    if (x >= y) {\n        long mid = (x + y) / 2;\n     \
    \   if (mid % 2 == 0) {\n            ans = mid;\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp9fdftxgd: /tmp/tmp9fdftxgd.cpp:22: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098693
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ while (x+1 < y) {\n        long mid = (x+y)/2;\n        if (mid % 2 == 0) {\n\
    \            ans = mid;\n            x = mid;\n        } else {\n            y\
    \ = mid;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpkmn2cs1s: /tmp/tmpkmn2cs1s.cpp:29: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098693
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ while (x<y) {\n        long mid = (x+y)/2;\n        if (mid%2 == 0) {\n    \
    \        ans = mid;\n            x = mid+1;\n        } else {\n            y =\
    \ mid;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpbo_y8qv9: /tmp/tmpbo_y8qv9.cpp:29: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098693
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // Write your code here\n \
    \   long ans = -1;\n    if (x >= y) {\n        long mid = x + (y - x) / 2;\n \
    \       long res = choose_num(mid, y);\n        if (res > ans)\n            ans\
    \ = res;\n    }\n    else if (x <= y) {\n        long mid = x + (y - x) / 2;\n\
    \        long res = choose_num(x, mid);\n        if (res > ans)\n            ans\
    \ = res;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660098693
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    long m\
    \ = 1;\n    long n = y;\n    long k = 0;\n    long temp;\n    while(m <= n) {\n\
    \        temp = m;\n        m = n;\n        n = temp;\n        k++;\n    }\n \
    \   while(k >= 0) {\n        temp = k;\n        k = k / 2;\n        if(temp %\
    \ 2 == 0) {\n            ans = temp;\n            break;\n        }\n    }\n \
    \   return ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpjhmcgl_8: /tmp/tmpjhmcgl_8.cpp:33: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098693
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if (x >= y) {\n        return\
    \ -1;\n    }\n    long mid = (x + y) / 2;\n    if (mid % 2 == 0) {\n        return\
    \ mid;\n    }\n    return choose_num(mid, y);\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpl2q8qqt2: /tmp/tmpl2q8qqt2.cpp:23: int main(): Assertion `candidate((33),
    (12354)) == (12354)'' failed.

    '
  stdout: ''
  timestamp: 1660098693
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    long temp;\n\
    \    temp = x;\n    while (temp <= y) {\n        if (temp % 2 == 0) {\n      \
    \      ans = temp;\n            break;\n        }\n        temp++;\n    }\n  \
    \  return ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpple211y5: /tmp/tmpple211y5.cpp:24: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098695
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ while (x+1 < y) {\n        if (x%2 == 0) {\n            x = x + 1;\n       \
    \ } else {\n            y = y - 1;\n        }\n    }\n    if (x%2 == 0) {\n  \
    \      ans = x;\n    }\n    return ans;\n}\nint main() {\n    auto candidate =\
    \ choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp_ry1tw8o: /tmp/tmp_ry1tw8o.cpp:30: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098695
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // Write your code here\n \
    \   long ans = -1;\n    long m = x;\n    long n = y;\n    long temp;\n    while(m\
    \ <= n) {\n        temp = m*m;\n        if(temp > n) {\n            temp = n;\n\
    \        }\n        if(temp % 2 == 0) {\n            ans = temp;\n           \
    \ break;\n        }\n        m += 1;\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpxemv8iwq: /tmp/tmpxemv8iwq.cpp:30: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098695
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    assert(x >= 0 && y >= 0);\n\
    \    if (x > y) {\n        long temp = x;\n        x = y;\n        y = temp;\n\
    \    }\n    long ans = -1;\n    for (long i = 0; i <= y; i++) {\n        if (x\
    \ % 2 == 0) {\n            ans = i;\n            break;\n        }\n        x\
    \ /= 2;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmprc8hn8tf: /tmp/tmprc8hn8tf.cpp:28: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098696
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ while (x<y) {\n        long mid = (x + y)/2;\n        if (mid % 2 == 0) {\n\
    \            ans = mid;\n            break;\n        }\n        else if (mid <\
    \ y) {\n            x = mid + 1;\n        }\n        else {\n            y = mid\
    \ - 1;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpqtysyide: /tmp/tmpqtysyide.cpp:34: int main(): Assertion `candidate((13),
    (12)) == (-1)'' failed.

    '
  stdout: ''
  timestamp: 1660098696
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    long mid\
    \ = (x + y) / 2;\n    if (mid % 2 == 0) {\n        ans = mid;\n    } else {\n\
    \        if (x <= mid) {\n            ans = mid;\n        } else {\n         \
    \   ans = mid;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp7lt3j_rc: /tmp/tmp7lt3j_rc.cpp:25: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098695
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    assert(x >= 0 && y >= 0);\n\
    \    long ans = -1;\n    if (x > y) {\n        long temp = x;\n        x = y;\n\
    \        y = temp;\n    }\n    for (long i = x; i <= y; i++) {\n        if (i\
    \ % 2 == 0) {\n            ans = i;\n            break;\n        }\n    }\n  \
    \  return ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmptlb7bdpz: /tmp/tmptlb7bdpz.cpp:27: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098696
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >\
    \ y) {\n        swap(x, y);\n    }\n    for (long i = x; i <= y; i++) {\n    \
    \    if (i % 2 == 0) {\n            ans = i;\n            break;\n        }\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n \
    \   assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12)) ==\
    \ (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2s6zz9f7.cpp: In function \u2018long int choose_num(long int, long\
    \ int)\u2019:\n/tmp/tmp2s6zz9f7.cpp:12:9: error: \u2018swap\u2019 was not declared\
    \ in this scope\n   12 |         swap(x, y);\n      |         ^~~~\n/tmp/tmp2s6zz9f7.cpp:12:9:\
    \ note: suggested alternatives:\nIn file included from /usr/include/c++/9/regex:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmp2s6zz9f7.cpp:2:\n/usr/include/c++/9/bits/regex.h:2029:5:\
    \ note:   \u2018std::__cxx11::swap\u2019\n 2029 |     swap(match_results<_Bi_iter,\
    \ _Alloc>& __lhs,\n      |     ^~~~\nIn file included from /usr/include/c++/9/bits/stl_pair.h:59,\n\
    \                 from /usr/include/c++/9/bits/stl_algobase.h:64,\n          \
    \       from /usr/include/c++/9/bits/specfun.h:45,\n                 from /usr/include/c++/9/cmath:1927,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmp2s6zz9f7.cpp:2:\n/usr/include/c++/9/bits/move.h:182:5:\
    \ note:   \u2018std::swap\u2019\n  182 |     swap(_Tp& __a, _Tp& __b)\n      |\
    \     ^~~~\n/usr/include/c++/9/bits/move.h:182:5: note:   \u2018std::swap\u2019\
    \nIn file included from /usr/include/c++/9/exception:143,\n                 from\
    \ /usr/include/c++/9/ios:39,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp2s6zz9f7.cpp:2:\n/usr/include/c++/9/bits/exception_ptr.h:166:5: note:\
    \   \u2018std::__exception_ptr::swap\u2019\n  166 |     swap(exception_ptr& __lhs,\
    \ exception_ptr& __rhs)\n      |     ^~~~\nIn file included from /usr/include/c++/9/filesystem:37,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:129,\n\
    \                 from /tmp/tmp2s6zz9f7.cpp:2:\n/usr/include/c++/9/bits/fs_path.h:611:15:\
    \ note:   \u2018std::filesystem::__cxx11::swap\u2019\n  611 |   inline void swap(path&\
    \ __lhs, path& __rhs) "
  stdout: ''
  timestamp: 1660098695
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long mid = (x + y) / 2;\n        long mid2 = mid * mid;\n    \
    \    if (mid2 > x) {\n            ans = mid;\n        } else if (mid2 < y) {\n\
    \            ans = mid;\n        } else {\n            ans = mid2;\n        }\n\
    \    } else {\n        long mid = (x + y) / 2;\n        long mid2 = mid * mid;\n\
    \        if (mid2 < y) {\n            ans = mid;\n        } else {\n         \
    \   ans = mid2;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp6787aws9: /tmp/tmp6787aws9.cpp:34: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098696
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // Write your code here\n \
    \   long ans = -1;\n    if (x >= y) {\n        long mid = (x + y) / 2;\n     \
    \   if (mid % 2 == 0) {\n            ans = mid;\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp9fdftxgd: /tmp/tmp9fdftxgd.cpp:22: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098693
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >\
    \ y) {\n        swap(x, y);\n    }\n    // If x is smaller than y, then x must\
    \ be even.\n    if (x <= y) {\n        // If x is even, then y must be even.\n\
    \        if ((x % 2) == 0) {\n            if ((y % 2) == 0) {\n              \
    \  ans = x;\n            }\n            else {\n                ans = y;\n   \
    \         }\n        }\n        // If x is odd, then y must be odd.\n        else\
    \ {\n            if ((y % 2) == 1) {\n                ans = x;\n            }\n\
    \            else {\n                ans = y;\n            }\n        }\n    }\n\
    \    // If y is smaller than x, then y must be even.\n    else {\n        // If\
    \ y is even, then x must be even.\n        if ((y % 2) == 0) {\n            if\
    \ ((x % 2) == 0) {\n                ans = y;\n            }\n            else\
    \ {\n                ans = x;\n            }\n        }\n        // If y is odd,\
    \ then x must be odd.\n        else {\n            if ((x % 2) == 1) {\n     \
    \           ans = y;\n            }\n            else {\n                ans =\
    \ x;\n            }\n        }\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpp8ud1ur7.cpp: In function \u2018long int choose_num(long int, long\
    \ int)\u2019:\n/tmp/tmpp8ud1ur7.cpp:12:9: error: \u2018swap\u2019 was not declared\
    \ in this scope\n   12 |         swap(x, y);\n      |         ^~~~\n/tmp/tmpp8ud1ur7.cpp:12:9:\
    \ note: suggested alternatives:\nIn file included from /usr/include/c++/9/regex:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpp8ud1ur7.cpp:2:\n/usr/include/c++/9/bits/regex.h:2029:5:\
    \ note:   \u2018std::__cxx11::swap\u2019\n 2029 |     swap(match_results<_Bi_iter,\
    \ _Alloc>& __lhs,\n      |     ^~~~\nIn file included from /usr/include/c++/9/bits/stl_pair.h:59,\n\
    \                 from /usr/include/c++/9/bits/stl_algobase.h:64,\n          \
    \       from /usr/include/c++/9/bits/specfun.h:45,\n                 from /usr/include/c++/9/cmath:1927,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpp8ud1ur7.cpp:2:\n/usr/include/c++/9/bits/move.h:182:5:\
    \ note:   \u2018std::swap\u2019\n  182 |     swap(_Tp& __a, _Tp& __b)\n      |\
    \     ^~~~\n/usr/include/c++/9/bits/move.h:182:5: note:   \u2018std::swap\u2019\
    \nIn file included from /usr/include/c++/9/exception:143,\n                 from\
    \ /usr/include/c++/9/ios:39,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpp8ud1ur7.cpp:2:\n/usr/include/c++/9/bits/exception_ptr.h:166:5: note:\
    \   \u2018std::__exception_ptr::swap\u2019\n  166 |     swap(exception_ptr& __lhs,\
    \ exception_ptr& __rhs)\n      |     ^~~~\nIn file included from /usr/include/c++/9/filesystem:37,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:129,\n\
    \                 from /tmp/tmpp8ud1ur7.cpp:2:\n/usr/include/c++/9/bits/fs_path.h:611:15:\
    \ note:   \u2018std::filesystem::__cxx11::swap\u2019\n  611 |   inline void swap(path&\
    \ __lhs, path& __rhs) "
  stdout: ''
  timestamp: 1660098695
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ while (x != y) {\n        if (x % 2 == 0) {\n            x = x / 2;\n      \
    \  } else {\n            y = y / 2;\n        }\n    }\n    if (x == y) {\n   \
    \     ans = x;\n    }\n    return ans;\n}\nint main() {\n    auto candidate =\
    \ choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpu30hdup8: /tmp/tmpu30hdup8.cpp:30: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098695
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long mid = (x + y) / 2;\n        ans = choose_num(mid, y);\n \
    \       if (ans == -1) {\n            ans = choose_num(x, mid);\n        }\n \
    \   } else {\n        long mid = (x + y) / 2;\n        ans = choose_num(x, mid);\n\
    \        if (ans == -1) {\n            ans = choose_num(y, mid);\n        }\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n \
    \   assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12)) ==\
    \ (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660098695
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    long m\
    \ = 1;\n    long n = y;\n    long k;\n    long temp;\n    while (m <= n) {\n \
    \       k = m;\n        temp = m;\n        while (temp <= n) {\n            if\
    \ (k % 2 == 0 && temp % 2 == 0) {\n                ans = temp;\n             \
    \   break;\n            }\n            temp++;\n        }\n        m++;\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp3l_ck9bs: /tmp/tmp3l_ck9bs.cpp:32: int main(): Assertion `candidate((13),
    (12)) == (-1)'' failed.

    '
  stdout: ''
  timestamp: 1660098696
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    assert(x >= 0 && y >= 0);\n\
    \    long ans = -1;\n    long mid = (x + y) / 2;\n    if (mid % 2 == 0) {\n  \
    \      ans = mid;\n    }\n    if (mid > x) {\n        ans = mid;\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpz0tb6cak: /tmp/tmpz0tb6cak.cpp:23: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098696
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // Write your code here\n \
    \   long ans = -1;\n    long mid = (x + y) / 2;\n    if (mid % 2 == 0) {\n   \
    \     ans = mid;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpl9wu2y5f: /tmp/tmpl9wu2y5f.cpp:20: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098696
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ while (x != y) {\n        if (x % 2 == 0) {\n            x = x / 2;\n      \
    \  } else {\n            y = y / 2;\n        }\n    }\n    if (x == y) {\n   \
    \     ans = x;\n    }\n    return ans;\n}\nint main() {\n    auto candidate =\
    \ choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpu30hdup8: /tmp/tmpu30hdup8.cpp:30: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098695
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long mid = x + (y - x) / 2;\n        ans = choose_num(mid, y);\n\
    \        if (ans == -1) {\n            ans = mid;\n        }\n    } else {\n \
    \       long mid = y + (x - y) / 2;\n        ans = choose_num(x, mid);\n     \
    \   if (ans == -1) {\n            ans = mid;\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660098693
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ while (x<y) {\n        long mid = (x+y)/2;\n        if (mid%2 == 0) {\n    \
    \        ans = mid;\n            break;\n        }\n        if (mid%2 != 0) {\n\
    \            y = mid;\n        }\n        else {\n            x = mid;\n     \
    \   }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpkqx6nfdb: /tmp/tmpkqx6nfdb.cpp:33: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098692
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long mid = (x + y) / 2;\n        ans = choose_num(x, mid);\n \
    \       if (ans == -1) {\n            ans = choose_num(mid + 1, y);\n        }\n\
    \    } else {\n        long mid = (x + y) / 2;\n        ans = choose_num(mid,\
    \ y);\n        if (ans == -1) {\n            ans = choose_num(x, mid - 1);\n \
    \       }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660098696
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ while (x+1 < y) {\n        long mid = (x+y)/2;\n        if (mid % 2 == 0) {\n\
    \            ans = mid;\n            x = mid;\n        } else {\n            y\
    \ = mid;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpkmn2cs1s: /tmp/tmpkmn2cs1s.cpp:29: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098693
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long mid = x + (y - x) / 2;\n        ans = choose_num(mid, y);\n\
    \        if (ans == -1) {\n            ans = mid;\n        }\n    } else {\n \
    \       long mid = y + (x - y) / 2;\n        ans = choose_num(x, mid);\n     \
    \   if (ans == -1) {\n            ans = mid;\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660098693
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long mid = x + (y - x) / 2;\n        ans = choose_num(mid, y);\n\
    \        if (ans == -1) {\n            ans = mid;\n        }\n    } else {\n \
    \       long mid = y + (x - y) / 2;\n        ans = choose_num(x, mid);\n     \
    \   if (ans == -1) {\n            ans = mid;\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660098693
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ while (x != y) {\n        if (x % 2 == 0) {\n            x = x / 2;\n      \
    \      ans = ans * 2 + x;\n        } else {\n            y = y / 2;\n        \
    \    ans = ans * 2 + y;\n        }\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpqdd3wppv: /tmp/tmpqdd3wppv.cpp:29: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098695
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    long mid\
    \ = (x + y) / 2;\n    long left_bound = mid;\n    long right_bound = mid;\n  \
    \  while (left_bound < right_bound) {\n        long mid = (left_bound + right_bound)\
    \ / 2;\n        if (mid * mid <= left_bound * right_bound) {\n            ans\
    \ = mid;\n            left_bound = mid;\n        } else {\n            right_bound\
    \ = mid;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpz_pl5obl: /tmp/tmpz_pl5obl.cpp:27: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098696
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ while (x % 2 == 0 && y % 2 == 0) {\n        long temp = x;\n        x = y;\n\
    \        y = temp;\n    }\n    if (x == y) {\n        ans = x;\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp6_83u34a: /tmp/tmp6_83u34a.cpp:28: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098693
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long mid = x + (y - x) / 2;\n        ans = choose_num(mid, y);\n\
    \        if (ans == -1) {\n            ans = mid;\n        }\n    } else {\n \
    \       long mid = y + (x - y) / 2;\n        ans = choose_num(x, mid);\n     \
    \   if (ans == -1) {\n            ans = mid;\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660098693
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ while (x+1 < y) {\n        long mid = (x+y)/2;\n        if (mid%2 == 0) {\n\
    \            ans = mid;\n            x = mid+1;\n        } else {\n          \
    \  y = mid;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpel1rc2ec: /tmp/tmpel1rc2ec.cpp:29: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098696
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long mid = (x + y) / 2;\n        if (mid % 2 == 0) {\n       \
    \     ans = mid;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpbq1k09s7: /tmp/tmpbq1k09s7.cpp:21: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098693
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long mid = x + (y - x) / 2;\n        if (mid % 2 == 0) {\n   \
    \         ans = mid;\n        }\n        else {\n            ans = choose_num(mid,\
    \ y);\n        }\n    }\n    else {\n        long mid = y + (x - y) / 2;\n   \
    \     if (mid % 2 == 0) {\n            ans = mid;\n        }\n        else {\n\
    \            ans = choose_num(x, mid);\n        }\n    }\n    return ans;\n}\n\
    int main() {\n    auto candidate = choose_num;\n    assert(candidate((12), (15))\
    \ == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660098695
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ long mid = (x + y) / 2;\n    while (x != mid && y != mid && x % 2 == 0 && y\
    \ % 2 == 0) {\n        if (x <= mid) {\n            x = mid + 1;\n        } else\
    \ {\n            y = mid - 1;\n        }\n        mid = (x + y) / 2;\n    }\n\
    \    if (x == mid) {\n        ans = mid;\n    } else if (y == mid) {\n       \
    \ ans = mid;\n    } else {\n        ans = -1;\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = choose_num;\n    assert(candidate((12), (15))\
    \ == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpkkudrtrl: /tmp/tmpkkudrtrl.cpp:36: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098696
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // Write your code here\n \
    \   long ans = -1;\n    long m = 1;\n    long n = y;\n    long q = x;\n    long\
    \ r = x;\n    long s = 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n\
    \    long w = 1;\n    long x = x;\n    long y = y;\n    long z = x;\n    long\
    \ a = x;\n    long b = y;\n    long c = x;\n    long d = y;\n    long e = x;\n\
    \    long f = y;\n    long g = x;\n    long h = y;\n    long i = x;\n    long\
    \ j = y;\n    long k = x;\n    long l = y;\n    long m = 1;\n    long n = y;\n\
    \    long q = x;\n    long r = x;\n    long s = 1;\n    long t = 1;\n    long\
    \ u = 1;\n    long v = 1;\n    long w = 1;\n    long x = x;\n    long y = y;\n\
    \    long z = x;\n    long a = x;\n    long b = y;\n    long c = x;\n    long\
    \ d = y;\n    long e = x;\n    long f = y;\n    long g = x;\n    long h = y;\n\
    \    long i = x;\n    long j = y;\n    long k = x;\n    long l = y;\n    long\
    \ m = 1;\n    long n = y;\n    long q = x;\n    long r = x;\n    long s = 1;\n\
    \    long t = 1;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n    long\
    \ x = x;\n    long y = y;\n    long z = x;\n    long a = x;\n    long b = y;\n\
    \    long c = x;\n    long d = y;\n    long e = x;\n    long f = y;\n    long\
    \ g = x;\n    long h = y;\n    long i = x;\n    long j = y;\n    long k = x;\n\
    \    long l = y;\n    long m = 1;\n    long n = y;\n    long q = x;\n    long\
    \ r = x;\n    long s = 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n\
    \    long w = 1;\n    long x = x;\n    long y = y;\n    long z = x;\n    long\
    \ a = x;\n    long b = y;\n    long c = x;\n    long d = y;\n    long e = x;\n\
    \    long f = y;\n    long g = x;\n    long h = y;\n    long i = x;\n    long\
    \ j = y;\n    long k = x;\n    long l = y;\n    long m = 1;\n    long n = y;\n\
    \    long q = x;\n    long r = x;\n    \n}\nint main() {\n    auto candidate =\
    \ choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpt38hvidp.cpp: In function \u2018long int choose_num(long int, long\
    \ int)\u2019:\n/tmp/tmpt38hvidp.cpp:21:10: error: declaration of \u2018long int\
    \ x\u2019 shadows a parameter\n   21 |     long x = x;\n      |          ^\n/tmp/tmpt38hvidp.cpp:22:10:\
    \ error: declaration of \u2018long int y\u2019 shadows a parameter\n   22 |  \
    \   long y = y;\n      |          ^\n/tmp/tmpt38hvidp.cpp:36:10: error: redeclaration\
    \ of \u2018long int m\u2019\n   36 |     long m = 1;\n      |          ^\n/tmp/tmpt38hvidp.cpp:12:10:\
    \ note: \u2018long int m\u2019 previously declared here\n   12 |     long m =\
    \ 1;\n      |          ^\n/tmp/tmpt38hvidp.cpp:37:10: error: redeclaration of\
    \ \u2018long int n\u2019\n   37 |     long n = y;\n      |          ^\n/tmp/tmpt38hvidp.cpp:13:10:\
    \ note: \u2018long int n\u2019 previously declared here\n   13 |     long n =\
    \ y;\n      |          ^\n/tmp/tmpt38hvidp.cpp:38:10: error: redeclaration of\
    \ \u2018long int q\u2019\n   38 |     long q = x;\n      |          ^\n/tmp/tmpt38hvidp.cpp:14:10:\
    \ note: \u2018long int q\u2019 previously declared here\n   14 |     long q =\
    \ x;\n      |          ^\n/tmp/tmpt38hvidp.cpp:39:10: error: redeclaration of\
    \ \u2018long int r\u2019\n   39 |     long r = x;\n      |          ^\n/tmp/tmpt38hvidp.cpp:15:10:\
    \ note: \u2018long int r\u2019 previously declared here\n   15 |     long r =\
    \ x;\n      |          ^\n/tmp/tmpt38hvidp.cpp:40:10: error: redeclaration of\
    \ \u2018long int s\u2019\n   40 |     long s = 1;\n      |          ^\n/tmp/tmpt38hvidp.cpp:16:10:\
    \ note: \u2018long int s\u2019 previously declared here\n   16 |     long s =\
    \ 1;\n      |          ^\n/tmp/tmpt38hvidp.cpp:41:10: error: redeclaration of\
    \ \u2018long int t\u2019\n   41 |     long t = 1;\n      |          ^\n/tmp/tmpt38hvidp.cpp:17:10:\
    \ note: \u2018long int t\u2019 previously declared here\n   17 |     long t =\
    \ 1;\n      |          ^\n/tmp/tmpt38hvidp.cpp:42:10: error: redeclaration of\
    \ \u2018long int u\u2019\n   42 |     long u = 1;\n      |          ^\n/tmp/tmpt38hvidp.cpp:18:10:\
    \ note: \u2018long int u\u2019 previously declared here\n   18 |     long u =\
    \ 1;\n      |          ^\n/tmp/tmpt38hvidp.cpp:43:10: error: redeclaration of\
    \ \u2018long int v\u2019\n   43 |     long v = "
  stdout: ''
  timestamp: 1660098695
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ while (x<y) {\n        long mid = (x + y)/2;\n        if (mid % 2 == 0) {\n\
    \            ans = mid;\n            break;\n        }\n        else if (mid <\
    \ y) {\n            y = mid;\n        }\n        else {\n            x = mid;\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpnqhujxfi: /tmp/tmpnqhujxfi.cpp:33: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098696
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long mid = x + (y - x) / 2;\n        ans = choose_num(mid, y);\n\
    \        if (ans == -1) {\n            ans = mid;\n        }\n    } else {\n \
    \       long mid = y + (x - y) / 2;\n        ans = choose_num(x, mid);\n     \
    \   if (ans == -1) {\n            ans = mid;\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660098693
- exit_code: -8
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // Write your code here\n \
    \   long ans = -1;\n    long m = 1;\n    long n = y;\n    long temp;\n    while(m\
    \ <= n) {\n        temp = m;\n        m = n%m;\n        n = temp;\n    }\n   \
    \ temp = m;\n    m = x;\n    x = temp;\n    while(m <= x) {\n        temp = m;\n\
    \        m = n%m;\n        n = temp;\n    }\n    temp = m;\n    m = y;\n    y\
    \ = temp;\n    while(m <= y) {\n        temp = m;\n        m = n%m;\n        n\
    \ = temp;\n    }\n    ans = n;\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660098696
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if (x > y) {\n        long\
    \ temp = x;\n        x = y;\n        y = temp;\n    }\n    long ans = -1;\n  \
    \  while (x != y) {\n        if (x % 2 == 0) {\n            x = x / 2;\n     \
    \   } else {\n            y = y / 2;\n        }\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = choose_num;\n    assert(candidate((12), (15))\
    \ == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp20n9hsao: /tmp/tmp20n9hsao.cpp:27: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098696
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ while (x<y) {\n        long mid = (x+y)/2;\n        if (mid%2 == 0) {\n    \
    \        ans = mid;\n            break;\n        }\n        if (mid%2 == 1) {\n\
    \            y = mid;\n        }\n        else {\n            x = mid;\n     \
    \   }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpe3qi4rwi: /tmp/tmpe3qi4rwi.cpp:33: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098693
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if (x >= y) {\n        return\
    \ -1;\n    }\n    long mid = (x + y) / 2;\n    if (mid % 2 == 0) {\n        return\
    \ mid;\n    }\n    return choose_num(mid, y);\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpl2q8qqt2: /tmp/tmpl2q8qqt2.cpp:23: int main(): Assertion `candidate((33),
    (12354)) == (12354)'' failed.

    '
  stdout: ''
  timestamp: 1660098693
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    long m\
    \ = 1;\n    long n = y;\n    long k = 0;\n    long i = 0;\n    long j = 0;\n \
    \   long temp = 0;\n    while (i < n) {\n        j = i;\n        while (j < n\
    \ && m % 2 == 0) {\n            j = j + 1;\n            m = m / 2;\n        }\n\
    \        if (m == 0) {\n            ans = i;\n            break;\n        }\n\
    \        temp = m;\n        m = n;\n        n = j;\n        k = i;\n        while\
    \ (k != k + 1) {\n            i = i + 1;\n            k = k + 1;\n        }\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n \
    \   assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12)) ==\
    \ (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660098700
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ while (x<y) {\n        if (x%2 == 0) {\n            ans = x;\n            break;\n\
    \        }\n        x++;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpl76z2zja: /tmp/tmpl76z2zja.cpp:27: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098696
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if (x >= y) {\n        return\
    \ -1;\n    }\n    long mid = (x + y) / 2;\n    if (mid % 2 == 0) {\n        return\
    \ mid;\n    }\n    return choose_num(mid, y);\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpl2q8qqt2: /tmp/tmpl2q8qqt2.cpp:23: int main(): Assertion `candidate((33),
    (12354)) == (12354)'' failed.

    '
  stdout: ''
  timestamp: 1660098693
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ long mid = (x + y) / 2;\n    if (mid % 2 == 0) {\n        ans = mid;\n    }\
    \ else {\n        if (mid > x) {\n            ans = mid;\n        } else {\n \
    \           ans = x;\n        }\n    }\n    return ans;\n}\nint main() {\n   \
    \ auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n \
    \   assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpkbt286p0: /tmp/tmpkbt286p0.cpp:30: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098696
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // Write your code here\n \
    \   long ans = -1;\n    if (x >= y) {\n        long temp = x;\n        x = y;\n\
    \        y = temp;\n    }\n    while (x<y) {\n        if (x%2 == 0) {\n      \
    \      ans = x;\n            break;\n        }\n        x++;\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp5xml2wbs: /tmp/tmp5xml2wbs.cpp:28: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098696
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ while (x<y) {\n        long mid = (x+y)/2;\n        if (mid % 2 == 0) {\n  \
    \          ans = mid;\n            break;\n        }\n        if (mid > y) {\n\
    \            y = mid;\n        } else {\n            x = mid;\n        }\n   \
    \ }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpc0wkcwg5: /tmp/tmpc0wkcwg5.cpp:33: int main(): Assertion `candidate((13),
    (12)) == (-1)'' failed.

    '
  stdout: ''
  timestamp: 1660098696
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ long mid = (x + y) / 2;\n    while (x <= y) {\n        if ((x % 2) == 0) {\n\
    \            ans = mid;\n            break;\n        }\n        mid = (mid + y)\
    \ / 2;\n        x++;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpqvx9nlb3: /tmp/tmpqvx9nlb3.cpp:29: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098693
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long mid = (x + y) / 2;\n        ans = choose_num(x, mid);\n \
    \       if (ans == -1) {\n            ans = choose_num(mid + 1, y);\n        }\n\
    \    } else {\n        long mid = (x + y) / 2;\n        ans = choose_num(mid,\
    \ y);\n        if (ans == -1) {\n            ans = choose_num(x, mid - 1);\n \
    \       }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660098696
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ while (x < y) {\n        long mid = (x + y) / 2;\n        if (mid % 2 == 0)\
    \ {\n            ans = mid;\n            break;\n        }\n        if (mid >\
    \ y) {\n            y = mid;\n        } else {\n            x = mid;\n       \
    \ }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp7r6tyrn3: /tmp/tmp7r6tyrn3.cpp:33: int main(): Assertion `candidate((13),
    (12)) == (-1)'' failed.

    '
  stdout: ''
  timestamp: 1660098695
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long mid = x + (y - x) / 2;\n        ans = choose_num(mid, y);\n\
    \        if (ans == -1) {\n            ans = mid;\n        }\n    } else {\n \
    \       long mid = y + (x - y) / 2;\n        ans = choose_num(x, mid);\n     \
    \   if (ans == -1) {\n            ans = mid;\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660098693
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ while (x++ < y) {\n        if (x%2 == 0) {\n            ans = x;\n         \
    \   break;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpud5vto5b: /tmp/tmpud5vto5b.cpp:28: int main(): Assertion `candidate((33),
    (12354)) == (12354)'' failed.

    '
  stdout: ''
  timestamp: 1660098696
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >\
    \ y) {\n        swap(x, y);\n    }\n    long mid = (x + y) / 2;\n    if (mid %\
    \ 2 == 0) {\n        ans = mid;\n    } else {\n        if (mid < x || mid > y)\
    \ {\n            ans = -1;\n        } else {\n            ans = mid;\n       \
    \ }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5a9opykf.cpp: In function \u2018long int choose_num(long int, long\
    \ int)\u2019:\n/tmp/tmp5a9opykf.cpp:12:9: error: \u2018swap\u2019 was not declared\
    \ in this scope\n   12 |         swap(x, y);\n      |         ^~~~\n/tmp/tmp5a9opykf.cpp:12:9:\
    \ note: suggested alternatives:\nIn file included from /usr/include/c++/9/regex:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmp5a9opykf.cpp:2:\n/usr/include/c++/9/bits/regex.h:2029:5:\
    \ note:   \u2018std::__cxx11::swap\u2019\n 2029 |     swap(match_results<_Bi_iter,\
    \ _Alloc>& __lhs,\n      |     ^~~~\nIn file included from /usr/include/c++/9/bits/stl_pair.h:59,\n\
    \                 from /usr/include/c++/9/bits/stl_algobase.h:64,\n          \
    \       from /usr/include/c++/9/bits/specfun.h:45,\n                 from /usr/include/c++/9/cmath:1927,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmp5a9opykf.cpp:2:\n/usr/include/c++/9/bits/move.h:182:5:\
    \ note:   \u2018std::swap\u2019\n  182 |     swap(_Tp& __a, _Tp& __b)\n      |\
    \     ^~~~\n/usr/include/c++/9/bits/move.h:182:5: note:   \u2018std::swap\u2019\
    \nIn file included from /usr/include/c++/9/exception:143,\n                 from\
    \ /usr/include/c++/9/ios:39,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp5a9opykf.cpp:2:\n/usr/include/c++/9/bits/exception_ptr.h:166:5: note:\
    \   \u2018std::__exception_ptr::swap\u2019\n  166 |     swap(exception_ptr& __lhs,\
    \ exception_ptr& __rhs)\n      |     ^~~~\nIn file included from /usr/include/c++/9/filesystem:37,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:129,\n\
    \                 from /tmp/tmp5a9opykf.cpp:2:\n/usr/include/c++/9/bits/fs_path.h:611:15:\
    \ note:   \u2018std::filesystem::__cxx11::swap\u2019\n  611 |   inline void swap(path&\
    \ __lhs, path& __rhs) "
  stdout: ''
  timestamp: 1660098695
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // Write your code here\n \
    \   long ans = -1;\n    long mid = (x + y) / 2;\n    if (x >= y) {\n        while\
    \ (x < y) {\n            if (mid % 2 == 0) {\n                ans = mid;\n   \
    \             break;\n            }\n            mid = (mid + y) / 2;\n      \
    \  }\n    } else {\n        while (y < x) {\n            if (mid % 2 == 0) {\n\
    \                ans = mid;\n                break;\n            }\n         \
    \   mid = (mid + x) / 2;\n        }\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpqk5ixifq: /tmp/tmpqk5ixifq.cpp:34: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098696
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ while (x<y) {\n        long mid = (x+y)/2;\n        if (mid%2 == 0) {\n    \
    \        ans = mid;\n            break;\n        }\n        if (mid%2 == 1) {\n\
    \            y = mid;\n        } else {\n            x = mid;\n        }\n   \
    \ }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpa44ttxay: /tmp/tmpa44ttxay.cpp:32: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098696
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // Write your code here\n \
    \   long ans = -1;\n    long mid = (x + y) / 2;\n    if (mid % 2 == 0) {\n   \
    \     ans = mid;\n    } else {\n        if (x > mid) {\n            ans = choose_num(mid,\
    \ y);\n        } else {\n            ans = choose_num(x, mid);\n        }\n  \
    \  }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n   \
    \ assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12)) ==\
    \ (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmplfu4fpz_: /tmp/tmplfu4fpz_.cpp:26: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098695
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long mid = (x + y) / 2;\n        if (mid % 2 == 0) {\n       \
    \     ans = mid;\n        } else {\n            ans = choose_num(mid, y);\n  \
    \      }\n    } else {\n        long mid = (x + y) / 2;\n        if (mid % 2 ==\
    \ 0) {\n            ans = mid;\n        } else {\n            ans = choose_num(x,\
    \ mid);\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpn6j2ysnw: /tmp/tmpn6j2ysnw.cpp:30: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098693
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ while (x <= y) {\n        if (x % 2 == 0) {\n            ans = x;\n        \
    \    break;\n        }\n        x += 2;\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpj6ilq62j: /tmp/tmpj6ilq62j.cpp:27: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098695
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if (x >= y) {\n        return\
    \ -1;\n    }\n    long mid = (x + y) / 2;\n    if (mid % 2 == 0) {\n        return\
    \ mid;\n    }\n    return choose_num(mid, y);\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpl2q8qqt2: /tmp/tmpl2q8qqt2.cpp:23: int main(): Assertion `candidate((33),
    (12354)) == (12354)'' failed.

    '
  stdout: ''
  timestamp: 1660098693
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ long mid = (x + y) / 2;\n    while (x <= y) {\n        if (mid % 2 == 0) {\n\
    \            ans = mid;\n            break;\n        }\n        mid = (x + y)\
    \ / 2;\n        x++;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpvo6b1rwq: /tmp/tmpvo6b1rwq.cpp:30: int main(): Assertion `candidate((13),
    (12)) == (-1)'' failed.

    '
  stdout: ''
  timestamp: 1660098696
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long mid = (x + y) / 2;\n        long a = choose_num(x, mid);\n\
    \        long b = choose_num(mid, y);\n        if ((a >= 0) && (b >= 0)) {\n \
    \           ans = a > b ? a : b;\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp3wds2d28: /tmp/tmp3wds2d28.cpp:23: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098696
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    long mid\
    \ = (x + y) / 2;\n    if (x <= mid) {\n        ans = x;\n    } else if (y <= mid)\
    \ {\n        ans = y;\n    } else {\n        ans = mid;\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp0n8ed5gp: /tmp/tmp0n8ed5gp.cpp:23: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098693
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long mid = x + (y - x) / 2;\n        if (mid > 0 && mid < y) {\n\
    \            ans = mid;\n        }\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpxxu0zkyo: /tmp/tmpxxu0zkyo.cpp:21: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098696
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long mid = x + (y - x) / 2;\n        ans = choose_num(mid, y);\n\
    \        if (ans == -1) {\n            ans = mid;\n        }\n    } else {\n \
    \       long mid = y + (x - y) / 2;\n        ans = choose_num(x, mid);\n     \
    \   if (ans == -1) {\n            ans = mid;\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660098693
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // Write your code here\n \
    \   long ans = -1;\n    long m = 1;\n    long n = y;\n    long d = 1;\n    while\
    \ (m <= n) {\n        if (m % 2 == 0) {\n            ans = m;\n            break;\n\
    \        }\n        m += d;\n        d *= 2;\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpo263d6ag: /tmp/tmpo263d6ag.cpp:27: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098696
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // Write your code here\n \
    \   long ans = -1;\n    long mid = (x + y) / 2;\n    long sum = 0;\n    long even\
    \ = 1;\n    long odd = 0;\n    while (x <= y) {\n        if (mid % 2 == 0) {\n\
    \            sum += mid;\n            even++;\n        } else {\n            sum\
    \ += mid * 2;\n            odd++;\n        }\n        mid = (x + y) / 2;\n   \
    \ }\n    if (sum % 2 == 0) {\n        ans = sum / 2;\n    } else {\n        ans\
    \ = sum / 2;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660098701
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ if (x == 0 || y == 0) {\n        return -1;\n    }\n    long mid = (x + y) /\
    \ 2;\n    if (mid % 2 == 0) {\n        ans = mid;\n    } else {\n        ans =\
    \ choose_num(mid, y);\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmprzwyrm7t: /tmp/tmprzwyrm7t.cpp:30: int main(): Assertion `candidate((13),
    (12)) == (-1)'' failed.

    '
  stdout: ''
  timestamp: 1660098696
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ while (x+1 < y) {\n        long mid = (x+y)/2;\n        if (mid%2 == 0) {\n\
    \            ans = mid;\n            x = mid+1;\n        } else {\n          \
    \  y = mid;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpzlyxcrwb: /tmp/tmpzlyxcrwb.cpp:29: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098696
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ long mid = (x + y) / 2;\n    while (x <= y) {\n        if (mid % 2 == 0) {\n\
    \            ans = mid;\n            break;\n        }\n        mid = (mid + y)\
    \ / 2;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpe16jq8bc: /tmp/tmpe16jq8bc.cpp:29: int main(): Assertion `candidate((13),
    (12)) == (-1)'' failed.

    '
  stdout: ''
  timestamp: 1660098696
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    long m\
    \ = 1;\n    long n = y;\n    while (m <= n) {\n        if (x % m == 0 && y % n\
    \ == 0) {\n            ans = m;\n            break;\n        }\n        m += 2;\n\
    \        n -= 2;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp7k6q7ddr: /tmp/tmp7k6q7ddr.cpp:25: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098696
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // Write your code here\n \
    \   long ans = -1;\n    if (x >= y) {\n        long temp = x;\n        x = y;\n\
    \        y = temp;\n    }\n    while (x <= y) {\n        if (x % 2 == 0) {\n \
    \           ans = x;\n            break;\n        }\n        x++;\n    }\n   \
    \ return ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpywra7mz1: /tmp/tmpywra7mz1.cpp:28: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098698
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    long mid\
    \ = (x + y) / 2;\n    if (x <= mid) {\n        ans = x;\n    } else if (mid <=\
    \ y) {\n        ans = mid;\n    } else {\n        ans = y;\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpen7judt6: /tmp/tmpen7judt6.cpp:23: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098693
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long mid = x + (y - x) / 2;\n        long lcm = x * y;\n     \
    \   while (true) {\n            long temp = mid;\n            mid = lcm / temp;\n\
    \            lcm = temp;\n            if (mid > ans) {\n                ans =\
    \ mid;\n            }\n            if (mid == x || mid == y) {\n             \
    \   break;\n            }\n        }\n    } else {\n        long mid = y + (x\
    \ - y) / 2;\n        long lcm = y * x;\n        while (true) {\n            long\
    \ temp = mid;\n            mid = lcm / temp;\n            lcm = temp;\n      \
    \      if (mid > ans) {\n                ans = mid;\n            }\n         \
    \   if (mid == x || mid == y) {\n                break;\n            }\n     \
    \   }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpyeb5wdua: /tmp/tmpyeb5wdua.cpp:44: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098698
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ while (x+1 < y) {\n        if ((x % 2) == 0) {\n            ans = x;\n     \
    \       break;\n        }\n        ans = x+1;\n        x++;\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpucm_bv9c: /tmp/tmpucm_bv9c.cpp:28: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098698
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ while (x<y) {\n        long mid = (x + y)/2;\n        if (mid % 2 == 0) {\n\
    \            ans = mid;\n            x = mid + 1;\n        } else {\n        \
    \    y = mid;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp_ofycpfa: /tmp/tmp_ofycpfa.cpp:29: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098698
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if (x > y) {\n        long\
    \ temp = x;\n        x = y;\n        y = temp;\n    }\n    long ans = -1;\n  \
    \  long limit = y;\n    while (x <= limit) {\n        if ((x % 2) == 0) {\n  \
    \          ans = x;\n            break;\n        }\n        ++x;\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpnf8pa2ec: /tmp/tmpnf8pa2ec.cpp:28: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098698
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ while (x+1 < y) {\n        if (x%2 == 0) {\n            ans = x;\n         \
    \   break;\n        }\n        x++;\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpeoxc7yfm: /tmp/tmpeoxc7yfm.cpp:27: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098693
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ while (x+1 < y) {\n        if (x%2 == 0) {\n            ans = x;\n         \
    \   break;\n        }\n        x++;\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpeoxc7yfm: /tmp/tmpeoxc7yfm.cpp:27: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098693
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ while (x % 2 == 0 && y % 2 == 0) {\n        long temp = x;\n        x = y;\n\
    \        y = temp;\n    }\n    if (x % 2 == 0 && y % 2 == 0) {\n        ans =\
    \ x;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpc7dorrgc: /tmp/tmpc7dorrgc.cpp:28: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098698
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ while (y) {\n        if (y & 1) {\n            ans = y;\n            break;\n\
    \        }\n        y >>= 1;\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpb2ksa6p6: /tmp/tmpb2ksa6p6.cpp:27: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098698
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long mid = x + (y - x) / 2;\n        if (mid % 2 == 0) {\n   \
    \         ans = mid;\n        }\n        else {\n            ans = choose_num(mid,\
    \ y);\n        }\n    }\n    else {\n        long mid = y + (x - y) / 2;\n   \
    \     if (mid % 2 == 0) {\n            ans = mid;\n        }\n        else {\n\
    \            ans = choose_num(x, mid);\n        }\n    }\n    return ans;\n}\n\
    int main() {\n    auto candidate = choose_num;\n    assert(candidate((12), (15))\
    \ == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660098695
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // Write your code here\n \
    \   long ans = -1;\n    long mid = (x + y) / 2;\n    if (mid % 2 == 0) {\n   \
    \     ans = mid;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpl9wu2y5f: /tmp/tmpl9wu2y5f.cpp:20: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098696
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ while (x+1 < y) {\n        long mid = (x+y)/2;\n        if (mid%2 == 0) {\n\
    \            ans = mid;\n            x = mid+1;\n        } else {\n          \
    \  y = mid;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpzlyxcrwb: /tmp/tmpzlyxcrwb.cpp:29: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098696
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // Write your code here\n \
    \   long ans = -1;\n    long mid = (x + y) / 2;\n    if (x <= mid) {\n       \
    \ ans = x;\n    } else if (mid <= y) {\n        ans = mid;\n    } else {\n   \
    \     ans = y;\n    }\n    return ans;\n}\nint main() {\n    auto candidate =\
    \ choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpv0a5zxmm: /tmp/tmpv0a5zxmm.cpp:24: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098698
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ long mid = (x + y) / 2;\n    if (mid % 2 == 0) {\n        ans = mid;\n    }\
    \ else {\n        ans = choose_num(mid, y);\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpw05ck51a: /tmp/tmpw05ck51a.cpp:27: int main(): Assertion `candidate((13),
    (12)) == (-1)'' failed.

    '
  stdout: ''
  timestamp: 1660098693
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ long mid = (x + y) / 2;\n    while (x != mid && y != mid && mid % 2 == 0) {\n\
    \        if (x <= mid) {\n            x = mid + 1;\n        } else {\n       \
    \     y = mid - 1;\n        }\n        mid = (x + y) / 2;\n    }\n    if (x ==\
    \ mid) {\n        ans = mid;\n    } else if (y == mid) {\n        ans = mid;\n\
    \    } else {\n        ans = -1;\n    }\n    return ans;\n}\nint main() {\n  \
    \  auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp_bij7uvo: /tmp/tmp_bij7uvo.cpp:36: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098698
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ while (x<y) {\n        long mid = (x + y) / 2;\n        if (mid % 2 == 0) {\n\
    \            ans = mid;\n            x = mid + 1;\n        } else {\n        \
    \    y = mid;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpy2r6fmvu: /tmp/tmpy2r6fmvu.cpp:29: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098698
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // Write your code here\n \
    \   long ans = -1;\n    long mid = (x + y) / 2;\n    if (mid % 2 == 0) {\n   \
    \     ans = mid;\n    } else {\n        if (x <= mid) {\n            ans = mid;\n\
    \        } else {\n            ans = mid;\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpcwldasba: /tmp/tmpcwldasba.cpp:26: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098698
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    long mid\
    \ = (x + y) / 2;\n    if (x <= mid) {\n        ans = x;\n    } else if (y <= mid)\
    \ {\n        ans = y;\n    } else {\n        ans = mid;\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp0n8ed5gp: /tmp/tmp0n8ed5gp.cpp:23: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098693
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long mid = x + (y - x) / 2;\n        ans = choose_num(mid, y);\n\
    \        if (ans == -1) {\n            ans = mid;\n        }\n    } else {\n \
    \       long mid = y + (x - y) / 2;\n        ans = choose_num(x, mid);\n     \
    \   if (ans == -1) {\n            ans = mid;\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660098693
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ long mid = (x + y) / 2;\n    while (x != mid && y != mid) {\n        if (x %\
    \ 2 == 0 && y % 2 == 0) {\n            ans = mid;\n            break;\n      \
    \  }\n        if (x % 2 == 0) {\n            y = mid - 1;\n        } else {\n\
    \            x = mid + 1;\n        }\n        mid = (x + y) / 2;\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpoflyh9c7: /tmp/tmpoflyh9c7.cpp:33: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098698
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ long mid = (x + y) / 2;\n    while (x <= y) {\n        if (mid % 2 == 0) {\n\
    \            ans = mid;\n            break;\n        }\n        mid = (mid + y)\
    \ / 2;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpmpruhbsk: /tmp/tmpmpruhbsk.cpp:29: int main(): Assertion `candidate((13),
    (12)) == (-1)'' failed.

    '
  stdout: ''
  timestamp: 1660098693
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long mid = x + (y - x) / 2;\n        ans = choose_num(mid, y);\n\
    \        if (ans == -1) {\n            ans = mid;\n        }\n    } else {\n \
    \       long mid = y + (x - y) / 2;\n        ans = choose_num(x, mid);\n     \
    \   if (ans == -1) {\n            ans = mid;\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660098693
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    assert(x >= 0 && y >= 0);\n\
    \    long ans = -1;\n    long mid = (x + y) / 2;\n    if (mid % 2 == 0) {\n  \
    \      ans = mid;\n    } else {\n        if (x <= mid) {\n            ans = mid;\n\
    \        } else {\n            ans = mid;\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpsi7qrmah: /tmp/tmpsi7qrmah.cpp:26: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098697
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    assert(x >= 0 && y >= 0);\n\
    \    long ans = -1;\n    if (x > y) {\n        long temp = x;\n        x = y;\n\
    \        y = temp;\n    }\n    long mid = x + (y - x) / 2;\n    while (x <= y)\
    \ {\n        if (mid % 2 == 0) {\n            ans = mid;\n            break;\n\
    \        }\n        mid++;\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpfpl6sege: /tmp/tmpfpl6sege.cpp:30: int main(): Assertion `candidate((13),
    (12)) == (-1)'' failed.

    '
  stdout: ''
  timestamp: 1660098698
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ while (x+1 < y) {\n        long mid = (x+y)/2;\n        if (mid % 2 == 0) {\n\
    \            ans = mid;\n            x = mid;\n        } else {\n            y\
    \ = mid;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpkmn2cs1s: /tmp/tmpkmn2cs1s.cpp:29: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098693
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ while (x<y) {\n        long mid = (x+y)/2;\n        if (mid%2 == 0) {\n    \
    \        ans = mid;\n            x = mid+1;\n        }\n        else {\n     \
    \       y = mid;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpfqpnevr3: /tmp/tmpfqpnevr3.cpp:30: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098698
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if (x >= y) {\n        return\
    \ -1;\n    }\n    long mid = (x + y) / 2;\n    if (mid % 2 == 0) {\n        return\
    \ mid;\n    }\n    return choose_num(mid, y);\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpl2q8qqt2: /tmp/tmpl2q8qqt2.cpp:23: int main(): Assertion `candidate((33),
    (12354)) == (12354)'' failed.

    '
  stdout: ''
  timestamp: 1660098693
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ while (x+1 < y) {\n        if ((x % 2) == 0) {\n            ans = x;\n     \
    \       break;\n        }\n        ans = x + 1;\n        x++;\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp03az4d56: /tmp/tmp03az4d56.cpp:28: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098698
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ long mid = (x + y) / 2;\n    while (x <= y) {\n        if (mid % 2 == 0) {\n\
    \            ans = mid;\n            break;\n        }\n        mid = (mid + y)\
    \ / 2;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpe16jq8bc: /tmp/tmpe16jq8bc.cpp:29: int main(): Assertion `candidate((13),
    (12)) == (-1)'' failed.

    '
  stdout: ''
  timestamp: 1660098696
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ while (y) {\n        if (x % 2 == 0) {\n            ans = y;\n            break;\n\
    \        }\n        y /= 2;\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpjctt4y38: /tmp/tmpjctt4y38.cpp:27: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098698
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ long mid = (x + y) / 2;\n    while (x <= y) {\n        if (mid % 2 == 0) {\n\
    \            ans = mid;\n            break;\n        }\n        mid = (mid + y)\
    \ / 2;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpmpruhbsk: /tmp/tmpmpruhbsk.cpp:29: int main(): Assertion `candidate((13),
    (12)) == (-1)'' failed.

    '
  stdout: ''
  timestamp: 1660098693
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ while (x+1 < y) {\n        long mid = (x+y)/2;\n        if (mid % 2 == 0) {\n\
    \            ans = mid;\n            x = mid+1;\n        } else {\n          \
    \  y = mid;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpijmon9m_: /tmp/tmpijmon9m_.cpp:29: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098693
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if (x >= y) {\n        return\
    \ -1;\n    }\n    long mid = (x + y) / 2;\n    if (mid % 2 == 0) {\n        return\
    \ mid;\n    }\n    return choose_num(mid, y);\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpl2q8qqt2: /tmp/tmpl2q8qqt2.cpp:23: int main(): Assertion `candidate((33),
    (12354)) == (12354)'' failed.

    '
  stdout: ''
  timestamp: 1660098693
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // Write your code here\n \
    \   long ans = -1;\n    long mid = (x + y) / 2;\n    long left_num = x;\n    long\
    \ right_num = y;\n    while (left_num < mid) {\n        left_num += y;\n    }\n\
    \    while (right_num > mid) {\n        right_num -= y;\n    }\n    if (left_num\
    \ == mid) {\n        ans = mid;\n    } else if (right_num == mid) {\n        ans\
    \ = mid;\n    } else {\n        ans = left_num;\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = choose_num;\n    assert(candidate((12), (15))\
    \ == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpj4e6ne8d: /tmp/tmpj4e6ne8d.cpp:32: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098698
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if (x > y) {\n        long\
    \ temp = x;\n        x = y;\n        y = temp;\n    }\n    long mid = (x + y)\
    \ / 2;\n    long ans = mid;\n    while (ans % 2 == 0) {\n        mid = (x + y)\
    \ / 2;\n        ans = mid;\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpcgc_nrgm: /tmp/tmpcgc_nrgm.cpp:25: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098698
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    long mid\
    \ = (x + y) / 2;\n    if (x <= y) {\n        if (mid % 2 == 0) {\n           \
    \ ans = mid;\n        } else {\n            ans = choose_num(x, mid);\n      \
    \  }\n    } else {\n        if (mid % 2 == 0) {\n            ans = mid;\n    \
    \    } else {\n            ans = choose_num(mid, y);\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp_wr9vd4c: /tmp/tmp_wr9vd4c.cpp:29: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098698
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ while (x<y) {\n        if (x%2 == 0) {\n            ans = x;\n            break;\n\
    \        }\n        x++;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpl76z2zja: /tmp/tmpl76z2zja.cpp:27: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098696
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >\
    \ y) {\n        swap(x, y);\n    }\n    while (x != y) {\n        long mid = (x\
    \ + y) / 2;\n        if (mid % 2 == 0) {\n            ans = mid;\n           \
    \ break;\n        }\n        if (mid > y) {\n            y = mid;\n        } else\
    \ {\n            x = mid;\n        }\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpaph1_u1h.cpp: In function \u2018long int choose_num(long int, long\
    \ int)\u2019:\n/tmp/tmpaph1_u1h.cpp:12:9: error: \u2018swap\u2019 was not declared\
    \ in this scope\n   12 |         swap(x, y);\n      |         ^~~~\n/tmp/tmpaph1_u1h.cpp:12:9:\
    \ note: suggested alternatives:\nIn file included from /usr/include/c++/9/regex:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpaph1_u1h.cpp:2:\n/usr/include/c++/9/bits/regex.h:2029:5:\
    \ note:   \u2018std::__cxx11::swap\u2019\n 2029 |     swap(match_results<_Bi_iter,\
    \ _Alloc>& __lhs,\n      |     ^~~~\nIn file included from /usr/include/c++/9/bits/stl_pair.h:59,\n\
    \                 from /usr/include/c++/9/bits/stl_algobase.h:64,\n          \
    \       from /usr/include/c++/9/bits/specfun.h:45,\n                 from /usr/include/c++/9/cmath:1927,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpaph1_u1h.cpp:2:\n/usr/include/c++/9/bits/move.h:182:5:\
    \ note:   \u2018std::swap\u2019\n  182 |     swap(_Tp& __a, _Tp& __b)\n      |\
    \     ^~~~\n/usr/include/c++/9/bits/move.h:182:5: note:   \u2018std::swap\u2019\
    \nIn file included from /usr/include/c++/9/exception:143,\n                 from\
    \ /usr/include/c++/9/ios:39,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpaph1_u1h.cpp:2:\n/usr/include/c++/9/bits/exception_ptr.h:166:5: note:\
    \   \u2018std::__exception_ptr::swap\u2019\n  166 |     swap(exception_ptr& __lhs,\
    \ exception_ptr& __rhs)\n      |     ^~~~\nIn file included from /usr/include/c++/9/filesystem:37,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:129,\n\
    \                 from /tmp/tmpaph1_u1h.cpp:2:\n/usr/include/c++/9/bits/fs_path.h:611:15:\
    \ note:   \u2018std::filesystem::__cxx11::swap\u2019\n  611 |   inline void swap(path&\
    \ __lhs, path& __rhs) "
  stdout: ''
  timestamp: 1660098698
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // Write your code here\n \
    \   long ans = -1;\n    if (x >= y) {\n        long mid = x + (y - x) / 2;\n \
    \       long mid2 = mid + (mid - x) / 2;\n        if (mid2 % 2 == 0) {\n     \
    \       ans = mid;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpd7op3gb8: /tmp/tmpd7op3gb8.cpp:23: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098698
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ while (x<y) {\n        long mid = (x+y)/2;\n        if (mid%2 == 0) {\n    \
    \        ans = mid;\n            break;\n        }\n        if (mid%2 == 1) {\n\
    \            y = mid;\n        }\n        else {\n            x = mid;\n     \
    \   }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpe3qi4rwi: /tmp/tmpe3qi4rwi.cpp:33: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098693
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ long mid = (x + y) / 2;\n    if (mid % 2 == 0) {\n        ans = mid;\n    }\
    \ else {\n        if (mid < x || mid > y) {\n            ans = mid;\n        }\
    \ else {\n            ans = choose_num(x, mid);\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpiqta8cpg: /tmp/tmpiqta8cpg.cpp:30: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098698
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // Write your code here\n \
    \   long ans = -1;\n    long mid = (x + y) / 2;\n    if (mid % 2 == 0) {\n   \
    \     ans = mid;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpl9wu2y5f: /tmp/tmpl9wu2y5f.cpp:20: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098696
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ while (x < y) {\n        long mid = (x + y) / 2;\n        if (mid % 2 == 0)\
    \ {\n            ans = mid;\n            x = mid + 1;\n        } else {\n    \
    \        y = mid;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpr4p7dr7o: /tmp/tmpr4p7dr7o.cpp:29: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098698
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ while (y) {\n        long mid = (x + y) / 2;\n        if (mid * mid <= y) {\n\
    \            x = mid;\n        } else {\n            y = mid;\n        }\n   \
    \ }\n    if (x == y) {\n        ans = x;\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660098703
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ long mid = (x + y) / 2;\n    while (x != mid && y != mid) {\n        if (x %\
    \ 2 == 0 && y % 2 == 0) {\n            ans = mid;\n            break;\n      \
    \  } else if (x % 2 == 0 && y % 2 != 0) {\n            y = mid - 1;\n        }\
    \ else if (x % 2 != 0 && y % 2 == 0) {\n            x = mid + 1;\n        } else\
    \ {\n            x = mid + 1;\n            y = mid - 1;\n        }\n        mid\
    \ = (x + y) / 2;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpv08g1c15: /tmp/tmpv08g1c15.cpp:35: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098698
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    long mid\
    \ = (x + y) / 2;\n    if (x <= y) {\n        while (x <= y) {\n            if\
    \ (x % 2 == 0) {\n                ans = x;\n                break;\n         \
    \   }\n            x = x + 1;\n        }\n    } else {\n        while (y <= x)\
    \ {\n            if (y % 2 == 0) {\n                ans = y;\n               \
    \ break;\n            }\n            y = y + 1;\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpwjlsnznz: /tmp/tmpwjlsnznz.cpp:33: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098698
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // Write your code here\n \
    \   long ans = -1;\n    long m = 1;\n    long n = y;\n    long k = 0;\n    long\
    \ temp;\n    while(m <= n) {\n        temp = m;\n        m = n + k;\n        n\
    \ = temp;\n        k++;\n    }\n    while(m > n) {\n        temp = m;\n      \
    \  m = n - k;\n        n = temp;\n        k--;\n    }\n    while(m % 2 == 0) {\n\
    \        temp = m;\n        m = m + k;\n        n = temp;\n        k++;\n    }\n\
    \    while(n % 2 == 0) {\n        temp = n;\n        n = n - k;\n        m = temp;\n\
    \        k--;\n    }\n    if(m > n) {\n        ans = m;\n    }\n    else {\n \
    \       ans = n;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpjpo1chki: /tmp/tmpjpo1chki.cpp:50: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098698
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ while (x+1 < y) {\n        long mid = x + (y - x) / 2;\n        if (mid % 2\
    \ == 0) {\n            ans = mid;\n            x = mid;\n        } else {\n  \
    \          y = mid;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp8l79zot9: /tmp/tmp8l79zot9.cpp:29: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098698
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ while (x+1 < y) {\n        long mid = (x+y)/2;\n        if (mid%2 == 0) {\n\
    \            ans = mid;\n            x = mid+1;\n        } else {\n          \
    \  y = mid;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpel1rc2ec: /tmp/tmpel1rc2ec.cpp:29: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098696
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    assert(x >= 0 && y >= 0);\n\
    \    if (x < y) {\n        long temp = x;\n        x = y;\n        y = temp;\n\
    \    }\n    long ans = -1;\n    long max_num = x;\n    long min_num = y;\n   \
    \ while (max_num < y) {\n        max_num += max_num;\n        min_num += min_num;\n\
    \    }\n    while (max_num >= y) {\n        ans = max_num;\n        max_num -=\
    \ max_num;\n        min_num -= min_num;\n    }\n    while (min_num >= x) {\n \
    \       ans = min_num;\n        min_num -= min_num;\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmprpe6tzbj: /tmp/tmprpe6tzbj.cpp:36: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098698
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long mid = x + (y - x) / 2;\n        ans = choose_num(mid, y);\n\
    \        if (ans == -1) {\n            ans = mid;\n        }\n    } else {\n \
    \       long mid = y + (x - y) / 2;\n        ans = choose_num(x, mid);\n     \
    \   if (ans == -1) {\n            ans = mid;\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660098693
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long mid = (x + y) / 2;\n        if (mid % 2 == 0) {\n       \
    \     ans = mid;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpbq1k09s7: /tmp/tmpbq1k09s7.cpp:21: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098693
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long mid = x + (y - x) / 2;\n        ans = choose_num(mid, y);\n\
    \        if (ans == -1) {\n            ans = mid;\n        }\n    } else {\n \
    \       long mid = y + (x - y) / 2;\n        ans = choose_num(x, mid);\n     \
    \   if (ans == -1) {\n            ans = mid;\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660098693
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // Write your code here\n \
    \   long ans = -1;\n    if (x >= y) {\n        long temp = x;\n        x = y;\n\
    \        y = temp;\n    }\n    while (x<y) {\n        long mid = (x+y)/2;\n  \
    \      if (mid%2 == 0) {\n            ans = mid;\n            break;\n       \
    \ }\n        if (mid%2 != 0) {\n            x = mid;\n        } else {\n     \
    \       y = mid;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpqzuj87yz: /tmp/tmpqzuj87yz.cpp:34: int main(): Assertion `candidate((13),
    (12)) == (-1)'' failed.

    '
  stdout: ''
  timestamp: 1660098698
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    long mid\
    \ = (x + y) / 2;\n    if (x <= mid) {\n        ans = x;\n    } else if (mid <=\
    \ y) {\n        ans = mid;\n    } else {\n        ans = y;\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpen7judt6: /tmp/tmpen7judt6.cpp:23: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098693
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ if (x % 2 == 0) {\n        long temp1 = x;\n        x = y;\n        y = temp1;\n\
    \    }\n    while (x != 0) {\n        long temp2 = x;\n        x = y % x;\n  \
    \      y = temp2;\n    }\n    if (y % 2 == 0) {\n        ans = y;\n    }\n   \
    \ return ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp4s_5omal: /tmp/tmp4s_5omal.cpp:33: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098698
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    assert(x >= 0 && y >= 0);\n\
    \    long ans = -1;\n    long mid = (x + y) / 2;\n    long left = mid - 1;\n \
    \   long right = mid;\n    while (left >= 0 && right < y) {\n        if (left\
    \ % 2 == 0 && right % 2 == 0) {\n            ans = mid;\n            break;\n\
    \        }\n        if (left % 2 == 0) {\n            ans = left;\n          \
    \  break;\n        }\n        if (right % 2 == 0) {\n            ans = right;\n\
    \            break;\n        }\n        left--;\n        right++;\n    }\n   \
    \ return ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp1c3ydhwp: /tmp/tmp1c3ydhwp.cpp:35: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098698
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // Write your code here\n \
    \   long ans = -1;\n    long mid = (x + y) / 2;\n    if (x <= mid) {\n       \
    \ ans = x;\n    } else if (y <= mid) {\n        ans = y;\n    } else {\n     \
    \   ans = mid;\n    }\n    return ans;\n}\nint main() {\n    auto candidate =\
    \ choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpgk41oje8: /tmp/tmpgk41oje8.cpp:24: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098698
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ while (x <= y) {\n        if (x % 2 == 0) {\n            ans = x;\n        \
    \    break;\n        }\n        x += 2;\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpj6ilq62j: /tmp/tmpj6ilq62j.cpp:27: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098695
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // Write your code here\n \
    \   long ans = -1;\n    long mid = (x + y) / 2;\n    if (mid % 2 == 0) {\n   \
    \     ans = mid;\n    } else {\n        if (mid < x && mid > y) {\n          \
    \  ans = mid;\n        } else if (mid > x && mid < y) {\n            ans = mid;\n\
    \        } else {\n            ans = -1;\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpgxvdkt4h: /tmp/tmpgxvdkt4h.cpp:28: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098699
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if (x >= y) {\n        return\
    \ -1;\n    }\n    long mid = (x + y) / 2;\n    if (mid % 2 == 0) {\n        return\
    \ mid;\n    }\n    return choose_num(mid, y);\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpl2q8qqt2: /tmp/tmpl2q8qqt2.cpp:23: int main(): Assertion `candidate((33),
    (12354)) == (12354)'' failed.

    '
  stdout: ''
  timestamp: 1660098693
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ long mid = (x + y) / 2;\n    while (x <= y) {\n        if (mid % 2 == 0) {\n\
    \            ans = mid;\n            break;\n        }\n        mid = (mid + y)\
    \ / 2;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpmpruhbsk: /tmp/tmpmpruhbsk.cpp:29: int main(): Assertion `candidate((13),
    (12)) == (-1)'' failed.

    '
  stdout: ''
  timestamp: 1660098693
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ while (x<y) {\n        long mid = (x+y)/2;\n        if (mid%2 == 0) {\n    \
    \        ans = mid;\n            x = mid+1;\n        } else {\n            y =\
    \ mid;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpbo_y8qv9: /tmp/tmpbo_y8qv9.cpp:29: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098693
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ long mid = x + (y - x) / 2;\n    while (x <= y) {\n        if (mid % 2 == 0)\
    \ {\n            ans = mid;\n            break;\n        }\n        mid++;\n \
    \   }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n  \
    \  assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12)) ==\
    \ (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmprq2n88u7: /tmp/tmprq2n88u7.cpp:29: int main(): Assertion `candidate((13),
    (12)) == (-1)'' failed.

    '
  stdout: ''
  timestamp: 1660098699
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ long mid = (x + y) / 2;\n    while (x != mid) {\n        if (x % 2 == 0 && y\
    \ % 2 == 0) {\n            ans = mid;\n            break;\n        } else if (x\
    \ % 2 == 0 && y % 2 != 0) {\n            y = mid;\n        } else if (x % 2 !=\
    \ 0 && y % 2 == 0) {\n            x = mid;\n        } else {\n            mid\
    \ = (x + y) / 2;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660098703
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ while (x+1 < y) {\n        long mid = (x+y)/2;\n        if (mid % 2 == 0) {\n\
    \            ans = mid;\n            x = mid+1;\n        } else {\n          \
    \  y = mid;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpijmon9m_: /tmp/tmpijmon9m_.cpp:29: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098693
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // Write your code here\n \
    \   long ans = -1;\n    long mid = (x + y) / 2;\n    if (mid % 2 == 0) {\n   \
    \     ans = mid;\n    } else {\n        if (x <= mid) {\n            ans = mid;\n\
    \        } else if (y <= mid) {\n            ans = mid;\n        } else {\n  \
    \          ans = -1;\n        }\n    }\n    return ans;\n}\nint main() {\n   \
    \ auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n \
    \   assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp9zskvaz8: /tmp/tmp9zskvaz8.cpp:28: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098698
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ while (x<y) {\n        long mid = (x+y)/2;\n        if (mid%2 == 0) {\n    \
    \        ans = mid;\n            break;\n        }\n        if (mid%2 == 1) {\n\
    \            y = mid;\n        }\n        else {\n            x = mid;\n     \
    \   }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpe3qi4rwi: /tmp/tmpe3qi4rwi.cpp:33: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098693
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    assert(x >= 0 && y >= 0);\n\
    \    long ans = -1;\n    long x_even = x % 2 == 0;\n    long y_even = y % 2 ==\
    \ 0;\n    if (x_even && y_even) {\n        long x_odd = x % 2 == 1;\n        long\
    \ y_odd = y % 2 == 1;\n        if (x_odd && y_odd) {\n            long x_even\
    \ = x % 2 == 0;\n            long y_even = y % 2 == 0;\n            if (x_even\
    \ && y_even) {\n                long x_odd = x % 2 == 1;\n                long\
    \ y_odd = y % 2 == 1;\n                if (x_odd && y_odd) {\n               \
    \     long x_even = x % 2 == 0;\n                    long y_even = y % 2 == 0;\n\
    \                    if (x_even && y_even) {\n                        long x_odd\
    \ = x % 2 == 1;\n                        long y_odd = y % 2 == 1;\n          \
    \              if (x_odd && y_odd) {\n                            long x_even\
    \ = x % 2 == 0;\n                            long y_even = y % 2 == 0;\n     \
    \                       if (x_even && y_even) {\n                            \
    \    long x_odd = x % 2 == 1;\n                                long y_odd = y\
    \ % 2 == 1;\n                                if (x_odd && y_odd) {\n         \
    \                           long x_even = x % 2 == 0;\n                      \
    \              long y_even = y % 2 == 0;\n                                   \
    \ if (x_even && y_even) {\n                                        long x_odd\
    \ = x % 2 == 1;\n                                        long y_odd = y % 2 ==\
    \ 1;\n                                        if (x_odd && y_odd) {\n        \
    \                                    long x_even = x % 2 == 0;\n             \
    \                               long y_even = y % 2 == 0;\n                  \
    \                          if (x_even && y_even) {\n                         \
    \                       long x_odd = x % 2 == 1;\n                           \
    \                     long y_odd = y % 2 == 1;\n                             \
    \                   if (x_odd && y_odd) {\n                                  \
    \                  long x_even = x % 2 == 0;\n                               \
    \                     long y_even = y % 2 == 0;\n                            \
    \                        if (x_even && y_even) {\n                           \
    \                             long x_odd = x % 2 == 1;\n                     \
    \                                   long y_odd = y % 2 == 1;\n               \
    \                                         if (x_odd && y_odd) {\n            \
    \                                                long x_even = x % 2 == 0;\n \
    \                                                           long y_even = y %\
    \ 2 == 0;\n                                                            if (x_even\
    \ && y_even) {\n                                                             \
    \   long x_odd = x % 2 == 1;\n                                               \
    \                 long y_odd = y % 2 == 1;\n                                 \
    \                               if (x_odd && y_odd) {\n                      \
    \                                              long x_even = x % 2 == 0;\n   \
    \                                                                 long y_even\
    \ = y % 2 == 0;\n                                                            \
    \        if (x_even && y_even) {\n                                           \
    \                             long x_odd = x % 2 == \n}\nint main() {\n    auto\
    \ candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjy13c23h.cpp: In function \u2018long int choose_num(long int, long\
    \ int)\u2019:\n/tmp/tmpjy13c23h.cpp:64:1: error: expected primary-expression before\
    \ \u2018}\u2019 token\n   64 | }\n      | ^\n/tmp/tmpjy13c23h.cpp:65:12: error:\
    \ a function-definition is not allowed here before \u2018{\u2019 token\n   65\
    \ | int main() {\n      |            ^\n/tmp/tmpjy13c23h.cpp:75:1: error: expected\
    \ \u2018}\u2019 at end of input\n   75 | }\n      | ^\n/tmp/tmpjy13c23h.cpp:59:85:\
    \ note: to match this \u2018{\u2019\n   59 |                                 \
    \                                if (x_odd && y_odd) {\n      |              \
    \                                                                       ^\n/tmp/tmpjy13c23h.cpp:75:1:\
    \ error: expected \u2018}\u2019 at end of input\n   75 | }\n      | ^\n/tmp/tmpjy13c23h.cpp:56:83:\
    \ note: to match this \u2018{\u2019\n   56 |                                 \
    \                            if (x_even && y_even) {\n      |                \
    \                                                                   ^\n/tmp/tmpjy13c23h.cpp:75:1:\
    \ error: expected \u2018}\u2019 at end of input\n   75 | }\n      | ^\n/tmp/tmpjy13c23h.cpp:53:77:\
    \ note: to match this \u2018{\u2019\n   53 |                                 \
    \                        if (x_odd && y_odd) {\n      |                      \
    \                                                       ^\n/tmp/tmpjy13c23h.cpp:75:1:\
    \ error: expected \u2018}\u2019 at end of input\n   75 | }\n      | ^\n/tmp/tmpjy13c23h.cpp:50:75:\
    \ note: to match this \u2018{\u2019\n   50 |                                 \
    \                    if (x_even && y_even) {\n      |                        \
    \                                                   ^\n/tmp/tmpjy13c23h.cpp:75:1:\
    \ error: expected \u2018}\u2019 at end of input\n   75 | }\n      | ^\n/tmp/tmpjy13c23h.cpp:47:69:\
    \ note: to match this \u2018{\u2019\n   47 |                                 \
    \                if (x_odd && y_odd) {\n      |                              \
    \                                       ^\n/tmp/tmpjy13c23h.cpp:75:1: error: expected\
    \ \u2018}\u2019 at end of input\n   75 | }\n      | ^\n/tmp/tmpjy13c23h.cpp:44:67:\
    \ note: to match this \u2018{"
  stdout: ''
  timestamp: 1660098698
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long mid = (x + y) / 2;\n        if (mid % 2 == 0) {\n       \
    \     ans = mid;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpbq1k09s7: /tmp/tmpbq1k09s7.cpp:21: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098693
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    long temp;\n\
    \    while (x <= y) {\n        temp = x;\n        x = y;\n        y = temp;\n\
    \    }\n    while (x % 2 == 0) {\n        x /= 2;\n    }\n    while (y % 2 ==\
    \ 0) {\n        y /= 2;\n    }\n    if (x == y) {\n        ans = x;\n    }\n \
    \   return ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpx544mahs: /tmp/tmpx544mahs.cpp:30: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098699
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    if (x >= y) {\n        return\
    \ -1;\n    }\n    long mid = (x + y) / 2;\n    if (mid % 2 == 0) {\n        return\
    \ mid;\n    }\n    return choose_num(mid, y);\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpl2q8qqt2: /tmp/tmpl2q8qqt2.cpp:23: int main(): Assertion `candidate((33),
    (12354)) == (12354)'' failed.

    '
  stdout: ''
  timestamp: 1660098693
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    // Write your code here\n \
    \   long ans = -1;\n    long mid = (x + y) / 2;\n    if (mid % 2 == 0) {\n   \
    \     ans = mid;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpl9wu2y5f: /tmp/tmpl9wu2y5f.cpp:20: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098696
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\n// choose_num(12, 15) = 14\n// choose_num(13,\
    \ 12) = -1\nlong choose_num(long x, long y) {\n    long ans = -1;\n    if (x >=\
    \ y) {\n        long mid = (x + y) / 2;\n        if (mid % 2 == 0) {\n       \
    \     ans = mid;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpbq1k09s7: /tmp/tmpbq1k09s7.cpp:21: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098693
