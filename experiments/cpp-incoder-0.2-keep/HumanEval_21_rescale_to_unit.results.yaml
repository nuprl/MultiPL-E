name: HumanEval_21_rescale_to_unit
language: cpp
results:
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    for (float number : numbers) {\n        rescaled_numbers.push_back(number);\n\
    \        rescaled_numbers.push_back(number);\n    }\n    return rescaled_numbers;\n\
    }\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "tmpkws_9zx8: /tmp/tmpkws_9zx8.cpp:19: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number);\n        rescaled_numbers.push_back(number);\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: "tmpc87rjc1r: /tmp/tmpc87rjc1r.cpp:18: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (auto\
    \ number : numbers) {\n        rescaled_numbers.push_back(number / numbers.back());\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: "tmp5l20d9c7: /tmp/tmp5l20d9c7.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number);\n        rescaled_numbers.push_back(number);\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: "tmpgabk6xz_: /tmp/tmpgabk6xz_.cpp:18: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(std::min(std::max(number,\
    \ 0.0f), 1.0f));\n    }\n    return rescaled_numbers;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "tmplwophdhl: /tmp/tmplwophdhl.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number / numbers.size());\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: "tmptogil2de: /tmp/tmptogil2de.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(std::min(std::max(number,\
    \ 0.0f), 1.0f));\n    }\n    return rescaled_numbers;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "tmprqi4qgue: /tmp/tmprqi4qgue.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(std::min(std::max(number,\
    \ 0.0f), 1.0f));\n    }\n    return rescaled_numbers;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "tmpst4n8nlv: /tmp/tmpst4n8nlv.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ result;\n    float min = std::numeric_limits<float>::max();\n    float max =\
    \ std::numeric_limits<float>::min();\n    for (float number : numbers) {\n   \
    \     min = std::min(min, number);\n        max = std::max(max, number);\n   \
    \ }\n    for (float number : numbers) {\n        result.push_back(number * (max\
    \ - min) / numbers.size() + min);\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "tmpp6bb7syh: /tmp/tmpp6bb7syh.cpp:22: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> rescaled_numbers(numbers.size());\n    float\
    \ min_number = numbers[0];\n    float max_number = numbers[0];\n    for (size_t\
    \ i = 1; i < numbers.size(); ++i) {\n        min_number = std::min(min_number,\
    \ numbers[i]);\n        max_number = std::max(max_number, numbers[i]);\n    }\n\
    \    for (size_t i = 0; i < numbers.size(); ++i) {\n        rescaled_numbers[i]\
    \ = numbers[i] - min_number;\n        rescaled_numbers[i] /= (max_number - min_number);\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number);\n        rescaled_numbers.push_back(number);\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: "tmp0o7tzxuj: /tmp/tmp0o7tzxuj.cpp:18: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ > 1);\n    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    for (float number : numbers) {\n        rescaled_numbers.push_back(number\
    \ / numbers[0]);\n    }\n    return rescaled_numbers;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "tmpu6ecs34v: /tmp/tmpu6ecs34v.cpp:18: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> new_numbers;\n    new_numbers.reserve(numbers.size());\n\
    \    for (auto number : numbers) {\n        new_numbers.push_back(number / numbers.size());\n\
    \    }\n    return new_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: "tmp1t5ua2ak: /tmp/tmp1t5ua2ak.cpp:18: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    for (float number : numbers) {\n        rescaled_numbers.push_back(number\
    \ / numbers.size());\n    }\n    return rescaled_numbers;\n}\nint main() {\n \
    \   auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "tmp_vtgwclx: /tmp/tmp_vtgwclx.cpp:18: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled;\n    rescaled.reserve(numbers.size());\n    for (float number : numbers)\
    \ {\n        rescaled.push_back(number / numbers.size());\n    }\n    return rescaled;\n\
    }\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "tmpatei5l3f: /tmp/tmpatei5l3f.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers(numbers.size());\n    float min_number = std::numeric_limits<float>::max();\n\
    \    float max_number = std::numeric_limits<float>::min();\n    for (size_t i\
    \ = 0; i < numbers.size(); i++) {\n        min_number = std::min(min_number, numbers[i]);\n\
    \        max_number = std::max(max_number, numbers[i]);\n        rescaled_numbers[i]\
    \ = numbers[i] - min_number;\n    }\n    for (size_t i = 0; i < numbers.size();\
    \ i++) {\n        rescaled_numbers[i] = rescaled_numbers[i] / max_number - min_number;\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: "tmpsi4o5852: /tmp/tmpsi4o5852.cpp:23: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ result;\n    float min = *std::min_element(numbers.begin(), numbers.end());\n\
    \    float max = *std::max_element(numbers.begin(), numbers.end());\n    float\
    \ range = (max - min);\n    for (float number : numbers) {\n        result.push_back(number\
    \ - min);\n    }\n    for (float number : result) {\n        assert(number >=\
    \ 0.0);\n        assert(number <= 1.0);\n    }\n    for (float number : result)\
    \ {\n        assert(number >= 0.0);\n        assert(number <= 1.0);\n    }\n \
    \   return result;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n \
    \   assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: "tmpclfrnooc: /tmp/tmpclfrnooc.cpp:17: std::vector<float> rescale_to_unit(std::vector<float>):\
    \ Assertion `number <= 1.0' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    for (float number : numbers) {\n        rescaled_numbers.push_back(number\
    \ / numbers[0]);\n    }\n    return rescaled_numbers;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "tmpvxlnueb5: /tmp/tmpvxlnueb5.cpp:18: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> new_numbers;\n    new_numbers.reserve(numbers.size());\n\
    \    for (auto number : numbers) {\n        new_numbers.push_back(number);\n \
    \   }\n    for (auto number : numbers) {\n        new_numbers.push_back(number);\n\
    \    }\n    return new_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: "tmp91dn351t: /tmp/tmp91dn351t.cpp:21: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    float min_number = std::numeric_limits<float>::min();\n    float max_number\
    \ = std::numeric_limits<float>::max();\n    for (float number : numbers) {\n \
    \       rescaled_numbers.push_back(number * (max_number - min_number) / (numbers.back()\
    \ - numbers.front()));\n        min_number = std::min(min_number, number);\n \
    \       max_number = std::max(max_number, number);\n    }\n    return rescaled_numbers;\n\
    }\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "tmpft1t8a6o: /tmp/tmpft1t8a6o.cpp:22: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ > 1);\n    std::vector<float> rescaled_numbers(numbers.size());\n    float smallest_number\
    \ = numbers[0];\n    float largest_number = numbers[0];\n    for (size_t i = 1;\
    \ i < numbers.size(); ++i) {\n        smallest_number = std::min(smallest_number,\
    \ numbers[i]);\n        largest_number = std::max(largest_number, numbers[i]);\n\
    \    }\n    for (size_t i = 0; i < numbers.size(); ++i) {\n        rescaled_numbers[i]\
    \ = numbers[i] - smallest_number / largest_number;\n    }\n    return rescaled_numbers;\n\
    }\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "tmp4te0y8ok: /tmp/tmp4te0y8ok.cpp:23: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number / numbers[0]);\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: "tmpk2bl8ny5: /tmp/tmpk2bl8ny5.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number / numbers[0]);\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: "tmp7mlrl9o7: /tmp/tmp7mlrl9o7.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number / numbers[0]);\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: "tmp3es5a42s: /tmp/tmp3es5a42s.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    float min = *std::min_element(numbers.begin(), numbers.end());\n\
    \    float max = *std::max_element(numbers.begin(), numbers.end());\n    float\
    \ scale = 1.0f / (max - min);\n    for (float number : numbers) {\n        number\
    \ *= scale;\n    }\n    return numbers;\n}\nint main() {\n    auto candidate =\
    \ rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0, 49.9}))) ==\
    \ (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "tmpda9qd_oh: /tmp/tmpda9qd_oh.cpp:19: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    float\
    \ min = *std::min_element(numbers.begin(), numbers.end());\n    float max = *std::max_element(numbers.begin(),\
    \ numbers.end());\n    float range = max - min;\n    for (auto number : numbers)\
    \ {\n        rescaled_numbers.push_back(number * (range / numbers.back()));\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: "tmp6zeh67sz: /tmp/tmp6zeh67sz.cpp:20: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    float smallest = numbers[0];\n    float largest = numbers[0];\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number - smallest);\n\
    \        smallest = std::min(smallest, number);\n        largest = std::max(largest,\
    \ number);\n    }\n    rescaled_numbers.push_back(1.0f - largest);\n    return\
    \ rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: "tmpia8_x__i: /tmp/tmpia8_x__i.cpp:23: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    float min = *std::min_element(numbers.begin(), numbers.end());\n    float\
    \ max = *std::max_element(numbers.begin(), numbers.end());\n    float scale =\
    \ 1.0f / (max - min);\n    for (float number : numbers) {\n        rescaled_numbers.push_back(number\
    \ * scale);\n    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate\
    \ = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0, 49.9})))\
    \ == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "tmpdapivkzg: /tmp/tmpdapivkzg.cpp:21: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number / numbers.size());\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: "tmpow_mq44p: /tmp/tmpow_mq44p.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (auto\
    \ number : numbers) {\n        rescaled_numbers.push_back(std::min(std::max(number,\
    \ 0.0f), 1.0f));\n    }\n    return rescaled_numbers;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "tmp0vn0evou: /tmp/tmp0vn0evou.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    float smallest_number = numbers[0];\n    float largest_number = numbers[0];\n\
    \    for (float number : numbers) {\n        smallest_number = std::min(smallest_number,\
    \ number);\n        largest_number = std::max(largest_number, number);\n    }\n\
    \    float scale = 1.0f / (largest_number - smallest_number);\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(smallest_number + (number\
    \ - smallest_number) * scale);\n    }\n    return rescaled_numbers;\n}\nint main()\
    \ {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "tmplj4qssdz: /tmp/tmplj4qssdz.cpp:25: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ > 1);\n    std::vector<float> result(numbers.begin(), numbers.end());\n    float\
    \ min = *std::min_element(numbers.begin(), numbers.end());\n    float max = *std::max_element(numbers.begin(),\
    \ numbers.end());\n    float scale = 1.0f / (max - min);\n    for (auto number\
    \ : numbers) {\n        result[numbers.find(number) - numbers.begin()] = scale\
    \ * number;\n    }\n    return result;\n}\nint main() {\n    auto candidate =\
    \ rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0, 49.9}))) ==\
    \ (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmp_n3_e78r.cpp: In function \u2018std::vector<float> rescale_to_unit(std::vector<float>)\u2019\
    :\n/tmp/tmp_n3_e78r.cpp:14:24: error: \u2018class std::vector<float>\u2019 has\
    \ no member named \u2018find\u2019\n   14 |         result[numbers.find(number)\
    \ - numbers.begin()] = scale * number;\n      |                        ^~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    for (float number : numbers) {\n        rescaled_numbers.push_back(number);\n\
    \        rescaled_numbers.push_back(number);\n    }\n    return rescaled_numbers;\n\
    }\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "tmp5cv23uzl: /tmp/tmp5cv23uzl.cpp:19: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ > 1);\n    std::vector<float> result(numbers.size());\n    float min = std::numeric_limits<float>::min();\n\
    \    float max = std::numeric_limits<float>::max();\n    for (size_t i = 0; i\
    \ < numbers.size(); i++) {\n        result[i] = numbers[i] - min;\n        result[i]\
    \ = result[i] / (max - min);\n    }\n    return result;\n}\nint main() {\n   \
    \ auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "tmpct49_tfu: /tmp/tmpct49_tfu.cpp:20: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    float min = *std::min_element(numbers.begin(), numbers.end());\n    float\
    \ max = *std::max_element(numbers.begin(), numbers.end());\n    float scale =\
    \ 1.0f / (max - min);\n    for (float number : numbers) {\n        rescaled_numbers.push_back(number\
    \ * scale);\n    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate\
    \ = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0, 49.9})))\
    \ == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "tmpchza48mt: /tmp/tmpchza48mt.cpp:21: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number / numbers.size());\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: "tmpj84lo1ru: /tmp/tmpj84lo1ru.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers(numbers.size());\n    for (size_t i = 0; i < numbers.size();\
    \ i++) {\n        rescaled_numbers[i] = numbers[i] / numbers[0];\n    }\n    return\
    \ rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: "tmp5sj9eptc: /tmp/tmp5sj9eptc.cpp:16: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(std::min(std::max(number,\
    \ 0.0f), 1.0f));\n    }\n    return rescaled_numbers;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "tmpa25w3_zw: /tmp/tmpa25w3_zw.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> new_numbers;\n    new_numbers.reserve(numbers.size());\n\
    \    for (float number : numbers) {\n        new_numbers.push_back(number);\n\
    \    }\n    for (float number : numbers) {\n        new_numbers.push_back(number\
    \ / new_numbers.size());\n    }\n    return new_numbers;\n}\nint main() {\n  \
    \  auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "tmp7kaag7wr: /tmp/tmp7kaag7wr.cpp:21: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> result;\n    float min = numbers[0];\n    float\
    \ max = numbers[0];\n    for (auto number : numbers) {\n        min = std::min(min,\
    \ number);\n        max = std::max(max, number);\n    }\n    for (auto number\
    \ : numbers) {\n        result.push_back(number - min) / (max - min);\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2l4ww9qa.cpp: In function \u2018std::vector<float> rescale_to_unit(std::vector<float>)\u2019\
    :\n/tmp/tmp2l4ww9qa.cpp:17:40: error: invalid operands of types \u2018void\u2019\
    \ and \u2018float\u2019 to binary \u2018operator/\u2019\n   17 |         result.push_back(number\
    \ - min) / (max - min);\n      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^ ~~~~~~~~~~~\n\
    \      |                         |                     |\n      |            \
    \             void                  float\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ result;\n    float min = std::numeric_limits<float>::max();\n    float max =\
    \ std::numeric_limits<float>::min();\n    for (float number : numbers) {\n   \
    \     min = std::min(min, number);\n        max = std::max(max, number);\n   \
    \ }\n    for (float number : numbers) {\n        result.push_back(number - min)\
    \ / (max - min);\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0, 49.9})))\
    \ == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmp3d4unv5j.cpp: In function \u2018std::vector<float> rescale_to_unit(std::vector<float>)\u2019\
    :\n/tmp/tmp3d4unv5j.cpp:16:40: error: invalid operands of types \u2018void\u2019\
    \ and \u2018float\u2019 to binary \u2018operator/\u2019\n   16 |         result.push_back(number\
    \ - min) / (max - min);\n      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^ ~~~~~~~~~~~\n\
    \      |                         |                     |\n      |            \
    \             void                  float\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number / numbers[0]);\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: "tmpdnwlonwc: /tmp/tmpdnwlonwc.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(std::min(std::max(number,\
    \ 0.0f), 1.0f));\n    }\n    return rescaled_numbers;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "tmpoldww8zp: /tmp/tmpoldww8zp.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ result;\n    float min = *std::min_element(numbers.begin(), numbers.end());\n\
    \    float max = *std::max_element(numbers.begin(), numbers.end());\n    float\
    \ range = max - min;\n    float scale = 1.0f / range;\n    for (float number :\
    \ numbers) {\n        result.push_back(number * scale);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "tmp8osj8gu5: /tmp/tmp8osj8gu5.cpp:20: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number / numbers.size());\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: "tmprf74u2i8: /tmp/tmprf74u2i8.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    for (float number : numbers) {\n        rescaled_numbers.push_back(number\
    \ / numbers[0]);\n    }\n    return rescaled_numbers;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "tmpla14cdb5: /tmp/tmpla14cdb5.cpp:18: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(std::min(std::max(number,\
    \ 0.0f), 1.0f));\n    }\n    return rescaled_numbers;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "tmp1ozte1bc: /tmp/tmp1ozte1bc.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    float\
    \ min = std::numeric_limits<float>::min();\n    float max = std::numeric_limits<float>::max();\n\
    \    for (float number : numbers) {\n        rescaled_numbers.push_back(number\
    \ - min) / (max - min);\n    }\n    return rescaled_numbers;\n}\nint main() {\n\
    \    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpd8l60v8g.cpp: In function \u2018std::vector<float> rescale_to_unit(std::vector<float>)\u2019\
    :\n/tmp/tmpd8l60v8g.cpp:13:50: error: invalid operands of types \u2018void\u2019\
    \ and \u2018float\u2019 to binary \u2018operator/\u2019\n   13 |         rescaled_numbers.push_back(number\
    \ - min) / (max - min);\n      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^ ~~~~~~~~~~~\n      |                                   |                 \
    \    |\n      |                                   void                  float\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    float min = *std::min_element(numbers.begin(), numbers.end());\n\
    \    float max = *std::max_element(numbers.begin(), numbers.end());\n    float\
    \ range = max - min;\n    float scale = 1.0f / range;\n    std::vector<float>\
    \ rescaled_numbers;\n    for (float number : numbers) {\n        rescaled_numbers.push_back(number\
    \ * scale);\n    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate\
    \ = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0, 49.9})))\
    \ == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "tmpdc335aiq: /tmp/tmpdc335aiq.cpp:21: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number);\n        rescaled_numbers.push_back(number\
    \ / numbers.size());\n    }\n    return rescaled_numbers;\n}\nint main() {\n \
    \   auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "tmp0b5ueh3h: /tmp/tmp0b5ueh3h.cpp:18: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number);\n    }\n  \
    \  float smallest_number = *std::min_element(rescaled_numbers.begin(), rescaled_numbers.end());\n\
    \    float largest_number = *std::max_element(rescaled_numbers.begin(), rescaled_numbers.end());\n\
    \    float scale = largest_number - smallest_number;\n    for (float number :\
    \ rescaled_numbers) {\n        rescaled_numbers[rescaled_numbers.size() - 1 -\
    \ rescaled_numbers.find(number)] = number / scale;\n    }\n    return rescaled_numbers;\n\
    }\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpswcptyxx.cpp: In function \u2018std::vector<float> rescale_to_unit(std::vector<float>)\u2019\
    :\n/tmp/tmpswcptyxx.cpp:17:73: error: \u2018class std::vector<float>\u2019 has\
    \ no member named \u2018find\u2019\n   17 |         rescaled_numbers[rescaled_numbers.size()\
    \ - 1 - rescaled_numbers.find(number)] = number / scale;\n      |            \
    \                                                             ^~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number / numbers.size());\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: "tmp38rpfzlu: /tmp/tmp38rpfzlu.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ > 1);\n    std::vector<float> new_numbers(numbers.size());\n    for (size_t\
    \ i = 0; i < numbers.size(); i++) {\n        new_numbers[i] = numbers[i] / numbers[0];\n\
    \    }\n    return new_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: "tmpinez6jo6: /tmp/tmpinez6jo6.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(std::min(std::max(number,\
    \ 0.0f), 1.0f));\n    }\n    return rescaled_numbers;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "tmp06ripfsi: /tmp/tmp06ripfsi.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> result;\n    float min = numbers[0];\n    float\
    \ max = numbers[0];\n    for (auto n : numbers) {\n        if (n < min) min =\
    \ n;\n        if (n > max) max = n;\n    }\n    for (auto n : numbers) {\n   \
    \     result.push_back((n - min) / (max - min));\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    for (float number : numbers) {\n        rescaled_numbers.push_back(number);\n\
    \        rescaled_numbers.push_back(number);\n    }\n    return rescaled_numbers;\n\
    }\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "tmpos2_qhg_: /tmp/tmpos2_qhg_.cpp:19: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    for (float number : numbers) {\n        rescaled_numbers.push_back(number\
    \ / numbers[0]);\n    }\n    return rescaled_numbers;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "tmptj_tiuam: /tmp/tmptj_tiuam.cpp:18: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    float\
    \ min_number = std::numeric_limits<float>::max();\n    float max_number = std::numeric_limits<float>::min();\n\
    \    for (float number : numbers) {\n        min_number = std::min(min_number,\
    \ number);\n        max_number = std::max(max_number, number);\n        rescaled_numbers.push_back(number\
    \ - min_number);\n    }\n    for (float number : rescaled_numbers) {\n       \
    \ rescaled_numbers.push_back(number / max_number);\n    }\n    return rescaled_numbers;\n\
    }\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "tmp93uxlqu8: /tmp/tmp93uxlqu8.cpp:24: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> new_numbers;\n    new_numbers.reserve(numbers.size());\n\
    \    for (float number : numbers) {\n        new_numbers.push_back(number);\n\
    \    }\n    float min = new_numbers[0];\n    float max = new_numbers[0];\n   \
    \ for (float number : new_numbers) {\n        min = std::min(min, number);\n \
    \       max = std::max(max, number);\n    }\n    for (float number : new_numbers)\
    \ {\n        number -= min;\n        number /= (max - min);\n        number +=\
    \ 0.5;\n    }\n    return new_numbers;\n}\nint main() {\n    auto candidate =\
    \ rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0, 49.9}))) ==\
    \ (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "tmppfod37o_: /tmp/tmppfod37o_.cpp:29: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number / numbers[0]);\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: "tmpvjcpv4sq: /tmp/tmpvjcpv4sq.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ > 1);\n    std::vector<float> result;\n    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    float range = max - min;\n    float scale = 1.0f / range;\n    for (float\
    \ number : numbers) {\n        result.push_back(number * scale);\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "tmpk_t18_si: /tmp/tmpk_t18_si.cpp:21: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> result(numbers.size());\n    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    float range = max - min;\n    float scale = 1.0f / range;\n    for (size_t\
    \ i = 0; i < numbers.size(); i++) {\n        result[i] = numbers[i] * scale;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: "tmpu_dso_2_: /tmp/tmpu_dso_2_.cpp:21: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    for (float number : numbers) {\n        rescaled_numbers.push_back(number\
    \ / numbers[0]);\n    }\n    return rescaled_numbers;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "tmp1aaya_4_: /tmp/tmp1aaya_4_.cpp:18: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number / numbers.size());\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: "tmpbvtpsgc4: /tmp/tmpbvtpsgc4.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    for (float number : numbers) {\n        rescaled_numbers.push_back(number\
    \ / numbers[0]);\n    }\n    return rescaled_numbers;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "tmpy96iots7: /tmp/tmpy96iots7.cpp:18: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number / numbers.size());\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: "tmp9oj_frsb: /tmp/tmp9oj_frsb.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> result(numbers.size());\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for (size_t i = 1; i < numbers.size(); i++)\
    \ {\n        min = std::min(min, numbers[i]);\n        max = std::max(max, numbers[i]);\n\
    \    }\n    for (size_t i = 0; i < numbers.size(); i++) {\n        result[i] =\
    \ numbers[i] - min;\n        result[i] /= (max - min);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    float min = *std::min_element(numbers.begin(), numbers.end());\n\
    \    float max = *std::max_element(numbers.begin(), numbers.end());\n    float\
    \ scale = 1.0f / (max - min);\n    std::vector<float> res(numbers.size());\n \
    \   for (size_t i = 0; i < numbers.size(); ++i) {\n        res[i] = numbers[i]\
    \ * scale;\n    }\n    return res;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: "tmp9agnbgmd: /tmp/tmp9agnbgmd.cpp:20: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    for (auto number : numbers) {\n        rescaled_numbers.push_back(number\
    \ / numbers[0]);\n    }\n    return rescaled_numbers;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "tmpswrbt789: /tmp/tmpswrbt789.cpp:18: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number / numbers.size());\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: "tmpf2flkeq1: /tmp/tmpf2flkeq1.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ > 1);\n    std::vector<float> new_numbers(numbers.size());\n    float smallest\
    \ = numbers[0];\n    float largest = numbers[0];\n    for (size_t i = 1; i < numbers.size();\
    \ i++) {\n        smallest = std::min(smallest, numbers[i]);\n        largest\
    \ = std::max(largest, numbers[i]);\n    }\n    for (size_t i = 0; i < numbers.size();\
    \ i++) {\n        new_numbers[i] = numbers[i] - smallest;\n        new_numbers[i]\
    \ /= (largest - smallest);\n    }\n    return new_numbers;\n}\nint main() {\n\
    \    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    float min = *std::min_element(numbers.begin(), numbers.end());\n\
    \    float max = *std::max_element(numbers.begin(), numbers.end());\n    float\
    \ scale = 1.0f / (max - min);\n    std::vector<float> rescaled_numbers(numbers.size());\n\
    \    for (size_t i = 0; i < numbers.size(); ++i) {\n        rescaled_numbers[i]\
    \ = numbers[i] * scale;\n    }\n    return rescaled_numbers;\n}\nint main() {\n\
    \    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "tmpelm2t3k5: /tmp/tmpelm2t3k5.cpp:20: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number / numbers[0]);\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: "tmpedu9huf3: /tmp/tmpedu9huf3.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> new_numbers;\n    new_numbers.reserve(numbers.size());\n\
    \    for (float number : numbers) {\n        new_numbers.push_back(number / numbers[0]);\n\
    \    }\n    return new_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: "tmpnm2ydbk8: /tmp/tmpnm2ydbk8.cpp:18: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> rescaled_numbers(numbers.size());\n    float\
    \ smallest_number = numbers[0];\n    float largest_number = numbers[0];\n    for\
    \ (size_t i = 1; i < numbers.size(); ++i) {\n        smallest_number = std::min(smallest_number,\
    \ numbers[i]);\n        largest_number = std::max(largest_number, numbers[i]);\n\
    \    }\n    float scale = 1.0f / (largest_number - smallest_number);\n    for\
    \ (size_t i = 0; i < numbers.size(); ++i) {\n        rescaled_numbers[i] = numbers[i]\
    \ * scale;\n    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate\
    \ = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0, 49.9})))\
    \ == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "tmpt7qjcgd6: /tmp/tmpt7qjcgd6.cpp:24: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ > 1);\n    std::vector<float> rescaled_numbers(numbers.size());\n    float smallest\
    \ = numbers[0];\n    float largest = numbers[0];\n    for (size_t i = 1; i < numbers.size();\
    \ i++) {\n        smallest = std::min(smallest, numbers[i]);\n        largest\
    \ = std::max(largest, numbers[i]);\n    }\n    float scale = largest / smallest;\n\
    \    for (size_t i = 0; i < numbers.size(); i++) {\n        rescaled_numbers[i]\
    \ = numbers[i] * scale;\n    }\n    return rescaled_numbers;\n}\nint main() {\n\
    \    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "tmpn8qqnsj3: /tmp/tmpn8qqnsj3.cpp:24: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number / numbers[0]);\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: "tmpo3a2zciu: /tmp/tmpo3a2zciu.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    for (float number : numbers) {\n        rescaled_numbers.push_back(number\
    \ / numbers[0]);\n    }\n    return rescaled_numbers;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "tmpogbpulnz: /tmp/tmpogbpulnz.cpp:18: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number / numbers[0]);\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: "tmpp24yxcog: /tmp/tmpp24yxcog.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> result;\n    float min = numbers[0];\n    float\
    \ max = numbers[0];\n    for (auto n : numbers) {\n        if (n < min) min =\
    \ n;\n        if (n > max) max = n;\n    }\n    for (auto n : numbers) {\n   \
    \     result.push_back((n - min) / (max - min));\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number / numbers.size());\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: "tmpatm3l32h: /tmp/tmpatm3l32h.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number / numbers[0]);\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: "tmpate2_i_2: /tmp/tmpate2_i_2.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number / numbers.size());\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: "tmpj4pd6p3h: /tmp/tmpj4pd6p3h.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> result(numbers.size());\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for (size_t i = 1; i < numbers.size(); ++i)\
    \ {\n        if (numbers[i] < min) {\n            min = numbers[i];\n        }\
    \ else if (numbers[i] > max) {\n            max = numbers[i];\n        }\n   \
    \ }\n    for (size_t i = 0; i < numbers.size(); ++i) {\n        result[i] = numbers[i]\
    \ - min;\n        result[i] /= (max - min);\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> rescaled;\n    rescaled.reserve(numbers.size());\n\
    \    for (float number : numbers) {\n        rescaled.push_back(number / numbers[0]);\n\
    \    }\n    return rescaled;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: "tmpve2ww6dm: /tmp/tmpve2ww6dm.cpp:18: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled;\n    rescaled.reserve(numbers.size());\n    for (auto number : numbers)\
    \ {\n        rescaled.push_back(number);\n        rescaled.push_back(number);\n\
    \    }\n    return rescaled;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: "tmpafe5j2m4: /tmp/tmpafe5j2m4.cpp:18: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> result;\n    float min = numbers[0];\n    float\
    \ max = numbers[0];\n    for (auto n : numbers) {\n        if (n < min) min =\
    \ n;\n        if (n > max) max = n;\n    }\n    for (auto n : numbers) {\n   \
    \     result.push_back((n - min) / (max - min));\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> result;\n    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    float scale = max - min;\n    for (float number : numbers) {\n        result.push_back(number\
    \ * scale);\n    }\n    return result;\n}\nint main() {\n    auto candidate =\
    \ rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0, 49.9}))) ==\
    \ (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "tmp_vpivylp: /tmp/tmp_vpivylp.cpp:20: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number / numbers.size());\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: "tmpnxvs2i5p: /tmp/tmpnxvs2i5p.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number / numbers.size());\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: "tmpdyphv2dx: /tmp/tmpdyphv2dx.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers(numbers.size());\n    float smallest_number = numbers[0];\n\
    \    float largest_number = numbers[0];\n    for (size_t i = 1; i < numbers.size();\
    \ i++) {\n        smallest_number = std::min(smallest_number, numbers[i]);\n \
    \       largest_number = std::max(largest_number, numbers[i]);\n    }\n    float\
    \ scale = 1.0f / (largest_number - smallest_number);\n    for (size_t i = 0; i\
    \ < numbers.size(); i++) {\n        rescaled_numbers[i] = numbers[i] * scale;\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: "tmpw9_9g8ak: /tmp/tmpw9_9g8ak.cpp:23: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number / numbers[0]);\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: "tmpqnpo_ex1: /tmp/tmpqnpo_ex1.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> result;\n    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    float range = max - min;\n    float scale = 1.0f / range;\n    for (float\
    \ number : numbers) {\n        result.push_back(number * scale);\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "tmp8mu35u9a: /tmp/tmp8mu35u9a.cpp:21: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(std::min(std::max(number,\
    \ 0.0f), 1.0f));\n    }\n    return rescaled_numbers;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "tmp5vrcnh3k: /tmp/tmp5vrcnh3k.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    float min = *std::min_element(numbers.begin(), numbers.end());\n\
    \    float max = *std::max_element(numbers.begin(), numbers.end());\n    float\
    \ range = max - min;\n    float scale = 1.0f / range;\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (auto\
    \ number : numbers) {\n        rescaled_numbers.push_back(number * scale);\n \
    \   }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: "tmpihe403ip: /tmp/tmpihe403ip.cpp:22: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number * 2.0f - 1.0f);\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: "tmp99szy7qe: /tmp/tmp99szy7qe.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number / numbers.size());\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: "tmph7tqbx5r: /tmp/tmph7tqbx5r.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ > 1);\n    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    float smallest_number = numbers[0];\n    float largest_number = numbers[0];\n\
    \    for (auto number : numbers) {\n        smallest_number = std::min(smallest_number,\
    \ number);\n        largest_number = std::max(largest_number, number);\n    }\n\
    \    float scale = 1.0f / (largest_number - smallest_number);\n    for (auto number\
    \ : numbers) {\n        rescaled_numbers.push_back(number * scale);\n    }\n \
    \   return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: "tmpg9kwfl72: /tmp/tmpg9kwfl72.cpp:25: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    for (float number : numbers) {\n        rescaled_numbers.push_back(number\
    \ / numbers[0]);\n    }\n    return rescaled_numbers;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "tmpjuo7n3vo: /tmp/tmpjuo7n3vo.cpp:18: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> new_numbers;\n    new_numbers.reserve(numbers.size());\n\
    \    for (float number : numbers) {\n        new_numbers.push_back(number / numbers.size());\n\
    \    }\n    return new_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: "tmp3a7o_5s3: /tmp/tmp3a7o_5s3.cpp:18: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number / numbers.size());\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: "tmpol0ok7fj: /tmp/tmpol0ok7fj.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> result(numbers.size());\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for (size_t i = 0; i < numbers.size(); i++)\
    \ {\n        if (numbers[i] > max) {\n            max = numbers[i];\n        }\n\
    \        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n \
    \   }\n    for (size_t i = 0; i < numbers.size(); i++) {\n        result[i] =\
    \ numbers[i] - min;\n        result[i] *= (max - min) / (numbers.size() - 1);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: "tmpoalj93wx: /tmp/tmpoalj93wx.cpp:28: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> result;\n    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    float scale = max - min;\n    for (float number : numbers) {\n        result.push_back(number\
    \ * scale);\n    }\n    return result;\n}\nint main() {\n    auto candidate =\
    \ rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0, 49.9}))) ==\
    \ (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "tmpd7rt1olm: /tmp/tmpd7rt1olm.cpp:20: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (auto\
    \ number : numbers) {\n        rescaled_numbers.push_back(std::min(std::max(number,\
    \ 0.0f), 1.0f));\n    }\n    return rescaled_numbers;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "tmpn3i5y0ge: /tmp/tmpn3i5y0ge.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    for (float number : numbers) {\n        rescaled_numbers.push_back(number\
    \ / numbers[0]);\n    }\n    return rescaled_numbers;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "tmp38_wxthv: /tmp/tmp38_wxthv.cpp:18: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number / numbers.size());\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: "tmp8ilnm168: /tmp/tmp8ilnm168.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ result;\n    float min = *std::min_element(numbers.begin(), numbers.end());\n\
    \    float max = *std::max_element(numbers.begin(), numbers.end());\n    float\
    \ scale = max - min;\n    for (float number : numbers) {\n        result.push_back(number\
    \ * scale);\n    }\n    return result;\n}\nint main() {\n    auto candidate =\
    \ rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0, 49.9}))) ==\
    \ (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "tmpwnwzw1bn: /tmp/tmpwnwzw1bn.cpp:19: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> rescaled_numbers(numbers.size());\n    float\
    \ smallest_number = numbers[0];\n    float largest_number = numbers[0];\n    for\
    \ (size_t i = 1; i < numbers.size(); ++i) {\n        smallest_number = std::min(smallest_number,\
    \ numbers[i]);\n        largest_number = std::max(largest_number, numbers[i]);\n\
    \    }\n    float scale = 1.0f / (largest_number - smallest_number);\n    for\
    \ (size_t i = 0; i < numbers.size(); ++i) {\n        rescaled_numbers[i] = numbers[i]\
    \ * scale;\n    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate\
    \ = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0, 49.9})))\
    \ == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "tmp7t0y31l9: /tmp/tmp7t0y31l9.cpp:24: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ result;\n    float min = std::numeric_limits<float>::max();\n    float max =\
    \ std::numeric_limits<float>::min();\n    for (float number : numbers) {\n   \
    \     min = std::min(min, number);\n        max = std::max(max, number);\n   \
    \ }\n    for (float number : numbers) {\n        result.push_back(number * (max\
    \ - min) / numbers.size());\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "tmpyfu6m1bg: /tmp/tmpyfu6m1bg.cpp:22: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> rescaled_numbers(numbers.size());\n    float\
    \ min = numbers[0];\n    float max = numbers[0];\n    for (size_t i = 1; i < numbers.size();\
    \ i++) {\n        min = std::min(min, numbers[i]);\n        max = std::max(max,\
    \ numbers[i]);\n    }\n    for (size_t i = 0; i < numbers.size(); i++) {\n   \
    \     rescaled_numbers[i] = numbers[i] - min;\n        rescaled_numbers[i] /=\
    \ (max - min);\n    }\n    return rescaled_numbers;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number / numbers.size());\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: "tmpw2jlr_z5: /tmp/tmpw2jlr_z5.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> result(numbers.size());\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for (size_t i = 1; i < numbers.size(); i++)\
    \ {\n        min = std::min(min, numbers[i]);\n        max = std::max(max, numbers[i]);\n\
    \    }\n    for (size_t i = 0; i < numbers.size(); i++) {\n        result[i] =\
    \ numbers[i] - min;\n        result[i] = result[i] / (max - min);\n    }\n   \
    \ return result;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n   \
    \ assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number / numbers.size());\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: "tmp9rdlsbf_: /tmp/tmp9rdlsbf_.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> rescaled_numbers(numbers.size());\n    float\
    \ max_number = std::max(numbers);\n    float min_number = std::min(numbers);\n\
    \    float range = max_number - min_number;\n    for (size_t i = 0; i < numbers.size();\
    \ i++) {\n        rescaled_numbers[i] = numbers[i] - min_number;\n        rescaled_numbers[i]\
    \ /= range;\n    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate\
    \ = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0, 49.9})))\
    \ == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpyi3qy455.cpp: In function \u2018std::vector<float> rescale_to_unit(std::vector<float>)\u2019\
    :\n/tmp/tmpyi3qy455.cpp:10:40: error: no matching function for call to \u2018\
    max(std::vector<float>&)\u2019\n   10 |     float max_number = std::max(numbers);\n\
    \      |                                        ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpyi3qy455.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:222:5:\
    \ note: candidate: \u2018template<class _Tp> constexpr const _Tp& std::max(const\
    \ _Tp&, const _Tp&)\u2019\n  222 |     max(const _Tp& __a, const _Tp& __b)\n \
    \     |     ^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:222:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpyi3qy455.cpp:10:40:\
    \ note:   candidate expects 2 arguments, 1 provided\n   10 |     float max_number\
    \ = std::max(numbers);\n      |                                        ^\nIn file\
    \ included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \       "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number / numbers.size());\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: "tmp1d21x_du: /tmp/tmp1d21x_du.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number / numbers[0]);\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: "tmpjg4vura4: /tmp/tmpjg4vura4.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ result;\n    float min = std::numeric_limits<float>::max();\n    float max =\
    \ std::numeric_limits<float>::min();\n    for (float number : numbers) {\n   \
    \     min = std::min(min, number);\n        max = std::max(max, number);\n   \
    \ }\n    for (float number : numbers) {\n        result.push_back(number * (max\
    \ - min) / (max - min));\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "tmpaehirsz2: /tmp/tmpaehirsz2.cpp:22: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (auto\
    \ number : numbers) {\n        rescaled_numbers.push_back(number / numbers.size());\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: "tmpkamzed7u: /tmp/tmpkamzed7u.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> rescaled;\n    rescaled.reserve(numbers.size());\n\
    \    for (float number : numbers) {\n        rescaled.push_back(number / numbers[0]);\n\
    \    }\n    return rescaled;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: "tmpdlbxb_m8: /tmp/tmpdlbxb_m8.cpp:18: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    for (float number : numbers) {\n        rescaled_numbers.push_back(number\
    \ / numbers[0]);\n    }\n    return rescaled_numbers;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "tmptap80gqz: /tmp/tmptap80gqz.cpp:18: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers(numbers.size());\n    float smallest_number = numbers[0];\n\
    \    float largest_number = numbers[0];\n    for (size_t i = 0; i < numbers.size();\
    \ i++) {\n        rescaled_numbers[i] = numbers[i] / smallest_number;\n      \
    \  smallest_number = std::min(smallest_number, numbers[i]);\n        largest_number\
    \ = std::max(largest_number, numbers[i]);\n    }\n    return rescaled_numbers;\n\
    }\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "tmpll8seg8y: /tmp/tmpll8seg8y.cpp:20: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> rescaled_numbers(numbers.size());\n    float\
    \ min_number = numbers[0];\n    float max_number = numbers[0];\n    for (size_t\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] < min_number) {\n\
    \            min_number = numbers[i];\n        }\n        if (numbers[i] > max_number)\
    \ {\n            max_number = numbers[i];\n        }\n    }\n    for (size_t i\
    \ = 0; i < numbers.size(); i++) {\n        rescaled_numbers[i] = numbers[i] -\
    \ min_number;\n        rescaled_numbers[i] /= (max_number - min_number);\n   \
    \ }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(std::min(std::max(number,\
    \ 0.0f), 1.0f));\n    }\n    return rescaled_numbers;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "tmpd8vj6b6n: /tmp/tmpd8vj6b6n.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    float\
    \ min = std::numeric_limits<float>::min();\n    float max = std::numeric_limits<float>::max();\n\
    \    for (float number : numbers) {\n        rescaled_numbers.push_back(number\
    \ - min) / (max - min);\n    }\n    return rescaled_numbers;\n}\nint main() {\n\
    \    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpmt8kkht7.cpp: In function \u2018std::vector<float> rescale_to_unit(std::vector<float>)\u2019\
    :\n/tmp/tmpmt8kkht7.cpp:13:50: error: invalid operands of types \u2018void\u2019\
    \ and \u2018float\u2019 to binary \u2018operator/\u2019\n   13 |         rescaled_numbers.push_back(number\
    \ - min) / (max - min);\n      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^ ~~~~~~~~~~~\n      |                                   |                 \
    \    |\n      |                                   void                  float\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> result;\n    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    float scale = (max - min) / (numbers.back() - numbers.front());\n    for\
    \ (float number : numbers) {\n        result.push_back(number * scale);\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: "tmpoe853b1j: /tmp/tmpoe853b1j.cpp:20: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled;\n    rescaled.reserve(numbers.size());\n    for (float number : numbers)\
    \ {\n        rescaled.push_back(number / numbers.back());\n    }\n    return rescaled;\n\
    }\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "tmprq5_w29i: /tmp/tmprq5_w29i.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> rescaled;\n    rescaled.reserve(numbers.size());\n\
    \    for (float number : numbers) {\n        rescaled.push_back(number);\n   \
    \     rescaled.push_back(number);\n    }\n    return rescaled;\n}\nint main()\
    \ {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "tmpqwo2pv1x: /tmp/tmpqwo2pv1x.cpp:19: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    float min = *std::min_element(numbers.begin(), numbers.end());\n\
    \    float max = *std::max_element(numbers.begin(), numbers.end());\n    float\
    \ scale = max - min;\n    std::vector<float> rescaled_numbers;\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number * scale + min);\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: "tmp52zqkjnr: /tmp/tmp52zqkjnr.cpp:20: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number / numbers.size());\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: "tmp49x3t8ln: /tmp/tmp49x3t8ln.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ result;\n    float min = *std::min_element(numbers.begin(), numbers.end());\n\
    \    float max = *std::max_element(numbers.begin(), numbers.end());\n    float\
    \ range = max - min;\n    for (float number : numbers) {\n        float rescaled\
    \ = number - min;\n        rescaled = rescaled / range;\n        result.push_back(rescaled);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number / numbers[0]);\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: "tmppu9mp0p9: /tmp/tmppu9mp0p9.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers(numbers.size());\n    for (size_t i = 0; i < numbers.size();\
    \ i++) {\n        rescaled_numbers[i] = numbers[i] / numbers[0];\n    }\n    return\
    \ rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: "tmp3kbr46et: /tmp/tmp3kbr46et.cpp:16: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ > 1);\n    std::vector<float> rescaled_numbers(numbers.size());\n    float min\
    \ = std::numeric_limits<float>::max();\n    float max = std::numeric_limits<float>::min();\n\
    \    for (size_t i = 0; i < numbers.size(); i++) {\n        rescaled_numbers[i]\
    \ = numbers[i] - min;\n        min = std::min(min, numbers[i]);\n        max =\
    \ std::max(max, numbers[i]);\n    }\n    float scale = 1.0f / (max - min);\n \
    \   for (size_t i = 0; i < numbers.size(); i++) {\n        rescaled_numbers[i]\
    \ *= scale;\n    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate\
    \ = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0, 49.9})))\
    \ == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "tmpmnmx96uh: /tmp/tmpmnmx96uh.cpp:25: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ result;\n    float min = std::numeric_limits<float>::max();\n    float max =\
    \ std::numeric_limits<float>::min();\n    for (float number : numbers) {\n   \
    \     min = std::min(min, number);\n        max = std::max(max, number);\n   \
    \ }\n    for (float number : numbers) {\n        result.push_back(number * (max\
    \ - min) / (max - min));\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "tmpx7sq8eun: /tmp/tmpx7sq8eun.cpp:22: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number / numbers[0]);\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: "tmplshyx0x2: /tmp/tmplshyx0x2.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ > 1);\n    std::vector<float> rescaled;\n    rescaled.reserve(numbers.size());\n\
    \    for (float number : numbers) {\n        rescaled.push_back(number / numbers[0]);\n\
    \    }\n    return rescaled;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: "tmpvkzfrq5g: /tmp/tmpvkzfrq5g.cpp:18: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    for (float number : numbers) {\n        rescaled_numbers.push_back(number\
    \ / numbers[0]);\n    }\n    return rescaled_numbers;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "tmpa4_6e5ia: /tmp/tmpa4_6e5ia.cpp:18: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> result(numbers.size());\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for (size_t i = 1; i < numbers.size(); i++)\
    \ {\n        if (numbers[i] < min) min = numbers[i];\n        if (numbers[i] >\
    \ max) max = numbers[i];\n    }\n    for (size_t i = 0; i < numbers.size(); i++)\
    \ {\n        result[i] = numbers[i] - min;\n        result[i] /= (max - min);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number / numbers[0]);\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: "tmp3vyxvt4s: /tmp/tmp3vyxvt4s.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number / numbers.size());\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: "tmpdk6ntj5o: /tmp/tmpdk6ntj5o.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ result;\n    float min = *std::min_element(numbers.begin(), numbers.end());\n\
    \    float max = *std::max_element(numbers.begin(), numbers.end());\n    float\
    \ scale = 1.0f / (max - min);\n    for (float number : numbers) {\n        result.push_back(number\
    \ * scale);\n    }\n    return result;\n}\nint main() {\n    auto candidate =\
    \ rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0, 49.9}))) ==\
    \ (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "tmpqwbn46qt: /tmp/tmpqwbn46qt.cpp:19: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers(numbers.begin(), numbers.end());\n    float min_number = std::numeric_limits<float>::min();\n\
    \    float max_number = std::numeric_limits<float>::max();\n    for (float number\
    \ : rescaled_numbers) {\n        rescaled_numbers = std::map<float, float>::\n\
    \            map(rescaled_numbers, [](float number) {\n                return\
    \ (number - min_number) / (max_number - min_number);\n            });\n    }\n\
    \    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1x9d9nhc.cpp: In lambda function:\n/tmp/tmp1x9d9nhc.cpp:14:34:\
    \ error: \u2018min_number\u2019 is not captured\n   14 |                 return\
    \ (number - min_number) / (max_number - min_number);\n      |                \
    \                  ^~~~~~~~~~\n/tmp/tmp1x9d9nhc.cpp:13:36: note: the lambda has\
    \ no capture-default\n   13 |             map(rescaled_numbers, [](float number)\
    \ {\n      |                                    ^\n/tmp/tmp1x9d9nhc.cpp:9:11:\
    \ note: \u2018float min_number\u2019 declared here\n    9 |     float min_number\
    \ = std::numeric_limits<float>::min();\n      |           ^~~~~~~~~~\n/tmp/tmp1x9d9nhc.cpp:14:49:\
    \ error: \u2018max_number\u2019 is not captured\n   14 |                 return\
    \ (number - min_number) / (max_number - min_number);\n      |                \
    \                                 ^~~~~~~~~~\n/tmp/tmp1x9d9nhc.cpp:13:36: note:\
    \ the lambda has no capture-default\n   13 |             map(rescaled_numbers,\
    \ [](float number) {\n      |                                    ^\n/tmp/tmp1x9d9nhc.cpp:10:11:\
    \ note: \u2018float max_number\u2019 declared here\n   10 |     float max_number\
    \ = std::numeric_limits<float>::max();\n      |           ^~~~~~~~~~\n/tmp/tmp1x9d9nhc.cpp:14:62:\
    \ error: \u2018min_number\u2019 is not captured\n   14 |                 return\
    \ (number - min_number) / (max_number - min_number);\n      |                \
    \                                              ^~~~~~~~~~\n/tmp/tmp1x9d9nhc.cpp:13:36:\
    \ note: the lambda has no capture-default\n   13 |             map(rescaled_numbers,\
    \ [](float number) {\n      |                                    ^\n/tmp/tmp1x9d9nhc.cpp:9:11:\
    \ note: \u2018float min_number\u2019 declared here\n    9 |     float min_number\
    \ = std::numeric_limits<float>::min();\n      |           ^~~~~~~~~~\n/tmp/tmp1x9d9nhc.cpp:\
    \ In function \u2018std::vector<float> rescale_to_unit(std::vector<float>)\u2019\
    :\n/tmp/tmp1x9d9nhc.cpp:15:14: error: cannot call constructor \u2018std::map<float,\
    \ float>::map\u2019 directly [-fpermissive]\n   15 |             });\n      |\
    \              ^\n/tmp/tmp1x9d9nhc.cpp:15:14: note: for a function-style cast,\
    \ remove the redundant \u2018::map\u2019\n/tmp/tmp1x9d9nhc.cpp:"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ result;\n    float min = std::numeric_limits<float>::max();\n    float max =\
    \ std::numeric_limits<float>::min();\n    for (float number : numbers) {\n   \
    \     min = std::min(min, number);\n        max = std::max(max, number);\n   \
    \ }\n    for (float number : numbers) {\n        result.push_back(number - min)\
    \ / (max - min);\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0, 49.9})))\
    \ == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmptunt3nw0.cpp: In function \u2018std::vector<float> rescale_to_unit(std::vector<float>)\u2019\
    :\n/tmp/tmptunt3nw0.cpp:16:40: error: invalid operands of types \u2018void\u2019\
    \ and \u2018float\u2019 to binary \u2018operator/\u2019\n   16 |         result.push_back(number\
    \ - min) / (max - min);\n      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^ ~~~~~~~~~~~\n\
    \      |                         |                     |\n      |            \
    \             void                  float\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> result;\n    float min = numbers[0];\n    float\
    \ max = numbers[0];\n    for (auto number : numbers) {\n        if (number < min)\
    \ min = number;\n        if (number > max) max = number;\n    }\n    for (auto\
    \ number : numbers) {\n        result.push_back(number - min) / (max - min);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpi6bzyktl.cpp: In function \u2018std::vector<float> rescale_to_unit(std::vector<float>)\u2019\
    :\n/tmp/tmpi6bzyktl.cpp:17:40: error: invalid operands of types \u2018void\u2019\
    \ and \u2018float\u2019 to binary \u2018operator/\u2019\n   17 |         result.push_back(number\
    \ - min) / (max - min);\n      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^ ~~~~~~~~~~~\n\
    \      |                         |                     |\n      |            \
    \             void                  float\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number / numbers.size());\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: "tmpj0bd6lot: /tmp/tmpj0bd6lot.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> rescaled_numbers(numbers.size());\n    float\
    \ smallest_number = numbers[0];\n    float largest_number = numbers[0];\n    for\
    \ (size_t i = 1; i < numbers.size(); ++i) {\n        smallest_number = std::min(smallest_number,\
    \ numbers[i]);\n        largest_number = std::max(largest_number, numbers[i]);\n\
    \    }\n    for (size_t i = 0; i < numbers.size(); ++i) {\n        rescaled_numbers[i]\
    \ = numbers[i] - smallest_number;\n        rescaled_numbers[i] /= (largest_number\
    \ - smallest_number);\n    }\n    return rescaled_numbers;\n}\nint main() {\n\
    \    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled;\n    rescaled.reserve(numbers.size());\n    for (auto number : numbers)\
    \ {\n        rescaled.push_back(number / numbers.back());\n    }\n    return rescaled;\n\
    }\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "tmppyen1eqe: /tmp/tmppyen1eqe.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    for (float number : numbers) {\n        rescaled_numbers.push_back(number\
    \ * 2.0 - 1.0);\n    }\n    return rescaled_numbers;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "tmpplofcclu: /tmp/tmpplofcclu.cpp:18: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    for (float number : numbers) {\n        rescaled_numbers.push_back(number\
    \ / numbers[0]);\n    }\n    return rescaled_numbers;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "tmpzy3zy10o: /tmp/tmpzy3zy10o.cpp:18: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ > 1);\n    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    for (auto number : numbers) {\n        rescaled_numbers.push_back(number\
    \ / numbers.back());\n    }\n    return rescaled_numbers;\n}\nint main() {\n \
    \   auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "tmpvho6xqef: /tmp/tmpvho6xqef.cpp:18: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ > 1);\n    std::vector<float> rescaled;\n    rescaled.reserve(numbers.size());\n\
    \    float min = numbers[0];\n    float max = numbers[0];\n    for (float number\
    \ : numbers) {\n        min = std::min(min, number);\n        max = std::max(max,\
    \ number);\n    }\n    float scale = 1.0f / (max - min);\n    for (float number\
    \ : numbers) {\n        rescaled.push_back(number * scale);\n    }\n    return\
    \ rescaled;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "tmpen1qh3ni: /tmp/tmpen1qh3ni.cpp:25: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> rescaled_numbers(numbers.size());\n    float\
    \ smallest_number = numbers[0];\n    float largest_number = numbers[0];\n    for\
    \ (size_t i = 1; i < numbers.size(); ++i) {\n        smallest_number = std::min(smallest_number,\
    \ numbers[i]);\n        largest_number = std::max(largest_number, numbers[i]);\n\
    \    }\n    for (size_t i = 0; i < numbers.size(); ++i) {\n        rescaled_numbers[i]\
    \ = numbers[i] - smallest_number;\n        rescaled_numbers[i] /= (largest_number\
    \ - smallest_number);\n    }\n    return rescaled_numbers;\n}\nint main() {\n\
    \    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    float smallest_number = numbers[0];\n    float largest_number = numbers[0];\n\
    \    for (auto number : numbers) {\n        smallest_number = std::min(smallest_number,\
    \ number);\n        largest_number = std::max(largest_number, number);\n     \
    \   rescaled_numbers.push_back(smallest_number / largest_number);\n    }\n   \
    \ return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: "tmpl2iw8_8k: /tmp/tmpl2iw8_8k.cpp:22: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers(numbers.begin(), numbers.end());\n    std::transform(rescaled_numbers.begin(),\
    \ rescaled_numbers.end(), rescaled_numbers.begin(), [](float x) -> float {\n \
    \       return std::min(std::max(x, 0.0f), 1.0f);\n    });\n    return rescaled_numbers;\n\
    }\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "tmpv7482gbq: /tmp/tmpv7482gbq.cpp:16: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number / numbers.size());\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: "tmpq64pillm: /tmp/tmpq64pillm.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> result(numbers.size());\n    for (size_t i =\
    \ 0; i < numbers.size(); ++i) {\n        result[i] = numbers[i] / numbers[0];\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: "tmp3pioz5qs: /tmp/tmp3pioz5qs.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> rescaled_numbers(numbers.begin(), numbers.end());\n\
    \    float min_number = std::numeric_limits<float>::min();\n    float max_number\
    \ = std::numeric_limits<float>::max();\n    float min_rescaled_number = std::numeric_limits<float>::min();\n\
    \    float max_rescaled_number = std::numeric_limits<float>::max();\n    for (size_t\
    \ i = 0; i < rescaled_numbers.size(); ++i) {\n        rescaled_numbers[i] = numbers[i]\
    \ - min_number;\n        min_rescaled_number = std::min(min_rescaled_number, rescaled_numbers[i]);\n\
    \        max_rescaled_number = std::max(max_rescaled_number, rescaled_numbers[i]);\n\
    \    }\n    rescaled_numbers[0] = min_rescaled_number;\n    rescaled_numbers[rescaled_numbers.size()\
    \ - 1] = max_rescaled_number;\n    return rescaled_numbers;\n}\nint main() {\n\
    \    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "tmp1bbw2whd: /tmp/tmp1bbw2whd.cpp:25: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ > 1);\n    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    for (float number : numbers) {\n        rescaled_numbers.push_back(number\
    \ / numbers[0]);\n    }\n    return rescaled_numbers;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "tmprnidzmvr: /tmp/tmprnidzmvr.cpp:18: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers(numbers.size());\n    float smallest_number = numbers[0];\n\
    \    float largest_number = numbers[0];\n    for (size_t i = 0; i < numbers.size();\
    \ i++) {\n        rescaled_numbers[i] = numbers[i] - smallest_number;\n      \
    \  smallest_number = std::min(smallest_number, numbers[i]);\n        largest_number\
    \ = std::max(largest_number, numbers[i]);\n    }\n    float scale = 1.0f / (largest_number\
    \ - smallest_number);\n    for (size_t i = 0; i < numbers.size(); i++) {\n   \
    \     rescaled_numbers[i] *= scale;\n    }\n    return rescaled_numbers;\n}\n\
    int main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "tmpv9k6q412: /tmp/tmpv9k6q412.cpp:25: int main(): Assertion `candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    for (float number : numbers) {\n        rescaled_numbers.push_back(number\
    \ / numbers.size());\n    }\n    return rescaled_numbers;\n}\nint main() {\n \
    \   auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "tmpt4e5ykwp: /tmp/tmpt4e5ykwp.cpp:18: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    float min = *std::min_element(numbers.begin(), numbers.end());\n\
    \    float max = *std::max_element(numbers.begin(), numbers.end());\n    float\
    \ range = max - min;\n    float scale = 1.0f / range;\n    std::vector<float>\
    \ rescaled_numbers;\n    for (float number : numbers) {\n        rescaled_numbers.push_back(number\
    \ * scale);\n    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate\
    \ = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0, 49.9})))\
    \ == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "tmp6hnauqpm: /tmp/tmp6hnauqpm.cpp:21: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    for (float number : numbers) {\n        rescaled_numbers.push_back(number\
    \ / numbers[0]);\n    }\n    return rescaled_numbers;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "tmph82rq5bs: /tmp/tmph82rq5bs.cpp:18: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ result;\n    float min = *std::min_element(numbers.begin(), numbers.end());\n\
    \    float max = *std::max_element(numbers.begin(), numbers.end());\n    float\
    \ scale = 1.0f / (max - min);\n    for (float number : numbers) {\n        result.push_back(number\
    \ * scale);\n    }\n    return result;\n}\nint main() {\n    auto candidate =\
    \ rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0, 49.9}))) ==\
    \ (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "tmp4b8rmqx0: /tmp/tmp4b8rmqx0.cpp:19: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number / numbers.size());\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: "tmp_yt1wqi2: /tmp/tmp_yt1wqi2.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number);\n        rescaled_numbers.push_back(number);\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: "tmp8pgw4aei: /tmp/tmp8pgw4aei.cpp:18: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(std::min(std::max(number,\
    \ 0.0f), 1.0f));\n    }\n    return rescaled_numbers;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "tmpvqvuq7fy: /tmp/tmpvqvuq7fy.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ > 1);\n    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    for (float number : numbers) {\n        rescaled_numbers.push_back(number\
    \ / numbers[0]);\n    }\n    return rescaled_numbers;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "tmphz0umv6r: /tmp/tmphz0umv6r.cpp:18: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled;\n    rescaled.reserve(numbers.size());\n    for (float number : numbers)\
    \ {\n        rescaled.push_back(number / numbers.size());\n    }\n    return rescaled;\n\
    }\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "tmpn2v2_9b_: /tmp/tmpn2v2_9b_.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    for (float number : numbers) {\n        rescaled_numbers.push_back(number);\n\
    \        rescaled_numbers.push_back(number);\n    }\n    return rescaled_numbers;\n\
    }\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "tmpph9_p199: /tmp/tmpph9_p199.cpp:19: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (auto\
    \ number : numbers) {\n        rescaled_numbers.push_back(number / numbers.size());\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: "tmpzmbvino0: /tmp/tmpzmbvino0.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (auto\
    \ number : numbers) {\n        rescaled_numbers.push_back(number / numbers.size());\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: "tmp547dtmkc: /tmp/tmp547dtmkc.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number / numbers.size());\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: "tmp71w2ahfd: /tmp/tmp71w2ahfd.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number / numbers[0]);\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: "tmpa33mwh88: /tmp/tmpa33mwh88.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number / numbers.size());\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: "tmpqaf8mbvc: /tmp/tmpqaf8mbvc.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number / numbers.size());\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: "tmptdso9fks: /tmp/tmptdso9fks.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ > 1);\n    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    for (float number : numbers) {\n        rescaled_numbers.push_back(number\
    \ / numbers[0]);\n    }\n    return rescaled_numbers;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "tmpuz7vyqqu: /tmp/tmpuz7vyqqu.cpp:18: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(std::min(std::max(number,\
    \ 0.0f), 1.0f));\n    }\n    return rescaled_numbers;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "tmpzq9z8gqq: /tmp/tmpzq9z8gqq.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ result;\n    float min = std::numeric_limits<float>::max();\n    float max =\
    \ std::numeric_limits<float>::min();\n    for (float number : numbers) {\n   \
    \     min = std::min(min, number);\n        max = std::max(max, number);\n   \
    \ }\n    for (float number : numbers) {\n        result.push_back(number * (max\
    \ - min) / numbers.size());\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "tmpoj6ntkob: /tmp/tmpoj6ntkob.cpp:22: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> rescaled_numbers(numbers.begin(), numbers.end());\n\
    \    float min_number = std::numeric_limits<float>::min();\n    float max_number\
    \ = std::numeric_limits<float>::max();\n    float min_rescaled_number = std::numeric_limits<float>::min();\n\
    \    float max_rescaled_number = std::numeric_limits<float>::max();\n    for (float\
    \ number : numbers) {\n        min_rescaled_number = std::min(min_rescaled_number,\
    \ number);\n        max_rescaled_number = std::max(max_rescaled_number, number);\n\
    \    }\n    for (float number : numbers) {\n        rescaled_numbers[numbers.find(number)]\
    \ *= (max_rescaled_number - min_rescaled_number) / (max_number - min_number);\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmppb_lvgt3.cpp: In function \u2018std::vector<float> rescale_to_unit(std::vector<float>)\u2019\
    :\n/tmp/tmppb_lvgt3.cpp:19:34: error: \u2018class std::vector<float>\u2019 has\
    \ no member named \u2018find\u2019\n   19 |         rescaled_numbers[numbers.find(number)]\
    \ *= (max_rescaled_number - min_rescaled_number) / (max_number - min_number);\n\
    \      |                                  ^~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number / numbers[0]);\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: "tmp9s1_cdro: /tmp/tmp9s1_cdro.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> rescaled_numbers(numbers.size());\n    float\
    \ min_number = numbers[0];\n    float max_number = numbers[0];\n    for (size_t\
    \ i = 1; i < numbers.size(); i++) {\n        min_number = std::min(min_number,\
    \ numbers[i]);\n        max_number = std::max(max_number, numbers[i]);\n    }\n\
    \    for (size_t i = 0; i < numbers.size(); i++) {\n        rescaled_numbers[i]\
    \ = numbers[i] - min_number;\n        rescaled_numbers[i] /= (max_number - min_number);\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    for (auto number : numbers) {\n        rescaled_numbers.push_back(number\
    \ / numbers[0]);\n    }\n    return rescaled_numbers;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "tmp92p8j3cl: /tmp/tmp92p8j3cl.cpp:18: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number / numbers.size());\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: "tmpn5j7yz3p: /tmp/tmpn5j7yz3p.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> result;\n    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    float scale = 1.0f / (max - min);\n    for (float number : numbers) {\n \
    \       result.push_back(number * scale);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "tmpjf276zso: /tmp/tmpjf276zso.cpp:20: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> rescaled_numbers(numbers.size());\n    float\
    \ smallest_number = numbers[0];\n    float largest_number = numbers[0];\n    for\
    \ (size_t i = 1; i < numbers.size(); i++) {\n        smallest_number = std::min(smallest_number,\
    \ numbers[i]);\n        largest_number = std::max(largest_number, numbers[i]);\n\
    \    }\n    for (size_t i = 0; i < numbers.size(); i++) {\n        rescaled_numbers[i]\
    \ = numbers[i] - smallest_number;\n        rescaled_numbers[i] /= (largest_number\
    \ - smallest_number);\n    }\n    return rescaled_numbers;\n}\nint main() {\n\
    \    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number / numbers.size());\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: "tmpfq830o4n: /tmp/tmpfq830o4n.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number);\n        rescaled_numbers.push_back(number);\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: "tmpw5vwewhv: /tmp/tmpw5vwewhv.cpp:18: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number / numbers.size());\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: "tmpfyqfyu9a: /tmp/tmpfyqfyu9a.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> rescaled_numbers(numbers.size());\n    float\
    \ min_number = std::numeric_limits<float>::max();\n    float max_number = std::numeric_limits<float>::min();\n\
    \    for (size_t i = 0; i < numbers.size(); i++) {\n        rescaled_numbers[i]\
    \ = numbers[i] - min_number;\n        min_number = std::min(min_number, numbers[i]);\n\
    \        max_number = std::max(max_number, numbers[i]);\n    }\n    float scale\
    \ = 1.0f / (max_number - min_number);\n    for (size_t i = 0; i < numbers.size();\
    \ i++) {\n        rescaled_numbers[i] *= scale;\n    }\n    return rescaled_numbers;\n\
    }\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "tmp0w89e8ix: /tmp/tmp0w89e8ix.cpp:25: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    float min = *std::min_element(numbers.begin(), numbers.end());\n\
    \    float max = *std::max_element(numbers.begin(), numbers.end());\n    float\
    \ scale = max - min;\n    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    for (auto number : numbers) {\n        rescaled_numbers.push_back(number\
    \ * scale + min);\n    }\n    return rescaled_numbers;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "tmpxmx_qg0_: /tmp/tmpxmx_qg0_.cpp:21: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ > 1);\n    std::vector<float> rescaled_numbers(numbers.size());\n    float min_number\
    \ = numbers[0];\n    float max_number = numbers[0];\n    for (size_t i = 1; i\
    \ < numbers.size(); i++) {\n        min_number = std::min(min_number, numbers[i]);\n\
    \        max_number = std::max(max_number, numbers[i]);\n    }\n    for (size_t\
    \ i = 0; i < numbers.size(); i++) {\n        rescaled_numbers[i] = numbers[i]\
    \ - min_number;\n        rescaled_numbers[i] /= (max_number - min_number);\n \
    \   }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number / numbers.size());\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: "tmp10b8l2_g: /tmp/tmp10b8l2_g.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number / numbers.size());\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: "tmp5v229hmz: /tmp/tmp5v229hmz.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number);\n    }\n  \
    \  float smallest_number = rescaled_numbers[0];\n    float largest_number = rescaled_numbers[0];\n\
    \    for (float number : rescaled_numbers) {\n        if (number < smallest_number)\
    \ {\n            smallest_number = number;\n        }\n        if (number > largest_number)\
    \ {\n            largest_number = number;\n        }\n    }\n    float scale =\
    \ 1.0f / (largest_number - smallest_number);\n    for (float number : rescaled_numbers)\
    \ {\n        rescaled_number *= scale;\n    }\n    return rescaled_numbers;\n\
    }\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpcn6_a3f0.cpp: In function \u2018std::vector<float> rescale_to_unit(std::vector<float>)\u2019\
    :\n/tmp/tmpcn6_a3f0.cpp:25:9: error: \u2018rescaled_number\u2019 was not declared\
    \ in this scope; did you mean \u2018rescaled_numbers\u2019?\n   25 |         rescaled_number\
    \ *= scale;\n      |         ^~~~~~~~~~~~~~~\n      |         rescaled_numbers\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> rescaled_numbers(numbers.size());\n    float\
    \ min_number = numbers[0];\n    float max_number = numbers[0];\n    for (size_t\
    \ i = 1; i < numbers.size(); ++i) {\n        if (numbers[i] < min_number) {\n\
    \            min_number = numbers[i];\n        }\n        if (numbers[i] > max_number)\
    \ {\n            max_number = numbers[i];\n        }\n    }\n    float scale =\
    \ max_number - min_number;\n    for (size_t i = 0; i < numbers.size(); ++i) {\n\
    \        rescaled_numbers[i] = numbers[i] - min_number;\n        rescaled_numbers[i]\
    \ *= scale;\n    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate\
    \ = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0, 49.9})))\
    \ == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "tmp9ajyodcl: /tmp/tmp9ajyodcl.cpp:29: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    float min = *std::min_element(numbers.begin(), numbers.end());\n\
    \    float max = *std::max_element(numbers.begin(), numbers.end());\n    float\
    \ scale = 1.0f / (max - min);\n    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    for (float number : numbers) {\n        rescaled_numbers.push_back(number\
    \ * scale);\n    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate\
    \ = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0, 49.9})))\
    \ == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "tmpjuj7vink: /tmp/tmpjuj7vink.cpp:21: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (auto\
    \ number : numbers) {\n        rescaled_numbers.push_back(number / numbers.size());\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: "tmp1j8vc0yc: /tmp/tmp1j8vc0yc.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> result(numbers.size());\n    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    float scale = max - min;\n    for (size_t i = 0; i < numbers.size(); ++i)\
    \ {\n        result[i] = numbers[i] - min;\n        result[i] *= 1.0 / scale;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ > 1);\n    std::vector<float> rescaled_numbers(numbers.size());\n    float smallest_number\
    \ = numbers[0];\n    float largest_number = numbers[0];\n    for (size_t i = 1;\
    \ i < numbers.size(); ++i) {\n        smallest_number = std::min(smallest_number,\
    \ numbers[i]);\n        largest_number = std::max(largest_number, numbers[i]);\n\
    \    }\n    float scale = 1.0f / (largest_number - smallest_number);\n    for\
    \ (size_t i = 0; i < numbers.size(); ++i) {\n        rescaled_numbers[i] = numbers[i]\
    \ * scale;\n    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate\
    \ = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0, 49.9})))\
    \ == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "tmpm7cbgvsv: /tmp/tmpm7cbgvsv.cpp:24: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    float min = *std::min_element(numbers.begin(), numbers.end());\n\
    \    float max = *std::max_element(numbers.begin(), numbers.end());\n    float\
    \ range = max - min;\n    float scale = 1.0f / range;\n    std::vector<float>\
    \ rescaled_numbers;\n    for (float number : numbers) {\n        rescaled_numbers.push_back(number\
    \ * scale);\n    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate\
    \ = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0, 49.9})))\
    \ == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "tmpuil07v0o: /tmp/tmpuil07v0o.cpp:21: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
