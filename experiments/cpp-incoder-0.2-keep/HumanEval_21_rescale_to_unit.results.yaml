language: cpp
name: HumanEval_21_rescale_to_unit
results:
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    for (float number : numbers) {\n        rescaled_numbers.push_back(number);\n\
    \        rescaled_numbers.push_back(number);\n    }\n    return rescaled_numbers;\n\
    }\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  status: Exception
  stderr: 'tmp6yxppn9t: /tmp/tmp6yxppn9t.cpp:19: int main(): Assertion `candidate((std::vector<float>({2.0,
    49.9}))) == (std::vector<float>({0.0, 1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122603
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number);\n        rescaled_numbers.push_back(number);\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  status: Exception
  stderr: 'tmpzvpy3_40: /tmp/tmpzvpy3_40.cpp:18: int main(): Assertion `candidate((std::vector<float>({2.0,
    49.9}))) == (std::vector<float>({0.0, 1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122603
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (auto\
    \ number : numbers) {\n        rescaled_numbers.push_back(number / numbers.back());\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  status: Exception
  stderr: 'tmpirfdc8jx: /tmp/tmpirfdc8jx.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,
    49.9}))) == (std::vector<float>({0.0, 1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122603
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number);\n        rescaled_numbers.push_back(number);\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  status: Exception
  stderr: 'tmpzvpy3_40: /tmp/tmpzvpy3_40.cpp:18: int main(): Assertion `candidate((std::vector<float>({2.0,
    49.9}))) == (std::vector<float>({0.0, 1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122603
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(std::min(std::max(number,\
    \ 0.0f), 1.0f));\n    }\n    return rescaled_numbers;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  status: Exception
  stderr: 'tmp5nffamts: /tmp/tmp5nffamts.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,
    49.9}))) == (std::vector<float>({0.0, 1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122603
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number / numbers.size());\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  status: Exception
  stderr: 'tmpq5pfrjg3: /tmp/tmpq5pfrjg3.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,
    49.9}))) == (std::vector<float>({0.0, 1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122603
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(std::min(std::max(number,\
    \ 0.0f), 1.0f));\n    }\n    return rescaled_numbers;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  status: Exception
  stderr: 'tmp5nffamts: /tmp/tmp5nffamts.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,
    49.9}))) == (std::vector<float>({0.0, 1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122603
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(std::min(std::max(number,\
    \ 0.0f), 1.0f));\n    }\n    return rescaled_numbers;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  status: Exception
  stderr: 'tmp5nffamts: /tmp/tmp5nffamts.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,
    49.9}))) == (std::vector<float>({0.0, 1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122603
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ result;\n    float min = std::numeric_limits<float>::max();\n    float max =\
    \ std::numeric_limits<float>::min();\n    for (float number : numbers) {\n   \
    \     min = std::min(min, number);\n        max = std::max(max, number);\n   \
    \ }\n    for (float number : numbers) {\n        result.push_back(number * (max\
    \ - min) / numbers.size() + min);\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  status: Exception
  stderr: 'tmpxqdyolmq: /tmp/tmpxqdyolmq.cpp:22: int main(): Assertion `candidate((std::vector<float>({2.0,
    49.9}))) == (std::vector<float>({0.0, 1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122603
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> rescaled_numbers(numbers.size());\n    float\
    \ min_number = numbers[0];\n    float max_number = numbers[0];\n    for (size_t\
    \ i = 1; i < numbers.size(); ++i) {\n        min_number = std::min(min_number,\
    \ numbers[i]);\n        max_number = std::max(max_number, numbers[i]);\n    }\n\
    \    for (size_t i = 0; i < numbers.size(); ++i) {\n        rescaled_numbers[i]\
    \ = numbers[i] - min_number;\n        rescaled_numbers[i] /= (max_number - min_number);\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122603
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number);\n        rescaled_numbers.push_back(number);\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  status: Exception
  stderr: 'tmpzvpy3_40: /tmp/tmpzvpy3_40.cpp:18: int main(): Assertion `candidate((std::vector<float>({2.0,
    49.9}))) == (std::vector<float>({0.0, 1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122603
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ > 1);\n    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    for (float number : numbers) {\n        rescaled_numbers.push_back(number\
    \ / numbers[0]);\n    }\n    return rescaled_numbers;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  status: Exception
  stderr: 'tmp9k7yjav_: /tmp/tmp9k7yjav_.cpp:18: int main(): Assertion `candidate((std::vector<float>({2.0,
    49.9}))) == (std::vector<float>({0.0, 1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122603
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> new_numbers;\n    new_numbers.reserve(numbers.size());\n\
    \    for (auto number : numbers) {\n        new_numbers.push_back(number / numbers.size());\n\
    \    }\n    return new_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  status: Exception
  stderr: 'tmpmgind52z: /tmp/tmpmgind52z.cpp:18: int main(): Assertion `candidate((std::vector<float>({2.0,
    49.9}))) == (std::vector<float>({0.0, 1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122603
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    for (float number : numbers) {\n        rescaled_numbers.push_back(number\
    \ / numbers.size());\n    }\n    return rescaled_numbers;\n}\nint main() {\n \
    \   auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  status: Exception
  stderr: 'tmpwsarx236: /tmp/tmpwsarx236.cpp:18: int main(): Assertion `candidate((std::vector<float>({2.0,
    49.9}))) == (std::vector<float>({0.0, 1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122603
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled;\n    rescaled.reserve(numbers.size());\n    for (float number : numbers)\
    \ {\n        rescaled.push_back(number / numbers.size());\n    }\n    return rescaled;\n\
    }\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  status: Exception
  stderr: 'tmpw9_uvql1: /tmp/tmpw9_uvql1.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,
    49.9}))) == (std::vector<float>({0.0, 1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122603
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers(numbers.size());\n    float min_number = std::numeric_limits<float>::max();\n\
    \    float max_number = std::numeric_limits<float>::min();\n    for (size_t i\
    \ = 0; i < numbers.size(); i++) {\n        min_number = std::min(min_number, numbers[i]);\n\
    \        max_number = std::max(max_number, numbers[i]);\n        rescaled_numbers[i]\
    \ = numbers[i] - min_number;\n    }\n    for (size_t i = 0; i < numbers.size();\
    \ i++) {\n        rescaled_numbers[i] = rescaled_numbers[i] / max_number - min_number;\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  status: Exception
  stderr: 'tmpvgswaaa4: /tmp/tmpvgswaaa4.cpp:23: int main(): Assertion `candidate((std::vector<float>({2.0,
    49.9}))) == (std::vector<float>({0.0, 1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122603
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ result;\n    float min = *std::min_element(numbers.begin(), numbers.end());\n\
    \    float max = *std::max_element(numbers.begin(), numbers.end());\n    float\
    \ range = (max - min);\n    for (float number : numbers) {\n        result.push_back(number\
    \ - min);\n    }\n    for (float number : result) {\n        assert(number >=\
    \ 0.0);\n        assert(number <= 1.0);\n    }\n    for (float number : result)\
    \ {\n        assert(number >= 0.0);\n        assert(number <= 1.0);\n    }\n \
    \   return result;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n \
    \   assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  status: Exception
  stderr: 'tmp4yg041zk: /tmp/tmp4yg041zk.cpp:17: std::vector<float> rescale_to_unit(std::vector<float>):
    Assertion `number <= 1.0'' failed.

    '
  stdout: ''
  timestamp: 1660122603
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    for (float number : numbers) {\n        rescaled_numbers.push_back(number\
    \ / numbers[0]);\n    }\n    return rescaled_numbers;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  status: Exception
  stderr: 'tmpra80_zla: /tmp/tmpra80_zla.cpp:18: int main(): Assertion `candidate((std::vector<float>({2.0,
    49.9}))) == (std::vector<float>({0.0, 1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122603
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> new_numbers;\n    new_numbers.reserve(numbers.size());\n\
    \    for (auto number : numbers) {\n        new_numbers.push_back(number);\n \
    \   }\n    for (auto number : numbers) {\n        new_numbers.push_back(number);\n\
    \    }\n    return new_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  status: Exception
  stderr: 'tmpde9xuxk0: /tmp/tmpde9xuxk0.cpp:21: int main(): Assertion `candidate((std::vector<float>({2.0,
    49.9}))) == (std::vector<float>({0.0, 1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122603
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    float min_number = std::numeric_limits<float>::min();\n    float max_number\
    \ = std::numeric_limits<float>::max();\n    for (float number : numbers) {\n \
    \       rescaled_numbers.push_back(number * (max_number - min_number) / (numbers.back()\
    \ - numbers.front()));\n        min_number = std::min(min_number, number);\n \
    \       max_number = std::max(max_number, number);\n    }\n    return rescaled_numbers;\n\
    }\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  status: Exception
  stderr: 'tmpunoib0x2: /tmp/tmpunoib0x2.cpp:22: int main(): Assertion `candidate((std::vector<float>({2.0,
    49.9}))) == (std::vector<float>({0.0, 1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122603
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ > 1);\n    std::vector<float> rescaled_numbers(numbers.size());\n    float smallest_number\
    \ = numbers[0];\n    float largest_number = numbers[0];\n    for (size_t i = 1;\
    \ i < numbers.size(); ++i) {\n        smallest_number = std::min(smallest_number,\
    \ numbers[i]);\n        largest_number = std::max(largest_number, numbers[i]);\n\
    \    }\n    for (size_t i = 0; i < numbers.size(); ++i) {\n        rescaled_numbers[i]\
    \ = numbers[i] - smallest_number / largest_number;\n    }\n    return rescaled_numbers;\n\
    }\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  status: Exception
  stderr: 'tmpqwxg25mm: /tmp/tmpqwxg25mm.cpp:23: int main(): Assertion `candidate((std::vector<float>({2.0,
    49.9}))) == (std::vector<float>({0.0, 1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122603
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number / numbers[0]);\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  status: Exception
  stderr: 'tmpxglfz9u3: /tmp/tmpxglfz9u3.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,
    49.9}))) == (std::vector<float>({0.0, 1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122603
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number / numbers[0]);\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  status: Exception
  stderr: 'tmpxglfz9u3: /tmp/tmpxglfz9u3.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,
    49.9}))) == (std::vector<float>({0.0, 1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122603
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number / numbers[0]);\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  status: Exception
  stderr: 'tmpxglfz9u3: /tmp/tmpxglfz9u3.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,
    49.9}))) == (std::vector<float>({0.0, 1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122603
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    float min = *std::min_element(numbers.begin(), numbers.end());\n\
    \    float max = *std::max_element(numbers.begin(), numbers.end());\n    float\
    \ scale = 1.0f / (max - min);\n    for (float number : numbers) {\n        number\
    \ *= scale;\n    }\n    return numbers;\n}\nint main() {\n    auto candidate =\
    \ rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0, 49.9}))) ==\
    \ (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  status: Exception
  stderr: 'tmpaoq83dkv: /tmp/tmpaoq83dkv.cpp:19: int main(): Assertion `candidate((std::vector<float>({2.0,
    49.9}))) == (std::vector<float>({0.0, 1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122603
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    float\
    \ min = *std::min_element(numbers.begin(), numbers.end());\n    float max = *std::max_element(numbers.begin(),\
    \ numbers.end());\n    float range = max - min;\n    for (auto number : numbers)\
    \ {\n        rescaled_numbers.push_back(number * (range / numbers.back()));\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  status: Exception
  stderr: 'tmpi681h9md: /tmp/tmpi681h9md.cpp:20: int main(): Assertion `candidate((std::vector<float>({2.0,
    49.9}))) == (std::vector<float>({0.0, 1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122603
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    float smallest = numbers[0];\n    float largest = numbers[0];\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number - smallest);\n\
    \        smallest = std::min(smallest, number);\n        largest = std::max(largest,\
    \ number);\n    }\n    rescaled_numbers.push_back(1.0f - largest);\n    return\
    \ rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  status: Exception
  stderr: 'tmpjsfqfxwf: /tmp/tmpjsfqfxwf.cpp:23: int main(): Assertion `candidate((std::vector<float>({2.0,
    49.9}))) == (std::vector<float>({0.0, 1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122603
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    float min = *std::min_element(numbers.begin(), numbers.end());\n    float\
    \ max = *std::max_element(numbers.begin(), numbers.end());\n    float scale =\
    \ 1.0f / (max - min);\n    for (float number : numbers) {\n        rescaled_numbers.push_back(number\
    \ * scale);\n    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate\
    \ = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0, 49.9})))\
    \ == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  status: Exception
  stderr: 'tmpxd1wd694: /tmp/tmpxd1wd694.cpp:21: int main(): Assertion `candidate((std::vector<float>({2.0,
    49.9}))) == (std::vector<float>({0.0, 1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122603
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number / numbers.size());\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  status: Exception
  stderr: 'tmpq5pfrjg3: /tmp/tmpq5pfrjg3.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,
    49.9}))) == (std::vector<float>({0.0, 1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122603
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (auto\
    \ number : numbers) {\n        rescaled_numbers.push_back(std::min(std::max(number,\
    \ 0.0f), 1.0f));\n    }\n    return rescaled_numbers;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  status: Exception
  stderr: 'tmpbijot1b0: /tmp/tmpbijot1b0.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,
    49.9}))) == (std::vector<float>({0.0, 1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122603
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    float smallest_number = numbers[0];\n    float largest_number = numbers[0];\n\
    \    for (float number : numbers) {\n        smallest_number = std::min(smallest_number,\
    \ number);\n        largest_number = std::max(largest_number, number);\n    }\n\
    \    float scale = 1.0f / (largest_number - smallest_number);\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(smallest_number + (number\
    \ - smallest_number) * scale);\n    }\n    return rescaled_numbers;\n}\nint main()\
    \ {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  status: Exception
  stderr: 'tmpe5w7sjno: /tmp/tmpe5w7sjno.cpp:25: int main(): Assertion `candidate((std::vector<float>({2.0,
    49.9}))) == (std::vector<float>({0.0, 1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122603
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ > 1);\n    std::vector<float> result(numbers.begin(), numbers.end());\n    float\
    \ min = *std::min_element(numbers.begin(), numbers.end());\n    float max = *std::max_element(numbers.begin(),\
    \ numbers.end());\n    float scale = 1.0f / (max - min);\n    for (auto number\
    \ : numbers) {\n        result[numbers.find(number) - numbers.begin()] = scale\
    \ * number;\n    }\n    return result;\n}\nint main() {\n    auto candidate =\
    \ rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0, 49.9}))) ==\
    \ (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmply2z7zeu.cpp: In function \u2018std::vector<float> rescale_to_unit(std::vector<float>)\u2019\
    :\n/tmp/tmply2z7zeu.cpp:14:24: error: \u2018class std::vector<float>\u2019 has\
    \ no member named \u2018find\u2019\n   14 |         result[numbers.find(number)\
    \ - numbers.begin()] = scale * number;\n      |                        ^~~~\n"
  stdout: ''
  timestamp: 1660122602
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    for (float number : numbers) {\n        rescaled_numbers.push_back(number);\n\
    \        rescaled_numbers.push_back(number);\n    }\n    return rescaled_numbers;\n\
    }\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  status: Exception
  stderr: 'tmp6yxppn9t: /tmp/tmp6yxppn9t.cpp:19: int main(): Assertion `candidate((std::vector<float>({2.0,
    49.9}))) == (std::vector<float>({0.0, 1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122603
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ > 1);\n    std::vector<float> result(numbers.size());\n    float min = std::numeric_limits<float>::min();\n\
    \    float max = std::numeric_limits<float>::max();\n    for (size_t i = 0; i\
    \ < numbers.size(); i++) {\n        result[i] = numbers[i] - min;\n        result[i]\
    \ = result[i] / (max - min);\n    }\n    return result;\n}\nint main() {\n   \
    \ auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  status: Exception
  stderr: 'tmp7hp498tt: /tmp/tmp7hp498tt.cpp:20: int main(): Assertion `candidate((std::vector<float>({2.0,
    49.9}))) == (std::vector<float>({0.0, 1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122603
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    float min = *std::min_element(numbers.begin(), numbers.end());\n    float\
    \ max = *std::max_element(numbers.begin(), numbers.end());\n    float scale =\
    \ 1.0f / (max - min);\n    for (float number : numbers) {\n        rescaled_numbers.push_back(number\
    \ * scale);\n    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate\
    \ = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0, 49.9})))\
    \ == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  status: Exception
  stderr: 'tmpxd1wd694: /tmp/tmpxd1wd694.cpp:21: int main(): Assertion `candidate((std::vector<float>({2.0,
    49.9}))) == (std::vector<float>({0.0, 1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122603
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number / numbers.size());\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  status: Exception
  stderr: 'tmpq5pfrjg3: /tmp/tmpq5pfrjg3.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,
    49.9}))) == (std::vector<float>({0.0, 1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122603
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers(numbers.size());\n    for (size_t i = 0; i < numbers.size();\
    \ i++) {\n        rescaled_numbers[i] = numbers[i] / numbers[0];\n    }\n    return\
    \ rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  status: Exception
  stderr: 'tmp8myz3lx3: /tmp/tmp8myz3lx3.cpp:16: int main(): Assertion `candidate((std::vector<float>({2.0,
    49.9}))) == (std::vector<float>({0.0, 1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122603
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(std::min(std::max(number,\
    \ 0.0f), 1.0f));\n    }\n    return rescaled_numbers;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  status: Exception
  stderr: 'tmp5nffamts: /tmp/tmp5nffamts.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,
    49.9}))) == (std::vector<float>({0.0, 1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122603
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> new_numbers;\n    new_numbers.reserve(numbers.size());\n\
    \    for (float number : numbers) {\n        new_numbers.push_back(number);\n\
    \    }\n    for (float number : numbers) {\n        new_numbers.push_back(number\
    \ / new_numbers.size());\n    }\n    return new_numbers;\n}\nint main() {\n  \
    \  auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  status: Exception
  stderr: 'tmpr7l1n7ik: /tmp/tmpr7l1n7ik.cpp:21: int main(): Assertion `candidate((std::vector<float>({2.0,
    49.9}))) == (std::vector<float>({0.0, 1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122603
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> result;\n    float min = numbers[0];\n    float\
    \ max = numbers[0];\n    for (auto number : numbers) {\n        min = std::min(min,\
    \ number);\n        max = std::max(max, number);\n    }\n    for (auto number\
    \ : numbers) {\n        result.push_back(number - min) / (max - min);\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpchmtnpi1.cpp: In function \u2018std::vector<float> rescale_to_unit(std::vector<float>)\u2019\
    :\n/tmp/tmpchmtnpi1.cpp:17:40: error: invalid operands of types \u2018void\u2019\
    \ and \u2018float\u2019 to binary \u2018operator/\u2019\n   17 |         result.push_back(number\
    \ - min) / (max - min);\n      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^ ~~~~~~~~~~~\n\
    \      |                         |                     |\n      |            \
    \             void                  float\n"
  stdout: ''
  timestamp: 1660122603
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ result;\n    float min = std::numeric_limits<float>::max();\n    float max =\
    \ std::numeric_limits<float>::min();\n    for (float number : numbers) {\n   \
    \     min = std::min(min, number);\n        max = std::max(max, number);\n   \
    \ }\n    for (float number : numbers) {\n        result.push_back(number - min)\
    \ / (max - min);\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0, 49.9})))\
    \ == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpnh9fy07h.cpp: In function \u2018std::vector<float> rescale_to_unit(std::vector<float>)\u2019\
    :\n/tmp/tmpnh9fy07h.cpp:16:40: error: invalid operands of types \u2018void\u2019\
    \ and \u2018float\u2019 to binary \u2018operator/\u2019\n   16 |         result.push_back(number\
    \ - min) / (max - min);\n      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^ ~~~~~~~~~~~\n\
    \      |                         |                     |\n      |            \
    \             void                  float\n"
  stdout: ''
  timestamp: 1660122602
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number / numbers[0]);\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  status: Exception
  stderr: 'tmpxglfz9u3: /tmp/tmpxglfz9u3.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,
    49.9}))) == (std::vector<float>({0.0, 1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122603
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(std::min(std::max(number,\
    \ 0.0f), 1.0f));\n    }\n    return rescaled_numbers;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  status: Exception
  stderr: 'tmp5nffamts: /tmp/tmp5nffamts.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,
    49.9}))) == (std::vector<float>({0.0, 1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122603
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ result;\n    float min = *std::min_element(numbers.begin(), numbers.end());\n\
    \    float max = *std::max_element(numbers.begin(), numbers.end());\n    float\
    \ range = max - min;\n    float scale = 1.0f / range;\n    for (float number :\
    \ numbers) {\n        result.push_back(number * scale);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  status: Exception
  stderr: 'tmpenxekidg: /tmp/tmpenxekidg.cpp:20: int main(): Assertion `candidate((std::vector<float>({2.0,
    49.9}))) == (std::vector<float>({0.0, 1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122603
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number / numbers.size());\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  status: Exception
  stderr: 'tmpq5pfrjg3: /tmp/tmpq5pfrjg3.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,
    49.9}))) == (std::vector<float>({0.0, 1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122603
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    for (float number : numbers) {\n        rescaled_numbers.push_back(number\
    \ / numbers[0]);\n    }\n    return rescaled_numbers;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  status: Exception
  stderr: 'tmpra80_zla: /tmp/tmpra80_zla.cpp:18: int main(): Assertion `candidate((std::vector<float>({2.0,
    49.9}))) == (std::vector<float>({0.0, 1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122603
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(std::min(std::max(number,\
    \ 0.0f), 1.0f));\n    }\n    return rescaled_numbers;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  status: Exception
  stderr: 'tmp5nffamts: /tmp/tmp5nffamts.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,
    49.9}))) == (std::vector<float>({0.0, 1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122603
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    float\
    \ min = std::numeric_limits<float>::min();\n    float max = std::numeric_limits<float>::max();\n\
    \    for (float number : numbers) {\n        rescaled_numbers.push_back(number\
    \ - min) / (max - min);\n    }\n    return rescaled_numbers;\n}\nint main() {\n\
    \    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpi_k5nxz7.cpp: In function \u2018std::vector<float> rescale_to_unit(std::vector<float>)\u2019\
    :\n/tmp/tmpi_k5nxz7.cpp:13:50: error: invalid operands of types \u2018void\u2019\
    \ and \u2018float\u2019 to binary \u2018operator/\u2019\n   13 |         rescaled_numbers.push_back(number\
    \ - min) / (max - min);\n      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^ ~~~~~~~~~~~\n      |                                   |                 \
    \    |\n      |                                   void                  float\n"
  stdout: ''
  timestamp: 1660122603
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    float min = *std::min_element(numbers.begin(), numbers.end());\n\
    \    float max = *std::max_element(numbers.begin(), numbers.end());\n    float\
    \ range = max - min;\n    float scale = 1.0f / range;\n    std::vector<float>\
    \ rescaled_numbers;\n    for (float number : numbers) {\n        rescaled_numbers.push_back(number\
    \ * scale);\n    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate\
    \ = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0, 49.9})))\
    \ == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  status: Exception
  stderr: 'tmpif3g5wm7: /tmp/tmpif3g5wm7.cpp:21: int main(): Assertion `candidate((std::vector<float>({2.0,
    49.9}))) == (std::vector<float>({0.0, 1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122604
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number);\n        rescaled_numbers.push_back(number\
    \ / numbers.size());\n    }\n    return rescaled_numbers;\n}\nint main() {\n \
    \   auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  status: Exception
  stderr: 'tmpccqb_8x8: /tmp/tmpccqb_8x8.cpp:18: int main(): Assertion `candidate((std::vector<float>({2.0,
    49.9}))) == (std::vector<float>({0.0, 1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122603
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number);\n    }\n  \
    \  float smallest_number = *std::min_element(rescaled_numbers.begin(), rescaled_numbers.end());\n\
    \    float largest_number = *std::max_element(rescaled_numbers.begin(), rescaled_numbers.end());\n\
    \    float scale = largest_number - smallest_number;\n    for (float number :\
    \ rescaled_numbers) {\n        rescaled_numbers[rescaled_numbers.size() - 1 -\
    \ rescaled_numbers.find(number)] = number / scale;\n    }\n    return rescaled_numbers;\n\
    }\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpjspg19no.cpp: In function \u2018std::vector<float> rescale_to_unit(std::vector<float>)\u2019\
    :\n/tmp/tmpjspg19no.cpp:17:73: error: \u2018class std::vector<float>\u2019 has\
    \ no member named \u2018find\u2019\n   17 |         rescaled_numbers[rescaled_numbers.size()\
    \ - 1 - rescaled_numbers.find(number)] = number / scale;\n      |            \
    \                                                             ^~~~\n"
  stdout: ''
  timestamp: 1660122603
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number / numbers.size());\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  status: Exception
  stderr: 'tmpq5pfrjg3: /tmp/tmpq5pfrjg3.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,
    49.9}))) == (std::vector<float>({0.0, 1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122603
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ > 1);\n    std::vector<float> new_numbers(numbers.size());\n    for (size_t\
    \ i = 0; i < numbers.size(); i++) {\n        new_numbers[i] = numbers[i] / numbers[0];\n\
    \    }\n    return new_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  status: Exception
  stderr: 'tmp7mgjc8zx: /tmp/tmp7mgjc8zx.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,
    49.9}))) == (std::vector<float>({0.0, 1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122603
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(std::min(std::max(number,\
    \ 0.0f), 1.0f));\n    }\n    return rescaled_numbers;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  status: Exception
  stderr: 'tmp5nffamts: /tmp/tmp5nffamts.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,
    49.9}))) == (std::vector<float>({0.0, 1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122603
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> result;\n    float min = numbers[0];\n    float\
    \ max = numbers[0];\n    for (auto n : numbers) {\n        if (n < min) min =\
    \ n;\n        if (n > max) max = n;\n    }\n    for (auto n : numbers) {\n   \
    \     result.push_back((n - min) / (max - min));\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122603
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    for (float number : numbers) {\n        rescaled_numbers.push_back(number);\n\
    \        rescaled_numbers.push_back(number);\n    }\n    return rescaled_numbers;\n\
    }\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  status: Exception
  stderr: 'tmp6yxppn9t: /tmp/tmp6yxppn9t.cpp:19: int main(): Assertion `candidate((std::vector<float>({2.0,
    49.9}))) == (std::vector<float>({0.0, 1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122603
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    for (float number : numbers) {\n        rescaled_numbers.push_back(number\
    \ / numbers[0]);\n    }\n    return rescaled_numbers;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  status: Exception
  stderr: 'tmpra80_zla: /tmp/tmpra80_zla.cpp:18: int main(): Assertion `candidate((std::vector<float>({2.0,
    49.9}))) == (std::vector<float>({0.0, 1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122603
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    float\
    \ min_number = std::numeric_limits<float>::max();\n    float max_number = std::numeric_limits<float>::min();\n\
    \    for (float number : numbers) {\n        min_number = std::min(min_number,\
    \ number);\n        max_number = std::max(max_number, number);\n        rescaled_numbers.push_back(number\
    \ - min_number);\n    }\n    for (float number : rescaled_numbers) {\n       \
    \ rescaled_numbers.push_back(number / max_number);\n    }\n    return rescaled_numbers;\n\
    }\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  status: Exception
  stderr: 'tmp781_ypt0: /tmp/tmp781_ypt0.cpp:24: int main(): Assertion `candidate((std::vector<float>({2.0,
    49.9}))) == (std::vector<float>({0.0, 1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122603
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> new_numbers;\n    new_numbers.reserve(numbers.size());\n\
    \    for (float number : numbers) {\n        new_numbers.push_back(number);\n\
    \    }\n    float min = new_numbers[0];\n    float max = new_numbers[0];\n   \
    \ for (float number : new_numbers) {\n        min = std::min(min, number);\n \
    \       max = std::max(max, number);\n    }\n    for (float number : new_numbers)\
    \ {\n        number -= min;\n        number /= (max - min);\n        number +=\
    \ 0.5;\n    }\n    return new_numbers;\n}\nint main() {\n    auto candidate =\
    \ rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0, 49.9}))) ==\
    \ (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  status: Exception
  stderr: 'tmprfgr398t: /tmp/tmprfgr398t.cpp:29: int main(): Assertion `candidate((std::vector<float>({2.0,
    49.9}))) == (std::vector<float>({0.0, 1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122603
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number / numbers[0]);\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  status: Exception
  stderr: 'tmpxglfz9u3: /tmp/tmpxglfz9u3.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,
    49.9}))) == (std::vector<float>({0.0, 1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122603
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ > 1);\n    std::vector<float> result;\n    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    float range = max - min;\n    float scale = 1.0f / range;\n    for (float\
    \ number : numbers) {\n        result.push_back(number * scale);\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  status: Exception
  stderr: 'tmpmhv41sds: /tmp/tmpmhv41sds.cpp:21: int main(): Assertion `candidate((std::vector<float>({2.0,
    49.9}))) == (std::vector<float>({0.0, 1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122603
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> result(numbers.size());\n    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    float range = max - min;\n    float scale = 1.0f / range;\n    for (size_t\
    \ i = 0; i < numbers.size(); i++) {\n        result[i] = numbers[i] * scale;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  status: Exception
  stderr: 'tmp15tjsa1i: /tmp/tmp15tjsa1i.cpp:21: int main(): Assertion `candidate((std::vector<float>({2.0,
    49.9}))) == (std::vector<float>({0.0, 1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122603
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    for (float number : numbers) {\n        rescaled_numbers.push_back(number\
    \ / numbers[0]);\n    }\n    return rescaled_numbers;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  status: Exception
  stderr: 'tmpra80_zla: /tmp/tmpra80_zla.cpp:18: int main(): Assertion `candidate((std::vector<float>({2.0,
    49.9}))) == (std::vector<float>({0.0, 1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122603
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number / numbers.size());\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  status: Exception
  stderr: 'tmpq5pfrjg3: /tmp/tmpq5pfrjg3.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,
    49.9}))) == (std::vector<float>({0.0, 1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122603
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    for (float number : numbers) {\n        rescaled_numbers.push_back(number\
    \ / numbers[0]);\n    }\n    return rescaled_numbers;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  status: Exception
  stderr: 'tmpra80_zla: /tmp/tmpra80_zla.cpp:18: int main(): Assertion `candidate((std::vector<float>({2.0,
    49.9}))) == (std::vector<float>({0.0, 1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122603
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number / numbers.size());\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  status: Exception
  stderr: 'tmpq5pfrjg3: /tmp/tmpq5pfrjg3.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,
    49.9}))) == (std::vector<float>({0.0, 1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122603
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> result(numbers.size());\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for (size_t i = 1; i < numbers.size(); i++)\
    \ {\n        min = std::min(min, numbers[i]);\n        max = std::max(max, numbers[i]);\n\
    \    }\n    for (size_t i = 0; i < numbers.size(); i++) {\n        result[i] =\
    \ numbers[i] - min;\n        result[i] /= (max - min);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122602
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    float min = *std::min_element(numbers.begin(), numbers.end());\n\
    \    float max = *std::max_element(numbers.begin(), numbers.end());\n    float\
    \ scale = 1.0f / (max - min);\n    std::vector<float> res(numbers.size());\n \
    \   for (size_t i = 0; i < numbers.size(); ++i) {\n        res[i] = numbers[i]\
    \ * scale;\n    }\n    return res;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  status: Exception
  stderr: 'tmp71igdke2: /tmp/tmp71igdke2.cpp:20: int main(): Assertion `candidate((std::vector<float>({2.0,
    49.9}))) == (std::vector<float>({0.0, 1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122603
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    for (auto number : numbers) {\n        rescaled_numbers.push_back(number\
    \ / numbers[0]);\n    }\n    return rescaled_numbers;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  status: Exception
  stderr: 'tmpiw732tdb: /tmp/tmpiw732tdb.cpp:18: int main(): Assertion `candidate((std::vector<float>({2.0,
    49.9}))) == (std::vector<float>({0.0, 1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122603
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number / numbers.size());\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  status: Exception
  stderr: 'tmpq5pfrjg3: /tmp/tmpq5pfrjg3.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,
    49.9}))) == (std::vector<float>({0.0, 1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122603
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ > 1);\n    std::vector<float> new_numbers(numbers.size());\n    float smallest\
    \ = numbers[0];\n    float largest = numbers[0];\n    for (size_t i = 1; i < numbers.size();\
    \ i++) {\n        smallest = std::min(smallest, numbers[i]);\n        largest\
    \ = std::max(largest, numbers[i]);\n    }\n    for (size_t i = 0; i < numbers.size();\
    \ i++) {\n        new_numbers[i] = numbers[i] - smallest;\n        new_numbers[i]\
    \ /= (largest - smallest);\n    }\n    return new_numbers;\n}\nint main() {\n\
    \    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122603
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    float min = *std::min_element(numbers.begin(), numbers.end());\n\
    \    float max = *std::max_element(numbers.begin(), numbers.end());\n    float\
    \ scale = 1.0f / (max - min);\n    std::vector<float> rescaled_numbers(numbers.size());\n\
    \    for (size_t i = 0; i < numbers.size(); ++i) {\n        rescaled_numbers[i]\
    \ = numbers[i] * scale;\n    }\n    return rescaled_numbers;\n}\nint main() {\n\
    \    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  status: Exception
  stderr: 'tmp1nafultc: /tmp/tmp1nafultc.cpp:20: int main(): Assertion `candidate((std::vector<float>({2.0,
    49.9}))) == (std::vector<float>({0.0, 1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122603
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number / numbers[0]);\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  status: Exception
  stderr: 'tmpxglfz9u3: /tmp/tmpxglfz9u3.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,
    49.9}))) == (std::vector<float>({0.0, 1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122603
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> new_numbers;\n    new_numbers.reserve(numbers.size());\n\
    \    for (float number : numbers) {\n        new_numbers.push_back(number / numbers[0]);\n\
    \    }\n    return new_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  status: Exception
  stderr: 'tmp8_xwx2js: /tmp/tmp8_xwx2js.cpp:18: int main(): Assertion `candidate((std::vector<float>({2.0,
    49.9}))) == (std::vector<float>({0.0, 1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122604
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> rescaled_numbers(numbers.size());\n    float\
    \ smallest_number = numbers[0];\n    float largest_number = numbers[0];\n    for\
    \ (size_t i = 1; i < numbers.size(); ++i) {\n        smallest_number = std::min(smallest_number,\
    \ numbers[i]);\n        largest_number = std::max(largest_number, numbers[i]);\n\
    \    }\n    float scale = 1.0f / (largest_number - smallest_number);\n    for\
    \ (size_t i = 0; i < numbers.size(); ++i) {\n        rescaled_numbers[i] = numbers[i]\
    \ * scale;\n    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate\
    \ = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0, 49.9})))\
    \ == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  status: Exception
  stderr: 'tmpy2bwkwwy: /tmp/tmpy2bwkwwy.cpp:24: int main(): Assertion `candidate((std::vector<float>({2.0,
    49.9}))) == (std::vector<float>({0.0, 1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122605
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ > 1);\n    std::vector<float> rescaled_numbers(numbers.size());\n    float smallest\
    \ = numbers[0];\n    float largest = numbers[0];\n    for (size_t i = 1; i < numbers.size();\
    \ i++) {\n        smallest = std::min(smallest, numbers[i]);\n        largest\
    \ = std::max(largest, numbers[i]);\n    }\n    float scale = largest / smallest;\n\
    \    for (size_t i = 0; i < numbers.size(); i++) {\n        rescaled_numbers[i]\
    \ = numbers[i] * scale;\n    }\n    return rescaled_numbers;\n}\nint main() {\n\
    \    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  status: Exception
  stderr: 'tmp5xgw8snw: /tmp/tmp5xgw8snw.cpp:24: int main(): Assertion `candidate((std::vector<float>({2.0,
    49.9}))) == (std::vector<float>({0.0, 1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122606
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number / numbers[0]);\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  status: Exception
  stderr: 'tmpxglfz9u3: /tmp/tmpxglfz9u3.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,
    49.9}))) == (std::vector<float>({0.0, 1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122603
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    for (float number : numbers) {\n        rescaled_numbers.push_back(number\
    \ / numbers[0]);\n    }\n    return rescaled_numbers;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  status: Exception
  stderr: 'tmpra80_zla: /tmp/tmpra80_zla.cpp:18: int main(): Assertion `candidate((std::vector<float>({2.0,
    49.9}))) == (std::vector<float>({0.0, 1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122603
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number / numbers[0]);\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  status: Exception
  stderr: 'tmpxglfz9u3: /tmp/tmpxglfz9u3.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,
    49.9}))) == (std::vector<float>({0.0, 1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122603
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> result;\n    float min = numbers[0];\n    float\
    \ max = numbers[0];\n    for (auto n : numbers) {\n        if (n < min) min =\
    \ n;\n        if (n > max) max = n;\n    }\n    for (auto n : numbers) {\n   \
    \     result.push_back((n - min) / (max - min));\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122603
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number / numbers.size());\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  status: Exception
  stderr: 'tmpq5pfrjg3: /tmp/tmpq5pfrjg3.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,
    49.9}))) == (std::vector<float>({0.0, 1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122603
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number / numbers[0]);\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  status: Exception
  stderr: 'tmpxglfz9u3: /tmp/tmpxglfz9u3.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,
    49.9}))) == (std::vector<float>({0.0, 1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122603
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number / numbers.size());\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  status: Exception
  stderr: 'tmpq5pfrjg3: /tmp/tmpq5pfrjg3.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,
    49.9}))) == (std::vector<float>({0.0, 1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122603
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> result(numbers.size());\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for (size_t i = 1; i < numbers.size(); ++i)\
    \ {\n        if (numbers[i] < min) {\n            min = numbers[i];\n        }\
    \ else if (numbers[i] > max) {\n            max = numbers[i];\n        }\n   \
    \ }\n    for (size_t i = 0; i < numbers.size(); ++i) {\n        result[i] = numbers[i]\
    \ - min;\n        result[i] /= (max - min);\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122605
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> rescaled;\n    rescaled.reserve(numbers.size());\n\
    \    for (float number : numbers) {\n        rescaled.push_back(number / numbers[0]);\n\
    \    }\n    return rescaled;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  status: Exception
  stderr: 'tmp7nzuvdf4: /tmp/tmp7nzuvdf4.cpp:18: int main(): Assertion `candidate((std::vector<float>({2.0,
    49.9}))) == (std::vector<float>({0.0, 1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122605
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled;\n    rescaled.reserve(numbers.size());\n    for (auto number : numbers)\
    \ {\n        rescaled.push_back(number);\n        rescaled.push_back(number);\n\
    \    }\n    return rescaled;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  status: Exception
  stderr: 'tmp0_l07noa: /tmp/tmp0_l07noa.cpp:18: int main(): Assertion `candidate((std::vector<float>({2.0,
    49.9}))) == (std::vector<float>({0.0, 1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122606
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> result;\n    float min = numbers[0];\n    float\
    \ max = numbers[0];\n    for (auto n : numbers) {\n        if (n < min) min =\
    \ n;\n        if (n > max) max = n;\n    }\n    for (auto n : numbers) {\n   \
    \     result.push_back((n - min) / (max - min));\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122603
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> result;\n    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    float scale = max - min;\n    for (float number : numbers) {\n        result.push_back(number\
    \ * scale);\n    }\n    return result;\n}\nint main() {\n    auto candidate =\
    \ rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0, 49.9}))) ==\
    \ (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  status: Exception
  stderr: 'tmpokpthkhj: /tmp/tmpokpthkhj.cpp:20: int main(): Assertion `candidate((std::vector<float>({2.0,
    49.9}))) == (std::vector<float>({0.0, 1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122606
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number / numbers.size());\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  status: Exception
  stderr: 'tmpq5pfrjg3: /tmp/tmpq5pfrjg3.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,
    49.9}))) == (std::vector<float>({0.0, 1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122603
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number / numbers.size());\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  status: Exception
  stderr: 'tmpq5pfrjg3: /tmp/tmpq5pfrjg3.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,
    49.9}))) == (std::vector<float>({0.0, 1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122603
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers(numbers.size());\n    float smallest_number = numbers[0];\n\
    \    float largest_number = numbers[0];\n    for (size_t i = 1; i < numbers.size();\
    \ i++) {\n        smallest_number = std::min(smallest_number, numbers[i]);\n \
    \       largest_number = std::max(largest_number, numbers[i]);\n    }\n    float\
    \ scale = 1.0f / (largest_number - smallest_number);\n    for (size_t i = 0; i\
    \ < numbers.size(); i++) {\n        rescaled_numbers[i] = numbers[i] * scale;\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  status: Exception
  stderr: 'tmppcrsrbvk: /tmp/tmppcrsrbvk.cpp:23: int main(): Assertion `candidate((std::vector<float>({2.0,
    49.9}))) == (std::vector<float>({0.0, 1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122606
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number / numbers[0]);\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  status: Exception
  stderr: 'tmpxglfz9u3: /tmp/tmpxglfz9u3.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,
    49.9}))) == (std::vector<float>({0.0, 1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122603
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> result;\n    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    float range = max - min;\n    float scale = 1.0f / range;\n    for (float\
    \ number : numbers) {\n        result.push_back(number * scale);\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  status: Exception
  stderr: 'tmpim1ps2qu: /tmp/tmpim1ps2qu.cpp:21: int main(): Assertion `candidate((std::vector<float>({2.0,
    49.9}))) == (std::vector<float>({0.0, 1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122606
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(std::min(std::max(number,\
    \ 0.0f), 1.0f));\n    }\n    return rescaled_numbers;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  status: Exception
  stderr: 'tmp5nffamts: /tmp/tmp5nffamts.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,
    49.9}))) == (std::vector<float>({0.0, 1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122603
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    float min = *std::min_element(numbers.begin(), numbers.end());\n\
    \    float max = *std::max_element(numbers.begin(), numbers.end());\n    float\
    \ range = max - min;\n    float scale = 1.0f / range;\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (auto\
    \ number : numbers) {\n        rescaled_numbers.push_back(number * scale);\n \
    \   }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  status: Exception
  stderr: 'tmpchdvnh89: /tmp/tmpchdvnh89.cpp:22: int main(): Assertion `candidate((std::vector<float>({2.0,
    49.9}))) == (std::vector<float>({0.0, 1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122606
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number * 2.0f - 1.0f);\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  status: Exception
  stderr: 'tmpytr_a6_k: /tmp/tmpytr_a6_k.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,
    49.9}))) == (std::vector<float>({0.0, 1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122606
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number / numbers.size());\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  status: Exception
  stderr: 'tmpq5pfrjg3: /tmp/tmpq5pfrjg3.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,
    49.9}))) == (std::vector<float>({0.0, 1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122603
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ > 1);\n    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    float smallest_number = numbers[0];\n    float largest_number = numbers[0];\n\
    \    for (auto number : numbers) {\n        smallest_number = std::min(smallest_number,\
    \ number);\n        largest_number = std::max(largest_number, number);\n    }\n\
    \    float scale = 1.0f / (largest_number - smallest_number);\n    for (auto number\
    \ : numbers) {\n        rescaled_numbers.push_back(number * scale);\n    }\n \
    \   return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  status: Exception
  stderr: 'tmp9eom4rxh: /tmp/tmp9eom4rxh.cpp:25: int main(): Assertion `candidate((std::vector<float>({2.0,
    49.9}))) == (std::vector<float>({0.0, 1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122606
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    for (float number : numbers) {\n        rescaled_numbers.push_back(number\
    \ / numbers[0]);\n    }\n    return rescaled_numbers;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  status: Exception
  stderr: 'tmpra80_zla: /tmp/tmpra80_zla.cpp:18: int main(): Assertion `candidate((std::vector<float>({2.0,
    49.9}))) == (std::vector<float>({0.0, 1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122603
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> new_numbers;\n    new_numbers.reserve(numbers.size());\n\
    \    for (float number : numbers) {\n        new_numbers.push_back(number / numbers.size());\n\
    \    }\n    return new_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  status: Exception
  stderr: 'tmp9d2p_kb5: /tmp/tmp9d2p_kb5.cpp:18: int main(): Assertion `candidate((std::vector<float>({2.0,
    49.9}))) == (std::vector<float>({0.0, 1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122606
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number / numbers.size());\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  status: Exception
  stderr: 'tmpq5pfrjg3: /tmp/tmpq5pfrjg3.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,
    49.9}))) == (std::vector<float>({0.0, 1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122603
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> result(numbers.size());\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for (size_t i = 0; i < numbers.size(); i++)\
    \ {\n        if (numbers[i] > max) {\n            max = numbers[i];\n        }\n\
    \        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n \
    \   }\n    for (size_t i = 0; i < numbers.size(); i++) {\n        result[i] =\
    \ numbers[i] - min;\n        result[i] *= (max - min) / (numbers.size() - 1);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  status: Exception
  stderr: 'tmpbdtyengi: /tmp/tmpbdtyengi.cpp:28: int main(): Assertion `candidate((std::vector<float>({2.0,
    49.9}))) == (std::vector<float>({0.0, 1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122606
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> result;\n    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    float scale = max - min;\n    for (float number : numbers) {\n        result.push_back(number\
    \ * scale);\n    }\n    return result;\n}\nint main() {\n    auto candidate =\
    \ rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0, 49.9}))) ==\
    \ (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  status: Exception
  stderr: 'tmpokpthkhj: /tmp/tmpokpthkhj.cpp:20: int main(): Assertion `candidate((std::vector<float>({2.0,
    49.9}))) == (std::vector<float>({0.0, 1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122606
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (auto\
    \ number : numbers) {\n        rescaled_numbers.push_back(std::min(std::max(number,\
    \ 0.0f), 1.0f));\n    }\n    return rescaled_numbers;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  status: Exception
  stderr: 'tmpbijot1b0: /tmp/tmpbijot1b0.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,
    49.9}))) == (std::vector<float>({0.0, 1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122603
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    for (float number : numbers) {\n        rescaled_numbers.push_back(number\
    \ / numbers[0]);\n    }\n    return rescaled_numbers;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  status: Exception
  stderr: 'tmpra80_zla: /tmp/tmpra80_zla.cpp:18: int main(): Assertion `candidate((std::vector<float>({2.0,
    49.9}))) == (std::vector<float>({0.0, 1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122603
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number / numbers.size());\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  status: Exception
  stderr: 'tmpq5pfrjg3: /tmp/tmpq5pfrjg3.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,
    49.9}))) == (std::vector<float>({0.0, 1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122603
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ result;\n    float min = *std::min_element(numbers.begin(), numbers.end());\n\
    \    float max = *std::max_element(numbers.begin(), numbers.end());\n    float\
    \ scale = max - min;\n    for (float number : numbers) {\n        result.push_back(number\
    \ * scale);\n    }\n    return result;\n}\nint main() {\n    auto candidate =\
    \ rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0, 49.9}))) ==\
    \ (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  status: Exception
  stderr: 'tmpgosc_733: /tmp/tmpgosc_733.cpp:19: int main(): Assertion `candidate((std::vector<float>({2.0,
    49.9}))) == (std::vector<float>({0.0, 1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122606
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> rescaled_numbers(numbers.size());\n    float\
    \ smallest_number = numbers[0];\n    float largest_number = numbers[0];\n    for\
    \ (size_t i = 1; i < numbers.size(); ++i) {\n        smallest_number = std::min(smallest_number,\
    \ numbers[i]);\n        largest_number = std::max(largest_number, numbers[i]);\n\
    \    }\n    float scale = 1.0f / (largest_number - smallest_number);\n    for\
    \ (size_t i = 0; i < numbers.size(); ++i) {\n        rescaled_numbers[i] = numbers[i]\
    \ * scale;\n    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate\
    \ = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0, 49.9})))\
    \ == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  status: Exception
  stderr: 'tmpy2bwkwwy: /tmp/tmpy2bwkwwy.cpp:24: int main(): Assertion `candidate((std::vector<float>({2.0,
    49.9}))) == (std::vector<float>({0.0, 1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122605
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ result;\n    float min = std::numeric_limits<float>::max();\n    float max =\
    \ std::numeric_limits<float>::min();\n    for (float number : numbers) {\n   \
    \     min = std::min(min, number);\n        max = std::max(max, number);\n   \
    \ }\n    for (float number : numbers) {\n        result.push_back(number * (max\
    \ - min) / numbers.size());\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  status: Exception
  stderr: 'tmp3qbf26nx: /tmp/tmp3qbf26nx.cpp:22: int main(): Assertion `candidate((std::vector<float>({2.0,
    49.9}))) == (std::vector<float>({0.0, 1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122606
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> rescaled_numbers(numbers.size());\n    float\
    \ min = numbers[0];\n    float max = numbers[0];\n    for (size_t i = 1; i < numbers.size();\
    \ i++) {\n        min = std::min(min, numbers[i]);\n        max = std::max(max,\
    \ numbers[i]);\n    }\n    for (size_t i = 0; i < numbers.size(); i++) {\n   \
    \     rescaled_numbers[i] = numbers[i] - min;\n        rescaled_numbers[i] /=\
    \ (max - min);\n    }\n    return rescaled_numbers;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122606
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number / numbers.size());\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  status: Exception
  stderr: 'tmpq5pfrjg3: /tmp/tmpq5pfrjg3.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,
    49.9}))) == (std::vector<float>({0.0, 1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122603
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> result(numbers.size());\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for (size_t i = 1; i < numbers.size(); i++)\
    \ {\n        min = std::min(min, numbers[i]);\n        max = std::max(max, numbers[i]);\n\
    \    }\n    for (size_t i = 0; i < numbers.size(); i++) {\n        result[i] =\
    \ numbers[i] - min;\n        result[i] = result[i] / (max - min);\n    }\n   \
    \ return result;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n   \
    \ assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122606
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number / numbers.size());\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  status: Exception
  stderr: 'tmpq5pfrjg3: /tmp/tmpq5pfrjg3.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,
    49.9}))) == (std::vector<float>({0.0, 1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122603
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> rescaled_numbers(numbers.size());\n    float\
    \ max_number = std::max(numbers);\n    float min_number = std::min(numbers);\n\
    \    float range = max_number - min_number;\n    for (size_t i = 0; i < numbers.size();\
    \ i++) {\n        rescaled_numbers[i] = numbers[i] - min_number;\n        rescaled_numbers[i]\
    \ /= range;\n    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate\
    \ = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0, 49.9})))\
    \ == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpa_in8_4s.cpp: In function \u2018std::vector<float> rescale_to_unit(std::vector<float>)\u2019\
    :\n/tmp/tmpa_in8_4s.cpp:10:40: error: no matching function for call to \u2018\
    max(std::vector<float>&)\u2019\n   10 |     float max_number = std::max(numbers);\n\
    \      |                                        ^\nIn file included from /usr/include/c++/9/bits/specfun.h:45,\n\
    \                 from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpa_in8_4s.cpp:2:\n/usr/include/c++/9/bits/stl_algobase.h:222:5:\
    \ note: candidate: \u2018template<class _Tp> constexpr const _Tp& std::max(const\
    \ _Tp&, const _Tp&)\u2019\n  222 |     max(const _Tp& __a, const _Tp& __b)\n \
    \     |     ^~~\n/usr/include/c++/9/bits/stl_algobase.h:222:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmpa_in8_4s.cpp:10:40: note: \
    \  candidate expects 2 arguments, 1 provided\n   10 |     float max_number = std::max(numbers);\n\
    \      |                                        ^\nIn file included from /usr/include/c++/9/bits/specfun.h:45,\n\
    \                 from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpa_in8_4s.cpp:2:\n/usr/include/c++/9/bits/stl_algobase.h:268:5:\
    \ note: candidate: \u2018template<class _Tp, class _Compare> constexpr const _Tp&\
    \ std::max(const _Tp&, const _Tp&, _Compare)\u2019\n  268 |     max(const _Tp&\
    \ __a, const _Tp& __b, _Compare __comp)\n      |     ^~~\n/usr/include/c++/9/bits/stl_algobase.h:268:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpa_in8_4s.cpp:10:40:\
    \ note:   candidate expects 3 arguments, 1 provided\n   10 |     float max_number\
    \ = std::max(numbers);\n      |                                        ^\nIn file\
    \ included from /usr/include/c++/9/algorithm:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpa_in8_4s.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3462:5:\
    \ note: candidate: \u2018template<class _Tp> constex"
  stdout: ''
  timestamp: 1660122605
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number / numbers.size());\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  status: Exception
  stderr: 'tmpq5pfrjg3: /tmp/tmpq5pfrjg3.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,
    49.9}))) == (std::vector<float>({0.0, 1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122603
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number / numbers[0]);\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  status: Exception
  stderr: 'tmpxglfz9u3: /tmp/tmpxglfz9u3.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,
    49.9}))) == (std::vector<float>({0.0, 1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122603
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ result;\n    float min = std::numeric_limits<float>::max();\n    float max =\
    \ std::numeric_limits<float>::min();\n    for (float number : numbers) {\n   \
    \     min = std::min(min, number);\n        max = std::max(max, number);\n   \
    \ }\n    for (float number : numbers) {\n        result.push_back(number * (max\
    \ - min) / (max - min));\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  status: Exception
  stderr: 'tmpno3hk7c4: /tmp/tmpno3hk7c4.cpp:22: int main(): Assertion `candidate((std::vector<float>({2.0,
    49.9}))) == (std::vector<float>({0.0, 1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122606
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (auto\
    \ number : numbers) {\n        rescaled_numbers.push_back(number / numbers.size());\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  status: Exception
  stderr: 'tmpjw1rjr27: /tmp/tmpjw1rjr27.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,
    49.9}))) == (std::vector<float>({0.0, 1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122606
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> rescaled;\n    rescaled.reserve(numbers.size());\n\
    \    for (float number : numbers) {\n        rescaled.push_back(number / numbers[0]);\n\
    \    }\n    return rescaled;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  status: Exception
  stderr: 'tmp7nzuvdf4: /tmp/tmp7nzuvdf4.cpp:18: int main(): Assertion `candidate((std::vector<float>({2.0,
    49.9}))) == (std::vector<float>({0.0, 1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122605
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    for (float number : numbers) {\n        rescaled_numbers.push_back(number\
    \ / numbers[0]);\n    }\n    return rescaled_numbers;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  status: Exception
  stderr: 'tmpra80_zla: /tmp/tmpra80_zla.cpp:18: int main(): Assertion `candidate((std::vector<float>({2.0,
    49.9}))) == (std::vector<float>({0.0, 1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122603
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers(numbers.size());\n    float smallest_number = numbers[0];\n\
    \    float largest_number = numbers[0];\n    for (size_t i = 0; i < numbers.size();\
    \ i++) {\n        rescaled_numbers[i] = numbers[i] / smallest_number;\n      \
    \  smallest_number = std::min(smallest_number, numbers[i]);\n        largest_number\
    \ = std::max(largest_number, numbers[i]);\n    }\n    return rescaled_numbers;\n\
    }\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  status: Exception
  stderr: 'tmpydcxl49g: /tmp/tmpydcxl49g.cpp:20: int main(): Assertion `candidate((std::vector<float>({2.0,
    49.9}))) == (std::vector<float>({0.0, 1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122606
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> rescaled_numbers(numbers.size());\n    float\
    \ min_number = numbers[0];\n    float max_number = numbers[0];\n    for (size_t\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] < min_number) {\n\
    \            min_number = numbers[i];\n        }\n        if (numbers[i] > max_number)\
    \ {\n            max_number = numbers[i];\n        }\n    }\n    for (size_t i\
    \ = 0; i < numbers.size(); i++) {\n        rescaled_numbers[i] = numbers[i] -\
    \ min_number;\n        rescaled_numbers[i] /= (max_number - min_number);\n   \
    \ }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122606
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(std::min(std::max(number,\
    \ 0.0f), 1.0f));\n    }\n    return rescaled_numbers;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  status: Exception
  stderr: 'tmp5nffamts: /tmp/tmp5nffamts.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,
    49.9}))) == (std::vector<float>({0.0, 1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122603
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    float\
    \ min = std::numeric_limits<float>::min();\n    float max = std::numeric_limits<float>::max();\n\
    \    for (float number : numbers) {\n        rescaled_numbers.push_back(number\
    \ - min) / (max - min);\n    }\n    return rescaled_numbers;\n}\nint main() {\n\
    \    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpi_k5nxz7.cpp: In function \u2018std::vector<float> rescale_to_unit(std::vector<float>)\u2019\
    :\n/tmp/tmpi_k5nxz7.cpp:13:50: error: invalid operands of types \u2018void\u2019\
    \ and \u2018float\u2019 to binary \u2018operator/\u2019\n   13 |         rescaled_numbers.push_back(number\
    \ - min) / (max - min);\n      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^ ~~~~~~~~~~~\n      |                                   |                 \
    \    |\n      |                                   void                  float\n"
  stdout: ''
  timestamp: 1660122603
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> result;\n    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    float scale = (max - min) / (numbers.back() - numbers.front());\n    for\
    \ (float number : numbers) {\n        result.push_back(number * scale);\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  status: Exception
  stderr: 'tmppk_m1ym2: /tmp/tmppk_m1ym2.cpp:20: int main(): Assertion `candidate((std::vector<float>({2.0,
    49.9}))) == (std::vector<float>({0.0, 1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122606
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled;\n    rescaled.reserve(numbers.size());\n    for (float number : numbers)\
    \ {\n        rescaled.push_back(number / numbers.back());\n    }\n    return rescaled;\n\
    }\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  status: Exception
  stderr: 'tmpuq1m8cej: /tmp/tmpuq1m8cej.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,
    49.9}))) == (std::vector<float>({0.0, 1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122606
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> rescaled;\n    rescaled.reserve(numbers.size());\n\
    \    for (float number : numbers) {\n        rescaled.push_back(number);\n   \
    \     rescaled.push_back(number);\n    }\n    return rescaled;\n}\nint main()\
    \ {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  status: Exception
  stderr: 'tmpf7kwsshs: /tmp/tmpf7kwsshs.cpp:19: int main(): Assertion `candidate((std::vector<float>({2.0,
    49.9}))) == (std::vector<float>({0.0, 1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122606
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    float min = *std::min_element(numbers.begin(), numbers.end());\n\
    \    float max = *std::max_element(numbers.begin(), numbers.end());\n    float\
    \ scale = max - min;\n    std::vector<float> rescaled_numbers;\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number * scale + min);\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  status: Exception
  stderr: 'tmp1kpil5wl: /tmp/tmp1kpil5wl.cpp:20: int main(): Assertion `candidate((std::vector<float>({2.0,
    49.9}))) == (std::vector<float>({0.0, 1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122606
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number / numbers.size());\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  status: Exception
  stderr: 'tmpq5pfrjg3: /tmp/tmpq5pfrjg3.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,
    49.9}))) == (std::vector<float>({0.0, 1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122603
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ result;\n    float min = *std::min_element(numbers.begin(), numbers.end());\n\
    \    float max = *std::max_element(numbers.begin(), numbers.end());\n    float\
    \ range = max - min;\n    for (float number : numbers) {\n        float rescaled\
    \ = number - min;\n        rescaled = rescaled / range;\n        result.push_back(rescaled);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122605
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number / numbers[0]);\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  status: Exception
  stderr: 'tmpxglfz9u3: /tmp/tmpxglfz9u3.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,
    49.9}))) == (std::vector<float>({0.0, 1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122603
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers(numbers.size());\n    for (size_t i = 0; i < numbers.size();\
    \ i++) {\n        rescaled_numbers[i] = numbers[i] / numbers[0];\n    }\n    return\
    \ rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  status: Exception
  stderr: 'tmp8myz3lx3: /tmp/tmp8myz3lx3.cpp:16: int main(): Assertion `candidate((std::vector<float>({2.0,
    49.9}))) == (std::vector<float>({0.0, 1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122603
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ > 1);\n    std::vector<float> rescaled_numbers(numbers.size());\n    float min\
    \ = std::numeric_limits<float>::max();\n    float max = std::numeric_limits<float>::min();\n\
    \    for (size_t i = 0; i < numbers.size(); i++) {\n        rescaled_numbers[i]\
    \ = numbers[i] - min;\n        min = std::min(min, numbers[i]);\n        max =\
    \ std::max(max, numbers[i]);\n    }\n    float scale = 1.0f / (max - min);\n \
    \   for (size_t i = 0; i < numbers.size(); i++) {\n        rescaled_numbers[i]\
    \ *= scale;\n    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate\
    \ = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0, 49.9})))\
    \ == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  status: Exception
  stderr: 'tmpg39cmyp2: /tmp/tmpg39cmyp2.cpp:25: int main(): Assertion `candidate((std::vector<float>({2.0,
    49.9}))) == (std::vector<float>({0.0, 1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122606
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ result;\n    float min = std::numeric_limits<float>::max();\n    float max =\
    \ std::numeric_limits<float>::min();\n    for (float number : numbers) {\n   \
    \     min = std::min(min, number);\n        max = std::max(max, number);\n   \
    \ }\n    for (float number : numbers) {\n        result.push_back(number * (max\
    \ - min) / (max - min));\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  status: Exception
  stderr: 'tmpno3hk7c4: /tmp/tmpno3hk7c4.cpp:22: int main(): Assertion `candidate((std::vector<float>({2.0,
    49.9}))) == (std::vector<float>({0.0, 1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122606
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number / numbers[0]);\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  status: Exception
  stderr: 'tmpxglfz9u3: /tmp/tmpxglfz9u3.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,
    49.9}))) == (std::vector<float>({0.0, 1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122603
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ > 1);\n    std::vector<float> rescaled;\n    rescaled.reserve(numbers.size());\n\
    \    for (float number : numbers) {\n        rescaled.push_back(number / numbers[0]);\n\
    \    }\n    return rescaled;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  status: Exception
  stderr: 'tmpwmxwhll7: /tmp/tmpwmxwhll7.cpp:18: int main(): Assertion `candidate((std::vector<float>({2.0,
    49.9}))) == (std::vector<float>({0.0, 1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122606
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    for (float number : numbers) {\n        rescaled_numbers.push_back(number\
    \ / numbers[0]);\n    }\n    return rescaled_numbers;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  status: Exception
  stderr: 'tmpra80_zla: /tmp/tmpra80_zla.cpp:18: int main(): Assertion `candidate((std::vector<float>({2.0,
    49.9}))) == (std::vector<float>({0.0, 1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122603
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> result(numbers.size());\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for (size_t i = 1; i < numbers.size(); i++)\
    \ {\n        if (numbers[i] < min) min = numbers[i];\n        if (numbers[i] >\
    \ max) max = numbers[i];\n    }\n    for (size_t i = 0; i < numbers.size(); i++)\
    \ {\n        result[i] = numbers[i] - min;\n        result[i] /= (max - min);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122606
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number / numbers[0]);\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  status: Exception
  stderr: 'tmpxglfz9u3: /tmp/tmpxglfz9u3.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,
    49.9}))) == (std::vector<float>({0.0, 1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122603
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number / numbers.size());\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  status: Exception
  stderr: 'tmpq5pfrjg3: /tmp/tmpq5pfrjg3.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,
    49.9}))) == (std::vector<float>({0.0, 1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122603
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ result;\n    float min = *std::min_element(numbers.begin(), numbers.end());\n\
    \    float max = *std::max_element(numbers.begin(), numbers.end());\n    float\
    \ scale = 1.0f / (max - min);\n    for (float number : numbers) {\n        result.push_back(number\
    \ * scale);\n    }\n    return result;\n}\nint main() {\n    auto candidate =\
    \ rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0, 49.9}))) ==\
    \ (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  status: Exception
  stderr: 'tmp0brshpa0: /tmp/tmp0brshpa0.cpp:19: int main(): Assertion `candidate((std::vector<float>({2.0,
    49.9}))) == (std::vector<float>({0.0, 1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122606
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers(numbers.begin(), numbers.end());\n    float min_number = std::numeric_limits<float>::min();\n\
    \    float max_number = std::numeric_limits<float>::max();\n    for (float number\
    \ : rescaled_numbers) {\n        rescaled_numbers = std::map<float, float>::\n\
    \            map(rescaled_numbers, [](float number) {\n                return\
    \ (number - min_number) / (max_number - min_number);\n            });\n    }\n\
    \    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_hlqlanj.cpp: In lambda function:\n/tmp/tmp_hlqlanj.cpp:14:34:\
    \ error: \u2018min_number\u2019 is not captured\n   14 |                 return\
    \ (number - min_number) / (max_number - min_number);\n      |                \
    \                  ^~~~~~~~~~\n/tmp/tmp_hlqlanj.cpp:13:36: note: the lambda has\
    \ no capture-default\n   13 |             map(rescaled_numbers, [](float number)\
    \ {\n      |                                    ^\n/tmp/tmp_hlqlanj.cpp:9:11:\
    \ note: \u2018float min_number\u2019 declared here\n    9 |     float min_number\
    \ = std::numeric_limits<float>::min();\n      |           ^~~~~~~~~~\n/tmp/tmp_hlqlanj.cpp:14:49:\
    \ error: \u2018max_number\u2019 is not captured\n   14 |                 return\
    \ (number - min_number) / (max_number - min_number);\n      |                \
    \                                 ^~~~~~~~~~\n/tmp/tmp_hlqlanj.cpp:13:36: note:\
    \ the lambda has no capture-default\n   13 |             map(rescaled_numbers,\
    \ [](float number) {\n      |                                    ^\n/tmp/tmp_hlqlanj.cpp:10:11:\
    \ note: \u2018float max_number\u2019 declared here\n   10 |     float max_number\
    \ = std::numeric_limits<float>::max();\n      |           ^~~~~~~~~~\n/tmp/tmp_hlqlanj.cpp:14:62:\
    \ error: \u2018min_number\u2019 is not captured\n   14 |                 return\
    \ (number - min_number) / (max_number - min_number);\n      |                \
    \                                              ^~~~~~~~~~\n/tmp/tmp_hlqlanj.cpp:13:36:\
    \ note: the lambda has no capture-default\n   13 |             map(rescaled_numbers,\
    \ [](float number) {\n      |                                    ^\n/tmp/tmp_hlqlanj.cpp:9:11:\
    \ note: \u2018float min_number\u2019 declared here\n    9 |     float min_number\
    \ = std::numeric_limits<float>::min();\n      |           ^~~~~~~~~~\n/tmp/tmp_hlqlanj.cpp:\
    \ In function \u2018std::vector<float> rescale_to_unit(std::vector<float>)\u2019\
    :\n/tmp/tmp_hlqlanj.cpp:15:14: error: cannot call constructor \u2018std::map<float,\
    \ float>::map\u2019 directly [-fpermissive]\n   15 |             });\n      |\
    \              ^\n/tmp/tmp_hlqlanj.cpp:15:14: note: for a function-style cast,\
    \ remove the redunda"
  stdout: ''
  timestamp: 1660122606
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ result;\n    float min = std::numeric_limits<float>::max();\n    float max =\
    \ std::numeric_limits<float>::min();\n    for (float number : numbers) {\n   \
    \     min = std::min(min, number);\n        max = std::max(max, number);\n   \
    \ }\n    for (float number : numbers) {\n        result.push_back(number - min)\
    \ / (max - min);\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0, 49.9})))\
    \ == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpnh9fy07h.cpp: In function \u2018std::vector<float> rescale_to_unit(std::vector<float>)\u2019\
    :\n/tmp/tmpnh9fy07h.cpp:16:40: error: invalid operands of types \u2018void\u2019\
    \ and \u2018float\u2019 to binary \u2018operator/\u2019\n   16 |         result.push_back(number\
    \ - min) / (max - min);\n      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^ ~~~~~~~~~~~\n\
    \      |                         |                     |\n      |            \
    \             void                  float\n"
  stdout: ''
  timestamp: 1660122602
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> result;\n    float min = numbers[0];\n    float\
    \ max = numbers[0];\n    for (auto number : numbers) {\n        if (number < min)\
    \ min = number;\n        if (number > max) max = number;\n    }\n    for (auto\
    \ number : numbers) {\n        result.push_back(number - min) / (max - min);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptsryy8c5.cpp: In function \u2018std::vector<float> rescale_to_unit(std::vector<float>)\u2019\
    :\n/tmp/tmptsryy8c5.cpp:17:40: error: invalid operands of types \u2018void\u2019\
    \ and \u2018float\u2019 to binary \u2018operator/\u2019\n   17 |         result.push_back(number\
    \ - min) / (max - min);\n      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^ ~~~~~~~~~~~\n\
    \      |                         |                     |\n      |            \
    \             void                  float\n"
  stdout: ''
  timestamp: 1660122606
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number / numbers.size());\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  status: Exception
  stderr: 'tmpq5pfrjg3: /tmp/tmpq5pfrjg3.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,
    49.9}))) == (std::vector<float>({0.0, 1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122603
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> rescaled_numbers(numbers.size());\n    float\
    \ smallest_number = numbers[0];\n    float largest_number = numbers[0];\n    for\
    \ (size_t i = 1; i < numbers.size(); ++i) {\n        smallest_number = std::min(smallest_number,\
    \ numbers[i]);\n        largest_number = std::max(largest_number, numbers[i]);\n\
    \    }\n    for (size_t i = 0; i < numbers.size(); ++i) {\n        rescaled_numbers[i]\
    \ = numbers[i] - smallest_number;\n        rescaled_numbers[i] /= (largest_number\
    \ - smallest_number);\n    }\n    return rescaled_numbers;\n}\nint main() {\n\
    \    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122606
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled;\n    rescaled.reserve(numbers.size());\n    for (auto number : numbers)\
    \ {\n        rescaled.push_back(number / numbers.back());\n    }\n    return rescaled;\n\
    }\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  status: Exception
  stderr: 'tmphp2s0cr7: /tmp/tmphp2s0cr7.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,
    49.9}))) == (std::vector<float>({0.0, 1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122606
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    for (float number : numbers) {\n        rescaled_numbers.push_back(number\
    \ * 2.0 - 1.0);\n    }\n    return rescaled_numbers;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  status: Exception
  stderr: 'tmp1gz_4se4: /tmp/tmp1gz_4se4.cpp:18: int main(): Assertion `candidate((std::vector<float>({2.0,
    49.9}))) == (std::vector<float>({0.0, 1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122606
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    for (float number : numbers) {\n        rescaled_numbers.push_back(number\
    \ / numbers[0]);\n    }\n    return rescaled_numbers;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  status: Exception
  stderr: 'tmpra80_zla: /tmp/tmpra80_zla.cpp:18: int main(): Assertion `candidate((std::vector<float>({2.0,
    49.9}))) == (std::vector<float>({0.0, 1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122603
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ > 1);\n    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    for (auto number : numbers) {\n        rescaled_numbers.push_back(number\
    \ / numbers.back());\n    }\n    return rescaled_numbers;\n}\nint main() {\n \
    \   auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  status: Exception
  stderr: 'tmp4bjgh2hx: /tmp/tmp4bjgh2hx.cpp:18: int main(): Assertion `candidate((std::vector<float>({2.0,
    49.9}))) == (std::vector<float>({0.0, 1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122606
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ > 1);\n    std::vector<float> rescaled;\n    rescaled.reserve(numbers.size());\n\
    \    float min = numbers[0];\n    float max = numbers[0];\n    for (float number\
    \ : numbers) {\n        min = std::min(min, number);\n        max = std::max(max,\
    \ number);\n    }\n    float scale = 1.0f / (max - min);\n    for (float number\
    \ : numbers) {\n        rescaled.push_back(number * scale);\n    }\n    return\
    \ rescaled;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  status: Exception
  stderr: 'tmpwq59ux6k: /tmp/tmpwq59ux6k.cpp:25: int main(): Assertion `candidate((std::vector<float>({2.0,
    49.9}))) == (std::vector<float>({0.0, 1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122606
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> rescaled_numbers(numbers.size());\n    float\
    \ smallest_number = numbers[0];\n    float largest_number = numbers[0];\n    for\
    \ (size_t i = 1; i < numbers.size(); ++i) {\n        smallest_number = std::min(smallest_number,\
    \ numbers[i]);\n        largest_number = std::max(largest_number, numbers[i]);\n\
    \    }\n    for (size_t i = 0; i < numbers.size(); ++i) {\n        rescaled_numbers[i]\
    \ = numbers[i] - smallest_number;\n        rescaled_numbers[i] /= (largest_number\
    \ - smallest_number);\n    }\n    return rescaled_numbers;\n}\nint main() {\n\
    \    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122606
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    float smallest_number = numbers[0];\n    float largest_number = numbers[0];\n\
    \    for (auto number : numbers) {\n        smallest_number = std::min(smallest_number,\
    \ number);\n        largest_number = std::max(largest_number, number);\n     \
    \   rescaled_numbers.push_back(smallest_number / largest_number);\n    }\n   \
    \ return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  status: Exception
  stderr: 'tmprrdha_pr: /tmp/tmprrdha_pr.cpp:22: int main(): Assertion `candidate((std::vector<float>({2.0,
    49.9}))) == (std::vector<float>({0.0, 1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122606
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers(numbers.begin(), numbers.end());\n    std::transform(rescaled_numbers.begin(),\
    \ rescaled_numbers.end(), rescaled_numbers.begin(), [](float x) -> float {\n \
    \       return std::min(std::max(x, 0.0f), 1.0f);\n    });\n    return rescaled_numbers;\n\
    }\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  status: Exception
  stderr: 'tmpsvqvi5ot: /tmp/tmpsvqvi5ot.cpp:16: int main(): Assertion `candidate((std::vector<float>({2.0,
    49.9}))) == (std::vector<float>({0.0, 1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122606
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number / numbers.size());\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  status: Exception
  stderr: 'tmpq5pfrjg3: /tmp/tmpq5pfrjg3.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,
    49.9}))) == (std::vector<float>({0.0, 1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122603
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> result(numbers.size());\n    for (size_t i =\
    \ 0; i < numbers.size(); ++i) {\n        result[i] = numbers[i] / numbers[0];\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  status: Exception
  stderr: 'tmpa1bh4m7_: /tmp/tmpa1bh4m7_.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,
    49.9}))) == (std::vector<float>({0.0, 1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122606
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> rescaled_numbers(numbers.begin(), numbers.end());\n\
    \    float min_number = std::numeric_limits<float>::min();\n    float max_number\
    \ = std::numeric_limits<float>::max();\n    float min_rescaled_number = std::numeric_limits<float>::min();\n\
    \    float max_rescaled_number = std::numeric_limits<float>::max();\n    for (size_t\
    \ i = 0; i < rescaled_numbers.size(); ++i) {\n        rescaled_numbers[i] = numbers[i]\
    \ - min_number;\n        min_rescaled_number = std::min(min_rescaled_number, rescaled_numbers[i]);\n\
    \        max_rescaled_number = std::max(max_rescaled_number, rescaled_numbers[i]);\n\
    \    }\n    rescaled_numbers[0] = min_rescaled_number;\n    rescaled_numbers[rescaled_numbers.size()\
    \ - 1] = max_rescaled_number;\n    return rescaled_numbers;\n}\nint main() {\n\
    \    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  status: Exception
  stderr: 'tmpf7ooftbb: /tmp/tmpf7ooftbb.cpp:25: int main(): Assertion `candidate((std::vector<float>({2.0,
    49.9}))) == (std::vector<float>({0.0, 1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122606
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ > 1);\n    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    for (float number : numbers) {\n        rescaled_numbers.push_back(number\
    \ / numbers[0]);\n    }\n    return rescaled_numbers;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  status: Exception
  stderr: 'tmp9k7yjav_: /tmp/tmp9k7yjav_.cpp:18: int main(): Assertion `candidate((std::vector<float>({2.0,
    49.9}))) == (std::vector<float>({0.0, 1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122603
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers(numbers.size());\n    float smallest_number = numbers[0];\n\
    \    float largest_number = numbers[0];\n    for (size_t i = 0; i < numbers.size();\
    \ i++) {\n        rescaled_numbers[i] = numbers[i] - smallest_number;\n      \
    \  smallest_number = std::min(smallest_number, numbers[i]);\n        largest_number\
    \ = std::max(largest_number, numbers[i]);\n    }\n    float scale = 1.0f / (largest_number\
    \ - smallest_number);\n    for (size_t i = 0; i < numbers.size(); i++) {\n   \
    \     rescaled_numbers[i] *= scale;\n    }\n    return rescaled_numbers;\n}\n\
    int main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  status: Exception
  stderr: 'tmpo2a9x4__: /tmp/tmpo2a9x4__.cpp:25: int main(): Assertion `candidate((std::vector<float>({100.0,
    49.9}))) == (std::vector<float>({1.0, 0.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122606
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    for (float number : numbers) {\n        rescaled_numbers.push_back(number\
    \ / numbers.size());\n    }\n    return rescaled_numbers;\n}\nint main() {\n \
    \   auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  status: Exception
  stderr: 'tmpwsarx236: /tmp/tmpwsarx236.cpp:18: int main(): Assertion `candidate((std::vector<float>({2.0,
    49.9}))) == (std::vector<float>({0.0, 1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122603
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    float min = *std::min_element(numbers.begin(), numbers.end());\n\
    \    float max = *std::max_element(numbers.begin(), numbers.end());\n    float\
    \ range = max - min;\n    float scale = 1.0f / range;\n    std::vector<float>\
    \ rescaled_numbers;\n    for (float number : numbers) {\n        rescaled_numbers.push_back(number\
    \ * scale);\n    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate\
    \ = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0, 49.9})))\
    \ == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  status: Exception
  stderr: 'tmpif3g5wm7: /tmp/tmpif3g5wm7.cpp:21: int main(): Assertion `candidate((std::vector<float>({2.0,
    49.9}))) == (std::vector<float>({0.0, 1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122604
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    for (float number : numbers) {\n        rescaled_numbers.push_back(number\
    \ / numbers[0]);\n    }\n    return rescaled_numbers;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  status: Exception
  stderr: 'tmpra80_zla: /tmp/tmpra80_zla.cpp:18: int main(): Assertion `candidate((std::vector<float>({2.0,
    49.9}))) == (std::vector<float>({0.0, 1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122603
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ result;\n    float min = *std::min_element(numbers.begin(), numbers.end());\n\
    \    float max = *std::max_element(numbers.begin(), numbers.end());\n    float\
    \ scale = 1.0f / (max - min);\n    for (float number : numbers) {\n        result.push_back(number\
    \ * scale);\n    }\n    return result;\n}\nint main() {\n    auto candidate =\
    \ rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0, 49.9}))) ==\
    \ (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  status: Exception
  stderr: 'tmp0brshpa0: /tmp/tmp0brshpa0.cpp:19: int main(): Assertion `candidate((std::vector<float>({2.0,
    49.9}))) == (std::vector<float>({0.0, 1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122606
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number / numbers.size());\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  status: Exception
  stderr: 'tmpq5pfrjg3: /tmp/tmpq5pfrjg3.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,
    49.9}))) == (std::vector<float>({0.0, 1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122603
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number);\n        rescaled_numbers.push_back(number);\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  status: Exception
  stderr: 'tmpzvpy3_40: /tmp/tmpzvpy3_40.cpp:18: int main(): Assertion `candidate((std::vector<float>({2.0,
    49.9}))) == (std::vector<float>({0.0, 1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122603
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(std::min(std::max(number,\
    \ 0.0f), 1.0f));\n    }\n    return rescaled_numbers;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  status: Exception
  stderr: 'tmp5nffamts: /tmp/tmp5nffamts.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,
    49.9}))) == (std::vector<float>({0.0, 1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122603
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ > 1);\n    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    for (float number : numbers) {\n        rescaled_numbers.push_back(number\
    \ / numbers[0]);\n    }\n    return rescaled_numbers;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  status: Exception
  stderr: 'tmp9k7yjav_: /tmp/tmp9k7yjav_.cpp:18: int main(): Assertion `candidate((std::vector<float>({2.0,
    49.9}))) == (std::vector<float>({0.0, 1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122603
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled;\n    rescaled.reserve(numbers.size());\n    for (float number : numbers)\
    \ {\n        rescaled.push_back(number / numbers.size());\n    }\n    return rescaled;\n\
    }\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  status: Exception
  stderr: 'tmpw9_uvql1: /tmp/tmpw9_uvql1.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,
    49.9}))) == (std::vector<float>({0.0, 1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122603
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    for (float number : numbers) {\n        rescaled_numbers.push_back(number);\n\
    \        rescaled_numbers.push_back(number);\n    }\n    return rescaled_numbers;\n\
    }\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  status: Exception
  stderr: 'tmp6yxppn9t: /tmp/tmp6yxppn9t.cpp:19: int main(): Assertion `candidate((std::vector<float>({2.0,
    49.9}))) == (std::vector<float>({0.0, 1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122603
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (auto\
    \ number : numbers) {\n        rescaled_numbers.push_back(number / numbers.size());\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  status: Exception
  stderr: 'tmpjw1rjr27: /tmp/tmpjw1rjr27.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,
    49.9}))) == (std::vector<float>({0.0, 1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122606
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (auto\
    \ number : numbers) {\n        rescaled_numbers.push_back(number / numbers.size());\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  status: Exception
  stderr: 'tmpjw1rjr27: /tmp/tmpjw1rjr27.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,
    49.9}))) == (std::vector<float>({0.0, 1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122606
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number / numbers.size());\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  status: Exception
  stderr: 'tmpq5pfrjg3: /tmp/tmpq5pfrjg3.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,
    49.9}))) == (std::vector<float>({0.0, 1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122603
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number / numbers[0]);\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  status: Exception
  stderr: 'tmpxglfz9u3: /tmp/tmpxglfz9u3.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,
    49.9}))) == (std::vector<float>({0.0, 1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122603
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number / numbers.size());\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  status: Exception
  stderr: 'tmpq5pfrjg3: /tmp/tmpq5pfrjg3.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,
    49.9}))) == (std::vector<float>({0.0, 1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122603
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number / numbers.size());\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  status: Exception
  stderr: 'tmpq5pfrjg3: /tmp/tmpq5pfrjg3.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,
    49.9}))) == (std::vector<float>({0.0, 1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122603
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ > 1);\n    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    for (float number : numbers) {\n        rescaled_numbers.push_back(number\
    \ / numbers[0]);\n    }\n    return rescaled_numbers;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  status: Exception
  stderr: 'tmp9k7yjav_: /tmp/tmp9k7yjav_.cpp:18: int main(): Assertion `candidate((std::vector<float>({2.0,
    49.9}))) == (std::vector<float>({0.0, 1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122603
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(std::min(std::max(number,\
    \ 0.0f), 1.0f));\n    }\n    return rescaled_numbers;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  status: Exception
  stderr: 'tmp5nffamts: /tmp/tmp5nffamts.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,
    49.9}))) == (std::vector<float>({0.0, 1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122603
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ result;\n    float min = std::numeric_limits<float>::max();\n    float max =\
    \ std::numeric_limits<float>::min();\n    for (float number : numbers) {\n   \
    \     min = std::min(min, number);\n        max = std::max(max, number);\n   \
    \ }\n    for (float number : numbers) {\n        result.push_back(number * (max\
    \ - min) / numbers.size());\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  status: Exception
  stderr: 'tmp3qbf26nx: /tmp/tmp3qbf26nx.cpp:22: int main(): Assertion `candidate((std::vector<float>({2.0,
    49.9}))) == (std::vector<float>({0.0, 1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122606
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> rescaled_numbers(numbers.begin(), numbers.end());\n\
    \    float min_number = std::numeric_limits<float>::min();\n    float max_number\
    \ = std::numeric_limits<float>::max();\n    float min_rescaled_number = std::numeric_limits<float>::min();\n\
    \    float max_rescaled_number = std::numeric_limits<float>::max();\n    for (float\
    \ number : numbers) {\n        min_rescaled_number = std::min(min_rescaled_number,\
    \ number);\n        max_rescaled_number = std::max(max_rescaled_number, number);\n\
    \    }\n    for (float number : numbers) {\n        rescaled_numbers[numbers.find(number)]\
    \ *= (max_rescaled_number - min_rescaled_number) / (max_number - min_number);\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6d0d616y.cpp: In function \u2018std::vector<float> rescale_to_unit(std::vector<float>)\u2019\
    :\n/tmp/tmp6d0d616y.cpp:19:34: error: \u2018class std::vector<float>\u2019 has\
    \ no member named \u2018find\u2019\n   19 |         rescaled_numbers[numbers.find(number)]\
    \ *= (max_rescaled_number - min_rescaled_number) / (max_number - min_number);\n\
    \      |                                  ^~~~\n"
  stdout: ''
  timestamp: 1660122606
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number / numbers[0]);\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  status: Exception
  stderr: 'tmpxglfz9u3: /tmp/tmpxglfz9u3.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,
    49.9}))) == (std::vector<float>({0.0, 1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122603
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> rescaled_numbers(numbers.size());\n    float\
    \ min_number = numbers[0];\n    float max_number = numbers[0];\n    for (size_t\
    \ i = 1; i < numbers.size(); i++) {\n        min_number = std::min(min_number,\
    \ numbers[i]);\n        max_number = std::max(max_number, numbers[i]);\n    }\n\
    \    for (size_t i = 0; i < numbers.size(); i++) {\n        rescaled_numbers[i]\
    \ = numbers[i] - min_number;\n        rescaled_numbers[i] /= (max_number - min_number);\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122606
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    for (auto number : numbers) {\n        rescaled_numbers.push_back(number\
    \ / numbers[0]);\n    }\n    return rescaled_numbers;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  status: Exception
  stderr: 'tmpiw732tdb: /tmp/tmpiw732tdb.cpp:18: int main(): Assertion `candidate((std::vector<float>({2.0,
    49.9}))) == (std::vector<float>({0.0, 1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122603
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number / numbers.size());\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  status: Exception
  stderr: 'tmpq5pfrjg3: /tmp/tmpq5pfrjg3.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,
    49.9}))) == (std::vector<float>({0.0, 1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122603
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> result;\n    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    float scale = 1.0f / (max - min);\n    for (float number : numbers) {\n \
    \       result.push_back(number * scale);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  status: Exception
  stderr: 'tmptm29u49_: /tmp/tmptm29u49_.cpp:20: int main(): Assertion `candidate((std::vector<float>({2.0,
    49.9}))) == (std::vector<float>({0.0, 1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122607
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> rescaled_numbers(numbers.size());\n    float\
    \ smallest_number = numbers[0];\n    float largest_number = numbers[0];\n    for\
    \ (size_t i = 1; i < numbers.size(); i++) {\n        smallest_number = std::min(smallest_number,\
    \ numbers[i]);\n        largest_number = std::max(largest_number, numbers[i]);\n\
    \    }\n    for (size_t i = 0; i < numbers.size(); i++) {\n        rescaled_numbers[i]\
    \ = numbers[i] - smallest_number;\n        rescaled_numbers[i] /= (largest_number\
    \ - smallest_number);\n    }\n    return rescaled_numbers;\n}\nint main() {\n\
    \    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122607
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number / numbers.size());\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  status: Exception
  stderr: 'tmpq5pfrjg3: /tmp/tmpq5pfrjg3.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,
    49.9}))) == (std::vector<float>({0.0, 1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122603
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number);\n        rescaled_numbers.push_back(number);\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  status: Exception
  stderr: 'tmpzvpy3_40: /tmp/tmpzvpy3_40.cpp:18: int main(): Assertion `candidate((std::vector<float>({2.0,
    49.9}))) == (std::vector<float>({0.0, 1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122603
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number / numbers.size());\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  status: Exception
  stderr: 'tmpq5pfrjg3: /tmp/tmpq5pfrjg3.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,
    49.9}))) == (std::vector<float>({0.0, 1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122603
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> rescaled_numbers(numbers.size());\n    float\
    \ min_number = std::numeric_limits<float>::max();\n    float max_number = std::numeric_limits<float>::min();\n\
    \    for (size_t i = 0; i < numbers.size(); i++) {\n        rescaled_numbers[i]\
    \ = numbers[i] - min_number;\n        min_number = std::min(min_number, numbers[i]);\n\
    \        max_number = std::max(max_number, numbers[i]);\n    }\n    float scale\
    \ = 1.0f / (max_number - min_number);\n    for (size_t i = 0; i < numbers.size();\
    \ i++) {\n        rescaled_numbers[i] *= scale;\n    }\n    return rescaled_numbers;\n\
    }\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  status: Exception
  stderr: 'tmpyfvjtrsb: /tmp/tmpyfvjtrsb.cpp:25: int main(): Assertion `candidate((std::vector<float>({2.0,
    49.9}))) == (std::vector<float>({0.0, 1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122607
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    float min = *std::min_element(numbers.begin(), numbers.end());\n\
    \    float max = *std::max_element(numbers.begin(), numbers.end());\n    float\
    \ scale = max - min;\n    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    for (auto number : numbers) {\n        rescaled_numbers.push_back(number\
    \ * scale + min);\n    }\n    return rescaled_numbers;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  status: Exception
  stderr: 'tmp93pp981d: /tmp/tmp93pp981d.cpp:21: int main(): Assertion `candidate((std::vector<float>({2.0,
    49.9}))) == (std::vector<float>({0.0, 1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122607
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ > 1);\n    std::vector<float> rescaled_numbers(numbers.size());\n    float min_number\
    \ = numbers[0];\n    float max_number = numbers[0];\n    for (size_t i = 1; i\
    \ < numbers.size(); i++) {\n        min_number = std::min(min_number, numbers[i]);\n\
    \        max_number = std::max(max_number, numbers[i]);\n    }\n    for (size_t\
    \ i = 0; i < numbers.size(); i++) {\n        rescaled_numbers[i] = numbers[i]\
    \ - min_number;\n        rescaled_numbers[i] /= (max_number - min_number);\n \
    \   }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122607
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number / numbers.size());\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  status: Exception
  stderr: 'tmpq5pfrjg3: /tmp/tmpq5pfrjg3.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,
    49.9}))) == (std::vector<float>({0.0, 1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122603
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number / numbers.size());\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  status: Exception
  stderr: 'tmpq5pfrjg3: /tmp/tmpq5pfrjg3.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,
    49.9}))) == (std::vector<float>({0.0, 1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122603
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number);\n    }\n  \
    \  float smallest_number = rescaled_numbers[0];\n    float largest_number = rescaled_numbers[0];\n\
    \    for (float number : rescaled_numbers) {\n        if (number < smallest_number)\
    \ {\n            smallest_number = number;\n        }\n        if (number > largest_number)\
    \ {\n            largest_number = number;\n        }\n    }\n    float scale =\
    \ 1.0f / (largest_number - smallest_number);\n    for (float number : rescaled_numbers)\
    \ {\n        rescaled_number *= scale;\n    }\n    return rescaled_numbers;\n\
    }\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp22dfwa45.cpp: In function \u2018std::vector<float> rescale_to_unit(std::vector<float>)\u2019\
    :\n/tmp/tmp22dfwa45.cpp:25:9: error: \u2018rescaled_number\u2019 was not declared\
    \ in this scope; did you mean \u2018rescaled_numbers\u2019?\n   25 |         rescaled_number\
    \ *= scale;\n      |         ^~~~~~~~~~~~~~~\n      |         rescaled_numbers\n"
  stdout: ''
  timestamp: 1660122607
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> rescaled_numbers(numbers.size());\n    float\
    \ min_number = numbers[0];\n    float max_number = numbers[0];\n    for (size_t\
    \ i = 1; i < numbers.size(); ++i) {\n        if (numbers[i] < min_number) {\n\
    \            min_number = numbers[i];\n        }\n        if (numbers[i] > max_number)\
    \ {\n            max_number = numbers[i];\n        }\n    }\n    float scale =\
    \ max_number - min_number;\n    for (size_t i = 0; i < numbers.size(); ++i) {\n\
    \        rescaled_numbers[i] = numbers[i] - min_number;\n        rescaled_numbers[i]\
    \ *= scale;\n    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate\
    \ = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0, 49.9})))\
    \ == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  status: Exception
  stderr: 'tmp9ua36fl7: /tmp/tmp9ua36fl7.cpp:29: int main(): Assertion `candidate((std::vector<float>({2.0,
    49.9}))) == (std::vector<float>({0.0, 1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122607
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    float min = *std::min_element(numbers.begin(), numbers.end());\n\
    \    float max = *std::max_element(numbers.begin(), numbers.end());\n    float\
    \ scale = 1.0f / (max - min);\n    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    for (float number : numbers) {\n        rescaled_numbers.push_back(number\
    \ * scale);\n    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate\
    \ = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0, 49.9})))\
    \ == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  status: Exception
  stderr: 'tmpyt6ziwsj: /tmp/tmpyt6ziwsj.cpp:21: int main(): Assertion `candidate((std::vector<float>({2.0,
    49.9}))) == (std::vector<float>({0.0, 1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122607
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (auto\
    \ number : numbers) {\n        rescaled_numbers.push_back(number / numbers.size());\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  status: Exception
  stderr: 'tmpjw1rjr27: /tmp/tmpjw1rjr27.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,
    49.9}))) == (std::vector<float>({0.0, 1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122606
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> result(numbers.size());\n    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    float scale = max - min;\n    for (size_t i = 0; i < numbers.size(); ++i)\
    \ {\n        result[i] = numbers[i] - min;\n        result[i] *= 1.0 / scale;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660122607
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ > 1);\n    std::vector<float> rescaled_numbers(numbers.size());\n    float smallest_number\
    \ = numbers[0];\n    float largest_number = numbers[0];\n    for (size_t i = 1;\
    \ i < numbers.size(); ++i) {\n        smallest_number = std::min(smallest_number,\
    \ numbers[i]);\n        largest_number = std::max(largest_number, numbers[i]);\n\
    \    }\n    float scale = 1.0f / (largest_number - smallest_number);\n    for\
    \ (size_t i = 0; i < numbers.size(); ++i) {\n        rescaled_numbers[i] = numbers[i]\
    \ * scale;\n    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate\
    \ = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0, 49.9})))\
    \ == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  status: Exception
  stderr: 'tmpyo6l80_q: /tmp/tmpyo6l80_q.cpp:24: int main(): Assertion `candidate((std::vector<float>({2.0,
    49.9}))) == (std::vector<float>({0.0, 1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122607
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    float min = *std::min_element(numbers.begin(), numbers.end());\n\
    \    float max = *std::max_element(numbers.begin(), numbers.end());\n    float\
    \ range = max - min;\n    float scale = 1.0f / range;\n    std::vector<float>\
    \ rescaled_numbers;\n    for (float number : numbers) {\n        rescaled_numbers.push_back(number\
    \ * scale);\n    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate\
    \ = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0, 49.9})))\
    \ == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  status: Exception
  stderr: 'tmpif3g5wm7: /tmp/tmpif3g5wm7.cpp:21: int main(): Assertion `candidate((std::vector<float>({2.0,
    49.9}))) == (std::vector<float>({0.0, 1.0}))'' failed.

    '
  stdout: ''
  timestamp: 1660122604
