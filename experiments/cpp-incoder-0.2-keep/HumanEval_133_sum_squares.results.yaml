name: HumanEval_133_sum_squares
language: cpp
results:
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long int sum = 0;\n    for (float\
    \ i : lst) {\n        sum += i * i;\n    }\n    return sum;\n}\nint main() {\n\
    \    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmp6w019jo4: /tmp/tmp6w019jo4.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long sum = 0;\n    for(auto\
    \ i : lst)\n        sum += i*i;\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = sum_squares;\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0}))) == (14));\n\
    \    assert(candidate((std::vector<float>({1.0, 3.0, 5.0, 7.0}))) == (84));\n\
    \    assert(candidate((std::vector<float>({1.4, 4.2, 0.0}))) == (29));\n    assert(candidate((std::vector<float>({-2.4,\
    \ 1.0, 1.0}))) == (6));\n    assert(candidate((std::vector<float>({100.0, 1.0,\
    \ 15.0, 2.0}))) == (10230));\n    assert(candidate((std::vector<float>({10000.0,\
    \ 10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4, 17.9,\
    \ 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpkumpqxd_: /tmp/tmpkumpqxd_.cpp:23: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    long long int\
    \ temp = 0;\n    long long int temp2 = 0;\n    long long int temp3 = 0;\n    long\
    \ long int temp4 = 0;\n    long long int temp5 = 0;\n    long long int temp6 =\
    \ 0;\n    long long int temp7 = 0;\n    long long int temp8 = 0;\n    long long\
    \ int temp9 = 0;\n    long long int temp10 = 0;\n    long long int temp11 = 0;\n\
    \    long long int temp12 = 0;\n    long long int temp13 = 0;\n    long long int\
    \ temp14 = 0;\n    long long int temp15 = 0;\n    long long int temp16 = 0;\n\
    \    long long int temp17 = 0;\n    long long int temp18 = 0;\n    long long int\
    \ temp19 = 0;\n    long long int temp20 = 0;\n    long long int temp21 = 0;\n\
    \    long long int temp22 = 0;\n    long long int temp23 = 0;\n    long long int\
    \ temp24 = 0;\n    long long int temp25 = 0;\n    long long int temp26 = 0;\n\
    \    long long int temp27 = 0;\n    long long int temp28 = 0;\n    long long int\
    \ temp29 = 0;\n    long long int temp30 = 0;\n    long long int temp31 = 0;\n\
    \    long long int temp32 = 0;\n    long long int temp33 = 0;\n    long long int\
    \ temp34 = 0;\n    long long int temp35 = 0;\n    long long int temp36 = 0;\n\
    \    long long int temp37 = 0;\n    long long int temp38 = 0;\n    long long int\
    \ temp39 = 0;\n    long long int temp40 = 0;\n    long long int temp41 = 0;\n\
    \    long long int temp42 = 0;\n    long long int temp43 = 0;\n    long long int\
    \ temp44 = 0;\n    long long int temp45 = 0;\n    long long int temp46 = 0;\n\
    \    long long int temp47 = 0;\n    long long int temp48 = 0;\n    long long int\
    \ temp49 = 0;\n    long long int temp50 = 0;\n    long long int temp51 = 0;\n\
    \    long long int temp52 = 0;\n    long long int temp53 = 0;\n    long long int\
    \ temp54 = 0;\n    long long int temp55 = 0;\n    long long int temp56 = 0;\n\
    \    long long int temp57 = 0;\n    long long int temp58 = 0;\n    long long int\
    \ temp59 = 0;\n    long long int temp60 = 0;\n    long long int temp61 = 0;\n\
    \    long long int temp62 = 0;\n    long long int temp63 = 0;\n    long long int\
    \ temp64 = 0;\n\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpb_lt13jv: /tmp/tmpb_lt13jv.cpp:82: int main(): Assertion `candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long int sum = 0;\n    long\
    \ long int n = lst.size();\n    for(long long int i = 0; i < n; i++) {\n     \
    \   sum += lst[i] * lst[i];\n    }\n    return sum;\n}\nint main() {\n    auto\
    \ candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0, 7.0})))\
    \ == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0}))) == (29));\n\
    \    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n    assert(candidate((std::vector<float>({100.0,\
    \ 1.0, 15.0, 2.0}))) == (10230));\n    assert(candidate((std::vector<float>({10000.0,\
    \ 10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4, 17.9,\
    \ 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmp9f1l8_iz: /tmp/tmp9f1l8_iz.cpp:25: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long ans = 0;\n    for(auto\
    \ &i : lst) {\n        ans += i*i;\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpo15xohgf: /tmp/tmpo15xohgf.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long int sum = 0;\n    for(auto\
    \ &i : lst)\n    {\n        sum += i*i;\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmp2pubatdf: /tmp/tmp2pubatdf.cpp:25: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long ans = 0;\n    for(auto\
    \ &x: lst) {\n        ans += x * x;\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmposjhgcv9: /tmp/tmposjhgcv9.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long sum = 0;\n    for(auto\
    \ &i : lst)\n        sum += i*i;\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = sum_squares;\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0}))) == (14));\n\
    \    assert(candidate((std::vector<float>({1.0, 3.0, 5.0, 7.0}))) == (84));\n\
    \    assert(candidate((std::vector<float>({1.4, 4.2, 0.0}))) == (29));\n    assert(candidate((std::vector<float>({-2.4,\
    \ 1.0, 1.0}))) == (6));\n    assert(candidate((std::vector<float>({100.0, 1.0,\
    \ 15.0, 2.0}))) == (10230));\n    assert(candidate((std::vector<float>({10000.0,\
    \ 10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4, 17.9,\
    \ 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpor3ukssn: /tmp/tmpor3ukssn.cpp:23: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long int sum = 0;\n    for(float\
    \ num : lst)\n        sum += num * num;\n    return sum;\n}\nint main() {\n  \
    \  auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmp36_veq8x: /tmp/tmp36_veq8x.cpp:23: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long int sum = 0;\n    long\
    \ long int n = lst.size();\n    for(long long int i = 0; i < n; i++) {\n     \
    \   sum += std::pow(lst[i], 2);\n    }\n    return sum;\n}\nint main() {\n   \
    \ auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpvfxsocfd: /tmp/tmpvfxsocfd.cpp:25: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long sum = 0;\n    long long\
    \ n = lst.size();\n    for(long long i = 0; i < n; i++) {\n        sum += std::pow(static_cast<long\
    \ long>(lst[i]), 2);\n    }\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = sum_squares;\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0}))) == (14));\n\
    \    assert(candidate((std::vector<float>({1.0, 3.0, 5.0, 7.0}))) == (84));\n\
    \    assert(candidate((std::vector<float>({1.4, 4.2, 0.0}))) == (29));\n    assert(candidate((std::vector<float>({-2.4,\
    \ 1.0, 1.0}))) == (6));\n    assert(candidate((std::vector<float>({100.0, 1.0,\
    \ 15.0, 2.0}))) == (10230));\n    assert(candidate((std::vector<float>({10000.0,\
    \ 10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4, 17.9,\
    \ 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpvcz4hopc: /tmp/tmpvcz4hopc.cpp:25: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long ans = 0;\n    for(auto\
    \ i : lst) {\n        ans += i*i;\n    }\n    return ans;\n}\nint main() {\n \
    \   auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmph358rvul: /tmp/tmph358rvul.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long int sum = 0;\n    for(float\
    \ i : lst)\n        sum += std::round(std::ceil(i)*std::ceil(i));\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long sum = 0;\n    for(float\
    \ num : lst)\n        sum += num * num;\n    return sum;\n}\nint main() {\n  \
    \  auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpa9th1otu: /tmp/tmpa9th1otu.cpp:23: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long int sum = 0;\n    for(float\
    \ num : lst) {\n        sum += num * num;\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpu1jjcd7e: /tmp/tmpu1jjcd7e.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long ans = 0;\n    for (auto\
    \ i : lst) {\n        ans += i * i;\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpe6g74yep: /tmp/tmpe6g74yep.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long int sum = 0;\n    long\
    \ long int n = lst.size();\n    for(long long int i = 0; i < n; i++) {\n     \
    \   sum += std::pow(lst[i], 2);\n    }\n    return sum;\n}\nint main() {\n   \
    \ auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpc9ogs4ql: /tmp/tmpc9ogs4ql.cpp:25: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long ans = 0;\n    for (float\
    \ x : lst) {\n        ans += x * x;\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmph5_x99xt: /tmp/tmph5_x99xt.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long sum = 0;\n    long long\
    \ n = lst.size();\n    for(long long i = 0; i < n; i++) {\n        sum += lst[i]\
    \ * lst[i];\n    }\n    return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n\
    \    assert(candidate((std::vector<float>({1.0, 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0,\
    \ 5.0, 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2,\
    \ 0.0}))) == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0})))\
    \ == (6));\n    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0})))\
    \ == (10230));\n    assert(candidate((std::vector<float>({10000.0, 10000.0})))\
    \ == (200000000));\n    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3})))\
    \ == (75));\n    assert(candidate((std::vector<float>({-1.4, 17.9, 18.9, 19.9})))\
    \ == (1086));\n    assert(candidate((std::vector<float>({0.0}))) == (0));\n  \
    \  assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpg9ug8xip: /tmp/tmpg9ug8xip.cpp:25: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long sum = 0;\n    for (float\
    \ i : lst) {\n        sum += i * i;\n    }\n    return sum;\n}\nint main() {\n\
    \    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpy_gl4r84: /tmp/tmpy_gl4r84.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long ans = 0;\n    for(auto\
    \ &x: lst)\n        ans += x*x;\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = sum_squares;\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0}))) == (14));\n\
    \    assert(candidate((std::vector<float>({1.0, 3.0, 5.0, 7.0}))) == (84));\n\
    \    assert(candidate((std::vector<float>({1.4, 4.2, 0.0}))) == (29));\n    assert(candidate((std::vector<float>({-2.4,\
    \ 1.0, 1.0}))) == (6));\n    assert(candidate((std::vector<float>({100.0, 1.0,\
    \ 15.0, 2.0}))) == (10230));\n    assert(candidate((std::vector<float>({10000.0,\
    \ 10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4, 17.9,\
    \ 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmp8z3nqzwl: /tmp/tmp8z3nqzwl.cpp:23: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long int sum = 0;\n    for(float\
    \ num : lst) {\n        sum += num * num;\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpyvl229yb: /tmp/tmpyvl229yb.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long ans = 0;\n    for (float\
    \ i : lst) {\n        ans += i * i;\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmp6mk5gml4: /tmp/tmp6mk5gml4.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long sum = 0;\n    for (float\
    \ f : lst) {\n        sum += std::round(f * f);\n    }\n    return sum;\n}\nint\
    \ main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpv6wpb1cv: /tmp/tmpv6wpb1cv.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long int sum = 0;\n    for (float\
    \ i : lst) {\n        sum += i * i;\n    }\n    return sum;\n}\nint main() {\n\
    \    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmp7fl79cau: /tmp/tmp7fl79cau.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long int sum = 0;\n    for(auto\
    \ &x : lst) {\n        sum += std::round(std::ceil(x * x));\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpbulkkhjv: /tmp/tmpbulkkhjv.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for (float f :\
    \ lst) {\n        sum += std::round(f * f);\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpb8m32vd0: /tmp/tmpb8m32vd0.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long int sum = 0;\n    for(auto\
    \ &i : lst) {\n        sum += i*i;\n    }\n    return sum;\n}\nint main() {\n\
    \    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmps1465ka_: /tmp/tmps1465ka_.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long int sum = 0;\n    for(float\
    \ num : lst){\n        sum += num*num;\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpxoyo4oj5: /tmp/tmpxoyo4oj5.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long ans = 0;\n    for(float\
    \ num : lst) {\n        ans += num * num;\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpxsh_lrlx: /tmp/tmpxsh_lrlx.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long int sum = 0;\n    for(auto\
    \ &num: lst) {\n        sum += num * num;\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmp42_xiv01: /tmp/tmp42_xiv01.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long int sum = 0;\n    for(float\
    \ num : lst)\n        sum += num * num;\n    return sum;\n}\nint main() {\n  \
    \  auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmp4zee2_k5: /tmp/tmp4zee2_k5.cpp:23: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long sum = 0;\n    long long\
    \ n = lst.size();\n    for(long long i = 0; i < n; i++) {\n        sum += std::pow(static_cast<long\
    \ long>(lst[i]), 2);\n    }\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = sum_squares;\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0}))) == (14));\n\
    \    assert(candidate((std::vector<float>({1.0, 3.0, 5.0, 7.0}))) == (84));\n\
    \    assert(candidate((std::vector<float>({1.4, 4.2, 0.0}))) == (29));\n    assert(candidate((std::vector<float>({-2.4,\
    \ 1.0, 1.0}))) == (6));\n    assert(candidate((std::vector<float>({100.0, 1.0,\
    \ 15.0, 2.0}))) == (10230));\n    assert(candidate((std::vector<float>({10000.0,\
    \ 10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4, 17.9,\
    \ 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmp372drol9: /tmp/tmp372drol9.cpp:25: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long ans = 0;\n    for(auto\
    \ &i : lst) {\n        ans += i*i;\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpxnn9b6ok: /tmp/tmpxnn9b6ok.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long sum = 0;\n    for(float\
    \ num : lst)\n        sum += num * num;\n    return sum;\n}\nint main() {\n  \
    \  auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpuf8bavuu: /tmp/tmpuf8bavuu.cpp:23: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long ans = 0;\n    for (float\
    \ f : lst) {\n        ans += std::round(f * f);\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmp5zhzjkns: /tmp/tmp5zhzjkns.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long ans = 0;\n    for(auto\
    \ i : lst) {\n        ans += i*i;\n    }\n    return ans;\n}\nint main() {\n \
    \   auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmputiufuj6: /tmp/tmputiufuj6.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    long long int\
    \ sumsq = 0;\n    long long int sumsq2 = 0;\n    long long int sumsq3 = 0;\n \
    \   long long int sumsq4 = 0;\n    long long int sumsq5 = 0;\n    long long int\
    \ sumsq6 = 0;\n    long long int sumsq7 = 0;\n    long long int sumsq8 = 0;\n\
    \    long long int sumsq9 = 0;\n    long long int sumsq10 = 0;\n    long long\
    \ int sumsq11 = 0;\n    long long int sumsq12 = 0;\n    long long int sumsq13\
    \ = 0;\n    long long int sumsq14 = 0;\n    long long int sumsq15 = 0;\n    long\
    \ long int sumsq16 = 0;\n    long long int sumsq17 = 0;\n    long long int sumsq18\
    \ = 0;\n    long long int sumsq19 = 0;\n    long long int sumsq20 = 0;\n    long\
    \ long int sumsq21 = 0;\n    long long int sumsq22 = 0;\n    long long int sumsq23\
    \ = 0;\n    long long int sumsq24 = 0;\n    long long int sumsq25 = 0;\n    long\
    \ long int sumsq26 = 0;\n    long long int sumsq27 = 0;\n    long long int sumsq28\
    \ = 0;\n    long long int sumsq29 = 0;\n    long long int sumsq30 = 0;\n    long\
    \ long int sumsq31 = 0;\n    long long int sumsq32 = 0;\n    long long int sumsq33\
    \ = 0;\n    long long int sumsq34 = 0;\n    long long int sumsq35 = 0;\n    long\
    \ long int sumsq36 = 0;\n    long long int sumsq37 = 0;\n    long long int sumsq38\
    \ = 0;\n    long long int sumsq39 = 0;\n    long long int sumsq40 = 0;\n    long\
    \ long int sumsq41 = 0;\n    long long int sumsq42 = 0;\n    long long int sumsq43\
    \ = 0;\n    long long int sumsq44 = 0;\n    long long int sumsq45 = 0;\n    long\
    \ long int sumsq46 = 0;\n    long long int sumsq47 = 0;\n    long long int sumsq48\
    \ = 0;\n    long long int sumsq49 = 0;\n    long long int sumsq50 = 0;\n    long\
    \ long int sumsq51 = 0;\n    long long int sumsq52 = 0;\n    long long int sumsq53\
    \ = 0;\n    long long int sumsq54 = 0;\n    long long int sumsq55 = 0;\n    long\
    \ long int sumsq56 = 0;\n    long long int sumsq57 = 0;\n}\nint main() {\n   \
    \ auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpi1cl9jhc: /tmp/tmpi1cl9jhc.cpp:74: int main(): Assertion `candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long sum = 0;\n    long long\
    \ n = lst.size();\n    for(long long i = 0; i < n; i++) {\n        sum += std::pow(static_cast<long\
    \ long>(lst[i]), 2);\n    }\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = sum_squares;\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0}))) == (14));\n\
    \    assert(candidate((std::vector<float>({1.0, 3.0, 5.0, 7.0}))) == (84));\n\
    \    assert(candidate((std::vector<float>({1.4, 4.2, 0.0}))) == (29));\n    assert(candidate((std::vector<float>({-2.4,\
    \ 1.0, 1.0}))) == (6));\n    assert(candidate((std::vector<float>({100.0, 1.0,\
    \ 15.0, 2.0}))) == (10230));\n    assert(candidate((std::vector<float>({10000.0,\
    \ 10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4, 17.9,\
    \ 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpe6q78dxq: /tmp/tmpe6q78dxq.cpp:25: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long sum = 0;\n    for(float\
    \ num : lst) {\n        sum += num * num;\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpexrf0fxy: /tmp/tmpexrf0fxy.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long sum = 0;\n    for(float\
    \ num : lst) {\n        sum += num * num;\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmp_m1r_me5: /tmp/tmp_m1r_me5.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for (float x :\
    \ lst) {\n        sum += x * x;\n    }\n    return sum;\n}\nint main() {\n   \
    \ auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmp30eybkbt: /tmp/tmp30eybkbt.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long sum = 0;\n    for (float\
    \ x : lst) {\n        sum += x * x;\n    }\n    return sum;\n}\nint main() {\n\
    \    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpyqu36oqc: /tmp/tmpyqu36oqc.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long ans = 0;\n    for(float\
    \ num : lst) {\n        ans += num * num;\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmp4wp3orjj: /tmp/tmp4wp3orjj.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long sum = 0;\n    for (float\
    \ i : lst) {\n        sum += i * i;\n    }\n    return sum;\n}\nint main() {\n\
    \    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmp4zswtwhc: /tmp/tmp4zswtwhc.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long ans = 0;\n    for(auto\
    \ &x : lst) {\n        ans += x * x;\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmp410k0fxp: /tmp/tmp410k0fxp.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long ans = 0;\n    for(auto\
    \ i : lst) {\n        ans += i*i;\n    }\n    return ans;\n}\nint main() {\n \
    \   auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpyrc2t1l7: /tmp/tmpyrc2t1l7.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long ans = 0;\n    for (float\
    \ x : lst) {\n        ans += x * x;\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmprcxgqmhn: /tmp/tmprcxgqmhn.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long ans = 0;\n    for (float\
    \ x : lst) {\n        ans += x * x;\n    }\n    return std::ceil(ans);\n}\nint\
    \ main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpu1m7jyy8: /tmp/tmpu1m7jyy8.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long sum = 0;\n    for(float\
    \ num : lst) {\n        sum += num * num;\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmp7mei3p2x: /tmp/tmp7mei3p2x.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long sum = 0;\n    for (float\
    \ i : lst) {\n        sum += i * i;\n    }\n    return sum;\n}\nint main() {\n\
    \    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmp4qhfyizz: /tmp/tmp4qhfyizz.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long int sum = 0;\n    for (float\
    \ f : lst) {\n        sum += std::round(f * f);\n    }\n    return sum;\n}\nint\
    \ main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpufzrys1r: /tmp/tmpufzrys1r.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long ans = 0;\n    for(auto\
    \ i : lst)\n        ans += i * i;\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0, 7.0})))\
    \ == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0}))) == (29));\n\
    \    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n    assert(candidate((std::vector<float>({100.0,\
    \ 1.0, 15.0, 2.0}))) == (10230));\n    assert(candidate((std::vector<float>({10000.0,\
    \ 10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4, 17.9,\
    \ 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmp5g06cdax: /tmp/tmp5g06cdax.cpp:23: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    long long int\
    \ sumsq = 0;\n    for(auto &i : lst) {\n        sum += i;\n        sumsq += i*i;\n\
    \    }\n    return sumsq;\n}\nint main() {\n    auto candidate = sum_squares;\n\
    \    assert(candidate((std::vector<float>({1.0, 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0,\
    \ 5.0, 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2,\
    \ 0.0}))) == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0})))\
    \ == (6));\n    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0})))\
    \ == (10230));\n    assert(candidate((std::vector<float>({10000.0, 10000.0})))\
    \ == (200000000));\n    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3})))\
    \ == (75));\n    assert(candidate((std::vector<float>({-1.4, 17.9, 18.9, 19.9})))\
    \ == (1086));\n    assert(candidate((std::vector<float>({0.0}))) == (0));\n  \
    \  assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmplsfh4e6s: /tmp/tmplsfh4e6s.cpp:26: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long ans = 0;\n    for (auto\
    \ &x : lst) {\n        ans += x * x;\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmp57_rkv5g: /tmp/tmp57_rkv5g.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long sum = 0;\n    for(float\
    \ num : lst) {\n        sum += num * num;\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmp4_4f9360: /tmp/tmp4_4f9360.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    // Your code here\n    long sum =\
    \ 0;\n    for (float i : lst) {\n        sum += i * i;\n    }\n    return sum;\n\
    }\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpbtnku32i: /tmp/tmpbtnku32i.cpp:25: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long int sum = 0;\n    for(float\
    \ num : lst) {\n        sum += num * num;\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpk6dntm71: /tmp/tmpk6dntm71.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long int sum = 0;\n    for(auto\
    \ &i : lst) {\n        sum += std::round(std::ceil(i) * std::ceil(i));\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long int sum = 0;\n    for(float\
    \ i : lst)\n        sum += i*i;\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = sum_squares;\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0}))) == (14));\n\
    \    assert(candidate((std::vector<float>({1.0, 3.0, 5.0, 7.0}))) == (84));\n\
    \    assert(candidate((std::vector<float>({1.4, 4.2, 0.0}))) == (29));\n    assert(candidate((std::vector<float>({-2.4,\
    \ 1.0, 1.0}))) == (6));\n    assert(candidate((std::vector<float>({100.0, 1.0,\
    \ 15.0, 2.0}))) == (10230));\n    assert(candidate((std::vector<float>({10000.0,\
    \ 10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4, 17.9,\
    \ 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpv8s2iqoq: /tmp/tmpv8s2iqoq.cpp:23: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long int sum = 0;\n    for(float\
    \ num : lst) {\n        sum += num * num;\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpfbisg_dh: /tmp/tmpfbisg_dh.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long int sum = 0;\n    for(auto\
    \ &i : lst) {\n        sum += i * i;\n    }\n    return sum;\n}\nint main() {\n\
    \    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpdvkb7jly: /tmp/tmpdvkb7jly.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long ans = 0;\n    for(float\
    \ num : lst) {\n        ans += num * num;\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmp6h4puo1x: /tmp/tmp6h4puo1x.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long int sum = 0;\n    for (float\
    \ i : lst) {\n        sum += i * i;\n    }\n    return sum;\n}\nint main() {\n\
    \    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpswhnpcls: /tmp/tmpswhnpcls.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long int sum = 0;\n    for (auto\
    \ i : lst) {\n        sum += i * i;\n    }\n    return sum;\n}\nint main() {\n\
    \    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpzj4i_bpm: /tmp/tmpzj4i_bpm.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long ans = 0;\n    for(float\
    \ num : lst) {\n        ans += num * num;\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpx_pcqudj: /tmp/tmpx_pcqudj.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long int sum = 0;\n    for(auto\
    \ &i : lst)\n        sum += i * i;\n    return sum;\n}\nint main() {\n    auto\
    \ candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0, 7.0})))\
    \ == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0}))) == (29));\n\
    \    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n    assert(candidate((std::vector<float>({100.0,\
    \ 1.0, 15.0, 2.0}))) == (10230));\n    assert(candidate((std::vector<float>({10000.0,\
    \ 10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4, 17.9,\
    \ 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpi2hdla_u: /tmp/tmpi2hdla_u.cpp:23: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long ans = 0;\n    for (float\
    \ f : lst) {\n        ans += f*f;\n    }\n    return ans;\n}\nint main() {\n \
    \   auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmputxokj56: /tmp/tmputxokj56.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long int sum = 0;\n    for (float\
    \ i : lst) {\n        sum += i * i;\n    }\n    return sum;\n}\nint main() {\n\
    \    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmp5bljryoy: /tmp/tmp5bljryoy.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long int sum = 0;\n    for(float\
    \ num : lst) {\n        sum += num * num;\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmprj28anp1: /tmp/tmprj28anp1.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long ans = 0;\n    for(float\
    \ x : lst) {\n        ans += x * x;\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmp24u902sa: /tmp/tmp24u902sa.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long sum = 0;\n    for(float\
    \ i : lst) {\n        sum += i*i;\n    }\n    return sum;\n}\nint main() {\n \
    \   auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpx987l_a2: /tmp/tmpx987l_a2.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long sum = 0;\n    for(float\
    \ num : lst) {\n        sum += num * num;\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpf9q6kboy: /tmp/tmpf9q6kboy.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long sum = 0;\n    for(auto\
    \ &num : lst) {\n        sum += num * num;\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpda8g2pku: /tmp/tmpda8g2pku.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long sum = 0;\n    for(float\
    \ i : lst) {\n        sum += i*i;\n    }\n    return sum;\n}\nint main() {\n \
    \   auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpw_hdmmk7: /tmp/tmpw_hdmmk7.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long sum = 0;\n    for (float\
    \ i : lst) {\n        sum += i * i;\n    }\n    return sum;\n}\nint main() {\n\
    \    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpf6k844uv: /tmp/tmpf6k844uv.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long int sum = 0;\n    for(float\
    \ num : lst)\n        sum += num * num;\n    return sum;\n}\nint main() {\n  \
    \  auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpgwqxhusr: /tmp/tmpgwqxhusr.cpp:23: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long sum = 0;\n    long long\
    \ n = lst.size();\n    for(long long i = 0; i < n; i++) {\n        sum += std::pow(static_cast<long\
    \ long>(lst[i]), 2);\n    }\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = sum_squares;\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0}))) == (14));\n\
    \    assert(candidate((std::vector<float>({1.0, 3.0, 5.0, 7.0}))) == (84));\n\
    \    assert(candidate((std::vector<float>({1.4, 4.2, 0.0}))) == (29));\n    assert(candidate((std::vector<float>({-2.4,\
    \ 1.0, 1.0}))) == (6));\n    assert(candidate((std::vector<float>({100.0, 1.0,\
    \ 15.0, 2.0}))) == (10230));\n    assert(candidate((std::vector<float>({10000.0,\
    \ 10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4, 17.9,\
    \ 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpru9oij8a: /tmp/tmpru9oij8a.cpp:25: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long sum = 0;\n    for(float\
    \ num : lst) {\n        sum += num * num;\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmp0gr69rhc: /tmp/tmp0gr69rhc.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long ans = 0;\n    for (float\
    \ x : lst) {\n        ans += x * x;\n    }\n    return std::round(ans);\n}\nint\
    \ main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpyu2s056i: /tmp/tmpyu2s056i.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long ans = 0;\n    for (auto\
    \ &i : lst) {\n        ans += i * i;\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpfxlxoide: /tmp/tmpfxlxoide.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long int sum = 0;\n    for (float\
    \ f : lst) {\n        sum += static_cast<long long>(std::ceil(f * f));\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmp5i58lj4c: /tmp/tmp5i58lj4c.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    // Write your code here\n    long\
    \ sum = 0;\n    for(float num : lst) {\n        sum += num * num;\n    }\n   \
    \ return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpzvpiuf9a: /tmp/tmpzvpiuf9a.cpp:25: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long sum = 0;\n    long long\
    \ n = lst.size();\n    for(long long i = 0; i < n; i++) {\n        sum += std::pow(static_cast<double>(lst[i]),\
    \ 2);\n    }\n    return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n\
    \    assert(candidate((std::vector<float>({1.0, 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0,\
    \ 5.0, 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2,\
    \ 0.0}))) == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0})))\
    \ == (6));\n    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0})))\
    \ == (10230));\n    assert(candidate((std::vector<float>({10000.0, 10000.0})))\
    \ == (200000000));\n    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3})))\
    \ == (75));\n    assert(candidate((std::vector<float>({-1.4, 17.9, 18.9, 19.9})))\
    \ == (1086));\n    assert(candidate((std::vector<float>({0.0}))) == (0));\n  \
    \  assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmp4unmv6k1: /tmp/tmp4unmv6k1.cpp:25: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long ans = 0;\n    for (float\
    \ i : lst) {\n        ans += i * i;\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpx1uty57o: /tmp/tmpx1uty57o.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long int sum = 0;\n    for(auto\
    \ &i : lst)\n        sum += i*i;\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = sum_squares;\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0}))) == (14));\n\
    \    assert(candidate((std::vector<float>({1.0, 3.0, 5.0, 7.0}))) == (84));\n\
    \    assert(candidate((std::vector<float>({1.4, 4.2, 0.0}))) == (29));\n    assert(candidate((std::vector<float>({-2.4,\
    \ 1.0, 1.0}))) == (6));\n    assert(candidate((std::vector<float>({100.0, 1.0,\
    \ 15.0, 2.0}))) == (10230));\n    assert(candidate((std::vector<float>({10000.0,\
    \ 10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4, 17.9,\
    \ 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpvwcafzri: /tmp/tmpvwcafzri.cpp:23: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    // Write your code here\n    long\
    \ sum = 0;\n    long n = lst.size();\n    long sum_squares = 0;\n    long temp\
    \ = 0;\n    for(long i = 0; i < n; i++) {\n        temp = ceil(lst[i]);\n    \
    \    sum += temp * temp;\n        sum_squares += temp * temp;\n    }\n    return\
    \ sum_squares/sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpt50r9x1p: /tmp/tmpt50r9x1p.cpp:27: int main(): Assertion `candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long ans = 0;\n    for(auto\
    \ &x : lst) {\n        ans += x * x;\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmp6cclh12q: /tmp/tmp6cclh12q.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long int sum = 0;\n    for(auto\
    \ &x: lst) {\n        sum += std::round(std::ceil(x * x)); // round the element\
    \ to the upper int(Ceiling) first\n    }\n    return sum;\n}\nint main() {\n \
    \   auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmp4xmm_z7n: /tmp/tmp4xmm_z7n.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long sum = 0;\n    long long\
    \ n = lst.size();\n    for(long long i = 0; i < n; i++) {\n        sum += std::round(lst[i]\
    \ * lst[i]);\n    }\n    return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n\
    \    assert(candidate((std::vector<float>({1.0, 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0,\
    \ 5.0, 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2,\
    \ 0.0}))) == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0})))\
    \ == (6));\n    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0})))\
    \ == (10230));\n    assert(candidate((std::vector<float>({10000.0, 10000.0})))\
    \ == (200000000));\n    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3})))\
    \ == (75));\n    assert(candidate((std::vector<float>({-1.4, 17.9, 18.9, 19.9})))\
    \ == (1086));\n    assert(candidate((std::vector<float>({0.0}))) == (0));\n  \
    \  assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpcarq4fta: /tmp/tmpcarq4fta.cpp:25: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long sum = 0;\n    for(auto\
    \ &num : lst)\n        sum += num * num;\n    return sum;\n}\nint main() {\n \
    \   auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpp_inyrlq: /tmp/tmpp_inyrlq.cpp:23: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long int sum = 0;\n    for(float\
    \ num : lst) {\n        sum += num * num;\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmp86xe9ndr: /tmp/tmp86xe9ndr.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long int sum = 0;\n    for(auto\
    \ &num : lst) {\n        sum += num * num;\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpuhuq_qub: /tmp/tmpuhuq_qub.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    // Write your code here\n    long\
    \ sum = 0;\n    for(float num : lst)\n    {\n        sum += num * num;\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpfxoc478v: /tmp/tmpfxoc478v.cpp:26: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long sum = 0;\n    for(float\
    \ num : lst) {\n        sum += num * num;\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpzcjsdf3o: /tmp/tmpzcjsdf3o.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long sum = 0;\n    long long\
    \ temp = 0;\n    for(float i : lst) {\n        temp = i;\n        temp = ceil(temp);\n\
    \        sum += temp * temp;\n    }\n    return sum;\n}\nint main() {\n    auto\
    \ candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0, 7.0})))\
    \ == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0}))) == (29));\n\
    \    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n    assert(candidate((std::vector<float>({100.0,\
    \ 1.0, 15.0, 2.0}))) == (10230));\n    assert(candidate((std::vector<float>({10000.0,\
    \ 10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4, 17.9,\
    \ 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpzc7l_y5i: /tmp/tmpzc7l_y5i.cpp:27: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long ans = 0;\n    for (float\
    \ i : lst) {\n        ans += i * i;\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmp7h4wtyei: /tmp/tmp7h4wtyei.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long ans = 0;\n    for(float\
    \ num : lst) {\n        ans += num * num;\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmph2i8sbbt: /tmp/tmph2i8sbbt.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long int sum = 0;\n    for(auto\
    \ &i : lst) {\n        sum += i * i;\n    }\n    return sum;\n}\nint main() {\n\
    \    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpd38957ic: /tmp/tmpd38957ic.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long ans = 0;\n    for(float\
    \ num : lst) {\n        ans += num * num;\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpl1_2r_q5: /tmp/tmpl1_2r_q5.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long sum = 0;\n    for (float\
    \ i : lst) {\n        sum += i * i;\n    }\n    return sum;\n}\nint main() {\n\
    \    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpn3epauiz: /tmp/tmpn3epauiz.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long ans = 0;\n    for(auto\
    \ &num : lst)\n        ans += num * num;\n    return ans;\n}\nint main() {\n \
    \   auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpronaci6y: /tmp/tmpronaci6y.cpp:23: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long sum = 0;\n    for (auto\
    \ i : lst) {\n        sum += i * i;\n    }\n    return sum;\n}\nint main() {\n\
    \    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpdc2m97g3: /tmp/tmpdc2m97g3.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long sum = 0;\n    for(float\
    \ num : lst) {\n        sum += num * num;\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpbfgxyttp: /tmp/tmpbfgxyttp.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long sum = 0;\n    long long\
    \ n = lst.size();\n    for(long long i = 0; i < n; i++) {\n        sum += std::round(lst[i]*lst[i]);\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n\
    \    assert(candidate((std::vector<float>({1.0, 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0,\
    \ 5.0, 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2,\
    \ 0.0}))) == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0})))\
    \ == (6));\n    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0})))\
    \ == (10230));\n    assert(candidate((std::vector<float>({10000.0, 10000.0})))\
    \ == (200000000));\n    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3})))\
    \ == (75));\n    assert(candidate((std::vector<float>({-1.4, 17.9, 18.9, 19.9})))\
    \ == (1086));\n    assert(candidate((std::vector<float>({0.0}))) == (0));\n  \
    \  assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmp7ibyi7_i: /tmp/tmp7ibyi7_i.cpp:25: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long ans = 0;\n    for(auto\
    \ i : lst)\n        ans += i*i;\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = sum_squares;\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0}))) == (14));\n\
    \    assert(candidate((std::vector<float>({1.0, 3.0, 5.0, 7.0}))) == (84));\n\
    \    assert(candidate((std::vector<float>({1.4, 4.2, 0.0}))) == (29));\n    assert(candidate((std::vector<float>({-2.4,\
    \ 1.0, 1.0}))) == (6));\n    assert(candidate((std::vector<float>({100.0, 1.0,\
    \ 15.0, 2.0}))) == (10230));\n    assert(candidate((std::vector<float>({10000.0,\
    \ 10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4, 17.9,\
    \ 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmp52q1vs3g: /tmp/tmp52q1vs3g.cpp:23: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long ans = 0;\n    for (float\
    \ f : lst) {\n        ans += (long long)f*f;\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmp114thfi7: /tmp/tmp114thfi7.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long sum = 0;\n    for (float\
    \ i : lst) {\n        sum += i * i;\n    }\n    return sum;\n}\nint main() {\n\
    \    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpu66d_hbp: /tmp/tmpu66d_hbp.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long int sum = 0;\n    for (float\
    \ f : lst) {\n        sum += static_cast<long long>(f*f);\n    }\n    return sum;\n\
    }\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpw2ihfz5y: /tmp/tmpw2ihfz5y.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long int sum = 0;\n    for(float\
    \ num : lst) {\n        sum += num * num;\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpnb828jcl: /tmp/tmpnb828jcl.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long int sum = 0;\n    long\
    \ long int n = lst.size();\n    for(long long int i = 0; i < n; i++) {\n     \
    \   sum += std::pow(static_cast<long long int>(lst[i]), 2);\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpofa6b5nq: /tmp/tmpofa6b5nq.cpp:25: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long sum = 0;\n    for(float\
    \ num : lst) {\n        sum += num * num;\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmp2q9i95r3: /tmp/tmp2q9i95r3.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long int sum = 0;\n    for(float\
    \ num : lst) {\n        sum += num * num;\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmp22uhvf1m: /tmp/tmp22uhvf1m.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long sum = 0;\n    for(auto\
    \ &num : lst) {\n        sum += num * num;\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpr5v4xwcs: /tmp/tmpr5v4xwcs.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long ans = 0;\n    for(auto\
    \ &x: lst) {\n        ans += x * x;\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpb21xb2w2: /tmp/tmpb21xb2w2.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long ans = 0;\n    for (float\
    \ x : lst) {\n        ans += x * x;\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmp91762tps: /tmp/tmp91762tps.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long ans = 0;\n    for (float\
    \ f : lst) {\n        ans += std::round(f * f);\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmp8fcows_u: /tmp/tmp8fcows_u.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long int sum = 0;\n    for(float\
    \ num : lst){\n        sum += num * num;\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpj8dk7zer: /tmp/tmpj8dk7zer.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long sum = 0;\n    for(float\
    \ num : lst)\n        sum += num * num;\n    return sum;\n}\nint main() {\n  \
    \  auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmp_yr_02hf: /tmp/tmp_yr_02hf.cpp:23: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long sum = 0;\n    long long\
    \ n = lst.size();\n    for(long long i = 0; i < n; i++) {\n        sum += std::pow(static_cast<long\
    \ long>(lst[i]), 2);\n    }\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = sum_squares;\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0}))) == (14));\n\
    \    assert(candidate((std::vector<float>({1.0, 3.0, 5.0, 7.0}))) == (84));\n\
    \    assert(candidate((std::vector<float>({1.4, 4.2, 0.0}))) == (29));\n    assert(candidate((std::vector<float>({-2.4,\
    \ 1.0, 1.0}))) == (6));\n    assert(candidate((std::vector<float>({100.0, 1.0,\
    \ 15.0, 2.0}))) == (10230));\n    assert(candidate((std::vector<float>({10000.0,\
    \ 10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4, 17.9,\
    \ 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpp036a14s: /tmp/tmpp036a14s.cpp:25: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long sum = 0;\n    for(auto\
    \ i : lst)\n        sum += i*i;\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = sum_squares;\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0}))) == (14));\n\
    \    assert(candidate((std::vector<float>({1.0, 3.0, 5.0, 7.0}))) == (84));\n\
    \    assert(candidate((std::vector<float>({1.4, 4.2, 0.0}))) == (29));\n    assert(candidate((std::vector<float>({-2.4,\
    \ 1.0, 1.0}))) == (6));\n    assert(candidate((std::vector<float>({100.0, 1.0,\
    \ 15.0, 2.0}))) == (10230));\n    assert(candidate((std::vector<float>({10000.0,\
    \ 10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4, 17.9,\
    \ 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmp44qro80x: /tmp/tmp44qro80x.cpp:23: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long int sum = 0;\n    for(float\
    \ num : lst){\n        sum += num*num;\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmp9n_wxloa: /tmp/tmp9n_wxloa.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long int sum = 0;\n    for(auto\
    \ i : lst)\n    {\n        sum += i*i;\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpx7_z4rjr: /tmp/tmpx7_z4rjr.cpp:25: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long int sum = 0;\n    for(float\
    \ num : lst)\n        sum += num * num;\n    return sum;\n}\nint main() {\n  \
    \  auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpdlfa3qgm: /tmp/tmpdlfa3qgm.cpp:23: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long int sum = 0;\n    long\
    \ long int temp = 0;\n    for(auto &i : lst) {\n        temp = i;\n        temp\
    \ = ceil(temp);\n        sum += temp * temp;\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmprtm_p_dl: /tmp/tmprtm_p_dl.cpp:27: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long sum = 0;\n    for(float\
    \ num : lst)\n        sum += num * num;\n    return sum;\n}\nint main() {\n  \
    \  auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmp7k3bw1vo: /tmp/tmp7k3bw1vo.cpp:23: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long sum = 0;\n    for(auto\
    \ &i : lst) {\n        sum += i*i;\n    }\n    return sum;\n}\nint main() {\n\
    \    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmprcpb13wl: /tmp/tmprcpb13wl.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long int sum = 0;\n    for(auto\
    \ i : lst) {\n        sum += i * i;\n    }\n    return sum;\n}\nint main() {\n\
    \    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpioszmd1_: /tmp/tmpioszmd1_.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long int sum = 0;\n    for(auto\
    \ &x : lst) {\n        sum += x * x;\n    }\n    return sum;\n}\nint main() {\n\
    \    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmp0e13s0ud: /tmp/tmp0e13s0ud.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long int sum = 0;\n    for(auto\
    \ &i : lst)\n        sum += std::round(std::ceil(i) * std::ceil(i));\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: !!int ''
  stderr: !!int ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long int sum = 0;\n    for(auto\
    \ &i : lst) {\n        sum += i*i;\n    }\n    return sum;\n}\nint main() {\n\
    \    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmptvlkb_2b: /tmp/tmptvlkb_2b.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long sum = 0;\n    for (float\
    \ x : lst) {\n        sum += x * x;\n    }\n    return sum;\n}\nint main() {\n\
    \    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpcecvxpsh: /tmp/tmpcecvxpsh.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long ans = 0;\n    for(float\
    \ i : lst) {\n        ans += i*i;\n    }\n    return ans;\n}\nint main() {\n \
    \   auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpuez7fo4i: /tmp/tmpuez7fo4i.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long ans = 0;\n    for(auto\
    \ &i : lst)\n        ans += i*i;\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = sum_squares;\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0}))) == (14));\n\
    \    assert(candidate((std::vector<float>({1.0, 3.0, 5.0, 7.0}))) == (84));\n\
    \    assert(candidate((std::vector<float>({1.4, 4.2, 0.0}))) == (29));\n    assert(candidate((std::vector<float>({-2.4,\
    \ 1.0, 1.0}))) == (6));\n    assert(candidate((std::vector<float>({100.0, 1.0,\
    \ 15.0, 2.0}))) == (10230));\n    assert(candidate((std::vector<float>({10000.0,\
    \ 10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4, 17.9,\
    \ 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmp0f06cwgp: /tmp/tmp0f06cwgp.cpp:23: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long ans = 0;\n    for(auto\
    \ &x : lst)\n        ans += std::round(std::ceil(x * x));\n    return ans;\n}\n\
    int main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpq1kt70iy: /tmp/tmpq1kt70iy.cpp:23: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long ans = 0;\n    for(float\
    \ num : lst) {\n        ans += num * num;\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmp051_8mv_: /tmp/tmp051_8mv_.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long ans = 0;\n    for(float\
    \ num : lst) {\n        ans += num * num;\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpcxp51e7l: /tmp/tmpcxp51e7l.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long sum = 0;\n    for(float\
    \ num : lst) {\n        sum += num * num;\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpnk4q7jzk: /tmp/tmpnk4q7jzk.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long int sum = 0;\n    for(auto\
    \ &i : lst) {\n        sum += i * i;\n    }\n    return sum;\n}\nint main() {\n\
    \    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpspwtdbj_: /tmp/tmpspwtdbj_.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long int sum = 0;\n    for(auto\
    \ &num : lst)\n        sum += num * num;\n    return sum;\n}\nint main() {\n \
    \   auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpvv3ihlpc: /tmp/tmpvv3ihlpc.cpp:23: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long int sum = 0;\n    for(auto\
    \ &num : lst) {\n        sum += num * num;\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpythzt8w0: /tmp/tmpythzt8w0.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long sum = 0;\n    long long\
    \ n = lst.size();\n    for(long long i = 0; i < n; i++) {\n        sum += std::pow(lst[i],\
    \ 2);\n    }\n    return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n\
    \    assert(candidate((std::vector<float>({1.0, 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0,\
    \ 5.0, 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2,\
    \ 0.0}))) == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0})))\
    \ == (6));\n    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0})))\
    \ == (10230));\n    assert(candidate((std::vector<float>({10000.0, 10000.0})))\
    \ == (200000000));\n    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3})))\
    \ == (75));\n    assert(candidate((std::vector<float>({-1.4, 17.9, 18.9, 19.9})))\
    \ == (1086));\n    assert(candidate((std::vector<float>({0.0}))) == (0));\n  \
    \  assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpzo237yl3: /tmp/tmpzo237yl3.cpp:25: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long int sum = 0;\n    for(float\
    \ num : lst) {\n        sum += num * num;\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpggmz94hz: /tmp/tmpggmz94hz.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long int sum = 0;\n    for(auto\
    \ i : lst) {\n        sum += i * i;\n    }\n    return sum;\n}\nint main() {\n\
    \    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpvljfqvog: /tmp/tmpvljfqvog.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long sum = 0;\n    for(float\
    \ num : lst) {\n        sum += num * num;\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmp5qba6r9f: /tmp/tmp5qba6r9f.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long ans = 0;\n    for(auto\
    \ &i : lst) {\n        ans += i*i;\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmp4m2z7111: /tmp/tmp4m2z7111.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    // Write your code here\n    long\
    \ long sum = 0;\n    for (float i : lst) {\n        sum += i * i;\n    }\n   \
    \ return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmp3dfstkbb: /tmp/tmp3dfstkbb.cpp:25: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long sum = 0;\n    for(float\
    \ num : lst) {\n        sum += num * num;\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmp1zeki0h4: /tmp/tmp1zeki0h4.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long ans = 0;\n    for(auto\
    \ i : lst)\n        ans += i * i;\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0, 7.0})))\
    \ == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0}))) == (29));\n\
    \    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n    assert(candidate((std::vector<float>({100.0,\
    \ 1.0, 15.0, 2.0}))) == (10230));\n    assert(candidate((std::vector<float>({10000.0,\
    \ 10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4, 17.9,\
    \ 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpwpjc6cyg: /tmp/tmpwpjc6cyg.cpp:23: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    long n = lst.size();\n\
    \    for(long i = 0; i < n; i++) {\n        sum += lst[i] * lst[i];\n    }\n \
    \   return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpfwvcp3yb: /tmp/tmpfwvcp3yb.cpp:25: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    // Write your code here\n    long\
    \ sum = 0;\n    for (float x : lst) {\n        sum += x * x;\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpwb1s_2wl: /tmp/tmpwb1s_2wl.cpp:25: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long int sum = 0;\n    for (float\
    \ i : lst) {\n        sum += i * i;\n    }\n    return sum;\n}\nint main() {\n\
    \    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpw4ppztuw: /tmp/tmpw4ppztuw.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long sum = 0;\n    for (float\
    \ i : lst) {\n        sum += i * i;\n    }\n    return sum;\n}\nint main() {\n\
    \    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmp2k7fucey: /tmp/tmp2k7fucey.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long sum = 0;\n    for(auto\
    \ i : lst)\n        sum += i * i;\n    return sum;\n}\nint main() {\n    auto\
    \ candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0, 7.0})))\
    \ == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0}))) == (29));\n\
    \    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n    assert(candidate((std::vector<float>({100.0,\
    \ 1.0, 15.0, 2.0}))) == (10230));\n    assert(candidate((std::vector<float>({10000.0,\
    \ 10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4, 17.9,\
    \ 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmp85aff_mu: /tmp/tmp85aff_mu.cpp:23: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long int sum = 0;\n    for(float\
    \ num : lst)\n        sum += num * num;\n    return sum;\n}\nint main() {\n  \
    \  auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmp2x5agj96: /tmp/tmp2x5agj96.cpp:23: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long int sum = 0;\n    for(float\
    \ i : lst)\n        sum += i*i;\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = sum_squares;\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0}))) == (14));\n\
    \    assert(candidate((std::vector<float>({1.0, 3.0, 5.0, 7.0}))) == (84));\n\
    \    assert(candidate((std::vector<float>({1.4, 4.2, 0.0}))) == (29));\n    assert(candidate((std::vector<float>({-2.4,\
    \ 1.0, 1.0}))) == (6));\n    assert(candidate((std::vector<float>({100.0, 1.0,\
    \ 15.0, 2.0}))) == (10230));\n    assert(candidate((std::vector<float>({10000.0,\
    \ 10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4, 17.9,\
    \ 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpxpryh4ls: /tmp/tmpxpryh4ls.cpp:23: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long sum = 0;\n    for(auto\
    \ &num : lst)\n        sum += num * num;\n    return sum;\n}\nint main() {\n \
    \   auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmppwjcuav6: /tmp/tmppwjcuav6.cpp:23: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long sum = 0;\n    for(float\
    \ num : lst) {\n        sum += num * num;\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpt68gvo7_: /tmp/tmpt68gvo7_.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long ans = 0;\n    for (float\
    \ x : lst) {\n        ans += x * x;\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpmsh8bqkb: /tmp/tmpmsh8bqkb.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long sum = 0;\n    for(float\
    \ num : lst)\n        sum += num * num;\n    return sum;\n}\nint main() {\n  \
    \  auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmp2_dslywf: /tmp/tmp2_dslywf.cpp:23: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long ans = 0;\n    for(auto\
    \ i : lst)\n        ans += i * i;\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0, 7.0})))\
    \ == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0}))) == (29));\n\
    \    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n    assert(candidate((std::vector<float>({100.0,\
    \ 1.0, 15.0, 2.0}))) == (10230));\n    assert(candidate((std::vector<float>({10000.0,\
    \ 10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4, 17.9,\
    \ 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpgc7tz6ba: /tmp/tmpgc7tz6ba.cpp:23: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long int sum = 0;\n    for(float\
    \ num : lst) {\n        sum += num * num;\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpaxgzj1o6: /tmp/tmpaxgzj1o6.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long sum = 0;\n    long long\
    \ n = lst.size();\n    for(long long i = 0; i < n; i++) {\n        sum += lst[i]*lst[i];\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n\
    \    assert(candidate((std::vector<float>({1.0, 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0,\
    \ 5.0, 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2,\
    \ 0.0}))) == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0})))\
    \ == (6));\n    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0})))\
    \ == (10230));\n    assert(candidate((std::vector<float>({10000.0, 10000.0})))\
    \ == (200000000));\n    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3})))\
    \ == (75));\n    assert(candidate((std::vector<float>({-1.4, 17.9, 18.9, 19.9})))\
    \ == (1086));\n    assert(candidate((std::vector<float>({0.0}))) == (0));\n  \
    \  assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmp6r91fcor: /tmp/tmp6r91fcor.cpp:25: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long int sum = 0;\n    for(auto\
    \ &num : lst)\n        sum += num * num;\n    return sum;\n}\nint main() {\n \
    \   auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmp55_9j6r5: /tmp/tmp55_9j6r5.cpp:23: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long ans = 0;\n    for (float\
    \ f : lst) {\n        ans += (long long)(f*f);\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmp1ow8x_6e: /tmp/tmp1ow8x_6e.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long sum = 0;\n    for (float\
    \ x : lst) {\n        sum += x * x;\n    }\n    return sum;\n}\nint main() {\n\
    \    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmp36euzz5l: /tmp/tmp36euzz5l.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long int sum = 0;\n    for(auto\
    \ &i : lst)\n        sum += i * i;\n    return sum;\n}\nint main() {\n    auto\
    \ candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0, 7.0})))\
    \ == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0}))) == (29));\n\
    \    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n    assert(candidate((std::vector<float>({100.0,\
    \ 1.0, 15.0, 2.0}))) == (10230));\n    assert(candidate((std::vector<float>({10000.0,\
    \ 10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4, 17.9,\
    \ 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpcb555p7r: /tmp/tmpcb555p7r.cpp:23: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long sum = 0;\n    long long\
    \ temp = 0;\n    for (auto i : lst) {\n        temp = i;\n        sum += temp\
    \ * temp;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n\
    \    assert(candidate((std::vector<float>({1.0, 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0,\
    \ 5.0, 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2,\
    \ 0.0}))) == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0})))\
    \ == (6));\n    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0})))\
    \ == (10230));\n    assert(candidate((std::vector<float>({10000.0, 10000.0})))\
    \ == (200000000));\n    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3})))\
    \ == (75));\n    assert(candidate((std::vector<float>({-1.4, 17.9, 18.9, 19.9})))\
    \ == (1086));\n    assert(candidate((std::vector<float>({0.0}))) == (0));\n  \
    \  assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmphm6w40b7: /tmp/tmphm6w40b7.cpp:26: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long sum = 0;\n    for(float\
    \ num : lst) {\n        sum += num * num;\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpuhz9egd0: /tmp/tmpuhz9egd0.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long int sum = 0;\n    for(auto\
    \ i : lst)\n        sum += i * i;\n    return sum;\n}\nint main() {\n    auto\
    \ candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0, 7.0})))\
    \ == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0}))) == (29));\n\
    \    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n    assert(candidate((std::vector<float>({100.0,\
    \ 1.0, 15.0, 2.0}))) == (10230));\n    assert(candidate((std::vector<float>({10000.0,\
    \ 10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4, 17.9,\
    \ 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpbff1408a: /tmp/tmpbff1408a.cpp:23: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long ans = 0;\n    for (float\
    \ f : lst) {\n        ans += f*f;\n    }\n    return ans;\n}\nint main() {\n \
    \   auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmp9vnzfx7w: /tmp/tmp9vnzfx7w.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long int sum = 0;\n    for(auto\
    \ &i : lst)\n        sum += i*i;\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = sum_squares;\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0}))) == (14));\n\
    \    assert(candidate((std::vector<float>({1.0, 3.0, 5.0, 7.0}))) == (84));\n\
    \    assert(candidate((std::vector<float>({1.4, 4.2, 0.0}))) == (29));\n    assert(candidate((std::vector<float>({-2.4,\
    \ 1.0, 1.0}))) == (6));\n    assert(candidate((std::vector<float>({100.0, 1.0,\
    \ 15.0, 2.0}))) == (10230));\n    assert(candidate((std::vector<float>({10000.0,\
    \ 10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4, 17.9,\
    \ 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpjk63n2kd: /tmp/tmpjk63n2kd.cpp:23: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    // Write your code here\n    long\
    \ long sum = 0;\n    for (float i : lst) {\n        sum += i * i;\n    }\n   \
    \ return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmp1bcpdg8b: /tmp/tmp1bcpdg8b.cpp:25: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long int sum = 0;\n    for(auto\
    \ &i : lst)\n        sum += i*i;\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = sum_squares;\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0}))) == (14));\n\
    \    assert(candidate((std::vector<float>({1.0, 3.0, 5.0, 7.0}))) == (84));\n\
    \    assert(candidate((std::vector<float>({1.4, 4.2, 0.0}))) == (29));\n    assert(candidate((std::vector<float>({-2.4,\
    \ 1.0, 1.0}))) == (6));\n    assert(candidate((std::vector<float>({100.0, 1.0,\
    \ 15.0, 2.0}))) == (10230));\n    assert(candidate((std::vector<float>({10000.0,\
    \ 10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4, 17.9,\
    \ 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpnpp8gaf2: /tmp/tmpnpp8gaf2.cpp:23: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    // Write your code here\n    long\
    \ sum = 0;\n    long long int temp = 0;\n    for(auto &i : lst){\n        temp\
    \ = i;\n        sum += temp*temp;\n    }\n    return sum;\n}\nint main() {\n \
    \   auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpr9lb6xoa: /tmp/tmpr9lb6xoa.cpp:27: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long int sum = 0;\n    for(auto\
    \ &i : lst) {\n        sum += i*i;\n    }\n    return sum;\n}\nint main() {\n\
    \    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmporrlhed8: /tmp/tmporrlhed8.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long sum = 0;\n    for(float\
    \ num : lst) {\n        sum += num * num;\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpw_djybhg: /tmp/tmpw_djybhg.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long int sum = 0;\n    for (float\
    \ i : lst) {\n        sum += i * i;\n    }\n    return sum;\n}\nint main() {\n\
    \    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpv1s8z5u1: /tmp/tmpv1s8z5u1.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long sum = 0;\n    long long\
    \ n = lst.size();\n    for(long long i = 0; i < n; i++) {\n        sum += lst[i]\
    \ * lst[i];\n    }\n    return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n\
    \    assert(candidate((std::vector<float>({1.0, 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0,\
    \ 5.0, 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2,\
    \ 0.0}))) == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0})))\
    \ == (6));\n    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0})))\
    \ == (10230));\n    assert(candidate((std::vector<float>({10000.0, 10000.0})))\
    \ == (200000000));\n    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3})))\
    \ == (75));\n    assert(candidate((std::vector<float>({-1.4, 17.9, 18.9, 19.9})))\
    \ == (1086));\n    assert(candidate((std::vector<float>({0.0}))) == (0));\n  \
    \  assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpdrpue_g2: /tmp/tmpdrpue_g2.cpp:25: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long sum = 0;\n    for(float\
    \ num : lst) {\n        sum += num * num;\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmp9o96yrko: /tmp/tmp9o96yrko.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long ans = 0;\n    for(auto\
    \ &num: lst) {\n        ans += num * num;\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmp0lifw1ed: /tmp/tmp0lifw1ed.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long ans = 0;\n    for(auto\
    \ x:lst)\n        ans += x*x;\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = sum_squares;\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0}))) == (14));\n\
    \    assert(candidate((std::vector<float>({1.0, 3.0, 5.0, 7.0}))) == (84));\n\
    \    assert(candidate((std::vector<float>({1.4, 4.2, 0.0}))) == (29));\n    assert(candidate((std::vector<float>({-2.4,\
    \ 1.0, 1.0}))) == (6));\n    assert(candidate((std::vector<float>({100.0, 1.0,\
    \ 15.0, 2.0}))) == (10230));\n    assert(candidate((std::vector<float>({10000.0,\
    \ 10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4, 17.9,\
    \ 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpkd2wi6s8: /tmp/tmpkd2wi6s8.cpp:23: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long sum = 0;\n    for(auto\
    \ i : lst) {\n        sum += i*i;\n    }\n    return sum;\n}\nint main() {\n \
    \   auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpvnw9dzxh: /tmp/tmpvnw9dzxh.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long ans = 0;\n    for(auto\
    \ &x: lst) {\n        ans += x * x;\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpii0kp_8i: /tmp/tmpii0kp_8i.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long sum = 0;\n    for(auto\
    \ &x : lst) {\n        sum += std::round(std::ceil(x * x));\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpvrgrwz6g: /tmp/tmpvrgrwz6g.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long int sum = 0;\n    for(float\
    \ num : lst) {\n        sum += num * num;\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpmx9omupu: /tmp/tmpmx9omupu.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long ans = 0;\n    for (float\
    \ f : lst) {\n        ans += (long long)(f*f);\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpvjs08bzb: /tmp/tmpvjs08bzb.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long ans = 0;\n    for(auto\
    \ &x: lst)\n        ans += std::round(std::ceil(x*x)*x);\n    return ans;\n}\n\
    int main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmp1_a73xvh: /tmp/tmp1_a73xvh.cpp:20: int main(): Assertion `candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long sum = 0;\n    for(float\
    \ num : lst) {\n        sum += num * num;\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmp11jj2jg8: /tmp/tmp11jj2jg8.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long int sum = 0;\n    for(float\
    \ num : lst)\n        sum += num*num;\n    return sum;\n}\nint main() {\n    auto\
    \ candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0, 7.0})))\
    \ == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0}))) == (29));\n\
    \    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n    assert(candidate((std::vector<float>({100.0,\
    \ 1.0, 15.0, 2.0}))) == (10230));\n    assert(candidate((std::vector<float>({10000.0,\
    \ 10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4, 17.9,\
    \ 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpuig5_xak: /tmp/tmpuig5_xak.cpp:23: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long sum = 0;\n    for(float\
    \ num : lst)\n        sum += num * num;\n    return sum;\n}\nint main() {\n  \
    \  auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmp3qfyrraq: /tmp/tmp3qfyrraq.cpp:23: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long sum = 0;\n    for(float\
    \ num : lst) {\n        sum += num * num;\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmppuhi_jfo: /tmp/tmppuhi_jfo.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long ans = 0;\n    for(float\
    \ num : lst) {\n        ans += num * num;\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmp532ya0uz: /tmp/tmp532ya0uz.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long int sum = 0;\n    for(float\
    \ num : lst)\n        sum += num * num;\n    return sum;\n}\nint main() {\n  \
    \  auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmp0yk09h7f: /tmp/tmp0yk09h7f.cpp:23: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long ans = 0;\n    for (float\
    \ x : lst) {\n        ans += (x * x);\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmp25m8hdmt: /tmp/tmp25m8hdmt.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long int sum = 0;\n    for(float\
    \ num : lst)\n        sum += num * num;\n    return sum;\n}\nint main() {\n  \
    \  auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpo6clkb5u: /tmp/tmpo6clkb5u.cpp:23: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long sum = 0;\n    long long\
    \ n = lst.size();\n    for(long long i = 0; i < n; i++) {\n        sum += std::pow(static_cast<long\
    \ long>(lst[i]), 2);\n    }\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = sum_squares;\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0}))) == (14));\n\
    \    assert(candidate((std::vector<float>({1.0, 3.0, 5.0, 7.0}))) == (84));\n\
    \    assert(candidate((std::vector<float>({1.4, 4.2, 0.0}))) == (29));\n    assert(candidate((std::vector<float>({-2.4,\
    \ 1.0, 1.0}))) == (6));\n    assert(candidate((std::vector<float>({100.0, 1.0,\
    \ 15.0, 2.0}))) == (10230));\n    assert(candidate((std::vector<float>({10000.0,\
    \ 10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4, 17.9,\
    \ 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpc50f00i5: /tmp/tmpc50f00i5.cpp:25: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long int sum = 0;\n    for(auto\
    \ &x: lst)\n        sum += std::round(std::ceil(x * x)); // round the element\
    \ to upper int(Ceiling) first\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = sum_squares;\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0}))) == (14));\n\
    \    assert(candidate((std::vector<float>({1.0, 3.0, 5.0, 7.0}))) == (84));\n\
    \    assert(candidate((std::vector<float>({1.4, 4.2, 0.0}))) == (29));\n    assert(candidate((std::vector<float>({-2.4,\
    \ 1.0, 1.0}))) == (6));\n    assert(candidate((std::vector<float>({100.0, 1.0,\
    \ 15.0, 2.0}))) == (10230));\n    assert(candidate((std::vector<float>({10000.0,\
    \ 10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4, 17.9,\
    \ 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpyx1qo34d: /tmp/tmpyx1qo34d.cpp:23: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long sum = 0;\n    for (float\
    \ f : lst) {\n        sum += std::round(f * f);\n    }\n    return sum;\n}\nint\
    \ main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpmzgl8miv: /tmp/tmpmzgl8miv.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long int sum = 0;\n    for(float\
    \ num : lst)\n        sum += num * num;\n    return sum;\n}\nint main() {\n  \
    \  auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpmf8adbhm: /tmp/tmpmf8adbhm.cpp:23: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
