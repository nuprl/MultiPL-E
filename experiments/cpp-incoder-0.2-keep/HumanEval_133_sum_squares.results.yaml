name: HumanEval_133_sum_squares
language: cpp
results:
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long int sum = 0;\n    for (float\
    \ i : lst) {\n        sum += i * i;\n    }\n    return sum;\n}\nint main() {\n\
    \    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmp3ausn3bu: /tmp/tmp3ausn3bu.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long sum = 0;\n    for(auto\
    \ i : lst)\n        sum += i*i;\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = sum_squares;\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0}))) == (14));\n\
    \    assert(candidate((std::vector<float>({1.0, 3.0, 5.0, 7.0}))) == (84));\n\
    \    assert(candidate((std::vector<float>({1.4, 4.2, 0.0}))) == (29));\n    assert(candidate((std::vector<float>({-2.4,\
    \ 1.0, 1.0}))) == (6));\n    assert(candidate((std::vector<float>({100.0, 1.0,\
    \ 15.0, 2.0}))) == (10230));\n    assert(candidate((std::vector<float>({10000.0,\
    \ 10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4, 17.9,\
    \ 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpmzsjacb4: /tmp/tmpmzsjacb4.cpp:23: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    long long int\
    \ temp = 0;\n    long long int temp2 = 0;\n    long long int temp3 = 0;\n    long\
    \ long int temp4 = 0;\n    long long int temp5 = 0;\n    long long int temp6 =\
    \ 0;\n    long long int temp7 = 0;\n    long long int temp8 = 0;\n    long long\
    \ int temp9 = 0;\n    long long int temp10 = 0;\n    long long int temp11 = 0;\n\
    \    long long int temp12 = 0;\n    long long int temp13 = 0;\n    long long int\
    \ temp14 = 0;\n    long long int temp15 = 0;\n    long long int temp16 = 0;\n\
    \    long long int temp17 = 0;\n    long long int temp18 = 0;\n    long long int\
    \ temp19 = 0;\n    long long int temp20 = 0;\n    long long int temp21 = 0;\n\
    \    long long int temp22 = 0;\n    long long int temp23 = 0;\n    long long int\
    \ temp24 = 0;\n    long long int temp25 = 0;\n    long long int temp26 = 0;\n\
    \    long long int temp27 = 0;\n    long long int temp28 = 0;\n    long long int\
    \ temp29 = 0;\n    long long int temp30 = 0;\n    long long int temp31 = 0;\n\
    \    long long int temp32 = 0;\n    long long int temp33 = 0;\n    long long int\
    \ temp34 = 0;\n    long long int temp35 = 0;\n    long long int temp36 = 0;\n\
    \    long long int temp37 = 0;\n    long long int temp38 = 0;\n    long long int\
    \ temp39 = 0;\n    long long int temp40 = 0;\n    long long int temp41 = 0;\n\
    \    long long int temp42 = 0;\n    long long int temp43 = 0;\n    long long int\
    \ temp44 = 0;\n    long long int temp45 = 0;\n    long long int temp46 = 0;\n\
    \    long long int temp47 = 0;\n    long long int temp48 = 0;\n    long long int\
    \ temp49 = 0;\n    long long int temp50 = 0;\n    long long int temp51 = 0;\n\
    \    long long int temp52 = 0;\n    long long int temp53 = 0;\n    long long int\
    \ temp54 = 0;\n    long long int temp55 = 0;\n    long long int temp56 = 0;\n\
    \    long long int temp57 = 0;\n    long long int temp58 = 0;\n    long long int\
    \ temp59 = 0;\n    long long int temp60 = 0;\n    long long int temp61 = 0;\n\
    \    long long int temp62 = 0;\n    long long int temp63 = 0;\n    long long int\
    \ temp64 = 0;\n\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpgxhmi2os: /tmp/tmpgxhmi2os.cpp:82: int main(): Assertion `candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long int sum = 0;\n    long\
    \ long int n = lst.size();\n    for(long long int i = 0; i < n; i++) {\n     \
    \   sum += lst[i] * lst[i];\n    }\n    return sum;\n}\nint main() {\n    auto\
    \ candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0, 7.0})))\
    \ == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0}))) == (29));\n\
    \    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n    assert(candidate((std::vector<float>({100.0,\
    \ 1.0, 15.0, 2.0}))) == (10230));\n    assert(candidate((std::vector<float>({10000.0,\
    \ 10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4, 17.9,\
    \ 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpxtrdbxgy: /tmp/tmpxtrdbxgy.cpp:25: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long ans = 0;\n    for(auto\
    \ &i : lst) {\n        ans += i*i;\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpsyzz5v0u: /tmp/tmpsyzz5v0u.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long int sum = 0;\n    for(auto\
    \ &i : lst)\n    {\n        sum += i*i;\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmp7xj14o1a: /tmp/tmp7xj14o1a.cpp:25: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long ans = 0;\n    for(auto\
    \ &x: lst) {\n        ans += x * x;\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpeortdmlg: /tmp/tmpeortdmlg.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long sum = 0;\n    for(auto\
    \ &i : lst)\n        sum += i*i;\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = sum_squares;\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0}))) == (14));\n\
    \    assert(candidate((std::vector<float>({1.0, 3.0, 5.0, 7.0}))) == (84));\n\
    \    assert(candidate((std::vector<float>({1.4, 4.2, 0.0}))) == (29));\n    assert(candidate((std::vector<float>({-2.4,\
    \ 1.0, 1.0}))) == (6));\n    assert(candidate((std::vector<float>({100.0, 1.0,\
    \ 15.0, 2.0}))) == (10230));\n    assert(candidate((std::vector<float>({10000.0,\
    \ 10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4, 17.9,\
    \ 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpe9eseal0: /tmp/tmpe9eseal0.cpp:23: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long int sum = 0;\n    for(float\
    \ num : lst)\n        sum += num * num;\n    return sum;\n}\nint main() {\n  \
    \  auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpaootfp_7: /tmp/tmpaootfp_7.cpp:23: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long int sum = 0;\n    long\
    \ long int n = lst.size();\n    for(long long int i = 0; i < n; i++) {\n     \
    \   sum += std::pow(lst[i], 2);\n    }\n    return sum;\n}\nint main() {\n   \
    \ auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpr1kq_g5g: /tmp/tmpr1kq_g5g.cpp:25: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long sum = 0;\n    long long\
    \ n = lst.size();\n    for(long long i = 0; i < n; i++) {\n        sum += std::pow(static_cast<long\
    \ long>(lst[i]), 2);\n    }\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = sum_squares;\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0}))) == (14));\n\
    \    assert(candidate((std::vector<float>({1.0, 3.0, 5.0, 7.0}))) == (84));\n\
    \    assert(candidate((std::vector<float>({1.4, 4.2, 0.0}))) == (29));\n    assert(candidate((std::vector<float>({-2.4,\
    \ 1.0, 1.0}))) == (6));\n    assert(candidate((std::vector<float>({100.0, 1.0,\
    \ 15.0, 2.0}))) == (10230));\n    assert(candidate((std::vector<float>({10000.0,\
    \ 10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4, 17.9,\
    \ 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpya_i590m: /tmp/tmpya_i590m.cpp:25: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long ans = 0;\n    for(auto\
    \ i : lst) {\n        ans += i*i;\n    }\n    return ans;\n}\nint main() {\n \
    \   auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpqn9ll5tl: /tmp/tmpqn9ll5tl.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long int sum = 0;\n    for(float\
    \ i : lst)\n        sum += std::round(std::ceil(i)*std::ceil(i));\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long sum = 0;\n    for(float\
    \ num : lst)\n        sum += num * num;\n    return sum;\n}\nint main() {\n  \
    \  auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpsjx6kikq: /tmp/tmpsjx6kikq.cpp:23: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long int sum = 0;\n    for(float\
    \ num : lst) {\n        sum += num * num;\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpom5i6g34: /tmp/tmpom5i6g34.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long ans = 0;\n    for (auto\
    \ i : lst) {\n        ans += i * i;\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpq4cplkti: /tmp/tmpq4cplkti.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long int sum = 0;\n    long\
    \ long int n = lst.size();\n    for(long long int i = 0; i < n; i++) {\n     \
    \   sum += std::pow(lst[i], 2);\n    }\n    return sum;\n}\nint main() {\n   \
    \ auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpzz700u_8: /tmp/tmpzz700u_8.cpp:25: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long ans = 0;\n    for (float\
    \ x : lst) {\n        ans += x * x;\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpjve072du: /tmp/tmpjve072du.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long sum = 0;\n    long long\
    \ n = lst.size();\n    for(long long i = 0; i < n; i++) {\n        sum += lst[i]\
    \ * lst[i];\n    }\n    return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n\
    \    assert(candidate((std::vector<float>({1.0, 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0,\
    \ 5.0, 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2,\
    \ 0.0}))) == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0})))\
    \ == (6));\n    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0})))\
    \ == (10230));\n    assert(candidate((std::vector<float>({10000.0, 10000.0})))\
    \ == (200000000));\n    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3})))\
    \ == (75));\n    assert(candidate((std::vector<float>({-1.4, 17.9, 18.9, 19.9})))\
    \ == (1086));\n    assert(candidate((std::vector<float>({0.0}))) == (0));\n  \
    \  assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpry2bsv1b: /tmp/tmpry2bsv1b.cpp:25: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long sum = 0;\n    for (float\
    \ i : lst) {\n        sum += i * i;\n    }\n    return sum;\n}\nint main() {\n\
    \    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmp7ytuwyug: /tmp/tmp7ytuwyug.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long ans = 0;\n    for(auto\
    \ &x: lst)\n        ans += x*x;\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = sum_squares;\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0}))) == (14));\n\
    \    assert(candidate((std::vector<float>({1.0, 3.0, 5.0, 7.0}))) == (84));\n\
    \    assert(candidate((std::vector<float>({1.4, 4.2, 0.0}))) == (29));\n    assert(candidate((std::vector<float>({-2.4,\
    \ 1.0, 1.0}))) == (6));\n    assert(candidate((std::vector<float>({100.0, 1.0,\
    \ 15.0, 2.0}))) == (10230));\n    assert(candidate((std::vector<float>({10000.0,\
    \ 10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4, 17.9,\
    \ 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpybpb_z3v: /tmp/tmpybpb_z3v.cpp:23: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long int sum = 0;\n    for(float\
    \ num : lst) {\n        sum += num * num;\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpaou44g76: /tmp/tmpaou44g76.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long ans = 0;\n    for (float\
    \ i : lst) {\n        ans += i * i;\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmp_rlklepp: /tmp/tmp_rlklepp.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long sum = 0;\n    for (float\
    \ f : lst) {\n        sum += std::round(f * f);\n    }\n    return sum;\n}\nint\
    \ main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmppzj7innz: /tmp/tmppzj7innz.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long int sum = 0;\n    for (float\
    \ i : lst) {\n        sum += i * i;\n    }\n    return sum;\n}\nint main() {\n\
    \    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmp75a8ni7u: /tmp/tmp75a8ni7u.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long int sum = 0;\n    for(auto\
    \ &x : lst) {\n        sum += std::round(std::ceil(x * x));\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpvigk_r88: /tmp/tmpvigk_r88.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for (float f :\
    \ lst) {\n        sum += std::round(f * f);\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpj3700c6b: /tmp/tmpj3700c6b.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long int sum = 0;\n    for(auto\
    \ &i : lst) {\n        sum += i*i;\n    }\n    return sum;\n}\nint main() {\n\
    \    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmp4pawea2w: /tmp/tmp4pawea2w.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long int sum = 0;\n    for(float\
    \ num : lst){\n        sum += num*num;\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpnjk8vb8n: /tmp/tmpnjk8vb8n.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long ans = 0;\n    for(float\
    \ num : lst) {\n        ans += num * num;\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpoy5g47xd: /tmp/tmpoy5g47xd.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long int sum = 0;\n    for(auto\
    \ &num: lst) {\n        sum += num * num;\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmp90rws_fr: /tmp/tmp90rws_fr.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long int sum = 0;\n    for(float\
    \ num : lst)\n        sum += num * num;\n    return sum;\n}\nint main() {\n  \
    \  auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpoibd68au: /tmp/tmpoibd68au.cpp:23: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long sum = 0;\n    long long\
    \ n = lst.size();\n    for(long long i = 0; i < n; i++) {\n        sum += std::pow(static_cast<long\
    \ long>(lst[i]), 2);\n    }\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = sum_squares;\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0}))) == (14));\n\
    \    assert(candidate((std::vector<float>({1.0, 3.0, 5.0, 7.0}))) == (84));\n\
    \    assert(candidate((std::vector<float>({1.4, 4.2, 0.0}))) == (29));\n    assert(candidate((std::vector<float>({-2.4,\
    \ 1.0, 1.0}))) == (6));\n    assert(candidate((std::vector<float>({100.0, 1.0,\
    \ 15.0, 2.0}))) == (10230));\n    assert(candidate((std::vector<float>({10000.0,\
    \ 10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4, 17.9,\
    \ 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmp03wv5i7x: /tmp/tmp03wv5i7x.cpp:25: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long ans = 0;\n    for(auto\
    \ &i : lst) {\n        ans += i*i;\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpezqh3ur8: /tmp/tmpezqh3ur8.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long sum = 0;\n    for(float\
    \ num : lst)\n        sum += num * num;\n    return sum;\n}\nint main() {\n  \
    \  auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmp4e06dbo_: /tmp/tmp4e06dbo_.cpp:23: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long ans = 0;\n    for (float\
    \ f : lst) {\n        ans += std::round(f * f);\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpllwp8evf: /tmp/tmpllwp8evf.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long ans = 0;\n    for(auto\
    \ i : lst) {\n        ans += i*i;\n    }\n    return ans;\n}\nint main() {\n \
    \   auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmp4zra_nu1: /tmp/tmp4zra_nu1.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    long long int\
    \ sumsq = 0;\n    long long int sumsq2 = 0;\n    long long int sumsq3 = 0;\n \
    \   long long int sumsq4 = 0;\n    long long int sumsq5 = 0;\n    long long int\
    \ sumsq6 = 0;\n    long long int sumsq7 = 0;\n    long long int sumsq8 = 0;\n\
    \    long long int sumsq9 = 0;\n    long long int sumsq10 = 0;\n    long long\
    \ int sumsq11 = 0;\n    long long int sumsq12 = 0;\n    long long int sumsq13\
    \ = 0;\n    long long int sumsq14 = 0;\n    long long int sumsq15 = 0;\n    long\
    \ long int sumsq16 = 0;\n    long long int sumsq17 = 0;\n    long long int sumsq18\
    \ = 0;\n    long long int sumsq19 = 0;\n    long long int sumsq20 = 0;\n    long\
    \ long int sumsq21 = 0;\n    long long int sumsq22 = 0;\n    long long int sumsq23\
    \ = 0;\n    long long int sumsq24 = 0;\n    long long int sumsq25 = 0;\n    long\
    \ long int sumsq26 = 0;\n    long long int sumsq27 = 0;\n    long long int sumsq28\
    \ = 0;\n    long long int sumsq29 = 0;\n    long long int sumsq30 = 0;\n    long\
    \ long int sumsq31 = 0;\n    long long int sumsq32 = 0;\n    long long int sumsq33\
    \ = 0;\n    long long int sumsq34 = 0;\n    long long int sumsq35 = 0;\n    long\
    \ long int sumsq36 = 0;\n    long long int sumsq37 = 0;\n    long long int sumsq38\
    \ = 0;\n    long long int sumsq39 = 0;\n    long long int sumsq40 = 0;\n    long\
    \ long int sumsq41 = 0;\n    long long int sumsq42 = 0;\n    long long int sumsq43\
    \ = 0;\n    long long int sumsq44 = 0;\n    long long int sumsq45 = 0;\n    long\
    \ long int sumsq46 = 0;\n    long long int sumsq47 = 0;\n    long long int sumsq48\
    \ = 0;\n    long long int sumsq49 = 0;\n    long long int sumsq50 = 0;\n    long\
    \ long int sumsq51 = 0;\n    long long int sumsq52 = 0;\n    long long int sumsq53\
    \ = 0;\n    long long int sumsq54 = 0;\n    long long int sumsq55 = 0;\n    long\
    \ long int sumsq56 = 0;\n    long long int sumsq57 = 0;\n}\nint main() {\n   \
    \ auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpfk9tbif5: /tmp/tmpfk9tbif5.cpp:74: int main(): Assertion `candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long sum = 0;\n    long long\
    \ n = lst.size();\n    for(long long i = 0; i < n; i++) {\n        sum += std::pow(static_cast<long\
    \ long>(lst[i]), 2);\n    }\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = sum_squares;\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0}))) == (14));\n\
    \    assert(candidate((std::vector<float>({1.0, 3.0, 5.0, 7.0}))) == (84));\n\
    \    assert(candidate((std::vector<float>({1.4, 4.2, 0.0}))) == (29));\n    assert(candidate((std::vector<float>({-2.4,\
    \ 1.0, 1.0}))) == (6));\n    assert(candidate((std::vector<float>({100.0, 1.0,\
    \ 15.0, 2.0}))) == (10230));\n    assert(candidate((std::vector<float>({10000.0,\
    \ 10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4, 17.9,\
    \ 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpo15jpfaf: /tmp/tmpo15jpfaf.cpp:25: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long sum = 0;\n    for(float\
    \ num : lst) {\n        sum += num * num;\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpy35k7le2: /tmp/tmpy35k7le2.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long sum = 0;\n    for(float\
    \ num : lst) {\n        sum += num * num;\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpj1guaeim: /tmp/tmpj1guaeim.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    for (float x :\
    \ lst) {\n        sum += x * x;\n    }\n    return sum;\n}\nint main() {\n   \
    \ auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmp_6546yzm: /tmp/tmp_6546yzm.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long sum = 0;\n    for (float\
    \ x : lst) {\n        sum += x * x;\n    }\n    return sum;\n}\nint main() {\n\
    \    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmptuskg_53: /tmp/tmptuskg_53.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long ans = 0;\n    for(float\
    \ num : lst) {\n        ans += num * num;\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmplvu6m7hf: /tmp/tmplvu6m7hf.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long sum = 0;\n    for (float\
    \ i : lst) {\n        sum += i * i;\n    }\n    return sum;\n}\nint main() {\n\
    \    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmp1s19m8dw: /tmp/tmp1s19m8dw.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long ans = 0;\n    for(auto\
    \ &x : lst) {\n        ans += x * x;\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpiye96eii: /tmp/tmpiye96eii.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long ans = 0;\n    for(auto\
    \ i : lst) {\n        ans += i*i;\n    }\n    return ans;\n}\nint main() {\n \
    \   auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmph78rkaxq: /tmp/tmph78rkaxq.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long ans = 0;\n    for (float\
    \ x : lst) {\n        ans += x * x;\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpcnza6996: /tmp/tmpcnza6996.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long ans = 0;\n    for (float\
    \ x : lst) {\n        ans += x * x;\n    }\n    return std::ceil(ans);\n}\nint\
    \ main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpc12fpaku: /tmp/tmpc12fpaku.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long sum = 0;\n    for(float\
    \ num : lst) {\n        sum += num * num;\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpc76ve485: /tmp/tmpc76ve485.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long sum = 0;\n    for (float\
    \ i : lst) {\n        sum += i * i;\n    }\n    return sum;\n}\nint main() {\n\
    \    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpb1zps46r: /tmp/tmpb1zps46r.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long int sum = 0;\n    for (float\
    \ f : lst) {\n        sum += std::round(f * f);\n    }\n    return sum;\n}\nint\
    \ main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmp15dqaxjm: /tmp/tmp15dqaxjm.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long ans = 0;\n    for(auto\
    \ i : lst)\n        ans += i * i;\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0, 7.0})))\
    \ == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0}))) == (29));\n\
    \    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n    assert(candidate((std::vector<float>({100.0,\
    \ 1.0, 15.0, 2.0}))) == (10230));\n    assert(candidate((std::vector<float>({10000.0,\
    \ 10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4, 17.9,\
    \ 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmprof_qbzf: /tmp/tmprof_qbzf.cpp:23: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    long long int\
    \ sumsq = 0;\n    for(auto &i : lst) {\n        sum += i;\n        sumsq += i*i;\n\
    \    }\n    return sumsq;\n}\nint main() {\n    auto candidate = sum_squares;\n\
    \    assert(candidate((std::vector<float>({1.0, 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0,\
    \ 5.0, 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2,\
    \ 0.0}))) == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0})))\
    \ == (6));\n    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0})))\
    \ == (10230));\n    assert(candidate((std::vector<float>({10000.0, 10000.0})))\
    \ == (200000000));\n    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3})))\
    \ == (75));\n    assert(candidate((std::vector<float>({-1.4, 17.9, 18.9, 19.9})))\
    \ == (1086));\n    assert(candidate((std::vector<float>({0.0}))) == (0));\n  \
    \  assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpem2pinkb: /tmp/tmpem2pinkb.cpp:26: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long ans = 0;\n    for (auto\
    \ &x : lst) {\n        ans += x * x;\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpe44hw4sz: /tmp/tmpe44hw4sz.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long sum = 0;\n    for(float\
    \ num : lst) {\n        sum += num * num;\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpfpvikf3b: /tmp/tmpfpvikf3b.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    // Your code here\n    long sum =\
    \ 0;\n    for (float i : lst) {\n        sum += i * i;\n    }\n    return sum;\n\
    }\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpgou245ll: /tmp/tmpgou245ll.cpp:25: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long int sum = 0;\n    for(float\
    \ num : lst) {\n        sum += num * num;\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpf5rqc6cp: /tmp/tmpf5rqc6cp.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long int sum = 0;\n    for(auto\
    \ &i : lst) {\n        sum += std::round(std::ceil(i) * std::ceil(i));\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long int sum = 0;\n    for(float\
    \ i : lst)\n        sum += i*i;\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = sum_squares;\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0}))) == (14));\n\
    \    assert(candidate((std::vector<float>({1.0, 3.0, 5.0, 7.0}))) == (84));\n\
    \    assert(candidate((std::vector<float>({1.4, 4.2, 0.0}))) == (29));\n    assert(candidate((std::vector<float>({-2.4,\
    \ 1.0, 1.0}))) == (6));\n    assert(candidate((std::vector<float>({100.0, 1.0,\
    \ 15.0, 2.0}))) == (10230));\n    assert(candidate((std::vector<float>({10000.0,\
    \ 10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4, 17.9,\
    \ 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpbjbr31ew: /tmp/tmpbjbr31ew.cpp:23: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long int sum = 0;\n    for(float\
    \ num : lst) {\n        sum += num * num;\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmp5f3vlqpl: /tmp/tmp5f3vlqpl.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long int sum = 0;\n    for(auto\
    \ &i : lst) {\n        sum += i * i;\n    }\n    return sum;\n}\nint main() {\n\
    \    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpd4p0nlqc: /tmp/tmpd4p0nlqc.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long ans = 0;\n    for(float\
    \ num : lst) {\n        ans += num * num;\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmp57gzgkx8: /tmp/tmp57gzgkx8.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long int sum = 0;\n    for (float\
    \ i : lst) {\n        sum += i * i;\n    }\n    return sum;\n}\nint main() {\n\
    \    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpdc_san15: /tmp/tmpdc_san15.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long int sum = 0;\n    for (auto\
    \ i : lst) {\n        sum += i * i;\n    }\n    return sum;\n}\nint main() {\n\
    \    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpk5lw1cec: /tmp/tmpk5lw1cec.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long ans = 0;\n    for(float\
    \ num : lst) {\n        ans += num * num;\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpcpb2j33t: /tmp/tmpcpb2j33t.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long int sum = 0;\n    for(auto\
    \ &i : lst)\n        sum += i * i;\n    return sum;\n}\nint main() {\n    auto\
    \ candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0, 7.0})))\
    \ == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0}))) == (29));\n\
    \    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n    assert(candidate((std::vector<float>({100.0,\
    \ 1.0, 15.0, 2.0}))) == (10230));\n    assert(candidate((std::vector<float>({10000.0,\
    \ 10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4, 17.9,\
    \ 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmp7qcm8_7w: /tmp/tmp7qcm8_7w.cpp:23: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long ans = 0;\n    for (float\
    \ f : lst) {\n        ans += f*f;\n    }\n    return ans;\n}\nint main() {\n \
    \   auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpakmwzs0g: /tmp/tmpakmwzs0g.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long int sum = 0;\n    for (float\
    \ i : lst) {\n        sum += i * i;\n    }\n    return sum;\n}\nint main() {\n\
    \    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpt7jpov5a: /tmp/tmpt7jpov5a.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long int sum = 0;\n    for(float\
    \ num : lst) {\n        sum += num * num;\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpt04x150a: /tmp/tmpt04x150a.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long ans = 0;\n    for(float\
    \ x : lst) {\n        ans += x * x;\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmptrmi46ym: /tmp/tmptrmi46ym.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long sum = 0;\n    for(float\
    \ i : lst) {\n        sum += i*i;\n    }\n    return sum;\n}\nint main() {\n \
    \   auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmp7by6444k: /tmp/tmp7by6444k.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long sum = 0;\n    for(float\
    \ num : lst) {\n        sum += num * num;\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmprj4h3zgc: /tmp/tmprj4h3zgc.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long sum = 0;\n    for(auto\
    \ &num : lst) {\n        sum += num * num;\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpaesbxq9a: /tmp/tmpaesbxq9a.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long sum = 0;\n    for(float\
    \ i : lst) {\n        sum += i*i;\n    }\n    return sum;\n}\nint main() {\n \
    \   auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpywznzuh6: /tmp/tmpywznzuh6.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long sum = 0;\n    for (float\
    \ i : lst) {\n        sum += i * i;\n    }\n    return sum;\n}\nint main() {\n\
    \    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmp98h0g_r9: /tmp/tmp98h0g_r9.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long int sum = 0;\n    for(float\
    \ num : lst)\n        sum += num * num;\n    return sum;\n}\nint main() {\n  \
    \  auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmp3wji1p1h: /tmp/tmp3wji1p1h.cpp:23: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long sum = 0;\n    long long\
    \ n = lst.size();\n    for(long long i = 0; i < n; i++) {\n        sum += std::pow(static_cast<long\
    \ long>(lst[i]), 2);\n    }\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = sum_squares;\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0}))) == (14));\n\
    \    assert(candidate((std::vector<float>({1.0, 3.0, 5.0, 7.0}))) == (84));\n\
    \    assert(candidate((std::vector<float>({1.4, 4.2, 0.0}))) == (29));\n    assert(candidate((std::vector<float>({-2.4,\
    \ 1.0, 1.0}))) == (6));\n    assert(candidate((std::vector<float>({100.0, 1.0,\
    \ 15.0, 2.0}))) == (10230));\n    assert(candidate((std::vector<float>({10000.0,\
    \ 10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4, 17.9,\
    \ 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmp1vzl1flm: /tmp/tmp1vzl1flm.cpp:25: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long sum = 0;\n    for(float\
    \ num : lst) {\n        sum += num * num;\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpn05f0824: /tmp/tmpn05f0824.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long ans = 0;\n    for (float\
    \ x : lst) {\n        ans += x * x;\n    }\n    return std::round(ans);\n}\nint\
    \ main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpqpb16uw6: /tmp/tmpqpb16uw6.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long ans = 0;\n    for (auto\
    \ &i : lst) {\n        ans += i * i;\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpce84aalg: /tmp/tmpce84aalg.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long int sum = 0;\n    for (float\
    \ f : lst) {\n        sum += static_cast<long long>(std::ceil(f * f));\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpiawlb1dt: /tmp/tmpiawlb1dt.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    // Write your code here\n    long\
    \ sum = 0;\n    for(float num : lst) {\n        sum += num * num;\n    }\n   \
    \ return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmp6iayl154: /tmp/tmp6iayl154.cpp:25: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long sum = 0;\n    long long\
    \ n = lst.size();\n    for(long long i = 0; i < n; i++) {\n        sum += std::pow(static_cast<double>(lst[i]),\
    \ 2);\n    }\n    return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n\
    \    assert(candidate((std::vector<float>({1.0, 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0,\
    \ 5.0, 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2,\
    \ 0.0}))) == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0})))\
    \ == (6));\n    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0})))\
    \ == (10230));\n    assert(candidate((std::vector<float>({10000.0, 10000.0})))\
    \ == (200000000));\n    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3})))\
    \ == (75));\n    assert(candidate((std::vector<float>({-1.4, 17.9, 18.9, 19.9})))\
    \ == (1086));\n    assert(candidate((std::vector<float>({0.0}))) == (0));\n  \
    \  assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpiw6tqpg5: /tmp/tmpiw6tqpg5.cpp:25: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long ans = 0;\n    for (float\
    \ i : lst) {\n        ans += i * i;\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpx6j_b290: /tmp/tmpx6j_b290.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long int sum = 0;\n    for(auto\
    \ &i : lst)\n        sum += i*i;\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = sum_squares;\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0}))) == (14));\n\
    \    assert(candidate((std::vector<float>({1.0, 3.0, 5.0, 7.0}))) == (84));\n\
    \    assert(candidate((std::vector<float>({1.4, 4.2, 0.0}))) == (29));\n    assert(candidate((std::vector<float>({-2.4,\
    \ 1.0, 1.0}))) == (6));\n    assert(candidate((std::vector<float>({100.0, 1.0,\
    \ 15.0, 2.0}))) == (10230));\n    assert(candidate((std::vector<float>({10000.0,\
    \ 10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4, 17.9,\
    \ 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpv8h71636: /tmp/tmpv8h71636.cpp:23: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    // Write your code here\n    long\
    \ sum = 0;\n    long n = lst.size();\n    long sum_squares = 0;\n    long temp\
    \ = 0;\n    for(long i = 0; i < n; i++) {\n        temp = ceil(lst[i]);\n    \
    \    sum += temp * temp;\n        sum_squares += temp * temp;\n    }\n    return\
    \ sum_squares/sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmp10q6ua5q: /tmp/tmp10q6ua5q.cpp:27: int main(): Assertion `candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long ans = 0;\n    for(auto\
    \ &x : lst) {\n        ans += x * x;\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpwyn9ueaf: /tmp/tmpwyn9ueaf.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long int sum = 0;\n    for(auto\
    \ &x: lst) {\n        sum += std::round(std::ceil(x * x)); // round the element\
    \ to the upper int(Ceiling) first\n    }\n    return sum;\n}\nint main() {\n \
    \   auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmp0z2tk37t: /tmp/tmp0z2tk37t.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long sum = 0;\n    long long\
    \ n = lst.size();\n    for(long long i = 0; i < n; i++) {\n        sum += std::round(lst[i]\
    \ * lst[i]);\n    }\n    return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n\
    \    assert(candidate((std::vector<float>({1.0, 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0,\
    \ 5.0, 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2,\
    \ 0.0}))) == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0})))\
    \ == (6));\n    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0})))\
    \ == (10230));\n    assert(candidate((std::vector<float>({10000.0, 10000.0})))\
    \ == (200000000));\n    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3})))\
    \ == (75));\n    assert(candidate((std::vector<float>({-1.4, 17.9, 18.9, 19.9})))\
    \ == (1086));\n    assert(candidate((std::vector<float>({0.0}))) == (0));\n  \
    \  assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpcc7jb89d: /tmp/tmpcc7jb89d.cpp:25: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long sum = 0;\n    for(auto\
    \ &num : lst)\n        sum += num * num;\n    return sum;\n}\nint main() {\n \
    \   auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpzz2hwvas: /tmp/tmpzz2hwvas.cpp:23: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long int sum = 0;\n    for(float\
    \ num : lst) {\n        sum += num * num;\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpnlv9i_la: /tmp/tmpnlv9i_la.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long int sum = 0;\n    for(auto\
    \ &num : lst) {\n        sum += num * num;\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpzu6u4jfa: /tmp/tmpzu6u4jfa.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    // Write your code here\n    long\
    \ sum = 0;\n    for(float num : lst)\n    {\n        sum += num * num;\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpk21yq071: /tmp/tmpk21yq071.cpp:26: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long sum = 0;\n    for(float\
    \ num : lst) {\n        sum += num * num;\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpgof65k7j: /tmp/tmpgof65k7j.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long sum = 0;\n    long long\
    \ temp = 0;\n    for(float i : lst) {\n        temp = i;\n        temp = ceil(temp);\n\
    \        sum += temp * temp;\n    }\n    return sum;\n}\nint main() {\n    auto\
    \ candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0, 7.0})))\
    \ == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0}))) == (29));\n\
    \    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n    assert(candidate((std::vector<float>({100.0,\
    \ 1.0, 15.0, 2.0}))) == (10230));\n    assert(candidate((std::vector<float>({10000.0,\
    \ 10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4, 17.9,\
    \ 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmp2xkbqus7: /tmp/tmp2xkbqus7.cpp:27: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long ans = 0;\n    for (float\
    \ i : lst) {\n        ans += i * i;\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmphwu38zop: /tmp/tmphwu38zop.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long ans = 0;\n    for(float\
    \ num : lst) {\n        ans += num * num;\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpl54bpruf: /tmp/tmpl54bpruf.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long int sum = 0;\n    for(auto\
    \ &i : lst) {\n        sum += i * i;\n    }\n    return sum;\n}\nint main() {\n\
    \    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpp2w0x3ip: /tmp/tmpp2w0x3ip.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long ans = 0;\n    for(float\
    \ num : lst) {\n        ans += num * num;\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpmbfbyokw: /tmp/tmpmbfbyokw.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long sum = 0;\n    for (float\
    \ i : lst) {\n        sum += i * i;\n    }\n    return sum;\n}\nint main() {\n\
    \    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpvhy6538t: /tmp/tmpvhy6538t.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long ans = 0;\n    for(auto\
    \ &num : lst)\n        ans += num * num;\n    return ans;\n}\nint main() {\n \
    \   auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpvg3c78o_: /tmp/tmpvg3c78o_.cpp:23: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long sum = 0;\n    for (auto\
    \ i : lst) {\n        sum += i * i;\n    }\n    return sum;\n}\nint main() {\n\
    \    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpsuzim0no: /tmp/tmpsuzim0no.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long sum = 0;\n    for(float\
    \ num : lst) {\n        sum += num * num;\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmp5vwr6n1b: /tmp/tmp5vwr6n1b.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long sum = 0;\n    long long\
    \ n = lst.size();\n    for(long long i = 0; i < n; i++) {\n        sum += std::round(lst[i]*lst[i]);\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n\
    \    assert(candidate((std::vector<float>({1.0, 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0,\
    \ 5.0, 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2,\
    \ 0.0}))) == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0})))\
    \ == (6));\n    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0})))\
    \ == (10230));\n    assert(candidate((std::vector<float>({10000.0, 10000.0})))\
    \ == (200000000));\n    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3})))\
    \ == (75));\n    assert(candidate((std::vector<float>({-1.4, 17.9, 18.9, 19.9})))\
    \ == (1086));\n    assert(candidate((std::vector<float>({0.0}))) == (0));\n  \
    \  assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmp_3epzq5a: /tmp/tmp_3epzq5a.cpp:25: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long ans = 0;\n    for(auto\
    \ i : lst)\n        ans += i*i;\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = sum_squares;\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0}))) == (14));\n\
    \    assert(candidate((std::vector<float>({1.0, 3.0, 5.0, 7.0}))) == (84));\n\
    \    assert(candidate((std::vector<float>({1.4, 4.2, 0.0}))) == (29));\n    assert(candidate((std::vector<float>({-2.4,\
    \ 1.0, 1.0}))) == (6));\n    assert(candidate((std::vector<float>({100.0, 1.0,\
    \ 15.0, 2.0}))) == (10230));\n    assert(candidate((std::vector<float>({10000.0,\
    \ 10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4, 17.9,\
    \ 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpsfs4ds9p: /tmp/tmpsfs4ds9p.cpp:23: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long ans = 0;\n    for (float\
    \ f : lst) {\n        ans += (long long)f*f;\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmp4x5y68o5: /tmp/tmp4x5y68o5.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long sum = 0;\n    for (float\
    \ i : lst) {\n        sum += i * i;\n    }\n    return sum;\n}\nint main() {\n\
    \    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmp3jd8sel9: /tmp/tmp3jd8sel9.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long int sum = 0;\n    for (float\
    \ f : lst) {\n        sum += static_cast<long long>(f*f);\n    }\n    return sum;\n\
    }\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmp_eezs_34: /tmp/tmp_eezs_34.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long int sum = 0;\n    for(float\
    \ num : lst) {\n        sum += num * num;\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmp2u5mtuuk: /tmp/tmp2u5mtuuk.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long int sum = 0;\n    long\
    \ long int n = lst.size();\n    for(long long int i = 0; i < n; i++) {\n     \
    \   sum += std::pow(static_cast<long long int>(lst[i]), 2);\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmp5rh4zva5: /tmp/tmp5rh4zva5.cpp:25: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long sum = 0;\n    for(float\
    \ num : lst) {\n        sum += num * num;\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpld1ica3h: /tmp/tmpld1ica3h.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long int sum = 0;\n    for(float\
    \ num : lst) {\n        sum += num * num;\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpihr0lcqd: /tmp/tmpihr0lcqd.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long sum = 0;\n    for(auto\
    \ &num : lst) {\n        sum += num * num;\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmp3xt05udq: /tmp/tmp3xt05udq.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long ans = 0;\n    for(auto\
    \ &x: lst) {\n        ans += x * x;\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmp56jpwt77: /tmp/tmp56jpwt77.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long ans = 0;\n    for (float\
    \ x : lst) {\n        ans += x * x;\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmp_kqvk5ng: /tmp/tmp_kqvk5ng.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long ans = 0;\n    for (float\
    \ f : lst) {\n        ans += std::round(f * f);\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmp8ks9y2rz: /tmp/tmp8ks9y2rz.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long int sum = 0;\n    for(float\
    \ num : lst){\n        sum += num * num;\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpiitr2hbq: /tmp/tmpiitr2hbq.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long sum = 0;\n    for(float\
    \ num : lst)\n        sum += num * num;\n    return sum;\n}\nint main() {\n  \
    \  auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpyte6jvow: /tmp/tmpyte6jvow.cpp:23: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long sum = 0;\n    long long\
    \ n = lst.size();\n    for(long long i = 0; i < n; i++) {\n        sum += std::pow(static_cast<long\
    \ long>(lst[i]), 2);\n    }\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = sum_squares;\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0}))) == (14));\n\
    \    assert(candidate((std::vector<float>({1.0, 3.0, 5.0, 7.0}))) == (84));\n\
    \    assert(candidate((std::vector<float>({1.4, 4.2, 0.0}))) == (29));\n    assert(candidate((std::vector<float>({-2.4,\
    \ 1.0, 1.0}))) == (6));\n    assert(candidate((std::vector<float>({100.0, 1.0,\
    \ 15.0, 2.0}))) == (10230));\n    assert(candidate((std::vector<float>({10000.0,\
    \ 10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4, 17.9,\
    \ 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpb6shq5ym: /tmp/tmpb6shq5ym.cpp:25: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long sum = 0;\n    for(auto\
    \ i : lst)\n        sum += i*i;\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = sum_squares;\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0}))) == (14));\n\
    \    assert(candidate((std::vector<float>({1.0, 3.0, 5.0, 7.0}))) == (84));\n\
    \    assert(candidate((std::vector<float>({1.4, 4.2, 0.0}))) == (29));\n    assert(candidate((std::vector<float>({-2.4,\
    \ 1.0, 1.0}))) == (6));\n    assert(candidate((std::vector<float>({100.0, 1.0,\
    \ 15.0, 2.0}))) == (10230));\n    assert(candidate((std::vector<float>({10000.0,\
    \ 10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4, 17.9,\
    \ 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpycqnzqeg: /tmp/tmpycqnzqeg.cpp:23: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long int sum = 0;\n    for(float\
    \ num : lst){\n        sum += num*num;\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmp9iymv6ij: /tmp/tmp9iymv6ij.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long int sum = 0;\n    for(auto\
    \ i : lst)\n    {\n        sum += i*i;\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmp9bc5k760: /tmp/tmp9bc5k760.cpp:25: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long int sum = 0;\n    for(float\
    \ num : lst)\n        sum += num * num;\n    return sum;\n}\nint main() {\n  \
    \  auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpsinpse93: /tmp/tmpsinpse93.cpp:23: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long int sum = 0;\n    long\
    \ long int temp = 0;\n    for(auto &i : lst) {\n        temp = i;\n        temp\
    \ = ceil(temp);\n        sum += temp * temp;\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpmk8jrfyg: /tmp/tmpmk8jrfyg.cpp:27: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long sum = 0;\n    for(float\
    \ num : lst)\n        sum += num * num;\n    return sum;\n}\nint main() {\n  \
    \  auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmp499fto78: /tmp/tmp499fto78.cpp:23: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long sum = 0;\n    for(auto\
    \ &i : lst) {\n        sum += i*i;\n    }\n    return sum;\n}\nint main() {\n\
    \    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmp1mlomvv3: /tmp/tmp1mlomvv3.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long int sum = 0;\n    for(auto\
    \ i : lst) {\n        sum += i * i;\n    }\n    return sum;\n}\nint main() {\n\
    \    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmp659jle89: /tmp/tmp659jle89.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long int sum = 0;\n    for(auto\
    \ &x : lst) {\n        sum += x * x;\n    }\n    return sum;\n}\nint main() {\n\
    \    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmptztz5fzf: /tmp/tmptztz5fzf.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long int sum = 0;\n    for(auto\
    \ &i : lst)\n        sum += std::round(std::ceil(i) * std::ceil(i));\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long int sum = 0;\n    for(auto\
    \ &i : lst) {\n        sum += i*i;\n    }\n    return sum;\n}\nint main() {\n\
    \    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmp_ovj2rgr: /tmp/tmp_ovj2rgr.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long sum = 0;\n    for (float\
    \ x : lst) {\n        sum += x * x;\n    }\n    return sum;\n}\nint main() {\n\
    \    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpl_9rsr10: /tmp/tmpl_9rsr10.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long ans = 0;\n    for(float\
    \ i : lst) {\n        ans += i*i;\n    }\n    return ans;\n}\nint main() {\n \
    \   auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpq28bv44w: /tmp/tmpq28bv44w.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long ans = 0;\n    for(auto\
    \ &i : lst)\n        ans += i*i;\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = sum_squares;\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0}))) == (14));\n\
    \    assert(candidate((std::vector<float>({1.0, 3.0, 5.0, 7.0}))) == (84));\n\
    \    assert(candidate((std::vector<float>({1.4, 4.2, 0.0}))) == (29));\n    assert(candidate((std::vector<float>({-2.4,\
    \ 1.0, 1.0}))) == (6));\n    assert(candidate((std::vector<float>({100.0, 1.0,\
    \ 15.0, 2.0}))) == (10230));\n    assert(candidate((std::vector<float>({10000.0,\
    \ 10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4, 17.9,\
    \ 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpymcspbfe: /tmp/tmpymcspbfe.cpp:23: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long ans = 0;\n    for(auto\
    \ &x : lst)\n        ans += std::round(std::ceil(x * x));\n    return ans;\n}\n\
    int main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpqkrcum8d: /tmp/tmpqkrcum8d.cpp:23: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long ans = 0;\n    for(float\
    \ num : lst) {\n        ans += num * num;\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpody9rvgw: /tmp/tmpody9rvgw.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long ans = 0;\n    for(float\
    \ num : lst) {\n        ans += num * num;\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmp6vkcuxli: /tmp/tmp6vkcuxli.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long sum = 0;\n    for(float\
    \ num : lst) {\n        sum += num * num;\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmp6ezw1n02: /tmp/tmp6ezw1n02.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long int sum = 0;\n    for(auto\
    \ &i : lst) {\n        sum += i * i;\n    }\n    return sum;\n}\nint main() {\n\
    \    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmphxt9kta_: /tmp/tmphxt9kta_.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long int sum = 0;\n    for(auto\
    \ &num : lst)\n        sum += num * num;\n    return sum;\n}\nint main() {\n \
    \   auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpy70r3j5h: /tmp/tmpy70r3j5h.cpp:23: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long int sum = 0;\n    for(auto\
    \ &num : lst) {\n        sum += num * num;\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpmk5re03m: /tmp/tmpmk5re03m.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long sum = 0;\n    long long\
    \ n = lst.size();\n    for(long long i = 0; i < n; i++) {\n        sum += std::pow(lst[i],\
    \ 2);\n    }\n    return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n\
    \    assert(candidate((std::vector<float>({1.0, 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0,\
    \ 5.0, 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2,\
    \ 0.0}))) == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0})))\
    \ == (6));\n    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0})))\
    \ == (10230));\n    assert(candidate((std::vector<float>({10000.0, 10000.0})))\
    \ == (200000000));\n    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3})))\
    \ == (75));\n    assert(candidate((std::vector<float>({-1.4, 17.9, 18.9, 19.9})))\
    \ == (1086));\n    assert(candidate((std::vector<float>({0.0}))) == (0));\n  \
    \  assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpohx01rw5: /tmp/tmpohx01rw5.cpp:25: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long int sum = 0;\n    for(float\
    \ num : lst) {\n        sum += num * num;\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpb0uappus: /tmp/tmpb0uappus.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long int sum = 0;\n    for(auto\
    \ i : lst) {\n        sum += i * i;\n    }\n    return sum;\n}\nint main() {\n\
    \    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpfy6y7er0: /tmp/tmpfy6y7er0.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long sum = 0;\n    for(float\
    \ num : lst) {\n        sum += num * num;\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpuqjamakz: /tmp/tmpuqjamakz.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long ans = 0;\n    for(auto\
    \ &i : lst) {\n        ans += i*i;\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpai7gbqs6: /tmp/tmpai7gbqs6.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    // Write your code here\n    long\
    \ long sum = 0;\n    for (float i : lst) {\n        sum += i * i;\n    }\n   \
    \ return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmp6rj0y4d9: /tmp/tmp6rj0y4d9.cpp:25: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long sum = 0;\n    for(float\
    \ num : lst) {\n        sum += num * num;\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpryn2zo1w: /tmp/tmpryn2zo1w.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long ans = 0;\n    for(auto\
    \ i : lst)\n        ans += i * i;\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0, 7.0})))\
    \ == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0}))) == (29));\n\
    \    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n    assert(candidate((std::vector<float>({100.0,\
    \ 1.0, 15.0, 2.0}))) == (10230));\n    assert(candidate((std::vector<float>({10000.0,\
    \ 10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4, 17.9,\
    \ 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmp0g_ygzos: /tmp/tmp0g_ygzos.cpp:23: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long sum = 0;\n    long n = lst.size();\n\
    \    for(long i = 0; i < n; i++) {\n        sum += lst[i] * lst[i];\n    }\n \
    \   return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmp5lr85gim: /tmp/tmp5lr85gim.cpp:25: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    // Write your code here\n    long\
    \ sum = 0;\n    for (float x : lst) {\n        sum += x * x;\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpw99newcb: /tmp/tmpw99newcb.cpp:25: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long int sum = 0;\n    for (float\
    \ i : lst) {\n        sum += i * i;\n    }\n    return sum;\n}\nint main() {\n\
    \    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpu5v0_8ch: /tmp/tmpu5v0_8ch.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long sum = 0;\n    for (float\
    \ i : lst) {\n        sum += i * i;\n    }\n    return sum;\n}\nint main() {\n\
    \    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpv4v2iunr: /tmp/tmpv4v2iunr.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long sum = 0;\n    for(auto\
    \ i : lst)\n        sum += i * i;\n    return sum;\n}\nint main() {\n    auto\
    \ candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0, 7.0})))\
    \ == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0}))) == (29));\n\
    \    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n    assert(candidate((std::vector<float>({100.0,\
    \ 1.0, 15.0, 2.0}))) == (10230));\n    assert(candidate((std::vector<float>({10000.0,\
    \ 10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4, 17.9,\
    \ 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpanwi_6wx: /tmp/tmpanwi_6wx.cpp:23: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long int sum = 0;\n    for(float\
    \ num : lst)\n        sum += num * num;\n    return sum;\n}\nint main() {\n  \
    \  auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpoh53hu8b: /tmp/tmpoh53hu8b.cpp:23: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long int sum = 0;\n    for(float\
    \ i : lst)\n        sum += i*i;\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = sum_squares;\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0}))) == (14));\n\
    \    assert(candidate((std::vector<float>({1.0, 3.0, 5.0, 7.0}))) == (84));\n\
    \    assert(candidate((std::vector<float>({1.4, 4.2, 0.0}))) == (29));\n    assert(candidate((std::vector<float>({-2.4,\
    \ 1.0, 1.0}))) == (6));\n    assert(candidate((std::vector<float>({100.0, 1.0,\
    \ 15.0, 2.0}))) == (10230));\n    assert(candidate((std::vector<float>({10000.0,\
    \ 10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4, 17.9,\
    \ 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpdp_gcbll: /tmp/tmpdp_gcbll.cpp:23: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long sum = 0;\n    for(auto\
    \ &num : lst)\n        sum += num * num;\n    return sum;\n}\nint main() {\n \
    \   auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpt_2bew1f: /tmp/tmpt_2bew1f.cpp:23: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long sum = 0;\n    for(float\
    \ num : lst) {\n        sum += num * num;\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpv1blqrv7: /tmp/tmpv1blqrv7.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long ans = 0;\n    for (float\
    \ x : lst) {\n        ans += x * x;\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmp3kla86mg: /tmp/tmp3kla86mg.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long sum = 0;\n    for(float\
    \ num : lst)\n        sum += num * num;\n    return sum;\n}\nint main() {\n  \
    \  auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpwttkbkae: /tmp/tmpwttkbkae.cpp:23: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long ans = 0;\n    for(auto\
    \ i : lst)\n        ans += i * i;\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0, 7.0})))\
    \ == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0}))) == (29));\n\
    \    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n    assert(candidate((std::vector<float>({100.0,\
    \ 1.0, 15.0, 2.0}))) == (10230));\n    assert(candidate((std::vector<float>({10000.0,\
    \ 10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4, 17.9,\
    \ 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpdbut3kfp: /tmp/tmpdbut3kfp.cpp:23: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long int sum = 0;\n    for(float\
    \ num : lst) {\n        sum += num * num;\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpbiw7vo5t: /tmp/tmpbiw7vo5t.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long sum = 0;\n    long long\
    \ n = lst.size();\n    for(long long i = 0; i < n; i++) {\n        sum += lst[i]*lst[i];\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n\
    \    assert(candidate((std::vector<float>({1.0, 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0,\
    \ 5.0, 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2,\
    \ 0.0}))) == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0})))\
    \ == (6));\n    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0})))\
    \ == (10230));\n    assert(candidate((std::vector<float>({10000.0, 10000.0})))\
    \ == (200000000));\n    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3})))\
    \ == (75));\n    assert(candidate((std::vector<float>({-1.4, 17.9, 18.9, 19.9})))\
    \ == (1086));\n    assert(candidate((std::vector<float>({0.0}))) == (0));\n  \
    \  assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmph6s2a9t2: /tmp/tmph6s2a9t2.cpp:25: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long int sum = 0;\n    for(auto\
    \ &num : lst)\n        sum += num * num;\n    return sum;\n}\nint main() {\n \
    \   auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpwzw2v9c4: /tmp/tmpwzw2v9c4.cpp:23: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long ans = 0;\n    for (float\
    \ f : lst) {\n        ans += (long long)(f*f);\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpi1caol1n: /tmp/tmpi1caol1n.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long sum = 0;\n    for (float\
    \ x : lst) {\n        sum += x * x;\n    }\n    return sum;\n}\nint main() {\n\
    \    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpzsg7x9zx: /tmp/tmpzsg7x9zx.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long int sum = 0;\n    for(auto\
    \ &i : lst)\n        sum += i * i;\n    return sum;\n}\nint main() {\n    auto\
    \ candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0, 7.0})))\
    \ == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0}))) == (29));\n\
    \    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n    assert(candidate((std::vector<float>({100.0,\
    \ 1.0, 15.0, 2.0}))) == (10230));\n    assert(candidate((std::vector<float>({10000.0,\
    \ 10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4, 17.9,\
    \ 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpdjh99xr_: /tmp/tmpdjh99xr_.cpp:23: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long sum = 0;\n    long long\
    \ temp = 0;\n    for (auto i : lst) {\n        temp = i;\n        sum += temp\
    \ * temp;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n\
    \    assert(candidate((std::vector<float>({1.0, 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0,\
    \ 5.0, 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2,\
    \ 0.0}))) == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0})))\
    \ == (6));\n    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0})))\
    \ == (10230));\n    assert(candidate((std::vector<float>({10000.0, 10000.0})))\
    \ == (200000000));\n    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3})))\
    \ == (75));\n    assert(candidate((std::vector<float>({-1.4, 17.9, 18.9, 19.9})))\
    \ == (1086));\n    assert(candidate((std::vector<float>({0.0}))) == (0));\n  \
    \  assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpy00yq_m6: /tmp/tmpy00yq_m6.cpp:26: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long sum = 0;\n    for(float\
    \ num : lst) {\n        sum += num * num;\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpu7l528na: /tmp/tmpu7l528na.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long int sum = 0;\n    for(auto\
    \ i : lst)\n        sum += i * i;\n    return sum;\n}\nint main() {\n    auto\
    \ candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0, 7.0})))\
    \ == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0}))) == (29));\n\
    \    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n    assert(candidate((std::vector<float>({100.0,\
    \ 1.0, 15.0, 2.0}))) == (10230));\n    assert(candidate((std::vector<float>({10000.0,\
    \ 10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4, 17.9,\
    \ 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpwjqbl76v: /tmp/tmpwjqbl76v.cpp:23: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long ans = 0;\n    for (float\
    \ f : lst) {\n        ans += f*f;\n    }\n    return ans;\n}\nint main() {\n \
    \   auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpltfygu0c: /tmp/tmpltfygu0c.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long int sum = 0;\n    for(auto\
    \ &i : lst)\n        sum += i*i;\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = sum_squares;\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0}))) == (14));\n\
    \    assert(candidate((std::vector<float>({1.0, 3.0, 5.0, 7.0}))) == (84));\n\
    \    assert(candidate((std::vector<float>({1.4, 4.2, 0.0}))) == (29));\n    assert(candidate((std::vector<float>({-2.4,\
    \ 1.0, 1.0}))) == (6));\n    assert(candidate((std::vector<float>({100.0, 1.0,\
    \ 15.0, 2.0}))) == (10230));\n    assert(candidate((std::vector<float>({10000.0,\
    \ 10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4, 17.9,\
    \ 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpa9nyuf7s: /tmp/tmpa9nyuf7s.cpp:23: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    // Write your code here\n    long\
    \ long sum = 0;\n    for (float i : lst) {\n        sum += i * i;\n    }\n   \
    \ return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpoorliw2k: /tmp/tmpoorliw2k.cpp:25: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long int sum = 0;\n    for(auto\
    \ &i : lst)\n        sum += i*i;\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = sum_squares;\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0}))) == (14));\n\
    \    assert(candidate((std::vector<float>({1.0, 3.0, 5.0, 7.0}))) == (84));\n\
    \    assert(candidate((std::vector<float>({1.4, 4.2, 0.0}))) == (29));\n    assert(candidate((std::vector<float>({-2.4,\
    \ 1.0, 1.0}))) == (6));\n    assert(candidate((std::vector<float>({100.0, 1.0,\
    \ 15.0, 2.0}))) == (10230));\n    assert(candidate((std::vector<float>({10000.0,\
    \ 10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4, 17.9,\
    \ 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpf8kyey4v: /tmp/tmpf8kyey4v.cpp:23: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    // Write your code here\n    long\
    \ sum = 0;\n    long long int temp = 0;\n    for(auto &i : lst){\n        temp\
    \ = i;\n        sum += temp*temp;\n    }\n    return sum;\n}\nint main() {\n \
    \   auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpxkozs99n: /tmp/tmpxkozs99n.cpp:27: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long int sum = 0;\n    for(auto\
    \ &i : lst) {\n        sum += i*i;\n    }\n    return sum;\n}\nint main() {\n\
    \    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpyfg84jwp: /tmp/tmpyfg84jwp.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long sum = 0;\n    for(float\
    \ num : lst) {\n        sum += num * num;\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpjdmyvfh5: /tmp/tmpjdmyvfh5.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long int sum = 0;\n    for (float\
    \ i : lst) {\n        sum += i * i;\n    }\n    return sum;\n}\nint main() {\n\
    \    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpnkgh5y20: /tmp/tmpnkgh5y20.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long sum = 0;\n    long long\
    \ n = lst.size();\n    for(long long i = 0; i < n; i++) {\n        sum += lst[i]\
    \ * lst[i];\n    }\n    return sum;\n}\nint main() {\n    auto candidate = sum_squares;\n\
    \    assert(candidate((std::vector<float>({1.0, 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0,\
    \ 5.0, 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2,\
    \ 0.0}))) == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0})))\
    \ == (6));\n    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0})))\
    \ == (10230));\n    assert(candidate((std::vector<float>({10000.0, 10000.0})))\
    \ == (200000000));\n    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3})))\
    \ == (75));\n    assert(candidate((std::vector<float>({-1.4, 17.9, 18.9, 19.9})))\
    \ == (1086));\n    assert(candidate((std::vector<float>({0.0}))) == (0));\n  \
    \  assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpju16scg1: /tmp/tmpju16scg1.cpp:25: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long sum = 0;\n    for(float\
    \ num : lst) {\n        sum += num * num;\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpqm20a41v: /tmp/tmpqm20a41v.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long ans = 0;\n    for(auto\
    \ &num: lst) {\n        ans += num * num;\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpz71_bhg7: /tmp/tmpz71_bhg7.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long ans = 0;\n    for(auto\
    \ x:lst)\n        ans += x*x;\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = sum_squares;\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0}))) == (14));\n\
    \    assert(candidate((std::vector<float>({1.0, 3.0, 5.0, 7.0}))) == (84));\n\
    \    assert(candidate((std::vector<float>({1.4, 4.2, 0.0}))) == (29));\n    assert(candidate((std::vector<float>({-2.4,\
    \ 1.0, 1.0}))) == (6));\n    assert(candidate((std::vector<float>({100.0, 1.0,\
    \ 15.0, 2.0}))) == (10230));\n    assert(candidate((std::vector<float>({10000.0,\
    \ 10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4, 17.9,\
    \ 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpm0pzfltd: /tmp/tmpm0pzfltd.cpp:23: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long sum = 0;\n    for(auto\
    \ i : lst) {\n        sum += i*i;\n    }\n    return sum;\n}\nint main() {\n \
    \   auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpsexxh2nr: /tmp/tmpsexxh2nr.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long ans = 0;\n    for(auto\
    \ &x: lst) {\n        ans += x * x;\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpv1tkpwha: /tmp/tmpv1tkpwha.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long sum = 0;\n    for(auto\
    \ &x : lst) {\n        sum += std::round(std::ceil(x * x));\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpgxj0w07v: /tmp/tmpgxj0w07v.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long int sum = 0;\n    for(float\
    \ num : lst) {\n        sum += num * num;\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmprhat7e8s: /tmp/tmprhat7e8s.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long ans = 0;\n    for (float\
    \ f : lst) {\n        ans += (long long)(f*f);\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpkikhzl_8: /tmp/tmpkikhzl_8.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long ans = 0;\n    for(auto\
    \ &x: lst)\n        ans += std::round(std::ceil(x*x)*x);\n    return ans;\n}\n\
    int main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpbs1c2rj4: /tmp/tmpbs1c2rj4.cpp:20: int main(): Assertion `candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long sum = 0;\n    for(float\
    \ num : lst) {\n        sum += num * num;\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpvrf0bpjd: /tmp/tmpvrf0bpjd.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long int sum = 0;\n    for(float\
    \ num : lst)\n        sum += num*num;\n    return sum;\n}\nint main() {\n    auto\
    \ candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0, 7.0})))\
    \ == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0}))) == (29));\n\
    \    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n    assert(candidate((std::vector<float>({100.0,\
    \ 1.0, 15.0, 2.0}))) == (10230));\n    assert(candidate((std::vector<float>({10000.0,\
    \ 10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4, 17.9,\
    \ 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpr6hh4_af: /tmp/tmpr6hh4_af.cpp:23: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long sum = 0;\n    for(float\
    \ num : lst)\n        sum += num * num;\n    return sum;\n}\nint main() {\n  \
    \  auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmp_2e3scxc: /tmp/tmp_2e3scxc.cpp:23: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long sum = 0;\n    for(float\
    \ num : lst) {\n        sum += num * num;\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmp95ypkbnw: /tmp/tmp95ypkbnw.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long ans = 0;\n    for(float\
    \ num : lst) {\n        ans += num * num;\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpeiod0x1p: /tmp/tmpeiod0x1p.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long int sum = 0;\n    for(float\
    \ num : lst)\n        sum += num * num;\n    return sum;\n}\nint main() {\n  \
    \  auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpiszasab2: /tmp/tmpiszasab2.cpp:23: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long ans = 0;\n    for (float\
    \ x : lst) {\n        ans += (x * x);\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpr5jli74x: /tmp/tmpr5jli74x.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long int sum = 0;\n    for(float\
    \ num : lst)\n        sum += num * num;\n    return sum;\n}\nint main() {\n  \
    \  auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpxphcd0lb: /tmp/tmpxphcd0lb.cpp:23: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long sum = 0;\n    long long\
    \ n = lst.size();\n    for(long long i = 0; i < n; i++) {\n        sum += std::pow(static_cast<long\
    \ long>(lst[i]), 2);\n    }\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = sum_squares;\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0}))) == (14));\n\
    \    assert(candidate((std::vector<float>({1.0, 3.0, 5.0, 7.0}))) == (84));\n\
    \    assert(candidate((std::vector<float>({1.4, 4.2, 0.0}))) == (29));\n    assert(candidate((std::vector<float>({-2.4,\
    \ 1.0, 1.0}))) == (6));\n    assert(candidate((std::vector<float>({100.0, 1.0,\
    \ 15.0, 2.0}))) == (10230));\n    assert(candidate((std::vector<float>({10000.0,\
    \ 10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4, 17.9,\
    \ 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmp76vpoar8: /tmp/tmp76vpoar8.cpp:25: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long int sum = 0;\n    for(auto\
    \ &x: lst)\n        sum += std::round(std::ceil(x * x)); // round the element\
    \ to upper int(Ceiling) first\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = sum_squares;\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0})))\
    \ == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0}))) == (14));\n\
    \    assert(candidate((std::vector<float>({1.0, 3.0, 5.0, 7.0}))) == (84));\n\
    \    assert(candidate((std::vector<float>({1.4, 4.2, 0.0}))) == (29));\n    assert(candidate((std::vector<float>({-2.4,\
    \ 1.0, 1.0}))) == (6));\n    assert(candidate((std::vector<float>({100.0, 1.0,\
    \ 15.0, 2.0}))) == (10230));\n    assert(candidate((std::vector<float>({10000.0,\
    \ 10000.0}))) == (200000000));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4, 17.9,\
    \ 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmp8nx653en: /tmp/tmp8nx653en.cpp:23: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long sum = 0;\n    for (float\
    \ f : lst) {\n        sum += std::round(f * f);\n    }\n    return sum;\n}\nint\
    \ main() {\n    auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpgt1eblb5: /tmp/tmpgt1eblb5.cpp:24: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of\
    \ numbers.\n// You need to return the sum of squared numbers in the given list,\n\
    // round each element in the list to the upper int(Ceiling) first.\n// Examples:\n\
    // For lst = [1,2,3] the output should be 14\n// For lst = [1,4,9] the output\
    \ should be 98\n// For lst = [1,3,5,7] the output should be 84\n// For lst = [1.4,4.2,0]\
    \ the output should be 29\n// For lst = [-2.4,1,1] the output should be 6\nlong\
    \ sum_squares(std::vector<float> lst) {\n    long long int sum = 0;\n    for(float\
    \ num : lst)\n        sum += num * num;\n    return sum;\n}\nint main() {\n  \
    \  auto candidate = sum_squares;\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 2.0,\
    \ 3.0}))) == (14));\n    assert(candidate((std::vector<float>({1.0, 3.0, 5.0,\
    \ 7.0}))) == (84));\n    assert(candidate((std::vector<float>({1.4, 4.2, 0.0})))\
    \ == (29));\n    assert(candidate((std::vector<float>({-2.4, 1.0, 1.0}))) == (6));\n\
    \    assert(candidate((std::vector<float>({100.0, 1.0, 15.0, 2.0}))) == (10230));\n\
    \    assert(candidate((std::vector<float>({10000.0, 10000.0}))) == (200000000));\n\
    \    assert(candidate((std::vector<float>({-1.4, 4.6, 6.3}))) == (75));\n    assert(candidate((std::vector<float>({-1.4,\
    \ 17.9, 18.9, 19.9}))) == (1086));\n    assert(candidate((std::vector<float>({0.0})))\
    \ == (0));\n    assert(candidate((std::vector<float>({-1.0}))) == (1));\n    assert(candidate((std::vector<float>({-1.0,\
    \ 1.0, 0.0}))) == (2));\n}\n"
  stdout: ''
  stderr: "tmpxv79hy7c: /tmp/tmpxv79hy7c.cpp:23: int main(): Assertion `candidate((std::vector<float>({1.4,\
    \ 4.2, 0.0}))) == (29)' failed.\n"
  exit_code: -6
  status: Exception
