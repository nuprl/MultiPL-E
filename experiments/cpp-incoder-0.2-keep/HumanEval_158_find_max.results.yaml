name: HumanEval_158_find_max
language: cpp
results:
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    // code here\n    std::string max;\n    int maxCount = 0;\n  \
    \  for (auto &word : words) {\n        auto count = std::count(word.begin(), word.end(),\
    \ 'a');\n        if (count > maxCount) {\n            max = word;\n          \
    \  maxCount = count;\n        }\n    }\n    return max;\n}\nint main() {\n   \
    \ auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmpahjq0caa: /tmp/tmpahjq0caa.cpp:25: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    // Your code here\n    std::string max;\n    int maxCount = 0;\n\
    \    for (auto &word: words) {\n        std::unordered_map<char, int> charCount;\n\
    \        for (auto &c: word) {\n            charCount[c]++;\n        }\n     \
    \   for (auto &c: charCount) {\n            if (c.second > maxCount) {\n     \
    \           max = word;\n                maxCount = c.second;\n            }\n\
    \        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = find_max;\n\
    \    assert(candidate((std::vector<std::string>({\"name\", \"of\", \"string\"\
    }))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"name\"\
    , \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmpw_svno9i: /tmp/tmpw_svno9i.cpp:30: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    std::string max;\n    int max_count = 0;\n    for (auto &w : words)\
    \ {\n        auto count = std::count(w.begin(), w.end(), 'a');\n        if (count\
    \ > max_count) {\n            max = w;\n            max_count = count;\n     \
    \   }\n    }\n    return max;\n}\nint main() {\n    auto candidate = find_max;\n\
    \    assert(candidate((std::vector<std::string>({\"name\", \"of\", \"string\"\
    }))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"name\"\
    , \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmp_tlqd_df: /tmp/tmp_tlqd_df.cpp:24: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    std::string max = \"\";\n    int max_count = 0;\n    for (auto\
    \ &word : words) {\n        auto count = std::count_if(word.begin(), word.end(),\
    \ [](char c) {\n            return std::isalpha(c);\n        });\n        if (count\
    \ > max_count) {\n            max_count = count;\n            max = word;\n  \
    \      }\n    }\n    return max;\n}\nint main() {\n    auto candidate = find_max;\n\
    \    assert(candidate((std::vector<std::string>({\"name\", \"of\", \"string\"\
    }))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"name\"\
    , \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmpry21it66: /tmp/tmpry21it66.cpp:27: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    std::string max = \"\";\n    int max_count = 0;\n    for (auto\
    \ &word : words) {\n        int count = 0;\n        for (auto &c : word) {\n \
    \           count += 1;\n        }\n        if (count > max_count) {\n       \
    \     max = word;\n            max_count = count;\n        }\n    }\n    return\
    \ max;\n}\nint main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmpub20frlq: /tmp/tmpub20frlq.cpp:28: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    // Write your code here\n    std::string max = \"\";\n    int\
    \ maxCount = 0;\n    for (auto &i : words) {\n        int count = 0;\n       \
    \ for (auto &j : words) {\n            if (i == j) {\n                continue;\n\
    \            }\n            count += 1;\n        }\n        if (count > maxCount)\
    \ {\n            max = i;\n            maxCount = count;\n        }\n    }\n \
    \   return max;\n}\nint main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmp56ehb3_z: /tmp/tmp56ehb3_z.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    std::string max = \"\";\n    int maxCount = 0;\n    for (auto\
    \ &word : words) {\n        int count = std::count(word.begin(), word.end(), 'a');\n\
    \        if (count > maxCount) {\n            max = word;\n            maxCount\
    \ = count;\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate\
    \ = find_max;\n    assert(candidate((std::vector<std::string>({\"name\", \"of\"\
    , \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmp3ks7tgdp: /tmp/tmp3ks7tgdp.cpp:24: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    std::string max = \"\";\n    int max_count = 0;\n    for (auto\
    \ &word : words) {\n        auto count = std::count(word.begin(), word.end(),\
    \ 'a');\n        if (count > max_count) {\n            max = word;\n         \
    \   max_count = count;\n        }\n    }\n    return max;\n}\nint main() {\n \
    \   auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmpyidqlkod: /tmp/tmpyidqlkod.cpp:24: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    // Write your code here\n    std::string max = \"\";\n    int\
    \ maxCount = 0;\n    for (auto &word: words) {\n        std::unordered_set<char>\
    \ chars;\n        for (auto &c: word) {\n            chars.insert(c);\n      \
    \  }\n        if (chars.size() > maxCount) {\n            max = word;\n      \
    \      maxCount = chars.size();\n        }\n    }\n    return max;\n}\nint main()\
    \ {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmp4n7go0gr: /tmp/tmp4n7go0gr.cpp:29: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    // Your code here\n    std::string max = \"\";\n    int maxCount\
    \ = 0;\n    for (auto &word : words) {\n        int count = 0;\n        for (auto\
    \ &c : word) {\n            count += (c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u');\n        }\n        if (count > maxCount) {\n            max\
    \ = word;\n            maxCount = count;\n        }\n    }\n    return max;\n\
    }\nint main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmps3fd98bp: /tmp/tmps3fd98bp.cpp:28: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    // Write your code here\n    std::string max = \"\";\n    int\
    \ maxCount = 0;\n    for (auto &word : words) {\n        int count = 0;\n    \
    \    for (auto &c : word) {\n            if (std::count(word.begin(), word.end(),\
    \ c) > 0) {\n                count++;\n            }\n        }\n        if (count\
    \ > maxCount) {\n            max = word;\n            maxCount = count;\n    \
    \    }\n    }\n    return max;\n}\nint main() {\n    auto candidate = find_max;\n\
    \    assert(candidate((std::vector<std::string>({\"name\", \"of\", \"string\"\
    }))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"name\"\
    , \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmptppvuow9: /tmp/tmptppvuow9.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    std::string max = \"\";\n    int maxCount = 0;\n    for (auto\
    \ word : words) {\n        int count = std::count(word.begin(), word.end(), 'a');\n\
    \        if (count > maxCount) {\n            max = word;\n            maxCount\
    \ = count;\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate\
    \ = find_max;\n    assert(candidate((std::vector<std::string>({\"name\", \"of\"\
    , \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmpu1eobizc: /tmp/tmpu1eobizc.cpp:24: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    // Your code here\n    std::string max = \"\";\n    int maxCount\
    \ = 0;\n    for (auto &word : words) {\n        int count = 0;\n        for (auto\
    \ &c : word) {\n            if (std::count(max.begin(), max.end(), c) > 0) {\n\
    \                count++;\n            }\n        }\n        if (count > maxCount)\
    \ {\n            max = word;\n            maxCount = count;\n        }\n    }\n\
    \    return max;\n}\nint main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmp6y9tqboa: /tmp/tmp6y9tqboa.cpp:30: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    // Your code here\n    std::string max = \"\";\n    int maxCount\
    \ = 0;\n    for (auto &word : words) {\n        int count = 0;\n        for (auto\
    \ &c : word) {\n            count += 1;\n        }\n        if (count > maxCount)\
    \ {\n            max = word;\n            maxCount = count;\n        }\n    }\n\
    \    return max;\n}\nint main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmp9ex6faiv: /tmp/tmp9ex6faiv.cpp:29: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    int max_count = 0, max_index = 0;\n    for (size_t i = 0; i <\
    \ words.size(); i++) {\n        int count = 0;\n        for (size_t j = 0; j <\
    \ words[i].size(); j++) {\n            count += words[i][j].size();\n        }\n\
    \        if (count > max_count) {\n            max_count = count;\n          \
    \  max_index = i;\n        }\n    }\n    return words[max_index];\n}\nint main()\
    \ {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpb765c0no.cpp: In function \u2018std::string find_max(std::vector<std::__cxx11::basic_string<char>\
    \ >)\u2019:\n/tmp/tmpb765c0no.cpp:15:34: error: request for member \u2018size\u2019\
    \ in \u2018(& words.std::vector<std::__cxx11::basic_string<char> >::operator[](i))->std::__cxx11::basic_string<char>::operator[](j)\u2019\
    , which is of non-class type \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019}\n   15 |             count +=\
    \ words[i][j].size();\n      |                                  ^~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    // Write your code here\n    std::string max = \"\";\n    int\
    \ count = 0;\n    for (auto &word : words) {\n        count += word.length();\n\
    \        if (count > word.length()) {\n            max = word;\n            count\
    \ = word.length();\n        }\n    }\n    return max;\n}\nint main() {\n    auto\
    \ candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"name\"\
    , \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmp5z9q0l0o: /tmp/tmp5z9q0l0o.cpp:26: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    // code here\n    std::string max;\n    int maxCount = 0;\n  \
    \  for (auto &word : words) {\n        int count = 0;\n        for (auto &c :\
    \ word) {\n            count += (c == 'a' || c == 'e' || c == 'i' || c == 'o'\
    \ || c == 'u');\n        }\n        if (count > maxCount) {\n            max =\
    \ word;\n            maxCount = count;\n        }\n    }\n    return max;\n}\n\
    int main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmpg4zhnxrg: /tmp/tmpg4zhnxrg.cpp:28: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    // Write your code here\n    std::string max = \"\";\n    int\
    \ max_count = 0;\n    for (auto &w : words) {\n        std::set<char> s;\n   \
    \     for (auto &c : w) {\n            s.insert(c);\n        }\n        if (s.size()\
    \ > max_count) {\n            max_count = s.size();\n            max = w;\n  \
    \      }\n    }\n    return max;\n}\nint main() {\n    auto candidate = find_max;\n\
    \    assert(candidate((std::vector<std::string>({\"name\", \"of\", \"string\"\
    }))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"name\"\
    , \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmpor84vtvn: /tmp/tmpor84vtvn.cpp:29: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    // Your code here\n    std::string max = \"\";\n    int maxCount\
    \ = 0;\n    for (auto &word : words) {\n        int count = 0;\n        for (auto\
    \ &c : word) {\n            if (std::count(word.begin(), word.end(), c) > 0) {\n\
    \                count++;\n            }\n        }\n        if (count > maxCount)\
    \ {\n            max = word;\n            maxCount = count;\n        }\n    }\n\
    \    return max;\n}\nint main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmpj1iupwgk: /tmp/tmpj1iupwgk.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    std::string max = \"\";\n    int maxCount = 0;\n    for (auto\
    \ &word : words) {\n        auto count = std::count(word.begin(), word.end(),\
    \ 'a');\n        if (count > maxCount) {\n            max = word;\n          \
    \  maxCount = count;\n        }\n    }\n    return max;\n}\nint main() {\n   \
    \ auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmp_9p_fkm4: /tmp/tmp_9p_fkm4.cpp:24: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    // Write your code here\n    std::string max;\n    int maxCount\
    \ = 0;\n    for (auto &word : words) {\n        int count = 0;\n        for (auto\
    \ &c : word) {\n            count += 1;\n        }\n        if (count > maxCount)\
    \ {\n            max = word;\n            maxCount = count;\n        }\n    }\n\
    \    return max;\n}\nint main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmpnkdboziy: /tmp/tmpnkdboziy.cpp:29: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    int max = 0;\n    std::string maxWord = \"\";\n    for (auto &word\
    \ : words) {\n        int count = 0;\n        for (auto &c : word) {\n       \
    \     count += 1;\n        }\n        if (count > max) {\n            max = count;\n\
    \            maxWord = word;\n        }\n    }\n    return maxWord;\n}\nint main()\
    \ {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmps33kdsk5: /tmp/tmps33kdsk5.cpp:28: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    // Write your code here\n    std::string max = \"\";\n    int\
    \ maxCount = 0;\n    for (auto &i : words) {\n        int count = 0;\n       \
    \ for (auto &j : words) {\n            if (i == j) {\n                continue;\n\
    \            }\n            count += 1;\n        }\n        if (count > maxCount)\
    \ {\n            max = i;\n            maxCount = count;\n        }\n    }\n \
    \   return max;\n}\nint main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmpx711jiue: /tmp/tmpx711jiue.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    // Write your code here\n    std::string max = \"\";\n    int\
    \ maxCount = 0;\n    for(auto &word: words){\n        int count = 0;\n       \
    \ for(auto &c: word){\n            if(c == max){\n                count++;\n \
    \           }\n        }\n        if(count > maxCount){\n            max = word;\n\
    \            maxCount = count;\n        }\n    }\n    return max;\n}\nint main()\
    \ {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_vg8xvym.cpp: In function \u2018std::string find_max(std::vector<std::__cxx11::basic_string<char>\
    \ >)\u2019:\n/tmp/tmp_vg8xvym.cpp:17:18: error: no match for \u2018operator==\u2019\
    \ (operand types are \u2018char\u2019 and \u2018std::string\u2019 {aka \u2018\
    std::__cxx11::basic_string<char>\u2019})\n   17 |             if(c == max){\n\
    \      |                ~ ^~ ~~~\n      |                |    |\n      |     \
    \           char std::string {aka std::__cxx11::basic_string<char>}\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n       \
    \          from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmp_vg8xvym.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1026 |     operator==(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp_vg8xvym.cpp:17:21:\
    \ note:   mismatched types \u2018const std::__cxx11::sub_match<_BiIter>\u2019\
    \ and \u2018char\u2019\n   17 |             if(c == max){\n      |           \
    \          ^~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmp_vg8xvym.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1099:5:\
    \ note: candidate: \u2018template<class _Bi_iter, class _Ch_traits, class _Ch_alloc>\
    \ bool std::__cxx11::operator==(std::__cxx11::__sub_match_string<_Bi_iter, _Ch_traits,\
    \ _Ch_alloc>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\n 1099 |     operator==(const\
    \ __sub_match_string<_Bi_iter, _Ch_traits, _Ch_alloc>& __lhs,\n      |     ^~~~~~~~\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1099:5: note:\
    \   template argu"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    // code here\n    std::string max;\n    int maxCount = 0;\n  \
    \  for (auto &word : words) {\n        int count = 0;\n        for (auto &c :\
    \ word) {\n            if (std::count(word.begin(), word.end(), c) > 0) {\n  \
    \              count++;\n            }\n        }\n        if (count > maxCount)\
    \ {\n            max = word;\n            maxCount = count;\n        }\n    }\n\
    \    return max;\n}\nint main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmpb0pg076r: /tmp/tmpb0pg076r.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    // Your code here\n    std::string max;\n    int maxCount = 0;\n\
    \    for (auto &word : words) {\n        int count = 0;\n        for (auto &c\
    \ : word) {\n            count += 1;\n        }\n        if (count > maxCount)\
    \ {\n            max = word;\n            maxCount = count;\n        }\n    }\n\
    \    return max;\n}\nint main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmpunuw2utw: /tmp/tmpunuw2utw.cpp:29: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    // Your code here\n    std::string max = \"\";\n    int maxCount\
    \ = 0;\n    for (auto word : words) {\n        auto count = std::count(word.begin(),\
    \ word.end(), 'a');\n        if (count > maxCount) {\n            max = word;\n\
    \            maxCount = count;\n        }\n    }\n    return max;\n}\nint main()\
    \ {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmpgh8mpw62: /tmp/tmpgh8mpw62.cpp:25: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    std::string max = \"\";\n    int max_count = 0;\n    for (auto\
    \ &word : words) {\n        int count = 0;\n        for (auto &c : word) {\n \
    \           if (std::count(max.begin(), max.end(), c) > 0) {\n               \
    \ count++;\n            }\n        }\n        if (count > max_count) {\n     \
    \       max = word;\n            max_count = count;\n        }\n    }\n    return\
    \ max;\n}\nint main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmpxvr8aotf: /tmp/tmpxvr8aotf.cpp:29: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    std::string max;\n    int maxCount = 0;\n    for (auto &word :\
    \ words) {\n        std::set<char> chars;\n        for (char c : word) {\n   \
    \         chars.insert(c);\n        }\n        if (chars.size() > maxCount) {\n\
    \            max = word;\n            maxCount = chars.size();\n        }\n  \
    \  }\n    return max;\n}\nint main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmprk8wxyb4: /tmp/tmprk8wxyb4.cpp:28: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    // Write your code here\n    std::string max = \"\";\n    int\
    \ maxCount = 0;\n    for (auto &word : words) {\n        int count = 0;\n    \
    \    for (auto &c : word) {\n            if (std::count(max.begin(), max.end(),\
    \ c) > 0) {\n                count++;\n            }\n        }\n        if (count\
    \ > maxCount) {\n            max = word;\n            maxCount = count;\n    \
    \    }\n    }\n    return max;\n}\nint main() {\n    auto candidate = find_max;\n\
    \    assert(candidate((std::vector<std::string>({\"name\", \"of\", \"string\"\
    }))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"name\"\
    , \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmpt6_duvjt: /tmp/tmpt6_duvjt.cpp:30: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    std::string max = \"\";\n    int max_count = 0;\n    for (auto\
    \ &word : words) {\n        int count = 0;\n        for (auto &c : word) {\n \
    \           count += 1;\n        }\n        if (count > max_count) {\n       \
    \     max = word;\n            max_count = count;\n        }\n    }\n    return\
    \ max;\n}\nint main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmptjkm2zvn: /tmp/tmptjkm2zvn.cpp:28: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    int max_count = 0, max_index = 0;\n    for (size_t i = 0; i <\
    \ words.size(); i++) {\n        int count = 0;\n        for (size_t j = 0; j <\
    \ words[i].size(); j++) {\n            count += words[i][j].size();\n        }\n\
    \        if (count > max_count) {\n            max_count = count;\n          \
    \  max_index = i;\n        }\n    }\n    return words[max_index];\n}\nint main()\
    \ {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpwpnf8z8j.cpp: In function \u2018std::string find_max(std::vector<std::__cxx11::basic_string<char>\
    \ >)\u2019:\n/tmp/tmpwpnf8z8j.cpp:15:34: error: request for member \u2018size\u2019\
    \ in \u2018(& words.std::vector<std::__cxx11::basic_string<char> >::operator[](i))->std::__cxx11::basic_string<char>::operator[](j)\u2019\
    , which is of non-class type \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019}\n   15 |             count +=\
    \ words[i][j].size();\n      |                                  ^~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    int max_count = 0;\n    std::string max_word = \"\";\n    for\
    \ (auto &word : words) {\n        int count = 0;\n        for (auto &c : word)\
    \ {\n            count += 1;\n        }\n        if (count > max_count) {\n  \
    \          max_count = count;\n            max_word = word;\n        }\n    }\n\
    \    return max_word;\n}\nint main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmph1bsk_zo: /tmp/tmph1bsk_zo.cpp:28: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    // Your code here\n    std::string max = \"\";\n    int maxCount\
    \ = 0;\n    for (auto &word : words) {\n        int count = 0;\n        for (auto\
    \ &c : word) {\n            if (std::count(word.begin(), word.end(), c) > 0) {\n\
    \                count++;\n            }\n        }\n        if (count > maxCount)\
    \ {\n            max = word;\n            maxCount = count;\n        }\n    }\n\
    \    return max;\n}\nint main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmpdaasolky: /tmp/tmpdaasolky.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    std::string max;\n    int max_count = 0;\n    for (auto &word\
    \ : words) {\n        int count = 0;\n        for (auto &c : word) {\n       \
    \     count += 1;\n        }\n        if (count > max_count) {\n            max\
    \ = word;\n            max_count = count;\n        }\n    }\n    return max;\n\
    }\nint main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmpdjupsza4: /tmp/tmpdjupsza4.cpp:28: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    // Your code here\n    std::string max;\n    std::string temp;\n\
    \    int count = 0;\n    for (auto &i : words) {\n        temp = i;\n        std::sort(temp.begin(),\
    \ temp.end());\n        std::unique_copy(temp.begin(), temp.end(), std::back_inserter(max));\n\
    \        count += 1;\n    }\n    if (count > 1) {\n        return max;\n    }\n\
    \    return \"\";\n}\nint main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmp2g7yok67: /tmp/tmp2g7yok67.cpp:28: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    // Your code here\n    std::string max = \"\";\n    int maxCount\
    \ = 0;\n    for (auto &word : words) {\n        int count = 0;\n        for (auto\
    \ &c : word) {\n            count += (c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u');\n        }\n        if (count > maxCount) {\n            max\
    \ = word;\n            maxCount = count;\n        }\n    }\n    return max;\n\
    }\nint main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmps1_rkx9d: /tmp/tmps1_rkx9d.cpp:28: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    int n = words.size();\n    int max_count = 0;\n    std::string\
    \ max_word = \"\";\n    for (int i = 0; i < n; i++) {\n        int count = 0;\n\
    \        for (int j = 0; j < n; j++) {\n            if (words[i] == words[j])\
    \ {\n                count++;\n            }\n        }\n        if (count > max_count)\
    \ {\n            max_count = count;\n            max_word = words[i];\n      \
    \  }\n    }\n    return max_word;\n}\nint main() {\n    auto candidate = find_max;\n\
    \    assert(candidate((std::vector<std::string>({\"name\", \"of\", \"string\"\
    }))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"name\"\
    , \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmpr6t1oyv1: /tmp/tmpr6t1oyv1.cpp:30: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    std::string max = \"\";\n    int maxCount = 0;\n    for (auto\
    \ &word : words) {\n        int count = 0;\n        for (auto &c : word) {\n \
    \           count += 1;\n        }\n        if (count > maxCount) {\n        \
    \    max = word;\n            maxCount = count;\n        }\n    }\n    return\
    \ max;\n}\nint main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmp8gnw7hnx: /tmp/tmp8gnw7hnx.cpp:28: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    // code here\n    std::string max;\n    std::string max2;\n  \
    \  int maxCount = 0;\n    for (auto &word : words) {\n        int count = 0;\n\
    \        for (auto &c : word) {\n            if (std::count(word.begin(), word.end(),\
    \ c) > 0) {\n                count++;\n            }\n        }\n        if (count\
    \ > maxCount) {\n            maxCount = count;\n            max = word;\n    \
    \    }\n        if (count > maxCount) {\n            max2 = word;\n        }\n\
    \    }\n    if (maxCount == 0) {\n        return \"\";\n    }\n    if (maxCount\
    \ == 1) {\n        return max2;\n    }\n    return max;\n}\nint main() {\n   \
    \ auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmpmodwv_au: /tmp/tmpmodwv_au.cpp:41: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    // Write your code here\n    std::string max = \"\";\n    int\
    \ maxCount = 0;\n    for (auto &word : words) {\n        int count = 0;\n    \
    \    for (auto &c : word) {\n            count += 1;\n        }\n        if (count\
    \ > maxCount) {\n            max = word;\n            maxCount = count;\n    \
    \    }\n    }\n    return max;\n}\nint main() {\n    auto candidate = find_max;\n\
    \    assert(candidate((std::vector<std::string>({\"name\", \"of\", \"string\"\
    }))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"name\"\
    , \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmpztsluz7i: /tmp/tmpztsluz7i.cpp:29: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    std::string max = \"\";\n    int max_count = 0;\n    for (auto\
    \ &w : words) {\n        auto count = std::count(w.begin(), w.end(), 'a');\n \
    \       if (count > max_count) {\n            max = w;\n            max_count\
    \ = count;\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate\
    \ = find_max;\n    assert(candidate((std::vector<std::string>({\"name\", \"of\"\
    , \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmprt11kscc: /tmp/tmprt11kscc.cpp:24: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    std::string max = \"\";\n    int max_count = 0;\n    for (auto\
    \ &w : words) {\n        auto count = std::count(w.begin(), w.end(), 'a');\n \
    \       if (count > max_count) {\n            max_count = count;\n           \
    \ max = w;\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate\
    \ = find_max;\n    assert(candidate((std::vector<std::string>({\"name\", \"of\"\
    , \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmp3afwae06: /tmp/tmp3afwae06.cpp:24: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    std::string max;\n    int max_count = 0;\n    for (auto &word\
    \ : words) {\n        int count = 0;\n        for (auto &c : word) {\n       \
    \     count += 1;\n        }\n        if (count > max_count) {\n            max_count\
    \ = count;\n            max = word;\n        }\n    }\n    return max;\n}\nint\
    \ main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmpe3cyiy9q: /tmp/tmpe3cyiy9q.cpp:28: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    std::string max = \"\";\n    int max_count = 0;\n    for (auto\
    \ &word : words) {\n        auto count = std::count(word.begin(), word.end(),\
    \ 'a');\n        if (count > max_count) {\n            max_count = count;\n  \
    \          max = word;\n        }\n    }\n    return max;\n}\nint main() {\n \
    \   auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmp9hamtlnq: /tmp/tmp9hamtlnq.cpp:24: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    std::string max;\n    int maxCount = 0;\n    for (auto word :\
    \ words) {\n        int count = std::count(word.begin(), word.end(), 'a');\n \
    \       if (count > maxCount) {\n            max = word;\n            maxCount\
    \ = count;\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate\
    \ = find_max;\n    assert(candidate((std::vector<std::string>({\"name\", \"of\"\
    , \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmpnd6b1jzk: /tmp/tmpnd6b1jzk.cpp:24: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    // Your code here\n    std::string max;\n    int maxCount = 0;\n\
    \    for (auto &word : words) {\n        int count = 0;\n        for (auto &c\
    \ : word) {\n            count += 1;\n        }\n        if (count > maxCount)\
    \ {\n            max = word;\n            maxCount = count;\n        }\n    }\n\
    \    return max;\n}\nint main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmp52z36_11: /tmp/tmp52z36_11.cpp:29: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    // Write your code here\n    std::string max;\n    int maxCount\
    \ = 0;\n    for (auto &word : words) {\n        int count = 0;\n        for (auto\
    \ &c : word) {\n            count += 1;\n        }\n        if (count > maxCount)\
    \ {\n            max = word;\n            maxCount = count;\n        }\n    }\n\
    \    return max;\n}\nint main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmpeukv666_: /tmp/tmpeukv666_.cpp:29: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    std::string max;\n    int max_count = 0;\n    for (auto &word\
    \ : words) {\n        int count = 0;\n        for (auto &c : word) {\n       \
    \     count += 1;\n        }\n        if (count > max_count) {\n            max\
    \ = word;\n            max_count = count;\n        }\n    }\n    return max;\n\
    }\nint main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmp7ym669ms: /tmp/tmp7ym669ms.cpp:28: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    std::string max = \"\";\n    int maxCount = 0;\n    for (auto\
    \ word : words) {\n        auto count = std::count(word.begin(), word.end(), 'a');\n\
    \        if (count > maxCount) {\n            max = word;\n            maxCount\
    \ = count;\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate\
    \ = find_max;\n    assert(candidate((std::vector<std::string>({\"name\", \"of\"\
    , \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmpofig7l9b: /tmp/tmpofig7l9b.cpp:24: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    int max_count = 0;\n    std::string max_word = \"\";\n    for\
    \ (auto &word : words) {\n        int count = 0;\n        for (auto &c : word)\
    \ {\n            if (std::count(word.begin(), word.end(), c) > 0) {\n        \
    \        count++;\n            }\n        }\n        if (count > max_count) {\n\
    \            max_count = count;\n            max_word = word;\n        }\n   \
    \ }\n    return max_word;\n}\nint main() {\n    auto candidate = find_max;\n \
    \   assert(candidate((std::vector<std::string>({\"name\", \"of\", \"string\"})))\
    \ == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"name\"\
    , \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmpmuk5is0_: /tmp/tmpmuk5is0_.cpp:30: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    // Write your code here\n    std::string maxWord = \"\";\n   \
    \ int maxCount = 0;\n    for (auto &word : words) {\n        int count = 0;\n\
    \        for (auto &c : word) {\n            count += 1;\n        }\n        if\
    \ (count > maxCount) {\n            maxCount = count;\n            maxWord = word;\n\
    \        }\n    }\n    return maxWord;\n}\nint main() {\n    auto candidate =\
    \ find_max;\n    assert(candidate((std::vector<std::string>({\"name\", \"of\"\
    , \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmpc8zxmxrj: /tmp/tmpc8zxmxrj.cpp:29: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    int max_count = 0, max_index = -1;\n    for (size_t i = 0; i <\
    \ words.size(); i++) {\n        int count = 0;\n        for (size_t j = 0; j <\
    \ words[i].size(); j++) {\n            count += words[i][j].size();\n        }\n\
    \        if (count > max_count) {\n            max_count = count;\n          \
    \  max_index = i;\n        }\n    }\n    return words[max_index];\n}\nint main()\
    \ {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpb_xmhmvd.cpp: In function \u2018std::string find_max(std::vector<std::__cxx11::basic_string<char>\
    \ >)\u2019:\n/tmp/tmpb_xmhmvd.cpp:15:34: error: request for member \u2018size\u2019\
    \ in \u2018(& words.std::vector<std::__cxx11::basic_string<char> >::operator[](i))->std::__cxx11::basic_string<char>::operator[](j)\u2019\
    , which is of non-class type \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019}\n   15 |             count +=\
    \ words[i][j].size();\n      |                                  ^~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    std::string max;\n    int max_count = 0;\n    for (auto &word\
    \ : words) {\n        std::unordered_set<char> unique_chars;\n        for (auto\
    \ &c : word) {\n            unique_chars.insert(c);\n        }\n        if (unique_chars.size()\
    \ > max_count) {\n            max = word;\n            max_count = unique_chars.size();\n\
    \        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = find_max;\n\
    \    assert(candidate((std::vector<std::string>({\"name\", \"of\", \"string\"\
    }))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"name\"\
    , \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmpsm9u1usq: /tmp/tmpsm9u1usq.cpp:28: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    int max_count = 0;\n    std::string max_word = \"\";\n    for\
    \ (auto &word : words) {\n        int count = 0;\n        for (auto &c : word)\
    \ {\n            count += 1;\n        }\n        if (count > max_count) {\n  \
    \          max_count = count;\n            max_word = word;\n        }\n    }\n\
    \    return max_word;\n}\nint main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmpp2gnxjwh: /tmp/tmpp2gnxjwh.cpp:28: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    // Write your code here\n    std::string max;\n    int maxCount\
    \ = 0;\n    for (auto word : words) {\n        int count = 0;\n        for (auto\
    \ c : word) {\n            count += (c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u');\n        }\n        if (count > maxCount) {\n            max\
    \ = word;\n            maxCount = count;\n        }\n    }\n    return max;\n\
    }\nint main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmpfhisql5r: /tmp/tmpfhisql5r.cpp:28: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    std::string max;\n    int max_count = 0;\n    for (auto &word\
    \ : words) {\n        int count = 0;\n        for (auto &c : word) {\n       \
    \     count += 1;\n        }\n        if (count > max_count) {\n            max\
    \ = word;\n            max_count = count;\n        }\n    }\n    return max;\n\
    }\nint main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmp8t7qinpe: /tmp/tmp8t7qinpe.cpp:28: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    int max_count = 0;\n    std::string max_word = \"\";\n    for\
    \ (auto &word : words) {\n        int count = 0;\n        for (auto &c : word)\
    \ {\n            count += (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c ==\
    \ 'u');\n        }\n        if (count > max_count) {\n            max_count =\
    \ count;\n            max_word = word;\n        }\n    }\n    return max_word;\n\
    }\nint main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmp4czffyi4: /tmp/tmp4czffyi4.cpp:27: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    int n = words.size();\n    int max_count = 0, max_index = -1;\n\
    \    for (int i = 0; i < n; ++i) {\n        int count = 0;\n        for (int j\
    \ = 0; j < n; ++j) {\n            if (i != j && words[j].size() > words[i].size())\
    \ {\n                count += 1;\n            }\n        }\n        if (count\
    \ > max_count) {\n            max_count = count;\n            max_index = i;\n\
    \        }\n    }\n    if (max_count == 0) {\n        return \"\";\n    }\n  \
    \  return words[max_index];\n}\nint main() {\n    auto candidate = find_max;\n\
    \    assert(candidate((std::vector<std::string>({\"name\", \"of\", \"string\"\
    }))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"name\"\
    , \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmpomx53d15: /tmp/tmpomx53d15.cpp:32: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    // Write your code here\n    std::string max;\n    int maxCount\
    \ = 0;\n    for (auto &word: words) {\n        std::unordered_map<char, int> charCount;\n\
    \        for (char c: word) {\n            charCount[c]++;\n        }\n      \
    \  int count = charCount.size();\n        if (count > maxCount) {\n          \
    \  max = word;\n            maxCount = count;\n        }\n    }\n    return max;\n\
    }\nint main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmpij52n8pw: /tmp/tmpij52n8pw.cpp:30: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    // code here\n    std::string max = \"\";\n    int maxCount =\
    \ 0;\n    for (auto &word : words) {\n        int count = 0;\n        for (auto\
    \ &c : word) {\n            if (std::count(word.begin(), word.end(), c) > 0) {\n\
    \                count++;\n            }\n        }\n        if (count > maxCount)\
    \ {\n            max = word;\n            maxCount = count;\n        }\n    }\n\
    \    return max;\n}\nint main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmpw3bevmdi: /tmp/tmpw3bevmdi.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    std::string max = \"\";\n    int max_count = 0;\n    for (auto\
    \ &w : words) {\n        auto count = std::count(w.begin(), w.end(), 'a');\n \
    \       if (count > max_count) {\n            max_count = count;\n           \
    \ max = w;\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate\
    \ = find_max;\n    assert(candidate((std::vector<std::string>({\"name\", \"of\"\
    , \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmp8qsp5ej2: /tmp/tmp8qsp5ej2.cpp:24: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    // Write your code here\n    std::string max;\n    int maxCount\
    \ = 0;\n    for(auto &word: words){\n        int count = 0;\n        for(auto\
    \ &c: word){\n            if(c == 'a'){\n                count++;\n          \
    \  }\n        }\n        if(count > maxCount){\n            max = word;\n    \
    \        maxCount = count;\n        }\n    }\n    return max;\n}\nint main() {\n\
    \    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmpvokfo3mo: /tmp/tmpvokfo3mo.cpp:30: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    // Your code here\n    std::string max = \"\";\n    int maxCount\
    \ = 0;\n    for (auto &word : words) {\n        int count = 0;\n        for (auto\
    \ &c : word) {\n            count += 1;\n        }\n        if (count > maxCount)\
    \ {\n            max = word;\n            maxCount = count;\n        }\n    }\n\
    \    return max;\n}\nint main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmpy1e9w3z2: /tmp/tmpy1e9w3z2.cpp:29: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    // Write your code here\n    std::string max = \"\";\n    int\
    \ maxCount = 0;\n    for (auto &word : words) {\n        int count = 0;\n    \
    \    for (auto &c : word) {\n            count += 1;\n        }\n        if (count\
    \ > maxCount) {\n            max = word;\n            maxCount = count;\n    \
    \    }\n    }\n    return max;\n}\nint main() {\n    auto candidate = find_max;\n\
    \    assert(candidate((std::vector<std::string>({\"name\", \"of\", \"string\"\
    }))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"name\"\
    , \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmpz_xh4t4k: /tmp/tmpz_xh4t4k.cpp:29: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    // Your code here\n    std::string max;\n    int maxCount = 0;\n\
    \    for (auto word : words) {\n        int count = 0;\n        for (auto c :\
    \ word) {\n            count += 1;\n        }\n        if (count > maxCount) {\n\
    \            max = word;\n            maxCount = count;\n        }\n    }\n  \
    \  return max;\n}\nint main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmplslil_3z: /tmp/tmplslil_3z.cpp:29: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    // Your code here\n    std::string max;\n    int maxCount = 0;\n\
    \    for (auto &word : words) {\n        int count = 0;\n        for (auto &c\
    \ : word) {\n            count += 1;\n        }\n        if (count > maxCount)\
    \ {\n            max = word;\n            maxCount = count;\n        }\n    }\n\
    \    return max;\n}\nint main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmppivtpib_: /tmp/tmppivtpib_.cpp:29: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    int max_count = 0, max_index = 0;\n    for (size_t i = 0; i <\
    \ words.size(); i++) {\n        int count = 0;\n        for (size_t j = 0; j <\
    \ words[i].size(); j++) {\n            if (words[i][j] == words[i][max_index])\
    \ {\n                count++;\n            }\n        }\n        if (count > max_count)\
    \ {\n            max_count = count;\n            max_index = i;\n        }\n \
    \   }\n    return words[max_index];\n}\nint main() {\n    auto candidate = find_max;\n\
    \    assert(candidate((std::vector<std::string>({\"name\", \"of\", \"string\"\
    }))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"name\"\
    , \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmpi26f_wsx: /tmp/tmpi26f_wsx.cpp:28: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    // Your code here\n    std::string max = \"\";\n    int maxCount\
    \ = 0;\n    for (auto &word : words) {\n        auto count = std::count_if(word.begin(),\
    \ word.end(), [&](char c) {\n            return std::tolower(c) == std::tolower(max);\n\
    \        });\n        if (count > maxCount) {\n            max = word;\n     \
    \       maxCount = count;\n        }\n    }\n    return max;\n}\nint main() {\n\
    \    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdehmcbs8.cpp: In lambda function:\n/tmp/tmpdehmcbs8.cpp:16:55:\
    \ error: no matching function for call to \u2018tolower(std::string&)\u2019\n\
    \   16 |             return std::tolower(c) == std::tolower(max);\n      |   \
    \                                                    ^\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cctype:42,\n           \
    \      from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:35,\n\
    \                 from /tmp/tmpdehmcbs8.cpp:2:\n/usr/include/ctype.h:125:12: note:\
    \ candidate: \u2018int tolower(int)\u2019\n  125 | extern int tolower (int __c)\
    \ __THROW;\n      |            ^~~~~~~\n/usr/include/ctype.h:125:25: note:   no\
    \ known conversion for argument 1 from \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } to \u2018int\u2019\n  125 | extern int tolower (int __c) __THROW;\n      | \
    \                    ~~~~^~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_ios.h:37,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:44,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpdehmcbs8.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_facets.h:2649:5:\
    \ note: candidate: \u2018template<class _CharT> _CharT std::tolower(_CharT, const\
    \ std::locale&)\u2019\n 2649 |     tolower(_CharT __c, const locale& __loc)\n\
    \      |     ^~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_facets.h:2649:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpdehmcbs8.cpp:16:55:\
    \ note:   candidate expects 2 arguments, 1 provided\n   16 |             return\
    \ std::tolower(c"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    // Your code here\n    std::string max = \"\";\n    int maxCount\
    \ = 0;\n    for (auto &word : words) {\n        int count = 0;\n        for (auto\
    \ &c : word) {\n            count += 1;\n        }\n        if (count > maxCount)\
    \ {\n            max = word;\n            maxCount = count;\n        }\n    }\n\
    \    return max;\n}\nint main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmp8ob39i58: /tmp/tmp8ob39i58.cpp:29: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    // Your code here\n    std::string max = \"\";\n    int maxCount\
    \ = 0;\n    for (auto &word : words) {\n        int count = 0;\n        for (auto\
    \ &c : word) {\n            count += 1;\n        }\n        if (count > maxCount)\
    \ {\n            max = word;\n            maxCount = count;\n        }\n    }\n\
    \    return max;\n}\nint main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmp_phsen6_: /tmp/tmp_phsen6_.cpp:29: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    // Write your code here\n    std::string maxWord = \"\";\n   \
    \ int maxCount = 0;\n    for(auto &word : words) {\n        std::sort(word.begin(),\
    \ word.end());\n        std::set<char> chars;\n        for(auto &c : word) {\n\
    \            chars.insert(c);\n        }\n        auto count = chars.size();\n\
    \        if(count > maxCount) {\n            maxCount = count;\n            maxWord\
    \ = word;\n        }\n    }\n    return maxWord;\n}\nint main() {\n    auto candidate\
    \ = find_max;\n    assert(candidate((std::vector<std::string>({\"name\", \"of\"\
    , \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmpw5ecr0wp: /tmp/tmpw5ecr0wp.cpp:30: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    // Write your code here\n    std::string max = \"\";\n    int\
    \ maxCount = 0;\n    for (auto &word : words) {\n        int count = 0;\n    \
    \    for (auto &c : word) {\n            count += 1;\n        }\n        if (count\
    \ > maxCount) {\n            max = word;\n            maxCount = count;\n    \
    \    }\n    }\n    return max;\n}\nint main() {\n    auto candidate = find_max;\n\
    \    assert(candidate((std::vector<std::string>({\"name\", \"of\", \"string\"\
    }))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"name\"\
    , \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmpl6b7u4s3: /tmp/tmpl6b7u4s3.cpp:29: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    // Your code here\n    std::string max;\n    int maxCount = 0;\n\
    \    for (auto &word : words) {\n        int count = 0;\n        for (auto &c\
    \ : word) {\n            if (std::count(word.begin(), word.end(), c) > 0) {\n\
    \                count++;\n            }\n        }\n        if (count > maxCount)\
    \ {\n            max = word;\n            maxCount = count;\n        }\n    }\n\
    \    return max;\n}\nint main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmp29nzay6u: /tmp/tmp29nzay6u.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    // Write your code here\n    std::string max;\n    int maxCount\
    \ = 0;\n    for(auto &word: words){\n        int count = 0;\n        for(auto\
    \ &c: word){\n            if(c == 'a'){\n                count++;\n          \
    \  }\n        }\n        if(count > maxCount){\n            max = word;\n    \
    \        maxCount = count;\n        }\n    }\n    return max;\n}\nint main() {\n\
    \    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmpea13ncwo: /tmp/tmpea13ncwo.cpp:30: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    // Your code here\n    std::string max = \"\";\n    int maxCount\
    \ = 0;\n    for (auto &word : words) {\n        auto count = std::count(word.begin(),\
    \ word.end(), 'a');\n        if (count > maxCount) {\n            max = word;\n\
    \            maxCount = count;\n        }\n    }\n    return max;\n}\nint main()\
    \ {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmpfh0_ondg: /tmp/tmpfh0_ondg.cpp:25: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    std::string max;\n    int max_count = 0;\n    for (auto &word\
    \ : words) {\n        int count = 0;\n        for (auto &c : word) {\n       \
    \     count += 1;\n        }\n        if (count > max_count) {\n            max\
    \ = word;\n            max_count = count;\n        }\n    }\n    return max;\n\
    }\nint main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmposqmsb49: /tmp/tmposqmsb49.cpp:28: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    // Your code here\n    std::string max = \"\";\n    int maxCount\
    \ = 0;\n    for (auto &word : words) {\n        int count = 0;\n        for (auto\
    \ &c : word) {\n            if (std::count(max.begin(), max.end(), c) > 0) {\n\
    \                count++;\n            }\n        }\n        if (count > maxCount)\
    \ {\n            max = word;\n            maxCount = count;\n        }\n    }\n\
    \    return max;\n}\nint main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmpqs0urn5i: /tmp/tmpqs0urn5i.cpp:30: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    // Write your code here\n    std::string maxWord = \"\";\n   \
    \ int maxCount = 0;\n    for (auto &word : words) {\n        int count = 0;\n\
    \        for (auto &c : word) {\n            count += 1;\n        }\n        if\
    \ (count > maxCount) {\n            maxCount = count;\n            maxWord = word;\n\
    \        }\n    }\n    return maxWord;\n}\nint main() {\n    auto candidate =\
    \ find_max;\n    assert(candidate((std::vector<std::string>({\"name\", \"of\"\
    , \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmpdzu8s94h: /tmp/tmpdzu8s94h.cpp:29: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    // Write your code here\n    std::string max = \"\";\n    int\
    \ maxCount = 0;\n    for (auto &word : words) {\n        int count = 0;\n    \
    \    for (auto &c : word) {\n            count += 1;\n        }\n        if (count\
    \ > maxCount) {\n            max = word;\n            maxCount = count;\n    \
    \    }\n    }\n    return max;\n}\nint main() {\n    auto candidate = find_max;\n\
    \    assert(candidate((std::vector<std::string>({\"name\", \"of\", \"string\"\
    }))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"name\"\
    , \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmpo17sphc7: /tmp/tmpo17sphc7.cpp:29: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    // Write your code here\n    std::string max;\n    int maxCount\
    \ = 0;\n    for (auto &word : words) {\n        int count = 0;\n        for (auto\
    \ &c : word) {\n            if (std::count(word.begin(), word.end(), c) > 0) {\n\
    \                count++;\n            }\n        }\n        if (count > maxCount)\
    \ {\n            max = word;\n            maxCount = count;\n        }\n    }\n\
    \    return max;\n}\nint main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmpmeb50kdv: /tmp/tmpmeb50kdv.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    // code here\n    std::string max;\n    int maxCount = 0;\n  \
    \  for (auto &word : words) {\n        int count = 0;\n        for (auto &c :\
    \ word) {\n            count += 1;\n        }\n        if (count > maxCount) {\n\
    \            max = word;\n            maxCount = count;\n        }\n    }\n  \
    \  return max;\n}\nint main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmpu9l3atgm: /tmp/tmpu9l3atgm.cpp:29: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    int n = words.size();\n    int max_count = 0;\n    std::string\
    \ max_word = \"\";\n    for (int i = 0; i < n; i++) {\n        int count = 0;\n\
    \        for (int j = 0; j < n; j++) {\n            if (words[j] == words[i])\
    \ {\n                count++;\n            }\n        }\n        if (count > max_count)\
    \ {\n            max_count = count;\n            max_word = words[i];\n      \
    \  }\n    }\n    return max_word;\n}\nint main() {\n    auto candidate = find_max;\n\
    \    assert(candidate((std::vector<std::string>({\"name\", \"of\", \"string\"\
    }))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"name\"\
    , \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmpu2xpw1ji: /tmp/tmpu2xpw1ji.cpp:30: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    // Write your code here\n    std::string max = \"\";\n    int\
    \ maxCount = 0;\n    for (auto word : words) {\n        auto count = std::count(word.begin(),\
    \ word.end(), 'a');\n        if (count > maxCount) {\n            max = word;\n\
    \            maxCount = count;\n        }\n    }\n    return max;\n}\nint main()\
    \ {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmp00w1el58: /tmp/tmp00w1el58.cpp:25: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    std::string max = \"\";\n    int maxCount = 0;\n    for (auto\
    \ word : words) {\n        int count = 0;\n        for (auto c : word) {\n   \
    \         count += (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u');\n\
    \        }\n        if (count > maxCount) {\n            max = word;\n       \
    \     maxCount = count;\n        }\n    }\n    return max;\n}\nint main() {\n\
    \    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmp1hvygx_2: /tmp/tmp1hvygx_2.cpp:27: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    std::string max;\n    int maxCount = 0;\n    for (auto &word :\
    \ words) {\n        int count = 0;\n        for (auto &c : word) {\n         \
    \   count += 1;\n        }\n        if (count > maxCount) {\n            max =\
    \ word;\n            maxCount = count;\n        }\n    }\n    return max;\n}\n\
    int main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmp07vbkg0o: /tmp/tmp07vbkg0o.cpp:28: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    std::string max = \"\";\n    int max_count = 0;\n    for (auto\
    \ &word : words) {\n        auto count = std::count(word.begin(), word.end(),\
    \ 'a');\n        if (count > max_count) {\n            max_count = count;\n  \
    \          max = word;\n        }\n    }\n    return max;\n}\nint main() {\n \
    \   auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmpgmi6i5ek: /tmp/tmpgmi6i5ek.cpp:24: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    std::string max = \"\";\n    int max_count = 0;\n    for (auto\
    \ &word : words) {\n        auto count = std::count(word.begin(), word.end(),\
    \ 'a');\n        if (count > max_count) {\n            max = word;\n         \
    \   max_count = count;\n        }\n    }\n    return max;\n}\nint main() {\n \
    \   auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmp4fn54z_i: /tmp/tmp4fn54z_i.cpp:24: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    // Your code here\n    std::string max = \"\";\n    int maxCount\
    \ = 0;\n    for (auto &w : words) {\n        int count = 0;\n        for (auto\
    \ &c : w) {\n            count += 1;\n        }\n        if (count > maxCount)\
    \ {\n            max = w;\n            maxCount = count;\n        }\n    }\n \
    \   return max;\n}\nint main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmpn61bqll6: /tmp/tmpn61bqll6.cpp:29: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    int max = 0;\n    std::string maxWord = \"\";\n    for (auto &word\
    \ : words) {\n        auto count = std::count(word.begin(), word.end(), 'a');\n\
    \        if (count > max) {\n            max = count;\n            maxWord = word;\n\
    \        }\n    }\n    return maxWord;\n}\nint main() {\n    auto candidate =\
    \ find_max;\n    assert(candidate((std::vector<std::string>({\"name\", \"of\"\
    , \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmp3i2i7jdd: /tmp/tmp3i2i7jdd.cpp:24: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    // Write your code here\n    std::string max;\n    int maxCount\
    \ = 0;\n    for(auto &word: words) {\n        int count = 0;\n        for(auto\
    \ &c: word) {\n            count += 1;\n        }\n        if(count > maxCount)\
    \ {\n            max = word;\n            maxCount = count;\n        }\n    }\n\
    \    return max;\n}\nint main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmp2qwoz3ik: /tmp/tmp2qwoz3ik.cpp:29: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    std::string max = \"\";\n    int maxCount = 0;\n    for (auto\
    \ &word : words) {\n        int count = std::count(word.begin(), word.end(), 'a');\n\
    \        if (count > maxCount) {\n            max = word;\n            maxCount\
    \ = count;\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate\
    \ = find_max;\n    assert(candidate((std::vector<std::string>({\"name\", \"of\"\
    , \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmpqato7dot: /tmp/tmpqato7dot.cpp:24: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    // Write your code here\n    std::string max = \"\";\n    int\
    \ maxCount = 0;\n    for (auto &word : words) {\n        int count = 0;\n    \
    \    for (auto &c : word) {\n            count += 1;\n        }\n        if (count\
    \ > maxCount) {\n            max = word;\n            maxCount = count;\n    \
    \    }\n    }\n    return max;\n}\nint main() {\n    auto candidate = find_max;\n\
    \    assert(candidate((std::vector<std::string>({\"name\", \"of\", \"string\"\
    }))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"name\"\
    , \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmpfcxndlal: /tmp/tmpfcxndlal.cpp:29: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    // Your code here\n    std::string max = \"\";\n    int maxCount\
    \ = 0;\n    for (auto &word : words) {\n        int count = 0;\n        for (auto\
    \ &c : word) {\n            count += 1;\n        }\n        if (count > maxCount)\
    \ {\n            max = word;\n            maxCount = count;\n        }\n    }\n\
    \    return max;\n}\nint main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmpbuc12vux: /tmp/tmpbuc12vux.cpp:29: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    // Your code here\n    std::string max = \"\";\n    int maxCount\
    \ = 0;\n    for (auto &word : words) {\n        int count = 0;\n        for (auto\
    \ &c : word) {\n            count += 1;\n        }\n        if (count > maxCount)\
    \ {\n            max = word;\n            maxCount = count;\n        }\n    }\n\
    \    return max;\n}\nint main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmpgfk9a9c5: /tmp/tmpgfk9a9c5.cpp:29: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    std::string max = \"\";\n    int maxCount = 0;\n    for (auto\
    \ &word : words) {\n        int count = 0;\n        for (auto &c : word) {\n \
    \           count += (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u');\n\
    \        }\n        if (count > maxCount) {\n            max = word;\n       \
    \     maxCount = count;\n        }\n    }\n    return max;\n}\nint main() {\n\
    \    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmpjl6_dntb: /tmp/tmpjl6_dntb.cpp:27: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    // Your code here\n    std::string max = \"\";\n    int maxCount\
    \ = 0;\n    for (auto &word : words) {\n        int count = 0;\n        for (auto\
    \ &c : word) {\n            if (std::count(word.begin(), word.end(), c) > 0) {\n\
    \                count++;\n            }\n        }\n        if (count > maxCount)\
    \ {\n            max = word;\n            maxCount = count;\n        }\n    }\n\
    \    return max;\n}\nint main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmp0sy92ure: /tmp/tmp0sy92ure.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    std::string max = \"\";\n    int max_count = 0;\n    for (auto\
    \ &word : words) {\n        int count = 0;\n        for (auto &c : word) {\n \
    \           if (std::count(max.begin(), max.end(), c) > 0) {\n               \
    \ count++;\n            }\n        }\n        if (count > max_count) {\n     \
    \       max = word;\n            max_count = count;\n        }\n    }\n    return\
    \ max;\n}\nint main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmpimhlh8nx: /tmp/tmpimhlh8nx.cpp:29: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    // Your code here\n    std::string max = \"\";\n    int maxCount\
    \ = 0;\n    for (auto &w : words) {\n        int count = 0;\n        for (auto\
    \ &c : w) {\n            count += 1;\n        }\n        if (count > maxCount)\
    \ {\n            max = w;\n            maxCount = count;\n        }\n    }\n \
    \   return max;\n}\nint main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmpe_go_rq1: /tmp/tmpe_go_rq1.cpp:29: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    std::string max = \"\";\n    int max_count = 0;\n    for (auto\
    \ &w : words) {\n        auto count = std::count(w.begin(), w.end(), 'a');\n \
    \       if (count > max_count) {\n            max = w;\n            max_count\
    \ = count;\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate\
    \ = find_max;\n    assert(candidate((std::vector<std::string>({\"name\", \"of\"\
    , \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmpv0asuy6r: /tmp/tmpv0asuy6r.cpp:24: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    // Write your code here\n    std::string max = \"\";\n    int\
    \ maxCount = 0;\n    for (auto &word : words) {\n        auto count = std::count(word.begin(),\
    \ word.end(), 'a');\n        if (count > maxCount) {\n            max = word;\n\
    \            maxCount = count;\n        }\n    }\n    return max;\n}\nint main()\
    \ {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmpjry__7wz: /tmp/tmpjry__7wz.cpp:25: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    // Your code here\n    std::string max;\n    int maxCount = 0;\n\
    \    for (auto &w : words) {\n        int count = 0;\n        for (auto &c : w)\
    \ {\n            if (std::count(w.begin(), w.end(), c) > 0) {\n              \
    \  count++;\n            }\n        }\n        if (count > maxCount) {\n     \
    \       max = w;\n            maxCount = count;\n        }\n    }\n    return\
    \ max;\n}\nint main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmpcuocrsaa: /tmp/tmpcuocrsaa.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    std::string max = \"\";\n    int max_count = 0;\n    for (auto\
    \ &word : words) {\n        int count = 0;\n        for (auto &c : word) {\n \
    \           if (std::count(max.begin(), max.end(), c) > 0) {\n               \
    \ count++;\n            }\n        }\n        if (count > max_count) {\n     \
    \       max_count = count;\n            max = word;\n        }\n    }\n    return\
    \ max;\n}\nint main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmp_rha3n9h: /tmp/tmp_rha3n9h.cpp:29: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    // Write your code here\n    std::string maxWord = \"\";\n   \
    \ int maxCount = 0;\n    for (auto &word : words) {\n        int count = 0;\n\
    \        for (auto &c : word) {\n            count += 1;\n        }\n        if\
    \ (count > maxCount) {\n            maxCount = count;\n            maxWord = word;\n\
    \        }\n    }\n    return maxWord;\n}\nint main() {\n    auto candidate =\
    \ find_max;\n    assert(candidate((std::vector<std::string>({\"name\", \"of\"\
    , \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmp685l2fk2: /tmp/tmp685l2fk2.cpp:29: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    // Write your code here\n    std::string max = \"\";\n    int\
    \ maxCount = 0;\n    for (auto &word : words) {\n        int count = 0;\n    \
    \    for (auto &c : word) {\n            if (std::count(word.begin(), word.end(),\
    \ c) > 0) {\n                count++;\n            }\n        }\n        if (count\
    \ > maxCount) {\n            max = word;\n            maxCount = count;\n    \
    \    }\n    }\n    return max;\n}\nint main() {\n    auto candidate = find_max;\n\
    \    assert(candidate((std::vector<std::string>({\"name\", \"of\", \"string\"\
    }))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"name\"\
    , \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmpnahvgyvf: /tmp/tmpnahvgyvf.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    // Write your code here\n    std::string max = \"\";\n    int\
    \ maxCount = 0;\n    for (auto &word : words) {\n        int count = 0;\n    \
    \    for (auto &c : word) {\n            if (std::count(max.begin(), max.end(),\
    \ c) > 0) {\n                count++;\n            }\n        }\n        if (count\
    \ > maxCount) {\n            max = word;\n            maxCount = count;\n    \
    \    }\n    }\n    return max;\n}\nint main() {\n    auto candidate = find_max;\n\
    \    assert(candidate((std::vector<std::string>({\"name\", \"of\", \"string\"\
    }))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"name\"\
    , \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmpf2gkv271: /tmp/tmpf2gkv271.cpp:30: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    // Your code here\n    std::string max = \"\";\n    int max_count\
    \ = 0;\n    for (auto &word : words) {\n        int count = 0;\n        for (auto\
    \ &c : word) {\n            count += 1;\n        }\n        if (count > max_count)\
    \ {\n            max_count = count;\n            max = word;\n        }\n    }\n\
    \    return max;\n}\nint main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmpjvv839rd: /tmp/tmpjvv839rd.cpp:29: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    int max = 0;\n    std::string maxWord = \"\";\n    for (auto &word\
    \ : words) {\n        int uniqueChar = std::count(word.begin(), word.end(), 'a');\n\
    \        if (uniqueChar > max) {\n            max = uniqueChar;\n            maxWord\
    \ = word;\n        }\n    }\n    return maxWord;\n}\nint main() {\n    auto candidate\
    \ = find_max;\n    assert(candidate((std::vector<std::string>({\"name\", \"of\"\
    , \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmp20psxgiu: /tmp/tmp20psxgiu.cpp:24: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    std::string max = \"\";\n    int max_count = 0;\n    for (auto\
    \ &w : words) {\n        int count = 0;\n        for (auto &c : w) {\n       \
    \     count += (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u');\n \
    \       }\n        if (count > max_count) {\n            max = w;\n          \
    \  max_count = count;\n        }\n    }\n    return max;\n}\nint main() {\n  \
    \  auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmpgf2hehb4: /tmp/tmpgf2hehb4.cpp:27: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    std::string max;\n    int max_count = 0;\n    for (auto &word\
    \ : words) {\n        int count = 0;\n        for (auto &c : word) {\n       \
    \     count += 1;\n        }\n        if (count > max_count) {\n            max\
    \ = word;\n            max_count = count;\n        }\n    }\n    return max;\n\
    }\nint main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmptmj294c1: /tmp/tmptmj294c1.cpp:28: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    // Your code here\n    std::string max;\n    int maxCount = 0;\n\
    \    for (auto &word : words) {\n        int count = 0;\n        for (auto &c\
    \ : word) {\n            if (std::count(word.begin(), word.end(), c) > 0) {\n\
    \                count++;\n            }\n        }\n        if (count > maxCount)\
    \ {\n            max = word;\n            maxCount = count;\n        }\n    }\n\
    \    return max;\n}\nint main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmpuuq5ce06: /tmp/tmpuuq5ce06.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    // Write your code here\n    std::string max;\n    int maxCount\
    \ = 0;\n    for (auto word : words) {\n        auto count = std::count(word.begin(),\
    \ word.end(), 'a');\n        if (count > maxCount) {\n            max = word;\n\
    \            maxCount = count;\n        }\n    }\n    return max;\n}\nint main()\
    \ {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmpgdp7xzxk: /tmp/tmpgdp7xzxk.cpp:25: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    std::string max = \"\";\n    int max_count = 0;\n    for (auto\
    \ &word : words) {\n        int count = 0;\n        for (auto &c : word) {\n \
    \           count += 1;\n        }\n        if (count > max_count) {\n       \
    \     max = word;\n            max_count = count;\n        }\n    }\n    return\
    \ max;\n}\nint main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmprtvr2p5_: /tmp/tmprtvr2p5_.cpp:28: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    // Write your code here\n    std::string maxWord = \"\";\n   \
    \ int maxCount = 0;\n    for (auto word : words) {\n        int count = 0;\n \
    \       for (auto c : word) {\n            count += (c == 'a' || c == 'e' || c\
    \ == 'i' || c == 'o' || c == 'u');\n        }\n        if (count > maxCount) {\n\
    \            maxCount = count;\n            maxWord = word;\n        }\n    }\n\
    \    return maxWord;\n}\nint main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmp8swm554d: /tmp/tmp8swm554d.cpp:28: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    std::string maxWord = \"\";\n    int maxCount = 0;\n    for (auto\
    \ &word : words) {\n        int count = 0;\n        for (auto &c : word) {\n \
    \           count += (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u');\n\
    \        }\n        if (count > maxCount) {\n            maxCount = count;\n \
    \           maxWord = word;\n        }\n    }\n    return maxWord;\n}\nint main()\
    \ {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmpibd1x8_g: /tmp/tmpibd1x8_g.cpp:27: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    // Your code here\n    std::string maxWord = \"\";\n    int maxCount\
    \ = 0;\n    for (auto word : words) {\n        int count = 0;\n        for (auto\
    \ c : word) {\n            if (std::count(word.begin(), word.end(), c) > 0) {\n\
    \                count++;\n            }\n        }\n        if (count > maxCount)\
    \ {\n            maxCount = count;\n            maxWord = word;\n        }\n \
    \   }\n    return maxWord;\n}\nint main() {\n    auto candidate = find_max;\n\
    \    assert(candidate((std::vector<std::string>({\"name\", \"of\", \"string\"\
    }))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"name\"\
    , \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmpvaap3wq0: /tmp/tmpvaap3wq0.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    std::string max = \"\";\n    int max_count = 0;\n    for (auto\
    \ &w : words) {\n        int count = 0;\n        for (auto &c : w) {\n       \
    \     if (std::count(w.begin(), w.end(), c) > count) {\n                count\
    \ = std::count(w.begin(), w.end(), c);\n            }\n        }\n        if (count\
    \ > max_count) {\n            max_count = count;\n            max = w;\n     \
    \   }\n    }\n    return max;\n}\nint main() {\n    auto candidate = find_max;\n\
    \    assert(candidate((std::vector<std::string>({\"name\", \"of\", \"string\"\
    }))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"name\"\
    , \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmpqwqyf_1z: /tmp/tmpqwqyf_1z.cpp:29: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    // Write your code here\n    std::string max = \"\";\n    int\
    \ maxCount = 0;\n    for (auto word : words) {\n        int count = 0;\n     \
    \   for (auto c : word) {\n            count += 1;\n        }\n        if (count\
    \ > maxCount) {\n            max = word;\n            maxCount = count;\n    \
    \    }\n    }\n    return max;\n}\nint main() {\n    auto candidate = find_max;\n\
    \    assert(candidate((std::vector<std::string>({\"name\", \"of\", \"string\"\
    }))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"name\"\
    , \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmpegs76pnf: /tmp/tmpegs76pnf.cpp:29: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    // Your code here\n    std::string max = \"\";\n    int maxCount\
    \ = 0;\n    for (auto &word : words) {\n        int count = 0;\n        for (auto\
    \ &c : word) {\n            count += 1;\n        }\n        if (count > maxCount)\
    \ {\n            max = word;\n            maxCount = count;\n        }\n    }\n\
    \    return max;\n}\nint main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmp35iv8jkd: /tmp/tmp35iv8jkd.cpp:29: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    // Your code here\n    std::string maxWord = \"\";\n    int maxCount\
    \ = 0;\n    for (auto word : words) {\n        int count = 0;\n        for (auto\
    \ c : word) {\n            if (std::count(word.begin(), word.end(), c) > 0) {\n\
    \                count++;\n            }\n        }\n        if (count > maxCount)\
    \ {\n            maxCount = count;\n            maxWord = word;\n        }\n \
    \   }\n    return maxWord;\n}\nint main() {\n    auto candidate = find_max;\n\
    \    assert(candidate((std::vector<std::string>({\"name\", \"of\", \"string\"\
    }))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"name\"\
    , \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmp409loulf: /tmp/tmp409loulf.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    // Your code here\n    std::string max = \"\";\n    int maxCount\
    \ = 0;\n    for (auto &word : words) {\n        int count = 0;\n        for (auto\
    \ &c : word) {\n            count += 1;\n        }\n        if (count > maxCount)\
    \ {\n            max = word;\n            maxCount = count;\n        }\n    }\n\
    \    return max;\n}\nint main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmpsnscozva: /tmp/tmpsnscozva.cpp:29: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    // Your code here\n    std::string max = \"\";\n    int maxCount\
    \ = 0;\n    for (auto word : words) {\n        auto count = std::count(word.begin(),\
    \ word.end(), 'a');\n        if (count > maxCount) {\n            max = word;\n\
    \            maxCount = count;\n        }\n    }\n    return max;\n}\nint main()\
    \ {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmpp17dp2l2: /tmp/tmpp17dp2l2.cpp:25: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    // Your code here\n    std::string max = \"\";\n    int maxCount\
    \ = 0;\n    for (auto word : words) {\n        auto count = std::count_if(words.begin(),\
    \ words.end(), [&](std::string s) {\n            return s.find(word) != std::string::npos;\n\
    \        });\n        if (count > maxCount) {\n            max = word;\n     \
    \       maxCount = count;\n        }\n    }\n    return max;\n}\nint main() {\n\
    \    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmpeiywlr2k: /tmp/tmpeiywlr2k.cpp:27: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    std::string max = \"\";\n    int max_count = 0;\n    for (auto\
    \ &word : words) {\n        auto count = std::count(word.begin(), word.end(),\
    \ 'a');\n        if (count > max_count) {\n            max = word;\n         \
    \   max_count = count;\n        }\n    }\n    return max;\n}\nint main() {\n \
    \   auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmpoj6sz493: /tmp/tmpoj6sz493.cpp:24: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    std::string max = \"\";\n    int maxCount = 0;\n    for (auto\
    \ word : words) {\n        int count = 0;\n        for (auto c : word) {\n   \
    \         if (std::count(max.begin(), max.end(), c) > 0) {\n                count++;\n\
    \            }\n        }\n        if (count > maxCount) {\n            max =\
    \ word;\n            maxCount = count;\n        }\n    }\n    return max;\n}\n\
    int main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmpoxqs5igy: /tmp/tmpoxqs5igy.cpp:29: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    // Your code here\n    std::string maxWord = \"\";\n    int maxCount\
    \ = 0;\n    for (auto &word : words) {\n        int count = 0;\n        for (auto\
    \ &c : word) {\n            count += 1;\n        }\n        if (count > maxCount)\
    \ {\n            maxCount = count;\n            maxWord = word;\n        }\n \
    \   }\n    return maxWord;\n}\nint main() {\n    auto candidate = find_max;\n\
    \    assert(candidate((std::vector<std::string>({\"name\", \"of\", \"string\"\
    }))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"name\"\
    , \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmpljoe_pgd: /tmp/tmpljoe_pgd.cpp:29: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    int max_count = 0;\n    std::string max_word = \"\";\n    for\
    \ (auto &word : words) {\n        int count = std::count(word.begin(), word.end(),\
    \ 'a');\n        if (count > max_count) {\n            max_count = count;\n  \
    \          max_word = word;\n        }\n    }\n    return max_word;\n}\nint main()\
    \ {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmpxrl0w0vg: /tmp/tmpxrl0w0vg.cpp:24: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    // Write your code here\n    std::string max = \"\";\n    int\
    \ max_count = 0;\n    for (auto &i : words) {\n        int count = 0;\n      \
    \  for (auto &j : words) {\n            if (i == j) {\n                continue;\n\
    \            }\n            count += 1;\n        }\n        if (count > max_count)\
    \ {\n            max = i;\n            max_count = count;\n        }\n    }\n\
    \    return max;\n}\nint main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmp226jdm8_: /tmp/tmp226jdm8_.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    // Your code here\n    std::string max = \"\";\n    int maxCount\
    \ = 0;\n    for (auto &word : words) {\n        int count = 0;\n        for (auto\
    \ &c : word) {\n            if (std::count(max.begin(), max.end(), c) > 0) {\n\
    \                count++;\n            }\n        }\n        if (count > maxCount)\
    \ {\n            max = word;\n            maxCount = count;\n        }\n    }\n\
    \    return max;\n}\nint main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmp9o39evi7: /tmp/tmp9o39evi7.cpp:30: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    // Your code here\n    std::string max = \"\";\n    int maxCount\
    \ = 0;\n    for (auto &word : words) {\n        int count = 0;\n        for (auto\
    \ &c : word) {\n            count += 1;\n        }\n        if (count > maxCount)\
    \ {\n            max = word;\n            maxCount = count;\n        }\n    }\n\
    \    return max;\n}\nint main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmp_3aw6dfa: /tmp/tmp_3aw6dfa.cpp:29: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    // Your code here\n    std::string max = \"\";\n    int maxCount\
    \ = 0;\n    for (auto &word : words) {\n        int count = 0;\n        for (auto\
    \ &c : word) {\n            count += 1;\n        }\n        if (count > maxCount)\
    \ {\n            max = word;\n            maxCount = count;\n        }\n    }\n\
    \    return max;\n}\nint main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmp54t008n_: /tmp/tmp54t008n_.cpp:29: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    // Write your code here\n    std::string max = \"\";\n    int\
    \ maxCount = 0;\n    for (auto &word : words) {\n        int count = 0;\n    \
    \    for (auto &c : word) {\n            count += 1;\n        }\n        if (count\
    \ > maxCount) {\n            max = word;\n            maxCount = count;\n    \
    \    }\n    }\n    return max;\n}\nint main() {\n    auto candidate = find_max;\n\
    \    assert(candidate((std::vector<std::string>({\"name\", \"of\", \"string\"\
    }))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"name\"\
    , \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmpitrdy90e: /tmp/tmpitrdy90e.cpp:29: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    // Write your code here\n    std::string max = \"\";\n    int\
    \ maxCount = 0;\n    for (auto &word : words) {\n        int count = 0;\n    \
    \    for (auto &c : word) {\n            count += 1;\n        }\n        if (count\
    \ > maxCount) {\n            max = word;\n            maxCount = count;\n    \
    \    }\n    }\n    return max;\n}\nint main() {\n    auto candidate = find_max;\n\
    \    assert(candidate((std::vector<std::string>({\"name\", \"of\", \"string\"\
    }))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"name\"\
    , \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmpaejtpdk4: /tmp/tmpaejtpdk4.cpp:29: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    // Write your code here\n    std::string max;\n    int maxCount\
    \ = 0;\n    for(auto &word: words){\n        for(auto &c: word){\n           \
    \ if(c == max){\n                maxCount++;\n            }\n        }\n     \
    \   if(maxCount > 0){\n            max = word;\n            maxCount = 1;\n  \
    \      }\n        else{\n            maxCount = 0;\n        }\n    }\n    return\
    \ max;\n}\nint main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpgk0kmpdn.cpp: In function \u2018std::string find_max(std::vector<std::__cxx11::basic_string<char>\
    \ >)\u2019:\n/tmp/tmpgk0kmpdn.cpp:16:18: error: no match for \u2018operator==\u2019\
    \ (operand types are \u2018char\u2019 and \u2018std::string\u2019 {aka \u2018\
    std::__cxx11::basic_string<char>\u2019})\n   16 |             if(c == max){\n\
    \      |                ~ ^~ ~~~\n      |                |    |\n      |     \
    \           char std::string {aka std::__cxx11::basic_string<char>}\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n       \
    \          from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpgk0kmpdn.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1026 |     operator==(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1026:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpgk0kmpdn.cpp:16:21:\
    \ note:   mismatched types \u2018const std::__cxx11::sub_match<_BiIter>\u2019\
    \ and \u2018char\u2019\n   16 |             if(c == max){\n      |           \
    \          ^~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpgk0kmpdn.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1099:5:\
    \ note: candidate: \u2018template<class _Bi_iter, class _Ch_traits, class _Ch_alloc>\
    \ bool std::__cxx11::operator==(std::__cxx11::__sub_match_string<_Bi_iter, _Ch_traits,\
    \ _Ch_alloc>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\n 1099 |     operator==(const\
    \ __sub_match_string<_Bi_iter, _Ch_traits, _Ch_alloc>& __lhs,\n      |     ^~~~~~~~\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1099:5: note:\
    \   template argu"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    // Your code here\n    std::string maxWord = \"\";\n    int maxCount\
    \ = 0;\n    for (auto word : words) {\n        int count = 0;\n        for (auto\
    \ c : word) {\n            count += 1;\n        }\n        if (count > maxCount)\
    \ {\n            maxCount = count;\n            maxWord = word;\n        }\n \
    \   }\n    return maxWord;\n}\nint main() {\n    auto candidate = find_max;\n\
    \    assert(candidate((std::vector<std::string>({\"name\", \"of\", \"string\"\
    }))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"name\"\
    , \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmpfhsye7nb: /tmp/tmpfhsye7nb.cpp:29: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    // Your code here\n    std::string max = \"\";\n    int maxCount\
    \ = 0;\n    for (auto &i : words) {\n        int count = 0;\n        for (auto\
    \ &j : words) {\n            if (i == j) {\n                continue;\n      \
    \      }\n            count += 1;\n        }\n        if (count > maxCount) {\n\
    \            max = i;\n            maxCount = count;\n        }\n    }\n    return\
    \ max;\n}\nint main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmp1y3ymeos: /tmp/tmp1y3ymeos.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    std::string max = \"\";\n    int maxCount = 0;\n    for (auto\
    \ word : words) {\n        int count = std::count(word.begin(), word.end(), 'a');\n\
    \        if (count > maxCount) {\n            max = word;\n            maxCount\
    \ = count;\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate\
    \ = find_max;\n    assert(candidate((std::vector<std::string>({\"name\", \"of\"\
    , \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmpbhotvxsk: /tmp/tmpbhotvxsk.cpp:24: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    std::string max = \"\";\n    int max_count = 0;\n    for (auto\
    \ &w : words) {\n        int count = 0;\n        for (auto &c : w) {\n       \
    \     if (std::count(w.begin(), w.end(), c) > count) {\n                count\
    \ = std::count(w.begin(), w.end(), c);\n            }\n        }\n        if (count\
    \ > max_count) {\n            max_count = count;\n            max = w;\n     \
    \   }\n    }\n    return max;\n}\nint main() {\n    auto candidate = find_max;\n\
    \    assert(candidate((std::vector<std::string>({\"name\", \"of\", \"string\"\
    }))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"name\"\
    , \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmpfeeua1oi: /tmp/tmpfeeua1oi.cpp:29: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    // Write your code here\n    std::string max = \"\";\n    int\
    \ max_count = 0;\n    for (auto &x : words) {\n        auto count = std::count(x.begin(),\
    \ x.end(), 'a');\n        if (count > max_count) {\n            max = x;\n   \
    \         max_count = count;\n        }\n    }\n    return max;\n}\nint main()\
    \ {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmp5st8uln4: /tmp/tmp5st8uln4.cpp:25: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    // Your code here\n    std::string max;\n    int maxCount = 0;\n\
    \    for (auto &word : words) {\n        int count = 0;\n        for (auto &c\
    \ : word) {\n            count += 1;\n        }\n        if (count > maxCount)\
    \ {\n            max = word;\n            maxCount = count;\n        }\n    }\n\
    \    return max;\n}\nint main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmphz7el3zw: /tmp/tmphz7el3zw.cpp:29: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    // Your code here\n    std::string max;\n    int maxCount = 0;\n\
    \    for (auto &word : words) {\n        int count = 0;\n        for (auto &c\
    \ : word) {\n            count += 1;\n        }\n        if (count > maxCount)\
    \ {\n            max = word;\n            maxCount = count;\n        }\n    }\n\
    \    return max;\n}\nint main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmp2_6kguh2: /tmp/tmp2_6kguh2.cpp:29: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    // Your code here\n    std::string max = \"\";\n    int maxCount\
    \ = 0;\n    for (auto &word : words) {\n        int count = 0;\n        for (auto\
    \ &c : word) {\n            count += 1;\n        }\n        if (count > maxCount)\
    \ {\n            max = word;\n            maxCount = count;\n        }\n    }\n\
    \    return max;\n}\nint main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmp7irfb3i5: /tmp/tmp7irfb3i5.cpp:29: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    // code here\n    std::string max = \"\";\n    int max_count =\
    \ 0;\n    for (auto &word : words) {\n        int count = 0;\n        for (auto\
    \ &c : word) {\n            count += 1;\n        }\n        if (count > max_count)\
    \ {\n            max = word;\n            max_count = count;\n        }\n    }\n\
    \    return max;\n}\nint main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmphypexpo0: /tmp/tmphypexpo0.cpp:29: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    std::string max = \"\";\n    int max_count = 0;\n    for (auto\
    \ &word : words) {\n        int count = 0;\n        for (auto &c : word) {\n \
    \           count += 1;\n        }\n        if (count > max_count) {\n       \
    \     max = word;\n            max_count = count;\n        }\n    }\n    return\
    \ max;\n}\nint main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmpent65o18: /tmp/tmpent65o18.cpp:28: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    // Your code here\n    std::string max;\n    int maxCount = 0;\n\
    \    for (auto &word: words) {\n        int count = 0;\n        for (auto &c:\
    \ word) {\n            count += 1;\n        }\n        if (count > maxCount) {\n\
    \            max = word;\n            maxCount = count;\n        }\n    }\n  \
    \  return max;\n}\nint main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmp6b7cwig1: /tmp/tmp6b7cwig1.cpp:29: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    std::string max = \"\";\n    int max_count = 0;\n    for (auto\
    \ &word : words) {\n        auto count = std::count(word.begin(), word.end(),\
    \ 'a');\n        if (count > max_count) {\n            max_count = count;\n  \
    \          max = word;\n        }\n    }\n    return max;\n}\nint main() {\n \
    \   auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmps612xibu: /tmp/tmps612xibu.cpp:24: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    std::string max = \"\";\n    int max_count = 0;\n    for (auto\
    \ &word : words) {\n        auto count = std::count(word.begin(), word.end(),\
    \ 'a');\n        if (count > max_count) {\n            max = word;\n         \
    \   max_count = count;\n        }\n    }\n    return max;\n}\nint main() {\n \
    \   auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmp_nydb8d_: /tmp/tmp_nydb8d_.cpp:24: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    // Write your code here\n    std::string max = \"\";\n    int\
    \ maxCount = 0;\n    for (auto &word : words) {\n        int count = 0;\n    \
    \    for (auto &c : word) {\n            if (std::count(max.begin(), max.end(),\
    \ c) > 0) {\n                count++;\n            }\n        }\n        if (count\
    \ > maxCount) {\n            max = word;\n            maxCount = count;\n    \
    \    }\n    }\n    return max;\n}\nint main() {\n    auto candidate = find_max;\n\
    \    assert(candidate((std::vector<std::string>({\"name\", \"of\", \"string\"\
    }))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"name\"\
    , \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmpjzy3isc_: /tmp/tmpjzy3isc_.cpp:30: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    // Write your code here\n    std::string max;\n    std::string\
    \ temp;\n    int count = 0;\n    for (auto &word : words) {\n        std::sort(word.begin(),\
    \ word.end());\n        temp = word;\n        for (auto &c : word) {\n       \
    \     if (std::count(temp.begin(), temp.end(), c) > count) {\n               \
    \ max = temp;\n                count = std::count(temp.begin(), temp.end(), c);\n\
    \            }\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate\
    \ = find_max;\n    assert(candidate((std::vector<std::string>({\"name\", \"of\"\
    , \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmpvi7vgn7h: /tmp/tmpvi7vgn7h.cpp:29: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    // Write your code here\n    std::string max = \"\";\n    int\
    \ maxCount = 0;\n    for (auto &word : words) {\n        int count = 0;\n    \
    \    for (auto &c : word) {\n            if (std::count(word.begin(), word.end(),\
    \ c) > 0) {\n                count++;\n            }\n        }\n        if (count\
    \ > maxCount) {\n            max = word;\n            maxCount = count;\n    \
    \    }\n    }\n    return max;\n}\nint main() {\n    auto candidate = find_max;\n\
    \    assert(candidate((std::vector<std::string>({\"name\", \"of\", \"string\"\
    }))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"name\"\
    , \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmpc7nwajol: /tmp/tmpc7nwajol.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    std::string max = \"\";\n    int max_count = 0;\n    for (auto\
    \ &word : words) {\n        int count = 0;\n        for (auto &c : word) {\n \
    \           count += 1;\n        }\n        if (count > max_count) {\n       \
    \     max = word;\n            max_count = count;\n        }\n    }\n    return\
    \ max;\n}\nint main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmpgat6qaz_: /tmp/tmpgat6qaz_.cpp:28: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    // Write your code here\n    std::string max;\n    int maxCount\
    \ = 0;\n    for (auto &w : words) {\n        int count = 0;\n        for (auto\
    \ &c : w) {\n            count += 1;\n        }\n        if (count > maxCount)\
    \ {\n            max = w;\n            maxCount = count;\n        }\n    }\n \
    \   return max;\n}\nint main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmpfoenhu6_: /tmp/tmpfoenhu6_.cpp:29: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    // Write your code here\n    std::string max = \"\";\n    int\
    \ maxCount = 0;\n    for (auto &word : words) {\n        int count = 0;\n    \
    \    for (auto &c : word) {\n            count += (c == 'a' || c == 'e' || c ==\
    \ 'i' || c == 'o' || c == 'u');\n        }\n        if (count > maxCount) {\n\
    \            max = word;\n            maxCount = count;\n        }\n    }\n  \
    \  return max;\n}\nint main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmp1t281c3h: /tmp/tmp1t281c3h.cpp:28: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    std::string max = \"\";\n    int max_count = 0;\n    for (auto\
    \ &word : words) {\n        auto count = std::count_if(word.begin(), word.end(),\
    \ [&](char c) {\n            return std::tolower(c) != 'a';\n        });\n   \
    \     if (count > max_count) {\n            max = word;\n            max_count\
    \ = count;\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate\
    \ = find_max;\n    assert(candidate((std::vector<std::string>({\"name\", \"of\"\
    , \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmplttqeipf: /tmp/tmplttqeipf.cpp:27: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    int n = words.size();\n    int max = 0;\n    std::string maxWord\
    \ = \"\";\n    for (int i = 0; i < n; i++) {\n        int count = 0;\n       \
    \ for (int j = 0; j < n; j++) {\n            if (words[j] == words[i]) {\n   \
    \             count++;\n            }\n        }\n        if (count > max) {\n\
    \            max = count;\n            maxWord = words[i];\n        }\n    }\n\
    \    return maxWord;\n}\nint main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmp1yfwcxtk: /tmp/tmp1yfwcxtk.cpp:30: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    std::string max = \"\";\n    int max_count = 0;\n    for (auto\
    \ &word : words) {\n        int count = 0;\n        for (auto &c : word) {\n \
    \           count += (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u');\n\
    \        }\n        if (count > max_count) {\n            max_count = count;\n\
    \            max = word;\n        }\n    }\n    return max;\n}\nint main() {\n\
    \    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmpsbr628l5: /tmp/tmpsbr628l5.cpp:27: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    // Write your code here\n    std::string max = \"\";\n    int\
    \ maxCount = 0;\n    for (auto &word : words) {\n        int count = 0;\n    \
    \    for (auto &c : word) {\n            count += 1;\n        }\n        if (count\
    \ > maxCount) {\n            max = word;\n            maxCount = count;\n    \
    \    }\n    }\n    return max;\n}\nint main() {\n    auto candidate = find_max;\n\
    \    assert(candidate((std::vector<std::string>({\"name\", \"of\", \"string\"\
    }))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"name\"\
    , \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmpktmhz_fc: /tmp/tmpktmhz_fc.cpp:29: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    // Write your code here\n    std::string max = \"\";\n    int\
    \ maxCount = 0;\n    for (auto word : words) {\n        int count = 0;\n     \
    \   for (auto c : word) {\n            count += 1;\n        }\n        if (count\
    \ > maxCount) {\n            max = word;\n            maxCount = count;\n    \
    \    }\n    }\n    return max;\n}\nint main() {\n    auto candidate = find_max;\n\
    \    assert(candidate((std::vector<std::string>({\"name\", \"of\", \"string\"\
    }))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"name\"\
    , \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmpm2qc223z: /tmp/tmpm2qc223z.cpp:29: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    // Write your code here\n    std::string max = \"\";\n    int\
    \ maxCount = 0;\n    for (auto &word : words) {\n        int count = 0;\n    \
    \    for (auto &c : word) {\n            count += 1;\n        }\n        if (count\
    \ > maxCount) {\n            max = word;\n            maxCount = count;\n    \
    \    }\n    }\n    return max;\n}\nint main() {\n    auto candidate = find_max;\n\
    \    assert(candidate((std::vector<std::string>({\"name\", \"of\", \"string\"\
    }))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"name\"\
    , \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmpuqyzsfv9: /tmp/tmpuqyzsfv9.cpp:29: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    std::string max;\n    int max_count = 0;\n    for (auto &word\
    \ : words) {\n        int count = 0;\n        for (auto &c : word) {\n       \
    \     if (std::count(word.begin(), word.end(), c) > 0) {\n                count++;\n\
    \            }\n        }\n        if (count > max_count) {\n            max =\
    \ word;\n            max_count = count;\n        }\n    }\n    return max;\n}\n\
    int main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmpfvoiy6hg: /tmp/tmpfvoiy6hg.cpp:30: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    // Your code here\n    std::string max = \"\";\n    int maxCount\
    \ = 0;\n    for (auto &word : words) {\n        int count = 0;\n        for (auto\
    \ &c : word) {\n            count += 1;\n        }\n        if (count > maxCount)\
    \ {\n            max = word;\n            maxCount = count;\n        }\n    }\n\
    \    return max;\n}\nint main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmpzac3kwgz: /tmp/tmpzac3kwgz.cpp:29: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    // Your code here\n    std::string max = \"\";\n    int maxCount\
    \ = 0;\n    for (auto &word : words) {\n        int count = 0;\n        for (auto\
    \ &c : word) {\n            count += 1;\n        }\n        if (count > maxCount)\
    \ {\n            max = word;\n            maxCount = count;\n        }\n    }\n\
    \    return max;\n}\nint main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmpgeeqpz8l: /tmp/tmpgeeqpz8l.cpp:29: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    // Write your code here\n    std::string max = \"\";\n    int\
    \ count = 0;\n    for (auto &i : words) {\n        count += i.size();\n      \
    \  if (i.size() > max.size()) {\n            max = i;\n        }\n    }\n    if\
    \ (count > words.size()) {\n        return \"\";\n    }\n    return max;\n}\n\
    int main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmpkswbezdy: /tmp/tmpkswbezdy.cpp:27: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    int max_count = 0;\n    std::string max_word = \"\";\n    for\
    \ (auto &word : words) {\n        int count = 0;\n        for (auto &c : word)\
    \ {\n            count += 1;\n        }\n        if (count > max_count) {\n  \
    \          max_count = count;\n            max_word = word;\n        }\n    }\n\
    \    return max_word;\n}\nint main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmpbbfwk0pb: /tmp/tmpbbfwk0pb.cpp:28: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    // Write your code here\n    std::string maxWord = \"\";\n   \
    \ int maxCount = 0;\n    for(auto &word : words) {\n        std::unordered_map<char,\
    \ int> charCount;\n        for(auto &c : word) {\n            charCount[c]++;\n\
    \        }\n        if(charCount.size() > maxCount) {\n            maxCount =\
    \ charCount.size();\n            maxWord = word;\n        }\n    }\n    return\
    \ maxWord;\n}\nint main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmptczqf11u: /tmp/tmptczqf11u.cpp:29: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    // Your code here\n    std::string max = \"\";\n    int maxCount\
    \ = 0;\n    for (auto &i : words) {\n        auto it = std::find(i.begin(), i.end(),\
    \ max);\n        if (it != i.end()) {\n            maxCount = std::count(i.begin(),\
    \ it, max);\n            max = *it;\n        }\n    }\n    if (maxCount > 1) {\n\
    \        return max;\n    }\n    return words[0];\n}\nint main() {\n    auto candidate\
    \ = find_max;\n    assert(candidate((std::vector<std::string>({\"name\", \"of\"\
    , \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:71,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp3zsxu09n.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/predefined_ops.h:\
    \ In instantiation of \u2018bool __gnu_cxx::__ops::_Iter_equals_val<_Value>::operator()(_Iterator)\
    \ [with _Iterator = __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ >; _Value = const std::__cxx11::basic_string<char>]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:3188:12:\
    \   required from \u2018typename std::iterator_traits<_Iterator>::difference_type\
    \ std::__count_if(_InputIterator, _InputIterator, _Predicate) [with _InputIterator\
    \ = __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >; _Predicate\
    \ = __gnu_cxx::__ops::_Iter_equals_val<const std::__cxx11::basic_string<char>\
    \ >; typename std::iterator_traits<_Iterator>::difference_type = long int]\u2019\
    \n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:4076:29:\
    \   required from \u2018typename std::iterator_traits<_Iterator>::difference_type\
    \ std::count(_IIter, _IIter, const _Tp&) [with _IIter = __gnu_cxx::__normal_iterator<char*,\
    \ std::__cxx11::basic_string<char> >; _Tp = std::__cxx11::basic_string<char>;\
    \ typename std::iterator_traits<_Iterator>::difference_type = long int]\u2019\n\
    /tmp/tmp3zsxu09n.cpp:17:53:   required from here\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bi"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    // Write your code here\n    std::string max = \"\";\n    int\
    \ maxCount = 0;\n    for (auto &word : words) {\n        int count = 0;\n    \
    \    for (auto &c : word) {\n            count += 1;\n        }\n        if (count\
    \ > maxCount) {\n            max = word;\n            maxCount = count;\n    \
    \    }\n    }\n    return max;\n}\nint main() {\n    auto candidate = find_max;\n\
    \    assert(candidate((std::vector<std::string>({\"name\", \"of\", \"string\"\
    }))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"name\"\
    , \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmpyircrukp: /tmp/tmpyircrukp.cpp:29: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    std::string max = \"\";\n    int max_count = 0;\n    for (auto\
    \ &word : words) {\n        int count = 0;\n        for (auto &c : word) {\n \
    \           if (std::count(max.begin(), max.end(), c) > 0) {\n               \
    \ count++;\n            }\n        }\n        if (count > max_count) {\n     \
    \       max_count = count;\n            max = word;\n        }\n    }\n    return\
    \ max;\n}\nint main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmpiyn0nwpv: /tmp/tmpiyn0nwpv.cpp:29: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    // Your code here\n    std::string max = \"\";\n    int maxCount\
    \ = 0;\n    for (auto &word : words) {\n        int count = 0;\n        for (auto\
    \ &c : word) {\n            if (std::count(max.begin(), max.end(), c) > 0) {\n\
    \                count++;\n            }\n        }\n        if (count > maxCount)\
    \ {\n            max = word;\n            maxCount = count;\n        }\n    }\n\
    \    return max;\n}\nint main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmp_crism6g: /tmp/tmp_crism6g.cpp:30: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    // Your code here\n    std::string maxWord = \"\";\n    int maxCount\
    \ = 0;\n    for (auto word : words) {\n        int count = 0;\n        for (auto\
    \ c : word) {\n            count += (c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u');\n        }\n        if (count > maxCount) {\n            maxCount\
    \ = count;\n            maxWord = word;\n        }\n    }\n    return maxWord;\n\
    }\nint main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmpjp87hxgl: /tmp/tmpjp87hxgl.cpp:28: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    // Your code here\n    std::string max;\n    std::string max2;\n\
    \    std::string max3;\n    std::string max4;\n    std::string max5;\n    std::string\
    \ max6;\n    std::string max7;\n    std::string max8;\n    std::string max9;\n\
    \    std::string max10;\n    std::string max11;\n    std::string max12;\n    std::string\
    \ max13;\n    std::string max14;\n    std::string max15;\n    std::string max16;\n\
    \    std::string max17;\n    std::string max18;\n    std::string max19;\n    std::string\
    \ max20;\n    std::string max21;\n    std::string max22;\n    std::string max23;\n\
    \    std::string max24;\n    std::string max25;\n    std::string max26;\n    std::string\
    \ max27;\n    std::string max28;\n    std::string max29;\n    std::string max30;\n\
    \    std::string max31;\n    std::string max32;\n    std::string max33;\n    std::string\
    \ max34;\n    std::string max35;\n    std::string max36;\n    std::string max37;\n\
    \    std::string max38;\n    std::string max39;\n    std::string max40;\n    std::string\
    \ max41;\n    std::string max42;\n    std::string max43;\n    std::string max44;\n\
    \    std::string max45;\n    std::string max46;\n    std::string max47;\n    std::string\
    \ max48;\n    std::string max49;\n    std::string max50;\n    std::string max51;\n\
    \    std::string max52;\n    std::string max53;\n    std::string max54;\n    std::string\
    \ max55;\n    std::string max56;\n    std::string max57;\n    std::string max58;\n\
    \    std::string max59;\n    std::string max60;\n    std::string max61;\n    std::string\
    \ max62;\n    std::string max63;\n    std::string max64;\n    std::string max65;\n\
    \    std::string max66;\n    std::string max67;\n    std::string max68;\n    std::string\
    \ max69;\n    std::string max70;\n    std::string max71;\n    std::string max72;\n\
    \    std::string max73;\n    std::string max74;\n    std::string max75;\n    std::string\
    \ max76;\n    std::string max77;\n    std::string max78;\n    std::string max79;\n\
    \    std::string max80;\n    std::string max81;\n    std::string max82;\n    std::string\
    \ max83;\n    std::string max84;\n    std::string max85;\n    std::string max86;\n\
    \    std::string max87;\n    std::string max88;\n}\nint main() {\n    auto candidate\
    \ = find_max;\n    assert(candidate((std::vector<std::string>({\"name\", \"of\"\
    , \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    std::string max = \"\";\n    int max_count = 0;\n    for (auto\
    \ &word : words) {\n        int count = 0;\n        for (auto &c : word) {\n \
    \           count += 1;\n        }\n        if (count > max_count) {\n       \
    \     max = word;\n            max_count = count;\n        }\n    }\n    return\
    \ max;\n}\nint main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmpoctnex80: /tmp/tmpoctnex80.cpp:28: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    std::string max = \"\";\n    int max_count = 0;\n    for (auto\
    \ &word : words) {\n        int count = 0;\n        for (auto &c : word) {\n \
    \           count += (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u');\n\
    \        }\n        if (count > max_count) {\n            max = word;\n      \
    \      max_count = count;\n        }\n    }\n    return max;\n}\nint main() {\n\
    \    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmpxy3chmwj: /tmp/tmpxy3chmwj.cpp:27: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    std::string max = \"\";\n    int max_count = 0;\n    for (auto\
    \ &word : words) {\n        int count = 0;\n        for (auto &c : word) {\n \
    \           count += (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u');\n\
    \        }\n        if (count > max_count) {\n            max = word;\n      \
    \      max_count = count;\n        }\n    }\n    return max;\n}\nint main() {\n\
    \    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmp7k98wf31: /tmp/tmp7k98wf31.cpp:27: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    std::string max = \"\";\n    int max_count = 0;\n    for (auto\
    \ &w : words) {\n        auto count = std::count(w.begin(), w.end(), 'a');\n \
    \       if (count > max_count) {\n            max = w;\n            max_count\
    \ = count;\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate\
    \ = find_max;\n    assert(candidate((std::vector<std::string>({\"name\", \"of\"\
    , \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmpgjq7scba: /tmp/tmpgjq7scba.cpp:24: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    std::string max = \"\";\n    int maxCount = 0;\n    for (auto\
    \ &word : words) {\n        auto count = std::count(word.begin(), word.end(),\
    \ 'a');\n        if (count > maxCount) {\n            max = word;\n          \
    \  maxCount = count;\n        }\n    }\n    return max;\n}\nint main() {\n   \
    \ auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmpq2m7sw6d: /tmp/tmpq2m7sw6d.cpp:24: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    std::string max = \"\";\n    int max_count = 0;\n    for (auto\
    \ &word : words) {\n        int count = 0;\n        for (auto &c : word) {\n \
    \           count += (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u');\n\
    \        }\n        if (count > max_count) {\n            max = word;\n      \
    \      max_count = count;\n        }\n    }\n    return max;\n}\nint main() {\n\
    \    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmpwnrn_w9l: /tmp/tmpwnrn_w9l.cpp:27: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    // Your code here\n    std::string maxWord = \"\";\n    int maxCount\
    \ = 0;\n    for (auto &word : words) {\n        int count = 0;\n        for (auto\
    \ &c : word) {\n            count += 1;\n        }\n        if (count > maxCount)\
    \ {\n            maxCount = count;\n            maxWord = word;\n        }\n \
    \   }\n    return maxWord;\n}\nint main() {\n    auto candidate = find_max;\n\
    \    assert(candidate((std::vector<std::string>({\"name\", \"of\", \"string\"\
    }))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"name\"\
    , \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmpz77c_dmd: /tmp/tmpz77c_dmd.cpp:29: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    // Write your code here\n    std::string maxWord = \"\";\n   \
    \ int maxCount = 0;\n    for (auto &word : words) {\n        int count = 0;\n\
    \        for (auto &c : word) {\n            count += 1;\n        }\n        if\
    \ (count > maxCount) {\n            maxCount = count;\n            maxWord = word;\n\
    \        }\n    }\n    return maxWord;\n}\nint main() {\n    auto candidate =\
    \ find_max;\n    assert(candidate((std::vector<std::string>({\"name\", \"of\"\
    , \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmpp76nlfj9: /tmp/tmpp76nlfj9.cpp:29: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    // Your code here\n    std::string max;\n    int maxCount = 0;\n\
    \    for (auto &word : words) {\n        int count = 0;\n        for (auto &c\
    \ : word) {\n            count += 1;\n        }\n        if (count > maxCount)\
    \ {\n            max = word;\n            maxCount = count;\n        }\n    }\n\
    \    return max;\n}\nint main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmpyjvm_sok: /tmp/tmpyjvm_sok.cpp:29: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    int max = 0;\n    std::string maxWord = \"\";\n    for (auto &word\
    \ : words) {\n        auto unique = std::count(word.begin(), word.end(), 0);\n\
    \        if (unique > max) {\n            max = unique;\n            maxWord =\
    \ word;\n        }\n    }\n    return maxWord;\n}\nint main() {\n    auto candidate\
    \ = find_max;\n    assert(candidate((std::vector<std::string>({\"name\", \"of\"\
    , \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmpwx1szucg: /tmp/tmpwx1szucg.cpp:24: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    // Write your code here\n    std::string max = \"\";\n    int\
    \ maxCount = 0;\n    for(auto &word: words){\n        std::unordered_map<char,int>\
    \ charCount;\n        for(auto &char: word){\n            charCount[char]++;\n\
    \        }\n        if(charCount.size() > maxCount){\n            max = word;\n\
    \            maxCount = charCount.size();\n        }\n    }\n    return max;\n\
    }\nint main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpj4wnllml.cpp: In function \u2018std::string find_max(std::vector<std::__cxx11::basic_string<char>\
    \ >)\u2019:\n/tmp/tmpj4wnllml.cpp:16:19: error: expected unqualified-id before\
    \ \u2018char\u2019\n   16 |         for(auto &char: word){\n      |          \
    \         ^~~~\n/tmp/tmpj4wnllml.cpp:16:19: error: expected \u2018;\u2019 before\
    \ \u2018char\u2019\n   16 |         for(auto &char: word){\n      |          \
    \         ^~~~\n      |                   ;\n/tmp/tmpj4wnllml.cpp:16:23: error:\
    \ expected unqualified-id before \u2018:\u2019 token\n   16 |         for(auto\
    \ &char: word){\n      |                       ^\n/tmp/tmpj4wnllml.cpp:16:29:\
    \ error: expected \u2018;\u2019 before \u2018)\u2019 token\n   16 |         for(auto\
    \ &char: word){\n      |                             ^\n      |              \
    \               ;\n/tmp/tmpj4wnllml.cpp:17:23: error: expected primary-expression\
    \ before \u2018char\u2019\n   17 |             charCount[char]++;\n      |   \
    \                    ^~~~\n/tmp/tmpj4wnllml.cpp:17:23: error: expected \u2018\
    ]\u2019 before \u2018char\u2019\n   17 |             charCount[char]++;\n    \
    \  |                       ^~~~\n      |                       ]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    std::string max = \"\";\n    int maxCount = 0;\n    for (auto\
    \ &word : words) {\n        int count = std::count(word.begin(), word.end(), 'a');\n\
    \        if (count > maxCount) {\n            max = word;\n            maxCount\
    \ = count;\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate\
    \ = find_max;\n    assert(candidate((std::vector<std::string>({\"name\", \"of\"\
    , \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmppmqeiox0: /tmp/tmppmqeiox0.cpp:24: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    // Your code here\n    std::string max = \"\";\n    int max_count\
    \ = 0;\n    for (auto &word : words) {\n        int count = 0;\n        for (auto\
    \ &c : word) {\n            count += 1;\n        }\n        if (count > max_count)\
    \ {\n            max = word;\n            max_count = count;\n        }\n    }\n\
    \    return max;\n}\nint main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmp0v9fdis_: /tmp/tmp0v9fdis_.cpp:29: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    // Your code here\n    std::string max = \"\";\n    int count\
    \ = 0;\n    for (auto &i : words) {\n        count += i.size();\n        if (count\
    \ > max.size()) {\n            max = i;\n        }\n    }\n    return max;\n}\n\
    int main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmpjpc07kmd: /tmp/tmpjpc07kmd.cpp:25: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    // Your code here\n    std::string max;\n    int max_count = 0;\n\
    \    for (auto &word : words) {\n        int count = 0;\n        for (auto &c\
    \ : word) {\n            count += 1;\n        }\n        if (count > max_count)\
    \ {\n            max = word;\n            max_count = count;\n        }\n    }\n\
    \    return max;\n}\nint main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmpefdbheat: /tmp/tmpefdbheat.cpp:29: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    // Your code here\n    std::string max = \"\";\n    int maxCount\
    \ = 0;\n    for (auto &word : words) {\n        int count = 0;\n        for (auto\
    \ &c : word) {\n            if (std::count(word.begin(), word.end(), c) > 0) {\n\
    \                count++;\n            }\n        }\n        if (count > maxCount)\
    \ {\n            max = word;\n            maxCount = count;\n        }\n    }\n\
    \    return max;\n}\nint main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmpyx5u7wp2: /tmp/tmpyx5u7wp2.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    // Your code goes here\n    std::string maxWord = \"\";\n    int\
    \ maxCount = 0;\n    for (auto word : words) {\n        int count = 0;\n     \
    \   for (auto c : word) {\n            count += (c == 'a' || c == 'e' || c ==\
    \ 'i' || c == 'o' || c == 'u');\n        }\n        if (count > maxCount) {\n\
    \            maxCount = count;\n            maxWord = word;\n        }\n    }\n\
    \    return maxWord;\n}\nint main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmph3pgke5y: /tmp/tmph3pgke5y.cpp:28: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    // Your code here\n    std::string max = \"\";\n    int maxCount\
    \ = 0;\n    for (auto &word : words) {\n        int count = 0;\n        for (auto\
    \ &c : word) {\n            count += 1;\n        }\n        if (count > maxCount)\
    \ {\n            max = word;\n            maxCount = count;\n        }\n    }\n\
    \    return max;\n}\nint main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmpgh1vpa_h: /tmp/tmpgh1vpa_h.cpp:29: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    std::string max = \"\";\n    int max_count = 0;\n    for (auto\
    \ &word : words) {\n        int count = 0;\n        for (auto &c : word) {\n \
    \           count += 1;\n        }\n        if (count > max_count) {\n       \
    \     max_count = count;\n            max = word;\n        }\n    }\n    return\
    \ max;\n}\nint main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmpd5vgqi9d: /tmp/tmpd5vgqi9d.cpp:28: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    // Write your code here\n    std::string max = \"\";\n    int\
    \ maxCount = 0;\n    for (auto &word : words) {\n        int count = 0;\n    \
    \    for (auto &c : word) {\n            if (std::count(max.begin(), max.end(),\
    \ c) > 0) {\n                count++;\n            }\n        }\n        if (count\
    \ > maxCount) {\n            max = word;\n            maxCount = count;\n    \
    \    }\n    }\n    return max;\n}\nint main() {\n    auto candidate = find_max;\n\
    \    assert(candidate((std::vector<std::string>({\"name\", \"of\", \"string\"\
    }))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"name\"\
    , \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmp33phzf3k: /tmp/tmp33phzf3k.cpp:30: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    std::string max = \"\";\n    int maxCount = 0;\n    for (auto\
    \ &word : words) {\n        int count = std::count(word.begin(), word.end(), 'a');\n\
    \        if (count > maxCount) {\n            max = word;\n            maxCount\
    \ = count;\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate\
    \ = find_max;\n    assert(candidate((std::vector<std::string>({\"name\", \"of\"\
    , \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmp60jvxzpx: /tmp/tmp60jvxzpx.cpp:24: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    std::string max = \"\";\n    int maxCount = 0;\n    for (auto\
    \ &word : words) {\n        auto count = std::count(word.begin(), word.end(),\
    \ 'a');\n        if (count > maxCount) {\n            max = word;\n          \
    \  maxCount = count;\n        }\n    }\n    return max;\n}\nint main() {\n   \
    \ auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmpigy10fx0: /tmp/tmpigy10fx0.cpp:24: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    // Write your code here\n    std::string max;\n    int maxCount\
    \ = 0;\n    for (auto &word : words) {\n        int count = 0;\n        for (auto\
    \ &c : word) {\n            if (std::count(word.begin(), word.end(), c) > 0) {\n\
    \                count++;\n            }\n        }\n        if (count > maxCount)\
    \ {\n            max = word;\n            maxCount = count;\n        }\n    }\n\
    \    return max;\n}\nint main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmpe8utqy4l: /tmp/tmpe8utqy4l.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    // Write your code here\n    std::string max = \"\";\n    int\
    \ maxCount = 0;\n    for (auto &word : words) {\n        int count = 0;\n    \
    \    for (auto &c : word) {\n            count += 1;\n        }\n        if (count\
    \ > maxCount) {\n            max = word;\n            maxCount = count;\n    \
    \    }\n    }\n    return max;\n}\nint main() {\n    auto candidate = find_max;\n\
    \    assert(candidate((std::vector<std::string>({\"name\", \"of\", \"string\"\
    }))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"name\"\
    , \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmp4f65r3_i: /tmp/tmp4f65r3_i.cpp:29: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    // Write your code here\n    std::string maxWord = \"\";\n   \
    \ int maxCount = 0;\n    for (auto word : words) {\n        int count = 0;\n \
    \       for (auto c : word) {\n            count += 1;\n        }\n        if\
    \ (count > maxCount) {\n            maxCount = count;\n            maxWord = word;\n\
    \        }\n    }\n    return maxWord;\n}\nint main() {\n    auto candidate =\
    \ find_max;\n    assert(candidate((std::vector<std::string>({\"name\", \"of\"\
    , \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmp67cn7yg4: /tmp/tmp67cn7yg4.cpp:29: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    // Your code here\n    std::string max = \"\";\n    int maxCount\
    \ = 0;\n    for (auto &word : words) {\n        int count = 0;\n        for (auto\
    \ &c : word) {\n            if (std::count(word.begin(), word.end(), c) > 0) {\n\
    \                count++;\n            }\n        }\n        if (count > maxCount)\
    \ {\n            max = word;\n            maxCount = count;\n        }\n    }\n\
    \    return max;\n}\nint main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmpdw42gdjl: /tmp/tmpdw42gdjl.cpp:31: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    // Write your code here\n    std::string max = \"\";\n    int\
    \ maxCount = 0;\n    for (auto &i : words) {\n        int count = 0;\n       \
    \ for (auto &j : i) {\n            count += 1;\n        }\n        if (count >\
    \ maxCount) {\n            max = i;\n            maxCount = count;\n        }\n\
    \    }\n    return max;\n}\nint main() {\n    auto candidate = find_max;\n   \
    \ assert(candidate((std::vector<std::string>({\"name\", \"of\", \"string\"})))\
    \ == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"name\"\
    , \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmpas50ovp3: /tmp/tmpas50ovp3.cpp:29: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    std::string max = \"\";\n    int max_count = 0;\n    for (auto\
    \ &w : words) {\n        int count = 0;\n        for (auto &c : w) {\n       \
    \     count += 1;\n        }\n        if (count > max_count) {\n            max_count\
    \ = count;\n            max = w;\n        }\n    }\n    return max;\n}\nint main()\
    \ {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmpofi6lbs8: /tmp/tmpofi6lbs8.cpp:28: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ accepts a list of strings.\n// The list contains different words. Return the\
    \ word with maximum number\n// of unique characters. If multiple strings have\
    \ maximum number of unique\n// characters, return the one which comes first in\
    \ lexicographical order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \n// find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string>\
    \ words) {\n    std::string max = \"\";\n    int max_count = 0;\n    for (auto\
    \ &word : words) {\n        int count = 0;\n        for (auto &c : word) {\n \
    \           if (std::count(max.begin(), max.end(), c) > 0) {\n               \
    \ count++;\n            }\n        }\n        if (count > max_count) {\n     \
    \       max = word;\n            max_count = count;\n        }\n    }\n    return\
    \ max;\n}\nint main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
    name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
    aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
    abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n   \
    \ assert(candidate((std::vector<std::string>({\"we\", \"are\", \"gonna\", \"rock\"\
    }))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"we\"\
    , \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
    this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
    b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\"\
    , \"play\", \"play\"}))) == (\"play\"));\n}\n"
  stdout: ''
  stderr: "tmpdchs14gz: /tmp/tmpdchs14gz.cpp:29: int main(): Assertion `candidate((std::vector<std::string>({\"\
    name\", \"of\", \"string\"}))) == (\"string\")' failed.\n"
  exit_code: -6
  status: Exception
