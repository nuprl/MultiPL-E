name: HumanEval_3_below_zero
language: cpp
results:
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    long\
    \ balance = operations[0];\n    for (long i = 1; i < operations.size(); i++) {\n\
    \        if (operations[i] < 0)\n            return true;\n        balance +=\
    \ operations[i];\n    }\n    return balance < 0;\n}\nint main() {\n    auto candidate\
    \ = below_zero;\n    assert(candidate((std::vector<long>())) == (false));\n  \
    \  assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) == (true));\n   \
    \ assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, -2, 2, -2, 5, -5, 4, -4}))) == (true));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    long\
    \ balance = 0;\n    for (auto op : operations) {\n        balance += op;\n   \
    \     if (balance < 0) {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    long\
    \ balance = operations[0];\n    for (long i = 0; i < operations.size(); i++) {\n\
    \        if (operations[i] < 0) {\n            return false;\n        }\n    \
    \    balance += operations[i];\n        if (balance < 0) {\n            return\
    \ true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = below_zero;\n    assert(candidate((std::vector<long>())) == (false));\n  \
    \  assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) == (true));\n   \
    \ assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, -2, 2, -2, 5, -5, 4, -4}))) == (true));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    long\
    \ balance = 0;\n    for (auto i : operations) {\n        balance += i;\n     \
    \   if (balance < 0) {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    long\
    \ balance = 0;\n    for (auto i : operations) {\n        balance += i;\n     \
    \   if (balance < 0) {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    //\
    \ Your code here\n    long sum = 0;\n    for (long i = 0; i < operations.size();\
    \ i++) {\n        sum += operations[i];\n    }\n    if (sum < 0)\n        return\
    \ false;\n    return true;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -3, 1, 2, -3}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1, -1,\
    \ 2, -2, 5, -5, 4, -4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 2, -2, 5, -5, 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ -2, 2, -2, 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpwy3vb43z: /tmp/tmpwy3vb43z.cpp:22: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    int\
    \ sum = 0;\n    for (int i = 0; i < operations.size(); i++) {\n        sum +=\
    \ operations[i];\n    }\n    if (sum < 0) {\n        return false;\n    }\n  \
    \  return true;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmp268_8spx: /tmp/tmp268_8spx.cpp:22: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    long\
    \ balance = operations[0];\n    for (long i = 1; i < operations.size(); i++) {\n\
    \        balance += operations[i];\n        if (balance < 0) {\n            return\
    \ true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = below_zero;\n    assert(candidate((std::vector<long>())) == (false));\n  \
    \  assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) == (true));\n   \
    \ assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, -2, 2, -2, 5, -5, 4, -4}))) == (true));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    long\
    \ sum = 0;\n    for (auto i : operations) {\n        sum += i;\n    }\n    if\
    \ (sum < 0)\n        return false;\n    return true;\n}\nint main() {\n    auto\
    \ candidate = below_zero;\n    assert(candidate((std::vector<long>())) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) == (true));\n   \
    \ assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, -2, 2, -2, 5, -5, 4, -4}))) == (true));\n\
    }\n"
  stdout: ''
  stderr: "tmpulp5z94j: /tmp/tmpulp5z94j.cpp:21: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    long\
    \ balance = 0;\n    for (auto &op : operations) {\n        balance += op;\n  \
    \      if (balance < 0) {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    long\
    \ balance = 0;\n    for (long i = 0; i < operations.size(); i++) {\n        balance\
    \ += operations[i];\n        if (balance < 0) {\n            return true;\n  \
    \      }\n    }\n    return false;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -3, 1, 2, -3}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1, -1,\
    \ 2, -2, 5, -5, 4, -4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 2, -2, 5, -5, 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ -2, 2, -2, 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    //\
    \ Your code here\n    long sum = 0;\n    for (long i = 0; i < operations.size();\
    \ i++) {\n        sum += operations[i];\n    }\n    if (sum < 0)\n        return\
    \ true;\n    else\n        return false;\n}\nint main() {\n    auto candidate\
    \ = below_zero;\n    assert(candidate((std::vector<long>())) == (false));\n  \
    \  assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) == (true));\n   \
    \ assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, -2, 2, -2, 5, -5, 4, -4}))) == (true));\n\
    }\n"
  stdout: ''
  stderr: "tmp9u1l2f77: /tmp/tmp9u1l2f77.cpp:25: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    int\
    \ sum = 0;\n    for (auto i : operations) {\n        sum += i;\n    }\n    return\
    \ sum < 0;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpvxh2rct1: /tmp/tmpvxh2rct1.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    int\
    \ sum = 0;\n    for (auto i : operations) {\n        sum += i;\n    }\n    return\
    \ sum < 0;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpj4l1yf82: /tmp/tmpj4l1yf82.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    long\
    \ balance = 0;\n    for (auto op : operations) {\n        balance += op;\n   \
    \     if (balance < 0) {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    long\
    \ balance = operations[0];\n    for (long i = 1; i < operations.size(); i++) {\n\
    \        balance += operations[i];\n        if (balance < 0) {\n            return\
    \ true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = below_zero;\n    assert(candidate((std::vector<long>())) == (false));\n  \
    \  assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) == (true));\n   \
    \ assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, -2, 2, -2, 5, -5, 4, -4}))) == (true));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    //\
    \ Your code here\n    long sum = 0;\n    for (long i = 0; i < operations.size();\
    \ i++) {\n        sum += operations[i];\n    }\n    if (sum < 0) {\n        return\
    \ false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -3, 1, 2, -3}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1, -1,\
    \ 2, -2, 5, -5, 4, -4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 2, -2, 5, -5, 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ -2, 2, -2, 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpmf817q4e: /tmp/tmpmf817q4e.cpp:23: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    long\
    \ balance = operations.front();\n    for (long i = operations.size() - 1; i >=\
    \ 0; i--) {\n        if (operations[i] < balance) {\n            return true;\n\
    \        }\n        balance -= operations[i];\n    }\n    return false;\n}\nint\
    \ main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    //\
    \ Your code here\n    long sum = 0;\n    for (auto i : operations) {\n       \
    \ sum += i;\n    }\n    if (sum < 0)\n        return true;\n    return false;\n\
    }\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpga3lcko5: /tmp/tmpga3lcko5.cpp:24: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    int\
    \ sum = 0;\n    for (int i = 0; i < operations.size(); i++) {\n        sum +=\
    \ operations[i];\n    }\n    if (sum < 0)\n        return false;\n    return true;\n\
    }\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpg5ogxzp_: /tmp/tmpg5ogxzp_.cpp:21: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    //\
    \ Your code here\n    long sum = 0;\n    for (long i = 0; i < operations.size();\
    \ i++) {\n        sum += operations[i];\n    }\n    if (sum < 0) {\n        return\
    \ false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -3, 1, 2, -3}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1, -1,\
    \ 2, -2, 5, -5, 4, -4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 2, -2, 5, -5, 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ -2, 2, -2, 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpjronimhq: /tmp/tmpjronimhq.cpp:23: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    long\
    \ balance = operations.front();\n    for (long i : operations) {\n        if (i\
    \ < 0) {\n            return false;\n        }\n        balance -= i;\n    }\n\
    \    return balance < 0;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -3, 1, 2, -3}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1, -1,\
    \ 2, -2, 5, -5, 4, -4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 2, -2, 5, -5, 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ -2, 2, -2, 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    long\
    \ balance = 0;\n    for (auto i : operations) {\n        balance += i;\n     \
    \   if (balance < 0) {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    //\
    \ Your code here\n    long sum = 0;\n    for (long i = 0; i < operations.size();\
    \ i++) {\n        sum += operations[i];\n    }\n    if (sum < 0) {\n        return\
    \ false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -3, 1, 2, -3}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1, -1,\
    \ 2, -2, 5, -5, 4, -4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 2, -2, 5, -5, 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ -2, 2, -2, 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpdvig0k6b: /tmp/tmpdvig0k6b.cpp:23: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    //\
    \ Your code here\n    long sum = 0;\n    for (long i = 0; i < operations.size();\
    \ i++) {\n        sum += operations[i];\n    }\n    if (sum < 0)\n        return\
    \ true;\n    return false;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -3, 1, 2, -3}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1, -1,\
    \ 2, -2, 5, -5, 4, -4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 2, -2, 5, -5, 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ -2, 2, -2, 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmp774fo7c2: /tmp/tmp774fo7c2.cpp:24: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    int\
    \ n = operations.size();\n    long balance = 0;\n    for (int i = 0; i < n; i++)\
    \ {\n        balance += operations[i];\n        if (balance < 0) {\n         \
    \   return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto\
    \ candidate = below_zero;\n    assert(candidate((std::vector<long>())) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) == (true));\n   \
    \ assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, -2, 2, -2, 5, -5, 4, -4}))) == (true));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    //\
    \ Your code goes here\n    long sum = 0;\n    for (auto i : operations) {\n  \
    \      sum += i;\n    }\n    if (sum < 0)\n        return false;\n    return true;\n\
    }\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpt_scooqf: /tmp/tmpt_scooqf.cpp:22: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    int\
    \ sum = 0;\n    for (auto i : operations) {\n        sum += i;\n    }\n    if\
    \ (sum < 0)\n        return false;\n    return true;\n}\nint main() {\n    auto\
    \ candidate = below_zero;\n    assert(candidate((std::vector<long>())) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) == (true));\n   \
    \ assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, -2, 2, -2, 5, -5, 4, -4}))) == (true));\n\
    }\n"
  stdout: ''
  stderr: "tmp6bq92hsu: /tmp/tmp6bq92hsu.cpp:21: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    long\
    \ balance = 0;\n    for (auto i : operations) {\n        balance += i;\n    }\n\
    \    return balance < 0;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -3, 1, 2, -3}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1, -1,\
    \ 2, -2, 5, -5, 4, -4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 2, -2, 5, -5, 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ -2, 2, -2, 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpqg_pbfv6: /tmp/tmpqg_pbfv6.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    long\
    \ balance = operations.front();\n    for (long i = operations.size() - 1; i >=\
    \ 0; i--) {\n        if (operations[i] < balance) {\n            return true;\n\
    \        }\n        balance -= operations[i];\n    }\n    return false;\n}\nint\
    \ main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    long\
    \ sum = 0;\n    for (auto i : operations) {\n        sum += i;\n    }\n    return\
    \ sum < 0;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmps6ux560i: /tmp/tmps6ux560i.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    int\
    \ sum = 0;\n    for (int i = 0; i < operations.size(); i++) {\n        sum +=\
    \ operations[i];\n    }\n    if (sum < 0) {\n        return false;\n    }\n  \
    \  return true;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpm9a_680q: /tmp/tmpm9a_680q.cpp:22: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    //\
    \ Your code goes here\n    long sum = 0;\n    for (auto i : operations) {\n  \
    \      sum += i;\n    }\n    if (sum < 0)\n        return false;\n    return true;\n\
    }\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmp4tdgq0_k: /tmp/tmp4tdgq0_k.cpp:22: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    int\
    \ sum = 0;\n    for(int i = 0; i < operations.size(); i++){\n        sum += operations[i];\n\
    \    }\n    return sum < 0;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -3, 1, 2, -3}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1, -1,\
    \ 2, -2, 5, -5, 4, -4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 2, -2, 5, -5, 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ -2, 2, -2, 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpa500rv6s: /tmp/tmpa500rv6s.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    int\
    \ sum = 0;\n    for (auto i : operations) {\n        sum += i;\n    }\n    if\
    \ (sum < 0)\n        return false;\n    return true;\n}\nint main() {\n    auto\
    \ candidate = below_zero;\n    assert(candidate((std::vector<long>())) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) == (true));\n   \
    \ assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, -2, 2, -2, 5, -5, 4, -4}))) == (true));\n\
    }\n"
  stdout: ''
  stderr: "tmp02uy_w9a: /tmp/tmp02uy_w9a.cpp:21: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    long\
    \ balance = operations.front();\n    for (long i = 1, size = operations.size();\
    \ i < size; i++) {\n        if (balance < 0)\n            return true;\n     \
    \   balance += operations[i];\n    }\n    return false;\n}\nint main() {\n   \
    \ auto candidate = below_zero;\n    assert(candidate((std::vector<long>())) ==\
    \ (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3}))) ==\
    \ (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, -2, 2, -2, 5, -5, 4, -4}))) == (true));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    //\
    \ Your code here\n    long sum = 0;\n    for (auto i : operations) {\n       \
    \ sum += i;\n    }\n    if (sum < 0)\n        return true;\n    return false;\n\
    }\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpksgxhyrb: /tmp/tmpksgxhyrb.cpp:24: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    int\
    \ sum = 0;\n    for (int i = 0; i < operations.size(); i++) {\n        sum +=\
    \ operations[i];\n    }\n    return sum < 0;\n}\nint main() {\n    auto candidate\
    \ = below_zero;\n    assert(candidate((std::vector<long>())) == (false));\n  \
    \  assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) == (true));\n   \
    \ assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, -2, 2, -2, 5, -5, 4, -4}))) == (true));\n\
    }\n"
  stdout: ''
  stderr: "tmpnuwad82a: /tmp/tmpnuwad82a.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    long\
    \ balance = operations[0];\n    for (long i = 1; i < operations.size(); i++) {\n\
    \        balance += operations[i];\n        if (balance < 0) {\n            return\
    \ true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = below_zero;\n    assert(candidate((std::vector<long>())) == (false));\n  \
    \  assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) == (true));\n   \
    \ assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, -2, 2, -2, 5, -5, 4, -4}))) == (true));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    long\
    \ balance = 0;\n    for (auto op : operations) {\n        balance += op;\n   \
    \     if (balance < 0) {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    //\
    \ Your code here\n    long sum = 0;\n    for (long i = 0; i < operations.size();\
    \ i++) {\n        sum += operations[i];\n    }\n    if (sum < 0)\n        return\
    \ false;\n    return true;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -3, 1, 2, -3}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1, -1,\
    \ 2, -2, 5, -5, 4, -4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 2, -2, 5, -5, 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ -2, 2, -2, 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmp86dsxnru: /tmp/tmp86dsxnru.cpp:22: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    //\
    \ Your code here\n    long sum = 0;\n    for (long i = 0; i < operations.size();\
    \ i++) {\n        sum += operations[i];\n    }\n    if (sum < 0)\n        return\
    \ true;\n    return false;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -3, 1, 2, -3}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1, -1,\
    \ 2, -2, 5, -5, 4, -4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 2, -2, 5, -5, 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ -2, 2, -2, 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpl8r2l2nk: /tmp/tmpl8r2l2nk.cpp:24: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    //\
    \ Your code here\n    long sum = 0;\n    for (auto i : operations) {\n       \
    \ sum += i;\n    }\n    if (sum < 0) {\n        return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpcga5ggyg: /tmp/tmpcga5ggyg.cpp:23: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    long\
    \ balance = operations.front();\n    for (long i = operations.size() - 1; i >=\
    \ 0; i--) {\n        balance += operations[i];\n        if (balance < 0) {\n \
    \           return true;\n        }\n    }\n    return false;\n}\nint main() {\n\
    \    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    long\
    \ balance = operations.front();\n    for (long i = operations.size() - 1; i >=\
    \ 0; i--) {\n        balance += operations[i];\n        if (balance < 0) {\n \
    \           return true;\n        }\n    }\n    return false;\n}\nint main() {\n\
    \    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    long\
    \ balance = 0;\n    for (auto op : operations) {\n        balance += op;\n   \
    \     if (balance < 0) {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    //\
    \ Your code goes here\n    long sum = 0;\n    for(long i = 0; i < operations.size();\
    \ i++){\n        sum += operations[i];\n    }\n    if(sum < 0){\n        return\
    \ true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -3, 1, 2, -3}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1, -1,\
    \ 2, -2, 5, -5, 4, -4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 2, -2, 5, -5, 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ -2, 2, -2, 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpyszb7s7x: /tmp/tmpyszb7s7x.cpp:25: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    //\
    \ Your code here\n    long sum = 0;\n    for (auto i : operations) {\n       \
    \ sum += i;\n    }\n    if (sum < 0) {\n        return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpsbbh2acb: /tmp/tmpsbbh2acb.cpp:23: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    //\
    \ Your code here\n    long sum = 0;\n    for (auto i : operations) {\n       \
    \ sum += i;\n    }\n    if (sum < 0)\n        return true;\n    return false;\n\
    }\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpr1wyx6er: /tmp/tmpr1wyx6er.cpp:24: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    //\
    \ Your code here\n    long sum = 0;\n    for (auto i : operations) {\n       \
    \ sum += i;\n    }\n    if (sum < 0) {\n        return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmp4dxtfzd6: /tmp/tmp4dxtfzd6.cpp:23: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    long\
    \ balance = 0;\n    for (auto i : operations) {\n        balance += i;\n     \
    \   if (balance < 0) {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    int\
    \ n = operations.size();\n    long balance = 0;\n    for (int i = 0; i < n; i++)\
    \ {\n        balance += operations[i];\n        if (balance < 0) {\n         \
    \   return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto\
    \ candidate = below_zero;\n    assert(candidate((std::vector<long>())) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) == (true));\n   \
    \ assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, -2, 2, -2, 5, -5, 4, -4}))) == (true));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    long\
    \ balance = operations.front();\n    for (auto &op : operations) {\n        if\
    \ (op < 0) {\n            return false;\n        }\n        balance -= op;\n \
    \   }\n    return balance < 0;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -3, 1, 2, -3}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1, -1,\
    \ 2, -2, 5, -5, 4, -4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 2, -2, 5, -5, 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ -2, 2, -2, 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    int\
    \ sum = 0;\n    for (auto i : operations) {\n        sum += i;\n    }\n    return\
    \ sum < 0;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpmll64b1e: /tmp/tmpmll64b1e.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    int\
    \ n = operations.size();\n    long sum = 0;\n    for (int i = 0; i < n; i++) {\n\
    \        sum += operations[i];\n    }\n    if (sum < 0)\n        return false;\n\
    \    return true;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpvii9t6j8: /tmp/tmpvii9t6j8.cpp:22: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    //\
    \ Your code here\n    long sum = 0;\n    for (auto i : operations) {\n       \
    \ sum += i;\n    }\n    if (sum < 0)\n        return true;\n    return false;\n\
    }\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpq8rqyibu: /tmp/tmpq8rqyibu.cpp:24: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    //\
    \ Your code here\n    long sum = 0;\n    for (auto i : operations) {\n       \
    \ sum += i;\n    }\n    if (sum < 0)\n        return false;\n    return true;\n\
    }\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpailqy19b: /tmp/tmpailqy19b.cpp:22: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    //\
    \ Your code here\n    long sum = 0;\n    for (long i = 0; i < operations.size();\
    \ i++) {\n        sum += operations[i];\n    }\n    if (sum < 0)\n        return\
    \ false;\n    return true;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -3, 1, 2, -3}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1, -1,\
    \ 2, -2, 5, -5, 4, -4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 2, -2, 5, -5, 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ -2, 2, -2, 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpq27e6emv: /tmp/tmpq27e6emv.cpp:22: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    //\
    \ Your code here\n    long sum = 0;\n    for (auto &op : operations) {\n     \
    \   sum += op;\n    }\n    if (sum < 0) {\n        return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmp2denwfer: /tmp/tmp2denwfer.cpp:23: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    long\
    \ balance = 0;\n    for (auto i : operations) {\n        balance += i;\n    }\n\
    \    return balance < 0;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -3, 1, 2, -3}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1, -1,\
    \ 2, -2, 5, -5, 4, -4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 2, -2, 5, -5, 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ -2, 2, -2, 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmp76tdjpws: /tmp/tmp76tdjpws.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    long\
    \ sum = 0;\n    for (auto i : operations) {\n        sum += i;\n    }\n    return\
    \ sum < 0;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpuntnijp4: /tmp/tmpuntnijp4.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    long\
    \ balance = operations.front();\n    for (long i = operations.size() - 1; i >=\
    \ 0; i--) {\n        balance += operations[i];\n        if (balance < 0) {\n \
    \           return true;\n        }\n    }\n    return false;\n}\nint main() {\n\
    \    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    int\
    \ sum = 0;\n    for (int i = 0; i < operations.size(); i++) {\n        sum +=\
    \ operations[i];\n    }\n    if (sum < 0)\n        return false;\n    return true;\n\
    }\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmp1xwo7d39: /tmp/tmp1xwo7d39.cpp:21: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    long\
    \ balance = operations.front();\n    for (long i = operations.size() - 1; i >=\
    \ 0; i--) {\n        balance += operations[i];\n        if (balance < 0) {\n \
    \           return true;\n        }\n    }\n    return false;\n}\nint main() {\n\
    \    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    //\
    \ Your code here\n    long sum = 0;\n    for (auto i : operations) {\n       \
    \ sum += i;\n    }\n    if (sum < 0)\n        return false;\n    return true;\n\
    }\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmp3s0arndz: /tmp/tmp3s0arndz.cpp:22: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    long\
    \ balance = 0;\n    for (auto op : operations) {\n        balance += op;\n   \
    \     if (balance < 0) {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    //\
    \ Your code here\n    long sum = 0;\n    for (auto i : operations) {\n       \
    \ sum += i;\n    }\n    if (sum < 0)\n        return true;\n    return false;\n\
    }\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmp0jbkj3w_: /tmp/tmp0jbkj3w_.cpp:24: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    int\
    \ n = operations.size();\n    long balance = 0;\n    for (int i = 0; i < n; i++)\
    \ {\n        balance += operations[i];\n        if (balance < 0) {\n         \
    \   return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto\
    \ candidate = below_zero;\n    assert(candidate((std::vector<long>())) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) == (true));\n   \
    \ assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, -2, 2, -2, 5, -5, 4, -4}))) == (true));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    //\
    \ Your code here\n    long sum = 0;\n    for(long i = 0; i < operations.size();\
    \ i++){\n        sum += operations[i];\n    }\n    if(sum < 0){\n        return\
    \ true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -3, 1, 2, -3}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1, -1,\
    \ 2, -2, 5, -5, 4, -4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 2, -2, 5, -5, 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ -2, 2, -2, 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpjl3yhr0u: /tmp/tmpjl3yhr0u.cpp:25: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    int\
    \ n = operations.size();\n    long balance = 0;\n    for (int i = 0; i < n; i++)\
    \ {\n        balance += operations[i];\n        if (balance < 0) {\n         \
    \   return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto\
    \ candidate = below_zero;\n    assert(candidate((std::vector<long>())) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) == (true));\n   \
    \ assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, -2, 2, -2, 5, -5, 4, -4}))) == (true));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    //\
    \ Your code here\n    long sum = 0;\n    for (auto i : operations) {\n       \
    \ sum += i;\n    }\n    if (sum < 0)\n        return false;\n    return true;\n\
    }\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpus56ibho: /tmp/tmpus56ibho.cpp:22: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    //\
    \ Your code here\n    long sum = 0;\n    long balance = 0;\n    for (auto i :\
    \ operations) {\n        sum += i;\n        balance += i;\n    }\n    if (balance\
    \ < 0) {\n        return false;\n    }\n    return true;\n}\nint main() {\n  \
    \  auto candidate = below_zero;\n    assert(candidate((std::vector<long>())) ==\
    \ (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3}))) ==\
    \ (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, -2, 2, -2, 5, -5, 4, -4}))) == (true));\n\
    }\n"
  stdout: ''
  stderr: "tmp_okifqbx: /tmp/tmp_okifqbx.cpp:25: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    int\
    \ sum = 0;\n    for (auto i : operations) {\n        sum += i;\n    }\n    return\
    \ sum < 0;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmp8bqs_5t0: /tmp/tmp8bqs_5t0.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    //\
    \ Your code here\n    long sum = 0;\n    for (auto i : operations) {\n       \
    \ sum += i;\n    }\n    if (sum < 0)\n        return false;\n    return true;\n\
    }\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpfkdpyv64: /tmp/tmpfkdpyv64.cpp:22: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    //\
    \ Your code here\n    long sum = 0;\n    for (auto i : operations) {\n       \
    \ sum += i;\n    }\n    if (sum < 0)\n        return true;\n    return false;\n\
    }\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmp4mfjr9kg: /tmp/tmp4mfjr9kg.cpp:24: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    long\
    \ balance = 0;\n    for (auto op : operations) {\n        balance += op;\n   \
    \     if (balance < 0) {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    //\
    \ Your code here\n    long sum = 0;\n    for (auto i : operations) {\n       \
    \ sum += i;\n    }\n    if (sum < 0)\n        return false;\n    return true;\n\
    }\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmp0cxxbrky: /tmp/tmp0cxxbrky.cpp:22: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    int\
    \ sum = 0;\n    for (auto i : operations) {\n        sum += i;\n    }\n    return\
    \ sum < 0;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmp588zqxj2: /tmp/tmp588zqxj2.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    //\
    \ Your code here\n    long sum = 0;\n    for (auto i : operations) {\n       \
    \ sum += i;\n    }\n    if (sum < 0)\n        return false;\n    return true;\n\
    }\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpn4lb2p_h: /tmp/tmpn4lb2p_h.cpp:22: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    //\
    \ Your code here\n    long sum = 0;\n    for (auto i : operations) {\n       \
    \ sum += i;\n    }\n    if (sum < 0)\n        return false;\n    return true;\n\
    }\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmp8j7nqchw: /tmp/tmp8j7nqchw.cpp:22: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    long\
    \ balance = operations.front();\n    for (long i : operations) {\n        if (i\
    \ < 0) {\n            return false;\n        }\n        balance += i;\n    }\n\
    \    return balance < 0;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -3, 1, 2, -3}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1, -1,\
    \ 2, -2, 5, -5, 4, -4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 2, -2, 5, -5, 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ -2, 2, -2, 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    //\
    \ Your code here\n    long sum = 0;\n    for (auto i : operations) {\n       \
    \ sum += i;\n    }\n    if (sum < 0)\n        return false;\n    return true;\n\
    }\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpx6pz0ief: /tmp/tmpx6pz0ief.cpp:22: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    long\
    \ balance = 0;\n    for (long i = 0; i < operations.size(); i++) {\n        balance\
    \ += operations[i];\n        if (balance < 0) {\n            return true;\n  \
    \      }\n    }\n    return false;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -3, 1, 2, -3}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1, -1,\
    \ 2, -2, 5, -5, 4, -4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 2, -2, 5, -5, 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ -2, 2, -2, 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    int\
    \ sum = 0;\n    for (auto i : operations) {\n        sum += i;\n    }\n    return\
    \ sum < 0;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpu8zd19_1: /tmp/tmpu8zd19_1.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    long\
    \ sum = 0;\n    for (auto i : operations) {\n        sum += i;\n    }\n    if\
    \ (sum < 0)\n        return false;\n    return true;\n}\nint main() {\n    auto\
    \ candidate = below_zero;\n    assert(candidate((std::vector<long>())) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) == (true));\n   \
    \ assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, -2, 2, -2, 5, -5, 4, -4}))) == (true));\n\
    }\n"
  stdout: ''
  stderr: "tmp8z1ktkbc: /tmp/tmp8z1ktkbc.cpp:21: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    //\
    \ Your code here\n    long sum = 0;\n    for (long i = 0; i < operations.size();\
    \ i++) {\n        sum += operations[i];\n    }\n    if (sum < 0) {\n        return\
    \ false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -3, 1, 2, -3}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1, -1,\
    \ 2, -2, 5, -5, 4, -4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 2, -2, 5, -5, 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ -2, 2, -2, 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpop0gbu_5: /tmp/tmpop0gbu_5.cpp:23: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    long\
    \ sum = 0;\n    for (auto &op : operations) {\n        sum += op;\n    }\n   \
    \ if (sum < 0)\n        return false;\n    return true;\n}\nint main() {\n   \
    \ auto candidate = below_zero;\n    assert(candidate((std::vector<long>())) ==\
    \ (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3}))) ==\
    \ (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, -2, 2, -2, 5, -5, 4, -4}))) == (true));\n\
    }\n"
  stdout: ''
  stderr: "tmp3n2t1xpo: /tmp/tmp3n2t1xpo.cpp:21: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    long\
    \ balance = 0;\n    for (auto i : operations) {\n        balance += i;\n     \
    \   if (balance < 0) {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    long\
    \ balance = operations[0];\n    for (long i = 1; i < operations.size(); i++) {\n\
    \        if (operations[i] < 0) {\n            return false;\n        }\n    \
    \    balance += operations[i];\n        if (balance < 0) {\n            return\
    \ true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = below_zero;\n    assert(candidate((std::vector<long>())) == (false));\n  \
    \  assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) == (true));\n   \
    \ assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, -2, 2, -2, 5, -5, 4, -4}))) == (true));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    //\
    \ Your code here\n    long sum = 0;\n    for (long i = 0; i < operations.size();\
    \ i++) {\n        sum += operations[i];\n    }\n    if (sum < 0) {\n        return\
    \ true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -3, 1, 2, -3}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1, -1,\
    \ 2, -2, 5, -5, 4, -4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 2, -2, 5, -5, 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ -2, 2, -2, 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmp0k16aymx: /tmp/tmp0k16aymx.cpp:25: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    //\
    \ Your code here\n    long sum = 0;\n    long sum2 = 0;\n    for (auto i : operations)\
    \ {\n        sum += i;\n        sum2 += i;\n    }\n    if (sum < 0)\n        return\
    \ true;\n    if (sum2 > 0)\n        return false;\n    if (sum == 0)\n       \
    \ return true;\n    return false;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -3, 1, 2, -3}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1, -1,\
    \ 2, -2, 5, -5, 4, -4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 2, -2, 5, -5, 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ -2, 2, -2, 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmp7jejhjl7: /tmp/tmp7jejhjl7.cpp:28: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    long\
    \ balance = 0;\n    for (auto op : operations) {\n        balance += op;\n   \
    \     if (balance < 0) {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    long\
    \ balance = operations[0];\n    for (long i = 1; i < operations.size(); i++) {\n\
    \        balance += operations[i];\n        if (balance < 0) {\n            return\
    \ true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = below_zero;\n    assert(candidate((std::vector<long>())) == (false));\n  \
    \  assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) == (true));\n   \
    \ assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, -2, 2, -2, 5, -5, 4, -4}))) == (true));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    long\
    \ balance = operations.front();\n    for (long i = operations.size() - 1; i >=\
    \ 0; i--) {\n        balance += operations[i];\n        if (balance < 0) {\n \
    \           return true;\n        }\n    }\n    return false;\n}\nint main() {\n\
    \    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    //\
    \ Your code here\n    long sum = 0;\n    for (long i = 0; i < operations.size();\
    \ i++) {\n        sum += operations[i];\n    }\n    if (sum < 0) {\n        return\
    \ true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -3, 1, 2, -3}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1, -1,\
    \ 2, -2, 5, -5, 4, -4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 2, -2, 5, -5, 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ -2, 2, -2, 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmp6kq5vevb: /tmp/tmp6kq5vevb.cpp:25: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    long\
    \ balance = 0;\n    for (auto i : operations) {\n        balance += i;\n    }\n\
    \    if (balance < 0) {\n        return false;\n    }\n    return true;\n}\nint\
    \ main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpa1tmwebo: /tmp/tmpa1tmwebo.cpp:22: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    long\
    \ balance = 0;\n    for (long i = 0; i < operations.size(); i++) {\n        balance\
    \ += operations[i];\n        if (balance < 0) {\n            return true;\n  \
    \      }\n    }\n    return false;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -3, 1, 2, -3}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1, -1,\
    \ 2, -2, 5, -5, 4, -4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 2, -2, 5, -5, 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ -2, 2, -2, 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    //\
    \ Your code goes here\n    long sum = 0;\n    for (long i = 0; i < operations.size();\
    \ i++) {\n        sum += operations[i];\n    }\n    if (sum < 0) {\n        return\
    \ false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -3, 1, 2, -3}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1, -1,\
    \ 2, -2, 5, -5, 4, -4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 2, -2, 5, -5, 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ -2, 2, -2, 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpvrjjz0qg: /tmp/tmpvrjjz0qg.cpp:23: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    long\
    \ balance = operations.front();\n    for (auto i : operations) {\n        if (balance\
    \ < 0)\n            return true;\n        balance -= i;\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    long\
    \ balance = operations.front();\n    for (long i : operations) {\n        if (i\
    \ < 0) {\n            return false;\n        }\n        balance -= i;\n    }\n\
    \    return balance < 0;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -3, 1, 2, -3}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1, -1,\
    \ 2, -2, 5, -5, 4, -4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 2, -2, 5, -5, 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ -2, 2, -2, 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    long\
    \ balance = 0;\n    for (auto i : operations) {\n        balance += i;\n     \
    \   if (balance < 0) {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    long\
    \ balance = operations.front();\n    for (long i = 0; i < operations.size(); i++)\
    \ {\n        if (operations[i] < 0)\n            return true;\n        balance\
    \ -= operations[i];\n        if (balance < 0)\n            return true;\n    }\n\
    \    return false;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    long\
    \ balance = operations[0];\n    for (long i = 1; i < operations.size(); i++) {\n\
    \        if (operations[i] < balance) {\n            return true;\n        }\n\
    \        balance -= operations[i];\n    }\n    return false;\n}\nint main() {\n\
    \    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    long\
    \ balance = 0;\n    for (auto op : operations) {\n        balance += op;\n   \
    \     if (balance < 0) {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    int\
    \ sum = 0;\n    for (auto i : operations) {\n        sum += i;\n    }\n    if\
    \ (sum < 0) {\n        return false;\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmp6uuiqpmg: /tmp/tmp6uuiqpmg.cpp:22: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    //\
    \ Your code here\n    long sum = 0;\n    for (auto i : operations) {\n       \
    \ sum += i;\n    }\n    if (sum < 0)\n        return true;\n    return false;\n\
    }\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmp2uzb8gau: /tmp/tmp2uzb8gau.cpp:24: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    int\
    \ n = operations.size();\n    long balance = 0;\n    for (int i = 0; i < n; i++)\
    \ {\n        balance += operations[i];\n        if (balance < 0) {\n         \
    \   return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto\
    \ candidate = below_zero;\n    assert(candidate((std::vector<long>())) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) == (true));\n   \
    \ assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, -2, 2, -2, 5, -5, 4, -4}))) == (true));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    long\
    \ balance = 0;\n    for (auto i : operations) {\n        balance += i;\n     \
    \   if (balance < 0) {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    //\
    \ Your code goes here\n    long sum = 0;\n    for (long i = 0; i < operations.size();\
    \ i++) {\n        sum += operations[i];\n    }\n    if (sum < 0) {\n        return\
    \ false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -3, 1, 2, -3}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1, -1,\
    \ 2, -2, 5, -5, 4, -4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 2, -2, 5, -5, 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ -2, 2, -2, 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpx_2dmw9x: /tmp/tmpx_2dmw9x.cpp:23: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    //\
    \ Your code here\n    long sum = 0;\n    for (long i = 0; i < operations.size();\
    \ i++) {\n        sum += operations[i];\n    }\n    if (sum < 0) {\n        return\
    \ false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -3, 1, 2, -3}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1, -1,\
    \ 2, -2, 5, -5, 4, -4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 2, -2, 5, -5, 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ -2, 2, -2, 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpwc78irkf: /tmp/tmpwc78irkf.cpp:23: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    long\
    \ balance = operations[0];\n    for (long i = 1; i < operations.size(); i++) {\n\
    \        balance += operations[i];\n        if (balance < 0) {\n            return\
    \ true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = below_zero;\n    assert(candidate((std::vector<long>())) == (false));\n  \
    \  assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) == (true));\n   \
    \ assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, -2, 2, -2, 5, -5, 4, -4}))) == (true));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    long\
    \ balance = 0;\n    for (auto i : operations) {\n        balance += i;\n     \
    \   if (balance < 0) {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    //\
    \ Your code here\n    long sum = 0;\n    for (auto &i : operations) {\n      \
    \  sum += i;\n    }\n    if (sum < 0)\n        return false;\n    return true;\n\
    }\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmp_wk4o2q8: /tmp/tmp_wk4o2q8.cpp:22: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    //\
    \ Your code here\n    long sum = 0;\n    for(long i = 0; i < operations.size();\
    \ i++){\n        sum += operations[i];\n    }\n    if(sum < 0){\n        return\
    \ true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -3, 1, 2, -3}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1, -1,\
    \ 2, -2, 5, -5, 4, -4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 2, -2, 5, -5, 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ -2, 2, -2, 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpnqm0f04a: /tmp/tmpnqm0f04a.cpp:25: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    long\
    \ balance = 0;\n    for (auto op : operations) {\n        balance += op;\n   \
    \     if (balance < 0) {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    long\
    \ balance = operations.front();\n    for (long i : operations) {\n        if (i\
    \ < 0) {\n            return false;\n        }\n        balance += i;\n    }\n\
    \    return balance < 0;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -3, 1, 2, -3}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1, -1,\
    \ 2, -2, 5, -5, 4, -4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 2, -2, 5, -5, 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ -2, 2, -2, 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    //\
    \ Your code here\n    long sum = 0;\n    for (auto &i : operations) {\n      \
    \  sum += i;\n    }\n    if (sum < 0) {\n        return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpo1cc_xby: /tmp/tmpo1cc_xby.cpp:23: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    long\
    \ balance = 0;\n    for (auto i : operations) {\n        balance += i;\n     \
    \   if (balance < 0) {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    //\
    \ Your code here\n    long sum = 0;\n    for (auto i : operations) {\n       \
    \ sum += i;\n    }\n    if (sum < 0) {\n        return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpnfij4uth: /tmp/tmpnfij4uth.cpp:23: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    int\
    \ sum = 0;\n    for(int i = 0; i < operations.size(); i++){\n        sum += operations[i];\n\
    \    }\n    if(sum < 0){\n        return true;\n    }\n    return false;\n}\n\
    int main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpz28niusg: /tmp/tmpz28niusg.cpp:24: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    int\
    \ sum = 0;\n    for (auto i : operations) {\n        sum += i;\n    }\n    return\
    \ sum < 0;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpz73_qsp7: /tmp/tmpz73_qsp7.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    long\
    \ balance = 0;\n    for (auto &op : operations) {\n        balance += op;\n  \
    \      if (balance < 0) {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    //\
    \ Your code goes here\n    long sum = 0;\n    for (long i = 0; i < operations.size();\
    \ i++) {\n        sum += operations[i];\n    }\n    if (sum < 0) {\n        return\
    \ false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -3, 1, 2, -3}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1, -1,\
    \ 2, -2, 5, -5, 4, -4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 2, -2, 5, -5, 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ -2, 2, -2, 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpr5u98hlf: /tmp/tmpr5u98hlf.cpp:23: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    long\
    \ balance = operations.front();\n    for (long i = operations.size() - 1; i >=\
    \ 0; i--) {\n        balance += operations[i];\n        if (balance < 0) {\n \
    \           return true;\n        }\n    }\n    return false;\n}\nint main() {\n\
    \    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    //\
    \ Your code here\n    long sum = 0;\n    for (long i = 0; i < operations.size();\
    \ i++) {\n        sum += operations[i];\n    }\n    if (sum < 0)\n        return\
    \ false;\n    return true;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -3, 1, 2, -3}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1, -1,\
    \ 2, -2, 5, -5, 4, -4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 2, -2, 5, -5, 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ -2, 2, -2, 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpidm3buhy: /tmp/tmpidm3buhy.cpp:22: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    int\
    \ n = operations.size();\n    long balance = 0;\n    for (int i = 0; i < n; i++)\
    \ {\n        balance += operations[i];\n        if (balance < 0) {\n         \
    \   return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto\
    \ candidate = below_zero;\n    assert(candidate((std::vector<long>())) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) == (true));\n   \
    \ assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, -2, 2, -2, 5, -5, 4, -4}))) == (true));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    long\
    \ balance = operations[0];\n    for (long i = 1; i < operations.size(); i++) {\n\
    \        balance += operations[i];\n        if (balance < 0) {\n            return\
    \ true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = below_zero;\n    assert(candidate((std::vector<long>())) == (false));\n  \
    \  assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) == (true));\n   \
    \ assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, -2, 2, -2, 5, -5, 4, -4}))) == (true));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    long\
    \ balance = operations.front();\n    for (long i : operations) {\n        if (i\
    \ < 0) {\n            return false;\n        }\n        balance += i;\n    }\n\
    \    return balance < 0;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -3, 1, 2, -3}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1, -1,\
    \ 2, -2, 5, -5, 4, -4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 2, -2, 5, -5, 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ -2, 2, -2, 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    long\
    \ balance = 0;\n    for (auto i : operations) {\n        balance += i;\n     \
    \   if (balance < 0) {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    long\
    \ sum = 0;\n    for (auto i : operations) {\n        sum += i;\n    }\n    if\
    \ (sum < 0) {\n        return false;\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpy4u416fl: /tmp/tmpy4u416fl.cpp:22: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    int\
    \ n = operations.size();\n    long balance = 0;\n    for (int i = 0; i < n; i++)\
    \ {\n        balance += operations[i];\n        if (balance < 0) {\n         \
    \   return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto\
    \ candidate = below_zero;\n    assert(candidate((std::vector<long>())) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) == (true));\n   \
    \ assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, -2, 2, -2, 5, -5, 4, -4}))) == (true));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    int\
    \ sum = 0;\n    for (int i = 0; i < operations.size(); i++) {\n        sum +=\
    \ operations[i];\n    }\n    if (sum < 0) {\n        return false;\n    }\n  \
    \  return true;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpvn3j_z0_: /tmp/tmpvn3j_z0_.cpp:22: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    long\
    \ balance = operations.front();\n    for (long i = 1, size = operations.size();\
    \ i < size; i++) {\n        balance += operations[i];\n        if (balance < 0)\
    \ {\n            return true;\n        }\n    }\n    return false;\n}\nint main()\
    \ {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    long\
    \ balance = 0;\n    for (auto i : operations) {\n        balance += i;\n     \
    \   if (balance < 0) {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    //\
    \ Your code here\n    long sum = 0;\n    for (auto i : operations) {\n       \
    \ sum += i;\n    }\n    if (sum < 0) {\n        return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmp43l92lwp: /tmp/tmp43l92lwp.cpp:23: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    long\
    \ balance = 0;\n    for (auto op : operations) {\n        balance += op;\n   \
    \     if (balance < 0) {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    long\
    \ balance = operations.front();\n    for (long i = 0; i < operations.size() -\
    \ 1; i++) {\n        balance += operations[i];\n        if (balance < 0) {\n \
    \           return true;\n        }\n    }\n    return false;\n}\nint main() {\n\
    \    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    int\
    \ sum = 0;\n    for (int i = 0; i < operations.size(); i++) {\n        sum +=\
    \ operations[i];\n    }\n    return sum < 0;\n}\nint main() {\n    auto candidate\
    \ = below_zero;\n    assert(candidate((std::vector<long>())) == (false));\n  \
    \  assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) == (true));\n   \
    \ assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, -2, 2, -2, 5, -5, 4, -4}))) == (true));\n\
    }\n"
  stdout: ''
  stderr: "tmpsd483dyy: /tmp/tmpsd483dyy.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    //\
    \ Your code goes here\n    long sum = 0;\n    for (long i = 0; i < operations.size();\
    \ i++) {\n        sum += operations[i];\n    }\n    if (sum < 0) {\n        return\
    \ false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -3, 1, 2, -3}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1, -1,\
    \ 2, -2, 5, -5, 4, -4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 2, -2, 5, -5, 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ -2, 2, -2, 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpj_w17hq2: /tmp/tmpj_w17hq2.cpp:23: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    long\
    \ balance = operations.front();\n    for (long i = operations.size() - 1; i >=\
    \ 0; i--) {\n        balance += operations[i];\n        if (balance < 0) {\n \
    \           return true;\n        }\n    }\n    return false;\n}\nint main() {\n\
    \    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    int\
    \ sum = 0;\n    for(int i = 0; i < operations.size(); i++){\n        sum += operations[i];\n\
    \    }\n    return sum < 0;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -3, 1, 2, -3}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1, -1,\
    \ 2, -2, 5, -5, 4, -4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 2, -2, 5, -5, 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ -2, 2, -2, 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpe2ov533e: /tmp/tmpe2ov533e.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    long\
    \ sum = 0;\n    for (auto i : operations) {\n        sum += i;\n    }\n    if\
    \ (sum < 0)\n        return false;\n    return true;\n}\nint main() {\n    auto\
    \ candidate = below_zero;\n    assert(candidate((std::vector<long>())) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) == (true));\n   \
    \ assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, -2, 2, -2, 5, -5, 4, -4}))) == (true));\n\
    }\n"
  stdout: ''
  stderr: "tmpx54o8ir2: /tmp/tmpx54o8ir2.cpp:21: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    long\
    \ balance = 0;\n    for (auto i : operations) {\n        balance += i;\n     \
    \   if (balance < 0) {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    long\
    \ balance = operations.front();\n    for (long i = operations.size() - 1; i >=\
    \ 0; i--) {\n        balance += operations[i];\n        if (balance < 0) {\n \
    \           return true;\n        }\n    }\n    return false;\n}\nint main() {\n\
    \    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    //\
    \ Your code here\n    long sum = 0;\n    for (auto i : operations) {\n       \
    \ sum += i;\n    }\n    if (sum < 0) {\n        return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmp573_orm7: /tmp/tmp573_orm7.cpp:23: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    int\
    \ sum = 0;\n    for (int i = 0; i < operations.size(); i++) {\n        sum +=\
    \ operations[i];\n    }\n    if (sum < 0) {\n        return false;\n    }\n  \
    \  return true;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmp_buu05r0: /tmp/tmp_buu05r0.cpp:22: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    int\
    \ sum = 0;\n    for (auto i : operations) {\n        sum += i;\n    }\n    if\
    \ (sum < 0)\n        return false;\n    return true;\n}\nint main() {\n    auto\
    \ candidate = below_zero;\n    assert(candidate((std::vector<long>())) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) == (true));\n   \
    \ assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, -2, 2, -2, 5, -5, 4, -4}))) == (true));\n\
    }\n"
  stdout: ''
  stderr: "tmp70ekcb0u: /tmp/tmp70ekcb0u.cpp:21: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    //\
    \ Your code here\n    long sum = 0;\n    for (auto i : operations) {\n       \
    \ sum += i;\n    }\n    if (sum < 0)\n        return false;\n    return true;\n\
    }\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmphj_vhwrz: /tmp/tmphj_vhwrz.cpp:22: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    int\
    \ sum = 0;\n    for (int i = 0; i < operations.size(); i++) {\n        sum +=\
    \ operations[i];\n    }\n    if (sum < 0) {\n        return false;\n    }\n  \
    \  return true;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpfs_x8gmx: /tmp/tmpfs_x8gmx.cpp:22: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    long\
    \ balance = operations.front();\n    for (long i = operations.size() - 1; i >=\
    \ 0; i--) {\n        balance += operations[i];\n        if (balance < 0) {\n \
    \           return true;\n        }\n    }\n    return false;\n}\nint main() {\n\
    \    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    long\
    \ balance = operations.front();\n    for (long i : operations) {\n        if (i\
    \ < 0) {\n            return true;\n        }\n        balance += i;\n       \
    \ if (balance < 0) {\n            return true;\n        }\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    //\
    \ Your code here\n    long sum = 0;\n    for (auto i : operations) {\n       \
    \ sum += i;\n    }\n    if (sum < 0)\n        return true;\n    return false;\n\
    }\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpoipbph4o: /tmp/tmpoipbph4o.cpp:24: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    int\
    \ sum = 0;\n    for (auto i : operations) {\n        sum += i;\n    }\n    return\
    \ sum < 0;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmppgxhjzhp: /tmp/tmppgxhjzhp.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    //\
    \ Your code here\n    long sum = 0;\n    for(auto i : operations){\n        sum\
    \ += i;\n    }\n    return sum < 0;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -3, 1, 2, -3}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1, -1,\
    \ 2, -2, 5, -5, 4, -4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 2, -2, 5, -5, 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ -2, 2, -2, 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmp7em4koh2: /tmp/tmp7em4koh2.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    int\
    \ sum = 0;\n    for (auto i : operations) {\n        sum += i;\n    }\n    if\
    \ (sum < 0) {\n        return false;\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpye5glwru: /tmp/tmpye5glwru.cpp:22: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    //\
    \ Your code here\n    long sum = 0;\n    for (auto i : operations) {\n       \
    \ sum += i;\n    }\n    if (sum < 0) {\n        return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmp2dm2a851: /tmp/tmp2dm2a851.cpp:23: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    int\
    \ sum = 0;\n    for (auto i : operations) {\n        sum += i;\n    }\n    return\
    \ sum < 0;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpz96il0an: /tmp/tmpz96il0an.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    long\
    \ balance = 0;\n    for (auto op : operations) {\n        balance += op;\n   \
    \     if (balance < 0) {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    //\
    \ Your code here\n    long sum = 0;\n    for(long i = 0; i < operations.size();\
    \ i++){\n        sum += operations[i];\n    }\n    if(sum < 0){\n        return\
    \ true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -3, 1, 2, -3}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1, -1,\
    \ 2, -2, 5, -5, 4, -4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 2, -2, 5, -5, 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ -2, 2, -2, 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpcfsoff7z: /tmp/tmpcfsoff7z.cpp:25: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    //\
    \ Your code here\n    long sum = 0;\n    for (long i = 0; i < operations.size();\
    \ i++) {\n        sum += operations[i];\n    }\n    if (sum < 0) {\n        return\
    \ false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -3, 1, 2, -3}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1, -1,\
    \ 2, -2, 5, -5, 4, -4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 2, -2, 5, -5, 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ -2, 2, -2, 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmp2igfijjo: /tmp/tmp2igfijjo.cpp:23: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    int\
    \ n = operations.size();\n    long balance = 0;\n    long sum = 0;\n    for (int\
    \ i = 0; i < n; i++) {\n        sum += operations[i];\n        balance += operations[i];\n\
    \    }\n    if (balance < 0) {\n        return false;\n    }\n    if (sum < 0)\
    \ {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto\
    \ candidate = below_zero;\n    assert(candidate((std::vector<long>())) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) == (true));\n   \
    \ assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, -2, 2, -2, 5, -5, 4, -4}))) == (true));\n\
    }\n"
  stdout: ''
  stderr: "tmp_gwssq2t: /tmp/tmp_gwssq2t.cpp:30: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    //\
    \ Your code goes here\n    long sum = 0;\n    for (auto i : operations) {\n  \
    \      sum += i;\n    }\n    return sum < 0;\n}\nint main() {\n    auto candidate\
    \ = below_zero;\n    assert(candidate((std::vector<long>())) == (false));\n  \
    \  assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) == (true));\n   \
    \ assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, -2, 2, -2, 5, -5, 4, -4}))) == (true));\n\
    }\n"
  stdout: ''
  stderr: "tmpiw68g4wb: /tmp/tmpiw68g4wb.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    //\
    \ Your code here\n    long sum = 0;\n    for(auto i : operations){\n        sum\
    \ += i;\n    }\n    if(sum < 0){\n        return true;\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpmgnrf412: /tmp/tmpmgnrf412.cpp:25: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    long\
    \ sum = 0;\n    for (auto i : operations) {\n        sum += i;\n    }\n    return\
    \ sum < 0;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpxyfphsyr: /tmp/tmpxyfphsyr.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    int\
    \ sum = 0;\n    for (auto i : operations) {\n        sum += i;\n    }\n    if\
    \ (sum < 0)\n        return false;\n    return true;\n}\nint main() {\n    auto\
    \ candidate = below_zero;\n    assert(candidate((std::vector<long>())) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) == (true));\n   \
    \ assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, -2, 2, -2, 5, -5, 4, -4}))) == (true));\n\
    }\n"
  stdout: ''
  stderr: "tmp2begwi_h: /tmp/tmp2begwi_h.cpp:21: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    long\
    \ balance = 0;\n    for (auto i : operations) {\n        balance += i;\n    }\n\
    \    return balance < 0;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -3, 1, 2, -3}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1, -1,\
    \ 2, -2, 5, -5, 4, -4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 2, -2, 5, -5, 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ -2, 2, -2, 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmp4ey1j49g: /tmp/tmp4ey1j49g.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    long\
    \ balance = 0;\n    for (auto i : operations) {\n        balance += i;\n     \
    \   if (balance < 0) {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    //\
    \ Your code here\n    long sum = 0;\n    for (long i = 0; i < operations.size();\
    \ i++) {\n        sum += operations[i];\n    }\n    if (sum < 0) {\n        return\
    \ true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -3, 1, 2, -3}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1, -1,\
    \ 2, -2, 5, -5, 4, -4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 2, -2, 5, -5, 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ -2, 2, -2, 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpgzxkc_yp: /tmp/tmpgzxkc_yp.cpp:25: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    long\
    \ balance = 0;\n    for (long i = 0; i < operations.size(); i++) {\n        balance\
    \ += operations[i];\n        if (balance < 0) {\n            return true;\n  \
    \      }\n    }\n    return false;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -3, 1, 2, -3}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1, -1,\
    \ 2, -2, 5, -5, 4, -4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 2, -2, 5, -5, 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ -2, 2, -2, 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    //\
    \ Your code here\n    long sum = 0;\n    for (long i = 0; i < operations.size();\
    \ i++) {\n        sum += operations[i];\n    }\n    if (sum < 0)\n        return\
    \ false;\n    return true;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -3, 1, 2, -3}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1, -1,\
    \ 2, -2, 5, -5, 4, -4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 2, -2, 5, -5, 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ -2, 2, -2, 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmp1lakniaa: /tmp/tmp1lakniaa.cpp:22: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    int\
    \ n = operations.size();\n    long sum = 0;\n    for (int i = 0; i < n; i++) {\n\
    \        sum += operations[i];\n    }\n    if (sum < 0) {\n        return false;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -3, 1, 2, -3}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1, -1,\
    \ 2, -2, 5, -5, 4, -4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 2, -2, 5, -5, 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ -2, 2, -2, 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpjhwqy4ew: /tmp/tmpjhwqy4ew.cpp:23: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    long\
    \ sum = 0;\n    for (auto i : operations) {\n        sum += i;\n    }\n    return\
    \ sum < 0;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpcyqmrj3e: /tmp/tmpcyqmrj3e.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    long\
    \ balance = 0;\n    for (auto op : operations) {\n        balance += op;\n   \
    \     if (balance < 0) {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    int\
    \ sum = 0;\n    for (int i = 0; i < operations.size(); i++) {\n        sum +=\
    \ operations[i];\n    }\n    return sum < 0;\n}\nint main() {\n    auto candidate\
    \ = below_zero;\n    assert(candidate((std::vector<long>())) == (false));\n  \
    \  assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) == (true));\n   \
    \ assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, -2, 2, -2, 5, -5, 4, -4}))) == (true));\n\
    }\n"
  stdout: ''
  stderr: "tmpwdyknj84: /tmp/tmpwdyknj84.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    long\
    \ balance = 0;\n    for (long i = 0; i < operations.size(); i++) {\n        balance\
    \ += operations[i];\n        if (balance < 0) {\n            return true;\n  \
    \      }\n    }\n    return false;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -3, 1, 2, -3}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1, -1,\
    \ 2, -2, 5, -5, 4, -4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 2, -2, 5, -5, 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ -2, 2, -2, 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    //\
    \ Your code goes here\n    long sum = 0;\n    for (auto i : operations) {\n  \
    \      sum += i;\n    }\n    if (sum < 0)\n        return true;\n    return false;\n\
    }\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpz069qle9: /tmp/tmpz069qle9.cpp:24: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    //\
    \ Your code here\n    long sum = 0;\n    for(long i = 0; i < operations.size();\
    \ i++){\n        sum += operations[i];\n    }\n    if(sum < 0){\n        return\
    \ true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -3, 1, 2, -3}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1, -1,\
    \ 2, -2, 5, -5, 4, -4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 2, -2, 5, -5, 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ -2, 2, -2, 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpgc6smuli: /tmp/tmpgc6smuli.cpp:25: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    //\
    \ Your code here\n    long sum = 0;\n    for (long i = 0; i < operations.size();\
    \ i++) {\n        sum += operations[i];\n    }\n    if (sum < 0) {\n        return\
    \ false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -3, 1, 2, -3}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1, -1,\
    \ 2, -2, 5, -5, 4, -4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 2, -2, 5, -5, 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ -2, 2, -2, 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmp0r204y75: /tmp/tmp0r204y75.cpp:23: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    long\
    \ balance = 0;\n    for (auto &op : operations) {\n        balance += op;\n  \
    \      if (balance < 0) {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    long\
    \ balance = operations.front();\n    for (long i = operations.size() - 1; i >=\
    \ 0; i--) {\n        balance += operations[i];\n        if (balance < 0) {\n \
    \           return true;\n        }\n    }\n    return false;\n}\nint main() {\n\
    \    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    long\
    \ balance = 0;\n    for (auto op : operations) {\n        balance += op;\n   \
    \     if (balance < 0) {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    long\
    \ balance = 0;\n    for (auto i : operations) {\n        balance += i;\n     \
    \   if (balance < 0) {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    //\
    \ Your code here\n    long sum = 0;\n    long balance = 0;\n    for (long i =\
    \ 0; i < operations.size(); i++) {\n        sum += operations[i];\n        balance\
    \ += operations[i];\n    }\n    if (balance < 0) {\n        return true;\n   \
    \ }\n    return false;\n}\nint main() {\n    auto candidate = below_zero;\n  \
    \  assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -3, 1, 2, -3}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1, -1,\
    \ 2, -2, 5, -5, 4, -4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 2, -2, 5, -5, 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ -2, 2, -2, 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmp7cgj8_zq: /tmp/tmp7cgj8_zq.cpp:27: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    //\
    \ Your code here\n    long sum = 0;\n    for(long i = 0; i < operations.size();\
    \ i++){\n        sum += operations[i];\n    }\n    if(sum < 0){\n        return\
    \ true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -3, 1, 2, -3}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1, -1,\
    \ 2, -2, 5, -5, 4, -4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 2, -2, 5, -5, 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ -2, 2, -2, 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmp19zu3yd4: /tmp/tmp19zu3yd4.cpp:25: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    long\
    \ balance = 0;\n    for (auto &op : operations) {\n        balance += op;\n  \
    \      if (balance < 0) {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    int\
    \ n = operations.size();\n    long balance = 0;\n    for (int i = 0; i < n; i++)\
    \ {\n        balance += operations[i];\n        if (balance < 0) {\n         \
    \   return true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto\
    \ candidate = below_zero;\n    assert(candidate((std::vector<long>())) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) == (true));\n   \
    \ assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, -2, 2, -2, 5, -5, 4, -4}))) == (true));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    long\
    \ balance = 0;\n    for (auto op : operations) {\n        balance += op;\n   \
    \     if (balance < 0) {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    int\
    \ sum = 0;\n    for (int i = 0; i < operations.size(); i++) {\n        sum +=\
    \ operations[i];\n    }\n    return sum < 0;\n}\nint main() {\n    auto candidate\
    \ = below_zero;\n    assert(candidate((std::vector<long>())) == (false));\n  \
    \  assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) == (true));\n   \
    \ assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, -2, 2, -2, 5, -5, 4, -4}))) == (true));\n\
    }\n"
  stdout: ''
  stderr: "tmp8ypg7sld: /tmp/tmp8ypg7sld.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    long\
    \ balance = operations.front();\n    for (long i : operations) {\n        if (balance\
    \ < 0)\n            return true;\n        balance -= i;\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    //\
    \ Your code goes here\n    long sum = 0;\n    for (long i = 0; i < operations.size();\
    \ i++) {\n        sum += operations[i];\n    }\n    if (sum < 0) {\n        return\
    \ false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -3, 1, 2, -3}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1, -1,\
    \ 2, -2, 5, -5, 4, -4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 2, -2, 5, -5, 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ -2, 2, -2, 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpydi6yb6l: /tmp/tmpydi6yb6l.cpp:23: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    long\
    \ balance = 0;\n    for (auto i : operations) {\n        balance += i;\n     \
    \   if (balance < 0) {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    int\
    \ sum = 0;\n    for(auto i : operations) {\n        sum += i;\n    }\n    if(sum\
    \ < 0) {\n        return false;\n    }\n    return true;\n}\nint main() {\n  \
    \  auto candidate = below_zero;\n    assert(candidate((std::vector<long>())) ==\
    \ (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3}))) ==\
    \ (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, -2, 2, -2, 5, -5, 4, -4}))) == (true));\n\
    }\n"
  stdout: ''
  stderr: "tmp5wae6px7: /tmp/tmp5wae6px7.cpp:22: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    int\
    \ sum = 0;\n    for (int i = 0; i < operations.size(); i++) {\n        sum +=\
    \ operations[i];\n    }\n    if (sum < 0) {\n        return false;\n    }\n  \
    \  return true;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpl0l7bhss: /tmp/tmpl0l7bhss.cpp:22: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    long\
    \ balance = 0;\n    for (auto op : operations) {\n        balance += op;\n   \
    \     if (balance < 0) {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    long\
    \ balance = operations[0];\n    for (long i = 1; i < operations.size(); i++) {\n\
    \        balance += operations[i];\n        if (balance < 0) {\n            return\
    \ true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = below_zero;\n    assert(candidate((std::vector<long>())) == (false));\n  \
    \  assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) == (true));\n   \
    \ assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4}))) == (false));\n\
    \    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -5}))) == (true));\n\
    \    assert(candidate((std::vector<long>({1, -2, 2, -2, 5, -5, 4, -4}))) == (true));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    long\
    \ balance = operations.front();\n    for (long i : operations) {\n        if (i\
    \ < 0) {\n            return false;\n        }\n        balance += i;\n    }\n\
    \    return balance < 0;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -3, 1, 2, -3}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1, -1,\
    \ 2, -2, 5, -5, 4, -4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 2, -2, 5, -5, 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ -2, 2, -2, 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    //\
    \ Your code goes here\n    long sum = 0;\n    for(long i = 0; i < operations.size();\
    \ i++){\n        sum += operations[i];\n    }\n    if(sum < 0){\n        return\
    \ true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = below_zero;\n\
    \    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -3, 1, 2, -3}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true));\n    assert(candidate((std::vector<long>({1, -1,\
    \ 2, -2, 5, -5, 4, -4}))) == (false));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 2, -2, 5, -5, 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1,\
    \ -2, 2, -2, 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpomf6xrpw: /tmp/tmpomf6xrpw.cpp:25: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, -4, 5, 6}))) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    //\
    \ Your code here\n    long sum = 0;\n    for (auto i : operations) {\n       \
    \ sum += i;\n    }\n    if (sum < 0)\n        return false;\n    return true;\n\
    }\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmp4p0ja0y1: /tmp/tmp4p0ja0y1.cpp:22: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    int\
    \ sum = 0;\n    for (int i = 0; i < operations.size(); i++) {\n        sum +=\
    \ operations[i];\n    }\n    if (sum < 0) {\n        return false;\n    }\n  \
    \  return true;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpp4m6jt3q: /tmp/tmpp4m6jt3q.cpp:22: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a list of\
    \ deposit and withdrawal operations on a bank account that starts with\n// zero\
    \ balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\n// at that point function should return True. Otherwise it\
    \ should return False.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1,\
    \ 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n    long\
    \ sum = 0;\n    for (long i = 0; i < operations.size(); i++) {\n        sum +=\
    \ operations[i];\n    }\n    if (sum < 0) {\n        return false;\n    }\n  \
    \  return true;\n}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>()))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -3, 1, 2, -3})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, 2, -4, 5, 6}))) ==\
    \ (true));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5, 4, -4})))\
    \ == (false));\n    assert(candidate((std::vector<long>({1, -1, 2, -2, 5, -5,\
    \ 4, -5}))) == (true));\n    assert(candidate((std::vector<long>({1, -2, 2, -2,\
    \ 5, -5, 4, -4}))) == (true));\n}\n"
  stdout: ''
  stderr: "tmpxj0yyixo: /tmp/tmpxj0yyixo.cpp:22: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
