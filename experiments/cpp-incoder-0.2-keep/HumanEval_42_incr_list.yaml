name: HumanEval_42_incr_list
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
  \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
  \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
  \ incr_list(std::vector<long> l) {\n"
tests: "}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
  \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({3, 2, 1})))\
  \ == (std::vector<long>({4, 3, 2})));\n    assert(candidate((std::vector<long>({5,\
  \ 2, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1, 124})));\n\
  }\n"
completions: ["    std::vector<long> result;\n    for (long i : l) {\n        result.push_back(i\
    \ + 1);\n    }\n    return result;", "    std::vector<long> res;\n    for (long\
    \ i : l) {\n        res.push_back(i + 1);\n    }\n    return res;", "    std::vector<long>\
    \ ret(l.size());\n    for (long i = 0; i < l.size(); i++) {\n        ret[i] =\
    \ l[i] + 1;\n    }\n    return ret;", "    std::vector<long> res;\n    res.reserve(l.size());\n\
    \    for (long i : l) {\n        res.push_back(i + 1);\n    }\n    return res;",
  "    std::vector<long> ret;\n    ret.reserve(l.size());\n    for (long i : l) {\n\
    \        ret.push_back(i + 1);\n    }\n    return ret;", "    std::vector<long>\
    \ r;\n    for (long i : l) {\n        r.push_back(i + 1);\n    }\n    return r;",
  "    std::vector<long> r;\n    for (long i : l) {\n        r.push_back(i + 1);\n\
    \    }\n    return r;", "    std::vector<long> ret;\n    ret.reserve(l.size());\n\
    \    for (auto it = l.begin(); it != l.end(); ++it) {\n        ret.push_back(*it+1);\n\
    \    }\n    return ret;", "    std::vector<long> res(l.size());\n    for (long\
    \ i = 0; i < l.size(); i++) {\n        res[i] = l[i] + 1;\n    }\n    return res;",
  "    std::vector<long> res;\n    for (long i : l) {\n        res.push_back(i + 1);\n\
    \    }\n    return res;", "    std::vector<long> res;\n    res.reserve(l.size());\n\
    \    for (auto it = l.begin(); it != l.end(); ++it) {\n        res.push_back(*it+1);\n\
    \    }\n    return res;", "    std::vector<long> res;\n    res.reserve(l.size());\n\
    \    for (long i : l) {\n        res.push_back(i + 1);\n    }\n    return res;",
  "    std::vector<long> r;\n    for (long i : l) {\n        r.push_back(i + 1);\n\
    \    }\n    return r;", "    std::vector<long> r;\n    for (long i : l) {\n  \
    \      r.push_back(i + 1);\n    }\n    return r;", "    std::vector<long> r;\n\
    \    for(long i : l) {\n        r.push_back(i + 1);\n    }\n    return r;", " \
    \   std::vector<long> ret;\n    ret.reserve(l.size());\n    for (long i : l) {\n\
    \        ret.push_back(i + 1);\n    }\n    return ret;", "    std::vector<long>\
    \ ret;\n    ret.reserve(l.size());\n    for (long i : l) {\n        ret.push_back(i\
    \ + 1);\n    }\n    return ret;", "    std::vector<long> ret;\n    ret.reserve(l.size());\n\
    \    for (long i : l) {\n        ret.push_back(i + 1);\n    }\n    return ret;",
  "    std::vector<long> ret;\n    ret.reserve(l.size());\n    for (auto it = l.begin();\
    \ it != l.end(); ++it) {\n        ret.push_back(*it);\n        ret.push_back(*(it+1));\n\
    \    }\n    return ret;", "    std::vector<long> ret;\n    ret.reserve(l.size());\n\
    \    for (auto it = l.begin(); it != l.end(); ++it) {\n        ret.push_back(*it+1);\n\
    \    }\n    return ret;", "    std::vector<long> ret;\n    ret.reserve(l.size());\n\
    \    for (auto i : l) {\n        ret.push_back(i + 1);\n    }\n    return ret;",
  "    std::vector<long> ret;\n    ret.reserve(l.size());\n    for (long i : l) {\n\
    \        ret.push_back(i + 1);\n    }\n    return ret;", "    std::vector<long>\
    \ ret;\n    ret.reserve(l.size());\n    for (auto it = l.begin(); it != l.end();\
    \ ++it) {\n        ret.push_back(*it+1);\n    }\n    return ret;", "    std::vector<long>\
    \ ret(l.size());\n    for (size_t i = 0; i < l.size(); i++) {\n        ret[i]\
    \ = l[i] + 1;\n    }\n    return ret;", "    std::vector<long> res;\n    for (long\
    \ i : l) {\n        res.push_back(i + 1);\n    }\n    return res;", "    std::vector<long>\
    \ result;\n    for (long i : l) {\n        result.push_back(i + 1);\n    }\n \
    \   return result;", "    std::vector<long> res(l.size());\n    for (size_t i\
    \ = 0; i < l.size(); i++) {\n        res[i] = l[i] + 1;\n    }\n    return res;",
  "    std::vector<long> ret;\n    ret.reserve(l.size());\n    for (long i : l) {\n\
    \        ret.push_back(i + 1);\n    }\n    return ret;", "    std::vector<long>\
    \ ret(l.size());\n    for (long i = 0; i < l.size(); i++) {\n        ret[i] =\
    \ l[i] + 1;\n    }\n    return ret;", "    std::vector<long> ret(l.size());\n\
    \    for (size_t i = 0; i < l.size(); ++i)\n        ret[i] = l[i] + 1;\n    return\
    \ ret;", "    std::vector<long> res;\n    res.reserve(l.size());\n    for (auto\
    \ it = l.begin(); it != l.end(); ++it) {\n        res.push_back(*it);\n      \
    \  res.push_back(*(it + 1));\n    }\n    return res;", "    std::vector<long>\
    \ ret;\n    ret.reserve(l.size());\n    for (long i : l) {\n        ret.push_back(i\
    \ + 1);\n    }\n    return ret;", "    std::vector<long> res;\n    res.reserve(l.size());\n\
    \    for (long i : l) {\n        res.push_back(i + 1);\n    }\n    return res;",
  "    std::vector<long> r;\n    for (long i : l) {\n        r.push_back(i + 1);\n\
    \    }\n    return r;", "    std::vector<long> ret;\n    ret.reserve(l.size());\n\
    \    for (auto it = l.begin(); it != l.end(); ++it) {\n        ret.push_back(*it+1);\n\
    \    }\n    return ret;", "    std::vector<long> ret;\n    ret.reserve(l.size());\n\
    \    for (long i : l) {\n        ret.push_back(i + 1);\n    }\n    return ret;",
  "    std::vector<long> r;\n    long n = l.size();\n    for (long i = 0; i < n; i++)\
    \ {\n        r.push_back(l.at(i) + 1);\n    }\n    return r;", "    std::vector<long>\
    \ ret;\n    ret.reserve(l.size());\n    for (long i : l) {\n        ret.push_back(i\
    \ + 1);\n    }\n    return ret;", "    std::vector<long> ret(l.size());\n    for\
    \ (long i = 0; i < l.size(); i++) {\n        ret[i] = l[i] + 1;\n    }\n    return\
    \ ret;", "    std::vector<long> ret;\n    ret.reserve(l.size());\n    for (long\
    \ i : l) {\n        ret.push_back(i + 1);\n    }\n    return ret;", "    std::vector<long>\
    \ r;\n    for (long i : l) {\n        r.push_back(i + 1);\n    }\n    return r;",
  "    std::vector<long> ret;\n    ret.reserve(l.size());\n    for (long i : l) {\n\
    \        ret.push_back(i + 1);\n    }\n    return ret;", "    std::vector<long>\
    \ res;\n    res.reserve(l.size());\n    for (long i : l) {\n        res.push_back(i\
    \ + 1);\n    }\n    return res;", "    std::vector<long> res;\n    res.reserve(l.size());\n\
    \    for (long i : l) {\n        res.push_back(i + 1);\n    }\n    return res;",
  "    std::vector<long> ret;\n    ret.reserve(l.size());\n    for (long i : l) {\n\
    \        ret.push_back(i + 1);\n    }\n    return ret;", "    std::vector<long>\
    \ r;\n    r.push_back(l[0]);\n    for (long i = 1, j = l[0]; i <= j; ++i, ++j)\
    \ {\n        r.push_back(i);\n    }\n    return r;", "    std::vector<long> ret;\n\
    \    ret.reserve(l.size());\n    for (long i : l) {\n        ret.push_back(i +\
    \ 1);\n    }\n    return ret;", "    std::vector<long> ret;\n    ret.reserve(l.size());\n\
    \    for (auto i : l) {\n        ret.push_back(i + 1);\n    }\n    return ret;",
  "    std::vector<long> r;\n    for (long i : l) {\n        r.push_back(i + 1);\n\
    \    }\n    return r;", "    std::vector<long> res;\n    res.reserve(l.size());\n\
    \    for (long i : l) {\n        res.push_back(i + 1);\n    }\n    return res;",
  "    std::vector<long> result;\n    for (long i : l) {\n        result.push_back(i\
    \ + 1);\n    }\n    return result;", "    std::vector<long> r;\n    for (auto\
    \ i : l) {\n        r.push_back(i + 1);\n    }\n    return r;", "    std::vector<long>\
    \ res(l.size());\n    for (size_t i = 0; i < l.size(); i++) {\n        res[i]\
    \ = l[i] + 1;\n    }\n    return res;", "    std::vector<long> r;\n    for (long\
    \ i : l) {\n        r.push_back(i + 1);\n    }\n    return r;", "    std::vector<long>\
    \ res;\n    res.reserve(l.size());\n    for (long i : l) {\n        res.push_back(i\
    \ + 1);\n    }\n    return res;", "    std::vector<long> result;\n    for (auto\
    \ it = l.begin(); it != l.end(); ++it) {\n        result.push_back(*it+1);\n \
    \   }\n    return result;", "    std::vector<long> ret;\n    ret.reserve(l.size());\n\
    \    for (long i : l) {\n        ret.push_back(i + 1);\n    }\n    return ret;",
  "    std::vector<long> ret;\n    ret.reserve(l.size());\n    for (long i : l) {\n\
    \        ret.push_back(i + 1);\n    }\n    return ret;", "    std::vector<long>\
    \ r;\n    for (long i : l) {\n        r.push_back(i + 1);\n    }\n    return r;",
  "    std::vector<long> r;\n    long cur = l.front();\n    r.push_back(cur);\n  \
    \  for (long i : l) {\n        r.push_back(i + 1);\n    }\n    return r;", " \
    \   std::vector<long> result;\n    for (auto i : l) {\n        result.push_back(i\
    \ + 1);\n    }\n    return result;", "    std::vector<long> ret;\n    ret.reserve(l.size());\n\
    \    for (long i : l) {\n        ret.push_back(i + 1);\n    }\n    return ret;",
  "    std::vector<long> r;\n    for (long i : l) {\n        r.push_back(i + 1);\n\
    \    }\n    return r;", "    std::vector<long> ret(l.size());\n    for (long i\
    \ = 0; i < l.size(); i++) {\n        ret[i] = l[i] + 1;\n    }\n    return ret;",
  "    std::vector<long> res;\n    res.reserve(l.size());\n    for (long i : l) {\n\
    \        res.push_back(i + 1);\n    }\n    return res;", "    std::vector<long>\
    \ ret(l.size());\n    for (long i = 0; i < l.size(); i++) {\n        ret[i] =\
    \ l[i] + 1;\n    }\n    return ret;", "    std::vector<long> ret;\n    ret.reserve(l.size());\n\
    \    for (long i : l) {\n        ret.push_back(i + 1);\n    }\n    return ret;",
  "    std::vector<long> ret(l.size());\n    for (long i = 0; i < l.size(); i++) {\n\
    \        ret[i] = l[i] + 1;\n    }\n    return ret;", "    std::vector<long> res;\n\
    \    res.reserve(l.size());\n    for (long i : l) {\n        res.push_back(i +\
    \ 1);\n    }\n    return res;", "    std::vector<long> res;\n    res.reserve(l.size());\n\
    \    for (long i : l) {\n        res.push_back(i + 1);\n    }\n    return res;",
  "    std::vector<long> res;\n    res.reserve(l.size());\n    for (auto it = l.begin();\
    \ it != l.end(); ++it) {\n        long val = *it;\n        res.push_back(val +\
    \ 1);\n    }\n    return res;", "    std::vector<long> result;\n    for (long\
    \ i : l) {\n        result.push_back(i + 1);\n    }\n    return result;", "  \
    \  std::vector<long> r;\n    for (long i : l) {\n        r.push_back(i + 1);\n\
    \    }\n    return r;", "    std::vector<long> r;\n    for (long i : l) {\n  \
    \      r.push_back(i + 1);\n    }\n    return r;", "    std::vector<long> res;\n\
    \    for (long i : l) {\n        res.push_back(i + 1);\n    }\n    return res;",
  "    std::vector<long> ret;\n    ret.reserve(l.size());\n    for (long i : l) {\n\
    \        ret.push_back(i + 1);\n    }\n    return ret;", "    std::vector<long>\
    \ res(l.size());\n    for (size_t i = 0; i < l.size(); ++i) {\n        res[i]\
    \ = l[i] + 1;\n    }\n    return res;", "    std::vector<long> result;\n    long\
    \ current = l.front();\n    result.push_back(current);\n    for (long i : l) {\n\
    \        current += i;\n        result.push_back(current);\n    }\n    return\
    \ result;", "    std::vector<long> ret;\n    ret.reserve(l.size());\n    for (long\
    \ i : l) {\n        ret.push_back(i + 1);\n    }\n    return ret;", "    std::vector<long>\
    \ ret;\n    ret.reserve(l.size());\n    for (long i : l) {\n        ret.push_back(i\
    \ + 1);\n    }\n    return ret;", "    std::vector<long> r;\n    for (long i :\
    \ l) {\n        r.push_back(i + 1);\n    }\n    return r;", "    std::vector<long>\
    \ ret;\n    ret.reserve(l.size());\n    for (long i : l) {\n        ret.push_back(i\
    \ + 1);\n    }\n    return ret;", "    std::vector<long> res;\n    res.reserve(l.size());\n\
    \    for (long i : l) {\n        res.push_back(i + 1);\n    }\n    return res;",
  "    std::vector<long> r;\n    for (long i : l) {\n        r.push_back(i + 1);\n\
    \    }\n    return r;", "    std::vector<long> r;\n    long sum = 0;\n    for\
    \ (long i : l) {\n        sum += i;\n        r.push_back(sum);\n    }\n    return\
    \ r;", "    std::vector<long> r;\n    for (long i : l) {\n        r.push_back(i\
    \ + 1);\n    }\n    return r;", "    std::vector<long> ret;\n    ret.reserve(l.size());\n\
    \    for (long i : l) {\n        ret.push_back(i + 1);\n    }\n    return ret;",
  "    std::vector<long> ret;\n    ret.reserve(l.size());\n    for (long i : l) {\n\
    \        ret.push_back(i + 1);\n    }\n    return ret;", "    std::vector<long>\
    \ res(l.size());\n    for (size_t i = 0; i < l.size(); i++) {\n        res[i]\
    \ = l[i] + 1;\n    }\n    return res;", "    std::vector<long> ret;\n    ret.reserve(l.size());\n\
    \    for (auto it = l.begin(); it != l.end(); ++it) {\n        ret.push_back(*it+1);\n\
    \    }\n    return ret;", "    std::vector<long> r;\n    for (auto i : l) {\n\
    \        r.push_back(i + 1);\n    }\n    return r;", "    std::vector<long> ret;\n\
    \    ret.reserve(l.size());\n    for (auto it = l.begin(); it != l.end(); ++it)\
    \ {\n        ret.push_back(*it+1);\n    }\n    return ret;", "    std::vector<long>\
    \ ret;\n    ret.reserve(l.size());\n    for (long i : l) {\n        ret.push_back(i\
    \ + 1);\n    }\n    return ret;", "    std::vector<long> r;\n    for (long i :\
    \ l) {\n        r.push_back(i + 1);\n    }\n    return r;", "    std::vector<long>\
    \ res;\n    res.reserve(l.size());\n    for (auto it = l.begin(); it != l.end();\
    \ ++it) {\n        res.push_back(*it);\n        res.push_back(*(it + 1));\n  \
    \  }\n    return res;", "    std::vector<long> r;\n    for (long i : l) {\n  \
    \      r.push_back(i + 1);\n    }\n    return r;", "    std::vector<long> ret;\n\
    \    ret.reserve(l.size());\n    for (long i : l) {\n        ret.push_back(i +\
    \ 1);\n    }\n    return ret;", "    std::vector<long> res;\n    res.reserve(l.size());\n\
    \    for (long i : l) {\n        res.push_back(i + 1);\n    }\n    return res;",
  "    std::vector<long> ret;\n    ret.reserve(l.size());\n    for (long i : l) {\n\
    \        ret.push_back(i + 1);\n    }\n    return ret;", "    std::vector<long>\
    \ result;\n    result.push_back(l[0]);\n    for (long i = 1, j = l[0]; i <= j;\
    \ i++, j++) {\n        result.push_back(i);\n    }\n    return result;", "   \
    \ std::vector<long> res;\n    res.reserve(l.size());\n    for (long i : l) {\n\
    \        res.push_back(i + 1);\n    }\n    return res;", "    std::vector<long>\
    \ ret;\n    ret.reserve(l.size());\n    for (long i : l) {\n        ret.push_back(i\
    \ + 1);\n    }\n    return ret;", "    std::vector<long> r;\n    for (long i :\
    \ l) {\n        r.push_back(i + 1);\n    }\n    return r;", "    std::vector<long>\
    \ res;\n    for (long i : l) {\n        res.push_back(i + 1);\n    }\n    return\
    \ res;", "    std::vector<long> result;\n    long sum = 0;\n    for (long i :\
    \ l) {\n        sum += i;\n        result.push_back(sum);\n    }\n    return result;",
  "    std::vector<long> res(l.size());\n    for (size_t i = 0; i < l.size(); i++)\
    \ {\n        res[i] = l[i] + 1;\n    }\n    return res;", "    std::vector<long>\
    \ res;\n    for (long i : l) {\n        res.push_back(i + 1);\n    }\n    return\
    \ res;", "    std::vector<long> ret;\n    ret.reserve(l.size());\n    for (long\
    \ i : l) {\n        ret.push_back(i + 1);\n    }\n    return ret;", "    std::vector<long>\
    \ res;\n    res.reserve(l.size());\n    for (long i : l) {\n        res.push_back(i\
    \ + 1);\n    }\n    return res;", "    std::vector<long> res;\n    for (long i\
    \ : l) {\n        res.push_back(i + 1);\n    }\n    return res;", "    std::vector<long>\
    \ ret;\n    ret.reserve(l.size());\n    for (long i : l) {\n        ret.push_back(i\
    \ + 1);\n    }\n    return ret;", "    std::vector<long> res;\n    res.reserve(l.size());\n\
    \    for (long i : l) {\n        res.push_back(i + 1);\n    }\n    return res;",
  "    std::vector<long> res;\n    res.reserve(l.size());\n    for (long i : l) {\n\
    \        res.push_back(i + 1);\n    }\n    return res;", "    std::vector<long>\
    \ res;\n    res.reserve(l.size());\n    for (long i : l) {\n        res.push_back(i\
    \ + 1);\n    }\n    return res;", "    std::vector<long> r;\n    for (long i :\
    \ l) {\n        r.push_back(i + 1);\n    }\n    return r;", "    std::vector<long>\
    \ ret(l.size());\n    for (size_t i = 0; i < l.size(); ++i)\n        ret[i] =\
    \ l[i] + 1;\n    return ret;", "    std::vector<long> ret(l.size());\n    for\
    \ (long i = 0; i < l.size(); i++) {\n        ret[i] = l[i] + 1;\n    }\n    return\
    \ ret;", "    std::vector<long> r;\n    for (long i : l) {\n        r.push_back(i\
    \ + 1);\n    }\n    return r;", "    std::vector<long> r;\n    for (long i : l)\
    \ {\n        r.push_back(i + 1);\n    }\n    return r;", "    std::vector<long>\
    \ ret;\n    ret.reserve(l.size());\n    for (long i : l) {\n        ret.push_back(i\
    \ + 1);\n    }\n    return ret;", "    std::vector<long> result;\n    for (long\
    \ i : l) {\n        result.push_back(i + 1);\n    }\n    return result;", "  \
    \  std::vector<long> res;\n    res.reserve(l.size());\n    for (long i : l) {\n\
    \        res.push_back(i + 1);\n    }\n    return res;", "    std::vector<long>\
    \ r;\n    for (long i : l) {\n        r.push_back(i + 1);\n    }\n    return r;",
  "    std::vector<long> ret;\n    ret.reserve(l.size());\n    for (long i : l) {\n\
    \        ret.push_back(i + 1);\n    }\n    return ret;", "    std::vector<long>\
    \ ret;\n    ret.reserve(l.size());\n    for (auto it = l.begin(); it != l.end();\
    \ ++it) {\n        ret.push_back(*it+1);\n    }\n    return ret;", "    std::vector<long>\
    \ ret;\n    ret.reserve(l.size());\n    for (long i : l) {\n        ret.push_back(i\
    \ + 1);\n    }\n    return ret;", "    std::vector<long> res(l.size());\n    for\
    \ (long i = 0; i < l.size(); i++) {\n        res[i] = l[i] + 1;\n    }\n    return\
    \ res;", "    std::vector<long> res;\n    res.reserve(l.size());\n    for (long\
    \ i : l) {\n        res.push_back(i + 1);\n    }\n    return res;", "    std::vector<long>\
    \ ret(l.size());\n    for (size_t i = 0; i < l.size(); i++) {\n        ret[i]\
    \ = l[i] + 1;\n    }\n    return ret;", "    std::vector<long> ret;\n    ret.reserve(l.size());\n\
    \    for (long i : l) {\n        ret.push_back(i + 1);\n    }\n    return ret;",
  "    std::vector<long> ret;\n    ret.reserve(l.size());\n    for (long i : l) {\n\
    \        ret.push_back(i + 1);\n    }\n    return ret;", "    std::vector<long>\
    \ ret;\n    ret.reserve(l.size());\n    for (long i : l) {\n        ret.push_back(i\
    \ + 1);\n    }\n    return ret;", "    std::vector<long> res;\n    for (long i\
    \ : l) {\n        res.push_back(i + 1);\n    }\n    return res;", "    std::vector<long>\
    \ ret;\n    ret.reserve(l.size());\n    for (long i : l) {\n        ret.push_back(i\
    \ + 1);\n    }\n    return ret;", "    std::vector<long> res;\n    res.reserve(l.size());\n\
    \    for (long i : l) {\n        res.push_back(i + 1);\n    }\n    return res;",
  "    std::vector<long> result;\n    long curr = l[0];\n    long next = l[0];\n \
    \   for (long i : l) {\n        if (i == curr) {\n            next = i + 1;\n\
    \        } else {\n            result.push_back(next);\n            curr = next;\n\
    \            next = i;\n        }\n    }\n    result.push_back(next);\n    return\
    \ result;", "    std::vector<long> res(l.size());\n    for (size_t i = 0; i <\
    \ l.size(); i++) {\n        res[i] = l[i] + 1;\n    }\n    return res;", "   \
    \ std::vector<long> res;\n    res.reserve(l.size());\n    for (long i : l) {\n\
    \        res.push_back(i + 1);\n    }\n    return res;", "    std::vector<long>\
    \ result;\n    long temp;\n    for (long i = 0; i < l.size(); i++) {\n       \
    \ temp = l[i];\n        l[i] = l[i] + 1;\n        result.push_back(temp);\n  \
    \  }\n    return result;", "    std::vector<long> ret(l.size());\n    for (long\
    \ i = 0; i < l.size(); i++) {\n        ret[i] = l[i] + 1;\n    }\n    return ret;",
  "    std::vector<long> ret(l.size());\n    for (size_t i = 0; i < l.size(); i++)\
    \ {\n        ret[i] = l[i] + 1;\n    }\n    return ret;", "    std::vector<long>\
    \ result;\n    long curr = 0, prev = 0;\n    for (auto e : l) {\n        prev\
    \ = curr;\n        curr = e;\n        result.push_back(curr);\n    }\n    result.push_back(prev);\n\
    \    return result;", "    std::vector<long> result;\n    for (long i : l) {\n\
    \        result.push_back(i + 1);\n    }\n    return result;", "    std::vector<long>\
    \ ret;\n    ret.reserve(l.size());\n    for (auto it = l.begin(); it != l.end();\
    \ ++it) {\n        ret.push_back(*it);\n        ret.push_back(*(it + 1));\n  \
    \  }\n    return ret;", "    std::vector<long> ret(l.size());\n    for (size_t\
    \ i = 0; i < l.size(); i++) {\n        ret[i] = l[i] + 1;\n    }\n    return ret;",
  "    std::vector<long> res(l.size());\n    for (long i = 0; i < l.size(); i++) {\n\
    \        res[i] = l[i] + 1;\n    }\n    return res;", "    std::vector<long> ret;\n\
    \    ret.reserve(l.size());\n    for (long i : l) {\n        ret.push_back(i +\
    \ 1);\n    }\n    return ret;", "    std::vector<long> result;\n    long curr\
    \ = 0, prev = 0;\n    for (auto i : l) {\n        prev = curr;\n        curr =\
    \ i;\n        result.push_back(prev + 1);\n    }\n    return result;", "    std::vector<long>\
    \ ret;\n    ret.reserve(l.size());\n    for (auto it = l.begin(); it != l.end();\
    \ ++it) {\n        ret.push_back(*it+1);\n    }\n    return ret;", "    std::vector<long>\
    \ r;\n    for (long i : l) {\n        r.push_back(i + 1);\n    }\n    return r;",
  "    std::vector<long> r;\n    for (long i : l) {\n        r.push_back(i + 1);\n\
    \    }\n    return r;", "    std::vector<long> ret(l.size());\n    for (size_t\
    \ i = 0; i < l.size(); i++) {\n        ret[i] = l[i] + 1;\n    }\n    return ret;",
  "    std::vector<long> res;\n    res.reserve(l.size());\n    for (long i : l) {\n\
    \        res.push_back(i + 1);\n    }\n    return res;", "    std::vector<long>\
    \ ret;\n    ret.reserve(l.size());\n    for (long i : l) {\n        ret.push_back(i\
    \ + 1);\n    }\n    return ret;", "    std::vector<long> r;\n    for (long i :\
    \ l) {\n        r.push_back(i + 1);\n    }\n    return r;", "    std::vector<long>\
    \ res;\n    res.reserve(l.size());\n    for (long i : l) {\n        res.push_back(i\
    \ + 1);\n    }\n    return res;", "    std::vector<long> ret;\n    ret.reserve(l.size());\n\
    \    for (auto it = l.begin(); it != l.end(); ++it) {\n        ret.push_back(*it+1);\n\
    \    }\n    return ret;", "    std::vector<long> res;\n    res.reserve(l.size());\n\
    \    for (long i : l) {\n        res.push_back(i + 1);\n    }\n    return res;",
  "    std::vector<long> ret;\n    ret.reserve(l.size());\n    for (long i : l) {\n\
    \        ret.push_back(i + 1);\n    }\n    return ret;", "    std::vector<long>\
    \ ret;\n    ret.reserve(l.size());\n    for (long i : l) {\n        ret.push_back(i\
    \ + 1);\n    }\n    return ret;", "    std::vector<long> r;\n    for (long i :\
    \ l) {\n        r.push_back(i + 1);\n    }\n    return r;", "    std::vector<long>\
    \ res;\n    for (long i : l) {\n        res.push_back(i + 1);\n    }\n    return\
    \ res;", "    std::vector<long> result;\n    long curr = 0, prev = 0;\n    for\
    \ (auto e : l) {\n        prev = curr;\n        curr = e;\n        result.push_back(prev\
    \ + 1);\n    }\n    return result;", "    std::vector<long> r;\n    for (long\
    \ i : l) {\n        r.push_back(i + 1);\n    }\n    return r;", "    std::vector<long>\
    \ ret;\n    ret.reserve(l.size());\n    for (long i : l) {\n        ret.push_back(i\
    \ + 1);\n    }\n    return ret;", "    std::vector<long> res;\n    res.reserve(l.size());\n\
    \    for (long i : l) {\n        res.push_back(i + 1);\n    }\n    return res;",
  "    std::vector<long> ret(l.size());\n    for (size_t i = 0; i < l.size(); ++i)\
    \ {\n        ret[i] = l[i] + 1;\n    }\n    return ret;", "    std::vector<long>\
    \ r;\n    for (long i : l) {\n        r.push_back(i + 1);\n    }\n    return r;",
  "    std::vector<long> result;\n    for (long i : l) {\n        result.push_back(i\
    \ + 1);\n    }\n    return result;", "    std::vector<long> res;\n    res.reserve(l.size());\n\
    \    for (long i : l) {\n        res.push_back(i + 1);\n    }\n    return res;",
  "    std::vector<long> ret;\n    ret.reserve(l.size());\n    for (long i : l) {\n\
    \        ret.push_back(i + 1);\n    }\n    return ret;", "    std::vector<long>\
    \ r;\n    long n = l.size();\n    for (long i = 0; i < n; i++) {\n        r.push_back(l.at(i)\
    \ + 1);\n    }\n    return r;", "    std::vector<long> result;\n    for (long\
    \ i : l) {\n        result.push_back(i + 1);\n    }\n    return result;", "  \
    \  std::vector<long> ret;\n    ret.reserve(l.size());\n    for (auto it = l.begin();\
    \ it != l.end(); ++it) {\n        ret.push_back(*it);\n        ret.push_back(*(it+1));\n\
    \    }\n    return ret;", "    std::vector<long> res;\n    res.reserve(l.size());\n\
    \    for (long i : l) {\n        res.push_back(i + 1);\n    }\n    return res;",
  "    std::vector<long> res;\n    for (long i : l) {\n        res.push_back(i + 1);\n\
    \    }\n    return res;", "    std::vector<long> res;\n    res.reserve(l.size());\n\
    \    for (long i : l) {\n        res.push_back(i + 1);\n    }\n    return res;",
  "    std::vector<long> ret;\n    ret.reserve(l.size());\n    for (long i : l) {\n\
    \        ret.push_back(i + 1);\n    }\n    return ret;", "    std::vector<long>\
    \ ret;\n    ret.reserve(l.size());\n    for (long i : l) {\n        ret.push_back(i\
    \ + 1);\n    }\n    return ret;", "    std::vector<long> r;\n    for (long i :\
    \ l) {\n        r.push_back(i + 1);\n    }\n    return r;", "    std::vector<long>\
    \ result;\n    for (long i : l) {\n        result.push_back(i + 1);\n    }\n \
    \   return result;", "    std::vector<long> res(l.size());\n    for (size_t i\
    \ = 0; i < l.size(); i++) {\n        res[i] = l[i] + 1;\n    }\n    return res;",
  "    std::vector<long> r;\n    for (long i : l) {\n        r.push_back(i + 1);\n\
    \    }\n    return r;", "    std::vector<long> result;\n    long curr = l[0];\n\
    \    long prev = curr;\n    for (long i : l) {\n        result.push_back(curr\
    \ + 1);\n        curr = i;\n        prev = i;\n    }\n    result.push_back(curr\
    \ + 1);\n    return result;", "    std::vector<long> r;\n    for (long i : l)\
    \ {\n        r.push_back(i + 1);\n    }\n    return r;", "    std::vector<long>\
    \ res;\n    res.reserve(l.size());\n    for (long i : l) {\n        res.push_back(i\
    \ + 1);\n    }\n    return res;", "    std::vector<long> result;\n    result.push_back(l[0]);\n\
    \    for (long i = 1; i < l.size(); i++) {\n        result.push_back(result[i\
    \ - 1] + 1);\n    }\n    return result;", "    std::vector<long> ret;\n    ret.reserve(l.size());\n\
    \    for (long i : l) {\n        ret.push_back(i + 1);\n    }\n    return ret;",
  "    std::vector<long> res;\n    res.reserve(l.size());\n    for (long i : l) {\n\
    \        res.push_back(i + 1);\n    }\n    return res;", "    std::vector<long>\
    \ ret;\n    ret.reserve(l.size());\n    for (long i : l) {\n        ret.push_back(i\
    \ + 1);\n    }\n    return ret;", "    std::vector<long> res;\n    res.reserve(l.size());\n\
    \    for (long i : l) {\n        res.push_back(i + 1);\n    }\n    return res;",
  "    std::vector<long> res;\n    res.reserve(l.size());\n    for (long i : l) {\n\
    \        res.push_back(i + 1);\n    }\n    return res;", "    std::vector<long>\
    \ res(l.size());\n    for (long i = 0; i < l.size(); ++i) {\n        res[i] =\
    \ l[i] + 1;\n    }\n    return res;", "    std::vector<long> r;\n    for (long\
    \ i : l) {\n        r.push_back(i + 1);\n    }\n    return r;", "    std::vector<long>\
    \ r;\n    for (long i : l) {\n        r.push_back(i + 1);\n    }\n    return r;",
  "    std::vector<long> res;\n    res.reserve(l.size());\n    for (auto it = l.begin();\
    \ it != l.end(); ++it) {\n        ++(*it);\n        res.push_back(*it);\n    }\n\
    \    return res;", "    std::vector<long> ret(l.size());\n    for (size_t i =\
    \ 0; i < l.size(); ++i) {\n        ret[i] = l[i] + 1;\n    }\n    return ret;",
  "    std::vector<long> ret(l.size());\n    for (size_t i = 0; i < l.size(); i++)\
    \ {\n        ret[i] = l[i] + 1;\n    }\n    return ret;", "    std::vector<long>\
    \ ret;\n    ret.reserve(l.size());\n    for (long i : l) {\n        ret.push_back(i\
    \ + 1);\n    }\n    return ret;", "    std::vector<long> ret;\n    ret.reserve(l.size());\n\
    \    for (long i : l) {\n        ret.push_back(i + 1);\n    }\n    return ret;"]
stop_tokens:
- "\n}"
