name: HumanEval_139_special_factorial
language: cpp
results:
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ long i;\n    for (i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmprl8kshkt: /tmp/tmprl8kshkt.cpp:21: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ long i = 1;\n    while (i <= n) {\n        fact *= i;\n        i++;\n    }\n\
    \    return fact;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: "tmpy4wz2bgk: /tmp/tmpy4wz2bgk.cpp:22: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpgpbjk3y8: /tmp/tmpgpbjk3y8.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmp4y95_anf: /tmp/tmp4y95_anf.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpvbm93eb2: /tmp/tmpvbm93eb2.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ for (int i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpq5rvnux5: /tmp/tmpq5rvnux5.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ long i = 1;\n    while (i <= n) {\n        fact *= i;\n        i++;\n    }\n\
    \    return fact;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: "tmpn4tyx595: /tmp/tmpn4tyx595.cpp:22: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ for(long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmp6iotm2sk: /tmp/tmp6iotm2sk.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpj1rm09ub: /tmp/tmpj1rm09ub.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ for (int i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpl4cfjlr2: /tmp/tmpl4cfjlr2.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpzj1bg325: /tmp/tmpzj1bg325.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ long i = 1;\n    while (i <= n) {\n        fact *= i;\n        i++;\n    }\n\
    \    return fact;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: "tmpl3n24hr4: /tmp/tmpl3n24hr4.cpp:22: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmppxag3wpx: /tmp/tmppxag3wpx.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmp8kgzz074: /tmp/tmp8kgzz074.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ long temp;\n    long i;\n    for(i = 1; i <= n; i++) {\n        temp = fact\
    \ * i;\n        fact = temp;\n    }\n    return fact;\n}\nint main() {\n    auto\
    \ candidate = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmpd9d1fuui: /tmp/tmpd9d1fuui.cpp:23: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ long temp;\n    for (long i = 1; i <= n; i++) {\n        temp = fact * i;\n\
    \        fact = temp;\n    }\n    return fact;\n}\nint main() {\n    auto candidate\
    \ = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmpmh169hhu: /tmp/tmpmh169hhu.cpp:22: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    if (n == 0 || n == 1)\n\
    \        return 1;\n    long res = special_factorial(n - 1) * n;\n    return res;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpgrep0q22: /tmp/tmpgrep0q22.cpp:19: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmps_o8ui2f: /tmp/tmps_o8ui2f.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ for (int i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpxnsx37mz: /tmp/tmpxnsx37mz.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpbxyqs_xo: /tmp/tmpbxyqs_xo.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    if (n == 0)\n      \
    \  return 1;\n    long res = 1;\n    for (long i = 1; i <= n; i++) {\n       \
    \ res *= i;\n    }\n    return res;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: "tmpao4s0il_: /tmp/tmpao4s0il_.cpp:22: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpg9barg52: /tmp/tmpg9barg52.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmp1pnm3tzl: /tmp/tmp1pnm3tzl.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpy9jg5nky: /tmp/tmpy9jg5nky.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpdjgqltq5: /tmp/tmpdjgqltq5.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmp2cpsea5r: /tmp/tmp2cpsea5r.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ long i;\n    for (i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpfpsk75g8: /tmp/tmpfpsk75g8.cpp:21: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmp204zrbov: /tmp/tmp204zrbov.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ long i;\n    for (i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmp5ujoe3ib: /tmp/tmp5ujoe3ib.cpp:21: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ for(long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpqnptj4uw: /tmp/tmpqnptj4uw.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    if (n == 0)\n      \
    \  return 1;\n    long result = 1;\n    for (long i = 1; i <= n; i++)\n      \
    \  result *= i;\n    return result;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: "tmpq3ird0ip: /tmp/tmpq3ird0ip.cpp:21: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ long i;\n    for (i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmp6_95sxti: /tmp/tmp6_95sxti.cpp:21: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    if (n == 0 || n == 1)\
    \ {\n        return 1;\n    }\n    return n * special_factorial(n - 1);\n}\nint\
    \ main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpwvb_0k3u: /tmp/tmpwvb_0k3u.cpp:19: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmp4n_vj_ci: /tmp/tmp4n_vj_ci.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpuqdtm_2o: /tmp/tmpuqdtm_2o.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmp57vsvpkn: /tmp/tmp57vsvpkn.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long factorial = 1;\n\
    \    long i;\n    for (i = 1; i <= n; i++) {\n        factorial *= i;\n    }\n\
    \    return factorial;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: "tmpc9_a20in: /tmp/tmpc9_a20in.cpp:21: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpqz5j16km: /tmp/tmpqz5j16km.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpyl4vn8kr: /tmp/tmpyl4vn8kr.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    if (n <= 1)\n      \
    \  return 1;\n    return n * special_factorial(n - 1);\n}\nint main() {\n    auto\
    \ candidate = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmpor9trp9p: /tmp/tmpor9trp9p.cpp:18: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpmxavkov4: /tmp/tmpmxavkov4.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpk3ah476s: /tmp/tmpk3ah476s.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ long i;\n    for (i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmp2qd58ikj: /tmp/tmp2qd58ikj.cpp:21: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpb3yij1qs: /tmp/tmpb3yij1qs.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ long i = 1;\n    while (i <= n) {\n        fact *= i;\n        i++;\n    }\n\
    \    return fact;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: "tmp9f34gufh: /tmp/tmp9f34gufh.cpp:22: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    if (n == 0) return 1;\n\
    \    long result = 1;\n    for (long i = 2; i <= n; i++) {\n        result *=\
    \ i;\n    }\n    return result;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: "tmpdnemw96q: /tmp/tmpdnemw96q.cpp:21: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpurdms1et: /tmp/tmpurdms1et.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmp2gj6nu3a: /tmp/tmp2gj6nu3a.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    if (n == 1)\n      \
    \  return 1;\n    return n * special_factorial(n - 1);\n}\nint main() {\n    auto\
    \ candidate = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmp4lucb2j_: /tmp/tmp4lucb2j_.cpp:18: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpumoucskk: /tmp/tmpumoucskk.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ long i;\n    for (i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpbs1hktlr: /tmp/tmpbs1hktlr.cpp:21: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpnqx8s1mb: /tmp/tmpnqx8s1mb.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmp5n_m1_32: /tmp/tmp5n_m1_32.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ for (int i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmp2og4tkxa: /tmp/tmp2og4tkxa.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ long i = 1;\n    while (i <= n) {\n        fact *= i;\n        i++;\n    }\n\
    \    return fact;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: "tmptm6eo4aw: /tmp/tmptm6eo4aw.cpp:22: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpi7259w_s: /tmp/tmpi7259w_s.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmp3lx1tfpi: /tmp/tmp3lx1tfpi.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmplgk6_hk3: /tmp/tmplgk6_hk3.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ for (int i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmptt7blizb: /tmp/tmptt7blizb.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ long i = 1;\n    while (i <= n) {\n        fact *= i;\n        i++;\n    }\n\
    \    return fact;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: "tmpdf29r9t8: /tmp/tmpdf29r9t8.cpp:22: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ long temp;\n    long i;\n    for (i = 1; i <= n; i++) {\n        temp = fact\
    \ * i;\n        fact = temp;\n    }\n    return fact;\n}\nint main() {\n    auto\
    \ candidate = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmpj3rz3vdo: /tmp/tmpj3rz3vdo.cpp:23: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ long temp;\n    long i;\n    for (i = 1; i <= n; i++) {\n        temp = fact\
    \ * i;\n        fact = temp;\n    }\n    return fact;\n}\nint main() {\n    auto\
    \ candidate = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmp8hyn84e9: /tmp/tmp8hyn84e9.cpp:23: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ long temp = 1;\n    long i = 1;\n    while (i <= n) {\n        fact = fact *\
    \ i;\n        temp = temp * i;\n        i++;\n    }\n    return fact;\n}\nint\
    \ main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpaizu9z0k: /tmp/tmpaizu9z0k.cpp:24: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long factorial = 1;\n\
    \    for (long i = 1; i <= n; i++) {\n        factorial *= i;\n    }\n    return\
    \ factorial;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpl9_iareq: /tmp/tmpl9_iareq.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    if (n == 0 || n == 1)\n\
    \        return 1;\n    long result = 1;\n    for (long i = 2; i <= n; i++)\n\
    \        result *= i;\n    return result;\n}\nint main() {\n    auto candidate\
    \ = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmp9zwlhtgq: /tmp/tmp9zwlhtgq.cpp:21: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpl_chz7oc: /tmp/tmpl_chz7oc.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long factorial = 1;\n\
    \    for (long i = 1; i <= n; i++) {\n        factorial *= i;\n    }\n    return\
    \ factorial;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmp710d5ibd: /tmp/tmp710d5ibd.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpckzwsrrt: /tmp/tmpckzwsrrt.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ long i;\n    for (i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmp7oepbps4: /tmp/tmp7oepbps4.cpp:21: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ long temp = 1;\n    for (long i = 1; i <= n; i++) {\n        fact = fact * i;\n\
    \    }\n    return fact;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: "tmp53okvs1s: /tmp/tmp53okvs1s.cpp:21: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpk6fmhg_e: /tmp/tmpk6fmhg_e.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpata6k4vx: /tmp/tmpata6k4vx.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ long i = 1;\n    while (i <= n) {\n        fact *= i;\n        i++;\n    }\n\
    \    return fact;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: "tmpaj14bvh1: /tmp/tmpaj14bvh1.cpp:22: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpnbqks0xg: /tmp/tmpnbqks0xg.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    if (n == 0) return 1;\n\
    \    long fact = 1;\n    for (long i = 1; i <= n; i++) {\n        fact *= i;\n\
    \    }\n    return fact;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: "tmpxab1ogt0: /tmp/tmpxab1ogt0.cpp:21: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ long temp;\n    long i;\n    for (i = 1; i <= n; i++) {\n        temp = fact\
    \ * i;\n        fact = temp;\n    }\n    return fact;\n}\nint main() {\n    auto\
    \ candidate = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmp776qelw0: /tmp/tmp776qelw0.cpp:23: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ for (int i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpy4iuuf_5: /tmp/tmpy4iuuf_5.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ long i;\n    for (i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpcmxrnq9f: /tmp/tmpcmxrnq9f.cpp:21: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmp8r9a6en2: /tmp/tmp8r9a6en2.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmp9qfy17rx: /tmp/tmp9qfy17rx.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    if (n == 0 || n == 1)\
    \ {\n        return 1;\n    }\n    return n * special_factorial(n - 1);\n}\nint\
    \ main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpo1z_rz7e: /tmp/tmpo1z_rz7e.cpp:19: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpkk0m28q2: /tmp/tmpkk0m28q2.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    if (n == 0)\n      \
    \  return 1;\n    return n * special_factorial(n - 1);\n}\nint main() {\n    auto\
    \ candidate = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmp8h160jfo: /tmp/tmp8h160jfo.cpp:18: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long factorial = 1;\n\
    \    long i = 1;\n    while (i <= n) {\n        factorial *= i;\n        i++;\n\
    \    }\n    return factorial;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: "tmpzm_be5k5: /tmp/tmpzm_be5k5.cpp:22: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ long i = 1;\n    while (i <= n) {\n        fact *= i;\n        i++;\n    }\n\
    \    return fact;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: "tmplkmpic3o: /tmp/tmplkmpic3o.cpp:22: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ long i;\n    for (i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmp_h98vc0i: /tmp/tmp_h98vc0i.cpp:21: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ long temp = 1;\n    while (n > 1) {\n        fact *= n;\n        temp *= n;\n\
    \        n--;\n    }\n    return fact;\n}\nint main() {\n    auto candidate =\
    \ special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmpin2sp4v0: /tmp/tmpin2sp4v0.cpp:23: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpk25s8y89: /tmp/tmpk25s8y89.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ long temp;\n    for (long i = 1; i <= n; i++) {\n        temp = fact * i;\n\
    \        fact = temp;\n    }\n    return fact;\n}\nint main() {\n    auto candidate\
    \ = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmpc7g6ay1s: /tmp/tmpc7g6ay1s.cpp:22: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmph4xw7bci: /tmp/tmph4xw7bci.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmp2s6_my79: /tmp/tmp2s6_my79.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    if (n == 0)\n      \
    \  return 1;\n    long result = 1;\n    for (long i = 1; i <= n; i++) {\n    \
    \    result *= i;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmp87jos87b: /tmp/tmp87jos87b.cpp:22: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ long i = 1;\n    while (i <= n) {\n        fact *= i;\n        i++;\n    }\n\
    \    return fact;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: "tmpadqam63a: /tmp/tmpadqam63a.cpp:22: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpw54h4f3a: /tmp/tmpw54h4f3a.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ long i;\n    for (i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpucjx3z8b: /tmp/tmpucjx3z8b.cpp:21: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long factorial = 1;\n\
    \    for (long i = 1; i <= n; i++) {\n        factorial *= i;\n    }\n    return\
    \ factorial;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpdt4prj79: /tmp/tmpdt4prj79.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmp5krk68xw: /tmp/tmp5krk68xw.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpc95ufhxk: /tmp/tmpc95ufhxk.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ long i;\n    for (i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpb4vr1wp1: /tmp/tmpb4vr1wp1.cpp:21: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpf0ak8wy9: /tmp/tmpf0ak8wy9.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ for (int i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmp2p2k8oj_: /tmp/tmp2p2k8oj_.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmp09v9tndp: /tmp/tmp09v9tndp.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ long temp = 1;\n    long i = 1;\n    while (i <= n) {\n        fact = fact *\
    \ i;\n        temp = temp * i;\n        i++;\n    }\n    return fact;\n}\nint\
    \ main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmp0hr9fcp5: /tmp/tmp0hr9fcp5.cpp:24: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmp5odmfyzb: /tmp/tmp5odmfyzb.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpa3z01hsz: /tmp/tmpa3z01hsz.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ for (int i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpn1572scm: /tmp/tmpn1572scm.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmprar12i67: /tmp/tmprar12i67.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpelkottyo: /tmp/tmpelkottyo.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpvnlq7gqu: /tmp/tmpvnlq7gqu.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpp519bsfa: /tmp/tmpp519bsfa.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ long i;\n    for (i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpz2d7loyt: /tmp/tmpz2d7loyt.cpp:21: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpefxfyoaj: /tmp/tmpefxfyoaj.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpp_k_0ax9: /tmp/tmpp_k_0ax9.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpohqrnhgq: /tmp/tmpohqrnhgq.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ long temp;\n    long i;\n    for (i = 1; i <= n; i++) {\n        temp = fact\
    \ * i;\n        fact = temp;\n    }\n    return fact;\n}\nint main() {\n    auto\
    \ candidate = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmpge_7mhg4: /tmp/tmpge_7mhg4.cpp:23: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpudfcxus3: /tmp/tmpudfcxus3.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ long i;\n    for (i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmp3dpxh8qv: /tmp/tmp3dpxh8qv.cpp:21: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ long i = 1;\n    while (i <= n) {\n        fact *= i;\n        i++;\n    }\n\
    \    return fact;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: "tmp3x_uoqbn: /tmp/tmp3x_uoqbn.cpp:22: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmp20hxeiyg: /tmp/tmp20hxeiyg.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ long i = 1;\n    while (i <= n) {\n        fact *= i;\n        i++;\n    }\n\
    \    return fact;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: "tmpmxklctvh: /tmp/tmpmxklctvh.cpp:22: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ long i = 1;\n    while (i <= n) {\n        fact *= i;\n        i++;\n    }\n\
    \    return fact;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: "tmp0hzuqt69: /tmp/tmp0hzuqt69.cpp:22: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long factorial = 1;\n\
    \    for (int i = 1; i <= n; i++) {\n        factorial *= i;\n    }\n    return\
    \ factorial;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmplfb79idc: /tmp/tmplfb79idc.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmptt8d6jbo: /tmp/tmptt8d6jbo.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long factorial = 1;\n\
    \    for (int i = 1; i <= n; i++) {\n        factorial *= i;\n    }\n    return\
    \ factorial;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmp5_akjcyi: /tmp/tmp5_akjcyi.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpabz2v6ex: /tmp/tmpabz2v6ex.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ long i = 1;\n    while (i <= n) {\n        fact *= i;\n        i++;\n    }\n\
    \    return fact;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: "tmpjwpw0scc: /tmp/tmpjwpw0scc.cpp:22: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmp6mmngekr: /tmp/tmp6mmngekr.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    if (n == 0)\n      \
    \  return 1;\n    long result = 1;\n    for (long i = 1; i <= n; i++) {\n    \
    \    result *= i;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmp6nhs86kd: /tmp/tmp6nhs86kd.cpp:22: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpjvtr19vy: /tmp/tmpjvtr19vy.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ long i = 1;\n    while (i <= n) {\n        fact *= i;\n        i++;\n    }\n\
    \    return fact;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: "tmp557ft9qt: /tmp/tmp557ft9qt.cpp:22: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ long i;\n    for (i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpqf4ktlkx: /tmp/tmpqf4ktlkx.cpp:21: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpnn14t3fk: /tmp/tmpnn14t3fk.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpmn83rl97: /tmp/tmpmn83rl97.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ for(long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmp6a7cgpw8: /tmp/tmp6a7cgpw8.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpr4_irb0s: /tmp/tmpr4_irb0s.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmprqmdi60l: /tmp/tmprqmdi60l.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmp_ix1_258: /tmp/tmp_ix1_258.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmp5e7m1wmn: /tmp/tmp5e7m1wmn.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    if (n == 0)\n      \
    \  return 1;\n    long factorial = 1;\n    for (long i = 1; i <= n; i++) {\n \
    \       factorial *= i;\n    }\n    return factorial;\n}\nint main() {\n    auto\
    \ candidate = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmpqaad9169: /tmp/tmpqaad9169.cpp:22: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpvq__e1y2: /tmp/tmpvq__e1y2.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpnlwnoufs: /tmp/tmpnlwnoufs.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpwkg17m_9: /tmp/tmpwkg17m_9.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmptuvzhn0r: /tmp/tmptuvzhn0r.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmp_rodtx86: /tmp/tmp_rodtx86.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmp0umw5hpk: /tmp/tmp0umw5hpk.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ long temp = 1;\n    long counter = 1;\n    while (n > 1) {\n        fact = fact\
    \ * temp;\n        temp = counter;\n        counter = counter + 1;\n        n\
    \ = n - 1;\n    }\n    return fact;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: "tmpz5mz3hpo: /tmp/tmpz5mz3hpo.cpp:25: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpsll5wrrp: /tmp/tmpsll5wrrp.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long factorial = 1;\n\
    \    long i = 1;\n    while (i <= n) {\n        factorial *= i;\n        i++;\n\
    \    }\n    return factorial;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: "tmpqkzq8y88: /tmp/tmpqkzq8y88.cpp:22: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmp5f1ec710: /tmp/tmp5f1ec710.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmprbl2_7lx: /tmp/tmprbl2_7lx.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmp6idfm0l6: /tmp/tmp6idfm0l6.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    if (n == 0)\n      \
    \  return 1;\n    long fact = 1;\n    for (long i = 1; i <= n; i++)\n        fact\
    \ *= i;\n    return fact;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: "tmp6_0wfzjc: /tmp/tmp6_0wfzjc.cpp:21: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ long fact1 = 1;\n    long fact2 = 2;\n    long fact3 = 3;\n    long fact4 =\
    \ 4;\n    long fact5 = 5;\n    long fact6 = 6;\n    long fact7 = 7;\n    long\
    \ fact8 = 8;\n    long fact9 = 9;\n    long fact10 = 10;\n    long fact11 = 11;\n\
    \    long fact12 = 12;\n    long fact13 = 13;\n    long fact14 = 14;\n    long\
    \ fact15 = 15;\n    long fact16 = 16;\n    long fact17 = 17;\n    long fact18\
    \ = 18;\n    long fact19 = 19;\n    long fact20 = 20;\n    long fact21 = 21;\n\
    \    long fact22 = 22;\n    long fact23 = 23;\n    long fact24 = 24;\n    long\
    \ fact25 = 25;\n    long fact26 = 26;\n    long fact27 = 27;\n    long fact28\
    \ = 28;\n    long fact29 = 29;\n    long fact30 = 30;\n    long fact31 = 31;\n\
    \    long fact32 = 32;\n    long fact33 = 33;\n    long fact34 = 34;\n    long\
    \ fact35 = 35;\n    long fact36 = 36;\n    long fact37 = 37;\n    long fact38\
    \ = 38;\n    long fact39 = 39;\n    long fact40 = 40;\n    long fact41 = 41;\n\
    \    long fact42 = 42;\n    long fact43 = 43;\n    long fact44 = 44;\n    long\
    \ fact45 = 45;\n    long fact46 = 46;\n    long fact47 = 47;\n    long fact48\
    \ = 48;\n    long fact49 = 49;\n    long fact50 = 50;\n    long fact51 = 51;\n\
    \    long fact52 = 52;\n    long fact53 = 53;\n    long fact54 = 54;\n    long\
    \ fact55 = 55;\n    long fact56 = 56;\n    long fact57 = 57;\n    long fact58\
    \ = 58;\n    long fact59 = 59;\n    long fact60 = 60;\n    long fact61 = 61;\n\
    \    long fact62 = 62;\n    long fact63 = 63;\n    long fact64 = 64;\n    long\
    \ fact65 = 65;\n    long fact66 = 66;\n    long fact67 = 67;\n    long fact68\
    \ = 68;\n    long fact69 = 69;\n    long fact70 = 70;\n    \n}\nint main() {\n\
    \    auto candidate = special_factorial;\n    assert(candidate((4)) == (288));\n\
    \    assert(candidate((5)) == (34560));\n    assert(candidate((7)) == (125411328000));\n\
    \    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpal7l5ymw: /tmp/tmpal7l5ymw.cpp:87: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    if (n == 0)\n      \
    \  return 1;\n    long result = 1;\n    for (long i = 1; i <= n; i++)\n      \
    \  result *= i;\n    return result;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: "tmpzxdavi2i: /tmp/tmpzxdavi2i.cpp:21: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    if (n == 0)\n      \
    \  return 1;\n    return n * special_factorial(n - 1);\n}\nint main() {\n    auto\
    \ candidate = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmpb5j36sua: /tmp/tmpb5j36sua.cpp:18: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    if (n == 0 || n == 1)\
    \ {\n        return 1;\n    }\n    return n * special_factorial(n - 1);\n}\nint\
    \ main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpm8b19i8b: /tmp/tmpm8b19i8b.cpp:19: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpv19u6u4x: /tmp/tmpv19u6u4x.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ long i = 1;\n    while (i <= n) {\n        fact *= i;\n        i++;\n    }\n\
    \    return fact;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: "tmpos0k08m6: /tmp/tmpos0k08m6.cpp:22: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    if (n == 0)\n      \
    \  return 1;\n    long res = special_factorial(n - 1);\n    return res * n;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpkyrhzz0z: /tmp/tmpkyrhzz0z.cpp:19: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ long temp = n;\n    while (temp > 1) {\n        fact *= temp;\n        temp--;\n\
    \    }\n    return fact;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: "tmpnudsji1n: /tmp/tmpnudsji1n.cpp:22: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ long i = 1;\n    while (i <= n) {\n        fact *= i;\n        i++;\n    }\n\
    \    return fact;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: "tmpkqqvty0b: /tmp/tmpkqqvty0b.cpp:22: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpr2h107io: /tmp/tmpr2h107io.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ long temp = n;\n    while (temp > 1) {\n        fact = fact * temp;\n      \
    \  temp--;\n    }\n    return fact;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: "tmp381pokf1: /tmp/tmp381pokf1.cpp:22: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ long i = 1;\n    while (i <= n) {\n        fact *= i;\n        i++;\n    }\n\
    \    return fact;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: "tmpi7rddr6n: /tmp/tmpi7rddr6n.cpp:22: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ long i = 1;\n    while (i <= n) {\n        fact *= i;\n        i++;\n    }\n\
    \    return fact;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: "tmppn2gu754: /tmp/tmppn2gu754.cpp:22: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ long temp = 1;\n    long i = 1;\n    long j = 1;\n    while (i <= n) {\n   \
    \     fact = fact * i;\n        temp = temp * i;\n        i++;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpxyc02qls: /tmp/tmpxyc02qls.cpp:25: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmp2mpaw3rq: /tmp/tmp2mpaw3rq.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmp3zqx_hpw: /tmp/tmp3zqx_hpw.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmp3yeda3x9: /tmp/tmp3yeda3x9.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ long i = 1;\n    while (i <= n) {\n        fact *= i;\n        i++;\n    }\n\
    \    return fact;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: "tmpeob26qeg: /tmp/tmpeob26qeg.cpp:22: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ for (int i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpzrn54j7w: /tmp/tmpzrn54j7w.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmp_pomyi3b: /tmp/tmp_pomyi3b.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ long i;\n    for (i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpqb2pim0v: /tmp/tmpqb2pim0v.cpp:21: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpcp8vrj69: /tmp/tmpcp8vrj69.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    if (n == 0)\n      \
    \  return 1;\n    long factorial = 1;\n    for (long i = 1; i <= n; i++) {\n \
    \       factorial *= i;\n    }\n    return factorial;\n}\nint main() {\n    auto\
    \ candidate = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmp_tm3h35i: /tmp/tmp_tm3h35i.cpp:22: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ long i = 1;\n    while (i <= n) {\n        fact *= i;\n        i++;\n    }\n\
    \    return fact;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: "tmppkfnqzuk: /tmp/tmppkfnqzuk.cpp:22: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmp2jzbi7jk: /tmp/tmp2jzbi7jk.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpkxajqleb: /tmp/tmpkxajqleb.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmp4uu9z8ee: /tmp/tmp4uu9z8ee.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ long temp = n;\n    while (temp > 1) {\n        fact = fact * (temp - 1);\n\
    \        temp--;\n    }\n    return fact;\n}\nint main() {\n    auto candidate\
    \ = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmptehnudxf: /tmp/tmptehnudxf.cpp:22: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ long temp;\n    for (long i = 1; i <= n; i++) {\n        temp = fact * i;\n\
    \        fact = temp;\n    }\n    return fact;\n}\nint main() {\n    auto candidate\
    \ = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmp9mw3srgf: /tmp/tmp9mw3srgf.cpp:22: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ long i = 1;\n    while (i <= n) {\n        fact *= i;\n        i++;\n    }\n\
    \    return fact;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: "tmp2g9nl8u3: /tmp/tmp2g9nl8u3.cpp:22: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ for (int i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmp6yd4v8s2: /tmp/tmp6yd4v8s2.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpas3evebt: /tmp/tmpas3evebt.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpjxtbfgfk: /tmp/tmpjxtbfgfk.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ for (int i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmp_ingzh9r: /tmp/tmp_ingzh9r.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ long i;\n    for (i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpy7twvn6v: /tmp/tmpy7twvn6v.cpp:21: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ long i;\n    for (i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpdx66e5b7: /tmp/tmpdx66e5b7.cpp:21: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ long temp = n;\n    while (temp > 1) {\n        fact *= temp--;\n    }\n   \
    \ return fact;\n}\nint main() {\n    auto candidate = special_factorial;\n   \
    \ assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n \
    \   assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: "tmpgum6ibhq: /tmp/tmpgum6ibhq.cpp:21: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmp7qr2xu54: /tmp/tmp7qr2xu54.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpdv8xan35: /tmp/tmpdv8xan35.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpqvwti75y: /tmp/tmpqvwti75y.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpyndujbcf: /tmp/tmpyndujbcf.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ long temp = n;\n    while (temp > 1) {\n        fact = fact * temp;\n      \
    \  temp--;\n    }\n    return fact;\n}\nint main() {\n    auto candidate = special_factorial;\n\
    \    assert(candidate((4)) == (288));\n    assert(candidate((5)) == (34560));\n\
    \    assert(candidate((7)) == (125411328000));\n    assert(candidate((1)) == (1));\n\
    }\n"
  stdout: ''
  stderr: "tmpjt_iq7sx: /tmp/tmpjt_iq7sx.cpp:22: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmptwvtixfw: /tmp/tmptwvtixfw.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmplh9mhzln: /tmp/tmplh9mhzln.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpt3jz58vw: /tmp/tmpt3jz58vw.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ long i;\n    for (i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return\
    \ fact;\n}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmph9lf3jbe: /tmp/tmph9lf3jbe.cpp:21: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    long fact = 1;\n   \
    \ for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return fact;\n\
    }\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
    \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
    \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
  stdout: ''
  stderr: "tmpwi5dgzdx: /tmp/tmpwi5dgzdx.cpp:20: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial\
    \ is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    // where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nlong special_factorial(long n) {\n    if (n == 0)\n      \
    \  return 1;\n    long result = 1;\n    for (long i = 1; i <= n; i++) {\n    \
    \    result *= i;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = special_factorial;\n    assert(candidate((4)) == (288));\n    assert(candidate((5))\
    \ == (34560));\n    assert(candidate((7)) == (125411328000));\n    assert(candidate((1))\
    \ == (1));\n}\n"
  stdout: ''
  stderr: "tmpz0d9on0x: /tmp/tmpz0d9on0x.cpp:22: int main(): Assertion `candidate((4))\
    \ == (288)' failed.\n"
  exit_code: -6
  status: Exception
