name: HumanEval_153_Strongest_Extension
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the name\
  \ of a class (a string) and a list of extensions.\n// The extensions are to be used\
  \ to load additional classes to the class. The\n// strength of the extension is\
  \ as follows: Let CAP be the number of the uppercase\n// letters in the extension's\
  \ name, and let SM be the number of lowercase letters \n// in the extension's name,\
  \ the strength is given by the fraction CAP - SM. \n// You should find the strongest\
  \ extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
  // If there are two or more extensions with the same strength, you should\n// choose\
  \ the one that comes first in the list.\n// For example, if you are given \"Slices\"\
  \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
  \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
  \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
  \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nstd::string Strongest_Extension(std::string\
  \ class_name, std::vector<std::string> extensions) {\n"
tests: "}\nint main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"\
  Watashi\"), (std::vector<std::string>({\"tEN\", \"niNE\", \"eIGHt8OKe\"}))) == (\"\
  Watashi.eIGHt8OKe\"));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({\"\
  nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
  ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({\"t\", \"\
  eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
  ));\n    assert(candidate((\"K\"), (std::vector<std::string>({\"Ta\", \"TAR\", \"\
  t234An\", \"cosSo\"}))) == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({\"\
  Tab\", \"123\", \"781345\", \"-_-\"}))) == (\"__HAHA.123\"));\n    assert(candidate((\"\
  YameRore\"), (std::vector<std::string>({\"HhAas\", \"okIWILL123\", \"WorkOut\",\
  \ \"Fails\", \"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
  finNNalLLly\"), (std::vector<std::string>({\"Die\", \"NowW\", \"Wow\", \"WoW\"})))\
  \ == (\"finNNalLLly.WoW\"));\n    assert(candidate((\"_\"), (std::vector<std::string>({\"\
  Bb\", \"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"), (std::vector<std::string>({\"\
  671235\", \"Bb\"}))) == (\"Sp.671235\"));\n}\n"
completions: ["    std::string strongest_extension;\n    int cap_extension = 0;\n\
    \    int sm_extension = 0;\n    for (auto &extension : extensions) {\n       \
    \ auto cap_letters = std::count_if(extension.begin(), extension.end(), [](char\
    \ c) {\n            return std::isupper(c);\n        });\n        auto sm_letters\
    \ = std::count_if(extension.begin(), extension.end(), [](char c) {\n         \
    \   return std::islower(c);\n        });\n        cap_extension += cap_letters;\n\
    \        sm_extension += sm_letters;\n    }\n    float strength = cap_extension\
    \ - sm_extension;\n    if (strength > 0) {\n        strongest_extension = class_name\
    \ + \".\" + extensions[0];\n    }\n    if (strength > 1) {\n        auto it =\
    \ std::min_element(extensions.begin(), extensions.end(), \n            [](std::string\
    \ a, std::string b) {\n                return std::stoi(a) < std::stoi(b);\n \
    \           });\n        strongest_extension = class_name + \".\" + it->to_string();\n\
    \    }\n    return strongest_extension;", "    // Write your code here\n    int\
    \ cap_num = 0, sm_num = 0;\n    for (auto &ext : extensions) {\n        cap_num\
    \ += ext.length();\n        sm_num += ext.length() - 1;\n    }\n    int strength\
    \ = cap_num - sm_num;\n    if (strength > 0) {\n        return class_name + \"\
    .\" + extensions[0];\n    }\n    return class_name;", "    // Your code here\n\
    \    std::string strongest_extension = \"\";\n    int cap_counter = 0;\n    int\
    \ sm_counter = 0;\n    for (int i = 0; i < extensions.size(); i++) {\n       \
    \ if (class_name[cap_counter] == extensions[i][0]) {\n            cap_counter++;\n\
    \        }\n        if (class_name[sm_counter] == extensions[i][1]) {\n      \
    \      sm_counter++;\n        }\n    }\n    double strength = cap_counter - sm_counter;\n\
    \    if (strength > 0) {\n        strongest_extension = class_name + \".\" + extensions[0];\n\
    \    }\n    for (int i = 1; i < extensions.size(); i++) {\n        if (strength\
    \ == extensions[i].size()) {\n            strongest_extension = class_name + \"\
    .\" + extensions[i];\n        }\n    }\n    return strongest_extension;", "  \
    \  // Write your code here\n    std::string strongest_extension = \"\";\n    int\
    \ cap = class_name.size();\n    int sm = class_name.size();\n    for (int i =\
    \ 0; i < extensions.size(); i++) {\n        cap = cap - extensions[i].size();\n\
    \        sm = sm - extensions[i].size();\n    }\n    float strength = cap - sm;\n\
    \    if (strength > 0) {\n        strongest_extension = class_name + \".\" + extensions[0];\n\
    \    }\n    for (int i = 1; i < extensions.size(); i++) {\n        if (strength\
    \ > 0) {\n            strongest_extension = class_name + \".\" + extensions[i];\n\
    \        }\n    }\n    return strongest_extension;", "    // Write your code here\n\
    \    int cap_num = 0, sm_num = 0;\n    for (auto &ext : extensions) {\n      \
    \  cap_num += ext.size();\n        sm_num += ext.size();\n    }\n    int cap =\
    \ cap_num / cap_num;\n    int sm = sm_num / cap_num;\n    if (cap - sm > 0) return\
    \ class_name + extensions[0];\n    else return class_name + extensions[extensions.size()\
    \ - 1];", "    // Write your code here\n    \n    std::string strongest_extension\
    \ = \"\";\n    \n    for(int i = 0; i < extensions.size(); i++){\n        std::string\
    \ extension = extensions[i];\n        \n        for(int j = 0; j < extension.size();\
    \ j++){\n            char c = extension[j];\n            \n            if(c ==\
    \ toupper(extension[j])){\n                strongest_extension += c;\n       \
    \     }\n        }\n    }\n    \n    return class_name + \".\" + strongest_extension;",
  "    // Write your code here\n    std::string strongest_extension = \"\";\n    int\
    \ cap_counter = 0;\n    int sm_counter = 0;\n    for (auto &extension : extensions)\
    \ {\n        if (extension == class_name.substr(cap_counter, cap_counter + sm_counter))\
    \ {\n            strongest_extension = class_name + \".\" + extension;\n     \
    \       cap_counter += CAP;\n            sm_counter += SM;\n        }\n    }\n\
    \    if (cap_counter > sm_counter) {\n        strongest_extension = class_name\
    \ + \".\" + extensions[0];\n    }\n    return strongest_extension;", "    // Write\
    \ your code here\n    std::string strongest_extension = class_name;\n    int cap\
    \ = 0;\n    int sm = 0;\n    for (auto &ext : extensions) {\n        cap += ext.size();\n\
    \        sm += ext.size();\n    }\n    float strength = cap - sm;\n    if (strength\
    \ > 0) {\n        strongest_extension += \".\";\n    }\n    strongest_extension\
    \ += extensions[0];\n    return strongest_extension;", "    // Write your code\
    \ here\n    int cap = class_name.size();\n    int sm = extensions.size();\n  \
    \  double strength = cap - sm;\n    double max = 0;\n    std::string maxStr =\
    \ \"\";\n    for (auto ext : extensions) {\n        if (ext.size() == cap) {\n\
    \            double x = ext.size() - cap;\n            double y = cap - ext.size();\n\
    \            double z = cap - ext.size() + cap;\n            double a = x / y;\n\
    \            double b = x / z;\n            double c = y / z;\n            double\
    \ d = cap - a;\n            double e = cap - b;\n            double f = cap -\
    \ c;\n            double g = cap - d;\n            double h = cap - e;\n     \
    \       double i = cap - f;\n            double j = cap - g;\n            double\
    \ k = cap - h;\n            double l = cap - i;\n            double m = cap -\
    \ j;\n            double n = cap - k;\n            double o = cap - l;\n     \
    \       double p = cap - m;\n            double q = cap - n;\n            double\
    \ r = cap - o;\n            double s = cap - p;\n            double t = cap -\
    \ q;\n            double u = cap - r;\n            double v = cap - s;\n     \
    \       double w = cap - t;\n            double x = cap - u;\n            double\
    \ y = cap - v;\n            double z = cap - w;\n            double a = x / y;\n\
    \            double b = x / z;\n            double c = y / z;\n            double\
    \ d = cap - a;\n            double e = cap - b;\n            double f = cap -\
    \ c;\n            double g = cap - d;\n            double h = cap - e;\n     \
    \       double i = cap - f;\n            double j = cap - g;\n            double\
    \ k = cap - h;\n            double l = cap - i;\n            double m = cap -\
    \ j;\n            double n = cap - k;\n            double o = cap - l;\n     \
    \       double p = cap - m;\n            double q = cap - n;\n            double\
    \ r = cap - o;\n            double s = cap - p;\n            double t = cap -\
    \ q;\n            double u = cap - r;\n            double v = cap - s;\n     \
    \       double w = cap - t;\n            double x = cap - u;\n            double\
    \ y = cap - v;\n            double z = cap - w;\n            double a = x / y;\n\
    \            double b = x / z;\n            double c = y / z;\n            double\
    \ d = cap - a;\n            double e = cap - b;\n            double f = cap -\
    \ c;\n            double g = cap - d;\n            double h = cap - e;\n     \
    \       double i = ", "    // Write your code here\n    std::string strongest_extension\
    \ = \"\";\n    int cap = 0;\n    int sm = 0;\n    for (auto &extension : extensions)\
    \ {\n        cap += extension.at(0) - 'A';\n        sm += extension.at(1) - 'a';\n\
    \    }\n    float strength = cap - sm;\n    if (strength > 0) {\n        strongest_extension\
    \ = class_name + \".\" + extensions[0];\n    }\n    if (strength == 1) {\n   \
    \     strongest_extension = class_name + \".\" + extensions[0];\n    }\n    if\
    \ (strength > 1) {\n        strongest_extension = class_name + \".\" + extensions[0];\n\
    \    }\n    return strongest_extension;", "    // Write your code here\n    std::string\
    \ strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n    for (auto\
    \ &ext : extensions) {\n        cap += ext.length();\n        sm += ext.length();\n\
    \    }\n    float strength = cap - sm;\n    if (strength > 0) {\n        strongest_extension\
    \ = class_name + \".\" + extensions[0];\n    }\n    for (auto &ext : extensions)\
    \ {\n        if (ext.length() == strongest_extension.length()) {\n           \
    \ if (ext.length() < strongest_extension.length()) {\n                strongest_extension\
    \ = class_name + \".\" + ext;\n            }\n        }\n    }\n    return strongest_extension;",
  "    // Write your code here\n    std::string strongest_extension = class_name;\n\
    \    int cap = 0;\n    int sm = 0;\n    for (auto &ext : extensions) {\n     \
    \   cap += ext.length();\n        sm += ext.length();\n    }\n    float strength\
    \ = cap - sm;\n    if (strength > 0) {\n        std::sort(extensions.begin(),\
    \ extensions.end());\n        for (auto &ext : extensions) {\n            if (ext.length()\
    \ == strength) {\n                strongest_extension += \".\" + ext;\n      \
    \      }\n        }\n    }\n    return strongest_extension;", "    int cap_num\
    \ = 0, sm_num = 0;\n    for (auto &ext : extensions) {\n        cap_num += ext.length();\n\
    \        sm_num += ext.length() - 1;\n    }\n    int cap = cap_num / CAP;\n  \
    \  int sm = sm_num / SM;\n    if (cap > sm) {\n        return class_name + extensions[0];\n\
    \    }\n    return class_name + extensions[extensions.size() - 1];", "    // Your\
    \ code here\n    std::string strongest_extension;\n    int cap = 0;\n    int sm\
    \ = 0;\n    for (auto &ext : extensions) {\n        cap += ext.length();\n   \
    \     sm += ext.length();\n    }\n    cap = cap - sm;\n    if (cap > 0) {\n  \
    \      strongest_extension = class_name + extensions[0];\n    }\n    else {\n\
    \        for (auto &ext : extensions) {\n            if (cap < ext.length()) {\n\
    \                strongest_extension = class_name + ext;\n                break;\n\
    \            }\n        }\n    }\n    return strongest_extension;", "    // Write\
    \ your code here\n    \n    std::string strongest_extension;\n    \n    for(int\
    \ i = 0; i < extensions.size(); i++){\n        std::string extension = extensions[i];\n\
    \        int cap = extension.find_first_of('A');\n        int sm = extension.find_first_of('l');\n\
    \        int strength = cap - sm;\n        if(strength > 0){\n            strongest_extension\
    \ = class_name + extension;\n            break;\n        }\n    }\n    return\
    \ strongest_extension;", "    std::string strongest_extension;\n    int cap_counter\
    \ = 0;\n    int sml_counter = 0;\n    for (auto &extension : extensions) {\n \
    \       if (extension == class_name) {\n            strongest_extension = class_name;\n\
    \            break;\n        }\n        if (std::toupper(extension[0]) == std::toupper(class_name[0]))\
    \ {\n            cap_counter++;\n        }\n        if (std::tolower(extension[0])\
    \ == std::tolower(class_name[0])) {\n            sml_counter++;\n        }\n \
    \   }\n    if (cap_counter > sml_counter) {\n        strongest_extension = class_name\
    \ + \".\" + extensions[0];\n    }\n    return strongest_extension;", "    int\
    \ cap = 0;\n    int sm = 0;\n    for (auto &ext : extensions) {\n        cap +=\
    \ ext.length();\n        sm += ext.length();\n    }\n    double strength = cap\
    \ - sm;\n    double max_strength = -1;\n    for (auto &ext : extensions) {\n \
    \       double cur_strength = ext.length();\n        if (cur_strength > max_strength)\
    \ {\n            max_strength = cur_strength;\n        }\n    }\n    if (max_strength\
    \ == -1) {\n        return class_name;\n    }\n    std::string res = class_name\
    \ + \".\";\n    for (auto &ext : extensions) {\n        if (ext.length() == max_strength)\
    \ {\n            res += ext;\n        }\n    }\n    return res;", "    int cap_num\
    \ = 0, sm_num = 0;\n    for (auto &ext : extensions) {\n        cap_num += ext.length();\n\
    \        sm_num += ext.length() - ext.find_first_of('A');\n    }\n    double strength\
    \ = cap_num - sm_num;\n    int max_strength = -1;\n    for (auto &ext : extensions)\
    \ {\n        if (ext.length() > max_strength) {\n            max_strength = ext.length();\n\
    \        }\n    }\n    if (max_strength == -1) {\n        return class_name;\n\
    \    }\n    int max_index = -1;\n    for (auto &ext : extensions) {\n        if\
    \ (ext.length() == max_strength) {\n            max_index = extensions.find(ext);\n\
    \        }\n    }\n    if (max_index == -1) {\n        return class_name;\n  \
    \  }\n    std::string new_name = class_name + \".\" + extensions[max_index];\n\
    \    return new_name;", "    // Write your code here\n    std::string strongest_extension\
    \ = class_name;\n    int cap = class_name.size();\n    int sm = class_name.size();\n\
    \    for (auto &ext : extensions) {\n        cap = cap - ext.size();\n       \
    \ sm = sm - ext.size();\n    }\n    if (cap > sm) {\n        strongest_extension\
    \ = class_name + extensions[0];\n    }\n    return strongest_extension;", "  \
    \  // Write your code here\n    \n    std::string strongest_extension = \"\";\n\
    \    int cap = 0;\n    int sm = 0;\n    for(auto &ext : extensions) {\n      \
    \  cap += ext.length();\n        sm += ext.length();\n    }\n    \n    int strength\
    \ = cap - sm;\n    \n    for(auto &ext : extensions) {\n        if(ext.length()\
    \ == strength) {\n            strongest_extension = class_name + ext;\n      \
    \      break;\n        }\n    }\n    \n    return strongest_extension;", "   \
    \ // Write your code here\n    std::string strongest_extension;\n    int cap_num\
    \ = 0, sm_num = 0;\n    for (auto &ext : extensions) {\n        cap_num += ext.size();\n\
    \        sm_num += ext.size();\n    }\n    float strength = cap_num - sm_num;\n\
    \    if (strength > 0) {\n        strongest_extension = class_name + \".\" + extensions[0];\n\
    \    }\n    for (auto &ext : extensions) {\n        if (ext.size() == strength)\
    \ {\n            strongest_extension = class_name + \".\" + ext;\n        }\n\
    \    }\n    return strongest_extension;", "    // Write your code here\n    std::string\
    \ strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n    for(auto\
    \ &ext : extensions){\n        cap += ext.size();\n        sm += ext.size();\n\
    \    }\n    float strength = cap - sm;\n    for(auto &ext : extensions){\n   \
    \     if(ext.size() == cap){\n            strongest_extension = class_name + ext;\n\
    \            break;\n        }\n    }\n    if(strongest_extension == \"\"){\n\
    \        for(auto &ext : extensions){\n            if(ext.size() == sm){\n   \
    \             strongest_extension = class_name + ext;\n                break;\n\
    \            }\n        }\n    }\n    return strongest_extension;", "    // Write\
    \ your code here\n    std::string strongest_extension = \"\";\n    int cap = 0;\n\
    \    int sm = 0;\n    for (auto &ext : extensions) {\n        cap += ext.length();\n\
    \        sm += ext.length() - ext.find_first_not_of(ext.begin(), ext.end());\n\
    \    }\n    float strength = cap - sm;\n    for (auto &ext : extensions) {\n \
    \       if (ext.length() == strongest_extension.length()) {\n            if (ext.length()\
    \ < strongest_extension.length()) {\n                strongest_extension = ext;\n\
    \            }\n        } else if (ext.length() > strongest_extension.length())\
    \ {\n            if (ext.length() == strongest_extension.length()) {\n       \
    \         if (ext.length() < strongest_extension.length()) {\n               \
    \     strongest_extension = ext;\n                }\n            }\n        }\n\
    \    }\n    return class_name + \".\" + strongest_extension;", "    // Write your\
    \ code here\n    int cap = class_name.size();\n    int sm = class_name.size();\n\
    \    for(auto &ext : extensions){\n        cap = cap - ext.size();\n        sm\
    \ = sm - ext.size();\n    }\n    return class_name + \".\" + extensions[cap -\
    \ sm];", "    // Write your code here\n    int cap_num = 0, sm_num = 0;\n    for\
    \ (auto &ext : extensions) {\n        if (ext.size() >= cap_num && ext.size()\
    \ <= sm_num) {\n            cap_num = ext.size();\n            sm_num = ext.size();\n\
    \        }\n        else if (ext.size() > sm_num) {\n            sm_num = ext.size();\n\
    \        }\n    }\n    double strength = cap_num - sm_num;\n    std::string result\
    \ = class_name;\n    for (auto &ext : extensions) {\n        if (ext.size() ==\
    \ cap_num) {\n            result += \".\" + ext;\n        }\n        else if (ext.size()\
    \ == sm_num) {\n            result += \".\" + ext;\n        }\n        else if\
    \ (ext.size() > cap_num && ext.size() < sm_num) {\n            result += \".\"\
    \ + ext;\n        }\n        else if (ext.size() > sm_num) {\n            result\
    \ += \".\" + ext;\n        }\n    }\n    result += \".\" + std::to_string(strength);\n\
    \    return result;", "    // Your code here\n    std::string strongest_extension;\n\
    \    int cap = 0;\n    int sm = 0;\n    for (auto e : extensions) {\n        cap\
    \ += e.size();\n        sm += std::count(e.begin(), e.end(), 'a');\n    }\n  \
    \  float strength = cap - sm;\n    if (strength > 0) {\n        strongest_extension\
    \ = class_name + \".\" + extensions[0];\n    } else {\n        for (auto e : extensions)\
    \ {\n            if (e.size() == strongest_extension.size()) {\n             \
    \   strongest_extension = class_name + \".\" + e;\n                break;\n  \
    \          }\n        }\n    }\n    return strongest_extension;", "    // Write\
    \ your code here\n    \n    std::string strongest_extension = \"\";\n    int cap\
    \ = 0;\n    int sm = 0;\n    for(auto &ext : extensions){\n        cap += ext.length();\n\
    \        sm += ext.length()-1;\n    }\n    float strength = cap - sm;\n    \n\
    \    for(auto &ext : extensions){\n        if(ext.length() == strongest_extension.length()){\n\
    \            if(strength > ext.length()-1){\n                strongest_extension\
    \ = ext;\n            }\n        }\n    }\n    return class_name + \".\" + strongest_extension;",
  "    int cap_num = 0, sm_num = 0;\n    for (auto &ext : extensions) {\n        cap_num\
    \ += ext.length();\n        sm_num += ext.length() - 1;\n    }\n    double strength\
    \ = cap_num - sm_num;\n    int strongest_ext = 0;\n    for (int i = 0; i < extensions.size();\
    \ i++) {\n        if (extensions[i].length() == cap_num - sm_num) {\n        \
    \    strongest_ext = i;\n            break;\n        }\n    }\n    return class_name\
    \ + \".\" + extensions[strongest_ext];", "    // Write your code here\n    std::string\
    \ strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n    for(auto\
    \ ext : extensions) {\n        cap += ext.length();\n        sm += ext.length();\n\
    \    }\n    float strength = cap - sm;\n    for(auto ext : extensions) {\n   \
    \     if(ext.length() == strongest_extension.length()) {\n            if(ext.compare(0,\
    \ strongest_extension.length(), strongest_extension) == 0) {\n               \
    \ strongest_extension = ext;\n            }\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_extension;", "    // Write your code here\n    std::string\
    \ strongest_extension = \"\";\n    int cap_extensions = 0;\n    int sm_extensions\
    \ = 0;\n    for(auto &extension : extensions) {\n        if(std::toupper(extension[0])\
    \ == extension[0]) {\n            cap_extensions++;\n        }\n        if(std::tolower(extension[0])\
    \ == extension[0]) {\n            sm_extensions++;\n        }\n    }\n    float\
    \ strength = cap_extensions - sm_extensions;\n    if(cap_extensions > sm_extensions)\
    \ {\n        strongest_extension = class_name + \".\" + extensions[0];\n    }\n\
    \    else {\n        strongest_extension = class_name + \".\" + extensions[sm_extensions];\n\
    \    }\n    return strongest_extension;", "    // Write your code here\n    \n\
    \    std::string strongest_extension = \"\";\n    \n    for (auto &extension :\
    \ extensions) {\n        int cap = std::count_if(extension.begin(), extension.end(),\
    \ [](char c) {return std::toupper(c) == c;});\n        int sm = std::count_if(extension.begin(),\
    \ extension.end(), [](char c) {return std::tolower(c) == c;});\n        float\
    \ strength = cap - sm;\n        if (strength > 0) {\n            strongest_extension\
    \ = class_name + \".\" + extension;\n            break;\n        }\n    }\n  \
    \  return strongest_extension;", "    std::string strongest_extension = class_name;\n\
    \    int cap_num = 0, sml_num = 0;\n    for (auto &ext : extensions) {\n     \
    \   cap_num += ext.length();\n        sml_num += ext.length() - 1;\n    }\n  \
    \  double strength = cap_num - sml_num;\n    if (strength > 0) {\n        std::sort(extensions.begin(),\
    \ extensions.end());\n        for (auto &ext : extensions) {\n            if (ext.length()\
    \ == strength) {\n                strongest_extension += \".\" + ext;\n      \
    \          break;\n            }\n        }\n    }\n    return strongest_extension;",
  "    // Your code here\n    \n    std::string strongest_extension = \"\";\n    int\
    \ cap = 0;\n    int sm = 0;\n    \n    for(int i = 0; i < extensions.size(); i++)\
    \ {\n        if(extensions[i].size() > 0) {\n            cap = cap + extensions[i].at(0);\n\
    \            sm = sm + extensions[i].at(0);\n        }\n    }\n    \n    float\
    \ strength = cap - sm;\n    \n    for(int i = 0; i < extensions.size(); i++) {\n\
    \        if(extensions[i].size() > 0) {\n            cap = cap - extensions[i].at(0);\n\
    \            sm = sm - extensions[i].at(0);\n        }\n    }\n    \n    float\
    \ strength2 = cap - sm;\n    \n    if(strength > strength2) {\n        strongest_extension\
    \ = class_name + \".\" + extensions[0];\n    }\n    else if(strength == strength2)\
    \ {\n        strongest_extension = class_name + \".\" + extensions[0];\n    }\n\
    \    else {\n        strongest_extension = class_name + \".\" + extensions[1];\n\
    \    }\n    \n    return strongest_extension;", "    // Your code here\n    std::string\
    \ strongest_extension;\n    int cap = 0;\n    int sm = 0;\n    for (auto &ext\
    \ : extensions) {\n        cap += ext.size();\n        sm += ext.size();\n   \
    \ }\n    cap = cap / extensions.size();\n    sm = sm / extensions.size();\n  \
    \  if (cap - sm > 0)\n        strongest_extension = class_name + \".\" + extensions[0];\n\
    \    else\n        strongest_extension = class_name + \".\" + extensions[extensions.size()-1];\n\
    \    return strongest_extension;", "    // Write your code here\n    \n    std::string\
    \ strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n    for (auto\
    \ &ext : extensions) {\n        cap += ext.size();\n        sm += ext.size();\n\
    \    }\n    cap = cap / extensions.size();\n    sm = sm / extensions.size();\n\
    \    if (cap - sm > 0)\n        strongest_extension = class_name + \".\" + extensions[0];\n\
    \    else\n        strongest_extension = class_name + \".\" + extensions[extensions.size()-1];\n\
    \    return strongest_extension;", "    // Write your code here\n    std::string\
    \ strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n    for (auto\
    \ &ext : extensions) {\n        cap += ext.length();\n        sm += ext.length();\n\
    \    }\n    cap = cap / 2;\n    sm = sm / 2;\n    if (cap - sm > 0) strongest_extension\
    \ = class_name + extensions[0];\n    else if (sm - cap > 0) strongest_extension\
    \ = class_name + extensions[1];\n    else strongest_extension = class_name + extensions[2];\n\
    \    return strongest_extension;", "    // Write your code here\n    std::string\
    \ strongest_extension = class_name;\n    int cap = 0;\n    int sm = 0;\n    for(auto\
    \ &ext : extensions) {\n        cap += ext.length();\n        sm += ext.length();\n\
    \    }\n    float strength = cap - sm;\n    for(auto &ext : extensions) {\n  \
    \      if(ext.length() == strongest_extension.length()) {\n            strongest_extension\
    \ = class_name + ext;\n        }\n    }\n    return strongest_extension;", " \
    \   // Your code here\n    std::string strongest_extension = \"\";\n    int cap\
    \ = 0;\n    int sm = 0;\n    for (auto &ext : extensions) {\n        cap += ext.length();\n\
    \        sm += ext.length();\n    }\n    float strength = cap - sm;\n    for (auto\
    \ &ext : extensions) {\n        if (ext.length() == cap - sm) {\n            strongest_extension\
    \ += class_name + \".\" + ext;\n        }\n    }\n    return strongest_extension;",
  "    // Write your code here\n    std::string strongest_extension = \"\";\n    int\
    \ cap = 0;\n    int sm = 0;\n    for(int i = 0; i < extensions.size(); i++) {\n\
    \        if(extensions[i].size() > cap) {\n            cap = extensions[i].size();\n\
    \        }\n        if(extensions[i].size() < sm) {\n            sm = extensions[i].size();\n\
    \        }\n    }\n    float strength = cap - sm;\n    for(int i = 0; i < extensions.size();\
    \ i++) {\n        if(extensions[i].size() == cap) {\n            if(extensions[i].compare(class_name.substr(0,\
    \ extensions[i].size())) == 0) {\n                strongest_extension = class_name\
    \ + \".\" + extensions[i];\n                break;\n            }\n        }\n\
    \    }\n    return strongest_extension;", "    // Write your code here\n    std::string\
    \ strongest_extension = \"\";\n    int cap = class_name.size();\n    int sm =\
    \ class_name.size();\n    for (auto &ext : extensions) {\n        cap = cap -\
    \ ext.size();\n        sm = sm - ext.size();\n    }\n    if (cap == sm) {\n  \
    \      strongest_extension = class_name + \".\" + extensions[0];\n    }\n    for\
    \ (int i = 1; i < extensions.size(); i++) {\n        if (extensions[i].size()\
    \ == cap) {\n            strongest_extension = class_name + \".\" + extensions[i];\n\
    \        }\n    }\n    return strongest_extension;", "    // Write your code here\n\
    \    std::string strongest_extension = \"\";\n    int cap_counter = 0;\n    int\
    \ sm_counter = 0;\n    for(auto extension : extensions) {\n        if(extension\
    \ == class_name[0]) {\n            cap_counter++;\n        }\n        if(extension\
    \ == class_name[class_name.size()-1]) {\n            sm_counter++;\n        }\n\
    \    }\n    float strength = cap_counter - sm_counter;\n    if(strength > 0) {\n\
    \        strongest_extension = class_name + \".\" + extensions[0];\n    }\n  \
    \  else if(strength < 0) {\n        strongest_extension = class_name + \".\" +\
    \ extensions[extensions.size()-1];\n    }\n    return strongest_extension;", " \
    \   // Write your code here\n    \n    std::string strongest_extension = class_name;\n\
    \    \n    for (int i = 0; i < extensions.size(); i++) {\n        std::string\
    \ extension = extensions[i];\n        int cap = extension.find_first_of('A');\n\
    \        int sm = extension.find_first_of('z');\n        int strength = cap -\
    \ sm;\n        if (strength > 0) {\n            strongest_extension += \".\" +\
    \ extension;\n        }\n    }\n    return strongest_extension;", "    int cap\
    \ = class_name.size();\n    int sm = class_name.size();\n    for (auto ext : extensions)\
    \ {\n        cap = cap - ext.size();\n        sm = sm - ext.size();\n    }\n \
    \   return class_name + \".\" + extensions[cap - sm];", "    // Write your code\
    \ here\n    std::string strongest_extension = \"\";\n    int cap_num = 0, sml_num\
    \ = 0;\n    for (auto &ext : extensions) {\n        cap_num += ext.length();\n\
    \        sml_num += ext.length() - cap_num;\n    }\n    float strength = cap_num\
    \ - sml_num;\n    for (auto &ext : extensions) {\n        if (ext.length() ==\
    \ cap_num) {\n            if (ext.compare(class_name.substr(0, ext.length()))\
    \ == 0) {\n                strongest_extension = class_name + ext;\n         \
    \   }\n        }\n    }\n    return strongest_extension;", "    \n    // Write\
    \ your code here\n    \n    std::string strongest_extension = \"\";\n    int cap\
    \ = 0;\n    int sm = 0;\n    \n    for(auto &ext : extensions) {\n        cap\
    \ += ext.length();\n        sm += ext.length() - cap;\n    }\n    \n    cap =\
    \ cap - sm;\n    \n    for(auto &ext : extensions) {\n        if(ext.length()\
    \ == cap) {\n            strongest_extension = class_name + ext;\n           \
    \ break;\n        }\n    }\n    \n    return strongest_extension;", "    // Write\
    \ your code here\n    std::string strongest_extension = \"\";\n    int cap = 0;\n\
    \    int sm = 0;\n    for (auto &ext : extensions) {\n        cap += ext.length();\n\
    \        sm += ext.length() - cap;\n    }\n    cap = cap / 2;\n    sm = sm / 2;\n\
    \    if (cap > sm) {\n        strongest_extension = class_name + extensions[0];\n\
    \    } else {\n        strongest_extension = class_name + extensions[1];\n   \
    \ }\n    return strongest_extension;", "    // Write your code here\n    \n  \
    \  std::string strongest_extension = class_name;\n    int cap = 0;\n    int sm\
    \ = 0;\n    \n    for (auto &ext : extensions) {\n        cap += ext.length();\n\
    \        sm += ext.length();\n    }\n    \n    float strength = cap - sm;\n  \
    \  \n    for (auto &ext : extensions) {\n        if (ext.length() == strongest_extension.length())\
    \ {\n            if (ext.length() < strongest_extension.length()) {\n        \
    \        strongest_extension = ext;\n            }\n        }\n    }\n    \n \
    \   return strongest_extension;", "    // Write your code here\n    std::string\
    \ strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n    for (int\
    \ i = 0; i < extensions.size(); i++) {\n        if (extensions[i].size() > cap)\
    \ {\n            cap = extensions[i].size();\n        }\n        if (extensions[i].size()\
    \ < sm) {\n            sm = extensions[i].size();\n        }\n    }\n    int strength\
    \ = cap - sm;\n    for (int i = 0; i < extensions.size(); i++) {\n        if (extensions[i].size()\
    \ == strength) {\n            strongest_extension += class_name + \".\" + extensions[i];\n\
    \        }\n    }\n    return strongest_extension;", "    // Write your code here\n\
    \    std::string strongest_extension = \"\";\n    \n    for(auto extension : extensions)\
    \ {\n        auto cap = std::count_if(extension.begin(), extension.end(), [](char\
    \ c) {return std::toupper(c) == c;});\n        auto sm = std::count_if(extension.begin(),\
    \ extension.end(), [](char c) {return std::tolower(c) == c;});\n        auto strength\
    \ = cap - sm;\n        \n        if(strength > 0) {\n            strongest_extension\
    \ += class_name + \".\" + extension;\n        }\n    }\n    \n    return strongest_extension;",
  "    // Your code here\n    std::string strongest_extension = \"\";\n    int cap\
    \ = 0;\n    int sm = 0;\n    for (auto &i : extensions) {\n        if (i == class_name[0])\
    \ {\n            cap++;\n        }\n        if (i == class_name[class_name.size()\
    \ - 1]) {\n            sm++;\n        }\n    }\n    if (cap - sm > 1) {\n    \
    \    strongest_extension = class_name + \".\" + extensions[0];\n    }\n    return\
    \ strongest_extension;", "    // Write your code here\n    std::string strongest_extension\
    \ = \"\";\n    int cap = 0;\n    int sm = 0;\n    for(auto &extension : extensions){\n\
    \        cap += extension.size()/2;\n        sm += extension.size();\n    }\n\
    \    float strength = cap - sm;\n    for(auto &extension : extensions){\n    \
    \    if(extension == class_name){\n            return class_name;\n        }\n\
    \        if(strength > 0){\n            strength -= extension.size();\n      \
    \  }\n    }\n    return strongest_extension;", "    // Write your code here\n\
    \    std::string strongest_extension = \"\";\n    int cap_counter = 0;\n    int\
    \ sm_counter = 0;\n    for (auto &extension : extensions) {\n        cap_counter\
    \ += extension.find_first_of('A');\n        sm_counter += extension.find_first_of('a',\
    \ 'z');\n    }\n    int strength = cap_counter - sm_counter;\n    if (strength\
    \ == 0) {\n        return class_name;\n    }\n    if (strength > 0) {\n      \
    \  strongest_extension = class_name + \".\" + extensions[0];\n    }\n    for (int\
    \ i = 1; i < extensions.size(); i++) {\n        if (strength > 0) {\n        \
    \    strongest_extension = class_name + \".\" + extensions[i];\n        }\n  \
    \      strength -= extensions[i].find_first_of('a', 'z');\n        if (strength\
    \ == 0) {\n            break;\n        }\n    }\n    return strongest_extension;",
  "    // Write your code here\n    int cap = 0;\n    int sm = 0;\n    for(auto &ext\
    \ : extensions){\n        cap += ext.size();\n        sm += ext.size();\n    }\n\
    \    float strength = cap - sm;\n    for(auto &ext : extensions){\n        if(ext.size()\
    \ == cap){\n            strength = -1;\n            break;\n        }\n    }\n\
    \    std::string strongest_ext = class_name + \".\" + extensions[0];\n    for(auto\
    \ &ext : extensions){\n        if(ext.size() > strongest_ext.size()){\n      \
    \      strongest_ext = class_name + \".\" + ext;\n        }\n    }\n    return\
    \ strongest_ext;", "    // Write your code here\n    std::string strongest_extension\
    \ = \"\";\n    int cap = 0;\n    int sm = 0;\n    for (auto &ext : extensions)\
    \ {\n        cap += ext.size();\n        sm += ext.size();\n    }\n    float strength\
    \ = cap - sm;\n    for (auto &ext : extensions) {\n        if (ext.size() == cap\
    \ - sm) {\n            strongest_extension = class_name + ext;\n            break;\n\
    \        }\n    }\n    return strongest_extension;", "    // Your code here\n\
    \    std::string strongest_extension;\n    int cap = 0;\n    int sm = 0;\n   \
    \ for (auto &ext : extensions) {\n        if (ext.size() > cap) {\n          \
    \  cap = ext.size();\n        }\n        if (ext.size() < sm) {\n            sm\
    \ = ext.size();\n        }\n    }\n    float strength = cap - sm;\n    if (strength\
    \ > 0) {\n        strongest_extension = class_name + \".\" + extensions[0];\n\
    \    }\n    for (int i = 1; i < extensions.size(); i++) {\n        if (strength\
    \ > 0) {\n            strongest_extension = class_name + \".\" + extensions[i];\n\
    \        }\n    }\n    return strongest_extension;", "    // Your code here\n\
    \    std::string strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n\
    \    for (auto e : extensions) {\n        cap += e.size();\n        sm += e.size();\n\
    \    }\n    float strength = cap - sm;\n    if (strength > 0) {\n        for (auto\
    \ e : extensions) {\n            if (e.size() == strength) {\n               \
    \ strongest_extension = class_name + e;\n                break;\n            }\n\
    \        }\n    }\n    return strongest_extension;", "    // Write your code here\n\
    \    \n    std::string strongest_extension = class_name;\n    int cap = 0;\n \
    \   int sm = 0;\n    \n    for (auto &extension : extensions) {\n        cap +=\
    \ (std::toupper(extension[0]) - std::toupper(extension[1]));\n        sm += (std::tolower(extension[0])\
    \ - std::tolower(extension[1]));\n    }\n    \n    float strength = cap - sm;\n\
    \    \n    if (strength > 0) {\n        strongest_extension += \".\";\n    }\n\
    \    \n    for (auto &extension : extensions) {\n        if (std::toupper(extension[0])\
    \ == std::toupper(extension[1])) {\n            strongest_extension += extension[0];\n\
    \        }\n    }\n    \n    return strongest_extension;", "    // Write your\
    \ code here\n    std::string strongest_extension = \"\";\n    int cap_counter\
    \ = 0;\n    int sm_counter = 0;\n    for (auto &extension : extensions) {\n  \
    \      cap_counter += std::toupper(extension[0]) - 'A';\n        sm_counter +=\
    \ std::tolower(extension[0]) - 'a';\n    }\n    if (cap_counter > sm_counter)\
    \ {\n        strongest_extension = class_name + extensions[0];\n    }\n    else\
    \ {\n        strongest_extension = class_name + extensions[1];\n    }\n    return\
    \ strongest_extension;", "    // Write your code here\n    std::string strongest_extension\
    \ = \"\";\n    int cap_num = 0, sm_num = 0;\n    for (auto &ext : extensions)\
    \ {\n        cap_num += ext.size();\n        sm_num += ext.size();\n    }\n  \
    \  float strength = cap_num - sm_num;\n    if (strength > 0) {\n        strongest_extension\
    \ = class_name + \".\" + extensions[0];\n    }\n    for (auto &ext : extensions)\
    \ {\n        if (ext.size() == strength) {\n            strongest_extension =\
    \ class_name + \".\" + ext;\n        }\n    }\n    return strongest_extension;",
  "    // Write your code here\n    \n    std::string strongest_extension = class_name;\n\
    \    int cap_counter = 0;\n    int sm_counter = 0;\n    for(auto &extension :\
    \ extensions) {\n        if(std::toupper(extension[0]) == extension[0]) {\n  \
    \          cap_counter++;\n        }\n        if(std::tolower(extension[0]) ==\
    \ extension[0]) {\n            sm_counter++;\n        }\n    }\n    \n    float\
    \ strength = cap_counter - sm_counter;\n    \n    if(strength > 0) {\n       \
    \ for(auto &extension : extensions) {\n            if(std::toupper(extension[0])\
    \ == extension[0]) {\n                cap_counter--;\n            }\n        \
    \    if(std::tolower(extension[0]) == extension[0]) {\n                sm_counter--;\n\
    \            }\n        }\n        strength = cap_counter - sm_counter;\n    }\n\
    \    \n    if(strength > 0) {\n        strongest_extension = class_name + extensions[0];\n\
    \    }\n    \n    return strongest_extension;", "    // Your code here\n    int\
    \ cap = class_name.size();\n    int sm = extensions.size();\n    int strength\
    \ = 0;\n    for (int i = 0; i < cap; i++) {\n        for (int j = 0; j < sm; j++)\
    \ {\n            if (class_name[i] == extensions[j][0] && class_name[i] == extensions[j][1])\
    \ {\n                strength = cap - sm;\n            }\n        }\n    }\n \
    \   if (strength > 0) {\n        return class_name + \".\" + extensions[strength][0];\n\
    \    }\n    else {\n        return class_name;\n    }", "    // Write your code\
    \ here\n    \n    std::string strongest_extension = \"\";\n    \n    for(auto\
    \ &extension : extensions) {\n        auto cap = std::count_if(extension.begin(),\
    \ extension.end(), [](char ch) {\n            return std::isupper(ch);\n     \
    \   });\n        auto sm = std::count_if(extension.begin(), extension.end(), [](char\
    \ ch) {\n            return std::islower(ch);\n        });\n        auto strength\
    \ = cap - sm;\n        if(strength > 0) {\n            strongest_extension = class_name\
    \ + \".\" + extension;\n            break;\n        }\n    }\n    return strongest_extension;",
  "    // Write your code here\n    std::string strongest_extension = \"\";\n    int\
    \ cap = 0;\n    int sm = 0;\n    for (auto &i : extensions) {\n        cap +=\
    \ i[0]-'A';\n        sm += i[1]-'a';\n    }\n    float strength = cap - sm;\n\
    \    if (strength > 0) {\n        strongest_extension = class_name + \".\" + extensions[0];\n\
    \    }\n    for (auto &i : extensions) {\n        if (i[0] == i[1]) {\n      \
    \      continue;\n        }\n        if (i[0] < i[1]) {\n            strongest_extension\
    \ = class_name + \".\" + i;\n        }\n    }\n    return strongest_extension;",
  "    // Your code here\n    std::string strongest_extension = \"\";\n    \n    int\
    \ cap_num = 0, sm_num = 0;\n    for (auto &ext : extensions) {\n        cap_num\
    \ += ext.length();\n        sm_num += ext.length() - cap_num;\n    }\n    \n \
    \   int strength = cap_num - sm_num;\n    \n    for (auto &ext : extensions) {\n\
    \        if (ext.length() == cap_num) {\n            if (ext.compare(extensions[0])\
    \ == 0) {\n                strongest_extension = class_name + ext;\n         \
    \       break;\n            }\n        }\n    }\n    \n    return strongest_extension;",
  "    // Your code here\n    std::string strongest_extension = \"\";\n    double\
    \ strongest_strength = 0;\n    for (auto &extension : extensions) {\n        double\
    \ extension_strength = std::count_if(extension.begin(), extension.end(), [](char\
    \ c) {\n            return std::toupper(c) >= 'A' && std::toupper(c) <= 'Z';\n\
    \        }) / extension.size();\n        if (extension_strength > strongest_strength)\
    \ {\n            strongest_strength = extension_strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + strongest_extension;",
  "    // Write your code here\n    std::string strongest_extension;\n    int cap_counter\
    \ = 0;\n    int sml_counter = 0;\n    for (auto &extension : extensions) {\n \
    \       if (std::toupper(extension[0]) == extension[0]) {\n            cap_counter++;\n\
    \        }\n        if (std::tolower(extension[0]) == extension[0]) {\n      \
    \      sml_counter++;\n        }\n    }\n    float strength = cap_counter - sml_counter;\n\
    \    if (strength > 0) {\n        strongest_extension = class_name + \".\" + extensions[0];\n\
    \    }\n    if (strength == 1) {\n        strongest_extension = class_name + \"\
    .\" + extensions[0];\n    }\n    if (strength > 1) {\n        strongest_extension\
    \ = class_name + \".\" + extensions[0];\n    }\n    return strongest_extension;",
  "    // Write your code here\n    std::string strongest_extension = \"\";\n    int\
    \ cap = 0;\n    int sm = 0;\n    for (auto &ext : extensions) {\n        cap +=\
    \ ext.length();\n        sm += ext.length();\n    }\n    float strength = cap\
    \ - sm;\n    if (strength > 0) {\n        strongest_extension = class_name + \"\
    .\" + extensions[0];\n    }\n    for (auto &ext : extensions) {\n        if (ext.length()\
    \ == strongest_extension.length()) {\n            if (ext.compare(0, strongest_extension.length(),\
    \ strongest_extension) == 0) {\n                strongest_extension = class_name\
    \ + \".\" + ext;\n            }\n        }\n    }\n    return strongest_extension;",
  "    // Your code here\n    std::string strongest_extension = \"\";\n    int cap\
    \ = 0;\n    int sm = 0;\n    for (auto &ext : extensions) {\n        cap += ext.size();\n\
    \        sm += ext.size();\n    }\n    cap = cap - sm;\n    if (cap > 0) {\n \
    \       strongest_extension = class_name + extensions[0];\n    }\n    for (auto\
    \ &ext : extensions) {\n        if (ext.size() == cap) {\n            strongest_extension\
    \ = class_name + ext;\n            break;\n        }\n    }\n    return strongest_extension;",
  "    int cap_num = 0, sm_num = 0;\n    for (auto &ext : extensions) {\n        cap_num\
    \ += ext.length();\n        sm_num += ext.length() - 1;\n    }\n    int strength\
    \ = cap_num - sm_num;\n    if (strength == 0) return class_name;\n    int index\
    \ = 0;\n    for (auto &ext : extensions) {\n        if (ext.length() == strength)\
    \ {\n            return class_name + \".\" + ext;\n        }\n        index++;\n\
    \    }\n    return class_name;", "    // Your code here\n    std::string strongest_extension\
    \ = \"\";\n    int cap = 0;\n    int sm = 0;\n    for (auto &i : extensions) {\n\
    \        cap += i[0]-'A';\n        sm += i[1]-'a';\n    }\n    float strength\
    \ = cap - sm;\n    for (auto &i : extensions) {\n        if (cap - i[0] < sm)\
    \ {\n            strongest_extension = class_name + i;\n            break;\n \
    \       }\n    }\n    return strongest_extension;", "    // Your code here\n \
    \   std::string strongest_extension = \"\";\n    int cap_counter = 0;\n    int\
    \ sm_counter = 0;\n    for (auto &extension : extensions) {\n        if (extension.at(0)\
    \ == class_name.at(0)) {\n            cap_counter++;\n        }\n        if (extension.at(1)\
    \ == class_name.at(0)) {\n            sm_counter++;\n        }\n    }\n    if\
    \ (cap_counter > sm_counter) {\n        strongest_extension = class_name + \"\
    .\" + extensions[0];\n    }\n    else {\n        strongest_extension = class_name\
    \ + \".\" + extensions[1];\n    }\n    return strongest_extension;", "    // Write\
    \ your code here\n    std::string strongest_extension = \"\";\n    int cap = 0;\n\
    \    int sm = 0;\n    for(auto &ext : extensions) {\n        if(ext.size() >=\
    \ cap) {\n            cap = ext.size();\n        }\n        if(ext.size() >= sm)\
    \ {\n            sm = ext.size();\n        }\n    }\n    float strength = cap\
    \ - sm;\n    for(auto &ext : extensions) {\n        if(ext.size() == cap) {\n\
    \            strongest_extension = class_name + ext;\n            break;\n   \
    \     }\n        if(ext.size() == sm) {\n            strongest_extension = class_name\
    \ + ext;\n            break;\n        }\n    }\n    return strongest_extension;",
  "    // Write your code here\n    std::string strongest_extension = \"\";\n    int\
    \ cap = 0;\n    int sm = 0;\n    for (auto &ext : extensions) {\n        cap +=\
    \ ext.size();\n        sm += ext.size();\n    }\n    float strength = cap - sm;\n\
    \    int max_strength = -1;\n    for (auto &ext : extensions) {\n        if (ext.size()\
    \ > max_strength) {\n            max_strength = ext.size();\n        }\n    }\n\
    \    for (auto &ext : extensions) {\n        if (ext.size() == max_strength) {\n\
    \            if (cap - ext.size() > sm) {\n                strongest_extension\
    \ = class_name + \".\" + ext;\n            }\n        }\n    }\n    return strongest_extension;",
  "    // Your code here\n    \n    std::string strongest_extension;\n    \n    for(auto\
    \ extension : extensions) {\n        auto cap = extension.find_first_of('A');\n\
    \        auto sm = extension.find_first_of('l');\n        auto strength = cap\
    \ - sm;\n        \n        if(strength > 0) {\n            strongest_extension\
    \ = class_name + extension;\n            break;\n        }\n    }\n    \n    return\
    \ strongest_extension;", "    // Your code here\n    std::string strongest_extension\
    \ = \"\";\n    int cap = 0;\n    int sm = 0;\n    for (auto &ext : extensions)\
    \ {\n        cap += ext.length();\n        sm += ext.length() - cap;\n    }\n\
    \    cap = cap / 2;\n    sm = sm / 2;\n    if (cap - sm > 0) strongest_extension\
    \ = class_name + extensions[0];\n    else if (sm - cap > 0) strongest_extension\
    \ = class_name + extensions[1];\n    else strongest_extension = class_name + extensions[2];\n\
    \    return strongest_extension;", "    // Write your code here\n    std::string\
    \ strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n    for (auto\
    \ &ext : extensions) {\n        cap += ext.size();\n        sm += ext.size();\n\
    \    }\n    float strength = cap - sm;\n    if (strength > 0) {\n        strongest_extension\
    \ = class_name + \".\" + extensions[0];\n    }\n    for (int i = 1; i < extensions.size();\
    \ i++) {\n        if (strength > 0) {\n            strongest_extension = class_name\
    \ + \".\" + extensions[i];\n        }\n    }\n    return strongest_extension;",
  "    // Your code here\n    ", "    // Write your code here\n    \n    std::string\
    \ strongest_extension = class_name;\n    int cap = 0;\n    int sm = 0;\n    \n\
    \    for (auto &ext : extensions) {\n        cap += ext.size();\n        sm +=\
    \ ext.size();\n    }\n    \n    if (cap - sm > 0)\n        strongest_extension\
    \ += \".\";\n    \n    for (auto &ext : extensions) {\n        if (cap - sm ==\
    \ 0) {\n            strongest_extension += ext;\n            break;\n        }\n\
    \        \n        if (ext.size() < cap - sm) {\n            strongest_extension\
    \ += ext;\n            break;\n        }\n        \n        if (ext.size() > cap\
    \ - sm) {\n            strongest_extension += ext.substr(0, cap - sm);\n     \
    \       break;\n        }\n    }\n    \n    return strongest_extension;", "  \
    \  // Write your code here\n    \n    std::string strongest_extension = \"\";\n\
    \    \n    for(int i = 0; i < extensions.size(); i++){\n        std::string extension\
    \ = extensions[i];\n        \n        for(int j = 0; j < extension.size(); j++){\n\
    \            char c = extension[j];\n            \n            if(c == toupper(extension[j])){\n\
    \                strongest_extension += c;\n            }\n        }\n    }\n\
    \    \n    return class_name + \".\" + strongest_extension;", "    // Write your\
    \ code here\n    std::string strongest_extension;\n    int cap = 0;\n    int sm\
    \ = 0;\n    for (auto &ext : extensions) {\n        cap += ext.length();\n   \
    \     sm += ext.length() - cap;\n    }\n    cap = cap - sm;\n    int strength\
    \ = cap - cap;\n    if (strength > 0) {\n        strongest_extension = class_name\
    \ + extensions[0];\n    }\n    for (int i = 1; i < extensions.size(); i++) {\n\
    \        if (strength > 0) {\n            strongest_extension = class_name + extensions[i];\n\
    \        }\n        strength -= extensions[i].length();\n    }\n    return strongest_extension;",
  "    std::string extension = \"\";\n    int cap = 0;\n    int sm = 0;\n    for (auto\
    \ &ext : extensions) {\n        cap += ext.length();\n        sm += ext.length();\n\
    \    }\n    cap = cap / 2;\n    sm = sm / 2;\n    if (cap - sm > 0)\n        extension\
    \ = class_name + extensions[0];\n    else if (cap - sm == 0)\n        extension\
    \ = class_name + extensions[1];\n    else\n        extension = class_name + extensions[2];\n\
    \    return extension;", "    // Write your code here\n    \n    std::string strongest_extension\
    \ = class_name;\n    int cap = class_name.size();\n    int sm = class_name.size();\n\
    \    \n    for (int i = 0; i < extensions.size(); i++) {\n        cap = cap -\
    \ extensions[i].size();\n        sm = sm - extensions[i].size();\n    }\n    \n\
    \    if (cap > sm) {\n        strongest_extension = class_name + extensions[0];\n\
    \    }\n    \n    return strongest_extension;", "    // Write your code here\n\
    \    std::string strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n\
    \    for(auto it=extensions.begin(); it!=extensions.end(); ++it) {\n        cap\
    \ += std::toupper(*it).size();\n        sm += std::tolower(*it).size();\n    }\n\
    \    float strength = cap - sm;\n    if(strength > 0) {\n        for(auto it=extensions.begin();\
    \ it!=extensions.end(); ++it) {\n            if(std::toupper(*it) == std::toupper(class_name))\
    \ {\n                strongest_extension = class_name + \".\" + std::toupper(*it);\n\
    \                break;\n            }\n        }\n    }\n    return strongest_extension;",
  "    // Your code here\n    \n    std::string strongest_extension = \"\";\n    int\
    \ cap = 0;\n    int sm = 0;\n    \n    for (auto &ext : extensions) {\n      \
    \  cap += ext.length();\n        sm += ext.length();\n    }\n    \n    cap = cap\
    \ / extensions.size();\n    sm = sm / extensions.size();\n    \n    if (cap -\
    \ sm > 0)\n        strongest_extension = class_name + extensions[cap - sm];\n\
    \    else\n        strongest_extension = class_name;\n    \n    return strongest_extension;",
  "    std::string strongest_extension = \"\";\n    int cap_counter = 0;\n    int\
    \ sm_counter = 0;\n    for (auto &extension : extensions) {\n        cap_counter\
    \ += std::count_if(extension.begin(), extension.end(), [](char c) {\n        \
    \    return std::toupper(c) == c;\n        });\n        sm_counter += std::count_if(extension.begin(),\
    \ extension.end(), [](char c) {\n            return std::tolower(c) == c;\n  \
    \      });\n    }\n    double strength = cap_counter - sm_counter;\n    if (strength\
    \ > 0) {\n        strongest_extension = class_name + \".\" + extensions[0];\n\
    \    }\n    for (auto &extension : extensions) {\n        if (strength > 0) {\n\
    \            double extension_strength = std::count_if(extension.begin(), extension.end(),\
    \ [](char c) {\n                return std::toupper(c) == c;\n            });\n\
    \            if (extension_strength > strength) {\n                strongest_extension\
    \ = class_name + \".\" + extension;\n            }\n        }\n    }\n    return\
    \ strongest_extension;", "    // Write your code here\n    \n    std::string strongest_extension\
    \ = \"\";\n    int cap_counter = 0;\n    int sm_counter = 0;\n    \n    for (auto\
    \ extension : extensions) {\n        cap_counter += std::count_if(extension.begin(),\
    \ extension.end(), [](char c) {\n            return std::toupper(c) == c;\n  \
    \      });\n        sm_counter += std::count_if(extension.begin(), extension.end(),\
    \ [](char c) {\n            return std::tolower(c) == c;\n        });\n    }\n\
    \    \n    int strength = cap_counter - sm_counter;\n    \n    if (strength >\
    \ 0) {\n        strongest_extension = class_name + \".\" + extensions[0];\n  \
    \  }\n    \n    for (auto extension : extensions) {\n        if (strength > 0)\
    \ {\n            if (std::tolower(extension) == std::tolower(extensions[0])) {\n\
    \                strongest_extension = class_name + \".\" + extension;\n     \
    \           break;\n            }\n        }\n    }\n    \n    return strongest_extension;",
  "    // Write your code here\n    \n    std::string strongest_extension;\n    \n\
    \    int cap = 0;\n    int sm = 0;\n    \n    for (auto &ext : extensions) {\n\
    \        cap += ext.length();\n        sm += ext.length();\n    }\n    \n    float\
    \ strength = cap - sm;\n    \n    for (auto &ext : extensions) {\n        if (ext.length()\
    \ == strongest_extension.length()) {\n            if (ext.length() > strongest_extension.length())\
    \ {\n                strongest_extension = ext;\n            }\n        }\n  \
    \  }\n    \n    return class_name + \".\" + strongest_extension;", "    std::string\
    \ strongest_extension = class_name;\n    int cap = 0;\n    int sm = 0;\n    for(auto\
    \ &ext : extensions) {\n        cap += ext.length();\n        sm += ext.length()\
    \ - cap;\n    }\n    cap = cap - sm;\n    for(auto &ext : extensions) {\n    \
    \    if(ext.length() == cap) {\n            strongest_extension += ext;\n    \
    \    }\n    }\n    return strongest_extension;", "    // Write your code here\n\
    \    std::string strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n\
    \    for (auto &ext : extensions) {\n        cap += ext.size();\n        sm +=\
    \ ext.size();\n    }\n    float strength = cap - sm;\n    if (strength > 0) {\n\
    \        strongest_extension = class_name + \".\" + extensions[0];\n    }\n  \
    \  for (auto &ext : extensions) {\n        if (ext.size() > strongest_extension.size())\
    \ {\n            strongest_extension = class_name + \".\" + ext;\n        }\n\
    \    }\n    return strongest_extension;", "    int cap_num = 0, sm_num = 0;\n\
    \    for (auto &ext : extensions) {\n        cap_num += ext.length();\n      \
    \  sm_num += ext.length();\n    }\n    double strength = cap_num - sm_num;\n \
    \   double max_strength = -1;\n    for (auto &ext : extensions) {\n        double\
    \ ext_strength = ext.length();\n        if (ext_strength > max_strength) {\n \
    \           max_strength = ext_strength;\n        }\n    }\n    if (max_strength\
    \ == -1) {\n        return class_name;\n    }\n    double strength_diff = strength\
    \ / max_strength;\n    double max_diff = -1;\n    for (auto &ext : extensions)\
    \ {\n        double ext_diff = ext.length() / max_strength;\n        if (ext_diff\
    \ > max_diff) {\n            max_diff = ext_diff;\n        }\n    }\n    if (max_diff\
    \ == -1) {\n        return class_name;\n    }\n    double diff_diff = strength_diff\
    \ / max_diff;\n    double max_diff_diff = -1;\n    for (auto &ext : extensions)\
    \ {\n        double ext_diff_diff = ext.length() / max_diff;\n        if (ext_diff_diff\
    \ > max_diff_diff) {\n            max_diff_diff = ext_diff_diff;\n        }\n\
    \    }\n    if (max_diff_diff == -1) {\n        return class_name;\n    }\n  \
    \  std::string strongest_ext;\n    for (auto &ext : extensions) {\n        if\
    \ (ext.length() == max_diff_diff) {\n            strongest_ext = class_name +\
    \ \".\" + ext;\n        }\n    }\n    return strongest_ext;", "    // Write your\
    \ code here\n    std::string strongest_extension = \"\";\n    int cap_num = 0,\
    \ sm_num = 0;\n    for (auto &ext : extensions) {\n        cap_num += ext.length();\n\
    \        sm_num += ext.length();\n    }\n    double strength = cap_num - sm_num;\n\
    \    if (strength > 0) {\n        strongest_extension = class_name + \".\" + extensions[0];\n\
    \    }\n    for (auto &ext : extensions) {\n        if (ext.length() == strength)\
    \ {\n            strongest_extension = class_name + \".\" + ext;\n        }\n\
    \    }\n    return strongest_extension;", "    // Write your code here\n    std::string\
    \ strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n    for (auto\
    \ &ext : extensions) {\n        cap += ext.size();\n        sm += ext.size();\n\
    \    }\n    float strength = cap - sm;\n    if (strength > 0) {\n        strongest_extension\
    \ = class_name + \".\" + extensions[0];\n    }\n    for (auto &ext : extensions)\
    \ {\n        if (ext.size() == strongest_extension.size()) {\n            if (strength\
    \ > 0) {\n                strongest_extension = class_name + \".\" + ext;\n  \
    \          }\n        }\n    }\n    return strongest_extension;", "    // Write\
    \ your code here\n    std::string strongest_extension;\n    int cap_counter =\
    \ 0;\n    int sml_counter = 0;\n    for (auto &ext : extensions) {\n        if\
    \ (ext.size() == cap_counter) {\n            strongest_extension = class_name\
    \ + ext;\n            break;\n        }\n        if (ext.size() == sml_counter)\
    \ {\n            strongest_extension = class_name + ext;\n            break;\n\
    \        }\n        cap_counter++;\n        sml_counter++;\n    }\n    return\
    \ strongest_extension;", "    // Write your code here\n    std::string strongest_extension\
    \ = \"\";\n    int cap = 0;\n    int sm = 0;\n    for(auto &ext : extensions){\n\
    \        cap += ext.size();\n        sm += ext.size();\n    }\n    float strength\
    \ = cap - sm;\n    for(auto &ext : extensions){\n        if(ext.size() == cap){\n\
    \            strongest_extension = class_name + ext;\n            break;\n   \
    \     }\n    }\n    if(strongest_extension.empty()){\n        for(auto &ext :\
    \ extensions){\n            if(ext.size() < cap){\n                strongest_extension\
    \ = class_name + ext;\n                break;\n            }\n        }\n    }\n\
    \    return strongest_extension;", "    int cap_num = 0, sm_num = 0;\n    for\
    \ (auto &ext : extensions) {\n        cap_num += ext.length();\n        sm_num\
    \ += ext.length();\n    }\n    int cap = cap_num / class_name.size();\n    int\
    \ sm = sm_num / class_name.size();\n    if (cap > sm) {\n        return class_name\
    \ + \".\" + extensions[0];\n    }\n    return class_name + \".\" + extensions[extensions.size()\
    \ - 1];", "    // Write your code here\n    std::string strongest_extension =\
    \ \"\";\n    std::string extension = \"\";\n    int cap = 0;\n    int sm = 0;\n\
    \    for (auto &i : extensions) {\n        cap += i[0]-'A';\n        sm += i[1]-'a';\n\
    \    }\n    float strength = cap - sm;\n    if (strength > 0) {\n        strongest_extension\
    \ = class_name + extensions[0];\n    }\n    for (auto &i : extensions) {\n   \
    \     if (i[0] == i[1]) {\n            continue;\n        }\n        if (i[0]\
    \ < i[1]) {\n            strongest_extension = class_name + extensions[0];\n \
    \           break;\n        }\n        if (i[0] > i[1]) {\n            strongest_extension\
    \ = class_name + extensions[1];\n            break;\n        }\n    }\n    return\
    \ strongest_extension;", "    int cap_num = 0, sm_num = 0;\n    for (auto &ext\
    \ : extensions) {\n        cap_num += ext.length();\n        sm_num += ext.length()\
    \ - 1;\n    }\n    double strength = cap_num - sm_num;\n    int strongest_ext\
    \ = 0;\n    for (auto &ext : extensions) {\n        if (ext.length() == strength)\
    \ {\n            strongest_ext = ext.length();\n        }\n    }\n    return class_name\
    \ + \".\" + extensions[strongest_ext];", "    int cap_num = 0, sm_num = 0;\n \
    \   for (auto &ext : extensions) {\n        cap_num += ext.length();\n       \
    \ sm_num += ext.length() - 1;\n    }\n    double strength = cap_num - sm_num;\n\
    \    int max_strength = -1;\n    for (auto &ext : extensions) {\n        if (ext.length()\
    \ > max_strength) {\n            max_strength = ext.length();\n        }\n   \
    \ }\n    if (max_strength == -1) {\n        return class_name;\n    }\n    std::string\
    \ strongest_ext;\n    for (auto &ext : extensions) {\n        if (ext.length()\
    \ == max_strength) {\n            strongest_ext = class_name + \".\" + ext;\n\
    \            break;\n        }\n    }\n    return strongest_ext;", "    // Write\
    \ your code here\n    std::string strongest_extension = \"\";\n    \n    for(auto\
    \ &extension : extensions){\n        int cap = extension.size()-1;\n        int\
    \ sm = extension.size()-cap;\n        float strength = (float)cap-(float)sm;\n\
    \        if(strength > 0){\n            strongest_extension = class_name + \"\
    .\" + extension;\n            break;\n        }\n    }\n    return strongest_extension;",
  "    // Write your code here\n    std::string strongest_extension;\n    int cap_counter\
    \ = 0;\n    int sm_counter = 0;\n    for (auto &extension : extensions) {\n  \
    \      if (extension == class_name[0]) {\n            cap_counter++;\n       \
    \ }\n        if (extension == class_name[class_name.length() - 1]) {\n       \
    \     sm_counter++;\n        }\n    }\n    double strength = cap_counter - sm_counter;\n\
    \    if (strength > 0) {\n        strongest_extension = class_name + \".\" + extensions[0];\n\
    \    }\n    if (strength < 0) {\n        strongest_extension = class_name + \"\
    .\" + extensions[extensions.size() - 1];\n    }\n    return strongest_extension;",
  "    // Write your code here\n    std::string strongest_extension = class_name;\n\
    \    int cap = 0;\n    int sm = 0;\n    for (auto &ext : extensions) {\n     \
    \   cap += ext.length();\n        sm += ext.length();\n    }\n    float strength\
    \ = cap - sm;\n    if (strength > 0) {\n        for (auto &ext : extensions) {\n\
    \            if (ext.length() == strength) {\n                strongest_extension\
    \ = class_name + ext;\n                break;\n            }\n        }\n    }\n\
    \    return strongest_extension;", "    // Write your code here\n    std::string\
    \ strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n    for (auto\
    \ &ext : extensions) {\n        cap += ext.length();\n        sm += ext.length();\n\
    \    }\n    float strength = cap - sm;\n    int index = std::distance(extensions.begin(),\
    \ std::max_element(extensions.begin(), extensions.end(), [&](std::string a, std::string\
    \ b) { return a.length() < b.length(); }));\n    strongest_extension = class_name\
    \ + extensions[index];\n    return strongest_extension;", "    // Write your code\
    \ here\n    std::string strongest_extension = \"\";\n    int cap = 0;\n    int\
    \ sm = 0;\n    for(auto &extension : extensions){\n        cap += extension.at(0)\
    \ - 'A';\n        sm += extension.at(1) - 'a';\n    }\n    float strength = cap\
    \ - sm;\n    for(auto &extension : extensions){\n        if(extension.at(0) -\
    \ 'A' == cap && extension.at(1) - 'a' == sm){\n            strongest_extension\
    \ = class_name + \".\" + extension;\n            break;\n        }\n    }\n  \
    \  return strongest_extension;", "    // Write your code here\n    std::string\
    \ strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n    for (auto\
    \ &ext : extensions) {\n        cap += ext.length();\n        sm += ext.length();\n\
    \    }\n    cap = cap / 2;\n    sm = sm / 2;\n    if (cap - sm > 0)\n        strongest_extension\
    \ = class_name + extensions[0];\n    else if (cap - sm == 0)\n        strongest_extension\
    \ = class_name + extensions[1];\n    else\n        strongest_extension = class_name\
    \ + extensions[2];\n    return strongest_extension;", "    // Your code here\n\
    \    std::string strongest_extension = \"\";\n    std::string strongest_extension_strength\
    \ = \"\";\n    int cap_counter = 0;\n    int sm_counter = 0;\n    for(auto &extension\
    \ : extensions) {\n        if(extension == class_name[0]) {\n            cap_counter++;\n\
    \        }\n        if(extension == class_name[class_name.length() - 1]) {\n \
    \           sm_counter++;\n        }\n    }\n    double strength = cap_counter\
    \ - sm_counter;\n    if(strength > 0) {\n        strongest_extension_strength\
    \ = class_name + \".\" + extensions[0];\n    }\n    else if(strength < 0) {\n\
    \        strongest_extension_strength = class_name + \".\" + extensions[extensions.size()\
    \ - 1];\n    }\n    else if(strength == 0) {\n        strongest_extension_strength\
    \ = class_name;\n    }\n    else {\n        strongest_extension_strength = class_name\
    \ + \".\" + extensions[0];\n    }\n    return strongest_extension_strength;",
  "    // Write your code here\n    \n    std::string strongest_extension = class_name;\n\
    \    int cap = 0;\n    int sm = 0;\n    for (auto &ext : extensions) {\n     \
    \   cap += ext.size();\n        sm += ext.size();\n    }\n    \n    if (cap -\
    \ sm > 0) {\n        float strength = (float)cap - sm;\n        std::sort(extensions.begin(),\
    \ extensions.end(), [&](std::string &a, std::string &b) -> bool {\n          \
    \  return a.size() > b.size() ? true : a.size() < b.size();\n        });\n   \
    \     for (auto &ext : extensions) {\n            if (ext.size() == strongest_extension.size())\
    \ {\n                if (ext.size() < strongest_extension.size()) {\n        \
    \            strongest_extension = class_name + ext;\n                }\n    \
    \        }\n        }\n    }\n    return strongest_extension;", "    // Write\
    \ your code here\n    std::string strongest_extension = \"\";\n    int cap = 0;\n\
    \    int sm = 0;\n    for (auto &e : extensions) {\n        if (e.size() > cap)\
    \ {\n            cap = e.size();\n        }\n        if (e.size() < sm) {\n  \
    \          sm = e.size();\n        }\n    }\n    float strength = cap - sm;\n\
    \    if (strength == 0) {\n        return class_name;\n    }\n    for (auto &e\
    \ : extensions) {\n        if (e.size() == cap) {\n            strongest_extension\
    \ += e;\n        }\n    }\n    return class_name + \".\" + strongest_extension;",
  "    // Your code here\n    std::string strongest_extension = \"\";\n    int cap\
    \ = 0;\n    int sm = 0;\n    for (auto &ext : extensions) {\n        cap += ext.size();\n\
    \        sm += ext.size();\n    }\n    cap = cap - sm;\n    if (cap > 0) {\n \
    \       strongest_extension = class_name + \".\" + extensions[0];\n    }\n   \
    \ for (auto &ext : extensions) {\n        if (ext.size() == cap) {\n         \
    \   strongest_extension = class_name + \".\" + ext;\n        }\n    }\n    return\
    \ strongest_extension;", "    int cap_num = 0, sm_num = 0;\n    for (auto &ext\
    \ : extensions) {\n        cap_num += ext.size();\n        sm_num += ext.size();\n\
    \    }\n    float strength = cap_num - sm_num;\n    std::string strongest_ext;\n\
    \    for (auto &ext : extensions) {\n        if (ext.size() == strength) {\n \
    \           strongest_ext = class_name + \".\" + ext;\n            break;\n  \
    \      }\n    }\n    return strongest_ext;", "    int cap = class_name.size();\n\
    \    int sm = class_name.size();\n    for (auto ext : extensions) {\n        cap\
    \ = cap - ext.size();\n        sm = sm - ext.size();\n    }\n    float strength\
    \ = cap - sm;\n    if (strength > 0) {\n        return class_name + \".\" + extensions[0];\n\
    \    }\n    else if (strength == 0){\n        return class_name;\n    }\n    else\
    \ {\n        return class_name + \".\" + extensions[extensions.size()-1];\n  \
    \  }", "    // Write your code here\n    std::string strongest_extension = \"\"\
    ;\n    int cap_counter = 0;\n    int sml_counter = 0;\n    for (auto &ext : extensions)\
    \ {\n        if (ext.length() == 0) {\n            continue;\n        }\n    \
    \    if (ext.at(0) == class_name.at(0)) {\n            cap_counter++;\n      \
    \  }\n        if (ext.at(0) >= class_name.at(0)) {\n            sml_counter++;\n\
    \        }\n    }\n    if (cap_counter > sml_counter) {\n        strongest_extension\
    \ = class_name + \".\" + extensions[0];\n    }\n    else {\n        strongest_extension\
    \ = class_name + \".\" + extensions[sml_counter];\n    }\n    return strongest_extension;",
  "    // Write your code here\n    \n    std::string strongest_extension = \"\";\n\
    \    int cap = 0;\n    int sm = 0;\n    for(auto &ext : extensions){\n       \
    \ if(ext.size() > cap){\n            cap = ext.size();\n        }\n        if(ext.size()\
    \ < sm){\n            sm = ext.size();\n        }\n    }\n    float strength =\
    \ cap - sm;\n    \n    for(auto &ext : extensions){\n        if(ext.size() ==\
    \ cap){\n            if(ext.compare(class_name.substr(0, ext.size())) == 0){\n\
    \                strongest_extension = class_name + ext;\n            }\n    \
    \    }\n    }\n    return strongest_extension;", "    // Write your code here\n\
    \    int cap = class_name.size();\n    int sm = class_name.size();\n    for(int\
    \ i = 0; i < extensions.size(); i++){\n        cap = cap - extensions[i].size();\n\
    \        sm = sm - extensions[i].size();\n    }\n    float strength = cap - sm;\n\
    \    std::string strongest_extension = \"\";\n    for(int i = 0; i < extensions.size();\
    \ i++){\n        if(strength > 0){\n            strongest_extension = strongest_extension\
    \ + class_name + \".\" + extensions[i];\n            strength = strength - 1;\n\
    \        }\n    }\n    return strongest_extension;", "    // Write your code here\n\
    \    std::string strongest_extension = \"\";\n    int cap_num = 0, sm_num = 0;\n\
    \    for (auto &ext : extensions) {\n        if (ext.size() > cap_num) {\n   \
    \         cap_num = ext.size();\n        }\n        if (ext.size() < sm_num) {\n\
    \            sm_num = ext.size();\n        }\n    }\n    float cap_frac = cap_num\
    \ - sm_num;\n    if (cap_frac > 1) {\n        cap_frac = cap_frac / 2;\n    }\n\
    \    cap_num -= cap_frac;\n    for (auto &ext : extensions) {\n        if (ext.size()\
    \ > cap_num) {\n            cap_num = ext.size();\n        }\n    }\n    for (auto\
    \ &ext : extensions) {\n        if (ext.size() < sm_num) {\n            sm_num\
    \ = ext.size();\n        }\n    }\n    float sm_frac = sm_num - cap_num;\n   \
    \ if (sm_frac > 1) {\n        sm_frac = sm_frac / 2;\n    }\n    sm_num -= sm_frac;\n\
    \    for (auto &ext : extensions) {\n        if (ext.size() > cap_num) {\n   \
    \         cap_num = ext.size();\n        }\n        if (ext.size() < sm_num) {\n\
    \            sm_num = ext.size();\n        }\n    }\n    cap_num -= sm_num;\n\
    \    for (auto &ext : extensions) {\n        if (ext.size() > cap_num) {\n   \
    \         cap_num = ext.size();\n        }\n    }\n    for (auto &ext : extensions)\
    \ {\n        if (ext.size() < sm_num) {\n            sm_num = ext.size();\n  \
    \      }\n    }\n    cap_num -= sm_num;\n    for (auto &ext : extensions) {\n\
    \        if (ext.size() > cap_num) {\n            cap_num = ext.size();\n    \
    \    }\n    }\n    for (auto &ext : extensions) {\n        if (ext.size() < sm_num)\
    \ {\n            sm_num = ext.size();\n        }\n    }\n    cap_num -= sm_num;\n\
    \    for (auto &ext : extensions) {\n        if (ext.size() > cap_num) {\n   \
    \         cap_num = ext.size();\n        }\n    }\n    for (auto &ext : extensions)\
    \ {\n        if (ext.size() < sm_num) {\n            sm_num = ext.size();\n  \
    \      }\n    }\n    cap_num -= sm_num;\n    for (auto &ext : extensions) {\n\
    \        if (ext.size() > cap_num) {\n            cap_num = ext.size();\n    \
    \    }\n    }\n    for (auto &ext : extensions) {\n        if (ext.size() < sm_num)\
    \ {\n            sm_num = ext.size();\n        }\n    }\n    cap_num -= sm_num;\n\
    \    for (auto ", "    // Write your code here\n    std::string strongest_extension\
    \ = class_name;\n    int cap = 0;\n    int sm = 0;\n    for (int i = 0; i < extensions.size();\
    \ i++) {\n        cap += (extensions[i].size() - extensions[i].find_first_of('A'));\n\
    \        sm += (extensions[i].size() - extensions[i].find_first_of('a')) + 1;\n\
    \    }\n    if (cap - sm > 0) strongest_extension += \".\";\n    for (int i =\
    \ 0; i < extensions.size(); i++) {\n        if (extensions[i].size() == cap -\
    \ sm) {\n            strongest_extension += extensions[i];\n        }\n    }\n\
    \    return strongest_extension;", "    // Write your code here\n    std::string\
    \ strongest_extension = class_name;\n    int cap = class_name.size();\n    int\
    \ sm = extensions.size();\n    int strength = cap - sm;\n    for (int i = 0; i\
    \ < extensions.size(); i++) {\n        if (extensions[i] == strongest_extension)\
    \ {\n            strength = i;\n        }\n    }\n    if (strength != -1) {\n\
    \        strongest_extension = class_name + extensions[strength];\n    }\n   \
    \ return strongest_extension;", "    int cap = class_name.size();\n    int sm\
    \ = class_name.size();\n    for (auto ext : extensions) {\n        cap = cap -\
    \ ext.size();\n        sm = sm - ext.size();\n    }\n    return class_name + \"\
    .\" + extensions[cap - sm];", "    // Write your code here\n    \n    std::string\
    \ strongest_extension;\n    int cap = 0;\n    int sm = 0;\n    for(auto &extension\
    \ : extensions){\n        cap += extension.size()-1;\n        sm += extension.size()-1;\n\
    \    }\n    \n    float strength = cap - sm;\n    \n    for(auto &extension :\
    \ extensions){\n        if(extension == class_name){\n            strongest_extension\
    \ = class_name;\n            break;\n        }\n        if(strength > 0){\n  \
    \          if(extension.find(class_name) != std::string::npos){\n            \
    \    strongest_extension = class_name + extension;\n                break;\n \
    \           }\n        }\n        else{\n            if(extension.find(class_name)\
    \ != std::string::npos){\n                strongest_extension = class_name + extension;\n\
    \                break;\n            }\n        }\n    }\n    return strongest_extension;",
  "    // Write your code here\n    std::string strongest_extension = \"\";\n    int\
    \ cap = 0;\n    int sm = 0;\n    for (auto &extension : extensions) {\n      \
    \  cap += (extension.size()-1);\n        sm += (extension.size()-1);\n    }\n\
    \    float strength = cap - sm;\n    if (strength > 0) {\n        strongest_extension\
    \ = class_name + \".\" + extensions[0];\n    }\n    for (int i = 1; i < extensions.size();\
    \ i++) {\n        if (strength > 0) {\n            strongest_extension = class_name\
    \ + \".\" + extensions[i];\n        }\n    }\n    return strongest_extension;",
  "    // Your code here\n    std::string strongest_extension = \"\";\n    std::string\
    \ extension_strength = \"\";\n    int cap = 0;\n    int sm = 0;\n    for(auto\
    \ &extension : extensions){\n        cap += extension.size()-1;\n        sm +=\
    \ extension.size()-1;\n    }\n    extension_strength = cap - sm;\n    for(auto\
    \ &extension : extensions){\n        if(extension_strength == extension.size()-1){\n\
    \            strongest_extension = class_name + extension;\n            break;\n\
    \        }\n    }\n    return strongest_extension;", "    // Your code here\n\
    \    std::string strongest_extension;\n    int cap = 0;\n    int sm = 0;\n   \
    \ for (auto &ext : extensions) {\n        cap += ext.size();\n        sm += ext.size();\n\
    \    }\n    cap = cap - sm;\n    if (cap > 0) {\n        strongest_extension =\
    \ class_name + extensions[0];\n    }\n    for (auto &ext : extensions) {\n   \
    \     if (ext.size() == cap) {\n            strongest_extension = class_name +\
    \ ext;\n        }\n    }\n    return strongest_extension;", "    int cap_num =\
    \ 0, sm_num = 0;\n    for (auto &ext : extensions) {\n        cap_num += ext.length();\n\
    \        sm_num += ext.length() - 1;\n    }\n    double strength = cap_num - sm_num;\n\
    \    double max_strength = -1;\n    for (auto &ext : extensions) {\n        double\
    \ cur_strength = ext.length() - 1;\n        if (cur_strength > max_strength) {\n\
    \            max_strength = cur_strength;\n        }\n    }\n    if (max_strength\
    \ == -1) {\n        return class_name;\n    }\n    std::string res = class_name\
    \ + \".\";\n    for (auto &ext : extensions) {\n        if (ext.length() == max_strength)\
    \ {\n            res += ext;\n        }\n    }\n    return res;", "    // Write\
    \ your code here\n    \n    std::string strongest_extension = class_name;\n  \
    \  int cap = class_name.size();\n    int sm = class_name.size();\n    \n    for\
    \ (int i = 0; i < extensions.size(); i++) {\n        cap = cap - extensions[i].size();\n\
    \        sm = sm - extensions[i].size();\n    }\n    \n    if (cap == sm) {\n\
    \        for (int i = 0; i < extensions.size(); i++) {\n            if (cap >\
    \ sm) {\n                strongest_extension = strongest_extension + extensions[i]\
    \ + \".\";\n            }\n        }\n    }\n    return strongest_extension;",
  "    // Write your code here\n    std::string strongest_extension = \"\";\n    int\
    \ cap = 0;\n    int sm = 0;\n    for (auto &ext : extensions) {\n        cap +=\
    \ ext.length();\n        sm += ext.length();\n    }\n    cap = cap / 2;\n    sm\
    \ = sm / 2;\n    if (cap - sm > 0)\n        strongest_extension = class_name +\
    \ extensions[0];\n    else if (sm - cap > 0)\n        strongest_extension = class_name\
    \ + extensions[1];\n    else\n        strongest_extension = class_name + extensions[2];\n\
    \    return strongest_extension;", "    // Write your code here\n    int cap_num\
    \ = 0, sm_num = 0;\n    for (auto &ext : extensions) {\n        if (ext.size()\
    \ >= cap_num && ext.size() <= sm_num) {\n            cap_num = ext.size();\n \
    \           sm_num = ext.size();\n        }\n    }\n    double strength = cap_num\
    \ - sm_num;\n    if (strength == 0)\n        return class_name;\n    double max_strength\
    \ = -1;\n    for (auto &ext : extensions) {\n        if (ext.size() >= cap_num\
    \ && ext.size() <= sm_num) {\n            if (strength > max_strength) {\n   \
    \             max_strength = strength;\n            }\n        }\n    }\n    return\
    \ class_name + \".\" + extensions[max_strength];", "    // Write your code here\n\
    \    \n    std::string strongest_extension = \"\";\n    int cap = 0;\n    int\
    \ sm = 0;\n    for(auto e : extensions){\n        cap += e.size();\n        sm\
    \ += e.size();\n    }\n    float strength = cap - sm;\n    \n    for(auto e :\
    \ extensions){\n        if(e.size() == cap){\n            strongest_extension\
    \ += class_name + e;\n        }\n        else if(e.size() == sm){\n          \
    \  strongest_extension += class_name + e;\n        }\n        else if(e.size()\
    \ > cap && e.size() > sm){\n            strongest_extension += class_name + e;\n\
    \        }\n        else if(e.size() < cap && e.size() < sm){\n            strongest_extension\
    \ += e;\n        }\n        else if(e.size() == cap && e.size() == sm){\n    \
    \        strongest_extension += e;\n        }\n    }\n    return strongest_extension;",
  "    // Write your code here\n    std::string strongest_extension;\n    int cap\
    \ = class_name.size();\n    int sm = class_name.size();\n    for(int i = 0; i\
    \ < extensions.size(); i++){\n        cap = cap - extensions[i].size();\n    \
    \    sm = sm - extensions[i].size();\n    }\n    float strength = cap - sm;\n\
    \    for(int i = 0; i < extensions.size(); i++){\n        if(strength > 0){\n\
    \            strength = strength - extensions[i].size();\n        }\n    }\n \
    \   strongest_extension = class_name + extensions[extensions.size()-1];\n    return\
    \ strongest_extension;", "    // Write your code here\n    std::string strongest_extension\
    \ = \"\";\n    int cap = 0;\n    int sm = 0;\n    for (auto &ext : extensions)\
    \ {\n        cap += ext.size();\n        sm += ext.size();\n    }\n    float strength\
    \ = cap - sm;\n    if (strength > 0) {\n        strongest_extension = class_name\
    \ + \".\" + extensions[0];\n    }\n    for (int i = 1; i < extensions.size();\
    \ i++) {\n        if (strength > 0) {\n            strongest_extension = class_name\
    \ + \".\" + extensions[i];\n        }\n    }\n    return strongest_extension;",
  "    // Write your code here\n    std::string strongest_extension = \"\";\n    std::string\
    \ extension_strength = \"\";\n    std::string extension_class = \"\";\n    for\
    \ (auto &extension : extensions) {\n        extension_class = extension;\n   \
    \     extension_strength = extension_class.substr(0, extension_class.find_first_of('.'));\n\
    \        if (extension_strength.find_first_of('a') == std::string::npos) {\n \
    \           strongest_extension = class_name + \".\" + extension;\n        }\n\
    \    }\n    return strongest_extension;", "    std::string strongest_extension\
    \ = class_name;\n    int cap_counter = 0;\n    int sml_counter = 0;\n    for (auto\
    \ &ext : extensions) {\n        cap_counter += ext.size();\n        sml_counter\
    \ += ext.size();\n    }\n    double strength = cap_counter - sml_counter;\n  \
    \  if (strength > 0) {\n        auto it = std::min_element(extensions.begin(),\
    \ extensions.end(), \n            [&](const std::string &a, const std::string\
    \ &b) { return a.size() < b.size(); });\n        strongest_extension = class_name\
    \ + \".\" + extensions[it->size()];\n    }\n    return strongest_extension;",
  "    // Write your code here\n    \n    std::string strongest_extension = \"\";\n\
    \    \n    for(int i = 0; i < extensions.size(); i++){\n        if(extensions[i].size()\
    \ == 0){\n            continue;\n        }\n        \n        std::string extension\
    \ = extensions[i];\n        \n        for(int j = 0; j < extension.size(); j++){\n\
    \            if(extension[j] >= 'A' && extension[j] <= 'Z'){\n               \
    \ extension[j] -= 'A';\n            }\n            else if(extension[j] >= 'a'\
    \ && extension[j] <= 'z'){\n                extension[j] -= 'a';\n           \
    \ }\n        }\n        \n        std::string extension_str = extension;\n   \
    \     \n        for(int j = 0; j < extension_str.size(); j++){\n            if(extension_str[j]\
    \ >= 'A' && extension_str[j] <= 'Z'){\n                extension_str[j] -= 'A';\n\
    \            }\n            else if(extension_str[j] >= 'a' && extension_str[j]\
    \ <= 'z'){\n                extension_str[j] -= 'a';\n            }\n        }\n\
    \        \n        if(extension_str == extension){\n            strongest_extension\
    \ = class_name + \".\" + extension;\n            break;\n        }\n    }\n  \
    \  \n    return strongest_extension;", "    int cap_num = 0, sm_num = 0;\n   \
    \ for (auto &ext : extensions) {\n        if (ext.size() > cap_num) {\n      \
    \      cap_num = ext.size();\n        }\n        if (ext.size() > sm_num) {\n\
    \            sm_num = ext.size();\n        }\n    }\n    int cap_strength = cap_num\
    \ - sm_num;\n    if (cap_strength == 0) {\n        return class_name;\n    }\n\
    \    int sm_strength = sm_num - cap_num;\n    if (sm_strength == 0) {\n      \
    \  return class_name;\n    }\n    int strength = cap_strength - sm_strength;\n\
    \    if (strength == 0) {\n        return class_name;\n    }\n    int index =\
    \ -1;\n    for (int i = 0; i < extensions.size(); i++) {\n        if (extensions[i].size()\
    \ == cap_num) {\n            index = i;\n            break;\n        }\n    }\n\
    \    if (index == -1) {\n        return class_name;\n    }\n    return class_name\
    \ + \".\" + extensions[index];", "    // Write your code here\n    std::string\
    \ strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n    for (auto\
    \ &ext : extensions) {\n        cap += ext.size();\n        sm += ext.size();\n\
    \    }\n    cap = cap / extensions.size();\n    sm = sm / extensions.size();\n\
    \    if (cap - sm > 0) strongest_extension = class_name + extensions[0];\n   \
    \ else if (sm - cap > 0) strongest_extension = class_name + extensions[1];\n \
    \   else strongest_extension = class_name + extensions[2];\n    return strongest_extension;",
  "    std::string strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n\
    \    for (auto &ext : extensions) {\n        cap += ext.size();\n        sm +=\
    \ ext.size();\n    }\n    cap = cap / extensions.size();\n    sm = sm / extensions.size();\n\
    \    if (cap - sm > 0) strongest_extension = class_name + \".\" + extensions[0];\n\
    \    for (int i = 1; i < extensions.size(); i++) {\n        if (cap - sm > 0)\
    \ strongest_extension = class_name + \".\" + extensions[i];\n    }\n    return\
    \ strongest_extension;", "    // Write your code here\n    std::string strongest_extension\
    \ = \"\";\n    int cap = 0;\n    int sm = 0;\n    for (auto &ext : extensions)\
    \ {\n        cap += ext.size();\n        sm += ext.size();\n    }\n    float strength\
    \ = cap - sm;\n    if (strength > 0) {\n        strongest_extension = class_name\
    \ + \".\" + extensions[0];\n    }\n    for (auto &ext : extensions) {\n      \
    \  if (ext.size() == strongest_extension.size()) {\n            if (strength >\
    \ 0) {\n                strongest_extension = class_name + \".\" + ext;\n    \
    \        }\n        }\n    }\n    return strongest_extension;", "    // Write\
    \ your code here\n    std::string strongest_extension = \"\";\n    int cap = 0;\n\
    \    int sm = 0;\n    for(auto &ext : extensions) {\n        cap += ext.size();\n\
    \        sm += ext.size();\n    }\n    float strength = cap - sm;\n    for(auto\
    \ &ext : extensions) {\n        if(ext.size() == cap) {\n            strongest_extension\
    \ = class_name + ext;\n        }\n    }\n    return strongest_extension;", " \
    \   // Write your code here\n    std::string strongest_extension = \"\";\n   \
    \ int cap = 0;\n    int sm = 0;\n    for (auto &ext : extensions) {\n        cap\
    \ += ext.length();\n        sm += ext.length();\n    }\n    cap = cap / 2;\n \
    \   sm = sm / 2;\n    if (cap - sm > 0)\n        strongest_extension = class_name\
    \ + extensions[0];\n    else\n        strongest_extension = class_name + extensions[1];\n\
    \    return strongest_extension;", "    // Write your code here\n    std::string\
    \ strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n    for (int\
    \ i = 0; i < extensions.size(); i++) {\n        if (extensions[i].at(0) == class_name[0])\
    \ {\n            cap = cap + 1;\n        }\n        if (extensions[i].at(1) ==\
    \ class_name[0]) {\n            sm = sm + 1;\n        }\n    }\n    if (cap -\
    \ sm > 1) {\n        for (int i = 0; i < extensions.size(); i++) {\n         \
    \   if (extensions[i].at(0) == class_name[0]) {\n                cap = cap - 1;\n\
    \            }\n            if (extensions[i].at(1) == class_name[0]) {\n    \
    \            sm = sm - 1;\n            }\n        }\n    }\n    strongest_extension\
    \ = class_name + \".\" + extensions[cap - sm];\n    return strongest_extension;",
  "    // Write your code here\n    \n    std::string strongest_extension = \"\";\n\
    \    int cap = 0;\n    int sm = 0;\n    for(auto &ext : extensions){\n       \
    \ cap += ext.length();\n        sm += ext.length()-1;\n    }\n    \n    float\
    \ strength = cap - sm;\n    \n    for(auto &ext : extensions){\n        if(ext.length()\
    \ == cap){\n            strongest_extension = class_name + ext;\n        }\n \
    \   }\n    \n    return strongest_extension;", "    int cap_num = 0, sml_num =\
    \ 0;\n    for (auto &ext : extensions) {\n        if (ext.size() > cap_num) cap_num\
    \ = ext.size();\n        if (ext.size() < sml_num) sml_num = ext.size();\n   \
    \ }\n    double strength = cap_num - sml_num;\n    if (strength == 0) return class_name;\n\
    \    else return class_name + \".\" + extensions[extensions.size() - 1];", " \
    \   // Write your code here\n    std::string strongest_extension = \"\";\n   \
    \ int cap = 0;\n    int sm = 0;\n    for (auto &ext : extensions) {\n        cap\
    \ += ext.length();\n        sm += ext.length();\n    }\n    float strength = cap\
    \ - sm;\n    if (strength > 0) {\n        strongest_extension = class_name + \"\
    .\" + extensions[0];\n    }\n    for (auto &ext : extensions) {\n        if (ext.length()\
    \ == strongest_extension.length()) {\n            if (ext.compare(strongest_extension)\
    \ == 0) {\n                strongest_extension = class_name + \".\" + ext;\n \
    \           }\n        }\n    }\n    return strongest_extension;", "    // Write\
    \ your code here\n    std::string strongest_extension = \"\";\n    int cap = 0;\n\
    \    int sm = 0;\n    for(auto &ext : extensions) {\n        cap += ext.length();\n\
    \        sm += ext.length();\n    }\n    float strength = cap - sm;\n    for(auto\
    \ &ext : extensions) {\n        if(ext.length() == strongest_extension.length())\
    \ {\n            if(strength > ext.length()) {\n                strongest_extension\
    \ = ext;\n            }\n        }\n    }\n    return class_name + \".\" + strongest_extension;",
  "    std::string strongest_extension = \"\";\n    int cap_counter = 0;\n    int\
    \ sm_counter = 0;\n    for (auto &ext : extensions) {\n        if (ext.length()\
    \ > cap_counter) {\n            cap_counter = ext.length();\n        }\n     \
    \   if (ext.length() > sm_counter) {\n            sm_counter = ext.length();\n\
    \        }\n    }\n    int strength = cap_counter - sm_counter;\n    for (auto\
    \ &ext : extensions) {\n        if (ext.length() == cap_counter) {\n         \
    \   if (ext.compare(0, cap_counter, class_name.cbegin(), cap_counter) == 0) {\n\
    \                strongest_extension = class_name + ext;\n                break;\n\
    \            }\n        }\n    }\n    return strongest_extension;", "    // Write\
    \ your code here\n    std::string strongest_extension = \"\";\n    int cap_counter\
    \ = 0;\n    int sm_counter = 0;\n    for(auto extension : extensions) {\n    \
    \    cap_counter++;\n        for(auto c : extension) {\n            sm_counter++;\n\
    \        }\n    }\n    float strength = cap_counter - sm_counter;\n    for(auto\
    \ extension : extensions) {\n        if(strength > 0) {\n            if(extension\
    \ == class_name) {\n                strongest_extension = class_name;\n      \
    \          break;\n            }\n            if(extension.find(class_name) !=\
    \ std::string::npos) {\n                strongest_extension = class_name + \"\
    .\" + extension;\n                break;\n            }\n        }\n    }\n  \
    \  return strongest_extension;", "    // Write your code here\n    std::string\
    \ strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n    for (int\
    \ i = 0; i < extensions.size(); i++) {\n        if (extensions[i].size() > 0)\
    \ {\n            cap += (extensions[i].at(0) - 'A');\n            sm += (extensions[i].at(1)\
    \ - 'a');\n        }\n    }\n    if (cap - sm > 0)\n        strongest_extension\
    \ = class_name + \".\" + extensions[0];\n    else if (cap - sm == 0)\n       \
    \ strongest_extension = class_name + \".\" + extensions[0];\n    else\n      \
    \  strongest_extension = class_name + \".\" + extensions[1];\n    return strongest_extension;",
  "    // Your code here\n    std::string strongest_extension = \"\";\n    std::string\
    \ extension_strength = \"\";\n    int cap = 0;\n    int sm = 0;\n    for (auto\
    \ &extension : extensions) {\n        cap += extension.at(0) - 'A';\n        sm\
    \ += extension.at(1) - 'a';\n    }\n    extension_strength = cap - sm;\n    if\
    \ (extension_strength == 0) return class_name;\n    if (extension_strength ==\
    \ 1) return class_name + extensions[0];\n    if (extension_strength == 2) return\
    \ class_name + extensions[0];\n    if (extension_strength == 3) return class_name\
    \ + extensions[0];\n    if (extension_strength == 4) return class_name + extensions[0];\n\
    \    if (extension_strength == 5) return class_name + extensions[0];\n    if (extension_strength\
    \ == 6) return class_name + extensions[0];\n    if (extension_strength == 7) return\
    \ class_name + extensions[0];\n    if (extension_strength == 8) return class_name\
    \ + extensions[0];\n    if (extension_strength == 9) return class_name + extensions[0];\n\
    \    if (extension_strength == 10) return class_name + extensions[0];\n    if\
    \ (extension_strength == 11) return class_name + extensions[0];\n    if (extension_strength\
    \ == 12) return class_name + extensions[0];\n    if (extension_strength == 13)\
    \ return class_name + extensions[0];\n    if (extension_strength == 14) return\
    \ class_name + extensions[0];\n    if (extension_strength == 15) return class_name\
    \ + extensions[0];\n    if (extension_strength == 16) return class_name + extensions[0];\n\
    \    if (extension_strength == 17) return class_name + extensions[0];\n    if\
    \ (extension_strength == 18) return class_name + extensions[0];\n    if (extension_strength\
    \ == 19) return class_name + extensions[0];\n    if (extension_strength == 20)\
    \ return class_name + extensions[0];\n    if (extension_strength == 21) return\
    \ class_name + extensions[0];\n    if (extension_strength == 22) return class_name\
    \ + extensions[0];\n    if (extension_strength == 23) return class_name + extensions[0];\n\
    \    if (extension_strength == 24) return class_name + extensions[0];\n    if\
    \ (extension_strength == 25) return class_name + extensions[0];\n    if (extension_strength\
    \ == 26) return class_name + extensions[0];\n    if (extension_strength == 27)\
    \ return class_name + extensions[0];\n    if (extension_strength == 28) return\
    \ class_name + extensions[0];\n    if (extension_strength == 29) return class_name\
    \ + extensions[0];\n    if (extension_strength == 30) return class_name + extensions[0];\n\
    \    if (extension_strength == 31) return class_name + extensions[0];\n    if\
    \ (extension_strength == 32) return class_name + extensions[0];\n    if (extension_strength\
    \ == 33) return class_name + extensions[0];\n    if (extension_strength == 34)\
    \ return class_name + extensions[0];\n    if (extension_strength == 35) return\
    \ class_name + extensions[0];\n    if (extension_strength == 36) return class_name\
    \ + extensions[0];\n    if (extension_strength == 37) return class_name + extensions[0];\n\
    \    if (extension", "    // Write your code here\n    std::string strongest_extension;\n\
    \    double strongest_extension_strength = -1;\n    for (auto extension : extensions)\
    \ {\n        double extension_strength = std::count_if(extension.begin(), extension.end(),\
    \ [](char c) {\n            return std::toupper(c) - std::tolower(c) == 0;\n \
    \       }) / extension.size();\n        if (extension_strength > strongest_extension_strength)\
    \ {\n            strongest_extension_strength = extension_strength;\n        \
    \    strongest_extension = extension;\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_extension;", "    // Write your code here\n    std::string\
    \ strongest_extension = class_name;\n    int cap = 0;\n    int sm = 0;\n    for\
    \ (auto &extension : extensions) {\n        cap += std::toupper(extension[0])\
    \ - std::toupper(extension[1]);\n        sm += std::tolower(extension[0]) - std::tolower(extension[1]);\n\
    \    }\n    float strength = cap - sm;\n    if (strength > 0) {\n        strongest_extension\
    \ += \".\";\n    }\n    strongest_extension += extensions[0];\n    return strongest_extension;",
  "    // Write your code here\n    std::string strongest_extension = \"\";\n    int\
    \ cap = 0;\n    int sm = 0;\n    for (auto e : extensions) {\n        if (e ==\
    \ class_name[0]) {\n            cap++;\n        }\n        if (e == class_name[class_name.size()\
    \ - 1]) {\n            sm++;\n        }\n    }\n    if (cap - sm > 0)\n      \
    \  strongest_extension = class_name + \".\" + extensions[0];\n    else if (cap\
    \ - sm == 0)\n        strongest_extension = class_name + \".\" + extensions[0];\n\
    \    else\n        strongest_extension = class_name + \".\" + extensions[1];\n\
    \    return strongest_extension;", "    // Write your code here\n    std::string\
    \ strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n    for (auto\
    \ &ext : extensions) {\n        cap += ext.length();\n        sm += ext.length();\n\
    \    }\n    float strength = cap - sm;\n    if (strength > 0) {\n        strongest_extension\
    \ = class_name + \".\" + extensions[0];\n    }\n    for (auto &ext : extensions)\
    \ {\n        if (ext.length() == strongest_extension.length()) {\n           \
    \ if (ext.compare(0, strongest_extension.length(), strongest_extension) == 0)\
    \ {\n                strongest_extension = class_name + \".\" + ext;\n       \
    \     }\n        }\n    }\n    return strongest_extension;", "    // Write your\
    \ code here\n    \n    std::string strongest_extension;\n    int cap = 0;\n  \
    \  int sm = 0;\n    \n    for (auto ext : extensions) {\n        cap += ext.length();\n\
    \        sm += ext.length();\n    }\n    \n    if (cap - sm == 0) {\n        strongest_extension\
    \ = class_name;\n    }\n    else {\n        float strength = cap - sm;\n     \
    \   \n        for (auto ext : extensions) {\n            float ext_cap = ext.length();\n\
    \            float ext_sm = ext.length();\n            \n            if (ext_cap\
    \ - ext_sm == 0) {\n                strongest_extension = class_name + \".\" +\
    \ ext;\n                break;\n            }\n            \n            ext_cap\
    \ -= ext_sm;\n            ext_sm -= ext_cap;\n            \n            if (ext_cap\
    \ > ext_sm) {\n                strongest_extension = class_name + \".\" + ext;\n\
    \                break;\n            }\n        }\n    }\n    \n    return strongest_extension;",
  "    std::string extension_strength;\n    std::string extension_str;\n    int extension_strength_counter\
    \ = 0;\n    int extension_counter_counter = 0;\n    for (auto &extension : extensions)\
    \ {\n        if (extension_strength_counter == 0) {\n            extension_strength\
    \ = extension;\n            extension_strength_counter = 1;\n        }\n     \
    \   else if (extension_strength_counter == 1) {\n            if (extension_strength_counter\
    \ > extension_strength_counter) {\n                extension_strength = extension;\n\
    \                extension_strength_counter = 1;\n            }\n            else\
    \ {\n                extension_strength = extension;\n                extension_strength_counter++;\n\
    \            }\n        }\n        else if (extension_strength_counter == 2) {\n\
    \            if (extension_strength_counter > extension_strength_counter) {\n\
    \                extension_strength = extension;\n                extension_strength_counter\
    \ = 1;\n            }\n            else {\n                extension_strength\
    \ = extension;\n                extension_strength_counter++;\n            }\n\
    \        }\n        else if (extension_strength_counter == 3) {\n            if\
    \ (extension_strength_counter > extension_strength_counter) {\n              \
    \  extension_strength = extension;\n                extension_strength_counter\
    \ = 1;\n            }\n            else {\n                extension_strength\
    \ = extension;\n                extension_strength_counter++;\n            }\n\
    \        }\n        else if (extension_strength_counter == 4) {\n            if\
    \ (extension_strength_counter > extension_strength_counter) {\n              \
    \  extension_strength = extension;\n                extension_strength_counter\
    \ = 1;\n            }\n            else {\n                extension_strength\
    \ = extension;\n                extension_strength_counter++;\n            }\n\
    \        }\n        else if (extension_strength_counter == 5) {\n            if\
    \ (extension_strength_counter > extension_strength_counter) {\n              \
    \  extension_strength = extension;\n                extension_strength_counter\
    \ = 1;\n            }\n            else {\n                extension_strength\
    \ = extension;\n                extension_strength_counter++;\n            }\n\
    \        }\n        else if (extension_strength_counter == 6) {\n            if\
    \ (extension_strength_counter > extension_strength_counter) {\n              \
    \  extension_strength = extension;\n                extension_strength_counter\
    \ = 1;\n            }\n            else {\n                extension_strength\
    \ = extension;\n                extension_strength_counter++;\n            }\n\
    \        }\n        else if (extension_strength_counter == 7) {\n            if\
    \ (extension_strength_counter > extension_strength_counter) {\n              \
    \  extension_strength = extension;\n                extension_strength_counter\
    \ = 1;\n            }\n            else {\n                extension_strength\
    \ = extension;\n                extension_strength_counter++;\n            }\n\
    \        }\n        else if (extension_strength_counter == 8) {\n", "    // Your\
    \ code here\n    \n    std::string strongest_extension = \"\";\n    int cap =\
    \ 0;\n    int sm = 0;\n    \n    for (auto &ext : extensions) {\n        cap +=\
    \ ext.size();\n        sm += ext.size();\n    }\n    \n    float strength = cap\
    \ - sm;\n    \n    if (strength > 0) {\n        for (auto &ext : extensions) {\n\
    \            if (ext.size() == strength) {\n                strongest_extension\
    \ = class_name + ext;\n                break;\n            }\n        }\n    }\n\
    \    \n    return strongest_extension;", "    // Write your code here\n    std::string\
    \ strongest_extension = class_name;\n    int cap = 0;\n    int sm = 0;\n    for\
    \ (auto &ext : extensions) {\n        cap += ext.length();\n        sm += ext.length();\n\
    \    }\n    float strength = cap - sm;\n    if (strength > 0) {\n        strongest_extension\
    \ += \".\";\n    }\n    strongest_extension += extensions[0];\n    return strongest_extension;",
  "    // Write your code here\n    std::string strongest_extension = class_name;\n\
    \    int cap = 0;\n    int sm = 0;\n    for (auto &ext : extensions) {\n     \
    \   cap += ext.size();\n        sm += ext.size();\n    }\n    float strength =\
    \ cap - sm;\n    if (strength > 0) {\n        strongest_extension += \".\";\n\
    \    }\n    strongest_extension += extensions[0];\n    return strongest_extension;",
  "    // Write your code here\n    std::string strongest_extension = \"\";\n    int\
    \ cap_counter = 0;\n    int sm_counter = 0;\n    for(auto &extension : extensions)\
    \ {\n        if(extension == class_name[0]) {\n            cap_counter++;\n  \
    \      }\n        if(extension == class_name[class_name.length()-1]) {\n     \
    \       sm_counter++;\n        }\n    }\n    float strength = cap_counter - sm_counter;\n\
    \    \n    if(strength > 0) {\n        strongest_extension = class_name + \".\"\
    \ + extensions[0];\n    }\n    else if(strength < 0) {\n        strongest_extension\
    \ = class_name + \".\" + extensions[extensions.size()-1];\n    }\n    else {\n\
    \        strongest_extension = class_name;\n    }\n    return strongest_extension;",
  "    // Write your code here\n    std::string strongest_extension = class_name;\n\
    \    int cap = 0;\n    int sm = 0;\n    for (int i = 0; i < extensions.size();\
    \ i++) {\n        if (extensions[i].size() > cap) {\n            cap = extensions[i].size();\n\
    \        }\n        if (extensions[i].size() < sm) {\n            sm = extensions[i].size();\n\
    \        }\n    }\n    float strength = cap - sm;\n    for (int i = 0; i < extensions.size();\
    \ i++) {\n        if (extensions[i].size() == cap) {\n            strongest_extension\
    \ += \".\" + extensions[i];\n        }\n        if (extensions[i].size() == sm)\
    \ {\n            strongest_extension += \".\" + extensions[i];\n        }\n  \
    \  }\n    if (strongest_extension.find(\".\")!= std::string::npos) {\n       \
    \ strongest_extension = strongest_extension.substr(0, strongest_extension.find(\"\
    .\"));\n    }\n    return strongest_extension;", "    // Write your code here\n\
    \    std::string strongest_extension = class_name;\n    int cap = 0;\n    int\
    \ sm = 0;\n    for(auto &ext : extensions) {\n        cap += ext.length();\n \
    \       sm += ext.length();\n    }\n    float strength = cap - sm;\n    for(auto\
    \ &ext : extensions) {\n        if(ext.length() == strongest_extension.length())\
    \ {\n            if(ext.length() < strongest_extension.length()) {\n         \
    \       strongest_extension = ext;\n            }\n        }\n    }\n    return\
    \ strongest_extension;", "    // Write your code here\n    std::string strongest_extension\
    \ = class_name;\n    int cap = 0;\n    int sm = 0;\n    for (auto &ext : extensions)\
    \ {\n        cap += ext.size();\n        sm += ext.size();\n    }\n    float strength\
    \ = cap - sm;\n    if (strength > 0) {\n        for (auto &ext : extensions) {\n\
    \            if (ext.size() == strength) {\n                strongest_extension\
    \ += \".\" + ext;\n            }\n        }\n    }\n    return strongest_extension;",
  "    // Write your code here\n    int cap_num = 0, sm_num = 0;\n    for (auto &ext\
    \ : extensions) {\n        cap_num += ext.length();\n        sm_num += ext.length()\
    \ - 1;\n    }\n    double strength = cap_num - sm_num;\n    double max_strength\
    \ = -1;\n    for (auto &ext : extensions) {\n        double ext_strength = ext.length();\n\
    \        if (ext_strength > max_strength) {\n            max_strength = ext_strength;\n\
    \        }\n    }\n    std::string result = class_name;\n    for (auto &ext :\
    \ extensions) {\n        if (ext.length() == max_strength) {\n            result\
    \ += ext;\n        }\n    }\n    return result;", "    // Write your code here\n\
    \    \n    std::string strongest_extension;\n    \n    int cap_counter = 0;\n\
    \    int sm_counter = 0;\n    \n    for (auto &extension : extensions) {\n   \
    \     cap_counter += std::toupper(extension[0]) - std::toupper(extension[1]);\n\
    \        sm_counter += std::tolower(extension[0]) - std::tolower(extension[1]);\n\
    \    }\n    \n    if (cap_counter > sm_counter) {\n        strongest_extension\
    \ = class_name + extensions[0];\n    }\n    else {\n        strongest_extension\
    \ = class_name + extensions[1];\n    }\n    \n    return strongest_extension;",
  "    // Your code here\n    std::string strongest_extension = \"\";\n    int cap\
    \ = 0;\n    int sm = 0;\n    for (auto &extension : extensions) {\n        cap\
    \ += std::toupper(extension[0]) - std::toupper(extension[1]);\n        sm += std::tolower(extension[0])\
    \ - std::tolower(extension[1]);\n    }\n    float strength = cap - sm;\n    if\
    \ (strength > 0) {\n        strongest_extension = class_name + \".\" + extensions[0];\n\
    \    }\n    for (auto &extension : extensions) {\n        if (strength > 0) {\n\
    \            if (strength == std::toupper(extension[0]) - std::toupper(extension[1]))\
    \ {\n                strongest_extension = class_name + \".\" + extension;\n \
    \           }\n        }\n    }\n    return strongest_extension;", "    // Write\
    \ your code here\n    std::string strongest_extension = \"\";\n    int cap = 0;\n\
    \    int sm = 0;\n    for (auto &ext : extensions) {\n        cap += ext.length();\n\
    \        sm += ext.length();\n    }\n    float strength = cap - sm;\n    for (auto\
    \ &ext : extensions) {\n        if (ext.length() == strongest_extension.length())\
    \ {\n            if (ext.length() < strongest_extension.length()) {\n        \
    \        strongest_extension = ext;\n            }\n        }\n    }\n    return\
    \ class_name + \".\" + strongest_extension;", "    // Write your code here\n \
    \   int cap = 0;\n    int sm = 0;\n    for (auto &ext : extensions) {\n      \
    \  cap += ext.size();\n        sm += ext.size();\n    }\n    float strength =\
    \ cap - sm;\n    int index = std::distance(extensions.begin(), std::min_element(extensions.begin(),\
    \ extensions.end(), [&](const std::string &a, const std::string &b) { return a.size()\
    \ < b.size(); }));\n    return class_name + \".\" + extensions[index];", "   \
    \ // Write your code here\n    std::string strongest_extension = \"\";\n    int\
    \ cap = 0;\n    int sm = 0;\n    for(int i = 0; i < extensions.size(); i++){\n\
    \        if(extensions[i].at(0) == class_name[0]){\n            cap = cap + 1;\n\
    \        }\n        if(extensions[i].at(1) == class_name[1]){\n            sm\
    \ = sm + 1;\n        }\n    }\n    float strength = cap - sm;\n    for(int i =\
    \ 0; i < extensions.size(); i++){\n        if(extensions[i].at(0) == class_name[0]){\n\
    \            cap = cap - 1;\n        }\n        if(extensions[i].at(1) == class_name[1]){\n\
    \            sm = sm - 1;\n        }\n    }\n    strength = cap - sm;\n    if(strength\
    \ > 0){\n        strongest_extension = class_name + \".\" + extensions[0];\n \
    \   }\n    else if(strength < 0){\n        strongest_extension = class_name +\
    \ \".\" + extensions[extensions.size() - 1];\n    }\n    else if(strength == 0){\n\
    \        strongest_extension = class_name;\n    }\n    return strongest_extension;",
  "    std::string extension_strength;\n    int cap_counter = 0;\n    int sm_counter\
    \ = 0;\n    for (auto &ext : extensions) {\n        if (ext.length() > cap_counter)\
    \ {\n            cap_counter = ext.length();\n        }\n        if (ext.length()\
    \ > sm_counter) {\n            sm_counter = ext.length();\n        }\n    }\n\
    \    float strength = cap_counter - sm_counter;\n    if (strength > 0) {\n   \
    \     extension_strength = class_name + \".\" + extensions[0];\n    }\n    for\
    \ (int i = 1; i < extensions.size(); i++) {\n        if (extensions[i].length()\
    \ > cap_counter) {\n            cap_counter = extensions[i].length();\n      \
    \  }\n        if (extensions[i].length() > sm_counter) {\n            sm_counter\
    \ = extensions[i].length();\n        }\n    }\n    float strength_2 = cap_counter\
    \ - sm_counter;\n    if (strength_2 > 0) {\n        extension_strength = class_name\
    \ + \".\" + extensions[0];\n    }\n    for (int i = 1; i < extensions.size();\
    \ i++) {\n        if (extensions[i].length() > cap_counter) {\n            cap_counter\
    \ = extensions[i].length();\n        }\n        if (extensions[i].length() > sm_counter)\
    \ {\n            sm_counter = extensions[i].length();\n        }\n    }\n    float\
    \ strength_3 = cap_counter - sm_counter;\n    if (strength_3 > 0) {\n        extension_strength\
    \ = class_name + \".\" + extensions[0];\n    }\n    for (int i = 1; i < extensions.size();\
    \ i++) {\n        if (extensions[i].length() > cap_counter) {\n            cap_counter\
    \ = extensions[i].length();\n        }\n        if (extensions[i].length() > sm_counter)\
    \ {\n            sm_counter = extensions[i].length();\n        }\n    }\n    float\
    \ strength_4 = cap_counter - sm_counter;\n    if (strength_4 > 0) {\n        extension_strength\
    \ = class_name + \".\" + extensions[0];\n    }\n    for (int i = 1; i < extensions.size();\
    \ i++) {\n        if (extensions[i].length() > cap_counter) {\n            cap_counter\
    \ = extensions[i].length();\n        }\n        if (extensions[i].length() > sm_counter)\
    \ {\n            sm_counter = extensions[i].length();\n        }\n    }\n    float\
    \ strength_5 = cap_counter - sm_counter;\n    if (strength_5 > 0) {\n        extension_strength\
    \ = class_name + \".\" + extensions[0];\n    }\n    for (int i = 1; i < extensions.size();\
    \ i++) {\n        if (extensions[i].length() > cap_counter) {\n            cap_counter\
    \ = extensions[i].length();\n        }\n        if (extensions[i].length() > sm_counter)\
    \ {\n            sm_counter = extensions[i].length();\n        }\n    }\n    float\
    \ strength_6 = cap_counter - sm_counter;\n    if (strength_6 > 0) {\n        extension",
  "    std::string strongest_extension;\n    int cap_counter = 0;\n    int sm_counter\
    \ = 0;\n    for (auto &extension : extensions) {\n        if (extension.at(0)\
    \ == class_name[0]) {\n            cap_counter++;\n        }\n        if (extension.at(1)\
    \ == class_name[0]) {\n            sm_counter++;\n        }\n    }\n    if (cap_counter\
    \ > sm_counter) {\n        strongest_extension = class_name + \".\" + extensions[0];\n\
    \    } else if (cap_counter < sm_counter) {\n        strongest_extension = class_name\
    \ + \".\" + extensions[1];\n    } else {\n        strongest_extension = class_name\
    \ + \".\" + extensions[2];\n    }\n    return strongest_extension;", "    // Write\
    \ your code here\n    int cap_num = 0, sm_num = 0;\n    for (auto &ext : extensions)\
    \ {\n        cap_num += ext.length();\n        sm_num += ext.length() - 1;\n \
    \   }\n    float strength = cap_num - sm_num;\n    if (strength == 0) return class_name;\n\
    \    else return class_name + \".\" + extensions[std::find(extensions.begin(),\
    \ extensions.end(), extensions[std::find(extensions.begin(), extensions.end(),\
    \ strength)].length())];", "    // Your code here\n    std::string strongest_extension\
    \ = \"\";\n    int cap_num = 0, sml_num = 0;\n    for (auto &ext : extensions)\
    \ {\n        if (ext.length() > cap_num) {\n            cap_num = ext.length();\n\
    \        }\n        if (ext.length() > sml_num) {\n            sml_num = ext.length();\n\
    \        }\n    }\n    float strength = cap_num - sml_num;\n    if (strength >\
    \ 0) {\n        strongest_extension = class_name + \".\" + extensions[0];\n  \
    \  }\n    for (int i = 1; i < extensions.size(); i++) {\n        if (strength\
    \ > 0) {\n            strongest_extension = class_name + \".\" + extensions[i];\n\
    \        }\n    }\n    return strongest_extension;", "    // Write your code here\n\
    \    std::string strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n\
    \    for(auto &ext : extensions) {\n        cap += ext.length();\n        sm +=\
    \ ext.length();\n    }\n    cap = cap - sm;\n    for(auto &ext : extensions) {\n\
    \        if(ext.length() == cap) {\n            strongest_extension = class_name\
    \ + ext;\n            break;\n        }\n    }\n    return strongest_extension;",
  "    // Write your code here\n    int cap = class_name.size();\n    int sm = extensions.size();\n\
    \    int strength = cap - sm;\n    int max = 0;\n    int index = 0;\n    for (int\
    \ i = 0; i < extensions.size(); i++) {\n        if (extensions[i].size() == cap)\
    \ {\n            int count = 0;\n            for (int j = 0; j < extensions[i].size();\
    \ j++) {\n                if (extensions[i][j] == class_name[i]) {\n         \
    \           count++;\n                }\n            }\n            if (count\
    \ > max) {\n                max = count;\n                index = i;\n       \
    \     }\n        }\n    }\n    if (max > 1) {\n        for (int i = 0; i < extensions.size();\
    \ i++) {\n            if (extensions[i].size() == cap) {\n                int\
    \ count = 0;\n                for (int j = 0; j < extensions[i].size(); j++) {\n\
    \                    if (extensions[i][j] == class_name[i]) {\n              \
    \          count++;\n                    }\n                }\n              \
    \  if (count > max) {\n                    max = count;\n                    index\
    \ = i;\n                }\n            }\n        }\n    }\n    return class_name\
    \ + \".\" + extensions[index];", "    // Write your code here\n    std::string\
    \ strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n    for (auto\
    \ &ext : extensions) {\n        cap += ext.length();\n        sm += ext.length();\n\
    \    }\n    cap = cap - sm;\n    if (cap > 0) {\n        strongest_extension =\
    \ class_name + \".\" + extensions[0];\n    }\n    return strongest_extension;",
  "    int cap_num = 0, sm_num = 0;\n    for (auto &ext : extensions) {\n        cap_num\
    \ += ext.length();\n        sm_num += ext.length() - 1;\n    }\n    float strength\
    \ = cap_num - sm_num;\n    int strongest_ext = 0;\n    for (auto &ext : extensions)\
    \ {\n        if (ext.length() == strength) {\n            strongest_ext = ext.length();\n\
    \            break;\n        }\n    }\n    return class_name + \".\" + extensions[strongest_ext];",
  "    // Write your code here\n    \n    std::string strongest_extension = \"\";\n\
    \    int cap = 0;\n    int sm = 0;\n    for(auto &ext : extensions){\n       \
    \ cap += ext.length();\n        sm += ext.length();\n    }\n    \n    float strength\
    \ = cap - sm;\n    \n    for(auto &ext : extensions){\n        if(ext.length()\
    \ == cap){\n            strongest_extension = class_name + ext;\n            break;\n\
    \        }\n    }\n    \n    return strongest_extension;", "    std::string extension_strength;\n\
    \    int cap_counter = 0;\n    int sm_counter = 0;\n    for (auto &ext : extensions)\
    \ {\n        if (ext.size() > cap_counter) {\n            cap_counter = ext.size();\n\
    \        }\n        if (ext.size() > sm_counter) {\n            sm_counter = ext.size();\n\
    \        }\n    }\n    extension_strength = class_name + \".\";\n    for (int\
    \ i = 0; i < cap_counter; i++) {\n        extension_strength += extensions[i].substr(0,\
    \ 1).toUpperCase() + extensions[i].substr(1, extensions[i].size() - 1);\n    }\n\
    \    for (int i = 0; i < sm_counter; i++) {\n        extension_strength += extensions[i].substr(0,\
    \ 1).toLowerCase() + extensions[i].substr(1, extensions[i].size() - 1);\n    }\n\
    \    return extension_strength;", "    \n    // Write your code here\n    \n \
    \   std::string strongest_extension = \"\";\n    \n    for(auto &extension : extensions)\
    \ {\n        \n        int cap = std::count_if(extension.begin(), extension.end(),\
    \ [](char c) {\n            return std::toupper(c) == c;\n        });\n      \
    \  int sm = std::count_if(extension.begin(), extension.end(), [](char c) {\n \
    \           return std::tolower(c) == c;\n        });\n        \n        int strength\
    \ = cap - sm;\n        \n        if(strength > 0) {\n            strongest_extension\
    \ = class_name + \".\" + extension;\n        }\n    }\n    \n    return strongest_extension;",
  "    // Write your code here\n    std::string strongest_extension = \"\";\n    int\
    \ cap = 0;\n    int sm = 0;\n    for (auto &ext : extensions) {\n        cap +=\
    \ ext.length();\n        sm += ext.length() - cap;\n    }\n    cap = cap / 2;\n\
    \    sm = sm / 2;\n    if (cap - sm > 0)\n        strongest_extension = class_name\
    \ + extensions[0];\n    else if (sm - cap > 0)\n        strongest_extension =\
    \ class_name + extensions[1];\n    else\n        strongest_extension = class_name\
    \ + extensions[2];\n    return strongest_extension;", "    int cap_num = 0, sm_num\
    \ = 0;\n    for (auto &ext : extensions) {\n        cap_num += ext.length();\n\
    \        sm_num += ext.length() - ext.find_first_not_of(ext.begin(), ext.end());\n\
    \    }\n    int cap = cap_num / CAP;\n    int sm = sm_num / SM;\n    if (cap ==\
    \ sm) {\n        return class_name + extensions[0];\n    }\n    if (cap > sm)\
    \ {\n        return class_name + extensions[cap - 1];\n    }\n    return class_name\
    \ + extensions[sm - 1];", "    // Write your code here\n    \n    std::string\
    \ strongest_extension = \"\";\n    \n    int cap_counter = 0;\n    int sm_counter\
    \ = 0;\n    \n    for (auto &extension : extensions) {\n        if (extension\
    \ == class_name[0]) {\n            cap_counter++;\n        }\n        if (extension\
    \ == class_name[class_name.length() - 1]) {\n            sm_counter++;\n     \
    \   }\n    }\n    \n    if (cap_counter > sm_counter) {\n        strongest_extension\
    \ = class_name + \".\" + extensions[0];\n    }\n    else {\n        strongest_extension\
    \ = class_name + \".\" + extensions[extensions.size() - 1];\n    }\n    \n   \
    \ return strongest_extension;", "    // Write your code here\n    std::string\
    \ strongest_extension;\n    std::string extension;\n    int cap = 0;\n    int\
    \ sm = 0;\n    for(auto &e : extensions){\n        cap += e.size();\n        sm\
    \ += e.size();\n    }\n    float strength = cap - sm;\n    for(auto &e : extensions){\n\
    \        if(e.size() == cap){\n            strongest_extension = class_name +\
    \ e;\n        }\n        if(e.size() == sm){\n            strongest_extension\
    \ = class_name + e;\n        }\n    }\n    return strongest_extension;", "   \
    \ // Write your code here\n    \n    std::string strongest_extension;\n    int\
    \ cap_counter = 0;\n    int sm_counter = 0;\n    for(auto &extension : extensions)\
    \ {\n        if(extension.at(0) == class_name[0]) {\n            cap_counter++;\n\
    \        }\n        if(extension.at(1) == class_name[0]) {\n            sm_counter++;\n\
    \        }\n    }\n    \n    double strength = cap_counter - sm_counter;\n   \
    \ \n    if(strength > 0) {\n        strongest_extension = class_name + \".\" +\
    \ extensions[0];\n    }\n    else if(strength < 0) {\n        strongest_extension\
    \ = class_name + \".\" + extensions[extensions.size()-1];\n    }\n    else {\n\
    \        strongest_extension = class_name;\n    }\n    \n    return strongest_extension;",
  "    // Write your code here\n    std::string strongest_extension = \"\";\n    int\
    \ cap = 0;\n    int sm = 0;\n    for (auto &ext : extensions) {\n        cap +=\
    \ ext.length();\n        sm += ext.length();\n    }\n    float strength = cap\
    \ - sm;\n    int index = std::distance(extensions.begin(), std::max_element(extensions.begin(),\
    \ extensions.end(), [&](std::string a, std::string b) { return a.length() < b.length();\
    \ }));\n    if (strength > 0) {\n        strongest_extension = class_name + extensions[index];\n\
    \    }\n    return strongest_extension;", "    // Write your code here\n    \n\
    \    std::string strongest_extension = \"\";\n    \n    for(int i = 0; i < extensions.size();\
    \ i++){\n        for(int j = 0; j < extensions[i].size(); j++){\n            if(extensions[i][j]\
    \ == class_name[j]){\n                strongest_extension += class_name[j];\n\
    \            }\n        }\n    }\n    \n    return strongest_extension;", "  \
    \  // Write your code here\n    \n    std::string strongest_extension = class_name;\n\
    \    int cap = 0;\n    int sm = 0;\n    \n    for(int i = 0; i < extensions.size();\
    \ i++){\n        if(extensions[i][0] >= 'A' && extensions[i][0] <= 'Z'){\n   \
    \         cap++;\n        }\n        if(extensions[i][0] >= 'a' && extensions[i][0]\
    \ <= 'z'){\n            sm++;\n        }\n    }\n    \n    float strength = cap\
    \ - sm;\n    \n    for(int i = 0; i < extensions.size(); i++){\n        if(extensions[i][0]\
    \ >= 'A' && extensions[i][0] <= 'Z'){\n            cap--;\n        }\n       \
    \ if(extensions[i][0] >= 'a' && extensions[i][0] <= 'z'){\n            sm--;\n\
    \        }\n    }\n    \n    if(strength > 0){\n        strongest_extension =\
    \ class_name + \".\" + extensions[0];\n    }\n    \n    for(int i = 1; i < extensions.size();\
    \ i++){\n        if(strength > extensions[i].length()){\n            strongest_extension\
    \ = class_name + \".\" + extensions[i];\n        }\n    }\n    \n    return strongest_extension;",
  "    // Write your code here\n    \n    std::string strongest_extension = \"\";\n\
    \    \n    for(auto &extension : extensions) {\n        \n        auto cap = extension.find_first_of('A');\n\
    \        auto sm = extension.find_first_of('z');\n        \n        auto strength\
    \ = cap - sm;\n        \n        if(strength == 0)\n            strongest_extension\
    \ = extension;\n        else if(strength > 0)\n            strongest_extension\
    \ = class_name + \".\" + extension;\n        else if(strength < 0)\n         \
    \   strongest_extension = class_name + \".\" + extension;\n    }\n    \n    return\
    \ strongest_extension;", "    // Write your code here\n    \n    std::string strongest_extension\
    \ = \"\";\n    \n    for(int i = 0; i < extensions.size(); i++) {\n        std::string\
    \ extension = extensions[i];\n        \n        int cap = extension.find_first_of('A');\n\
    \        int sm = extension.find_first_of('z');\n        \n        int strength\
    \ = cap - sm;\n        \n        if(strength > 0) {\n            strongest_extension\
    \ += class_name + \".\" + extension;\n        }\n    }\n    \n    return strongest_extension;",
  "    // Write your code here\n    std::string strongest_extension = \"\";\n    int\
    \ cap = 0;\n    int sm = 0;\n    for (auto &ext : extensions) {\n        cap +=\
    \ ext.size();\n        sm += ext.size();\n    }\n    float strength = cap - sm;\n\
    \    if (strength > 0) {\n        strongest_extension = class_name + \".\" + extensions[0];\n\
    \    }\n    for (auto &ext : extensions) {\n        if (ext.size() == strongest_extension.size())\
    \ {\n            strongest_extension = class_name + \".\" + ext;\n        }\n\
    \    }\n    return strongest_extension;", "    // Write your code here\n    std::string\
    \ strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n    for (auto\
    \ &ext : extensions) {\n        cap += ext.size();\n        sm += ext.size();\n\
    \    }\n    float strength = cap - sm;\n    if (strength > 0) {\n        strongest_extension\
    \ = class_name + \".\" + extensions[0];\n    }\n    for (auto &ext : extensions)\
    \ {\n        if (ext.size() == strongest_extension.size()) {\n            if (ext.size()\
    \ < strongest_extension.size()) {\n                strongest_extension = class_name\
    \ + \".\" + ext;\n            }\n        }\n    }\n    return strongest_extension;",
  "    // Write your code here\n    std::string strongest_extension = \"\";\n    int\
    \ cap = class_name.size();\n    int sm = class_name.size();\n    for (int i =\
    \ 0; i < extensions.size(); i++) {\n        cap = cap - extensions[i].size();\n\
    \        sm = sm - extensions[i].size();\n        if (cap > sm) {\n          \
    \  strongest_extension = class_name + extensions[i];\n        }\n    }\n    return\
    \ strongest_extension;", "    // Write your code here\n    std::string strongest_extension;\n\
    \    int cap = class_name.size();\n    int sm = class_name.size();\n    for (auto\
    \ &ext : extensions) {\n        cap = cap - ext.size();\n        sm = sm - ext.size();\n\
    \    }\n    if (cap > sm) {\n        strongest_extension = class_name + extensions[0];\n\
    \    }\n    else {\n        strongest_extension = class_name + extensions[1];\n\
    \    }\n    return strongest_extension;", "    // Write your code here\n    std::string\
    \ strongest_extension;\n    int cap_counter = 0;\n    int sm_counter = 0;\n  \
    \  for (auto &extension : extensions) {\n        if (extension.at(0) == class_name.at(0))\
    \ {\n            cap_counter++;\n        }\n        if (extension.at(1) == class_name.at(1)){\n\
    \            sm_counter++;\n        }\n    }\n    float strength = cap_counter\
    \ - sm_counter;\n    if (strength > 0){\n        strongest_extension = class_name\
    \ + extensions[0];\n    }\n    else if (strength < 0){\n        strongest_extension\
    \ = class_name + extensions[extensions.size()-1];\n    }\n    else{\n        strongest_extension\
    \ = class_name + extensions[0];\n    }\n    return strongest_extension;", "  \
    \  // Write your code here\n    \n    std::string strongest_extension = \"\";\n\
    \    \n    for(auto &extension : extensions) {\n        auto cap = std::count_if(extension.begin(),\
    \ extension.end(), [](char c) {\n            return std::toupper(c) == c;\n  \
    \      });\n        auto sm = std::count_if(extension.begin(), extension.end(),\
    \ [](char c) {\n            return std::tolower(c) == c;\n        });\n      \
    \  \n        auto strength = cap - sm;\n        \n        if(strength > 0) {\n\
    \            strongest_extension += class_name + \".\" + extension;\n        }\n\
    \    }\n    \n    return strongest_extension;", "    int cap_num = 0, sm_num =\
    \ 0;\n    for (auto &ext : extensions) {\n        cap_num += ext.length();\n \
    \       sm_num += ext.length() - 1;\n    }\n    int strength = cap_num - sm_num;\n\
    \    if (strength == 0) {\n        return class_name;\n    }\n    int max_strength\
    \ = 0;\n    for (auto &ext : extensions) {\n        int cur_strength = ext.length()\
    \ - 1;\n        if (cur_strength > max_strength) {\n            max_strength =\
    \ cur_strength;\n        }\n    }\n    int cur_strength = max_strength;\n    for\
    \ (auto &ext : extensions) {\n        if (cur_strength == ext.length() - 1) {\n\
    \            return class_name + \".\" + ext;\n        }\n        cur_strength--;\n\
    \    }\n    return class_name;", "    int cap_num = 0, sml_num = 0;\n    for (auto\
    \ &ext : extensions) {\n        cap_num += ext.size();\n        sml_num += ext.size();\n\
    \    }\n    int cap_den = cap_num - sml_num;\n    int sml_den = cap_num - cap_num;\n\
    \    int cap_frac = cap_num / cap_den;\n    int sml_frac = sml_num / sml_den;\n\
    \    int cap_strength = cap_num - cap_den * cap_frac;\n    int sml_strength =\
    \ sml_num - sml_den * sml_frac;\n    int strength = cap_strength - sml_strength;\n\
    \    if (strength > 0) {\n        return class_name + \".\" + extensions[0];\n\
    \    }\n    return class_name + \".\" + extensions[extensions.size() - 1];", " \
    \   // Write your code here\n    \n    std::string strongest_extension = \"\"\
    ;\n    int cap = 0;\n    int sm = 0;\n    \n    for (auto &extension : extensions)\
    \ {\n        cap += extension.at(0) - 'A';\n        sm += extension.at(1) - 'a';\n\
    \    }\n    \n    if (cap - sm > 0)\n        strongest_extension = class_name\
    \ + extensions[0];\n    else\n        strongest_extension = class_name + extensions[1];\n\
    \    \n    return strongest_extension;", "    // Write your code here\n    std::string\
    \ strongest_extension = \"\";\n    int cap_num = 0, sm_num = 0;\n    for (auto\
    \ &ext : extensions) {\n        if (ext.size() > cap_num) {\n            cap_num\
    \ = ext.size();\n        }\n        if (ext.size() > sm_num) {\n            sm_num\
    \ = ext.size();\n        }\n    }\n    float cap_frac = cap_num - sm_num;\n  \
    \  if (cap_frac > 0)\n        strongest_extension = class_name + \".\" + extensions[0];\n\
    \    else if (cap_frac < 0)\n        strongest_extension = class_name + \".\"\
    \ + extensions[extensions.size() - 1];\n    return strongest_extension;", "  \
    \  // Write your code here\n    std::string strongest_extension = class_name;\n\
    \    int cap = class_name.size();\n    int sm = class_name.size();\n    for (auto\
    \ ext : extensions) {\n        cap -= ext.size();\n        sm -= ext.size();\n\
    \        if (cap > sm) {\n            strongest_extension = class_name + ext;\n\
    \        }\n    }\n    return strongest_extension;", "    // Write your code here\n\
    \    std::string strongest_extension = \"\";\n    int cap_num = 0, sm_num = 0;\n\
    \    for (auto &ext : extensions) {\n        if (ext.size() >= cap_num) {\n  \
    \          cap_num = ext.size();\n        }\n        if (ext.size() >= sm_num)\
    \ {\n            sm_num = ext.size();\n        }\n    }\n    float cap_frac =\
    \ cap_num - sm_num;\n    if (cap_frac > 0) {\n        cap_frac = cap_frac / cap_num;\n\
    \    }\n    float sm_frac = sm_num - cap_num;\n    if (sm_frac > 0) {\n      \
    \  sm_frac = sm_frac / sm_num;\n    }\n    float strength = cap_frac - sm_frac;\n\
    \    if (strength > 0) {\n        strength = strength / cap_num;\n    }\n    strongest_extension\
    \ = class_name + \".\" + extensions[0];\n    for (auto &ext : extensions) {\n\
    \        if (ext.size() == cap_num) {\n            if (strength > 0) {\n     \
    \           strongest_extension = class_name + \".\" + ext;\n            }\n \
    \       }\n        if (ext.size() == sm_num) {\n            if (strength > 0)\
    \ {\n                strongest_extension = class_name + \".\" + ext;\n       \
    \     }\n        }\n    }\n    return strongest_extension;", "    // Write your\
    \ code here\n    std::string strongest_extension = \"\";\n    int cap = 0;\n \
    \   int sm = 0;\n    for (auto &ext : extensions) {\n        cap += ext.length();\n\
    \        sm += ext.length();\n    }\n    float strength = cap - sm;\n    if (strength\
    \ > 0) {\n        strongest_extension = class_name + \".\" + extensions[0];\n\
    \    }\n    for (int i = 1; i < extensions.size(); i++) {\n        if (strength\
    \ > 0) {\n            strongest_extension = class_name + \".\" + extensions[i];\n\
    \        }\n    }\n    return strongest_extension;", "    // Write your code here\n\
    \    std::string strongest_extension;\n    int cap = 0;\n    int sm = 0;\n   \
    \ for (auto &ext : extensions) {\n        cap += ext.length();\n        sm +=\
    \ ext.length();\n    }\n    float strength = cap - sm;\n    if (strength > 0)\
    \ {\n        strongest_extension = class_name + \".\" + extensions[0];\n    }\n\
    \    for (auto &ext : extensions) {\n        if (ext.length() == strongest_extension.length())\
    \ {\n            if (ext.compare(strongest_extension) == 0) {\n              \
    \  strongest_extension = class_name + \".\" + ext;\n            }\n        }\n\
    \    }\n    return strongest_extension;"]
stop_tokens:
- "\n}"
