name: HumanEval_25_factorize
language: cpp
results:
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long i = 2;\n    long p = 1;\n    while (i <= n) {\n        while (n % i\
    \ == 0) {\n            p += i;\n            n /= i;\n        }\n        factors.push_back(p);\n\
    \        i++;\n    }\n    return factors;\n}\nint main() {\n    auto candidate\
    \ = factorize;\n    assert(candidate((2)) == (std::vector<long>({2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({2, 2})));\n    assert(candidate((8)) == (std::vector<long>({2,\
    \ 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3, 19})));\n  \
    \  assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({3, 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2,\
    \ 3, 3})));\n}\n"
  stdout: ''
  stderr: "tmpep086tgy: /tmp/tmpep086tgy.cpp:28: int main(): Assertion `candidate((2))\
    \ == (std::vector<long>({2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long factor = 1;\n    long i = 2;\n    while (i <= sqrt(n)) {\n        while\
    \ (n % i == 0) {\n            factor *= i;\n            n /= i;\n        }\n \
    \       i++;\n    }\n    if (n != 1) {\n        factor *= n;\n    }\n    factors.push_back(factor);\n\
    \    return factors;\n}\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2))\
    \ == (std::vector<long>({2})));\n    assert(candidate((4)) == (std::vector<long>({2,\
    \ 2})));\n    assert(candidate((8)) == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({3, 19})));\n    assert(candidate((3249)) == (std::vector<long>({3,\
    \ 3, 19, 19})));\n    assert(candidate((185193)) == (std::vector<long>({3, 3,\
    \ 3, 19, 19, 19})));\n    assert(candidate((20577)) == (std::vector<long>({3,\
    \ 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n\
    }\n"
  stdout: ''
  stderr: "tmp5gru09l4: /tmp/tmp5gru09l4.cpp:32: int main(): Assertion `candidate((4))\
    \ == (std::vector<long>({2, 2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long factor = 1;\n    long counter = 1;\n    while (n != 1) {\n        while\
    \ (n % factor == 0) {\n            factors.push_back(factor);\n            n /=\
    \ factor;\n            counter++;\n        }\n        factor++;\n    }\n    return\
    \ factors;\n}\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2))\
    \ == (std::vector<long>({2})));\n    assert(candidate((4)) == (std::vector<long>({2,\
    \ 2})));\n    assert(candidate((8)) == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({3, 19})));\n    assert(candidate((3249)) == (std::vector<long>({3,\
    \ 3, 19, 19})));\n    assert(candidate((185193)) == (std::vector<long>({3, 3,\
    \ 3, 19, 19, 19})));\n    assert(candidate((20577)) == (std::vector<long>({3,\
    \ 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long factor = 1;\n    long count = 0;\n    while (n != 1) {\n        while\
    \ (n % factor == 0) {\n            factors.push_back(factor);\n            n /=\
    \ factor;\n            count++;\n        }\n        factor++;\n    }\n    factors.push_back(factor);\n\
    \    factors.push_back(count);\n    return factors;\n}\nint main() {\n    auto\
    \ candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({2, 2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3,\
    \ 19})));\n    assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n\
    \    assert(candidate((185193)) == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({3, 19, 19, 19})));\n   \
    \ assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long p = n;\n    long q = n;\n    long r = n;\n    long s = n;\n    long\
    \ t = n;\n    long u = n;\n    long v = n;\n    long w = n;\n    long x = n;\n\
    \    long y = n;\n    long z = n;\n    long a = n;\n    long b = n;\n    long\
    \ c = n;\n    long d = n;\n    long e = n;\n    long f = n;\n    long g = n;\n\
    \    long h = n;\n    long i = n;\n    long j = n;\n    long k = n;\n    long\
    \ l = n;\n    long m = n;\n    long n = n;\n    long o = n;\n    long p = n;\n\
    \    long q = n;\n    long r = n;\n    long s = n;\n    long t = n;\n    long\
    \ u = n;\n    long v = n;\n    long w = n;\n    long x = n;\n    long y = n;\n\
    \    long z = n;\n    long a = n;\n    long b = n;\n    long c = n;\n    long\
    \ d = n;\n    long e = n;\n    long f = n;\n    long g = n;\n    long h = n;\n\
    \    long i = n;\n    long j = n;\n    long k = n;\n    long l = n;\n    long\
    \ m = n;\n    long n = n;\n    long o = n;\n    long p = n;\n    long q = n;\n\
    \    long r = n;\n    long s = n;\n    long t = n;\n    long u = n;\n    long\
    \ v = n;\n    long w = n;\n    long x = n;\n    long y = n;\n    long z = n;\n\
    \    long a = n;\n    long b = n;\n    long c = n;\n    long d = n;\n    long\
    \ e = n;\n    long f = n;\n    long g = n;\n    long h = n;\n    long i = n;\n\
    \    long j = n;\n    long k = n;\n    long l = n;\n    long m = n;\n    long\
    \ n = n;\n    long o = n;\n    long p = n;\n    long q = n;\n    long r = n;\n\
    \    long s = n;\n    long t = n;\n    long u = n;\n    long v = n;\n    long\
    \ w = n;\n    long x = n;\n    long y = n;\n    long z = n;\n    long a = n;\n\
    \    long b = n;\n    long c = n;\n    long d = n;\n    long e = n;\n    long\
    \ f = n;\n    long g = n;\n    long h = n;\n    long i = n;\n    long j = n;\n\
    \    long k = n;\n    long l = n;\n\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({2, 2})));\n    assert(candidate((8)) == (std::vector<long>({2,\
    \ 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3, 19})));\n  \
    \  assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({3, 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2,\
    \ 3, 3})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpmazb25ya.cpp: In function \u2018std::vector<long int> factorize(long\
    \ int)\u2019:\n/tmp/tmpmazb25ya.cpp:38:10: error: declaration of \u2018long int\
    \ n\u2019 shadows a parameter\n   38 |     long n = n;\n      |          ^\n/tmp/tmpmazb25ya.cpp:40:10:\
    \ error: redeclaration of \u2018long int p\u2019\n   40 |     long p = n;\n  \
    \    |          ^\n/tmp/tmpmazb25ya.cpp:14:10: note: \u2018long int p\u2019 previously\
    \ declared here\n   14 |     long p = n;\n      |          ^\n/tmp/tmpmazb25ya.cpp:41:10:\
    \ error: redeclaration of \u2018long int q\u2019\n   41 |     long q = n;\n  \
    \    |          ^\n/tmp/tmpmazb25ya.cpp:15:10: note: \u2018long int q\u2019 previously\
    \ declared here\n   15 |     long q = n;\n      |          ^\n/tmp/tmpmazb25ya.cpp:42:10:\
    \ error: redeclaration of \u2018long int r\u2019\n   42 |     long r = n;\n  \
    \    |          ^\n/tmp/tmpmazb25ya.cpp:16:10: note: \u2018long int r\u2019 previously\
    \ declared here\n   16 |     long r = n;\n      |          ^\n/tmp/tmpmazb25ya.cpp:43:10:\
    \ error: redeclaration of \u2018long int s\u2019\n   43 |     long s = n;\n  \
    \    |          ^\n/tmp/tmpmazb25ya.cpp:17:10: note: \u2018long int s\u2019 previously\
    \ declared here\n   17 |     long s = n;\n      |          ^\n/tmp/tmpmazb25ya.cpp:44:10:\
    \ error: redeclaration of \u2018long int t\u2019\n   44 |     long t = n;\n  \
    \    |          ^\n/tmp/tmpmazb25ya.cpp:18:10: note: \u2018long int t\u2019 previously\
    \ declared here\n   18 |     long t = n;\n      |          ^\n/tmp/tmpmazb25ya.cpp:45:10:\
    \ error: redeclaration of \u2018long int u\u2019\n   45 |     long u = n;\n  \
    \    |          ^\n/tmp/tmpmazb25ya.cpp:19:10: note: \u2018long int u\u2019 previously\
    \ declared here\n   19 |     long u = n;\n      |          ^\n/tmp/tmpmazb25ya.cpp:46:10:\
    \ error: redeclaration of \u2018long int v\u2019\n   46 |     long v = n;\n  \
    \    |          ^\n/tmp/tmpmazb25ya.cpp:20:10: note: \u2018long int v\u2019 previously\
    \ declared here\n   20 |     long v = n;\n      |          ^\n/tmp/tmpmazb25ya.cpp:47:10:\
    \ error: redeclaration of \u2018long int w\u2019\n   47 |     long w = n;\n  \
    \    |          ^\n/tmp/tmpmazb25ya.cpp:21:10: note: \u2018long int w\u2019 previously\
    \ declared here\n   21 |     long w = n;\n      |          ^\n/tmp/tmpmazb25ya.cpp:48:10:\
    \ error: redeclaration of \u2018long i"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long i = 2;\n    long factor = 1;\n    while (i <= n) {\n        while (n\
    \ % i == 0) {\n            n /= i;\n            factors.push_back(i);\n      \
    \  }\n        i++;\n    }\n    if (n != 1) {\n        factors.push_back(n);\n\
    \    }\n    return factors;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({2, 2})));\n    assert(candidate((8)) == (std::vector<long>({2,\
    \ 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3, 19})));\n  \
    \  assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({3, 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2,\
    \ 3, 3})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long i = 2;\n    while (i < n) {\n        while (n % i == 0) {\n        \
    \    factors.push_back(i);\n            n /= i;\n        }\n        i++;\n   \
    \ }\n    if (n != 1) {\n        factors.push_back(n);\n    }\n    return factors;\n\
    }\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2)) ==\
    \ (std::vector<long>({2})));\n    assert(candidate((4)) == (std::vector<long>({2,\
    \ 2})));\n    assert(candidate((8)) == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({3, 19})));\n    assert(candidate((3249)) == (std::vector<long>({3,\
    \ 3, 19, 19})));\n    assert(candidate((185193)) == (std::vector<long>({3, 3,\
    \ 3, 19, 19, 19})));\n    assert(candidate((20577)) == (std::vector<long>({3,\
    \ 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long i = 2;\n    while (i <= sqrt(n)) {\n        while (n % i == 0) {\n \
    \           factors.push_back(i);\n            n /= i;\n        }\n        i++;\n\
    \    }\n    if (n > 1) {\n        factors.push_back(n);\n    }\n    return factors;\n\
    }\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2)) ==\
    \ (std::vector<long>({2})));\n    assert(candidate((4)) == (std::vector<long>({2,\
    \ 2})));\n    assert(candidate((8)) == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({3, 19})));\n    assert(candidate((3249)) == (std::vector<long>({3,\
    \ 3, 19, 19})));\n    assert(candidate((185193)) == (std::vector<long>({3, 3,\
    \ 3, 19, 19, 19})));\n    assert(candidate((20577)) == (std::vector<long>({3,\
    \ 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long i = 2;\n    long factor = 1;\n    while (i <= n / i) {\n        while\
    \ (n % i == 0) {\n            factor *= i;\n            n /= i;\n        }\n \
    \       factors.push_back(factor);\n        factor = 1;\n        ++i;\n    }\n\
    \    if (n != 1)\n        factors.push_back(n);\n    return factors;\n}\nint main()\
    \ {\n    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({2, 2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3,\
    \ 19})));\n    assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n\
    \    assert(candidate((185193)) == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({3, 19, 19, 19})));\n   \
    \ assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n}\n"
  stdout: ''
  stderr: "tmppdi27wtg: /tmp/tmppdi27wtg.cpp:32: int main(): Assertion `candidate((4))\
    \ == (std::vector<long>({2, 2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long factor = 1;\n    long i = 2;\n    while (i <= sqrt(n)) {\n        while\
    \ (n % i == 0) {\n            factors.push_back(i);\n            n /= i;\n   \
    \     }\n        i++;\n    }\n    if (n != 1) {\n        factors.push_back(n);\n\
    \    }\n    return factors;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({2, 2})));\n    assert(candidate((8)) == (std::vector<long>({2,\
    \ 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3, 19})));\n  \
    \  assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({3, 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2,\
    \ 3, 3})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long factor = 1;\n    long count = 0;\n    while (n != 1) {\n        while\
    \ (n % factor == 0) {\n            factors.push_back(factor);\n            n /=\
    \ factor;\n            count++;\n        }\n        factor++;\n    }\n    factors.push_back(1);\n\
    \    return factors;\n}\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2))\
    \ == (std::vector<long>({2})));\n    assert(candidate((4)) == (std::vector<long>({2,\
    \ 2})));\n    assert(candidate((8)) == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({3, 19})));\n    assert(candidate((3249)) == (std::vector<long>({3,\
    \ 3, 19, 19})));\n    assert(candidate((185193)) == (std::vector<long>({3, 3,\
    \ 3, 19, 19, 19})));\n    assert(candidate((20577)) == (std::vector<long>({3,\
    \ 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long i = 2;\n    while (i <= n) {\n        while (n % i == 0) {\n       \
    \     factors.push_back(i);\n            n /= i;\n        }\n        i++;\n  \
    \  }\n    if (n > 1) {\n        factors.push_back(n);\n    }\n    return factors;\n\
    }\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2)) ==\
    \ (std::vector<long>({2})));\n    assert(candidate((4)) == (std::vector<long>({2,\
    \ 2})));\n    assert(candidate((8)) == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({3, 19})));\n    assert(candidate((3249)) == (std::vector<long>({3,\
    \ 3, 19, 19})));\n    assert(candidate((185193)) == (std::vector<long>({3, 3,\
    \ 3, 19, 19, 19})));\n    assert(candidate((20577)) == (std::vector<long>({3,\
    \ 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long factor = 1;\n    long i = 2;\n    while (i <= n / factor) {\n      \
    \  while (n % i == 0) {\n            factors.push_back(i);\n            n /= i;\n\
    \        }\n        i++;\n    }\n    if (n > 1) {\n        factors.push_back(n);\n\
    \    }\n    return factors;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({2, 2})));\n    assert(candidate((8)) == (std::vector<long>({2,\
    \ 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3, 19})));\n  \
    \  assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({3, 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2,\
    \ 3, 3})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long i = 2;\n    long p = n;\n    while (p % i == 0) {\n        factors.push_back(i);\n\
    \        p /= i;\n    }\n    if (p != 1) {\n        factors.push_back(p);\n  \
    \  }\n    return factors;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({2, 2})));\n    assert(candidate((8)) == (std::vector<long>({2,\
    \ 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3, 19})));\n  \
    \  assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({3, 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2,\
    \ 3, 3})));\n}\n"
  stdout: ''
  stderr: "tmpvipcn021: /tmp/tmpvipcn021.cpp:30: int main(): Assertion `candidate((57))\
    \ == (std::vector<long>({3, 19}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long p = 1;\n    long q = n;\n    long r = n;\n    long s = 1;\n    long\
    \ t = 1;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n\
    \    long y = 1;\n    long z = 1;\n    long a = 1;\n    long b = 1;\n    long\
    \ c = 1;\n    long d = 1;\n    long e = 1;\n    long f = 1;\n    long g = 1;\n\
    \    long h = 1;\n    long i = 1;\n    long j = 1;\n    long k = 1;\n    long\
    \ l = 1;\n    long m = 1;\n    long n = 1;\n    long o = 1;\n    long p = 1;\n\
    \    long q = 1;\n    long r = 1;\n    long s = 1;\n    long t = 1;\n    long\
    \ u = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n    long y = 1;\n\
    \    long z = 1;\n    long a = 1;\n    long b = 1;\n    long c = 1;\n    long\
    \ d = 1;\n    long e = 1;\n    long f = 1;\n    long g = 1;\n    long h = 1;\n\
    \    long i = 1;\n    long j = 1;\n    long k = 1;\n    long l = 1;\n    long\
    \ m = 1;\n    long n = 1;\n    long o = 1;\n    long p = 1;\n    long q = 1;\n\
    \    long r = 1;\n    long s = 1;\n    long t = 1;\n    long u = 1;\n    long\
    \ v = 1;\n    long w = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n\
    \    long a = 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n    long\
    \ e = 1;\n    long f = 1;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n\
    \    long j = 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n    long\
    \ n = 1;\n    long o = 1;\n    long p = 1;\n    long q = 1;\n    long r = 1;\n\
    \    long s = 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n    long\
    \ w = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n    long a = 1;\n\
    \    long b = 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n    long\
    \ f = 1;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n    long j = 1;\n\
    \    long k = 1;\n    long l = 1;\n\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({2, 2})));\n    assert(candidate((8)) == (std::vector<long>({2,\
    \ 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3, 19})));\n  \
    \  assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({3, 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2,\
    \ 3, 3})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpc5r54i4v.cpp: In function \u2018std::vector<long int> factorize(long\
    \ int)\u2019:\n/tmp/tmpc5r54i4v.cpp:38:10: error: declaration of \u2018long int\
    \ n\u2019 shadows a parameter\n   38 |     long n = 1;\n      |          ^\n/tmp/tmpc5r54i4v.cpp:40:10:\
    \ error: redeclaration of \u2018long int p\u2019\n   40 |     long p = 1;\n  \
    \    |          ^\n/tmp/tmpc5r54i4v.cpp:14:10: note: \u2018long int p\u2019 previously\
    \ declared here\n   14 |     long p = 1;\n      |          ^\n/tmp/tmpc5r54i4v.cpp:41:10:\
    \ error: redeclaration of \u2018long int q\u2019\n   41 |     long q = 1;\n  \
    \    |          ^\n/tmp/tmpc5r54i4v.cpp:15:10: note: \u2018long int q\u2019 previously\
    \ declared here\n   15 |     long q = n;\n      |          ^\n/tmp/tmpc5r54i4v.cpp:42:10:\
    \ error: redeclaration of \u2018long int r\u2019\n   42 |     long r = 1;\n  \
    \    |          ^\n/tmp/tmpc5r54i4v.cpp:16:10: note: \u2018long int r\u2019 previously\
    \ declared here\n   16 |     long r = n;\n      |          ^\n/tmp/tmpc5r54i4v.cpp:43:10:\
    \ error: redeclaration of \u2018long int s\u2019\n   43 |     long s = 1;\n  \
    \    |          ^\n/tmp/tmpc5r54i4v.cpp:17:10: note: \u2018long int s\u2019 previously\
    \ declared here\n   17 |     long s = 1;\n      |          ^\n/tmp/tmpc5r54i4v.cpp:44:10:\
    \ error: redeclaration of \u2018long int t\u2019\n   44 |     long t = 1;\n  \
    \    |          ^\n/tmp/tmpc5r54i4v.cpp:18:10: note: \u2018long int t\u2019 previously\
    \ declared here\n   18 |     long t = 1;\n      |          ^\n/tmp/tmpc5r54i4v.cpp:45:10:\
    \ error: redeclaration of \u2018long int u\u2019\n   45 |     long u = 1;\n  \
    \    |          ^\n/tmp/tmpc5r54i4v.cpp:19:10: note: \u2018long int u\u2019 previously\
    \ declared here\n   19 |     long u = 1;\n      |          ^\n/tmp/tmpc5r54i4v.cpp:46:10:\
    \ error: redeclaration of \u2018long int v\u2019\n   46 |     long v = 1;\n  \
    \    |          ^\n/tmp/tmpc5r54i4v.cpp:20:10: note: \u2018long int v\u2019 previously\
    \ declared here\n   20 |     long v = 1;\n      |          ^\n/tmp/tmpc5r54i4v.cpp:47:10:\
    \ error: redeclaration of \u2018long int w\u2019\n   47 |     long w = 1;\n  \
    \    |          ^\n/tmp/tmpc5r54i4v.cpp:21:10: note: \u2018long int w\u2019 previously\
    \ declared here\n   21 |     long w = 1;\n      |          ^\n/tmp/tmpc5r54i4v.cpp:48:10:\
    \ error: redeclaration of \u2018long i"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long factor = 1;\n    long count = 0;\n    while (n > 1) {\n        while\
    \ (n % factor == 0) {\n            factors.push_back(factor);\n            n /=\
    \ factor;\n            count++;\n        }\n        factor *= 2;\n    }\n    factors.push_back(factor);\n\
    \    factors.push_back(count);\n    return factors;\n}\nint main() {\n    auto\
    \ candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({2, 2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3,\
    \ 19})));\n    assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n\
    \    assert(candidate((185193)) == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({3, 19, 19, 19})));\n   \
    \ assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long i = 2;\n    while (i <= n / i) {\n        while (n % i == 0) {\n   \
    \         factors.push_back(i);\n            n /= i;\n        }\n        i++;\n\
    \    }\n    if (n != 1)\n        factors.push_back(n);\n    return factors;\n\
    }\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2)) ==\
    \ (std::vector<long>({2})));\n    assert(candidate((4)) == (std::vector<long>({2,\
    \ 2})));\n    assert(candidate((8)) == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({3, 19})));\n    assert(candidate((3249)) == (std::vector<long>({3,\
    \ 3, 19, 19})));\n    assert(candidate((185193)) == (std::vector<long>({3, 3,\
    \ 3, 19, 19, 19})));\n    assert(candidate((20577)) == (std::vector<long>({3,\
    \ 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long factor = 1;\n    long count = 0;\n    for (long i = 1; i <= n; i++)\
    \ {\n        while (n % i == 0) {\n            factor *= i;\n            count++;\n\
    \            n /= i;\n        }\n        if (n != 1) {\n            factors.push_back(factor);\n\
    \            factor = 1;\n            count = 1;\n        }\n    }\n    if (n\
    \ != 1) {\n        factors.push_back(factor);\n    }\n    return factors;\n}\n\
    int main() {\n    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({2, 2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3,\
    \ 19})));\n    assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n\
    \    assert(candidate((185193)) == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({3, 19, 19, 19})));\n   \
    \ assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long factor = 1;\n    long i = 2;\n    while (i <= n / factor) {\n      \
    \  while (n % i == 0) {\n            factors.push_back(i);\n            n /= i;\n\
    \        }\n        i++;\n    }\n    if (n != 1) {\n        factors.push_back(n);\n\
    \    }\n    return factors;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({2, 2})));\n    assert(candidate((8)) == (std::vector<long>({2,\
    \ 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3, 19})));\n  \
    \  assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({3, 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2,\
    \ 3, 3})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long i = 2;\n    while (i <= sqrt(n)) {\n        while (n % i == 0) {\n \
    \           factors.push_back(i);\n            n /= i;\n        }\n        i++;\n\
    \    }\n    if (n != 1) {\n        factors.push_back(n);\n    }\n    return factors;\n\
    }\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2)) ==\
    \ (std::vector<long>({2})));\n    assert(candidate((4)) == (std::vector<long>({2,\
    \ 2})));\n    assert(candidate((8)) == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({3, 19})));\n    assert(candidate((3249)) == (std::vector<long>({3,\
    \ 3, 19, 19})));\n    assert(candidate((185193)) == (std::vector<long>({3, 3,\
    \ 3, 19, 19, 19})));\n    assert(candidate((20577)) == (std::vector<long>({3,\
    \ 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long i = 2;\n    while (i <= sqrt(n)) {\n        while (n % i == 0) {\n \
    \           factors.push_back(i);\n            n /= i;\n        }\n        i++;\n\
    \    }\n    if (n > 1) {\n        factors.push_back(n);\n    }\n    return factors;\n\
    }\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2)) ==\
    \ (std::vector<long>({2})));\n    assert(candidate((4)) == (std::vector<long>({2,\
    \ 2})));\n    assert(candidate((8)) == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({3, 19})));\n    assert(candidate((3249)) == (std::vector<long>({3,\
    \ 3, 19, 19})));\n    assert(candidate((185193)) == (std::vector<long>({3, 3,\
    \ 3, 19, 19, 19})));\n    assert(candidate((20577)) == (std::vector<long>({3,\
    \ 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long i = 2;\n    while (i <= n / i) {\n        while (n % i == 0) {\n   \
    \         factors.push_back(i);\n            n /= i;\n        }\n        i++;\n\
    \    }\n    if (n > 1) {\n        factors.push_back(n);\n    }\n    return factors;\n\
    }\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2)) ==\
    \ (std::vector<long>({2})));\n    assert(candidate((4)) == (std::vector<long>({2,\
    \ 2})));\n    assert(candidate((8)) == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({3, 19})));\n    assert(candidate((3249)) == (std::vector<long>({3,\
    \ 3, 19, 19})));\n    assert(candidate((185193)) == (std::vector<long>({3, 3,\
    \ 3, 19, 19, 19})));\n    assert(candidate((20577)) == (std::vector<long>({3,\
    \ 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long i = 2;\n    while (i <= sqrt(n)) {\n        while (n % i == 0) {\n \
    \           factors.push_back(i);\n            n /= i;\n        }\n        i++;\n\
    \    }\n    if (n != 1) {\n        factors.push_back(n);\n    }\n    return factors;\n\
    }\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2)) ==\
    \ (std::vector<long>({2})));\n    assert(candidate((4)) == (std::vector<long>({2,\
    \ 2})));\n    assert(candidate((8)) == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({3, 19})));\n    assert(candidate((3249)) == (std::vector<long>({3,\
    \ 3, 19, 19})));\n    assert(candidate((185193)) == (std::vector<long>({3, 3,\
    \ 3, 19, 19, 19})));\n    assert(candidate((20577)) == (std::vector<long>({3,\
    \ 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long i = 2;\n    while (i <= sqrt(n)) {\n        while (n % i == 0) {\n \
    \           factors.push_back(i);\n            n /= i;\n        }\n        i++;\n\
    \    }\n    if (n != 1) {\n        factors.push_back(n);\n    }\n    return factors;\n\
    }\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2)) ==\
    \ (std::vector<long>({2})));\n    assert(candidate((4)) == (std::vector<long>({2,\
    \ 2})));\n    assert(candidate((8)) == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({3, 19})));\n    assert(candidate((3249)) == (std::vector<long>({3,\
    \ 3, 19, 19})));\n    assert(candidate((185193)) == (std::vector<long>({3, 3,\
    \ 3, 19, 19, 19})));\n    assert(candidate((20577)) == (std::vector<long>({3,\
    \ 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long factor = 1;\n    long count = 0;\n    while (n > 1) {\n        while\
    \ (n % factor == 0) {\n            factors.push_back(factor);\n            n /=\
    \ factor;\n            count++;\n        }\n        factor++;\n    }\n    factors.push_back(factor);\n\
    \    factors.push_back(count);\n    return factors;\n}\nint main() {\n    auto\
    \ candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({2, 2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3,\
    \ 19})));\n    assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n\
    \    assert(candidate((185193)) == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({3, 19, 19, 19})));\n   \
    \ assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long i = 2;\n    while (i <= sqrt(n)) {\n        while (n % i == 0) {\n \
    \           factors.push_back(i);\n            n /= i;\n        }\n        i++;\n\
    \    }\n    if (n > 1) {\n        factors.push_back(n);\n    }\n    return factors;\n\
    }\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2)) ==\
    \ (std::vector<long>({2})));\n    assert(candidate((4)) == (std::vector<long>({2,\
    \ 2})));\n    assert(candidate((8)) == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({3, 19})));\n    assert(candidate((3249)) == (std::vector<long>({3,\
    \ 3, 19, 19})));\n    assert(candidate((185193)) == (std::vector<long>({3, 3,\
    \ 3, 19, 19, 19})));\n    assert(candidate((20577)) == (std::vector<long>({3,\
    \ 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long i = 2;\n    while (i <= n / i) {\n        while (n % i == 0) {\n   \
    \         factors.push_back(i);\n            n /= i;\n        }\n        i++;\n\
    \    }\n    if (n != 1) {\n        factors.push_back(n);\n    }\n    return factors;\n\
    }\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2)) ==\
    \ (std::vector<long>({2})));\n    assert(candidate((4)) == (std::vector<long>({2,\
    \ 2})));\n    assert(candidate((8)) == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({3, 19})));\n    assert(candidate((3249)) == (std::vector<long>({3,\
    \ 3, 19, 19})));\n    assert(candidate((185193)) == (std::vector<long>({3, 3,\
    \ 3, 19, 19, 19})));\n    assert(candidate((20577)) == (std::vector<long>({3,\
    \ 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long factor = 1;\n    long i = 2;\n    while (i <= n / factor) {\n      \
    \  while (n % i == 0) {\n            factors.push_back(i);\n            n /= i;\n\
    \        }\n        i++;\n    }\n    factors.push_back(n);\n    return factors;\n\
    }\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2)) ==\
    \ (std::vector<long>({2})));\n    assert(candidate((4)) == (std::vector<long>({2,\
    \ 2})));\n    assert(candidate((8)) == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({3, 19})));\n    assert(candidate((3249)) == (std::vector<long>({3,\
    \ 3, 19, 19})));\n    assert(candidate((185193)) == (std::vector<long>({3, 3,\
    \ 3, 19, 19, 19})));\n    assert(candidate((20577)) == (std::vector<long>({3,\
    \ 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n\
    }\n"
  stdout: ''
  stderr: "tmpio8bfgdv: /tmp/tmpio8bfgdv.cpp:28: int main(): Assertion `candidate((2))\
    \ == (std::vector<long>({2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long factor = 1;\n    long i = 2;\n    while (i <= n / factor) {\n      \
    \  while (n % i == 0) {\n            factors.push_back(i);\n            n /= i;\n\
    \        }\n        i++;\n    }\n    if (n > 1) {\n        factors.push_back(n);\n\
    \    }\n    return factors;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({2, 2})));\n    assert(candidate((8)) == (std::vector<long>({2,\
    \ 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3, 19})));\n  \
    \  assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({3, 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2,\
    \ 3, 3})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long i = 2;\n    while (i <= n) {\n        while (n % i == 0) {\n       \
    \     factors.push_back(i);\n            n /= i;\n        }\n        i++;\n  \
    \  }\n    if (n > 1) {\n        factors.push_back(n);\n    }\n    return factors;\n\
    }\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2)) ==\
    \ (std::vector<long>({2})));\n    assert(candidate((4)) == (std::vector<long>({2,\
    \ 2})));\n    assert(candidate((8)) == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({3, 19})));\n    assert(candidate((3249)) == (std::vector<long>({3,\
    \ 3, 19, 19})));\n    assert(candidate((185193)) == (std::vector<long>({3, 3,\
    \ 3, 19, 19, 19})));\n    assert(candidate((20577)) == (std::vector<long>({3,\
    \ 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long factor = 1;\n    long factorization = 1;\n    while (n > 1) {\n    \
    \    while (n % factor == 0) {\n            factorization *= factor;\n       \
    \     factors.push_back(factor);\n            n /= factor;\n        }\n      \
    \  factor *= factorization;\n    }\n    return factors;\n}\nint main() {\n   \
    \ auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({2, 2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3,\
    \ 19})));\n    assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n\
    \    assert(candidate((185193)) == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({3, 19, 19, 19})));\n   \
    \ assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long factor = 1;\n    long count = 0;\n    while (n > 1) {\n        while\
    \ (n % factor == 0) {\n            factors.push_back(factor);\n            n /=\
    \ factor;\n            count++;\n        }\n        factor++;\n    }\n    factors.push_back(factor);\n\
    \    return factors;\n}\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2))\
    \ == (std::vector<long>({2})));\n    assert(candidate((4)) == (std::vector<long>({2,\
    \ 2})));\n    assert(candidate((8)) == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({3, 19})));\n    assert(candidate((3249)) == (std::vector<long>({3,\
    \ 3, 19, 19})));\n    assert(candidate((185193)) == (std::vector<long>({3, 3,\
    \ 3, 19, 19, 19})));\n    assert(candidate((20577)) == (std::vector<long>({3,\
    \ 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long i = 2;\n    while (i <= sqrt(n)) {\n        while (n % i == 0) {\n \
    \           factors.push_back(i);\n            n /= i;\n        }\n        i++;\n\
    \    }\n    if (n > 1) {\n        factors.push_back(n);\n    }\n    return factors;\n\
    }\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2)) ==\
    \ (std::vector<long>({2})));\n    assert(candidate((4)) == (std::vector<long>({2,\
    \ 2})));\n    assert(candidate((8)) == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({3, 19})));\n    assert(candidate((3249)) == (std::vector<long>({3,\
    \ 3, 19, 19})));\n    assert(candidate((185193)) == (std::vector<long>({3, 3,\
    \ 3, 19, 19, 19})));\n    assert(candidate((20577)) == (std::vector<long>({3,\
    \ 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long i = 2;\n    while (i <= n) {\n        while (n % i == 0) {\n       \
    \     factors.push_back(i);\n            n /= i;\n        }\n        i++;\n  \
    \  }\n    if (n != 1)\n        factors.push_back(n);\n    return factors;\n}\n\
    int main() {\n    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({2, 2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3,\
    \ 19})));\n    assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n\
    \    assert(candidate((185193)) == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({3, 19, 19, 19})));\n   \
    \ assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long i = 2;\n    long factor = 1;\n    while (i <= n) {\n        while (n\
    \ % i == 0) {\n            factor *= i;\n            factors.push_back(factor);\n\
    \            n /= i;\n        }\n        i++;\n    }\n    return factors;\n}\n\
    int main() {\n    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({2, 2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3,\
    \ 19})));\n    assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n\
    \    assert(candidate((185193)) == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({3, 19, 19, 19})));\n   \
    \ assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n}\n"
  stdout: ''
  stderr: "tmp1b4x00cb: /tmp/tmp1b4x00cb.cpp:29: int main(): Assertion `candidate((4))\
    \ == (std::vector<long>({2, 2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long p = n;\n    long q = n;\n    long r = n;\n    long s = n;\n    long\
    \ t = n;\n    long u = n;\n    long v = n;\n    long w = n;\n    long x = n;\n\
    \    long y = n;\n    long z = n;\n    long a = n;\n    long b = n;\n    long\
    \ c = n;\n    long d = n;\n    long e = n;\n    long f = n;\n    long g = n;\n\
    \    long h = n;\n    long i = n;\n    long j = n;\n    long k = n;\n    long\
    \ l = n;\n    long m = n;\n    long n = n;\n    long o = n;\n    long p = n;\n\
    \    long q = n;\n    long r = n;\n    long s = n;\n    long t = n;\n    long\
    \ u = n;\n    long v = n;\n    long w = n;\n    long x = n;\n    long y = n;\n\
    \    long z = n;\n    long a = n;\n    long b = n;\n    long c = n;\n    long\
    \ d = n;\n    long e = n;\n    long f = n;\n    long g = n;\n    long h = n;\n\
    \    long i = n;\n    long j = n;\n    long k = n;\n    long l = n;\n    long\
    \ m = n;\n    long n = n;\n    long o = n;\n    long p = n;\n    long q = n;\n\
    \    long r = n;\n    long s = n;\n    long t = n;\n    long u = n;\n    long\
    \ v = n;\n    long w = n;\n    long x = n;\n    long y = n;\n    long z = n;\n\
    \    long a = n;\n    long b = n;\n    long c = n;\n    long d = n;\n    long\
    \ e = n;\n    long f = n;\n    long g = n;\n    long h = n;\n    long i = n;\n\
    \    long j = n;\n    long k = n;\n    long l = n;\n    long m = n;\n    long\
    \ n = n;\n    long o = n;\n    long p = n;\n    long q = n;\n    long r = n;\n\
    \    long s = n;\n    long t = n;\n    long u = n;\n    long v = n;\n    long\
    \ w = n;\n    long x = n;\n    long y = n;\n    long z = n;\n    long a = n;\n\
    \    long b = n;\n    long c = n;\n    long d = n;\n    long e = n;\n    long\
    \ f = n;\n    long g = n;\n    long h = n;\n    long i = n;\n    long j = n;\n\
    \    long k = n;\n    long l = n;\n\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({2, 2})));\n    assert(candidate((8)) == (std::vector<long>({2,\
    \ 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3, 19})));\n  \
    \  assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({3, 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2,\
    \ 3, 3})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_xf5ut87.cpp: In function \u2018std::vector<long int> factorize(long\
    \ int)\u2019:\n/tmp/tmp_xf5ut87.cpp:38:10: error: declaration of \u2018long int\
    \ n\u2019 shadows a parameter\n   38 |     long n = n;\n      |          ^\n/tmp/tmp_xf5ut87.cpp:40:10:\
    \ error: redeclaration of \u2018long int p\u2019\n   40 |     long p = n;\n  \
    \    |          ^\n/tmp/tmp_xf5ut87.cpp:14:10: note: \u2018long int p\u2019 previously\
    \ declared here\n   14 |     long p = n;\n      |          ^\n/tmp/tmp_xf5ut87.cpp:41:10:\
    \ error: redeclaration of \u2018long int q\u2019\n   41 |     long q = n;\n  \
    \    |          ^\n/tmp/tmp_xf5ut87.cpp:15:10: note: \u2018long int q\u2019 previously\
    \ declared here\n   15 |     long q = n;\n      |          ^\n/tmp/tmp_xf5ut87.cpp:42:10:\
    \ error: redeclaration of \u2018long int r\u2019\n   42 |     long r = n;\n  \
    \    |          ^\n/tmp/tmp_xf5ut87.cpp:16:10: note: \u2018long int r\u2019 previously\
    \ declared here\n   16 |     long r = n;\n      |          ^\n/tmp/tmp_xf5ut87.cpp:43:10:\
    \ error: redeclaration of \u2018long int s\u2019\n   43 |     long s = n;\n  \
    \    |          ^\n/tmp/tmp_xf5ut87.cpp:17:10: note: \u2018long int s\u2019 previously\
    \ declared here\n   17 |     long s = n;\n      |          ^\n/tmp/tmp_xf5ut87.cpp:44:10:\
    \ error: redeclaration of \u2018long int t\u2019\n   44 |     long t = n;\n  \
    \    |          ^\n/tmp/tmp_xf5ut87.cpp:18:10: note: \u2018long int t\u2019 previously\
    \ declared here\n   18 |     long t = n;\n      |          ^\n/tmp/tmp_xf5ut87.cpp:45:10:\
    \ error: redeclaration of \u2018long int u\u2019\n   45 |     long u = n;\n  \
    \    |          ^\n/tmp/tmp_xf5ut87.cpp:19:10: note: \u2018long int u\u2019 previously\
    \ declared here\n   19 |     long u = n;\n      |          ^\n/tmp/tmp_xf5ut87.cpp:46:10:\
    \ error: redeclaration of \u2018long int v\u2019\n   46 |     long v = n;\n  \
    \    |          ^\n/tmp/tmp_xf5ut87.cpp:20:10: note: \u2018long int v\u2019 previously\
    \ declared here\n   20 |     long v = n;\n      |          ^\n/tmp/tmp_xf5ut87.cpp:47:10:\
    \ error: redeclaration of \u2018long int w\u2019\n   47 |     long w = n;\n  \
    \    |          ^\n/tmp/tmp_xf5ut87.cpp:21:10: note: \u2018long int w\u2019 previously\
    \ declared here\n   21 |     long w = n;\n      |          ^\n/tmp/tmp_xf5ut87.cpp:48:10:\
    \ error: redeclaration of \u2018long i"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long i = 2;\n    while (i <= sqrt(n)) {\n        while (n % i == 0) {\n \
    \           factors.push_back(i);\n            n /= i;\n        }\n        i++;\n\
    \    }\n    if (n > 1) {\n        factors.push_back(n);\n    }\n    return factors;\n\
    }\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2)) ==\
    \ (std::vector<long>({2})));\n    assert(candidate((4)) == (std::vector<long>({2,\
    \ 2})));\n    assert(candidate((8)) == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({3, 19})));\n    assert(candidate((3249)) == (std::vector<long>({3,\
    \ 3, 19, 19})));\n    assert(candidate((185193)) == (std::vector<long>({3, 3,\
    \ 3, 19, 19, 19})));\n    assert(candidate((20577)) == (std::vector<long>({3,\
    \ 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long factor = 1;\n    long i = 2;\n    while (i <= n / factor) {\n      \
    \  while (n % i == 0) {\n            factors.push_back(i);\n            n /= i;\n\
    \        }\n        i++;\n    }\n    if (n != 1) {\n        factors.push_back(n);\n\
    \    }\n    return factors;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({2, 2})));\n    assert(candidate((8)) == (std::vector<long>({2,\
    \ 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3, 19})));\n  \
    \  assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({3, 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2,\
    \ 3, 3})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long i = 2;\n    while (i <= n) {\n        while (n % i == 0) {\n       \
    \     factors.push_back(i);\n            n /= i;\n        }\n        i++;\n  \
    \  }\n    if (n != 1) {\n        factors.push_back(n);\n    }\n    return factors;\n\
    }\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2)) ==\
    \ (std::vector<long>({2})));\n    assert(candidate((4)) == (std::vector<long>({2,\
    \ 2})));\n    assert(candidate((8)) == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({3, 19})));\n    assert(candidate((3249)) == (std::vector<long>({3,\
    \ 3, 19, 19})));\n    assert(candidate((185193)) == (std::vector<long>({3, 3,\
    \ 3, 19, 19, 19})));\n    assert(candidate((20577)) == (std::vector<long>({3,\
    \ 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long p = n;\n    long q = n;\n    long r = n;\n    long s = 1;\n    long\
    \ t = 1;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n\
    \    long y = 1;\n    long z = 1;\n    long a = 1;\n    long b = 1;\n    long\
    \ c = 1;\n    long d = 1;\n    long e = 1;\n    long f = 1;\n    long g = 1;\n\
    \    long h = 1;\n    long i = 1;\n    long j = 1;\n    long k = 1;\n    long\
    \ l = 1;\n    long m = 1;\n    long n = 1;\n    long o = 1;\n    long p = 1;\n\
    \    long q = 1;\n    long r = 1;\n    long s = 1;\n    long t = 1;\n    long\
    \ u = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n    long y = 1;\n\
    \    long z = 1;\n    long a = 1;\n    long b = 1;\n    long c = 1;\n    long\
    \ d = 1;\n    long e = 1;\n    long f = 1;\n    long g = 1;\n    long h = 1;\n\
    \    long i = 1;\n    long j = 1;\n    long k = 1;\n    long l = 1;\n    long\
    \ m = 1;\n    long n = 1;\n    long o = 1;\n    long p = 1;\n    long q = 1;\n\
    \    long r = 1;\n    long s = 1;\n    long t = 1;\n    long u = 1;\n    long\
    \ v = 1;\n    long w = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n\
    \    long a = 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n    long\
    \ e = 1;\n    long f = 1;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n\
    \    long j = 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n    long\
    \ n = 1;\n    long o = 1;\n    long p = 1;\n    long q = 1;\n    long r = 1;\n\
    \    long s = 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n    long\
    \ w = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n    long a = 1;\n\
    \    long b = 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n    long\
    \ f = 1;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n    long j = 1;\n\
    \    long k = 1;\n    long l = 1;\n\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({2, 2})));\n    assert(candidate((8)) == (std::vector<long>({2,\
    \ 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3, 19})));\n  \
    \  assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({3, 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2,\
    \ 3, 3})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpcmzte495.cpp: In function \u2018std::vector<long int> factorize(long\
    \ int)\u2019:\n/tmp/tmpcmzte495.cpp:38:10: error: declaration of \u2018long int\
    \ n\u2019 shadows a parameter\n   38 |     long n = 1;\n      |          ^\n/tmp/tmpcmzte495.cpp:40:10:\
    \ error: redeclaration of \u2018long int p\u2019\n   40 |     long p = 1;\n  \
    \    |          ^\n/tmp/tmpcmzte495.cpp:14:10: note: \u2018long int p\u2019 previously\
    \ declared here\n   14 |     long p = n;\n      |          ^\n/tmp/tmpcmzte495.cpp:41:10:\
    \ error: redeclaration of \u2018long int q\u2019\n   41 |     long q = 1;\n  \
    \    |          ^\n/tmp/tmpcmzte495.cpp:15:10: note: \u2018long int q\u2019 previously\
    \ declared here\n   15 |     long q = n;\n      |          ^\n/tmp/tmpcmzte495.cpp:42:10:\
    \ error: redeclaration of \u2018long int r\u2019\n   42 |     long r = 1;\n  \
    \    |          ^\n/tmp/tmpcmzte495.cpp:16:10: note: \u2018long int r\u2019 previously\
    \ declared here\n   16 |     long r = n;\n      |          ^\n/tmp/tmpcmzte495.cpp:43:10:\
    \ error: redeclaration of \u2018long int s\u2019\n   43 |     long s = 1;\n  \
    \    |          ^\n/tmp/tmpcmzte495.cpp:17:10: note: \u2018long int s\u2019 previously\
    \ declared here\n   17 |     long s = 1;\n      |          ^\n/tmp/tmpcmzte495.cpp:44:10:\
    \ error: redeclaration of \u2018long int t\u2019\n   44 |     long t = 1;\n  \
    \    |          ^\n/tmp/tmpcmzte495.cpp:18:10: note: \u2018long int t\u2019 previously\
    \ declared here\n   18 |     long t = 1;\n      |          ^\n/tmp/tmpcmzte495.cpp:45:10:\
    \ error: redeclaration of \u2018long int u\u2019\n   45 |     long u = 1;\n  \
    \    |          ^\n/tmp/tmpcmzte495.cpp:19:10: note: \u2018long int u\u2019 previously\
    \ declared here\n   19 |     long u = 1;\n      |          ^\n/tmp/tmpcmzte495.cpp:46:10:\
    \ error: redeclaration of \u2018long int v\u2019\n   46 |     long v = 1;\n  \
    \    |          ^\n/tmp/tmpcmzte495.cpp:20:10: note: \u2018long int v\u2019 previously\
    \ declared here\n   20 |     long v = 1;\n      |          ^\n/tmp/tmpcmzte495.cpp:47:10:\
    \ error: redeclaration of \u2018long int w\u2019\n   47 |     long w = 1;\n  \
    \    |          ^\n/tmp/tmpcmzte495.cpp:21:10: note: \u2018long int w\u2019 previously\
    \ declared here\n   21 |     long w = 1;\n      |          ^\n/tmp/tmpcmzte495.cpp:48:10:\
    \ error: redeclaration of \u2018long i"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long factor = 1;\n    long counter = 1;\n    while (n > 1) {\n        while\
    \ (n % factor == 0) {\n            factors.push_back(factor);\n            n /=\
    \ factor;\n            counter++;\n        }\n        factor++;\n    }\n    factors.push_back(factor);\n\
    \    factors.push_back(counter);\n    return factors;\n}\nint main() {\n    auto\
    \ candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({2, 2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3,\
    \ 19})));\n    assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n\
    \    assert(candidate((185193)) == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({3, 19, 19, 19})));\n   \
    \ assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long p = 1;\n    long q = n;\n    long r = n;\n    long s = 1;\n    long\
    \ t = 1;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n\
    \    long y = 1;\n    long z = 1;\n    long a = 1;\n    long b = 1;\n    long\
    \ c = 1;\n    long d = 1;\n    long e = 1;\n    long f = 1;\n    long g = 1;\n\
    \    long h = 1;\n    long i = 1;\n    long j = 1;\n    long k = 1;\n    long\
    \ l = 1;\n    long m = 1;\n    long n = 1;\n    long o = 1;\n    long p = 1;\n\
    \    long q = 1;\n    long r = 1;\n    long s = 1;\n    long t = 1;\n    long\
    \ u = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n    long y = 1;\n\
    \    long z = 1;\n    long a = 1;\n    long b = 1;\n    long c = 1;\n    long\
    \ d = 1;\n    long e = 1;\n    long f = 1;\n    long g = 1;\n    long h = 1;\n\
    \    long i = 1;\n    long j = 1;\n    long k = 1;\n    long l = 1;\n    long\
    \ m = 1;\n    long n = 1;\n    long o = 1;\n    long p = 1;\n    long q = 1;\n\
    \    long r = 1;\n    long s = 1;\n    long t = 1;\n    long u = 1;\n    long\
    \ v = 1;\n    long w = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n\
    \    long a = 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n    long\
    \ e = 1;\n    long f = 1;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n\
    \    long j = 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n    long\
    \ n = 1;\n    long o = 1;\n    long p = 1;\n    long q = 1;\n    long r = 1;\n\
    \    long s = 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n    long\
    \ w = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n    long a = 1;\n\
    \    long b = 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n    long\
    \ f = 1;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n    long j = 1;\n\
    \    long k = 1;\n    long l = 1;\n\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({2, 2})));\n    assert(candidate((8)) == (std::vector<long>({2,\
    \ 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3, 19})));\n  \
    \  assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({3, 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2,\
    \ 3, 3})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpjj3hj8l7.cpp: In function \u2018std::vector<long int> factorize(long\
    \ int)\u2019:\n/tmp/tmpjj3hj8l7.cpp:38:10: error: declaration of \u2018long int\
    \ n\u2019 shadows a parameter\n   38 |     long n = 1;\n      |          ^\n/tmp/tmpjj3hj8l7.cpp:40:10:\
    \ error: redeclaration of \u2018long int p\u2019\n   40 |     long p = 1;\n  \
    \    |          ^\n/tmp/tmpjj3hj8l7.cpp:14:10: note: \u2018long int p\u2019 previously\
    \ declared here\n   14 |     long p = 1;\n      |          ^\n/tmp/tmpjj3hj8l7.cpp:41:10:\
    \ error: redeclaration of \u2018long int q\u2019\n   41 |     long q = 1;\n  \
    \    |          ^\n/tmp/tmpjj3hj8l7.cpp:15:10: note: \u2018long int q\u2019 previously\
    \ declared here\n   15 |     long q = n;\n      |          ^\n/tmp/tmpjj3hj8l7.cpp:42:10:\
    \ error: redeclaration of \u2018long int r\u2019\n   42 |     long r = 1;\n  \
    \    |          ^\n/tmp/tmpjj3hj8l7.cpp:16:10: note: \u2018long int r\u2019 previously\
    \ declared here\n   16 |     long r = n;\n      |          ^\n/tmp/tmpjj3hj8l7.cpp:43:10:\
    \ error: redeclaration of \u2018long int s\u2019\n   43 |     long s = 1;\n  \
    \    |          ^\n/tmp/tmpjj3hj8l7.cpp:17:10: note: \u2018long int s\u2019 previously\
    \ declared here\n   17 |     long s = 1;\n      |          ^\n/tmp/tmpjj3hj8l7.cpp:44:10:\
    \ error: redeclaration of \u2018long int t\u2019\n   44 |     long t = 1;\n  \
    \    |          ^\n/tmp/tmpjj3hj8l7.cpp:18:10: note: \u2018long int t\u2019 previously\
    \ declared here\n   18 |     long t = 1;\n      |          ^\n/tmp/tmpjj3hj8l7.cpp:45:10:\
    \ error: redeclaration of \u2018long int u\u2019\n   45 |     long u = 1;\n  \
    \    |          ^\n/tmp/tmpjj3hj8l7.cpp:19:10: note: \u2018long int u\u2019 previously\
    \ declared here\n   19 |     long u = 1;\n      |          ^\n/tmp/tmpjj3hj8l7.cpp:46:10:\
    \ error: redeclaration of \u2018long int v\u2019\n   46 |     long v = 1;\n  \
    \    |          ^\n/tmp/tmpjj3hj8l7.cpp:20:10: note: \u2018long int v\u2019 previously\
    \ declared here\n   20 |     long v = 1;\n      |          ^\n/tmp/tmpjj3hj8l7.cpp:47:10:\
    \ error: redeclaration of \u2018long int w\u2019\n   47 |     long w = 1;\n  \
    \    |          ^\n/tmp/tmpjj3hj8l7.cpp:21:10: note: \u2018long int w\u2019 previously\
    \ declared here\n   21 |     long w = 1;\n      |          ^\n/tmp/tmpjj3hj8l7.cpp:48:10:\
    \ error: redeclaration of \u2018long i"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long i = 2;\n    while (i <= n) {\n        while (n % i == 0) {\n       \
    \     factors.push_back(i);\n            n /= i;\n        }\n        i++;\n  \
    \  }\n    if (n > 1) {\n        factors.push_back(n);\n    }\n    return factors;\n\
    }\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2)) ==\
    \ (std::vector<long>({2})));\n    assert(candidate((4)) == (std::vector<long>({2,\
    \ 2})));\n    assert(candidate((8)) == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({3, 19})));\n    assert(candidate((3249)) == (std::vector<long>({3,\
    \ 3, 19, 19})));\n    assert(candidate((185193)) == (std::vector<long>({3, 3,\
    \ 3, 19, 19, 19})));\n    assert(candidate((20577)) == (std::vector<long>({3,\
    \ 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long factor = 1;\n    long i = 2;\n    while (i <= n / factor) {\n      \
    \  while (n % i == 0) {\n            factors.push_back(i);\n            n /= i;\n\
    \        }\n        i++;\n    }\n    if (n > 1) {\n        factors.push_back(n);\n\
    \    }\n    return factors;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({2, 2})));\n    assert(candidate((8)) == (std::vector<long>({2,\
    \ 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3, 19})));\n  \
    \  assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({3, 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2,\
    \ 3, 3})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long i = 2;\n    while (i < n) {\n        while (n % i == 0) {\n        \
    \    factors.push_back(i);\n            n /= i;\n        }\n        i++;\n   \
    \ }\n    if (n != 1) {\n        factors.push_back(n);\n    }\n    return factors;\n\
    }\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2)) ==\
    \ (std::vector<long>({2})));\n    assert(candidate((4)) == (std::vector<long>({2,\
    \ 2})));\n    assert(candidate((8)) == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({3, 19})));\n    assert(candidate((3249)) == (std::vector<long>({3,\
    \ 3, 19, 19})));\n    assert(candidate((185193)) == (std::vector<long>({3, 3,\
    \ 3, 19, 19, 19})));\n    assert(candidate((20577)) == (std::vector<long>({3,\
    \ 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long i = 2;\n    long factor = 1;\n    while (i <= n) {\n        if (n %\
    \ i == 0) {\n            factor *= i;\n            while (n % i == 0) {\n    \
    \            n /= i;\n                factors.push_back(i);\n            }\n \
    \       }\n        i++;\n    }\n    factors.push_back(factor);\n    return factors;\n\
    }\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2)) ==\
    \ (std::vector<long>({2})));\n    assert(candidate((4)) == (std::vector<long>({2,\
    \ 2})));\n    assert(candidate((8)) == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({3, 19})));\n    assert(candidate((3249)) == (std::vector<long>({3,\
    \ 3, 19, 19})));\n    assert(candidate((185193)) == (std::vector<long>({3, 3,\
    \ 3, 19, 19, 19})));\n    assert(candidate((20577)) == (std::vector<long>({3,\
    \ 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n\
    }\n"
  stdout: ''
  stderr: "tmp1he1c1c8: /tmp/tmp1he1c1c8.cpp:31: int main(): Assertion `candidate((2))\
    \ == (std::vector<long>({2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long p = n;\n    long q = n;\n    long r = n;\n    long s = n;\n    long\
    \ t = n;\n    long u = n;\n    long v = n;\n    long w = n;\n    long x = n;\n\
    \    long y = n;\n    long z = n;\n    long a = n;\n    long b = n;\n    long\
    \ c = n;\n    long d = n;\n    long e = n;\n    long f = n;\n    long g = n;\n\
    \    long h = n;\n    long i = n;\n    long j = n;\n    long k = n;\n    long\
    \ l = n;\n    long m = n;\n    long n = n;\n    long o = n;\n    long p = n;\n\
    \    long q = n;\n    long r = n;\n    long s = n;\n    long t = n;\n    long\
    \ u = n;\n    long v = n;\n    long w = n;\n    long x = n;\n    long y = n;\n\
    \    long z = n;\n    long a = n;\n    long b = n;\n    long c = n;\n    long\
    \ d = n;\n    long e = n;\n    long f = n;\n    long g = n;\n    long h = n;\n\
    \    long i = n;\n    long j = n;\n    long k = n;\n    long l = n;\n    long\
    \ m = n;\n    long n = n;\n    long o = n;\n    long p = n;\n    long q = n;\n\
    \    long r = n;\n    long s = n;\n    long t = n;\n    long u = n;\n    long\
    \ v = n;\n    long w = n;\n    long x = n;\n    long y = n;\n    long z = n;\n\
    \    long a = n;\n    long b = n;\n    long c = n;\n    long d = n;\n    long\
    \ e = n;\n    long f = n;\n    long g = n;\n    long h = n;\n    long i = n;\n\
    \    long j = n;\n    long k = n;\n    long l = n;\n    long m = n;\n    long\
    \ n = n;\n    long o = n;\n    long p = n;\n    long q = n;\n    long r = n;\n\
    \    long s = n;\n    long t = n;\n    long u = n;\n    long v = n;\n    long\
    \ w = n;\n    long x = n;\n    long y = n;\n    long z = n;\n    long a = n;\n\
    \    long b = n;\n    long c = n;\n    long d = n;\n    long e = n;\n    long\
    \ f = n;\n    long g = n;\n    long h = n;\n    long i = n;\n    long j = n;\n\
    \    long k = n;\n    long l = n;\n\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({2, 2})));\n    assert(candidate((8)) == (std::vector<long>({2,\
    \ 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3, 19})));\n  \
    \  assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({3, 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2,\
    \ 3, 3})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8_0itkej.cpp: In function \u2018std::vector<long int> factorize(long\
    \ int)\u2019:\n/tmp/tmp8_0itkej.cpp:38:10: error: declaration of \u2018long int\
    \ n\u2019 shadows a parameter\n   38 |     long n = n;\n      |          ^\n/tmp/tmp8_0itkej.cpp:40:10:\
    \ error: redeclaration of \u2018long int p\u2019\n   40 |     long p = n;\n  \
    \    |          ^\n/tmp/tmp8_0itkej.cpp:14:10: note: \u2018long int p\u2019 previously\
    \ declared here\n   14 |     long p = n;\n      |          ^\n/tmp/tmp8_0itkej.cpp:41:10:\
    \ error: redeclaration of \u2018long int q\u2019\n   41 |     long q = n;\n  \
    \    |          ^\n/tmp/tmp8_0itkej.cpp:15:10: note: \u2018long int q\u2019 previously\
    \ declared here\n   15 |     long q = n;\n      |          ^\n/tmp/tmp8_0itkej.cpp:42:10:\
    \ error: redeclaration of \u2018long int r\u2019\n   42 |     long r = n;\n  \
    \    |          ^\n/tmp/tmp8_0itkej.cpp:16:10: note: \u2018long int r\u2019 previously\
    \ declared here\n   16 |     long r = n;\n      |          ^\n/tmp/tmp8_0itkej.cpp:43:10:\
    \ error: redeclaration of \u2018long int s\u2019\n   43 |     long s = n;\n  \
    \    |          ^\n/tmp/tmp8_0itkej.cpp:17:10: note: \u2018long int s\u2019 previously\
    \ declared here\n   17 |     long s = n;\n      |          ^\n/tmp/tmp8_0itkej.cpp:44:10:\
    \ error: redeclaration of \u2018long int t\u2019\n   44 |     long t = n;\n  \
    \    |          ^\n/tmp/tmp8_0itkej.cpp:18:10: note: \u2018long int t\u2019 previously\
    \ declared here\n   18 |     long t = n;\n      |          ^\n/tmp/tmp8_0itkej.cpp:45:10:\
    \ error: redeclaration of \u2018long int u\u2019\n   45 |     long u = n;\n  \
    \    |          ^\n/tmp/tmp8_0itkej.cpp:19:10: note: \u2018long int u\u2019 previously\
    \ declared here\n   19 |     long u = n;\n      |          ^\n/tmp/tmp8_0itkej.cpp:46:10:\
    \ error: redeclaration of \u2018long int v\u2019\n   46 |     long v = n;\n  \
    \    |          ^\n/tmp/tmp8_0itkej.cpp:20:10: note: \u2018long int v\u2019 previously\
    \ declared here\n   20 |     long v = n;\n      |          ^\n/tmp/tmp8_0itkej.cpp:47:10:\
    \ error: redeclaration of \u2018long int w\u2019\n   47 |     long w = n;\n  \
    \    |          ^\n/tmp/tmp8_0itkej.cpp:21:10: note: \u2018long int w\u2019 previously\
    \ declared here\n   21 |     long w = n;\n      |          ^\n/tmp/tmp8_0itkej.cpp:48:10:\
    \ error: redeclaration of \u2018long i"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long i = 2;\n    while (i <= n) {\n        while (n % i == 0) {\n       \
    \     factors.push_back(i);\n            n /= i;\n        }\n        i++;\n  \
    \  }\n    if (n != 1) {\n        factors.push_back(n);\n    }\n    return factors;\n\
    }\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2)) ==\
    \ (std::vector<long>({2})));\n    assert(candidate((4)) == (std::vector<long>({2,\
    \ 2})));\n    assert(candidate((8)) == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({3, 19})));\n    assert(candidate((3249)) == (std::vector<long>({3,\
    \ 3, 19, 19})));\n    assert(candidate((185193)) == (std::vector<long>({3, 3,\
    \ 3, 19, 19, 19})));\n    assert(candidate((20577)) == (std::vector<long>({3,\
    \ 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long i = 2;\n    while (i <= n / i) {\n        while (n % i == 0) {\n   \
    \         factors.push_back(i);\n            n /= i;\n        }\n        i++;\n\
    \    }\n    if (n != 1) {\n        factors.push_back(n);\n    }\n    return factors;\n\
    }\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2)) ==\
    \ (std::vector<long>({2})));\n    assert(candidate((4)) == (std::vector<long>({2,\
    \ 2})));\n    assert(candidate((8)) == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({3, 19})));\n    assert(candidate((3249)) == (std::vector<long>({3,\
    \ 3, 19, 19})));\n    assert(candidate((185193)) == (std::vector<long>({3, 3,\
    \ 3, 19, 19, 19})));\n    assert(candidate((20577)) == (std::vector<long>({3,\
    \ 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long i = 2;\n    while (i <= n) {\n        while (n % i == 0) {\n       \
    \     factors.push_back(i);\n            n /= i;\n        }\n        i++;\n  \
    \  }\n    if (n > 1) {\n        factors.push_back(n);\n    }\n    return factors;\n\
    }\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2)) ==\
    \ (std::vector<long>({2})));\n    assert(candidate((4)) == (std::vector<long>({2,\
    \ 2})));\n    assert(candidate((8)) == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({3, 19})));\n    assert(candidate((3249)) == (std::vector<long>({3,\
    \ 3, 19, 19})));\n    assert(candidate((185193)) == (std::vector<long>({3, 3,\
    \ 3, 19, 19, 19})));\n    assert(candidate((20577)) == (std::vector<long>({3,\
    \ 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long i = 2;\n    long factor = 1;\n    while (i <= n) {\n        while (n\
    \ % i == 0) {\n            factor *= i;\n            n /= i;\n        }\n    \
    \    factors.push_back(factor);\n        i++;\n    }\n    return factors;\n}\n\
    int main() {\n    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({2, 2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3,\
    \ 19})));\n    assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n\
    \    assert(candidate((185193)) == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({3, 19, 19, 19})));\n   \
    \ assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n}\n"
  stdout: ''
  stderr: "tmpf3ore4pr: /tmp/tmpf3ore4pr.cpp:29: int main(): Assertion `candidate((4))\
    \ == (std::vector<long>({2, 2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long factor = 1;\n    long i = 2;\n    while (i <= n / factor) {\n      \
    \  while (n % i == 0) {\n            factors.push_back(i);\n            n /= i;\n\
    \        }\n        i++;\n    }\n    factors.push_back(n);\n    return factors;\n\
    }\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2)) ==\
    \ (std::vector<long>({2})));\n    assert(candidate((4)) == (std::vector<long>({2,\
    \ 2})));\n    assert(candidate((8)) == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({3, 19})));\n    assert(candidate((3249)) == (std::vector<long>({3,\
    \ 3, 19, 19})));\n    assert(candidate((185193)) == (std::vector<long>({3, 3,\
    \ 3, 19, 19, 19})));\n    assert(candidate((20577)) == (std::vector<long>({3,\
    \ 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n\
    }\n"
  stdout: ''
  stderr: "tmpg9q8193f: /tmp/tmpg9q8193f.cpp:28: int main(): Assertion `candidate((2))\
    \ == (std::vector<long>({2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long p = n;\n    long q = n;\n    long r = n;\n    long s = n;\n    long\
    \ t = n;\n    long u = n;\n    long v = n;\n    long w = n;\n    long x = n;\n\
    \    long y = n;\n    long z = n;\n    long a = n;\n    long b = n;\n    long\
    \ c = n;\n    long d = n;\n    long e = n;\n    long f = n;\n    long g = n;\n\
    \    long h = n;\n    long i = n;\n    long j = n;\n    long k = n;\n    long\
    \ l = n;\n    long m = n;\n    long n = n;\n    long o = n;\n    long p = n;\n\
    \    long q = n;\n    long r = n;\n    long s = n;\n    long t = n;\n    long\
    \ u = n;\n    long v = n;\n    long w = n;\n    long x = n;\n    long y = n;\n\
    \    long z = n;\n    long a = n;\n    long b = n;\n    long c = n;\n    long\
    \ d = n;\n    long e = n;\n    long f = n;\n    long g = n;\n    long h = n;\n\
    \    long i = n;\n    long j = n;\n    long k = n;\n    long l = n;\n    long\
    \ m = n;\n    long n = n;\n    long o = n;\n    long p = n;\n    long q = n;\n\
    \    long r = n;\n    long s = n;\n    long t = n;\n    long u = n;\n    long\
    \ v = n;\n    long w = n;\n    long x = n;\n    long y = n;\n    long z = n;\n\
    \    long a = n;\n    long b = n;\n    long c = n;\n    long d = n;\n    long\
    \ e = n;\n    long f = n;\n    long g = n;\n    long h = n;\n    long i = n;\n\
    \    long j = n;\n    long k = n;\n    long l = n;\n    long m = n;\n    long\
    \ n = n;\n    long o = n;\n    long p = n;\n    long q = n;\n    long r = n;\n\
    \    long s = n;\n    long t = n;\n    long u = n;\n    long v = n;\n    long\
    \ w = n;\n    long x = n;\n    long y = n;\n    long z = n;\n    long a = n;\n\
    \    long b = n;\n    long c = n;\n    long d = n;\n    long e = n;\n    long\
    \ f = n;\n    long g = n;\n    long h = n;\n    long i = n;\n    long j = n;\n\
    \    long k = n;\n    long l = n;\n\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({2, 2})));\n    assert(candidate((8)) == (std::vector<long>({2,\
    \ 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3, 19})));\n  \
    \  assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({3, 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2,\
    \ 3, 3})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpmymst8z3.cpp: In function \u2018std::vector<long int> factorize(long\
    \ int)\u2019:\n/tmp/tmpmymst8z3.cpp:38:10: error: declaration of \u2018long int\
    \ n\u2019 shadows a parameter\n   38 |     long n = n;\n      |          ^\n/tmp/tmpmymst8z3.cpp:40:10:\
    \ error: redeclaration of \u2018long int p\u2019\n   40 |     long p = n;\n  \
    \    |          ^\n/tmp/tmpmymst8z3.cpp:14:10: note: \u2018long int p\u2019 previously\
    \ declared here\n   14 |     long p = n;\n      |          ^\n/tmp/tmpmymst8z3.cpp:41:10:\
    \ error: redeclaration of \u2018long int q\u2019\n   41 |     long q = n;\n  \
    \    |          ^\n/tmp/tmpmymst8z3.cpp:15:10: note: \u2018long int q\u2019 previously\
    \ declared here\n   15 |     long q = n;\n      |          ^\n/tmp/tmpmymst8z3.cpp:42:10:\
    \ error: redeclaration of \u2018long int r\u2019\n   42 |     long r = n;\n  \
    \    |          ^\n/tmp/tmpmymst8z3.cpp:16:10: note: \u2018long int r\u2019 previously\
    \ declared here\n   16 |     long r = n;\n      |          ^\n/tmp/tmpmymst8z3.cpp:43:10:\
    \ error: redeclaration of \u2018long int s\u2019\n   43 |     long s = n;\n  \
    \    |          ^\n/tmp/tmpmymst8z3.cpp:17:10: note: \u2018long int s\u2019 previously\
    \ declared here\n   17 |     long s = n;\n      |          ^\n/tmp/tmpmymst8z3.cpp:44:10:\
    \ error: redeclaration of \u2018long int t\u2019\n   44 |     long t = n;\n  \
    \    |          ^\n/tmp/tmpmymst8z3.cpp:18:10: note: \u2018long int t\u2019 previously\
    \ declared here\n   18 |     long t = n;\n      |          ^\n/tmp/tmpmymst8z3.cpp:45:10:\
    \ error: redeclaration of \u2018long int u\u2019\n   45 |     long u = n;\n  \
    \    |          ^\n/tmp/tmpmymst8z3.cpp:19:10: note: \u2018long int u\u2019 previously\
    \ declared here\n   19 |     long u = n;\n      |          ^\n/tmp/tmpmymst8z3.cpp:46:10:\
    \ error: redeclaration of \u2018long int v\u2019\n   46 |     long v = n;\n  \
    \    |          ^\n/tmp/tmpmymst8z3.cpp:20:10: note: \u2018long int v\u2019 previously\
    \ declared here\n   20 |     long v = n;\n      |          ^\n/tmp/tmpmymst8z3.cpp:47:10:\
    \ error: redeclaration of \u2018long int w\u2019\n   47 |     long w = n;\n  \
    \    |          ^\n/tmp/tmpmymst8z3.cpp:21:10: note: \u2018long int w\u2019 previously\
    \ declared here\n   21 |     long w = n;\n      |          ^\n/tmp/tmpmymst8z3.cpp:48:10:\
    \ error: redeclaration of \u2018long i"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long i = 2;\n    while (i <= n) {\n        while (n % i == 0) {\n       \
    \     factors.push_back(i);\n            n /= i;\n        }\n        i++;\n  \
    \  }\n    if (n > 1) {\n        factors.push_back(n);\n    }\n    return factors;\n\
    }\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2)) ==\
    \ (std::vector<long>({2})));\n    assert(candidate((4)) == (std::vector<long>({2,\
    \ 2})));\n    assert(candidate((8)) == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({3, 19})));\n    assert(candidate((3249)) == (std::vector<long>({3,\
    \ 3, 19, 19})));\n    assert(candidate((185193)) == (std::vector<long>({3, 3,\
    \ 3, 19, 19, 19})));\n    assert(candidate((20577)) == (std::vector<long>({3,\
    \ 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long p = 1;\n    long q = n;\n    long r = n;\n    long s = n;\n    long\
    \ t = n;\n    long u = n;\n    long v = n;\n    long w = n;\n    long x = n;\n\
    \    long y = n;\n    long z = n;\n    long a = n;\n    long b = n;\n    long\
    \ c = n;\n    long d = n;\n    long e = n;\n    long f = n;\n    long g = n;\n\
    \    long h = n;\n    long i = n;\n    long j = n;\n    long k = n;\n    long\
    \ l = n;\n    long m = n;\n    long n = n;\n    long o = n;\n    long p = n;\n\
    \    long q = n;\n    long r = n;\n    long s = n;\n    long t = n;\n    long\
    \ u = n;\n    long v = n;\n    long w = n;\n    long x = n;\n    long y = n;\n\
    \    long z = n;\n    long a = n;\n    long b = n;\n    long c = n;\n    long\
    \ d = n;\n    long e = n;\n    long f = n;\n    long g = n;\n    long h = n;\n\
    \    long i = n;\n    long j = n;\n    long k = n;\n    long l = n;\n    long\
    \ m = n;\n    long n = n;\n    long o = n;\n    long p = n;\n    long q = n;\n\
    \    long r = n;\n    long s = n;\n    long t = n;\n    long u = n;\n    long\
    \ v = n;\n    long w = n;\n    long x = n;\n    long y = n;\n    long z = n;\n\
    \    long a = n;\n    long b = n;\n    long c = n;\n    long d = n;\n    long\
    \ e = n;\n    long f = n;\n    long g = n;\n    long h = n;\n    long i = n;\n\
    \    long j = n;\n    long k = n;\n    long l = n;\n    long m = n;\n    long\
    \ n = n;\n    long o = n;\n    long p = n;\n    long q = n;\n    long r = n;\n\
    \    long s = n;\n    long t = n;\n    long u = n;\n    long v = n;\n    long\
    \ w = n;\n    long x = n;\n    long y = n;\n    long z = n;\n    long a = n;\n\
    \    long b = n;\n    long c = n;\n    long d = n;\n    long e = n;\n    long\
    \ f = n;\n    long g = n;\n    long h = n;\n    long i = n;\n    long j = n;\n\
    \    long k = n;\n    long l = n;\n\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({2, 2})));\n    assert(candidate((8)) == (std::vector<long>({2,\
    \ 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3, 19})));\n  \
    \  assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({3, 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2,\
    \ 3, 3})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_x2uc048.cpp: In function \u2018std::vector<long int> factorize(long\
    \ int)\u2019:\n/tmp/tmp_x2uc048.cpp:38:10: error: declaration of \u2018long int\
    \ n\u2019 shadows a parameter\n   38 |     long n = n;\n      |          ^\n/tmp/tmp_x2uc048.cpp:40:10:\
    \ error: redeclaration of \u2018long int p\u2019\n   40 |     long p = n;\n  \
    \    |          ^\n/tmp/tmp_x2uc048.cpp:14:10: note: \u2018long int p\u2019 previously\
    \ declared here\n   14 |     long p = 1;\n      |          ^\n/tmp/tmp_x2uc048.cpp:41:10:\
    \ error: redeclaration of \u2018long int q\u2019\n   41 |     long q = n;\n  \
    \    |          ^\n/tmp/tmp_x2uc048.cpp:15:10: note: \u2018long int q\u2019 previously\
    \ declared here\n   15 |     long q = n;\n      |          ^\n/tmp/tmp_x2uc048.cpp:42:10:\
    \ error: redeclaration of \u2018long int r\u2019\n   42 |     long r = n;\n  \
    \    |          ^\n/tmp/tmp_x2uc048.cpp:16:10: note: \u2018long int r\u2019 previously\
    \ declared here\n   16 |     long r = n;\n      |          ^\n/tmp/tmp_x2uc048.cpp:43:10:\
    \ error: redeclaration of \u2018long int s\u2019\n   43 |     long s = n;\n  \
    \    |          ^\n/tmp/tmp_x2uc048.cpp:17:10: note: \u2018long int s\u2019 previously\
    \ declared here\n   17 |     long s = n;\n      |          ^\n/tmp/tmp_x2uc048.cpp:44:10:\
    \ error: redeclaration of \u2018long int t\u2019\n   44 |     long t = n;\n  \
    \    |          ^\n/tmp/tmp_x2uc048.cpp:18:10: note: \u2018long int t\u2019 previously\
    \ declared here\n   18 |     long t = n;\n      |          ^\n/tmp/tmp_x2uc048.cpp:45:10:\
    \ error: redeclaration of \u2018long int u\u2019\n   45 |     long u = n;\n  \
    \    |          ^\n/tmp/tmp_x2uc048.cpp:19:10: note: \u2018long int u\u2019 previously\
    \ declared here\n   19 |     long u = n;\n      |          ^\n/tmp/tmp_x2uc048.cpp:46:10:\
    \ error: redeclaration of \u2018long int v\u2019\n   46 |     long v = n;\n  \
    \    |          ^\n/tmp/tmp_x2uc048.cpp:20:10: note: \u2018long int v\u2019 previously\
    \ declared here\n   20 |     long v = n;\n      |          ^\n/tmp/tmp_x2uc048.cpp:47:10:\
    \ error: redeclaration of \u2018long int w\u2019\n   47 |     long w = n;\n  \
    \    |          ^\n/tmp/tmp_x2uc048.cpp:21:10: note: \u2018long int w\u2019 previously\
    \ declared here\n   21 |     long w = n;\n      |          ^\n/tmp/tmp_x2uc048.cpp:48:10:\
    \ error: redeclaration of \u2018long i"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long p = n;\n    long q = n;\n    long r = n;\n    long s = n;\n    long\
    \ t = n;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n\
    \    long y = 1;\n    long z = 1;\n    long a = 1;\n    long b = 1;\n    long\
    \ c = 1;\n    long d = 1;\n    long e = 1;\n    long f = 1;\n    long g = 1;\n\
    \    long h = 1;\n    long i = 1;\n    long j = 1;\n    long k = 1;\n    long\
    \ l = 1;\n    long m = 1;\n    long n = 1;\n    long o = 1;\n    long p = 1;\n\
    \    long q = 1;\n    long r = 1;\n    long s = 1;\n    long t = 1;\n    long\
    \ u = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n    long y = 1;\n\
    \    long z = 1;\n    long a = 1;\n    long b = 1;\n    long c = 1;\n    long\
    \ d = 1;\n    long e = 1;\n    long f = 1;\n    long g = 1;\n    long h = 1;\n\
    \    long i = 1;\n    long j = 1;\n    long k = 1;\n    long l = 1;\n    long\
    \ m = 1;\n    long n = 1;\n    long o = 1;\n    long p = 1;\n    long q = 1;\n\
    \    long r = 1;\n    long s = 1;\n    long t = 1;\n    long u = 1;\n    long\
    \ v = 1;\n    long w = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n\
    \    long a = 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n    long\
    \ e = 1;\n    long f = 1;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n\
    \    long j = 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n    long\
    \ n = 1;\n    long o = 1;\n    long p = 1;\n    long q = 1;\n    long r = 1;\n\
    \    long s = 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n    long\
    \ w = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n    long a = 1;\n\
    \    long b = 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n    long\
    \ f = 1;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n    long j = 1;\n\
    \    long k = 1;\n    long l = 1;\n\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({2, 2})));\n    assert(candidate((8)) == (std::vector<long>({2,\
    \ 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3, 19})));\n  \
    \  assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({3, 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2,\
    \ 3, 3})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8l_42_j0.cpp: In function \u2018std::vector<long int> factorize(long\
    \ int)\u2019:\n/tmp/tmp8l_42_j0.cpp:38:10: error: declaration of \u2018long int\
    \ n\u2019 shadows a parameter\n   38 |     long n = 1;\n      |          ^\n/tmp/tmp8l_42_j0.cpp:40:10:\
    \ error: redeclaration of \u2018long int p\u2019\n   40 |     long p = 1;\n  \
    \    |          ^\n/tmp/tmp8l_42_j0.cpp:14:10: note: \u2018long int p\u2019 previously\
    \ declared here\n   14 |     long p = n;\n      |          ^\n/tmp/tmp8l_42_j0.cpp:41:10:\
    \ error: redeclaration of \u2018long int q\u2019\n   41 |     long q = 1;\n  \
    \    |          ^\n/tmp/tmp8l_42_j0.cpp:15:10: note: \u2018long int q\u2019 previously\
    \ declared here\n   15 |     long q = n;\n      |          ^\n/tmp/tmp8l_42_j0.cpp:42:10:\
    \ error: redeclaration of \u2018long int r\u2019\n   42 |     long r = 1;\n  \
    \    |          ^\n/tmp/tmp8l_42_j0.cpp:16:10: note: \u2018long int r\u2019 previously\
    \ declared here\n   16 |     long r = n;\n      |          ^\n/tmp/tmp8l_42_j0.cpp:43:10:\
    \ error: redeclaration of \u2018long int s\u2019\n   43 |     long s = 1;\n  \
    \    |          ^\n/tmp/tmp8l_42_j0.cpp:17:10: note: \u2018long int s\u2019 previously\
    \ declared here\n   17 |     long s = n;\n      |          ^\n/tmp/tmp8l_42_j0.cpp:44:10:\
    \ error: redeclaration of \u2018long int t\u2019\n   44 |     long t = 1;\n  \
    \    |          ^\n/tmp/tmp8l_42_j0.cpp:18:10: note: \u2018long int t\u2019 previously\
    \ declared here\n   18 |     long t = n;\n      |          ^\n/tmp/tmp8l_42_j0.cpp:45:10:\
    \ error: redeclaration of \u2018long int u\u2019\n   45 |     long u = 1;\n  \
    \    |          ^\n/tmp/tmp8l_42_j0.cpp:19:10: note: \u2018long int u\u2019 previously\
    \ declared here\n   19 |     long u = 1;\n      |          ^\n/tmp/tmp8l_42_j0.cpp:46:10:\
    \ error: redeclaration of \u2018long int v\u2019\n   46 |     long v = 1;\n  \
    \    |          ^\n/tmp/tmp8l_42_j0.cpp:20:10: note: \u2018long int v\u2019 previously\
    \ declared here\n   20 |     long v = 1;\n      |          ^\n/tmp/tmp8l_42_j0.cpp:47:10:\
    \ error: redeclaration of \u2018long int w\u2019\n   47 |     long w = 1;\n  \
    \    |          ^\n/tmp/tmp8l_42_j0.cpp:21:10: note: \u2018long int w\u2019 previously\
    \ declared here\n   21 |     long w = 1;\n      |          ^\n/tmp/tmp8l_42_j0.cpp:48:10:\
    \ error: redeclaration of \u2018long i"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long factor = 1;\n    long count = 0;\n    long i = 2;\n    while (i <= n)\
    \ {\n        while (n % i == 0) {\n            factors.push_back(i);\n       \
    \     n /= i;\n            count++;\n        }\n        i++;\n    }\n    if (n\
    \ != 1) {\n        factors.push_back(n);\n    }\n    return factors;\n}\nint main()\
    \ {\n    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({2, 2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3,\
    \ 19})));\n    assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n\
    \    assert(candidate((185193)) == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({3, 19, 19, 19})));\n   \
    \ assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long i = 2;\n    while (i <= n) {\n        while (n % i == 0) {\n       \
    \     factors.push_back(i);\n            n /= i;\n        }\n        i++;\n  \
    \  }\n    if (n != 1) {\n        factors.push_back(n);\n    }\n    return factors;\n\
    }\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2)) ==\
    \ (std::vector<long>({2})));\n    assert(candidate((4)) == (std::vector<long>({2,\
    \ 2})));\n    assert(candidate((8)) == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({3, 19})));\n    assert(candidate((3249)) == (std::vector<long>({3,\
    \ 3, 19, 19})));\n    assert(candidate((185193)) == (std::vector<long>({3, 3,\
    \ 3, 19, 19, 19})));\n    assert(candidate((20577)) == (std::vector<long>({3,\
    \ 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long i = 2;\n    while (i < n) {\n        while (n % i == 0) {\n        \
    \    factors.push_back(i);\n            n /= i;\n        }\n        i++;\n   \
    \ }\n    if (n != 1) {\n        factors.push_back(n);\n    }\n    return factors;\n\
    }\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2)) ==\
    \ (std::vector<long>({2})));\n    assert(candidate((4)) == (std::vector<long>({2,\
    \ 2})));\n    assert(candidate((8)) == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({3, 19})));\n    assert(candidate((3249)) == (std::vector<long>({3,\
    \ 3, 19, 19})));\n    assert(candidate((185193)) == (std::vector<long>({3, 3,\
    \ 3, 19, 19, 19})));\n    assert(candidate((20577)) == (std::vector<long>({3,\
    \ 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long i = 2;\n    while (i <= sqrt(n)) {\n        while (n % i == 0) {\n \
    \           factors.push_back(i);\n            n /= i;\n        }\n        i++;\n\
    \    }\n    if (n != 1) {\n        factors.push_back(n);\n    }\n    return factors;\n\
    }\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2)) ==\
    \ (std::vector<long>({2})));\n    assert(candidate((4)) == (std::vector<long>({2,\
    \ 2})));\n    assert(candidate((8)) == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({3, 19})));\n    assert(candidate((3249)) == (std::vector<long>({3,\
    \ 3, 19, 19})));\n    assert(candidate((185193)) == (std::vector<long>({3, 3,\
    \ 3, 19, 19, 19})));\n    assert(candidate((20577)) == (std::vector<long>({3,\
    \ 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long p = 1;\n    long q = n;\n    while (p != q) {\n        while (q % p\
    \ == 0) {\n            factors.push_back(p);\n            q /= p;\n        }\n\
    \        p += 1;\n    }\n    return factors;\n}\nint main() {\n    auto candidate\
    \ = factorize;\n    assert(candidate((2)) == (std::vector<long>({2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({2, 2})));\n    assert(candidate((8)) == (std::vector<long>({2,\
    \ 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3, 19})));\n  \
    \  assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({3, 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2,\
    \ 3, 3})));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long i = 2;\n    long p = n;\n    while (p % i == 0) {\n        factors.push_back(i);\n\
    \        p /= i;\n    }\n    while (p != 1) {\n        factors.push_back(p);\n\
    \        p /= p;\n    }\n    return factors;\n}\nint main() {\n    auto candidate\
    \ = factorize;\n    assert(candidate((2)) == (std::vector<long>({2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({2, 2})));\n    assert(candidate((8)) == (std::vector<long>({2,\
    \ 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3, 19})));\n  \
    \  assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({3, 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2,\
    \ 3, 3})));\n}\n"
  stdout: ''
  stderr: "tmp1b4zhw2r: /tmp/tmp1b4zhw2r.cpp:31: int main(): Assertion `candidate((57))\
    \ == (std::vector<long>({3, 19}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long i = 2;\n    while (i <= sqrt(n)) {\n        while (n % i == 0) {\n \
    \           factors.push_back(i);\n            n /= i;\n        }\n        i++;\n\
    \    }\n    if (n != 1) {\n        factors.push_back(n);\n    }\n    return factors;\n\
    }\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2)) ==\
    \ (std::vector<long>({2})));\n    assert(candidate((4)) == (std::vector<long>({2,\
    \ 2})));\n    assert(candidate((8)) == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({3, 19})));\n    assert(candidate((3249)) == (std::vector<long>({3,\
    \ 3, 19, 19})));\n    assert(candidate((185193)) == (std::vector<long>({3, 3,\
    \ 3, 19, 19, 19})));\n    assert(candidate((20577)) == (std::vector<long>({3,\
    \ 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long i = 2;\n    while (i <= n) {\n        while (n % i == 0) {\n       \
    \     factors.push_back(i);\n            n /= i;\n        }\n        i++;\n  \
    \  }\n    if (n > 1) {\n        factors.push_back(n);\n    }\n    return factors;\n\
    }\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2)) ==\
    \ (std::vector<long>({2})));\n    assert(candidate((4)) == (std::vector<long>({2,\
    \ 2})));\n    assert(candidate((8)) == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({3, 19})));\n    assert(candidate((3249)) == (std::vector<long>({3,\
    \ 3, 19, 19})));\n    assert(candidate((185193)) == (std::vector<long>({3, 3,\
    \ 3, 19, 19, 19})));\n    assert(candidate((20577)) == (std::vector<long>({3,\
    \ 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long i = 2;\n    while (i <= n / i) {\n        while (n % i == 0) {\n   \
    \         factors.push_back(i);\n            n /= i;\n        }\n        i++;\n\
    \    }\n    if (n != 1) {\n        factors.push_back(n);\n    }\n    return factors;\n\
    }\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2)) ==\
    \ (std::vector<long>({2})));\n    assert(candidate((4)) == (std::vector<long>({2,\
    \ 2})));\n    assert(candidate((8)) == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({3, 19})));\n    assert(candidate((3249)) == (std::vector<long>({3,\
    \ 3, 19, 19})));\n    assert(candidate((185193)) == (std::vector<long>({3, 3,\
    \ 3, 19, 19, 19})));\n    assert(candidate((20577)) == (std::vector<long>({3,\
    \ 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long p = n;\n    long q = n;\n    long r = n;\n    long s = n;\n    long\
    \ t = n;\n    long u = n;\n    long v = n;\n    long w = n;\n    long x = n;\n\
    \    long y = n;\n    long z = n;\n    long a = n;\n    long b = n;\n    long\
    \ c = n;\n    long d = n;\n    long e = n;\n    long f = n;\n    long g = n;\n\
    \    long h = n;\n    long i = n;\n    long j = n;\n    long k = n;\n    long\
    \ l = n;\n    long m = n;\n    long n = n;\n    long o = n;\n    long p = n;\n\
    \    long q = n;\n    long r = n;\n    long s = n;\n    long t = n;\n    long\
    \ u = n;\n    long v = n;\n    long w = n;\n    long x = n;\n    long y = n;\n\
    \    long z = n;\n    long a = n;\n    long b = n;\n    long c = n;\n    long\
    \ d = n;\n    long e = n;\n    long f = n;\n    long g = n;\n    long h = n;\n\
    \    long i = n;\n    long j = n;\n    long k = n;\n    long l = n;\n    long\
    \ m = n;\n    long n = n;\n    long o = n;\n    long p = n;\n    long q = n;\n\
    \    long r = n;\n    long s = n;\n    long t = n;\n    long u = n;\n    long\
    \ v = n;\n    long w = n;\n    long x = n;\n    long y = n;\n    long z = n;\n\
    \    long a = n;\n    long b = n;\n    long c = n;\n    long d = n;\n    long\
    \ e = n;\n    long f = n;\n    long g = n;\n    long h = n;\n    long i = n;\n\
    \    long j = n;\n    long k = n;\n    long l = n;\n    long m = n;\n    long\
    \ n = n;\n    long o = n;\n    long p = n;\n    long q = n;\n    long r = n;\n\
    \    long s = n;\n    long t = n;\n    long u = n;\n    long v = n;\n    long\
    \ w = n;\n    long x = n;\n    long y = n;\n    long z = n;\n    long a = n;\n\
    \    long b = n;\n    long c = n;\n    long d = n;\n    long e = n;\n    long\
    \ f = n;\n    long g = n;\n    long h = n;\n    long i = n;\n    long j = n;\n\
    \    long k = n;\n    long l = n;\n\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({2, 2})));\n    assert(candidate((8)) == (std::vector<long>({2,\
    \ 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3, 19})));\n  \
    \  assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({3, 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2,\
    \ 3, 3})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpb46k9wl6.cpp: In function \u2018std::vector<long int> factorize(long\
    \ int)\u2019:\n/tmp/tmpb46k9wl6.cpp:38:10: error: declaration of \u2018long int\
    \ n\u2019 shadows a parameter\n   38 |     long n = n;\n      |          ^\n/tmp/tmpb46k9wl6.cpp:40:10:\
    \ error: redeclaration of \u2018long int p\u2019\n   40 |     long p = n;\n  \
    \    |          ^\n/tmp/tmpb46k9wl6.cpp:14:10: note: \u2018long int p\u2019 previously\
    \ declared here\n   14 |     long p = n;\n      |          ^\n/tmp/tmpb46k9wl6.cpp:41:10:\
    \ error: redeclaration of \u2018long int q\u2019\n   41 |     long q = n;\n  \
    \    |          ^\n/tmp/tmpb46k9wl6.cpp:15:10: note: \u2018long int q\u2019 previously\
    \ declared here\n   15 |     long q = n;\n      |          ^\n/tmp/tmpb46k9wl6.cpp:42:10:\
    \ error: redeclaration of \u2018long int r\u2019\n   42 |     long r = n;\n  \
    \    |          ^\n/tmp/tmpb46k9wl6.cpp:16:10: note: \u2018long int r\u2019 previously\
    \ declared here\n   16 |     long r = n;\n      |          ^\n/tmp/tmpb46k9wl6.cpp:43:10:\
    \ error: redeclaration of \u2018long int s\u2019\n   43 |     long s = n;\n  \
    \    |          ^\n/tmp/tmpb46k9wl6.cpp:17:10: note: \u2018long int s\u2019 previously\
    \ declared here\n   17 |     long s = n;\n      |          ^\n/tmp/tmpb46k9wl6.cpp:44:10:\
    \ error: redeclaration of \u2018long int t\u2019\n   44 |     long t = n;\n  \
    \    |          ^\n/tmp/tmpb46k9wl6.cpp:18:10: note: \u2018long int t\u2019 previously\
    \ declared here\n   18 |     long t = n;\n      |          ^\n/tmp/tmpb46k9wl6.cpp:45:10:\
    \ error: redeclaration of \u2018long int u\u2019\n   45 |     long u = n;\n  \
    \    |          ^\n/tmp/tmpb46k9wl6.cpp:19:10: note: \u2018long int u\u2019 previously\
    \ declared here\n   19 |     long u = n;\n      |          ^\n/tmp/tmpb46k9wl6.cpp:46:10:\
    \ error: redeclaration of \u2018long int v\u2019\n   46 |     long v = n;\n  \
    \    |          ^\n/tmp/tmpb46k9wl6.cpp:20:10: note: \u2018long int v\u2019 previously\
    \ declared here\n   20 |     long v = n;\n      |          ^\n/tmp/tmpb46k9wl6.cpp:47:10:\
    \ error: redeclaration of \u2018long int w\u2019\n   47 |     long w = n;\n  \
    \    |          ^\n/tmp/tmpb46k9wl6.cpp:21:10: note: \u2018long int w\u2019 previously\
    \ declared here\n   21 |     long w = n;\n      |          ^\n/tmp/tmpb46k9wl6.cpp:48:10:\
    \ error: redeclaration of \u2018long i"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long factor = 1;\n    long count = 0;\n    while (n > 1) {\n        if (n\
    \ % factor == 0) {\n            factors.push_back(factor);\n            count++;\n\
    \        }\n        factor *= factor;\n        n /= factor;\n    }\n    factors.push_back(factor);\n\
    \    factors.push_back(count);\n    return factors;\n}\nint main() {\n    auto\
    \ candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({2, 2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3,\
    \ 19})));\n    assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n\
    \    assert(candidate((185193)) == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({3, 19, 19, 19})));\n   \
    \ assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long factor = 1;\n    long count = 0;\n    long i = 2;\n    long j = 1;\n\
    \    while (i * j <= n) {\n        if (n % i == 0) {\n            count += 1;\n\
    \            factor *= i;\n        }\n        if (n % j == 0) {\n            count\
    \ += 1;\n            factor *= j;\n        }\n        i += 2;\n        j += 2;\n\
    \    }\n    factors.push_back(factor);\n    while (count > 0) {\n        factors.push_back(factor);\n\
    \        count -= 1;\n    }\n    return factors;\n}\nint main() {\n    auto candidate\
    \ = factorize;\n    assert(candidate((2)) == (std::vector<long>({2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({2, 2})));\n    assert(candidate((8)) == (std::vector<long>({2,\
    \ 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3, 19})));\n  \
    \  assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({3, 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2,\
    \ 3, 3})));\n}\n"
  stdout: ''
  stderr: "tmptrxg8xxz: /tmp/tmptrxg8xxz.cpp:39: int main(): Assertion `candidate((2))\
    \ == (std::vector<long>({2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long i = 2;\n    long factor = 1;\n    while (i <= n) {\n        while (n\
    \ % i == 0) {\n            factor *= i;\n            n /= i;\n        }\n    \
    \    factors.push_back(factor);\n        ++i;\n    }\n    return factors;\n}\n\
    int main() {\n    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({2, 2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3,\
    \ 19})));\n    assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n\
    \    assert(candidate((185193)) == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({3, 19, 19, 19})));\n   \
    \ assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n}\n"
  stdout: ''
  stderr: "tmpenm9g7qw: /tmp/tmpenm9g7qw.cpp:29: int main(): Assertion `candidate((4))\
    \ == (std::vector<long>({2, 2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long factor = 1;\n    long i = 2;\n    while (i <= sqrt(n)) {\n        while\
    \ (n % i == 0) {\n            factors.push_back(i);\n            n /= i;\n   \
    \     }\n        i++;\n    }\n    if (n != 1) {\n        factors.push_back(n);\n\
    \    }\n    return factors;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({2, 2})));\n    assert(candidate((8)) == (std::vector<long>({2,\
    \ 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3, 19})));\n  \
    \  assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({3, 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2,\
    \ 3, 3})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long p = n;\n    long q = n;\n    long r = n;\n    long s = n;\n    long\
    \ t = n;\n    long u = n;\n    long v = n;\n    long w = n;\n    long x = n;\n\
    \    long y = n;\n    long z = n;\n    long a = n;\n    long b = n;\n    long\
    \ c = n;\n    long d = n;\n    long e = n;\n    long f = n;\n    long g = n;\n\
    \    long h = n;\n    long i = n;\n    long j = n;\n    long k = n;\n    long\
    \ l = n;\n    long m = n;\n    long n = n;\n    long o = n;\n    long p = n;\n\
    \    long q = n;\n    long r = n;\n    long s = n;\n    long t = n;\n    long\
    \ u = n;\n    long v = n;\n    long w = n;\n    long x = n;\n    long y = n;\n\
    \    long z = n;\n    long a = n;\n    long b = n;\n    long c = n;\n    long\
    \ d = n;\n    long e = n;\n    long f = n;\n    long g = n;\n    long h = n;\n\
    \    long i = n;\n    long j = n;\n    long k = n;\n    long l = n;\n    long\
    \ m = n;\n    long n = n;\n    long o = n;\n    long p = n;\n    long q = n;\n\
    \    long r = n;\n    long s = n;\n    long t = n;\n    long u = n;\n    long\
    \ v = n;\n    long w = n;\n    long x = n;\n    long y = n;\n    long z = n;\n\
    \    long a = n;\n    long b = n;\n    long c = n;\n    long d = n;\n    long\
    \ e = n;\n    long f = n;\n    long g = n;\n    long h = n;\n    long i = n;\n\
    \    long j = n;\n    long k = n;\n    long l = n;\n    long m = n;\n    long\
    \ n = n;\n    long o = n;\n    long p = n;\n    long q = n;\n    long r = n;\n\
    \    long s = n;\n    long t = n;\n    long u = n;\n    long v = n;\n    long\
    \ w = n;\n    long x = n;\n    long y = n;\n    long z = n;\n    long a = n;\n\
    \    long b = n;\n    long c = n;\n    long d = n;\n    long e = n;\n    long\
    \ f = n;\n    long g = n;\n    long h = n;\n    long i = n;\n    long j = n;\n\
    \    long k = n;\n    long l = n;\n\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({2, 2})));\n    assert(candidate((8)) == (std::vector<long>({2,\
    \ 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3, 19})));\n  \
    \  assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({3, 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2,\
    \ 3, 3})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp9d3r2gdm.cpp: In function \u2018std::vector<long int> factorize(long\
    \ int)\u2019:\n/tmp/tmp9d3r2gdm.cpp:38:10: error: declaration of \u2018long int\
    \ n\u2019 shadows a parameter\n   38 |     long n = n;\n      |          ^\n/tmp/tmp9d3r2gdm.cpp:40:10:\
    \ error: redeclaration of \u2018long int p\u2019\n   40 |     long p = n;\n  \
    \    |          ^\n/tmp/tmp9d3r2gdm.cpp:14:10: note: \u2018long int p\u2019 previously\
    \ declared here\n   14 |     long p = n;\n      |          ^\n/tmp/tmp9d3r2gdm.cpp:41:10:\
    \ error: redeclaration of \u2018long int q\u2019\n   41 |     long q = n;\n  \
    \    |          ^\n/tmp/tmp9d3r2gdm.cpp:15:10: note: \u2018long int q\u2019 previously\
    \ declared here\n   15 |     long q = n;\n      |          ^\n/tmp/tmp9d3r2gdm.cpp:42:10:\
    \ error: redeclaration of \u2018long int r\u2019\n   42 |     long r = n;\n  \
    \    |          ^\n/tmp/tmp9d3r2gdm.cpp:16:10: note: \u2018long int r\u2019 previously\
    \ declared here\n   16 |     long r = n;\n      |          ^\n/tmp/tmp9d3r2gdm.cpp:43:10:\
    \ error: redeclaration of \u2018long int s\u2019\n   43 |     long s = n;\n  \
    \    |          ^\n/tmp/tmp9d3r2gdm.cpp:17:10: note: \u2018long int s\u2019 previously\
    \ declared here\n   17 |     long s = n;\n      |          ^\n/tmp/tmp9d3r2gdm.cpp:44:10:\
    \ error: redeclaration of \u2018long int t\u2019\n   44 |     long t = n;\n  \
    \    |          ^\n/tmp/tmp9d3r2gdm.cpp:18:10: note: \u2018long int t\u2019 previously\
    \ declared here\n   18 |     long t = n;\n      |          ^\n/tmp/tmp9d3r2gdm.cpp:45:10:\
    \ error: redeclaration of \u2018long int u\u2019\n   45 |     long u = n;\n  \
    \    |          ^\n/tmp/tmp9d3r2gdm.cpp:19:10: note: \u2018long int u\u2019 previously\
    \ declared here\n   19 |     long u = n;\n      |          ^\n/tmp/tmp9d3r2gdm.cpp:46:10:\
    \ error: redeclaration of \u2018long int v\u2019\n   46 |     long v = n;\n  \
    \    |          ^\n/tmp/tmp9d3r2gdm.cpp:20:10: note: \u2018long int v\u2019 previously\
    \ declared here\n   20 |     long v = n;\n      |          ^\n/tmp/tmp9d3r2gdm.cpp:47:10:\
    \ error: redeclaration of \u2018long int w\u2019\n   47 |     long w = n;\n  \
    \    |          ^\n/tmp/tmp9d3r2gdm.cpp:21:10: note: \u2018long int w\u2019 previously\
    \ declared here\n   21 |     long w = n;\n      |          ^\n/tmp/tmp9d3r2gdm.cpp:48:10:\
    \ error: redeclaration of \u2018long i"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long factor = 1;\n    long i = 2;\n    while (i <= n) {\n        while (n\
    \ % i == 0) {\n            factors.push_back(i);\n            n /= i;\n      \
    \  }\n        i++;\n    }\n    if (n != 1) {\n        factors.push_back(n);\n\
    \    }\n    return factors;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({2, 2})));\n    assert(candidate((8)) == (std::vector<long>({2,\
    \ 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3, 19})));\n  \
    \  assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({3, 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2,\
    \ 3, 3})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long i = 2;\n    while (i <= n) {\n        while (n % i == 0) {\n       \
    \     factors.push_back(i);\n            n /= i;\n        }\n        i++;\n  \
    \  }\n    if (n > 1) {\n        factors.push_back(n);\n    }\n    return factors;\n\
    }\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2)) ==\
    \ (std::vector<long>({2})));\n    assert(candidate((4)) == (std::vector<long>({2,\
    \ 2})));\n    assert(candidate((8)) == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({3, 19})));\n    assert(candidate((3249)) == (std::vector<long>({3,\
    \ 3, 19, 19})));\n    assert(candidate((185193)) == (std::vector<long>({3, 3,\
    \ 3, 19, 19, 19})));\n    assert(candidate((20577)) == (std::vector<long>({3,\
    \ 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long i = 2;\n    while (i <= n) {\n        while (n % i == 0) {\n       \
    \     factors.push_back(i);\n            n /= i;\n        }\n        i++;\n  \
    \  }\n    if (n > 1) {\n        factors.push_back(n);\n    }\n    return factors;\n\
    }\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2)) ==\
    \ (std::vector<long>({2})));\n    assert(candidate((4)) == (std::vector<long>({2,\
    \ 2})));\n    assert(candidate((8)) == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({3, 19})));\n    assert(candidate((3249)) == (std::vector<long>({3,\
    \ 3, 19, 19})));\n    assert(candidate((185193)) == (std::vector<long>({3, 3,\
    \ 3, 19, 19, 19})));\n    assert(candidate((20577)) == (std::vector<long>({3,\
    \ 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long factor = 1;\n    long i = 2;\n    long counter = 1;\n    while (i <=\
    \ n / factor) {\n        while (n % i == 0) {\n            factors.push_back(factor);\n\
    \            n /= i;\n            counter++;\n        }\n        i++;\n    }\n\
    \    if (n != 1) {\n        factors.push_back(factor);\n    }\n    return factors;\n\
    }\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2)) ==\
    \ (std::vector<long>({2})));\n    assert(candidate((4)) == (std::vector<long>({2,\
    \ 2})));\n    assert(candidate((8)) == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({3, 19})));\n    assert(candidate((3249)) == (std::vector<long>({3,\
    \ 3, 19, 19})));\n    assert(candidate((185193)) == (std::vector<long>({3, 3,\
    \ 3, 19, 19, 19})));\n    assert(candidate((20577)) == (std::vector<long>({3,\
    \ 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n\
    }\n"
  stdout: ''
  stderr: "tmp55vhckv7: /tmp/tmp55vhckv7.cpp:32: int main(): Assertion `candidate((2))\
    \ == (std::vector<long>({2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long factor = 1;\n    long counter = 1;\n    long i = 2;\n    while (i <=\
    \ n / factor) {\n        while (n % i == 0) {\n            factors.push_back(factor);\n\
    \            n /= i;\n            counter++;\n        }\n        i++;\n      \
    \  factor++;\n    }\n    if (n != 1) {\n        factors.push_back(factor);\n \
    \   }\n    return factors;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({2, 2})));\n    assert(candidate((8)) == (std::vector<long>({2,\
    \ 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3, 19})));\n  \
    \  assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({3, 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2,\
    \ 3, 3})));\n}\n"
  stdout: ''
  stderr: "tmpzjqz4uxe: /tmp/tmpzjqz4uxe.cpp:33: int main(): Assertion `candidate((2))\
    \ == (std::vector<long>({2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long factor = 1;\n    long i = 2;\n    while (i <= n / factor) {\n      \
    \  while (n % i == 0) {\n            factors.push_back(i);\n            n /= i;\n\
    \        }\n        i++;\n    }\n    if (n != 1) {\n        factors.push_back(n);\n\
    \    }\n    return factors;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({2, 2})));\n    assert(candidate((8)) == (std::vector<long>({2,\
    \ 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3, 19})));\n  \
    \  assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({3, 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2,\
    \ 3, 3})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long p = n;\n    long q = n;\n    long r = n;\n    long s = n;\n    long\
    \ t = n;\n    long u = n;\n    long v = n;\n    long w = n;\n    long x = n;\n\
    \    long y = n;\n    long z = n;\n    long a = n;\n    long b = n;\n    long\
    \ c = n;\n    long d = n;\n    long e = n;\n    long f = n;\n    long g = n;\n\
    \    long h = n;\n    long i = n;\n    long j = n;\n    long k = n;\n    long\
    \ l = n;\n    long m = n;\n    long n = n;\n    long o = n;\n    long p = n;\n\
    \    long q = n;\n    long r = n;\n    long s = n;\n    long t = n;\n    long\
    \ u = n;\n    long v = n;\n    long w = n;\n    long x = n;\n    long y = n;\n\
    \    long z = n;\n    long a = n;\n    long b = n;\n    long c = n;\n    long\
    \ d = n;\n    long e = n;\n    long f = n;\n    long g = n;\n    long h = n;\n\
    \    long i = n;\n    long j = n;\n    long k = n;\n    long l = n;\n    long\
    \ m = n;\n    long n = n;\n    long o = n;\n    long p = n;\n    long q = n;\n\
    \    long r = n;\n    long s = n;\n    long t = n;\n    long u = n;\n    long\
    \ v = n;\n    long w = n;\n    long x = n;\n    long y = n;\n    long z = n;\n\
    \    long a = n;\n    long b = n;\n    long c = n;\n    long d = n;\n    long\
    \ e = n;\n    long f = n;\n    long g = n;\n    long h = n;\n    long i = n;\n\
    \    long j = n;\n    long k = n;\n    long l = n;\n    long m = n;\n    long\
    \ n = n;\n    long o = n;\n    long p = n;\n    long q = n;\n    long r = n;\n\
    \    long s = n;\n    long t = n;\n    long u = n;\n    long v = n;\n    long\
    \ w = n;\n    long x = n;\n    long y = n;\n    long z = n;\n    long a = n;\n\
    \    long b = n;\n    long c = n;\n    long d = n;\n    long e = n;\n    long\
    \ f = n;\n    long g = n;\n    long h = n;\n    long i = n;\n    long j = n;\n\
    \    long k = n;\n    long l = n;\n\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({2, 2})));\n    assert(candidate((8)) == (std::vector<long>({2,\
    \ 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3, 19})));\n  \
    \  assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({3, 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2,\
    \ 3, 3})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp832obblr.cpp: In function \u2018std::vector<long int> factorize(long\
    \ int)\u2019:\n/tmp/tmp832obblr.cpp:38:10: error: declaration of \u2018long int\
    \ n\u2019 shadows a parameter\n   38 |     long n = n;\n      |          ^\n/tmp/tmp832obblr.cpp:40:10:\
    \ error: redeclaration of \u2018long int p\u2019\n   40 |     long p = n;\n  \
    \    |          ^\n/tmp/tmp832obblr.cpp:14:10: note: \u2018long int p\u2019 previously\
    \ declared here\n   14 |     long p = n;\n      |          ^\n/tmp/tmp832obblr.cpp:41:10:\
    \ error: redeclaration of \u2018long int q\u2019\n   41 |     long q = n;\n  \
    \    |          ^\n/tmp/tmp832obblr.cpp:15:10: note: \u2018long int q\u2019 previously\
    \ declared here\n   15 |     long q = n;\n      |          ^\n/tmp/tmp832obblr.cpp:42:10:\
    \ error: redeclaration of \u2018long int r\u2019\n   42 |     long r = n;\n  \
    \    |          ^\n/tmp/tmp832obblr.cpp:16:10: note: \u2018long int r\u2019 previously\
    \ declared here\n   16 |     long r = n;\n      |          ^\n/tmp/tmp832obblr.cpp:43:10:\
    \ error: redeclaration of \u2018long int s\u2019\n   43 |     long s = n;\n  \
    \    |          ^\n/tmp/tmp832obblr.cpp:17:10: note: \u2018long int s\u2019 previously\
    \ declared here\n   17 |     long s = n;\n      |          ^\n/tmp/tmp832obblr.cpp:44:10:\
    \ error: redeclaration of \u2018long int t\u2019\n   44 |     long t = n;\n  \
    \    |          ^\n/tmp/tmp832obblr.cpp:18:10: note: \u2018long int t\u2019 previously\
    \ declared here\n   18 |     long t = n;\n      |          ^\n/tmp/tmp832obblr.cpp:45:10:\
    \ error: redeclaration of \u2018long int u\u2019\n   45 |     long u = n;\n  \
    \    |          ^\n/tmp/tmp832obblr.cpp:19:10: note: \u2018long int u\u2019 previously\
    \ declared here\n   19 |     long u = n;\n      |          ^\n/tmp/tmp832obblr.cpp:46:10:\
    \ error: redeclaration of \u2018long int v\u2019\n   46 |     long v = n;\n  \
    \    |          ^\n/tmp/tmp832obblr.cpp:20:10: note: \u2018long int v\u2019 previously\
    \ declared here\n   20 |     long v = n;\n      |          ^\n/tmp/tmp832obblr.cpp:47:10:\
    \ error: redeclaration of \u2018long int w\u2019\n   47 |     long w = n;\n  \
    \    |          ^\n/tmp/tmp832obblr.cpp:21:10: note: \u2018long int w\u2019 previously\
    \ declared here\n   21 |     long w = n;\n      |          ^\n/tmp/tmp832obblr.cpp:48:10:\
    \ error: redeclaration of \u2018long i"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long i = 2;\n    long p = 1;\n    while (i <= n) {\n        if (n % i ==\
    \ 0) {\n            factors.push_back(i);\n            while (n % i == 0) {\n\
    \                n /= i;\n                factors.push_back(i);\n            }\n\
    \        }\n        i++;\n    }\n    if (n > 1) {\n        factors.push_back(n);\n\
    \    }\n    return factors;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({2, 2})));\n    assert(candidate((8)) == (std::vector<long>({2,\
    \ 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3, 19})));\n  \
    \  assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({3, 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2,\
    \ 3, 3})));\n}\n"
  stdout: ''
  stderr: "tmpfvb3vo6s: /tmp/tmpfvb3vo6s.cpp:33: int main(): Assertion `candidate((2))\
    \ == (std::vector<long>({2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long factor = 1;\n    long count = 0;\n    long i = 2;\n    while (i <= n\
    \ / factor) {\n        while (n % i == 0) {\n            factors.push_back(factor);\n\
    \            n /= i;\n            count++;\n        }\n        i++;\n    }\n \
    \   factors.push_back(factor);\n    factors.push_back(count);\n    return factors;\n\
    }\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2)) ==\
    \ (std::vector<long>({2})));\n    assert(candidate((4)) == (std::vector<long>({2,\
    \ 2})));\n    assert(candidate((8)) == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({3, 19})));\n    assert(candidate((3249)) == (std::vector<long>({3,\
    \ 3, 19, 19})));\n    assert(candidate((185193)) == (std::vector<long>({3, 3,\
    \ 3, 19, 19, 19})));\n    assert(candidate((20577)) == (std::vector<long>({3,\
    \ 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n\
    }\n"
  stdout: ''
  stderr: "tmp29vf11su: /tmp/tmp29vf11su.cpp:31: int main(): Assertion `candidate((2))\
    \ == (std::vector<long>({2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long factor = 1;\n    long i = 2;\n    while (i <= n / factor) {\n      \
    \  while (n % i == 0) {\n            factors.push_back(i);\n            n /= i;\n\
    \        }\n        i++;\n    }\n    factors.push_back(n);\n    return factors;\n\
    }\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2)) ==\
    \ (std::vector<long>({2})));\n    assert(candidate((4)) == (std::vector<long>({2,\
    \ 2})));\n    assert(candidate((8)) == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({3, 19})));\n    assert(candidate((3249)) == (std::vector<long>({3,\
    \ 3, 19, 19})));\n    assert(candidate((185193)) == (std::vector<long>({3, 3,\
    \ 3, 19, 19, 19})));\n    assert(candidate((20577)) == (std::vector<long>({3,\
    \ 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n\
    }\n"
  stdout: ''
  stderr: "tmp5ky8dple: /tmp/tmp5ky8dple.cpp:28: int main(): Assertion `candidate((2))\
    \ == (std::vector<long>({2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long p = 1;\n    long q = 1;\n    long r = 1;\n    long m = 1;\n    long\
    \ t = 1;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n\
    \    long y = 1;\n    long z = 1;\n    long a = 1;\n    long b = 1;\n    long\
    \ c = 1;\n    long d = 1;\n    long e = 1;\n    long f = 1;\n    long g = 1;\n\
    \    long h = 1;\n    long i = 1;\n    long j = 1;\n    long k = 1;\n    long\
    \ l = 1;\n    long m = 1;\n    long n = 1;\n    long o = 1;\n    long p = 1;\n\
    \    long q = 1;\n    long r = 1;\n    long s = 1;\n    long t = 1;\n    long\
    \ u = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n    long y = 1;\n\
    \    long z = 1;\n    long a = 1;\n    long b = 1;\n    long c = 1;\n    long\
    \ d = 1;\n    long e = 1;\n    long f = 1;\n    long g = 1;\n    long h = 1;\n\
    \    long i = 1;\n    long j = 1;\n    long k = 1;\n    long l = 1;\n    long\
    \ m = 1;\n    long n = 1;\n    long o = 1;\n    long p = 1;\n    long q = 1;\n\
    \    long r = 1;\n    long s = 1;\n    long t = 1;\n    long u = 1;\n    long\
    \ v = 1;\n    long w = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n\
    \    long a = 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n    long\
    \ e = 1;\n    long f = 1;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n\
    \    long j = 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n    long\
    \ n = 1;\n    long o = 1;\n    long p = 1;\n    long q = 1;\n    long r = 1;\n\
    \    long s = 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n    long\
    \ w = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n    long a = 1;\n\
    \    long b = 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n    long\
    \ f = 1;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n    long j = 1;\n\
    \    long k = 1;\n    long l = 1;\n\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({2, 2})));\n    assert(candidate((8)) == (std::vector<long>({2,\
    \ 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3, 19})));\n  \
    \  assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({3, 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2,\
    \ 3, 3})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpk3lj3gte.cpp: In function \u2018std::vector<long int> factorize(long\
    \ int)\u2019:\n/tmp/tmpk3lj3gte.cpp:37:10: error: redeclaration of \u2018long\
    \ int m\u2019\n   37 |     long m = 1;\n      |          ^\n/tmp/tmpk3lj3gte.cpp:17:10:\
    \ note: \u2018long int m\u2019 previously declared here\n   17 |     long m =\
    \ 1;\n      |          ^\n/tmp/tmpk3lj3gte.cpp:38:10: error: declaration of \u2018\
    long int n\u2019 shadows a parameter\n   38 |     long n = 1;\n      |       \
    \   ^\n/tmp/tmpk3lj3gte.cpp:40:10: error: redeclaration of \u2018long int p\u2019\
    \n   40 |     long p = 1;\n      |          ^\n/tmp/tmpk3lj3gte.cpp:14:10: note:\
    \ \u2018long int p\u2019 previously declared here\n   14 |     long p = 1;\n \
    \     |          ^\n/tmp/tmpk3lj3gte.cpp:41:10: error: redeclaration of \u2018\
    long int q\u2019\n   41 |     long q = 1;\n      |          ^\n/tmp/tmpk3lj3gte.cpp:15:10:\
    \ note: \u2018long int q\u2019 previously declared here\n   15 |     long q =\
    \ 1;\n      |          ^\n/tmp/tmpk3lj3gte.cpp:42:10: error: redeclaration of\
    \ \u2018long int r\u2019\n   42 |     long r = 1;\n      |          ^\n/tmp/tmpk3lj3gte.cpp:16:10:\
    \ note: \u2018long int r\u2019 previously declared here\n   16 |     long r =\
    \ 1;\n      |          ^\n/tmp/tmpk3lj3gte.cpp:44:10: error: redeclaration of\
    \ \u2018long int t\u2019\n   44 |     long t = 1;\n      |          ^\n/tmp/tmpk3lj3gte.cpp:18:10:\
    \ note: \u2018long int t\u2019 previously declared here\n   18 |     long t =\
    \ 1;\n      |          ^\n/tmp/tmpk3lj3gte.cpp:45:10: error: redeclaration of\
    \ \u2018long int u\u2019\n   45 |     long u = 1;\n      |          ^\n/tmp/tmpk3lj3gte.cpp:19:10:\
    \ note: \u2018long int u\u2019 previously declared here\n   19 |     long u =\
    \ 1;\n      |          ^\n/tmp/tmpk3lj3gte.cpp:46:10: error: redeclaration of\
    \ \u2018long int v\u2019\n   46 |     long v = 1;\n      |          ^\n/tmp/tmpk3lj3gte.cpp:20:10:\
    \ note: \u2018long int v\u2019 previously declared here\n   20 |     long v =\
    \ 1;\n      |          ^\n/tmp/tmpk3lj3gte.cpp:47:10: error: redeclaration of\
    \ \u2018long int w\u2019\n   47 |     long w = 1;\n      |          ^\n/tmp/tmpk3lj3gte.cpp:21:10:\
    \ note: \u2018long int w\u2019 previously declared here\n   21 |     long w =\
    \ 1;\n      |          ^\n/tmp/tmpk3lj3gte.cpp:48:10: error: redeclaration of\
    \ \u2018long i"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long i = 2;\n    long p = n;\n    while (p % i == 0) {\n        factors.push_back(i);\n\
    \        p /= i;\n    }\n    while (p != 1) {\n        factors.push_back(p);\n\
    \        p /= p;\n    }\n    return factors;\n}\nint main() {\n    auto candidate\
    \ = factorize;\n    assert(candidate((2)) == (std::vector<long>({2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({2, 2})));\n    assert(candidate((8)) == (std::vector<long>({2,\
    \ 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3, 19})));\n  \
    \  assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({3, 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2,\
    \ 3, 3})));\n}\n"
  stdout: ''
  stderr: "tmpmg0joz0u: /tmp/tmpmg0joz0u.cpp:31: int main(): Assertion `candidate((57))\
    \ == (std::vector<long>({3, 19}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long factor = 1;\n    long count = 1;\n    while (n > 1) {\n        while\
    \ (n % factor == 0) {\n            factors.push_back(factor);\n            n /=\
    \ factor;\n            count++;\n        }\n        factor *= 2;\n    }\n    factors.push_back(factor);\n\
    \    factors.push_back(count);\n    return factors;\n}\nint main() {\n    auto\
    \ candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({2, 2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3,\
    \ 19})));\n    assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n\
    \    assert(candidate((185193)) == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({3, 19, 19, 19})));\n   \
    \ assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long i = 2;\n    while (i <= n) {\n        while (n % i == 0) {\n       \
    \     factors.push_back(i);\n            n /= i;\n        }\n        i++;\n  \
    \  }\n    if (n != 1) {\n        factors.push_back(n);\n    }\n    return factors;\n\
    }\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2)) ==\
    \ (std::vector<long>({2})));\n    assert(candidate((4)) == (std::vector<long>({2,\
    \ 2})));\n    assert(candidate((8)) == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({3, 19})));\n    assert(candidate((3249)) == (std::vector<long>({3,\
    \ 3, 19, 19})));\n    assert(candidate((185193)) == (std::vector<long>({3, 3,\
    \ 3, 19, 19, 19})));\n    assert(candidate((20577)) == (std::vector<long>({3,\
    \ 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long i = 2;\n    while (i <= sqrt(n)) {\n        while (n % i == 0) {\n \
    \           factors.push_back(i);\n            n /= i;\n        }\n        i++;\n\
    \    }\n    if (n > 1) {\n        factors.push_back(n);\n    }\n    return factors;\n\
    }\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2)) ==\
    \ (std::vector<long>({2})));\n    assert(candidate((4)) == (std::vector<long>({2,\
    \ 2})));\n    assert(candidate((8)) == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({3, 19})));\n    assert(candidate((3249)) == (std::vector<long>({3,\
    \ 3, 19, 19})));\n    assert(candidate((185193)) == (std::vector<long>({3, 3,\
    \ 3, 19, 19, 19})));\n    assert(candidate((20577)) == (std::vector<long>({3,\
    \ 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long p = n;\n    long q = n;\n    long r = n;\n    long s = n;\n    long\
    \ t = n;\n    long u = n;\n    long v = n;\n    long w = n;\n    long x = n;\n\
    \    long y = n;\n    long z = n;\n    long a = n;\n    long b = n;\n    long\
    \ c = n;\n    long d = n;\n    long e = n;\n    long f = n;\n    long g = n;\n\
    \    long h = n;\n    long i = n;\n    long j = n;\n    long k = n;\n    long\
    \ l = n;\n    long m = n;\n    long n = n;\n    long o = n;\n    long p = n;\n\
    \    long q = n;\n    long r = n;\n    long s = n;\n    long t = n;\n    long\
    \ u = n;\n    long v = n;\n    long w = n;\n    long x = n;\n    long y = n;\n\
    \    long z = n;\n    long a = n;\n    long b = n;\n    long c = n;\n    long\
    \ d = n;\n    long e = n;\n    long f = n;\n    long g = n;\n    long h = n;\n\
    \    long i = n;\n    long j = n;\n    long k = n;\n    long l = n;\n    long\
    \ m = n;\n    long n = n;\n    long o = n;\n    long p = n;\n    long q = n;\n\
    \    long r = n;\n    long s = n;\n    long t = n;\n    long u = n;\n    long\
    \ v = n;\n    long w = n;\n    long x = n;\n    long y = n;\n    long z = n;\n\
    \    long a = n;\n    long b = n;\n    long c = n;\n    long d = n;\n    long\
    \ e = n;\n    long f = n;\n    long g = n;\n    long h = n;\n    long i = n;\n\
    \    long j = n;\n    long k = n;\n    long l = n;\n    long m = n;\n    long\
    \ n = n;\n    long o = n;\n    long p = n;\n    long q = n;\n    long r = n;\n\
    \    long s = n;\n    long t = n;\n    long u = n;\n    long v = n;\n    long\
    \ w = n;\n    long x = n;\n    long y = n;\n    long z = n;\n    long a = n;\n\
    \    long b = n;\n    long c = n;\n    long d = n;\n    long e = n;\n    long\
    \ f = n;\n    long g = n;\n    long h = n;\n    long i = n;\n    long j = n;\n\
    \    long k = n;\n    long l = n;\n\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({2, 2})));\n    assert(candidate((8)) == (std::vector<long>({2,\
    \ 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3, 19})));\n  \
    \  assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({3, 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2,\
    \ 3, 3})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2jezfx84.cpp: In function \u2018std::vector<long int> factorize(long\
    \ int)\u2019:\n/tmp/tmp2jezfx84.cpp:38:10: error: declaration of \u2018long int\
    \ n\u2019 shadows a parameter\n   38 |     long n = n;\n      |          ^\n/tmp/tmp2jezfx84.cpp:40:10:\
    \ error: redeclaration of \u2018long int p\u2019\n   40 |     long p = n;\n  \
    \    |          ^\n/tmp/tmp2jezfx84.cpp:14:10: note: \u2018long int p\u2019 previously\
    \ declared here\n   14 |     long p = n;\n      |          ^\n/tmp/tmp2jezfx84.cpp:41:10:\
    \ error: redeclaration of \u2018long int q\u2019\n   41 |     long q = n;\n  \
    \    |          ^\n/tmp/tmp2jezfx84.cpp:15:10: note: \u2018long int q\u2019 previously\
    \ declared here\n   15 |     long q = n;\n      |          ^\n/tmp/tmp2jezfx84.cpp:42:10:\
    \ error: redeclaration of \u2018long int r\u2019\n   42 |     long r = n;\n  \
    \    |          ^\n/tmp/tmp2jezfx84.cpp:16:10: note: \u2018long int r\u2019 previously\
    \ declared here\n   16 |     long r = n;\n      |          ^\n/tmp/tmp2jezfx84.cpp:43:10:\
    \ error: redeclaration of \u2018long int s\u2019\n   43 |     long s = n;\n  \
    \    |          ^\n/tmp/tmp2jezfx84.cpp:17:10: note: \u2018long int s\u2019 previously\
    \ declared here\n   17 |     long s = n;\n      |          ^\n/tmp/tmp2jezfx84.cpp:44:10:\
    \ error: redeclaration of \u2018long int t\u2019\n   44 |     long t = n;\n  \
    \    |          ^\n/tmp/tmp2jezfx84.cpp:18:10: note: \u2018long int t\u2019 previously\
    \ declared here\n   18 |     long t = n;\n      |          ^\n/tmp/tmp2jezfx84.cpp:45:10:\
    \ error: redeclaration of \u2018long int u\u2019\n   45 |     long u = n;\n  \
    \    |          ^\n/tmp/tmp2jezfx84.cpp:19:10: note: \u2018long int u\u2019 previously\
    \ declared here\n   19 |     long u = n;\n      |          ^\n/tmp/tmp2jezfx84.cpp:46:10:\
    \ error: redeclaration of \u2018long int v\u2019\n   46 |     long v = n;\n  \
    \    |          ^\n/tmp/tmp2jezfx84.cpp:20:10: note: \u2018long int v\u2019 previously\
    \ declared here\n   20 |     long v = n;\n      |          ^\n/tmp/tmp2jezfx84.cpp:47:10:\
    \ error: redeclaration of \u2018long int w\u2019\n   47 |     long w = n;\n  \
    \    |          ^\n/tmp/tmp2jezfx84.cpp:21:10: note: \u2018long int w\u2019 previously\
    \ declared here\n   21 |     long w = n;\n      |          ^\n/tmp/tmp2jezfx84.cpp:48:10:\
    \ error: redeclaration of \u2018long i"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long i = 2;\n    while (i <= n) {\n        while (n % i == 0) {\n       \
    \     factors.push_back(i);\n            n /= i;\n        }\n        i++;\n  \
    \  }\n    if (n != 1) {\n        factors.push_back(n);\n    }\n    return factors;\n\
    }\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2)) ==\
    \ (std::vector<long>({2})));\n    assert(candidate((4)) == (std::vector<long>({2,\
    \ 2})));\n    assert(candidate((8)) == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({3, 19})));\n    assert(candidate((3249)) == (std::vector<long>({3,\
    \ 3, 19, 19})));\n    assert(candidate((185193)) == (std::vector<long>({3, 3,\
    \ 3, 19, 19, 19})));\n    assert(candidate((20577)) == (std::vector<long>({3,\
    \ 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long i = 2;\n    while (i <= n) {\n        while (n % i == 0) {\n       \
    \     factors.push_back(i);\n            n /= i;\n        }\n        i++;\n  \
    \  }\n    if (n > 1) {\n        factors.push_back(n);\n    }\n    return factors;\n\
    }\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2)) ==\
    \ (std::vector<long>({2})));\n    assert(candidate((4)) == (std::vector<long>({2,\
    \ 2})));\n    assert(candidate((8)) == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({3, 19})));\n    assert(candidate((3249)) == (std::vector<long>({3,\
    \ 3, 19, 19})));\n    assert(candidate((185193)) == (std::vector<long>({3, 3,\
    \ 3, 19, 19, 19})));\n    assert(candidate((20577)) == (std::vector<long>({3,\
    \ 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long p = n;\n    long q = n;\n    long r = n;\n    long s = n;\n    long\
    \ t = n;\n    long u = n;\n    long v = n;\n    long w = n;\n    long x = n;\n\
    \    long y = n;\n    long z = n;\n    long a = n;\n    long b = n;\n    long\
    \ c = n;\n    long d = n;\n    long e = n;\n    long f = n;\n    long g = n;\n\
    \    long h = n;\n    long i = n;\n    long j = n;\n    long k = n;\n    long\
    \ l = n;\n    long m = n;\n    long n = n;\n    long o = n;\n    long p = n;\n\
    \    long q = n;\n    long r = n;\n    long s = n;\n    long t = n;\n    long\
    \ u = n;\n    long v = n;\n    long w = n;\n    long x = n;\n    long y = n;\n\
    \    long z = n;\n    long a = n;\n    long b = n;\n    long c = n;\n    long\
    \ d = n;\n    long e = n;\n    long f = n;\n    long g = n;\n    long h = n;\n\
    \    long i = n;\n    long j = n;\n    long k = n;\n    long l = n;\n    long\
    \ m = n;\n    long n = n;\n    long o = n;\n    long p = n;\n    long q = n;\n\
    \    long r = n;\n    long s = n;\n    long t = n;\n    long u = n;\n    long\
    \ v = n;\n    long w = n;\n    long x = n;\n    long y = n;\n    long z = n;\n\
    \    long a = n;\n    long b = n;\n    long c = n;\n    long d = n;\n    long\
    \ e = n;\n    long f = n;\n    long g = n;\n    long h = n;\n    long i = n;\n\
    \    long j = n;\n    long k = n;\n    long l = n;\n    long m = n;\n    long\
    \ n = n;\n    long o = n;\n    long p = n;\n    long q = n;\n    long r = n;\n\
    \    long s = n;\n    long t = n;\n    long u = n;\n    long v = n;\n    long\
    \ w = n;\n    long x = n;\n    long y = n;\n    long z = n;\n    long a = n;\n\
    \    long b = n;\n    long c = n;\n    long d = n;\n    long e = n;\n    long\
    \ f = n;\n    long g = n;\n    long h = n;\n    long i = n;\n    long j = n;\n\
    \    long k = n;\n    long l = n;\n\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({2, 2})));\n    assert(candidate((8)) == (std::vector<long>({2,\
    \ 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3, 19})));\n  \
    \  assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({3, 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2,\
    \ 3, 3})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpr4lieug9.cpp: In function \u2018std::vector<long int> factorize(long\
    \ int)\u2019:\n/tmp/tmpr4lieug9.cpp:38:10: error: declaration of \u2018long int\
    \ n\u2019 shadows a parameter\n   38 |     long n = n;\n      |          ^\n/tmp/tmpr4lieug9.cpp:40:10:\
    \ error: redeclaration of \u2018long int p\u2019\n   40 |     long p = n;\n  \
    \    |          ^\n/tmp/tmpr4lieug9.cpp:14:10: note: \u2018long int p\u2019 previously\
    \ declared here\n   14 |     long p = n;\n      |          ^\n/tmp/tmpr4lieug9.cpp:41:10:\
    \ error: redeclaration of \u2018long int q\u2019\n   41 |     long q = n;\n  \
    \    |          ^\n/tmp/tmpr4lieug9.cpp:15:10: note: \u2018long int q\u2019 previously\
    \ declared here\n   15 |     long q = n;\n      |          ^\n/tmp/tmpr4lieug9.cpp:42:10:\
    \ error: redeclaration of \u2018long int r\u2019\n   42 |     long r = n;\n  \
    \    |          ^\n/tmp/tmpr4lieug9.cpp:16:10: note: \u2018long int r\u2019 previously\
    \ declared here\n   16 |     long r = n;\n      |          ^\n/tmp/tmpr4lieug9.cpp:43:10:\
    \ error: redeclaration of \u2018long int s\u2019\n   43 |     long s = n;\n  \
    \    |          ^\n/tmp/tmpr4lieug9.cpp:17:10: note: \u2018long int s\u2019 previously\
    \ declared here\n   17 |     long s = n;\n      |          ^\n/tmp/tmpr4lieug9.cpp:44:10:\
    \ error: redeclaration of \u2018long int t\u2019\n   44 |     long t = n;\n  \
    \    |          ^\n/tmp/tmpr4lieug9.cpp:18:10: note: \u2018long int t\u2019 previously\
    \ declared here\n   18 |     long t = n;\n      |          ^\n/tmp/tmpr4lieug9.cpp:45:10:\
    \ error: redeclaration of \u2018long int u\u2019\n   45 |     long u = n;\n  \
    \    |          ^\n/tmp/tmpr4lieug9.cpp:19:10: note: \u2018long int u\u2019 previously\
    \ declared here\n   19 |     long u = n;\n      |          ^\n/tmp/tmpr4lieug9.cpp:46:10:\
    \ error: redeclaration of \u2018long int v\u2019\n   46 |     long v = n;\n  \
    \    |          ^\n/tmp/tmpr4lieug9.cpp:20:10: note: \u2018long int v\u2019 previously\
    \ declared here\n   20 |     long v = n;\n      |          ^\n/tmp/tmpr4lieug9.cpp:47:10:\
    \ error: redeclaration of \u2018long int w\u2019\n   47 |     long w = n;\n  \
    \    |          ^\n/tmp/tmpr4lieug9.cpp:21:10: note: \u2018long int w\u2019 previously\
    \ declared here\n   21 |     long w = n;\n      |          ^\n/tmp/tmpr4lieug9.cpp:48:10:\
    \ error: redeclaration of \u2018long i"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long p = n;\n    long q = n;\n    long r = n;\n    long s = 1;\n    long\
    \ t = 1;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n\
    \    long y = 1;\n    long z = 1;\n    long a = 1;\n    long b = 1;\n    long\
    \ c = 1;\n    long d = 1;\n    long e = 1;\n    long f = 1;\n    long g = 1;\n\
    \    long h = 1;\n    long i = 1;\n    long j = 1;\n    long k = 1;\n    long\
    \ l = 1;\n    long m = 1;\n    long n = 1;\n    long o = 1;\n    long p = 1;\n\
    \    long q = 1;\n    long r = 1;\n    long s = 1;\n    long t = 1;\n    long\
    \ u = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n    long y = 1;\n\
    \    long z = 1;\n    long a = 1;\n    long b = 1;\n    long c = 1;\n    long\
    \ d = 1;\n    long e = 1;\n    long f = 1;\n    long g = 1;\n    long h = 1;\n\
    \    long i = 1;\n    long j = 1;\n    long k = 1;\n    long l = 1;\n    long\
    \ m = 1;\n    long n = 1;\n    long o = 1;\n    long p = 1;\n    long q = 1;\n\
    \    long r = 1;\n    long s = 1;\n    long t = 1;\n    long u = 1;\n    long\
    \ v = 1;\n    long w = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n\
    \    long a = 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n    long\
    \ e = 1;\n    long f = 1;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n\
    \    long j = 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n    long\
    \ n = 1;\n    long o = 1;\n    long p = 1;\n    long q = 1;\n    long r = 1;\n\
    \    long s = 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n    long\
    \ w = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n    long a = 1;\n\
    \    long b = 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n    long\
    \ f = 1;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n    long j = 1;\n\
    \    long k = 1;\n    long l = 1;\n\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({2, 2})));\n    assert(candidate((8)) == (std::vector<long>({2,\
    \ 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3, 19})));\n  \
    \  assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({3, 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2,\
    \ 3, 3})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfn91pwgz.cpp: In function \u2018std::vector<long int> factorize(long\
    \ int)\u2019:\n/tmp/tmpfn91pwgz.cpp:38:10: error: declaration of \u2018long int\
    \ n\u2019 shadows a parameter\n   38 |     long n = 1;\n      |          ^\n/tmp/tmpfn91pwgz.cpp:40:10:\
    \ error: redeclaration of \u2018long int p\u2019\n   40 |     long p = 1;\n  \
    \    |          ^\n/tmp/tmpfn91pwgz.cpp:14:10: note: \u2018long int p\u2019 previously\
    \ declared here\n   14 |     long p = n;\n      |          ^\n/tmp/tmpfn91pwgz.cpp:41:10:\
    \ error: redeclaration of \u2018long int q\u2019\n   41 |     long q = 1;\n  \
    \    |          ^\n/tmp/tmpfn91pwgz.cpp:15:10: note: \u2018long int q\u2019 previously\
    \ declared here\n   15 |     long q = n;\n      |          ^\n/tmp/tmpfn91pwgz.cpp:42:10:\
    \ error: redeclaration of \u2018long int r\u2019\n   42 |     long r = 1;\n  \
    \    |          ^\n/tmp/tmpfn91pwgz.cpp:16:10: note: \u2018long int r\u2019 previously\
    \ declared here\n   16 |     long r = n;\n      |          ^\n/tmp/tmpfn91pwgz.cpp:43:10:\
    \ error: redeclaration of \u2018long int s\u2019\n   43 |     long s = 1;\n  \
    \    |          ^\n/tmp/tmpfn91pwgz.cpp:17:10: note: \u2018long int s\u2019 previously\
    \ declared here\n   17 |     long s = 1;\n      |          ^\n/tmp/tmpfn91pwgz.cpp:44:10:\
    \ error: redeclaration of \u2018long int t\u2019\n   44 |     long t = 1;\n  \
    \    |          ^\n/tmp/tmpfn91pwgz.cpp:18:10: note: \u2018long int t\u2019 previously\
    \ declared here\n   18 |     long t = 1;\n      |          ^\n/tmp/tmpfn91pwgz.cpp:45:10:\
    \ error: redeclaration of \u2018long int u\u2019\n   45 |     long u = 1;\n  \
    \    |          ^\n/tmp/tmpfn91pwgz.cpp:19:10: note: \u2018long int u\u2019 previously\
    \ declared here\n   19 |     long u = 1;\n      |          ^\n/tmp/tmpfn91pwgz.cpp:46:10:\
    \ error: redeclaration of \u2018long int v\u2019\n   46 |     long v = 1;\n  \
    \    |          ^\n/tmp/tmpfn91pwgz.cpp:20:10: note: \u2018long int v\u2019 previously\
    \ declared here\n   20 |     long v = 1;\n      |          ^\n/tmp/tmpfn91pwgz.cpp:47:10:\
    \ error: redeclaration of \u2018long int w\u2019\n   47 |     long w = 1;\n  \
    \    |          ^\n/tmp/tmpfn91pwgz.cpp:21:10: note: \u2018long int w\u2019 previously\
    \ declared here\n   21 |     long w = 1;\n      |          ^\n/tmp/tmpfn91pwgz.cpp:48:10:\
    \ error: redeclaration of \u2018long i"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long i = 2;\n    while (i <= sqrt(n)) {\n        while (n % i == 0) {\n \
    \           factors.push_back(i);\n            n /= i;\n        }\n        i++;\n\
    \    }\n    if (n != 1)\n        factors.push_back(n);\n    return factors;\n\
    }\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2)) ==\
    \ (std::vector<long>({2})));\n    assert(candidate((4)) == (std::vector<long>({2,\
    \ 2})));\n    assert(candidate((8)) == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({3, 19})));\n    assert(candidate((3249)) == (std::vector<long>({3,\
    \ 3, 19, 19})));\n    assert(candidate((185193)) == (std::vector<long>({3, 3,\
    \ 3, 19, 19, 19})));\n    assert(candidate((20577)) == (std::vector<long>({3,\
    \ 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long i = 2;\n    while (i <= sqrt(n)) {\n        while (n % i == 0) {\n \
    \           factors.push_back(i);\n            n /= i;\n        }\n        i++;\n\
    \    }\n    if (n > 1) {\n        factors.push_back(n);\n    }\n    return factors;\n\
    }\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2)) ==\
    \ (std::vector<long>({2})));\n    assert(candidate((4)) == (std::vector<long>({2,\
    \ 2})));\n    assert(candidate((8)) == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({3, 19})));\n    assert(candidate((3249)) == (std::vector<long>({3,\
    \ 3, 19, 19})));\n    assert(candidate((185193)) == (std::vector<long>({3, 3,\
    \ 3, 19, 19, 19})));\n    assert(candidate((20577)) == (std::vector<long>({3,\
    \ 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long factor = 1;\n    long count = 1;\n    long i = 2;\n    while (i <= sqrt(n))\
    \ {\n        while (n % i == 0) {\n            factors.push_back(factor);\n  \
    \          n /= i;\n            count++;\n        }\n        i++;\n    }\n   \
    \ if (n != 1) {\n        factors.push_back(factor);\n    }\n    return factors;\n\
    }\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2)) ==\
    \ (std::vector<long>({2})));\n    assert(candidate((4)) == (std::vector<long>({2,\
    \ 2})));\n    assert(candidate((8)) == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({3, 19})));\n    assert(candidate((3249)) == (std::vector<long>({3,\
    \ 3, 19, 19})));\n    assert(candidate((185193)) == (std::vector<long>({3, 3,\
    \ 3, 19, 19, 19})));\n    assert(candidate((20577)) == (std::vector<long>({3,\
    \ 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n\
    }\n"
  stdout: ''
  stderr: "tmprg7q4w30: /tmp/tmprg7q4w30.cpp:32: int main(): Assertion `candidate((2))\
    \ == (std::vector<long>({2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long i = 2;\n    long p = n;\n    while (p != 1) {\n        while (p % i\
    \ == 0) {\n            factors.push_back(i);\n            p /= i;\n        }\n\
    \        i++;\n    }\n    return factors;\n}\nint main() {\n    auto candidate\
    \ = factorize;\n    assert(candidate((2)) == (std::vector<long>({2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({2, 2})));\n    assert(candidate((8)) == (std::vector<long>({2,\
    \ 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3, 19})));\n  \
    \  assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({3, 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2,\
    \ 3, 3})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long p = n;\n    long q = n;\n    long r = n;\n    long s = n;\n    long\
    \ t = n;\n    long u = n;\n    long v = n;\n    long w = n;\n    long x = n;\n\
    \    long y = n;\n    long z = n;\n    long a = n;\n    long b = n;\n    long\
    \ c = n;\n    long d = n;\n    long e = n;\n    long f = n;\n    long g = n;\n\
    \    long h = n;\n    long i = n;\n    long j = n;\n    long k = n;\n    long\
    \ l = n;\n    long m = n;\n    long n = n;\n    long o = n;\n    long p = n;\n\
    \    long q = n;\n    long r = n;\n    long s = n;\n    long t = n;\n    long\
    \ u = n;\n    long v = n;\n    long w = n;\n    long x = n;\n    long y = n;\n\
    \    long z = n;\n    long a = n;\n    long b = n;\n    long c = n;\n    long\
    \ d = n;\n    long e = n;\n    long f = n;\n    long g = n;\n    long h = n;\n\
    \    long i = n;\n    long j = n;\n    long k = n;\n    long l = n;\n    long\
    \ m = n;\n    long n = n;\n    long o = n;\n    long p = n;\n    long q = n;\n\
    \    long r = n;\n    long s = n;\n    long t = n;\n    long u = n;\n    long\
    \ v = n;\n    long w = n;\n    long x = n;\n    long y = n;\n    long z = n;\n\
    \    long a = n;\n    long b = n;\n    long c = n;\n    long d = n;\n    long\
    \ e = n;\n    long f = n;\n    long g = n;\n    long h = n;\n    long i = n;\n\
    \    long j = n;\n    long k = n;\n    long l = n;\n    long m = n;\n    long\
    \ n = n;\n    long o = n;\n    long p = n;\n    long q = n;\n    long r = n;\n\
    \    long s = n;\n    long t = n;\n    long u = n;\n    long v = n;\n    long\
    \ w = n;\n    long x = n;\n    long y = n;\n    long z = n;\n    long a = n;\n\
    \    long b = n;\n    long c = n;\n    long d = n;\n    long e = n;\n    long\
    \ f = n;\n    long g = n;\n    long h = n;\n    long i = n;\n    long j = n;\n\
    \    long k = n;\n    long l = n;\n\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({2, 2})));\n    assert(candidate((8)) == (std::vector<long>({2,\
    \ 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3, 19})));\n  \
    \  assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({3, 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2,\
    \ 3, 3})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpi07e67by.cpp: In function \u2018std::vector<long int> factorize(long\
    \ int)\u2019:\n/tmp/tmpi07e67by.cpp:38:10: error: declaration of \u2018long int\
    \ n\u2019 shadows a parameter\n   38 |     long n = n;\n      |          ^\n/tmp/tmpi07e67by.cpp:40:10:\
    \ error: redeclaration of \u2018long int p\u2019\n   40 |     long p = n;\n  \
    \    |          ^\n/tmp/tmpi07e67by.cpp:14:10: note: \u2018long int p\u2019 previously\
    \ declared here\n   14 |     long p = n;\n      |          ^\n/tmp/tmpi07e67by.cpp:41:10:\
    \ error: redeclaration of \u2018long int q\u2019\n   41 |     long q = n;\n  \
    \    |          ^\n/tmp/tmpi07e67by.cpp:15:10: note: \u2018long int q\u2019 previously\
    \ declared here\n   15 |     long q = n;\n      |          ^\n/tmp/tmpi07e67by.cpp:42:10:\
    \ error: redeclaration of \u2018long int r\u2019\n   42 |     long r = n;\n  \
    \    |          ^\n/tmp/tmpi07e67by.cpp:16:10: note: \u2018long int r\u2019 previously\
    \ declared here\n   16 |     long r = n;\n      |          ^\n/tmp/tmpi07e67by.cpp:43:10:\
    \ error: redeclaration of \u2018long int s\u2019\n   43 |     long s = n;\n  \
    \    |          ^\n/tmp/tmpi07e67by.cpp:17:10: note: \u2018long int s\u2019 previously\
    \ declared here\n   17 |     long s = n;\n      |          ^\n/tmp/tmpi07e67by.cpp:44:10:\
    \ error: redeclaration of \u2018long int t\u2019\n   44 |     long t = n;\n  \
    \    |          ^\n/tmp/tmpi07e67by.cpp:18:10: note: \u2018long int t\u2019 previously\
    \ declared here\n   18 |     long t = n;\n      |          ^\n/tmp/tmpi07e67by.cpp:45:10:\
    \ error: redeclaration of \u2018long int u\u2019\n   45 |     long u = n;\n  \
    \    |          ^\n/tmp/tmpi07e67by.cpp:19:10: note: \u2018long int u\u2019 previously\
    \ declared here\n   19 |     long u = n;\n      |          ^\n/tmp/tmpi07e67by.cpp:46:10:\
    \ error: redeclaration of \u2018long int v\u2019\n   46 |     long v = n;\n  \
    \    |          ^\n/tmp/tmpi07e67by.cpp:20:10: note: \u2018long int v\u2019 previously\
    \ declared here\n   20 |     long v = n;\n      |          ^\n/tmp/tmpi07e67by.cpp:47:10:\
    \ error: redeclaration of \u2018long int w\u2019\n   47 |     long w = n;\n  \
    \    |          ^\n/tmp/tmpi07e67by.cpp:21:10: note: \u2018long int w\u2019 previously\
    \ declared here\n   21 |     long w = n;\n      |          ^\n/tmp/tmpi07e67by.cpp:48:10:\
    \ error: redeclaration of \u2018long i"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long factor = 1;\n    long factorization = 1;\n    while (n > 1) {\n    \
    \    while (n % factor == 0) {\n            factorization *= factor;\n       \
    \     factors.push_back(factor);\n            n /= factor;\n        }\n      \
    \  factor++;\n    }\n    factors.push_back(factor);\n    factors.push_back(factorization);\n\
    \    return factors;\n}\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2))\
    \ == (std::vector<long>({2})));\n    assert(candidate((4)) == (std::vector<long>({2,\
    \ 2})));\n    assert(candidate((8)) == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({3, 19})));\n    assert(candidate((3249)) == (std::vector<long>({3,\
    \ 3, 19, 19})));\n    assert(candidate((185193)) == (std::vector<long>({3, 3,\
    \ 3, 19, 19, 19})));\n    assert(candidate((20577)) == (std::vector<long>({3,\
    \ 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long factor = 1;\n    long counter = 1;\n    long temp = n;\n    while (temp\
    \ != 1) {\n        while (temp % factor == 0) {\n            factors.push_back(factor);\n\
    \            temp /= factor;\n            counter++;\n        }\n        factor\
    \ *= factor;\n    }\n    factors.push_back(factor);\n    return factors;\n}\n\
    int main() {\n    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({2, 2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3,\
    \ 19})));\n    assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n\
    \    assert(candidate((185193)) == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({3, 19, 19, 19})));\n   \
    \ assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long i = 2;\n    while (i <= n) {\n        while (n % i == 0) {\n       \
    \     factors.push_back(i);\n            n /= i;\n        }\n        i++;\n  \
    \  }\n    if (n != 1) {\n        factors.push_back(n);\n    }\n    return factors;\n\
    }\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2)) ==\
    \ (std::vector<long>({2})));\n    assert(candidate((4)) == (std::vector<long>({2,\
    \ 2})));\n    assert(candidate((8)) == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({3, 19})));\n    assert(candidate((3249)) == (std::vector<long>({3,\
    \ 3, 19, 19})));\n    assert(candidate((185193)) == (std::vector<long>({3, 3,\
    \ 3, 19, 19, 19})));\n    assert(candidate((20577)) == (std::vector<long>({3,\
    \ 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long p = n;\n    long q = n;\n    long r = n;\n    long s = n;\n    long\
    \ t = n;\n    long u = n;\n    long v = n;\n    long w = n;\n    long x = n;\n\
    \    long y = n;\n    long z = n;\n    long a = n;\n    long b = n;\n    long\
    \ c = n;\n    long d = n;\n    long e = n;\n    long f = n;\n    long g = n;\n\
    \    long h = n;\n    long i = n;\n    long j = n;\n    long k = n;\n    long\
    \ l = n;\n    long m = n;\n    long n = n;\n    long o = n;\n    long p = n;\n\
    \    long q = n;\n    long r = n;\n    long s = n;\n    long t = n;\n    long\
    \ u = n;\n    long v = n;\n    long w = n;\n    long x = n;\n    long y = n;\n\
    \    long z = n;\n    long a = n;\n    long b = n;\n    long c = n;\n    long\
    \ d = n;\n    long e = n;\n    long f = n;\n    long g = n;\n    long h = n;\n\
    \    long i = n;\n    long j = n;\n    long k = n;\n    long l = n;\n    long\
    \ m = n;\n    long n = n;\n    long o = n;\n    long p = n;\n    long q = n;\n\
    \    long r = n;\n    long s = n;\n    long t = n;\n    long u = n;\n    long\
    \ v = n;\n    long w = n;\n    long x = n;\n    long y = n;\n    long z = n;\n\
    \    long a = n;\n    long b = n;\n    long c = n;\n    long d = n;\n    long\
    \ e = n;\n    long f = n;\n    long g = n;\n    long h = n;\n    long i = n;\n\
    \    long j = n;\n    long k = n;\n    long l = n;\n    long m = n;\n    long\
    \ n = n;\n    long o = n;\n    long p = n;\n    long q = n;\n    long r = n;\n\
    \    long s = n;\n    long t = n;\n    long u = n;\n    long v = n;\n    long\
    \ w = n;\n    long x = n;\n    long y = n;\n    long z = n;\n    long a = n;\n\
    \    long b = n;\n    long c = n;\n    long d = n;\n    long e = n;\n    long\
    \ f = n;\n    long g = n;\n    long h = n;\n    long i = n;\n    long j = n;\n\
    \    long k = n;\n    long l = n;\n\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({2, 2})));\n    assert(candidate((8)) == (std::vector<long>({2,\
    \ 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3, 19})));\n  \
    \  assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({3, 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2,\
    \ 3, 3})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpwphoxhzg.cpp: In function \u2018std::vector<long int> factorize(long\
    \ int)\u2019:\n/tmp/tmpwphoxhzg.cpp:38:10: error: declaration of \u2018long int\
    \ n\u2019 shadows a parameter\n   38 |     long n = n;\n      |          ^\n/tmp/tmpwphoxhzg.cpp:40:10:\
    \ error: redeclaration of \u2018long int p\u2019\n   40 |     long p = n;\n  \
    \    |          ^\n/tmp/tmpwphoxhzg.cpp:14:10: note: \u2018long int p\u2019 previously\
    \ declared here\n   14 |     long p = n;\n      |          ^\n/tmp/tmpwphoxhzg.cpp:41:10:\
    \ error: redeclaration of \u2018long int q\u2019\n   41 |     long q = n;\n  \
    \    |          ^\n/tmp/tmpwphoxhzg.cpp:15:10: note: \u2018long int q\u2019 previously\
    \ declared here\n   15 |     long q = n;\n      |          ^\n/tmp/tmpwphoxhzg.cpp:42:10:\
    \ error: redeclaration of \u2018long int r\u2019\n   42 |     long r = n;\n  \
    \    |          ^\n/tmp/tmpwphoxhzg.cpp:16:10: note: \u2018long int r\u2019 previously\
    \ declared here\n   16 |     long r = n;\n      |          ^\n/tmp/tmpwphoxhzg.cpp:43:10:\
    \ error: redeclaration of \u2018long int s\u2019\n   43 |     long s = n;\n  \
    \    |          ^\n/tmp/tmpwphoxhzg.cpp:17:10: note: \u2018long int s\u2019 previously\
    \ declared here\n   17 |     long s = n;\n      |          ^\n/tmp/tmpwphoxhzg.cpp:44:10:\
    \ error: redeclaration of \u2018long int t\u2019\n   44 |     long t = n;\n  \
    \    |          ^\n/tmp/tmpwphoxhzg.cpp:18:10: note: \u2018long int t\u2019 previously\
    \ declared here\n   18 |     long t = n;\n      |          ^\n/tmp/tmpwphoxhzg.cpp:45:10:\
    \ error: redeclaration of \u2018long int u\u2019\n   45 |     long u = n;\n  \
    \    |          ^\n/tmp/tmpwphoxhzg.cpp:19:10: note: \u2018long int u\u2019 previously\
    \ declared here\n   19 |     long u = n;\n      |          ^\n/tmp/tmpwphoxhzg.cpp:46:10:\
    \ error: redeclaration of \u2018long int v\u2019\n   46 |     long v = n;\n  \
    \    |          ^\n/tmp/tmpwphoxhzg.cpp:20:10: note: \u2018long int v\u2019 previously\
    \ declared here\n   20 |     long v = n;\n      |          ^\n/tmp/tmpwphoxhzg.cpp:47:10:\
    \ error: redeclaration of \u2018long int w\u2019\n   47 |     long w = n;\n  \
    \    |          ^\n/tmp/tmpwphoxhzg.cpp:21:10: note: \u2018long int w\u2019 previously\
    \ declared here\n   21 |     long w = n;\n      |          ^\n/tmp/tmpwphoxhzg.cpp:48:10:\
    \ error: redeclaration of \u2018long i"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long p = n;\n    long q = n;\n    long r = n;\n    long s = n;\n    long\
    \ t = n;\n    long u = n;\n    long v = n;\n    long w = n;\n    long x = n;\n\
    \    long y = n;\n    long z = n;\n    long a = n;\n    long b = n;\n    long\
    \ c = n;\n    long d = n;\n    long e = n;\n    long f = n;\n    long g = n;\n\
    \    long h = n;\n    long i = n;\n    long j = n;\n    long k = n;\n    long\
    \ l = n;\n    long m = n;\n    long n = n;\n    long o = n;\n    long p = n;\n\
    \    long q = n;\n    long r = n;\n    long s = n;\n    long t = n;\n    long\
    \ u = n;\n    long v = n;\n    long w = n;\n    long x = n;\n    long y = n;\n\
    \    long z = n;\n    long a = n;\n    long b = n;\n    long c = n;\n    long\
    \ d = n;\n    long e = n;\n    long f = n;\n    long g = n;\n    long h = n;\n\
    \    long i = n;\n    long j = n;\n    long k = n;\n    long l = n;\n    long\
    \ m = n;\n    long n = n;\n    long o = n;\n    long p = n;\n    long q = n;\n\
    \    long r = n;\n    long s = n;\n    long t = n;\n    long u = n;\n    long\
    \ v = n;\n    long w = n;\n    long x = n;\n    long y = n;\n    long z = n;\n\
    \    long a = n;\n    long b = n;\n    long c = n;\n    long d = n;\n    long\
    \ e = n;\n    long f = n;\n    long g = n;\n    long h = n;\n    long i = n;\n\
    \    long j = n;\n    long k = n;\n    long l = n;\n    long m = n;\n    long\
    \ n = n;\n    long o = n;\n    long p = n;\n    long q = n;\n    long r = n;\n\
    \    long s = n;\n    long t = n;\n    long u = n;\n    long v = n;\n    long\
    \ w = n;\n    long x = n;\n    long y = n;\n    long z = n;\n    long a = n;\n\
    \    long b = n;\n    long c = n;\n    long d = n;\n    long e = n;\n    long\
    \ f = n;\n    long g = n;\n    long h = n;\n    long i = n;\n    long j = n;\n\
    \    long k = n;\n    long l = n;\n\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({2, 2})));\n    assert(candidate((8)) == (std::vector<long>({2,\
    \ 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3, 19})));\n  \
    \  assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({3, 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2,\
    \ 3, 3})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxamo38x4.cpp: In function \u2018std::vector<long int> factorize(long\
    \ int)\u2019:\n/tmp/tmpxamo38x4.cpp:38:10: error: declaration of \u2018long int\
    \ n\u2019 shadows a parameter\n   38 |     long n = n;\n      |          ^\n/tmp/tmpxamo38x4.cpp:40:10:\
    \ error: redeclaration of \u2018long int p\u2019\n   40 |     long p = n;\n  \
    \    |          ^\n/tmp/tmpxamo38x4.cpp:14:10: note: \u2018long int p\u2019 previously\
    \ declared here\n   14 |     long p = n;\n      |          ^\n/tmp/tmpxamo38x4.cpp:41:10:\
    \ error: redeclaration of \u2018long int q\u2019\n   41 |     long q = n;\n  \
    \    |          ^\n/tmp/tmpxamo38x4.cpp:15:10: note: \u2018long int q\u2019 previously\
    \ declared here\n   15 |     long q = n;\n      |          ^\n/tmp/tmpxamo38x4.cpp:42:10:\
    \ error: redeclaration of \u2018long int r\u2019\n   42 |     long r = n;\n  \
    \    |          ^\n/tmp/tmpxamo38x4.cpp:16:10: note: \u2018long int r\u2019 previously\
    \ declared here\n   16 |     long r = n;\n      |          ^\n/tmp/tmpxamo38x4.cpp:43:10:\
    \ error: redeclaration of \u2018long int s\u2019\n   43 |     long s = n;\n  \
    \    |          ^\n/tmp/tmpxamo38x4.cpp:17:10: note: \u2018long int s\u2019 previously\
    \ declared here\n   17 |     long s = n;\n      |          ^\n/tmp/tmpxamo38x4.cpp:44:10:\
    \ error: redeclaration of \u2018long int t\u2019\n   44 |     long t = n;\n  \
    \    |          ^\n/tmp/tmpxamo38x4.cpp:18:10: note: \u2018long int t\u2019 previously\
    \ declared here\n   18 |     long t = n;\n      |          ^\n/tmp/tmpxamo38x4.cpp:45:10:\
    \ error: redeclaration of \u2018long int u\u2019\n   45 |     long u = n;\n  \
    \    |          ^\n/tmp/tmpxamo38x4.cpp:19:10: note: \u2018long int u\u2019 previously\
    \ declared here\n   19 |     long u = n;\n      |          ^\n/tmp/tmpxamo38x4.cpp:46:10:\
    \ error: redeclaration of \u2018long int v\u2019\n   46 |     long v = n;\n  \
    \    |          ^\n/tmp/tmpxamo38x4.cpp:20:10: note: \u2018long int v\u2019 previously\
    \ declared here\n   20 |     long v = n;\n      |          ^\n/tmp/tmpxamo38x4.cpp:47:10:\
    \ error: redeclaration of \u2018long int w\u2019\n   47 |     long w = n;\n  \
    \    |          ^\n/tmp/tmpxamo38x4.cpp:21:10: note: \u2018long int w\u2019 previously\
    \ declared here\n   21 |     long w = n;\n      |          ^\n/tmp/tmpxamo38x4.cpp:48:10:\
    \ error: redeclaration of \u2018long i"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long i = 2;\n    while (i <= n) {\n        while (n % i == 0) {\n       \
    \     factors.push_back(i);\n            n /= i;\n        }\n        i++;\n  \
    \  }\n    if (n != 1) {\n        factors.push_back(n);\n    }\n    return factors;\n\
    }\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2)) ==\
    \ (std::vector<long>({2})));\n    assert(candidate((4)) == (std::vector<long>({2,\
    \ 2})));\n    assert(candidate((8)) == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({3, 19})));\n    assert(candidate((3249)) == (std::vector<long>({3,\
    \ 3, 19, 19})));\n    assert(candidate((185193)) == (std::vector<long>({3, 3,\
    \ 3, 19, 19, 19})));\n    assert(candidate((20577)) == (std::vector<long>({3,\
    \ 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long factor = 1;\n    long count = 1;\n    while (n != 1) {\n        while\
    \ (n % factor == 0) {\n            factors.push_back(factor);\n            n /=\
    \ factor;\n            count++;\n        }\n        factor *= 2;\n    }\n    factors.push_back(factor);\n\
    \    factors.push_back(count);\n    return factors;\n}\nint main() {\n    auto\
    \ candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({2, 2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3,\
    \ 19})));\n    assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n\
    \    assert(candidate((185193)) == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({3, 19, 19, 19})));\n   \
    \ assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long i = 2;\n    while (i <= n) {\n        while (n % i == 0) {\n       \
    \     factors.push_back(i);\n            n /= i;\n        }\n        i++;\n  \
    \  }\n    if (n > 1) {\n        factors.push_back(n);\n    }\n    return factors;\n\
    }\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2)) ==\
    \ (std::vector<long>({2})));\n    assert(candidate((4)) == (std::vector<long>({2,\
    \ 2})));\n    assert(candidate((8)) == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({3, 19})));\n    assert(candidate((3249)) == (std::vector<long>({3,\
    \ 3, 19, 19})));\n    assert(candidate((185193)) == (std::vector<long>({3, 3,\
    \ 3, 19, 19, 19})));\n    assert(candidate((20577)) == (std::vector<long>({3,\
    \ 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long i = 2;\n    while (i <= n) {\n        while (n % i == 0) {\n       \
    \     factors.push_back(i);\n            n /= i;\n        }\n        i++;\n  \
    \  }\n    if (n != 1)\n        factors.push_back(n);\n    return factors;\n}\n\
    int main() {\n    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({2, 2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3,\
    \ 19})));\n    assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n\
    \    assert(candidate((185193)) == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({3, 19, 19, 19})));\n   \
    \ assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long factor = 1;\n    long count = 0;\n    long p = n;\n    long q = n;\n\
    \    long r = n;\n    long s = n;\n    long t = n;\n    long u = n;\n    long\
    \ v = n;\n    long w = n;\n    long x = n;\n    long y = n;\n    long z = n;\n\
    \    long a = n;\n    long b = n;\n    long c = n;\n    long d = n;\n    long\
    \ e = n;\n    long f = n;\n    long g = n;\n    long h = n;\n    long i = n;\n\
    \    long j = n;\n    long k = n;\n    long l = n;\n    long m = n;\n    long\
    \ n = n;\n    long o = n;\n    long p = n;\n    long q = n;\n    long r = n;\n\
    \    long s = n;\n    long t = n;\n    long u = n;\n    long v = n;\n    long\
    \ w = n;\n    long x = n;\n    long y = n;\n    long z = n;\n    long a = n;\n\
    \    long b = n;\n    long c = n;\n    long d = n;\n    long e = n;\n    long\
    \ f = n;\n    long g = n;\n    long h = n;\n    long i = n;\n    long j = n;\n\
    \    long k = n;\n    long l = n;\n    long m = n;\n    long n = n;\n    long\
    \ o = n;\n    long p = n;\n    long q = n;\n    long r = n;\n    long s = n;\n\
    \    long t = n;\n    long u = n;\n    long v = n;\n    long w = n;\n    long\
    \ x = n;\n    long y = n;\n    long z = n;\n    long a = n;\n    long b = n;\n\
    \    long c = n;\n    long d = n;\n    long e = n;\n    long f = n;\n    long\
    \ g = n;\n    long h = n;\n    long i = n;\n    long j = n;\n    long k = n;\n\
    \    long l = n;\n    long m = n;\n    long n = n;\n    long o = n;\n    long\
    \ p = n;\n    long q = n;\n    long r = n;\n    long s = n;\n    long t = n;\n\
    \    long u = n;\n    long v = n;\n    long w = n;\n    long x = n;\n    long\
    \ y = n;\n    long z = n;\n    long a = n;\n    long b = n;\n    long c = n;\n\
    \    long d = n;\n    long e = n;\n    long f = n;\n    long g = n;\n    long\
    \ h = n;\n    long i = n;\n    long j = n;\n    \n}\nint main() {\n    auto candidate\
    \ = factorize;\n    assert(candidate((2)) == (std::vector<long>({2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({2, 2})));\n    assert(candidate((8)) == (std::vector<long>({2,\
    \ 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3, 19})));\n  \
    \  assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({3, 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2,\
    \ 3, 3})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpi1nkpot0.cpp: In function \u2018std::vector<long int> factorize(long\
    \ int)\u2019:\n/tmp/tmpi1nkpot0.cpp:40:10: error: declaration of \u2018long int\
    \ n\u2019 shadows a parameter\n   40 |     long n = n;\n      |          ^\n/tmp/tmpi1nkpot0.cpp:42:10:\
    \ error: redeclaration of \u2018long int p\u2019\n   42 |     long p = n;\n  \
    \    |          ^\n/tmp/tmpi1nkpot0.cpp:16:10: note: \u2018long int p\u2019 previously\
    \ declared here\n   16 |     long p = n;\n      |          ^\n/tmp/tmpi1nkpot0.cpp:43:10:\
    \ error: redeclaration of \u2018long int q\u2019\n   43 |     long q = n;\n  \
    \    |          ^\n/tmp/tmpi1nkpot0.cpp:17:10: note: \u2018long int q\u2019 previously\
    \ declared here\n   17 |     long q = n;\n      |          ^\n/tmp/tmpi1nkpot0.cpp:44:10:\
    \ error: redeclaration of \u2018long int r\u2019\n   44 |     long r = n;\n  \
    \    |          ^\n/tmp/tmpi1nkpot0.cpp:18:10: note: \u2018long int r\u2019 previously\
    \ declared here\n   18 |     long r = n;\n      |          ^\n/tmp/tmpi1nkpot0.cpp:45:10:\
    \ error: redeclaration of \u2018long int s\u2019\n   45 |     long s = n;\n  \
    \    |          ^\n/tmp/tmpi1nkpot0.cpp:19:10: note: \u2018long int s\u2019 previously\
    \ declared here\n   19 |     long s = n;\n      |          ^\n/tmp/tmpi1nkpot0.cpp:46:10:\
    \ error: redeclaration of \u2018long int t\u2019\n   46 |     long t = n;\n  \
    \    |          ^\n/tmp/tmpi1nkpot0.cpp:20:10: note: \u2018long int t\u2019 previously\
    \ declared here\n   20 |     long t = n;\n      |          ^\n/tmp/tmpi1nkpot0.cpp:47:10:\
    \ error: redeclaration of \u2018long int u\u2019\n   47 |     long u = n;\n  \
    \    |          ^\n/tmp/tmpi1nkpot0.cpp:21:10: note: \u2018long int u\u2019 previously\
    \ declared here\n   21 |     long u = n;\n      |          ^\n/tmp/tmpi1nkpot0.cpp:48:10:\
    \ error: redeclaration of \u2018long int v\u2019\n   48 |     long v = n;\n  \
    \    |          ^\n/tmp/tmpi1nkpot0.cpp:22:10: note: \u2018long int v\u2019 previously\
    \ declared here\n   22 |     long v = n;\n      |          ^\n/tmp/tmpi1nkpot0.cpp:49:10:\
    \ error: redeclaration of \u2018long int w\u2019\n   49 |     long w = n;\n  \
    \    |          ^\n/tmp/tmpi1nkpot0.cpp:23:10: note: \u2018long int w\u2019 previously\
    \ declared here\n   23 |     long w = n;\n      |          ^\n/tmp/tmpi1nkpot0.cpp:50:10:\
    \ error: redeclaration of \u2018long i"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long p = n;\n    long q = n;\n    long r = n;\n    long s = n;\n    long\
    \ t = n;\n    long u = n;\n    long v = n;\n    long w = n;\n    long x = n;\n\
    \    long y = n;\n    long z = n;\n    long a = n;\n    long b = n;\n    long\
    \ c = n;\n    long d = n;\n    long e = n;\n    long f = n;\n    long g = n;\n\
    \    long h = n;\n    long i = n;\n    long j = n;\n    long k = n;\n    long\
    \ l = n;\n    long m = n;\n    long n = n;\n    long o = n;\n    long p = n;\n\
    \    long q = n;\n    long r = n;\n    long s = n;\n    long t = n;\n    long\
    \ u = n;\n    long v = n;\n    long w = n;\n    long x = n;\n    long y = n;\n\
    \    long z = n;\n    long a = n;\n    long b = n;\n    long c = n;\n    long\
    \ d = n;\n    long e = n;\n    long f = n;\n    long g = n;\n    long h = n;\n\
    \    long i = n;\n    long j = n;\n    long k = n;\n    long l = n;\n    long\
    \ m = n;\n    long n = n;\n    long o = n;\n    long p = n;\n    long q = n;\n\
    \    long r = n;\n    long s = n;\n    long t = n;\n    long u = n;\n    long\
    \ v = n;\n    long w = n;\n    long x = n;\n    long y = n;\n    long z = n;\n\
    \    long a = n;\n    long b = n;\n    long c = n;\n    long d = n;\n    long\
    \ e = n;\n    long f = n;\n    long g = n;\n    long h = n;\n    long i = n;\n\
    \    long j = n;\n    long k = n;\n    long l = n;\n    long m = n;\n    long\
    \ n = n;\n    long o = n;\n    long p = n;\n    long q = n;\n    long r = n;\n\
    \    long s = n;\n    long t = n;\n    long u = n;\n    long v = n;\n    long\
    \ w = n;\n    long x = n;\n    long y = n;\n    long z = n;\n    long a = n;\n\
    \    long b = n;\n    long c = n;\n    long d = n;\n    long e = n;\n    long\
    \ f = n;\n    long g = n;\n    long h = n;\n    long i = n;\n    long j = n;\n\
    \    long k = n;\n    long l = n;\n\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({2, 2})));\n    assert(candidate((8)) == (std::vector<long>({2,\
    \ 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3, 19})));\n  \
    \  assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({3, 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2,\
    \ 3, 3})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpi0w36zd6.cpp: In function \u2018std::vector<long int> factorize(long\
    \ int)\u2019:\n/tmp/tmpi0w36zd6.cpp:38:10: error: declaration of \u2018long int\
    \ n\u2019 shadows a parameter\n   38 |     long n = n;\n      |          ^\n/tmp/tmpi0w36zd6.cpp:40:10:\
    \ error: redeclaration of \u2018long int p\u2019\n   40 |     long p = n;\n  \
    \    |          ^\n/tmp/tmpi0w36zd6.cpp:14:10: note: \u2018long int p\u2019 previously\
    \ declared here\n   14 |     long p = n;\n      |          ^\n/tmp/tmpi0w36zd6.cpp:41:10:\
    \ error: redeclaration of \u2018long int q\u2019\n   41 |     long q = n;\n  \
    \    |          ^\n/tmp/tmpi0w36zd6.cpp:15:10: note: \u2018long int q\u2019 previously\
    \ declared here\n   15 |     long q = n;\n      |          ^\n/tmp/tmpi0w36zd6.cpp:42:10:\
    \ error: redeclaration of \u2018long int r\u2019\n   42 |     long r = n;\n  \
    \    |          ^\n/tmp/tmpi0w36zd6.cpp:16:10: note: \u2018long int r\u2019 previously\
    \ declared here\n   16 |     long r = n;\n      |          ^\n/tmp/tmpi0w36zd6.cpp:43:10:\
    \ error: redeclaration of \u2018long int s\u2019\n   43 |     long s = n;\n  \
    \    |          ^\n/tmp/tmpi0w36zd6.cpp:17:10: note: \u2018long int s\u2019 previously\
    \ declared here\n   17 |     long s = n;\n      |          ^\n/tmp/tmpi0w36zd6.cpp:44:10:\
    \ error: redeclaration of \u2018long int t\u2019\n   44 |     long t = n;\n  \
    \    |          ^\n/tmp/tmpi0w36zd6.cpp:18:10: note: \u2018long int t\u2019 previously\
    \ declared here\n   18 |     long t = n;\n      |          ^\n/tmp/tmpi0w36zd6.cpp:45:10:\
    \ error: redeclaration of \u2018long int u\u2019\n   45 |     long u = n;\n  \
    \    |          ^\n/tmp/tmpi0w36zd6.cpp:19:10: note: \u2018long int u\u2019 previously\
    \ declared here\n   19 |     long u = n;\n      |          ^\n/tmp/tmpi0w36zd6.cpp:46:10:\
    \ error: redeclaration of \u2018long int v\u2019\n   46 |     long v = n;\n  \
    \    |          ^\n/tmp/tmpi0w36zd6.cpp:20:10: note: \u2018long int v\u2019 previously\
    \ declared here\n   20 |     long v = n;\n      |          ^\n/tmp/tmpi0w36zd6.cpp:47:10:\
    \ error: redeclaration of \u2018long int w\u2019\n   47 |     long w = n;\n  \
    \    |          ^\n/tmp/tmpi0w36zd6.cpp:21:10: note: \u2018long int w\u2019 previously\
    \ declared here\n   21 |     long w = n;\n      |          ^\n/tmp/tmpi0w36zd6.cpp:48:10:\
    \ error: redeclaration of \u2018long i"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long i = 2;\n    long factor = 1;\n    while (i < n) {\n        while (n\
    \ % i == 0) {\n            factor *= i;\n            factors.push_back(factor);\n\
    \            n /= i;\n        }\n        i++;\n    }\n    if (n != 1) {\n    \
    \    factors.push_back(n);\n    }\n    return factors;\n}\nint main() {\n    auto\
    \ candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({2, 2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3,\
    \ 19})));\n    assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n\
    \    assert(candidate((185193)) == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({3, 19, 19, 19})));\n   \
    \ assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n}\n"
  stdout: ''
  stderr: "tmpmsaqmt_g: /tmp/tmpmsaqmt_g.cpp:32: int main(): Assertion `candidate((4))\
    \ == (std::vector<long>({2, 2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long i = 2;\n    while (i <= n / i) {\n        while (n % i == 0) {\n   \
    \         factors.push_back(i);\n            n /= i;\n        }\n        i++;\n\
    \    }\n    if (n != 1)\n        factors.push_back(n);\n    return factors;\n\
    }\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2)) ==\
    \ (std::vector<long>({2})));\n    assert(candidate((4)) == (std::vector<long>({2,\
    \ 2})));\n    assert(candidate((8)) == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({3, 19})));\n    assert(candidate((3249)) == (std::vector<long>({3,\
    \ 3, 19, 19})));\n    assert(candidate((185193)) == (std::vector<long>({3, 3,\
    \ 3, 19, 19, 19})));\n    assert(candidate((20577)) == (std::vector<long>({3,\
    \ 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long factor = 1;\n    long count = 0;\n    long temp = n;\n    while (temp\
    \ > 1) {\n        while (temp % factor == 0) {\n            count++;\n       \
    \     temp /= factor;\n        }\n        factors.push_back(factor);\n       \
    \ factor *= count;\n        count = 1;\n    }\n    return factors;\n}\nint main()\
    \ {\n    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({2, 2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3,\
    \ 19})));\n    assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n\
    \    assert(candidate((185193)) == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({3, 19, 19, 19})));\n   \
    \ assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long factor = 1;\n    long limit = sqrt(n);\n    long i = 2;\n    while (i\
    \ <= limit) {\n        if (n % i == 0) {\n            factor *= i;\n         \
    \   while (n / i != i) {\n                factors.push_back(factor);\n       \
    \         n /= i;\n                factor++;\n            }\n        }\n     \
    \   i++;\n    }\n    if (n != 1) {\n        factors.push_back(factor);\n    }\n\
    \    return factors;\n}\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2))\
    \ == (std::vector<long>({2})));\n    assert(candidate((4)) == (std::vector<long>({2,\
    \ 2})));\n    assert(candidate((8)) == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({3, 19})));\n    assert(candidate((3249)) == (std::vector<long>({3,\
    \ 3, 19, 19})));\n    assert(candidate((185193)) == (std::vector<long>({3, 3,\
    \ 3, 19, 19, 19})));\n    assert(candidate((20577)) == (std::vector<long>({3,\
    \ 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n\
    }\n"
  stdout: ''
  stderr: "tmpp0v510ju: /tmp/tmpp0v510ju.cpp:35: int main(): Assertion `candidate((2))\
    \ == (std::vector<long>({2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long i = 2;\n    long factor = 1;\n    while (i <= n) {\n        while (n\
    \ % i == 0) {\n            factor *= i;\n            n /= i;\n        }\n    \
    \    i++;\n    }\n    factors.push_back(factor);\n    return factors;\n}\nint\
    \ main() {\n    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({2, 2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3,\
    \ 19})));\n    assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n\
    \    assert(candidate((185193)) == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({3, 19, 19, 19})));\n   \
    \ assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n}\n"
  stdout: ''
  stderr: "tmphaum0wvq: /tmp/tmphaum0wvq.cpp:29: int main(): Assertion `candidate((4))\
    \ == (std::vector<long>({2, 2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long i = 2;\n    while (i <= n) {\n        while (n % i == 0) {\n       \
    \     factors.push_back(i);\n            n /= i;\n        }\n        i++;\n  \
    \  }\n    if (n != 1) {\n        factors.push_back(n);\n    }\n    return factors;\n\
    }\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2)) ==\
    \ (std::vector<long>({2})));\n    assert(candidate((4)) == (std::vector<long>({2,\
    \ 2})));\n    assert(candidate((8)) == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({3, 19})));\n    assert(candidate((3249)) == (std::vector<long>({3,\
    \ 3, 19, 19})));\n    assert(candidate((185193)) == (std::vector<long>({3, 3,\
    \ 3, 19, 19, 19})));\n    assert(candidate((20577)) == (std::vector<long>({3,\
    \ 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long p = n;\n    long q = n;\n    long r = n;\n    long s = n;\n    long\
    \ t = n;\n    long u = n;\n    long v = n;\n    long w = n;\n    long x = n;\n\
    \    long y = n;\n    long z = n;\n    long a = n;\n    long b = n;\n    long\
    \ c = n;\n    long d = n;\n    long e = n;\n    long f = n;\n    long g = n;\n\
    \    long h = n;\n    long i = n;\n    long j = n;\n    long k = n;\n    long\
    \ l = n;\n    long m = n;\n    long n = n;\n    long o = n;\n    long p = n;\n\
    \    long q = n;\n    long r = n;\n    long s = n;\n    long t = n;\n    long\
    \ u = n;\n    long v = n;\n    long w = n;\n    long x = n;\n    long y = n;\n\
    \    long z = n;\n    long a = n;\n    long b = n;\n    long c = n;\n    long\
    \ d = n;\n    long e = n;\n    long f = n;\n    long g = n;\n    long h = n;\n\
    \    long i = n;\n    long j = n;\n    long k = n;\n    long l = n;\n    long\
    \ m = n;\n    long n = n;\n    long o = n;\n    long p = n;\n    long q = n;\n\
    \    long r = n;\n    long s = n;\n    long t = n;\n    long u = n;\n    long\
    \ v = n;\n    long w = n;\n    long x = n;\n    long y = n;\n    long z = n;\n\
    \    long a = n;\n    long b = n;\n    long c = n;\n    long d = n;\n    long\
    \ e = n;\n    long f = n;\n    long g = n;\n    long h = n;\n    long i = n;\n\
    \    long j = n;\n    long k = n;\n    long l = n;\n    long m = n;\n    long\
    \ n = n;\n    long o = n;\n    long p = n;\n    long q = n;\n    long r = n;\n\
    \    long s = n;\n    long t = n;\n    long u = n;\n    long v = n;\n    long\
    \ w = n;\n    long x = n;\n    long y = n;\n    long z = n;\n    long a = n;\n\
    \    long b = n;\n    long c = n;\n    long d = n;\n    long e = n;\n    long\
    \ f = n;\n    long g = n;\n    long h = n;\n    long i = n;\n    long j = n;\n\
    \    long k = n;\n    long l = n;\n\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({2, 2})));\n    assert(candidate((8)) == (std::vector<long>({2,\
    \ 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3, 19})));\n  \
    \  assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({3, 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2,\
    \ 3, 3})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpexmak_fr.cpp: In function \u2018std::vector<long int> factorize(long\
    \ int)\u2019:\n/tmp/tmpexmak_fr.cpp:38:10: error: declaration of \u2018long int\
    \ n\u2019 shadows a parameter\n   38 |     long n = n;\n      |          ^\n/tmp/tmpexmak_fr.cpp:40:10:\
    \ error: redeclaration of \u2018long int p\u2019\n   40 |     long p = n;\n  \
    \    |          ^\n/tmp/tmpexmak_fr.cpp:14:10: note: \u2018long int p\u2019 previously\
    \ declared here\n   14 |     long p = n;\n      |          ^\n/tmp/tmpexmak_fr.cpp:41:10:\
    \ error: redeclaration of \u2018long int q\u2019\n   41 |     long q = n;\n  \
    \    |          ^\n/tmp/tmpexmak_fr.cpp:15:10: note: \u2018long int q\u2019 previously\
    \ declared here\n   15 |     long q = n;\n      |          ^\n/tmp/tmpexmak_fr.cpp:42:10:\
    \ error: redeclaration of \u2018long int r\u2019\n   42 |     long r = n;\n  \
    \    |          ^\n/tmp/tmpexmak_fr.cpp:16:10: note: \u2018long int r\u2019 previously\
    \ declared here\n   16 |     long r = n;\n      |          ^\n/tmp/tmpexmak_fr.cpp:43:10:\
    \ error: redeclaration of \u2018long int s\u2019\n   43 |     long s = n;\n  \
    \    |          ^\n/tmp/tmpexmak_fr.cpp:17:10: note: \u2018long int s\u2019 previously\
    \ declared here\n   17 |     long s = n;\n      |          ^\n/tmp/tmpexmak_fr.cpp:44:10:\
    \ error: redeclaration of \u2018long int t\u2019\n   44 |     long t = n;\n  \
    \    |          ^\n/tmp/tmpexmak_fr.cpp:18:10: note: \u2018long int t\u2019 previously\
    \ declared here\n   18 |     long t = n;\n      |          ^\n/tmp/tmpexmak_fr.cpp:45:10:\
    \ error: redeclaration of \u2018long int u\u2019\n   45 |     long u = n;\n  \
    \    |          ^\n/tmp/tmpexmak_fr.cpp:19:10: note: \u2018long int u\u2019 previously\
    \ declared here\n   19 |     long u = n;\n      |          ^\n/tmp/tmpexmak_fr.cpp:46:10:\
    \ error: redeclaration of \u2018long int v\u2019\n   46 |     long v = n;\n  \
    \    |          ^\n/tmp/tmpexmak_fr.cpp:20:10: note: \u2018long int v\u2019 previously\
    \ declared here\n   20 |     long v = n;\n      |          ^\n/tmp/tmpexmak_fr.cpp:47:10:\
    \ error: redeclaration of \u2018long int w\u2019\n   47 |     long w = n;\n  \
    \    |          ^\n/tmp/tmpexmak_fr.cpp:21:10: note: \u2018long int w\u2019 previously\
    \ declared here\n   21 |     long w = n;\n      |          ^\n/tmp/tmpexmak_fr.cpp:48:10:\
    \ error: redeclaration of \u2018long i"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long factor = 1;\n    long limit = sqrt(n);\n    long counter = 1;\n    long\
    \ i = 2;\n    while (i <= limit) {\n        if (n % i == 0) {\n            factors.push_back(i);\n\
    \            counter += 1;\n            while (i <= limit && n % i == 0) {\n \
    \               i += 1;\n            }\n        }\n        i += 1;\n    }\n  \
    \  if (counter > 1) {\n        factors.push_back(counter);\n    }\n    return\
    \ factors;\n}\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2))\
    \ == (std::vector<long>({2})));\n    assert(candidate((4)) == (std::vector<long>({2,\
    \ 2})));\n    assert(candidate((8)) == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({3, 19})));\n    assert(candidate((3249)) == (std::vector<long>({3,\
    \ 3, 19, 19})));\n    assert(candidate((185193)) == (std::vector<long>({3, 3,\
    \ 3, 19, 19, 19})));\n    assert(candidate((20577)) == (std::vector<long>({3,\
    \ 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n\
    }\n"
  stdout: ''
  stderr: "tmp462u93cx: /tmp/tmp462u93cx.cpp:35: int main(): Assertion `candidate((2))\
    \ == (std::vector<long>({2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long factor = 1;\n    long i = 2;\n    while (i <= sqrt(n)) {\n        while\
    \ (n % i == 0) {\n            factors.push_back(i);\n            n /= i;\n   \
    \     }\n        i++;\n    }\n    if (n != 1) {\n        factors.push_back(n);\n\
    \    }\n    return factors;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({2, 2})));\n    assert(candidate((8)) == (std::vector<long>({2,\
    \ 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3, 19})));\n  \
    \  assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({3, 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2,\
    \ 3, 3})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long i = 2;\n    long factor = 1;\n    while (i <= n) {\n        while (n\
    \ % i == 0) {\n            factor *= i;\n            factors.push_back(factor);\n\
    \            n /= i;\n        }\n        i++;\n    }\n    if (n != 1) {\n    \
    \    factors.push_back(n);\n    }\n    return factors;\n}\nint main() {\n    auto\
    \ candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({2, 2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3,\
    \ 19})));\n    assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n\
    \    assert(candidate((185193)) == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({3, 19, 19, 19})));\n   \
    \ assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n}\n"
  stdout: ''
  stderr: "tmp95y9sq35: /tmp/tmp95y9sq35.cpp:32: int main(): Assertion `candidate((4))\
    \ == (std::vector<long>({2, 2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long p = n;\n    long q = n;\n    long r = n;\n    long s = n;\n    long\
    \ t = n;\n    long u = n;\n    long v = n;\n    long w = n;\n    long x = n;\n\
    \    long y = n;\n    long z = n;\n    long a = n;\n    long b = n;\n    long\
    \ c = n;\n    long d = n;\n    long e = n;\n    long f = n;\n    long g = n;\n\
    \    long h = n;\n    long i = n;\n    long j = n;\n    long k = n;\n    long\
    \ l = n;\n    long m = n;\n    long n = n;\n    long o = n;\n    long p = n;\n\
    \    long q = n;\n    long r = n;\n    long s = n;\n    long t = n;\n    long\
    \ u = n;\n    long v = n;\n    long w = n;\n    long x = n;\n    long y = n;\n\
    \    long z = n;\n    long a = n;\n    long b = n;\n    long c = n;\n    long\
    \ d = n;\n    long e = n;\n    long f = n;\n    long g = n;\n    long h = n;\n\
    \    long i = n;\n    long j = n;\n    long k = n;\n    long l = n;\n    long\
    \ m = n;\n    long n = n;\n    long o = n;\n    long p = n;\n    long q = n;\n\
    \    long r = n;\n    long s = n;\n    long t = n;\n    long u = n;\n    long\
    \ v = n;\n    long w = n;\n    long x = n;\n    long y = n;\n    long z = n;\n\
    \    long a = n;\n    long b = n;\n    long c = n;\n    long d = n;\n    long\
    \ e = n;\n    long f = n;\n    long g = n;\n    long h = n;\n    long i = n;\n\
    \    long j = n;\n    long k = n;\n    long l = n;\n    long m = n;\n    long\
    \ n = n;\n    long o = n;\n    long p = n;\n    long q = n;\n    long r = n;\n\
    \    long s = n;\n    long t = n;\n    long u = n;\n    long v = n;\n    long\
    \ w = n;\n    long x = n;\n    long y = n;\n    long z = n;\n    long a = n;\n\
    \    long b = n;\n    long c = n;\n    long d = n;\n    long e = n;\n    long\
    \ f = n;\n    long g = n;\n    long h = n;\n    long i = n;\n    long j = n;\n\
    \    long k = n;\n    long l = n;\n\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({2, 2})));\n    assert(candidate((8)) == (std::vector<long>({2,\
    \ 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3, 19})));\n  \
    \  assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({3, 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2,\
    \ 3, 3})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpc10bzmcv.cpp: In function \u2018std::vector<long int> factorize(long\
    \ int)\u2019:\n/tmp/tmpc10bzmcv.cpp:38:10: error: declaration of \u2018long int\
    \ n\u2019 shadows a parameter\n   38 |     long n = n;\n      |          ^\n/tmp/tmpc10bzmcv.cpp:40:10:\
    \ error: redeclaration of \u2018long int p\u2019\n   40 |     long p = n;\n  \
    \    |          ^\n/tmp/tmpc10bzmcv.cpp:14:10: note: \u2018long int p\u2019 previously\
    \ declared here\n   14 |     long p = n;\n      |          ^\n/tmp/tmpc10bzmcv.cpp:41:10:\
    \ error: redeclaration of \u2018long int q\u2019\n   41 |     long q = n;\n  \
    \    |          ^\n/tmp/tmpc10bzmcv.cpp:15:10: note: \u2018long int q\u2019 previously\
    \ declared here\n   15 |     long q = n;\n      |          ^\n/tmp/tmpc10bzmcv.cpp:42:10:\
    \ error: redeclaration of \u2018long int r\u2019\n   42 |     long r = n;\n  \
    \    |          ^\n/tmp/tmpc10bzmcv.cpp:16:10: note: \u2018long int r\u2019 previously\
    \ declared here\n   16 |     long r = n;\n      |          ^\n/tmp/tmpc10bzmcv.cpp:43:10:\
    \ error: redeclaration of \u2018long int s\u2019\n   43 |     long s = n;\n  \
    \    |          ^\n/tmp/tmpc10bzmcv.cpp:17:10: note: \u2018long int s\u2019 previously\
    \ declared here\n   17 |     long s = n;\n      |          ^\n/tmp/tmpc10bzmcv.cpp:44:10:\
    \ error: redeclaration of \u2018long int t\u2019\n   44 |     long t = n;\n  \
    \    |          ^\n/tmp/tmpc10bzmcv.cpp:18:10: note: \u2018long int t\u2019 previously\
    \ declared here\n   18 |     long t = n;\n      |          ^\n/tmp/tmpc10bzmcv.cpp:45:10:\
    \ error: redeclaration of \u2018long int u\u2019\n   45 |     long u = n;\n  \
    \    |          ^\n/tmp/tmpc10bzmcv.cpp:19:10: note: \u2018long int u\u2019 previously\
    \ declared here\n   19 |     long u = n;\n      |          ^\n/tmp/tmpc10bzmcv.cpp:46:10:\
    \ error: redeclaration of \u2018long int v\u2019\n   46 |     long v = n;\n  \
    \    |          ^\n/tmp/tmpc10bzmcv.cpp:20:10: note: \u2018long int v\u2019 previously\
    \ declared here\n   20 |     long v = n;\n      |          ^\n/tmp/tmpc10bzmcv.cpp:47:10:\
    \ error: redeclaration of \u2018long int w\u2019\n   47 |     long w = n;\n  \
    \    |          ^\n/tmp/tmpc10bzmcv.cpp:21:10: note: \u2018long int w\u2019 previously\
    \ declared here\n   21 |     long w = n;\n      |          ^\n/tmp/tmpc10bzmcv.cpp:48:10:\
    \ error: redeclaration of \u2018long i"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long i = 2;\n    long p = n;\n    while (p % i == 0) {\n        factors.push_back(i);\n\
    \        p /= i;\n    }\n    while (p != 1) {\n        factors.push_back(p);\n\
    \        p /= p;\n    }\n    return factors;\n}\nint main() {\n    auto candidate\
    \ = factorize;\n    assert(candidate((2)) == (std::vector<long>({2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({2, 2})));\n    assert(candidate((8)) == (std::vector<long>({2,\
    \ 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3, 19})));\n  \
    \  assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({3, 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2,\
    \ 3, 3})));\n}\n"
  stdout: ''
  stderr: "tmp6q9unv3d: /tmp/tmp6q9unv3d.cpp:31: int main(): Assertion `candidate((57))\
    \ == (std::vector<long>({3, 19}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long i = 2;\n    while (i <= sqrt(n)) {\n        while (n % i == 0) {\n \
    \           factors.push_back(i);\n            n /= i;\n        }\n        i++;\n\
    \    }\n    if (n > 1) {\n        factors.push_back(n);\n    }\n    return factors;\n\
    }\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2)) ==\
    \ (std::vector<long>({2})));\n    assert(candidate((4)) == (std::vector<long>({2,\
    \ 2})));\n    assert(candidate((8)) == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({3, 19})));\n    assert(candidate((3249)) == (std::vector<long>({3,\
    \ 3, 19, 19})));\n    assert(candidate((185193)) == (std::vector<long>({3, 3,\
    \ 3, 19, 19, 19})));\n    assert(candidate((20577)) == (std::vector<long>({3,\
    \ 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long i = 2;\n    while (i <= n) {\n        while (n % i == 0) {\n       \
    \     factors.push_back(i);\n            n /= i;\n        }\n        i++;\n  \
    \  }\n    if (n != 1) {\n        factors.push_back(n);\n    }\n    return factors;\n\
    }\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2)) ==\
    \ (std::vector<long>({2})));\n    assert(candidate((4)) == (std::vector<long>({2,\
    \ 2})));\n    assert(candidate((8)) == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({3, 19})));\n    assert(candidate((3249)) == (std::vector<long>({3,\
    \ 3, 19, 19})));\n    assert(candidate((185193)) == (std::vector<long>({3, 3,\
    \ 3, 19, 19, 19})));\n    assert(candidate((20577)) == (std::vector<long>({3,\
    \ 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long i = 2;\n    long p = n;\n    while (p != 1) {\n        while (p % i\
    \ == 0) {\n            factors.push_back(i);\n            p /= i;\n        }\n\
    \        i++;\n    }\n    return factors;\n}\nint main() {\n    auto candidate\
    \ = factorize;\n    assert(candidate((2)) == (std::vector<long>({2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({2, 2})));\n    assert(candidate((8)) == (std::vector<long>({2,\
    \ 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3, 19})));\n  \
    \  assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({3, 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2,\
    \ 3, 3})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long i = 2;\n    while (i < n) {\n        if (n % i == 0) {\n           \
    \ factors.push_back(i);\n            while (n / i > i) {\n                n /=\
    \ i;\n                factors.push_back(i);\n            }\n        }\n      \
    \  i++;\n    }\n    return factors;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({2, 2})));\n    assert(candidate((8)) == (std::vector<long>({2,\
    \ 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3, 19})));\n  \
    \  assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({3, 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2,\
    \ 3, 3})));\n}\n"
  stdout: ''
  stderr: "tmppnw61n8y: /tmp/tmppnw61n8y.cpp:29: int main(): Assertion `candidate((2))\
    \ == (std::vector<long>({2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long factor = 1;\n    long i = 2;\n    while (i <= n) {\n        while (n\
    \ % i == 0) {\n            factors.push_back(i);\n            n /= i;\n      \
    \  }\n        i++;\n    }\n    if (n != 1) {\n        factors.push_back(n);\n\
    \    }\n    return factors;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({2, 2})));\n    assert(candidate((8)) == (std::vector<long>({2,\
    \ 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3, 19})));\n  \
    \  assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({3, 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2,\
    \ 3, 3})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long i = 2;\n    while (i <= sqrt(n)) {\n        while (n % i == 0) {\n \
    \           factors.push_back(i);\n            n /= i;\n        }\n        i++;\n\
    \    }\n    if (n != 1) {\n        factors.push_back(n);\n    }\n    return factors;\n\
    }\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2)) ==\
    \ (std::vector<long>({2})));\n    assert(candidate((4)) == (std::vector<long>({2,\
    \ 2})));\n    assert(candidate((8)) == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({3, 19})));\n    assert(candidate((3249)) == (std::vector<long>({3,\
    \ 3, 19, 19})));\n    assert(candidate((185193)) == (std::vector<long>({3, 3,\
    \ 3, 19, 19, 19})));\n    assert(candidate((20577)) == (std::vector<long>({3,\
    \ 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long i = 2;\n    while (i <= n) {\n        while (n % i == 0) {\n       \
    \     factors.push_back(i);\n            n /= i;\n        }\n        i++;\n  \
    \  }\n    if (n != 1)\n        factors.push_back(n);\n    return factors;\n}\n\
    int main() {\n    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({2, 2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3,\
    \ 19})));\n    assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n\
    \    assert(candidate((185193)) == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({3, 19, 19, 19})));\n   \
    \ assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long i = 2;\n    while (i <= n) {\n        while (n % i == 0) {\n       \
    \     factors.push_back(i);\n            n /= i;\n        }\n        i++;\n  \
    \  }\n    if (n != 1) {\n        factors.push_back(n);\n    }\n    return factors;\n\
    }\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2)) ==\
    \ (std::vector<long>({2})));\n    assert(candidate((4)) == (std::vector<long>({2,\
    \ 2})));\n    assert(candidate((8)) == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({3, 19})));\n    assert(candidate((3249)) == (std::vector<long>({3,\
    \ 3, 19, 19})));\n    assert(candidate((185193)) == (std::vector<long>({3, 3,\
    \ 3, 19, 19, 19})));\n    assert(candidate((20577)) == (std::vector<long>({3,\
    \ 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long i = 2;\n    while (i <= sqrt(n)) {\n        while (n % i == 0) {\n \
    \           factors.push_back(i);\n            n /= i;\n        }\n        i++;\n\
    \    }\n    if (n != 1) {\n        factors.push_back(n);\n    }\n    return factors;\n\
    }\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2)) ==\
    \ (std::vector<long>({2})));\n    assert(candidate((4)) == (std::vector<long>({2,\
    \ 2})));\n    assert(candidate((8)) == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({3, 19})));\n    assert(candidate((3249)) == (std::vector<long>({3,\
    \ 3, 19, 19})));\n    assert(candidate((185193)) == (std::vector<long>({3, 3,\
    \ 3, 19, 19, 19})));\n    assert(candidate((20577)) == (std::vector<long>({3,\
    \ 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long i = 2;\n    while (i <= n) {\n        while (n % i == 0) {\n       \
    \     factors.push_back(i);\n            n /= i;\n        }\n        i++;\n  \
    \  }\n    if (n != 1) {\n        factors.push_back(n);\n    }\n    return factors;\n\
    }\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2)) ==\
    \ (std::vector<long>({2})));\n    assert(candidate((4)) == (std::vector<long>({2,\
    \ 2})));\n    assert(candidate((8)) == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({3, 19})));\n    assert(candidate((3249)) == (std::vector<long>({3,\
    \ 3, 19, 19})));\n    assert(candidate((185193)) == (std::vector<long>({3, 3,\
    \ 3, 19, 19, 19})));\n    assert(candidate((20577)) == (std::vector<long>({3,\
    \ 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long i = 2;\n    while (i <= sqrt(n)) {\n        while (n % i == 0) {\n \
    \           factors.push_back(i);\n            n /= i;\n        }\n        i++;\n\
    \    }\n    if (n > 1) {\n        factors.push_back(n);\n    }\n    return factors;\n\
    }\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2)) ==\
    \ (std::vector<long>({2})));\n    assert(candidate((4)) == (std::vector<long>({2,\
    \ 2})));\n    assert(candidate((8)) == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({3, 19})));\n    assert(candidate((3249)) == (std::vector<long>({3,\
    \ 3, 19, 19})));\n    assert(candidate((185193)) == (std::vector<long>({3, 3,\
    \ 3, 19, 19, 19})));\n    assert(candidate((20577)) == (std::vector<long>({3,\
    \ 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long i = 2;\n    while (i <= n) {\n        while (n % i == 0) {\n       \
    \     factors.push_back(i);\n            n /= i;\n        }\n        i++;\n  \
    \  }\n    if (n > 1) {\n        factors.push_back(n);\n    }\n    return factors;\n\
    }\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2)) ==\
    \ (std::vector<long>({2})));\n    assert(candidate((4)) == (std::vector<long>({2,\
    \ 2})));\n    assert(candidate((8)) == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({3, 19})));\n    assert(candidate((3249)) == (std::vector<long>({3,\
    \ 3, 19, 19})));\n    assert(candidate((185193)) == (std::vector<long>({3, 3,\
    \ 3, 19, 19, 19})));\n    assert(candidate((20577)) == (std::vector<long>({3,\
    \ 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long factor = 1;\n    long count = 0;\n    while (n != 1) {\n        while\
    \ (n % factor == 0) {\n            factors.push_back(factor);\n            n /=\
    \ factor;\n            count++;\n        }\n        factor++;\n    }\n    factors.push_back(factor);\n\
    \    return factors;\n}\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2))\
    \ == (std::vector<long>({2})));\n    assert(candidate((4)) == (std::vector<long>({2,\
    \ 2})));\n    assert(candidate((8)) == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({3, 19})));\n    assert(candidate((3249)) == (std::vector<long>({3,\
    \ 3, 19, 19})));\n    assert(candidate((185193)) == (std::vector<long>({3, 3,\
    \ 3, 19, 19, 19})));\n    assert(candidate((20577)) == (std::vector<long>({3,\
    \ 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long factor = 1;\n    long i = 2;\n    while (i <= n) {\n        while (n\
    \ % i == 0) {\n            factors.push_back(i);\n            n /= i;\n      \
    \  }\n        i++;\n    }\n    if (n > 1) {\n        factors.push_back(n);\n \
    \   }\n    return factors;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({2, 2})));\n    assert(candidate((8)) == (std::vector<long>({2,\
    \ 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3, 19})));\n  \
    \  assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({3, 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2,\
    \ 3, 3})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long p = n;\n    long q = n;\n    long r = n;\n    long s = n;\n    long\
    \ t = n;\n    long u = n;\n    long v = n;\n    long w = n;\n    long x = n;\n\
    \    long y = n;\n    long z = n;\n    long a = n;\n    long b = n;\n    long\
    \ c = n;\n    long d = n;\n    long e = n;\n    long f = n;\n    long g = n;\n\
    \    long h = n;\n    long i = n;\n    long j = n;\n    long k = n;\n    long\
    \ l = n;\n    long m = n;\n    long n = n;\n    long o = n;\n    long p = n;\n\
    \    long q = n;\n    long r = n;\n    long s = n;\n    long t = n;\n    long\
    \ u = n;\n    long v = n;\n    long w = n;\n    long x = n;\n    long y = n;\n\
    \    long z = n;\n    long a = n;\n    long b = n;\n    long c = n;\n    long\
    \ d = n;\n    long e = n;\n    long f = n;\n    long g = n;\n    long h = n;\n\
    \    long i = n;\n    long j = n;\n    long k = n;\n    long l = n;\n    long\
    \ m = n;\n    long n = n;\n    long o = n;\n    long p = n;\n    long q = n;\n\
    \    long r = n;\n    long s = n;\n    long t = n;\n    long u = n;\n    long\
    \ v = n;\n    long w = n;\n    long x = n;\n    long y = n;\n    long z = n;\n\
    \    long a = n;\n    long b = n;\n    long c = n;\n    long d = n;\n    long\
    \ e = n;\n    long f = n;\n    long g = n;\n    long h = n;\n    long i = n;\n\
    \    long j = n;\n    long k = n;\n    long l = n;\n    long m = n;\n    long\
    \ n = n;\n    long o = n;\n    long p = n;\n    long q = n;\n    long r = n;\n\
    \    long s = n;\n    long t = n;\n    long u = n;\n    long v = n;\n    long\
    \ w = n;\n    long x = n;\n    long y = n;\n    long z = n;\n    long a = n;\n\
    \    long b = n;\n    long c = n;\n    long d = n;\n    long e = n;\n    long\
    \ f = n;\n    long g = n;\n    long h = n;\n    long i = n;\n    long j = n;\n\
    \    long k = n;\n    long l = n;\n\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({2, 2})));\n    assert(candidate((8)) == (std::vector<long>({2,\
    \ 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3, 19})));\n  \
    \  assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({3, 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2,\
    \ 3, 3})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpuo3sxjn1.cpp: In function \u2018std::vector<long int> factorize(long\
    \ int)\u2019:\n/tmp/tmpuo3sxjn1.cpp:38:10: error: declaration of \u2018long int\
    \ n\u2019 shadows a parameter\n   38 |     long n = n;\n      |          ^\n/tmp/tmpuo3sxjn1.cpp:40:10:\
    \ error: redeclaration of \u2018long int p\u2019\n   40 |     long p = n;\n  \
    \    |          ^\n/tmp/tmpuo3sxjn1.cpp:14:10: note: \u2018long int p\u2019 previously\
    \ declared here\n   14 |     long p = n;\n      |          ^\n/tmp/tmpuo3sxjn1.cpp:41:10:\
    \ error: redeclaration of \u2018long int q\u2019\n   41 |     long q = n;\n  \
    \    |          ^\n/tmp/tmpuo3sxjn1.cpp:15:10: note: \u2018long int q\u2019 previously\
    \ declared here\n   15 |     long q = n;\n      |          ^\n/tmp/tmpuo3sxjn1.cpp:42:10:\
    \ error: redeclaration of \u2018long int r\u2019\n   42 |     long r = n;\n  \
    \    |          ^\n/tmp/tmpuo3sxjn1.cpp:16:10: note: \u2018long int r\u2019 previously\
    \ declared here\n   16 |     long r = n;\n      |          ^\n/tmp/tmpuo3sxjn1.cpp:43:10:\
    \ error: redeclaration of \u2018long int s\u2019\n   43 |     long s = n;\n  \
    \    |          ^\n/tmp/tmpuo3sxjn1.cpp:17:10: note: \u2018long int s\u2019 previously\
    \ declared here\n   17 |     long s = n;\n      |          ^\n/tmp/tmpuo3sxjn1.cpp:44:10:\
    \ error: redeclaration of \u2018long int t\u2019\n   44 |     long t = n;\n  \
    \    |          ^\n/tmp/tmpuo3sxjn1.cpp:18:10: note: \u2018long int t\u2019 previously\
    \ declared here\n   18 |     long t = n;\n      |          ^\n/tmp/tmpuo3sxjn1.cpp:45:10:\
    \ error: redeclaration of \u2018long int u\u2019\n   45 |     long u = n;\n  \
    \    |          ^\n/tmp/tmpuo3sxjn1.cpp:19:10: note: \u2018long int u\u2019 previously\
    \ declared here\n   19 |     long u = n;\n      |          ^\n/tmp/tmpuo3sxjn1.cpp:46:10:\
    \ error: redeclaration of \u2018long int v\u2019\n   46 |     long v = n;\n  \
    \    |          ^\n/tmp/tmpuo3sxjn1.cpp:20:10: note: \u2018long int v\u2019 previously\
    \ declared here\n   20 |     long v = n;\n      |          ^\n/tmp/tmpuo3sxjn1.cpp:47:10:\
    \ error: redeclaration of \u2018long int w\u2019\n   47 |     long w = n;\n  \
    \    |          ^\n/tmp/tmpuo3sxjn1.cpp:21:10: note: \u2018long int w\u2019 previously\
    \ declared here\n   21 |     long w = n;\n      |          ^\n/tmp/tmpuo3sxjn1.cpp:48:10:\
    \ error: redeclaration of \u2018long i"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long factor = 1;\n    for (long i = 2; i <= n; i++) {\n        while (n %\
    \ i == 0) {\n            factor *= i;\n            n /= i;\n        }\n      \
    \  factors.push_back(factor);\n        factor = 1;\n    }\n    return factors;\n\
    }\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2)) ==\
    \ (std::vector<long>({2})));\n    assert(candidate((4)) == (std::vector<long>({2,\
    \ 2})));\n    assert(candidate((8)) == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({3, 19})));\n    assert(candidate((3249)) == (std::vector<long>({3,\
    \ 3, 19, 19})));\n    assert(candidate((185193)) == (std::vector<long>({3, 3,\
    \ 3, 19, 19, 19})));\n    assert(candidate((20577)) == (std::vector<long>({3,\
    \ 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n\
    }\n"
  stdout: ''
  stderr: "tmp79sm_zty: /tmp/tmp79sm_zty.cpp:28: int main(): Assertion `candidate((4))\
    \ == (std::vector<long>({2, 2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long p = n;\n    long q = n;\n    long r = n;\n    long s = n;\n    long\
    \ t = n;\n    long u = n;\n    long v = n;\n    long w = n;\n    long x = n;\n\
    \    long y = n;\n    long z = n;\n    long a = n;\n    long b = n;\n    long\
    \ c = n;\n    long d = n;\n    long e = n;\n    long f = n;\n    long g = n;\n\
    \    long h = n;\n    long i = n;\n    long j = n;\n    long k = n;\n    long\
    \ l = n;\n    long m = n;\n    long n = n;\n    long o = n;\n    long p = n;\n\
    \    long q = n;\n    long r = n;\n    long s = n;\n    long t = n;\n    long\
    \ u = n;\n    long v = n;\n    long w = n;\n    long x = n;\n    long y = n;\n\
    \    long z = n;\n    long a = n;\n    long b = n;\n    long c = n;\n    long\
    \ d = n;\n    long e = n;\n    long f = n;\n    long g = n;\n    long h = n;\n\
    \    long i = n;\n    long j = n;\n    long k = n;\n    long l = n;\n    long\
    \ m = n;\n    long n = n;\n    long o = n;\n    long p = n;\n    long q = n;\n\
    \    long r = n;\n    long s = n;\n    long t = n;\n    long u = n;\n    long\
    \ v = n;\n    long w = n;\n    long x = n;\n    long y = n;\n    long z = n;\n\
    \    long a = n;\n    long b = n;\n    long c = n;\n    long d = n;\n    long\
    \ e = n;\n    long f = n;\n    long g = n;\n    long h = n;\n    long i = n;\n\
    \    long j = n;\n    long k = n;\n    long l = n;\n    long m = n;\n    long\
    \ n = n;\n    long o = n;\n    long p = n;\n    long q = n;\n    long r = n;\n\
    \    long s = n;\n    long t = n;\n    long u = n;\n    long v = n;\n    long\
    \ w = n;\n    long x = n;\n    long y = n;\n    long z = n;\n    long a = n;\n\
    \    long b = n;\n    long c = n;\n    long d = n;\n    long e = n;\n    long\
    \ f = n;\n    long g = n;\n    long h = n;\n    long i = n;\n    long j = n;\n\
    \    long k = n;\n    long l = n;\n\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({2, 2})));\n    assert(candidate((8)) == (std::vector<long>({2,\
    \ 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3, 19})));\n  \
    \  assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({3, 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2,\
    \ 3, 3})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpcq71q_8j.cpp: In function \u2018std::vector<long int> factorize(long\
    \ int)\u2019:\n/tmp/tmpcq71q_8j.cpp:38:10: error: declaration of \u2018long int\
    \ n\u2019 shadows a parameter\n   38 |     long n = n;\n      |          ^\n/tmp/tmpcq71q_8j.cpp:40:10:\
    \ error: redeclaration of \u2018long int p\u2019\n   40 |     long p = n;\n  \
    \    |          ^\n/tmp/tmpcq71q_8j.cpp:14:10: note: \u2018long int p\u2019 previously\
    \ declared here\n   14 |     long p = n;\n      |          ^\n/tmp/tmpcq71q_8j.cpp:41:10:\
    \ error: redeclaration of \u2018long int q\u2019\n   41 |     long q = n;\n  \
    \    |          ^\n/tmp/tmpcq71q_8j.cpp:15:10: note: \u2018long int q\u2019 previously\
    \ declared here\n   15 |     long q = n;\n      |          ^\n/tmp/tmpcq71q_8j.cpp:42:10:\
    \ error: redeclaration of \u2018long int r\u2019\n   42 |     long r = n;\n  \
    \    |          ^\n/tmp/tmpcq71q_8j.cpp:16:10: note: \u2018long int r\u2019 previously\
    \ declared here\n   16 |     long r = n;\n      |          ^\n/tmp/tmpcq71q_8j.cpp:43:10:\
    \ error: redeclaration of \u2018long int s\u2019\n   43 |     long s = n;\n  \
    \    |          ^\n/tmp/tmpcq71q_8j.cpp:17:10: note: \u2018long int s\u2019 previously\
    \ declared here\n   17 |     long s = n;\n      |          ^\n/tmp/tmpcq71q_8j.cpp:44:10:\
    \ error: redeclaration of \u2018long int t\u2019\n   44 |     long t = n;\n  \
    \    |          ^\n/tmp/tmpcq71q_8j.cpp:18:10: note: \u2018long int t\u2019 previously\
    \ declared here\n   18 |     long t = n;\n      |          ^\n/tmp/tmpcq71q_8j.cpp:45:10:\
    \ error: redeclaration of \u2018long int u\u2019\n   45 |     long u = n;\n  \
    \    |          ^\n/tmp/tmpcq71q_8j.cpp:19:10: note: \u2018long int u\u2019 previously\
    \ declared here\n   19 |     long u = n;\n      |          ^\n/tmp/tmpcq71q_8j.cpp:46:10:\
    \ error: redeclaration of \u2018long int v\u2019\n   46 |     long v = n;\n  \
    \    |          ^\n/tmp/tmpcq71q_8j.cpp:20:10: note: \u2018long int v\u2019 previously\
    \ declared here\n   20 |     long v = n;\n      |          ^\n/tmp/tmpcq71q_8j.cpp:47:10:\
    \ error: redeclaration of \u2018long int w\u2019\n   47 |     long w = n;\n  \
    \    |          ^\n/tmp/tmpcq71q_8j.cpp:21:10: note: \u2018long int w\u2019 previously\
    \ declared here\n   21 |     long w = n;\n      |          ^\n/tmp/tmpcq71q_8j.cpp:48:10:\
    \ error: redeclaration of \u2018long i"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long factor = 1;\n    long count = 0;\n    while (n != 1) {\n        while\
    \ (n % factor == 0) {\n            factors.push_back(factor);\n            n /=\
    \ factor;\n            count++;\n        }\n        factor++;\n    }\n    factors.push_back(factor);\n\
    \    return factors;\n}\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2))\
    \ == (std::vector<long>({2})));\n    assert(candidate((4)) == (std::vector<long>({2,\
    \ 2})));\n    assert(candidate((8)) == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({3, 19})));\n    assert(candidate((3249)) == (std::vector<long>({3,\
    \ 3, 19, 19})));\n    assert(candidate((185193)) == (std::vector<long>({3, 3,\
    \ 3, 19, 19, 19})));\n    assert(candidate((20577)) == (std::vector<long>({3,\
    \ 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long factor = 1;\n    long counter = 1;\n    long temp = n;\n    while (temp\
    \ != 1) {\n        while (temp % factor == 0) {\n            factors.push_back(factor);\n\
    \            counter += 1;\n            temp /= factor;\n        }\n        factor\
    \ *= factor;\n    }\n    return factors;\n}\nint main() {\n    auto candidate\
    \ = factorize;\n    assert(candidate((2)) == (std::vector<long>({2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({2, 2})));\n    assert(candidate((8)) == (std::vector<long>({2,\
    \ 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3, 19})));\n  \
    \  assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({3, 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2,\
    \ 3, 3})));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long factor = 1;\n    long i = 2;\n    while (i <= n / factor) {\n      \
    \  while (n % i == 0) {\n            factors.push_back(i);\n            n /= i;\n\
    \        }\n        i++;\n    }\n    if (n != 1) {\n        factors.push_back(n);\n\
    \    }\n    return factors;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({2, 2})));\n    assert(candidate((8)) == (std::vector<long>({2,\
    \ 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3, 19})));\n  \
    \  assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({3, 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2,\
    \ 3, 3})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long factor = 1;\n    long limit = sqrt(n);\n    for (long i = 2; i <= limit;\
    \ i++) {\n        while (n % i == 0) {\n            factor *= i;\n           \
    \ n /= i;\n            factors.push_back(factor);\n        }\n    }\n    if (n\
    \ != 1) {\n        factors.push_back(n);\n    }\n    return factors;\n}\nint main()\
    \ {\n    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({2, 2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3,\
    \ 19})));\n    assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n\
    \    assert(candidate((185193)) == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({3, 19, 19, 19})));\n   \
    \ assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n}\n"
  stdout: ''
  stderr: "tmp3n1ook6s: /tmp/tmp3n1ook6s.cpp:31: int main(): Assertion `candidate((4))\
    \ == (std::vector<long>({2, 2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long i = 2;\n    long factor = 1;\n    while (i <= n / i) {\n        while\
    \ (n % i == 0) {\n            factor *= i;\n            factors.push_back(factor);\n\
    \            n /= i;\n        }\n        i++;\n    }\n    if (n != 1) {\n    \
    \    factors.push_back(n);\n    }\n    return factors;\n}\nint main() {\n    auto\
    \ candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({2, 2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3,\
    \ 19})));\n    assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n\
    \    assert(candidate((185193)) == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({3, 19, 19, 19})));\n   \
    \ assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n}\n"
  stdout: ''
  stderr: "tmpa5ytqwkt: /tmp/tmpa5ytqwkt.cpp:32: int main(): Assertion `candidate((4))\
    \ == (std::vector<long>({2, 2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long i = 2;\n    while (i <= sqrt(n)) {\n        while (n % i == 0) {\n \
    \           factors.push_back(i);\n            n /= i;\n        }\n        i++;\n\
    \    }\n    if (n != 1) {\n        factors.push_back(n);\n    }\n    return factors;\n\
    }\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2)) ==\
    \ (std::vector<long>({2})));\n    assert(candidate((4)) == (std::vector<long>({2,\
    \ 2})));\n    assert(candidate((8)) == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({3, 19})));\n    assert(candidate((3249)) == (std::vector<long>({3,\
    \ 3, 19, 19})));\n    assert(candidate((185193)) == (std::vector<long>({3, 3,\
    \ 3, 19, 19, 19})));\n    assert(candidate((20577)) == (std::vector<long>({3,\
    \ 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long factor = 1;\n    long i = 2;\n    while (i <= n) {\n        if (n %\
    \ i == 0) {\n            factor *= i;\n            while (n % i == 0) {\n    \
    \            factors.push_back(factor);\n                n /= i;\n           \
    \ }\n        }\n        i++;\n    }\n    if (n != 1) {\n        factors.push_back(factor);\n\
    \    }\n    return factors;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({2, 2})));\n    assert(candidate((8)) == (std::vector<long>({2,\
    \ 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3, 19})));\n  \
    \  assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({3, 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2,\
    \ 3, 3})));\n}\n"
  stdout: ''
  stderr: "tmpxp5r37lv: /tmp/tmpxp5r37lv.cpp:36: int main(): Assertion `candidate((57))\
    \ == (std::vector<long>({3, 19}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long p = n;\n    long q = 1;\n    long r = 1;\n    long m = 1;\n    long\
    \ t = 1;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n\
    \    long y = 1;\n    long z = 1;\n    long a = 1;\n    long b = 1;\n    long\
    \ c = 1;\n    long d = 1;\n    long e = 1;\n    long f = 1;\n    long g = 1;\n\
    \    long h = 1;\n    long i = 1;\n    long j = 1;\n    long k = 1;\n    long\
    \ l = 1;\n    long m = 1;\n    long n = 1;\n    long o = 1;\n    long p = 1;\n\
    \    long q = 1;\n    long r = 1;\n    long s = 1;\n    long t = 1;\n    long\
    \ u = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n    long y = 1;\n\
    \    long z = 1;\n    long a = 1;\n    long b = 1;\n    long c = 1;\n    long\
    \ d = 1;\n    long e = 1;\n    long f = 1;\n    long g = 1;\n    long h = 1;\n\
    \    long i = 1;\n    long j = 1;\n    long k = 1;\n    long l = 1;\n    long\
    \ m = 1;\n    long n = 1;\n    long o = 1;\n    long p = 1;\n    long q = 1;\n\
    \    long r = 1;\n    long s = 1;\n    long t = 1;\n    long u = 1;\n    long\
    \ v = 1;\n    long w = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n\
    \    long a = 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n    long\
    \ e = 1;\n    long f = 1;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n\
    \    long j = 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n    long\
    \ n = 1;\n    long o = 1;\n    long p = 1;\n    long q = 1;\n    long r = 1;\n\
    \    long s = 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n    long\
    \ w = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n    long a = 1;\n\
    \    long b = 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n    long\
    \ f = 1;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n    long j = 1;\n\
    \    long k = 1;\n    long l = 1;\n\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({2, 2})));\n    assert(candidate((8)) == (std::vector<long>({2,\
    \ 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3, 19})));\n  \
    \  assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({3, 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2,\
    \ 3, 3})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpc1qaphft.cpp: In function \u2018std::vector<long int> factorize(long\
    \ int)\u2019:\n/tmp/tmpc1qaphft.cpp:37:10: error: redeclaration of \u2018long\
    \ int m\u2019\n   37 |     long m = 1;\n      |          ^\n/tmp/tmpc1qaphft.cpp:17:10:\
    \ note: \u2018long int m\u2019 previously declared here\n   17 |     long m =\
    \ 1;\n      |          ^\n/tmp/tmpc1qaphft.cpp:38:10: error: declaration of \u2018\
    long int n\u2019 shadows a parameter\n   38 |     long n = 1;\n      |       \
    \   ^\n/tmp/tmpc1qaphft.cpp:40:10: error: redeclaration of \u2018long int p\u2019\
    \n   40 |     long p = 1;\n      |          ^\n/tmp/tmpc1qaphft.cpp:14:10: note:\
    \ \u2018long int p\u2019 previously declared here\n   14 |     long p = n;\n \
    \     |          ^\n/tmp/tmpc1qaphft.cpp:41:10: error: redeclaration of \u2018\
    long int q\u2019\n   41 |     long q = 1;\n      |          ^\n/tmp/tmpc1qaphft.cpp:15:10:\
    \ note: \u2018long int q\u2019 previously declared here\n   15 |     long q =\
    \ 1;\n      |          ^\n/tmp/tmpc1qaphft.cpp:42:10: error: redeclaration of\
    \ \u2018long int r\u2019\n   42 |     long r = 1;\n      |          ^\n/tmp/tmpc1qaphft.cpp:16:10:\
    \ note: \u2018long int r\u2019 previously declared here\n   16 |     long r =\
    \ 1;\n      |          ^\n/tmp/tmpc1qaphft.cpp:44:10: error: redeclaration of\
    \ \u2018long int t\u2019\n   44 |     long t = 1;\n      |          ^\n/tmp/tmpc1qaphft.cpp:18:10:\
    \ note: \u2018long int t\u2019 previously declared here\n   18 |     long t =\
    \ 1;\n      |          ^\n/tmp/tmpc1qaphft.cpp:45:10: error: redeclaration of\
    \ \u2018long int u\u2019\n   45 |     long u = 1;\n      |          ^\n/tmp/tmpc1qaphft.cpp:19:10:\
    \ note: \u2018long int u\u2019 previously declared here\n   19 |     long u =\
    \ 1;\n      |          ^\n/tmp/tmpc1qaphft.cpp:46:10: error: redeclaration of\
    \ \u2018long int v\u2019\n   46 |     long v = 1;\n      |          ^\n/tmp/tmpc1qaphft.cpp:20:10:\
    \ note: \u2018long int v\u2019 previously declared here\n   20 |     long v =\
    \ 1;\n      |          ^\n/tmp/tmpc1qaphft.cpp:47:10: error: redeclaration of\
    \ \u2018long int w\u2019\n   47 |     long w = 1;\n      |          ^\n/tmp/tmpc1qaphft.cpp:21:10:\
    \ note: \u2018long int w\u2019 previously declared here\n   21 |     long w =\
    \ 1;\n      |          ^\n/tmp/tmpc1qaphft.cpp:48:10: error: redeclaration of\
    \ \u2018long i"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long i = 2;\n    while (i <= n / i) {\n        while (n % i == 0) {\n   \
    \         factors.push_back(i);\n            n /= i;\n        }\n        i++;\n\
    \    }\n    if (n != 1)\n        factors.push_back(n);\n    return factors;\n\
    }\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2)) ==\
    \ (std::vector<long>({2})));\n    assert(candidate((4)) == (std::vector<long>({2,\
    \ 2})));\n    assert(candidate((8)) == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({3, 19})));\n    assert(candidate((3249)) == (std::vector<long>({3,\
    \ 3, 19, 19})));\n    assert(candidate((185193)) == (std::vector<long>({3, 3,\
    \ 3, 19, 19, 19})));\n    assert(candidate((20577)) == (std::vector<long>({3,\
    \ 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long factor = 1;\n    for (long i = 2; i <= n; i++) {\n        while (n %\
    \ i == 0) {\n            factor *= i;\n            n /= i;\n            factors.push_back(factor);\n\
    \        }\n    }\n    return factors;\n}\nint main() {\n    auto candidate =\
    \ factorize;\n    assert(candidate((2)) == (std::vector<long>({2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({2, 2})));\n    assert(candidate((8)) == (std::vector<long>({2,\
    \ 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3, 19})));\n  \
    \  assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({3, 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2,\
    \ 3, 3})));\n}\n"
  stdout: ''
  stderr: "tmp741rcoqq: /tmp/tmp741rcoqq.cpp:27: int main(): Assertion `candidate((4))\
    \ == (std::vector<long>({2, 2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long factor = 1;\n    long i = 2;\n    long count = 0;\n    while (i <= n\
    \ / factor) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n            count++;\n        }\n        i++;\n    }\n \
    \   if (n != 1) {\n        factors.push_back(n);\n    }\n    return factors;\n\
    }\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2)) ==\
    \ (std::vector<long>({2})));\n    assert(candidate((4)) == (std::vector<long>({2,\
    \ 2})));\n    assert(candidate((8)) == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({3, 19})));\n    assert(candidate((3249)) == (std::vector<long>({3,\
    \ 3, 19, 19})));\n    assert(candidate((185193)) == (std::vector<long>({3, 3,\
    \ 3, 19, 19, 19})));\n    assert(candidate((20577)) == (std::vector<long>({3,\
    \ 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long factor = 1;\n    long counter = 1;\n    long temp = n;\n    while (temp\
    \ != 1) {\n        while (temp % factor == 0) {\n            factors.push_back(factor);\n\
    \            temp /= factor;\n            counter++;\n        }\n        factor\
    \ *= factor;\n    }\n    factors.push_back(factor);\n    return factors;\n}\n\
    int main() {\n    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({2, 2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3,\
    \ 19})));\n    assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n\
    \    assert(candidate((185193)) == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({3, 19, 19, 19})));\n   \
    \ assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long i = 2;\n    while (i <= n) {\n        while (n % i == 0) {\n       \
    \     factors.push_back(i);\n            n /= i;\n        }\n        i++;\n  \
    \  }\n    if (n != 1) {\n        factors.push_back(n);\n    }\n    return factors;\n\
    }\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2)) ==\
    \ (std::vector<long>({2})));\n    assert(candidate((4)) == (std::vector<long>({2,\
    \ 2})));\n    assert(candidate((8)) == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({3, 19})));\n    assert(candidate((3249)) == (std::vector<long>({3,\
    \ 3, 19, 19})));\n    assert(candidate((185193)) == (std::vector<long>({3, 3,\
    \ 3, 19, 19, 19})));\n    assert(candidate((20577)) == (std::vector<long>({3,\
    \ 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long i = 2;\n    long factor = 1;\n    while (i <= n) {\n        if (n %\
    \ i == 0) {\n            factor *= i;\n            while (n % i == 0) {\n    \
    \            n /= i;\n                factors.push_back(i);\n            }\n \
    \       }\n        i++;\n    }\n    if (n != 1) {\n        factors.push_back(n);\n\
    \    }\n    return factors;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({2, 2})));\n    assert(candidate((8)) == (std::vector<long>({2,\
    \ 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3, 19})));\n  \
    \  assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({3, 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2,\
    \ 3, 3})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long i = 2;\n    while (i <= n) {\n        while (n % i == 0) {\n       \
    \     factors.push_back(i);\n            n /= i;\n        }\n        i++;\n  \
    \  }\n    if (n > 1) {\n        factors.push_back(n);\n    }\n    return factors;\n\
    }\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2)) ==\
    \ (std::vector<long>({2})));\n    assert(candidate((4)) == (std::vector<long>({2,\
    \ 2})));\n    assert(candidate((8)) == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({3, 19})));\n    assert(candidate((3249)) == (std::vector<long>({3,\
    \ 3, 19, 19})));\n    assert(candidate((185193)) == (std::vector<long>({3, 3,\
    \ 3, 19, 19, 19})));\n    assert(candidate((20577)) == (std::vector<long>({3,\
    \ 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long p = n;\n    long q = n;\n    long r = n;\n    long s = n;\n    long\
    \ t = n;\n    long u = n;\n    long v = n;\n    long w = n;\n    long x = n;\n\
    \    long y = n;\n    long z = n;\n    long a = n;\n    long b = n;\n    long\
    \ c = n;\n    long d = n;\n    long e = n;\n    long f = n;\n    long g = n;\n\
    \    long h = n;\n    long i = n;\n    long j = n;\n    long k = n;\n    long\
    \ l = n;\n    long m = n;\n    long n = n;\n    long o = n;\n    long p = n;\n\
    \    long q = n;\n    long r = n;\n    long s = n;\n    long t = n;\n    long\
    \ u = n;\n    long v = n;\n    long w = n;\n    long x = n;\n    long y = n;\n\
    \    long z = n;\n    long a = n;\n    long b = n;\n    long c = n;\n    long\
    \ d = n;\n    long e = n;\n    long f = n;\n    long g = n;\n    long h = n;\n\
    \    long i = n;\n    long j = n;\n    long k = n;\n    long l = n;\n    long\
    \ m = n;\n    long n = n;\n    long o = n;\n    long p = n;\n    long q = n;\n\
    \    long r = n;\n    long s = n;\n    long t = n;\n    long u = n;\n    long\
    \ v = n;\n    long w = n;\n    long x = n;\n    long y = n;\n    long z = n;\n\
    \    long a = n;\n    long b = n;\n    long c = n;\n    long d = n;\n    long\
    \ e = n;\n    long f = n;\n    long g = n;\n    long h = n;\n    long i = n;\n\
    \    long j = n;\n    long k = n;\n    long l = n;\n    long m = n;\n    long\
    \ n = n;\n    long o = n;\n    long p = n;\n    long q = n;\n    long r = n;\n\
    \    long s = n;\n    long t = n;\n    long u = n;\n    long v = n;\n    long\
    \ w = n;\n    long x = n;\n    long y = n;\n    long z = n;\n    long a = n;\n\
    \    long b = n;\n    long c = n;\n    long d = n;\n    long e = n;\n    long\
    \ f = n;\n    long g = n;\n    long h = n;\n    long i = n;\n    long j = n;\n\
    \    long k = n;\n    long l = n;\n\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({2, 2})));\n    assert(candidate((8)) == (std::vector<long>({2,\
    \ 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3, 19})));\n  \
    \  assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({3, 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2,\
    \ 3, 3})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp01bvcxz4.cpp: In function \u2018std::vector<long int> factorize(long\
    \ int)\u2019:\n/tmp/tmp01bvcxz4.cpp:38:10: error: declaration of \u2018long int\
    \ n\u2019 shadows a parameter\n   38 |     long n = n;\n      |          ^\n/tmp/tmp01bvcxz4.cpp:40:10:\
    \ error: redeclaration of \u2018long int p\u2019\n   40 |     long p = n;\n  \
    \    |          ^\n/tmp/tmp01bvcxz4.cpp:14:10: note: \u2018long int p\u2019 previously\
    \ declared here\n   14 |     long p = n;\n      |          ^\n/tmp/tmp01bvcxz4.cpp:41:10:\
    \ error: redeclaration of \u2018long int q\u2019\n   41 |     long q = n;\n  \
    \    |          ^\n/tmp/tmp01bvcxz4.cpp:15:10: note: \u2018long int q\u2019 previously\
    \ declared here\n   15 |     long q = n;\n      |          ^\n/tmp/tmp01bvcxz4.cpp:42:10:\
    \ error: redeclaration of \u2018long int r\u2019\n   42 |     long r = n;\n  \
    \    |          ^\n/tmp/tmp01bvcxz4.cpp:16:10: note: \u2018long int r\u2019 previously\
    \ declared here\n   16 |     long r = n;\n      |          ^\n/tmp/tmp01bvcxz4.cpp:43:10:\
    \ error: redeclaration of \u2018long int s\u2019\n   43 |     long s = n;\n  \
    \    |          ^\n/tmp/tmp01bvcxz4.cpp:17:10: note: \u2018long int s\u2019 previously\
    \ declared here\n   17 |     long s = n;\n      |          ^\n/tmp/tmp01bvcxz4.cpp:44:10:\
    \ error: redeclaration of \u2018long int t\u2019\n   44 |     long t = n;\n  \
    \    |          ^\n/tmp/tmp01bvcxz4.cpp:18:10: note: \u2018long int t\u2019 previously\
    \ declared here\n   18 |     long t = n;\n      |          ^\n/tmp/tmp01bvcxz4.cpp:45:10:\
    \ error: redeclaration of \u2018long int u\u2019\n   45 |     long u = n;\n  \
    \    |          ^\n/tmp/tmp01bvcxz4.cpp:19:10: note: \u2018long int u\u2019 previously\
    \ declared here\n   19 |     long u = n;\n      |          ^\n/tmp/tmp01bvcxz4.cpp:46:10:\
    \ error: redeclaration of \u2018long int v\u2019\n   46 |     long v = n;\n  \
    \    |          ^\n/tmp/tmp01bvcxz4.cpp:20:10: note: \u2018long int v\u2019 previously\
    \ declared here\n   20 |     long v = n;\n      |          ^\n/tmp/tmp01bvcxz4.cpp:47:10:\
    \ error: redeclaration of \u2018long int w\u2019\n   47 |     long w = n;\n  \
    \    |          ^\n/tmp/tmp01bvcxz4.cpp:21:10: note: \u2018long int w\u2019 previously\
    \ declared here\n   21 |     long w = n;\n      |          ^\n/tmp/tmp01bvcxz4.cpp:48:10:\
    \ error: redeclaration of \u2018long i"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long factor = 1;\n    long prime = 2;\n    long count = 0;\n    while (n\
    \ > 1) {\n        while (n % prime == 0) {\n            factors.push_back(prime);\n\
    \            n /= prime;\n            count++;\n        }\n        prime++;\n\
    \    }\n    factors.push_back(factor);\n    factors.push_back(count);\n    return\
    \ factors;\n}\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2))\
    \ == (std::vector<long>({2})));\n    assert(candidate((4)) == (std::vector<long>({2,\
    \ 2})));\n    assert(candidate((8)) == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({3, 19})));\n    assert(candidate((3249)) == (std::vector<long>({3,\
    \ 3, 19, 19})));\n    assert(candidate((185193)) == (std::vector<long>({3, 3,\
    \ 3, 19, 19, 19})));\n    assert(candidate((20577)) == (std::vector<long>({3,\
    \ 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n\
    }\n"
  stdout: ''
  stderr: "tmpzcftcit0: /tmp/tmpzcftcit0.cpp:31: int main(): Assertion `candidate((2))\
    \ == (std::vector<long>({2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long i = 2;\n    while (i <= n) {\n        while (n % i == 0) {\n       \
    \     factors.push_back(i);\n            n /= i;\n        }\n        i++;\n  \
    \  }\n    if (n > 1) {\n        factors.push_back(n);\n    }\n    return factors;\n\
    }\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2)) ==\
    \ (std::vector<long>({2})));\n    assert(candidate((4)) == (std::vector<long>({2,\
    \ 2})));\n    assert(candidate((8)) == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({3, 19})));\n    assert(candidate((3249)) == (std::vector<long>({3,\
    \ 3, 19, 19})));\n    assert(candidate((185193)) == (std::vector<long>({3, 3,\
    \ 3, 19, 19, 19})));\n    assert(candidate((20577)) == (std::vector<long>({3,\
    \ 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long factor = 1;\n    long count = 0;\n    long i = 2;\n    long j = 1;\n\
    \    long k = 1;\n    while (i <= n) {\n        while (n % i == 0) {\n       \
    \     factors.push_back(i);\n            n = n / i;\n            count++;\n  \
    \      }\n        i++;\n    }\n    while (count > 0) {\n        factors.push_back(k);\n\
    \        k = k * j;\n        count--;\n    }\n    return factors;\n}\nint main()\
    \ {\n    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({2, 2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3,\
    \ 19})));\n    assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n\
    \    assert(candidate((185193)) == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({3, 19, 19, 19})));\n   \
    \ assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n}\n"
  stdout: ''
  stderr: "tmppkji2k6s: /tmp/tmppkji2k6s.cpp:36: int main(): Assertion `candidate((2))\
    \ == (std::vector<long>({2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long i = 2;\n    while (i <= sqrt(n)) {\n        while (n % i == 0) {\n \
    \           factors.push_back(i);\n            n /= i;\n        }\n        i++;\n\
    \    }\n    if (n != 1) {\n        factors.push_back(n);\n    }\n    return factors;\n\
    }\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2)) ==\
    \ (std::vector<long>({2})));\n    assert(candidate((4)) == (std::vector<long>({2,\
    \ 2})));\n    assert(candidate((8)) == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({3, 19})));\n    assert(candidate((3249)) == (std::vector<long>({3,\
    \ 3, 19, 19})));\n    assert(candidate((185193)) == (std::vector<long>({3, 3,\
    \ 3, 19, 19, 19})));\n    assert(candidate((20577)) == (std::vector<long>({3,\
    \ 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long factor = 1;\n    long factorization = 1;\n    long i = 2;\n    long\
    \ count = 1;\n    while (i <= n) {\n        while (n % i == 0) {\n           \
    \ n /= i;\n            factors.push_back(i);\n            factorization *= i;\n\
    \            count++;\n        }\n        i++;\n    }\n    factors.push_back(factorization);\n\
    \    factors.push_back(count);\n    return factors;\n}\nint main() {\n    auto\
    \ candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({2, 2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3,\
    \ 19})));\n    assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n\
    \    assert(candidate((185193)) == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({3, 19, 19, 19})));\n   \
    \ assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n}\n"
  stdout: ''
  stderr: "tmplzp_9cvs: /tmp/tmplzp_9cvs.cpp:33: int main(): Assertion `candidate((2))\
    \ == (std::vector<long>({2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long i = 2;\n    long factor = 1;\n    while (i <= n) {\n        while (n\
    \ % i == 0) {\n            factor *= i;\n            n /= i;\n        }\n    \
    \    factors.push_back(factor);\n        ++i;\n    }\n    return factors;\n}\n\
    int main() {\n    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({2, 2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3,\
    \ 19})));\n    assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n\
    \    assert(candidate((185193)) == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({3, 19, 19, 19})));\n   \
    \ assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n}\n"
  stdout: ''
  stderr: "tmpvj36cigj: /tmp/tmpvj36cigj.cpp:29: int main(): Assertion `candidate((4))\
    \ == (std::vector<long>({2, 2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long factor = 1;\n    long i = 2;\n    while (i <= n / factor) {\n      \
    \  while (n % i == 0) {\n            factors.push_back(i);\n            n /= i;\n\
    \        }\n        i++;\n    }\n    if (n != 1) {\n        factors.push_back(n);\n\
    \    }\n    return factors;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({2, 2})));\n    assert(candidate((8)) == (std::vector<long>({2,\
    \ 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3, 19})));\n  \
    \  assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({3, 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2,\
    \ 3, 3})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long i = 2;\n    while (i <= sqrt(n)) {\n        while (n % i == 0) {\n \
    \           factors.push_back(i);\n            n /= i;\n        }\n        i++;\n\
    \    }\n    if (n != 1) {\n        factors.push_back(n);\n    }\n    return factors;\n\
    }\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2)) ==\
    \ (std::vector<long>({2})));\n    assert(candidate((4)) == (std::vector<long>({2,\
    \ 2})));\n    assert(candidate((8)) == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({3, 19})));\n    assert(candidate((3249)) == (std::vector<long>({3,\
    \ 3, 19, 19})));\n    assert(candidate((185193)) == (std::vector<long>({3, 3,\
    \ 3, 19, 19, 19})));\n    assert(candidate((20577)) == (std::vector<long>({3,\
    \ 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long p = n;\n    long q = n;\n    long r = n;\n    long s = n;\n    long\
    \ t = n;\n    long u = n;\n    long v = n;\n    long w = n;\n    long x = n;\n\
    \    long y = n;\n    long z = n;\n    long a = n;\n    long b = n;\n    long\
    \ c = n;\n    long d = n;\n    long e = n;\n    long f = n;\n    long g = n;\n\
    \    long h = n;\n    long i = n;\n    long j = n;\n    long k = n;\n    long\
    \ l = n;\n    long m = n;\n    long n = n;\n    long o = n;\n    long p = n;\n\
    \    long q = n;\n    long r = n;\n    long s = n;\n    long t = n;\n    long\
    \ u = n;\n    long v = n;\n    long w = n;\n    long x = n;\n    long y = n;\n\
    \    long z = n;\n    long a = n;\n    long b = n;\n    long c = n;\n    long\
    \ d = n;\n    long e = n;\n    long f = n;\n    long g = n;\n    long h = n;\n\
    \    long i = n;\n    long j = n;\n    long k = n;\n    long l = n;\n    long\
    \ m = n;\n    long n = n;\n    long o = n;\n    long p = n;\n    long q = n;\n\
    \    long r = n;\n    long s = n;\n    long t = n;\n    long u = n;\n    long\
    \ v = n;\n    long w = n;\n    long x = n;\n    long y = n;\n    long z = n;\n\
    \    long a = n;\n    long b = n;\n    long c = n;\n    long d = n;\n    long\
    \ e = n;\n    long f = n;\n    long g = n;\n    long h = n;\n    long i = n;\n\
    \    long j = n;\n    long k = n;\n    long l = n;\n    long m = n;\n    long\
    \ n = n;\n    long o = n;\n    long p = n;\n    long q = n;\n    long r = n;\n\
    \    long s = n;\n    long t = n;\n    long u = n;\n    long v = n;\n    long\
    \ w = n;\n    long x = n;\n    long y = n;\n    long z = n;\n    long a = n;\n\
    \    long b = n;\n    long c = n;\n    long d = n;\n    long e = n;\n    long\
    \ f = n;\n    long g = n;\n    long h = n;\n    long i = n;\n    long j = n;\n\
    \    long k = n;\n    long l = n;\n\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({2, 2})));\n    assert(candidate((8)) == (std::vector<long>({2,\
    \ 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3, 19})));\n  \
    \  assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({3, 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2,\
    \ 3, 3})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmphhfiqmn1.cpp: In function \u2018std::vector<long int> factorize(long\
    \ int)\u2019:\n/tmp/tmphhfiqmn1.cpp:38:10: error: declaration of \u2018long int\
    \ n\u2019 shadows a parameter\n   38 |     long n = n;\n      |          ^\n/tmp/tmphhfiqmn1.cpp:40:10:\
    \ error: redeclaration of \u2018long int p\u2019\n   40 |     long p = n;\n  \
    \    |          ^\n/tmp/tmphhfiqmn1.cpp:14:10: note: \u2018long int p\u2019 previously\
    \ declared here\n   14 |     long p = n;\n      |          ^\n/tmp/tmphhfiqmn1.cpp:41:10:\
    \ error: redeclaration of \u2018long int q\u2019\n   41 |     long q = n;\n  \
    \    |          ^\n/tmp/tmphhfiqmn1.cpp:15:10: note: \u2018long int q\u2019 previously\
    \ declared here\n   15 |     long q = n;\n      |          ^\n/tmp/tmphhfiqmn1.cpp:42:10:\
    \ error: redeclaration of \u2018long int r\u2019\n   42 |     long r = n;\n  \
    \    |          ^\n/tmp/tmphhfiqmn1.cpp:16:10: note: \u2018long int r\u2019 previously\
    \ declared here\n   16 |     long r = n;\n      |          ^\n/tmp/tmphhfiqmn1.cpp:43:10:\
    \ error: redeclaration of \u2018long int s\u2019\n   43 |     long s = n;\n  \
    \    |          ^\n/tmp/tmphhfiqmn1.cpp:17:10: note: \u2018long int s\u2019 previously\
    \ declared here\n   17 |     long s = n;\n      |          ^\n/tmp/tmphhfiqmn1.cpp:44:10:\
    \ error: redeclaration of \u2018long int t\u2019\n   44 |     long t = n;\n  \
    \    |          ^\n/tmp/tmphhfiqmn1.cpp:18:10: note: \u2018long int t\u2019 previously\
    \ declared here\n   18 |     long t = n;\n      |          ^\n/tmp/tmphhfiqmn1.cpp:45:10:\
    \ error: redeclaration of \u2018long int u\u2019\n   45 |     long u = n;\n  \
    \    |          ^\n/tmp/tmphhfiqmn1.cpp:19:10: note: \u2018long int u\u2019 previously\
    \ declared here\n   19 |     long u = n;\n      |          ^\n/tmp/tmphhfiqmn1.cpp:46:10:\
    \ error: redeclaration of \u2018long int v\u2019\n   46 |     long v = n;\n  \
    \    |          ^\n/tmp/tmphhfiqmn1.cpp:20:10: note: \u2018long int v\u2019 previously\
    \ declared here\n   20 |     long v = n;\n      |          ^\n/tmp/tmphhfiqmn1.cpp:47:10:\
    \ error: redeclaration of \u2018long int w\u2019\n   47 |     long w = n;\n  \
    \    |          ^\n/tmp/tmphhfiqmn1.cpp:21:10: note: \u2018long int w\u2019 previously\
    \ declared here\n   21 |     long w = n;\n      |          ^\n/tmp/tmphhfiqmn1.cpp:48:10:\
    \ error: redeclaration of \u2018long i"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long p = 1;\n    long q = n;\n    long r = n;\n    long s = 1;\n    long\
    \ t = 1;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n\
    \    long y = 1;\n    long z = 1;\n    long a = 1;\n    long b = 1;\n    long\
    \ c = 1;\n    long d = 1;\n    long e = 1;\n    long f = 1;\n    long g = 1;\n\
    \    long h = 1;\n    long i = 1;\n    long j = 1;\n    long k = 1;\n    long\
    \ l = 1;\n    long m = 1;\n    long n = 1;\n    long o = 1;\n    long p = 1;\n\
    \    long q = 1;\n    long r = 1;\n    long s = 1;\n    long t = 1;\n    long\
    \ u = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n    long y = 1;\n\
    \    long z = 1;\n    long a = 1;\n    long b = 1;\n    long c = 1;\n    long\
    \ d = 1;\n    long e = 1;\n    long f = 1;\n    long g = 1;\n    long h = 1;\n\
    \    long i = 1;\n    long j = 1;\n    long k = 1;\n    long l = 1;\n    long\
    \ m = 1;\n    long n = 1;\n    long o = 1;\n    long p = 1;\n    long q = 1;\n\
    \    long r = 1;\n    long s = 1;\n    long t = 1;\n    long u = 1;\n    long\
    \ v = 1;\n    long w = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n\
    \    long a = 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n    long\
    \ e = 1;\n    long f = 1;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n\
    \    long j = 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n    long\
    \ n = 1;\n    long o = 1;\n    long p = 1;\n    long q = 1;\n    long r = 1;\n\
    \    long s = 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n    long\
    \ w = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n    long a = 1;\n\
    \    long b = 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n    long\
    \ f = 1;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n    long j = 1;\n\
    \    long k = 1;\n    long l = 1;\n\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({2, 2})));\n    assert(candidate((8)) == (std::vector<long>({2,\
    \ 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3, 19})));\n  \
    \  assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({3, 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2,\
    \ 3, 3})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp9q031l_a.cpp: In function \u2018std::vector<long int> factorize(long\
    \ int)\u2019:\n/tmp/tmp9q031l_a.cpp:38:10: error: declaration of \u2018long int\
    \ n\u2019 shadows a parameter\n   38 |     long n = 1;\n      |          ^\n/tmp/tmp9q031l_a.cpp:40:10:\
    \ error: redeclaration of \u2018long int p\u2019\n   40 |     long p = 1;\n  \
    \    |          ^\n/tmp/tmp9q031l_a.cpp:14:10: note: \u2018long int p\u2019 previously\
    \ declared here\n   14 |     long p = 1;\n      |          ^\n/tmp/tmp9q031l_a.cpp:41:10:\
    \ error: redeclaration of \u2018long int q\u2019\n   41 |     long q = 1;\n  \
    \    |          ^\n/tmp/tmp9q031l_a.cpp:15:10: note: \u2018long int q\u2019 previously\
    \ declared here\n   15 |     long q = n;\n      |          ^\n/tmp/tmp9q031l_a.cpp:42:10:\
    \ error: redeclaration of \u2018long int r\u2019\n   42 |     long r = 1;\n  \
    \    |          ^\n/tmp/tmp9q031l_a.cpp:16:10: note: \u2018long int r\u2019 previously\
    \ declared here\n   16 |     long r = n;\n      |          ^\n/tmp/tmp9q031l_a.cpp:43:10:\
    \ error: redeclaration of \u2018long int s\u2019\n   43 |     long s = 1;\n  \
    \    |          ^\n/tmp/tmp9q031l_a.cpp:17:10: note: \u2018long int s\u2019 previously\
    \ declared here\n   17 |     long s = 1;\n      |          ^\n/tmp/tmp9q031l_a.cpp:44:10:\
    \ error: redeclaration of \u2018long int t\u2019\n   44 |     long t = 1;\n  \
    \    |          ^\n/tmp/tmp9q031l_a.cpp:18:10: note: \u2018long int t\u2019 previously\
    \ declared here\n   18 |     long t = 1;\n      |          ^\n/tmp/tmp9q031l_a.cpp:45:10:\
    \ error: redeclaration of \u2018long int u\u2019\n   45 |     long u = 1;\n  \
    \    |          ^\n/tmp/tmp9q031l_a.cpp:19:10: note: \u2018long int u\u2019 previously\
    \ declared here\n   19 |     long u = 1;\n      |          ^\n/tmp/tmp9q031l_a.cpp:46:10:\
    \ error: redeclaration of \u2018long int v\u2019\n   46 |     long v = 1;\n  \
    \    |          ^\n/tmp/tmp9q031l_a.cpp:20:10: note: \u2018long int v\u2019 previously\
    \ declared here\n   20 |     long v = 1;\n      |          ^\n/tmp/tmp9q031l_a.cpp:47:10:\
    \ error: redeclaration of \u2018long int w\u2019\n   47 |     long w = 1;\n  \
    \    |          ^\n/tmp/tmp9q031l_a.cpp:21:10: note: \u2018long int w\u2019 previously\
    \ declared here\n   21 |     long w = 1;\n      |          ^\n/tmp/tmp9q031l_a.cpp:48:10:\
    \ error: redeclaration of \u2018long i"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long factor = 1;\n    long counter = 1;\n    long i = 2;\n    while (i <=\
    \ n / factor) {\n        while (n % i == 0) {\n            factors.push_back(factor);\n\
    \            n /= i;\n            counter++;\n        }\n        i++;\n      \
    \  factor++;\n    }\n    if (n != 1) {\n        factors.push_back(factor);\n \
    \   }\n    return factors;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({2, 2})));\n    assert(candidate((8)) == (std::vector<long>({2,\
    \ 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3, 19})));\n  \
    \  assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({3, 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2,\
    \ 3, 3})));\n}\n"
  stdout: ''
  stderr: "tmpxey0ejw8: /tmp/tmpxey0ejw8.cpp:33: int main(): Assertion `candidate((2))\
    \ == (std::vector<long>({2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long i = 2;\n    while (i <= sqrt(n)) {\n        while (n % i == 0) {\n \
    \           factors.push_back(i);\n            n /= i;\n        }\n        i++;\n\
    \    }\n    if (n != 1) {\n        factors.push_back(n);\n    }\n    return factors;\n\
    }\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2)) ==\
    \ (std::vector<long>({2})));\n    assert(candidate((4)) == (std::vector<long>({2,\
    \ 2})));\n    assert(candidate((8)) == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({3, 19})));\n    assert(candidate((3249)) == (std::vector<long>({3,\
    \ 3, 19, 19})));\n    assert(candidate((185193)) == (std::vector<long>({3, 3,\
    \ 3, 19, 19, 19})));\n    assert(candidate((20577)) == (std::vector<long>({3,\
    \ 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long i = 2;\n    long factor = 1;\n    while (i <= n) {\n        while (n\
    \ % i == 0) {\n            factor *= i;\n            factors.push_back(factor);\n\
    \            n /= i;\n        }\n        i++;\n    }\n    if (n != 1) {\n    \
    \    factors.push_back(n);\n    }\n    return factors;\n}\nint main() {\n    auto\
    \ candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({2, 2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3,\
    \ 19})));\n    assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n\
    \    assert(candidate((185193)) == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({3, 19, 19, 19})));\n   \
    \ assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n}\n"
  stdout: ''
  stderr: "tmpte1rkpjd: /tmp/tmpte1rkpjd.cpp:32: int main(): Assertion `candidate((4))\
    \ == (std::vector<long>({2, 2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long i = 2;\n    long p = 1;\n    while (i <= n) {\n        while (n % i\
    \ == 0) {\n            factors.push_back(i);\n            n /= i;\n        }\n\
    \        i++;\n    }\n    if (n != 1) {\n        factors.push_back(n);\n    }\n\
    \    return factors;\n}\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2))\
    \ == (std::vector<long>({2})));\n    assert(candidate((4)) == (std::vector<long>({2,\
    \ 2})));\n    assert(candidate((8)) == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({3, 19})));\n    assert(candidate((3249)) == (std::vector<long>({3,\
    \ 3, 19, 19})));\n    assert(candidate((185193)) == (std::vector<long>({3, 3,\
    \ 3, 19, 19, 19})));\n    assert(candidate((20577)) == (std::vector<long>({3,\
    \ 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long i = 2;\n    while (i <= sqrt(n)) {\n        while (n % i == 0) {\n \
    \           factors.push_back(i);\n            n /= i;\n        }\n        i++;\n\
    \    }\n    if (n != 1) {\n        factors.push_back(n);\n    }\n    return factors;\n\
    }\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2)) ==\
    \ (std::vector<long>({2})));\n    assert(candidate((4)) == (std::vector<long>({2,\
    \ 2})));\n    assert(candidate((8)) == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({3, 19})));\n    assert(candidate((3249)) == (std::vector<long>({3,\
    \ 3, 19, 19})));\n    assert(candidate((185193)) == (std::vector<long>({3, 3,\
    \ 3, 19, 19, 19})));\n    assert(candidate((20577)) == (std::vector<long>({3,\
    \ 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long p = 1;\n    long q = n;\n    long r = n;\n    long s = 2;\n    long\
    \ t = 0;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n\
    \    long y = 1;\n    long z = 1;\n    long a = 1;\n    long b = 1;\n    long\
    \ c = 1;\n    long d = 1;\n    long e = 1;\n    long f = 1;\n    long g = 1;\n\
    \    long h = 1;\n    long i = 1;\n    long j = 1;\n    long k = 1;\n    long\
    \ l = 1;\n    long m = 1;\n    long n = 1;\n    long o = 1;\n    long p = 1;\n\
    \    long q = 1;\n    long r = 1;\n    long s = 1;\n    long t = 1;\n    long\
    \ u = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n    long y = 1;\n\
    \    long z = 1;\n    long a = 1;\n    long b = 1;\n    long c = 1;\n    long\
    \ d = 1;\n    long e = 1;\n    long f = 1;\n    long g = 1;\n    long h = 1;\n\
    \    long i = 1;\n    long j = 1;\n    long k = 1;\n    long l = 1;\n    long\
    \ m = 1;\n    long n = 1;\n    long o = 1;\n    long p = 1;\n    long q = 1;\n\
    \    long r = 1;\n    long s = 1;\n    long t = 1;\n    long u = 1;\n    long\
    \ v = 1;\n    long w = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n\
    \    long a = 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n    long\
    \ e = 1;\n    long f = 1;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n\
    \    long j = 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n    long\
    \ n = 1;\n    long o = 1;\n    long p = 1;\n    long q = 1;\n    long r = 1;\n\
    \    long s = 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n    long\
    \ w = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n    long a = 1;\n\
    \    long b = 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n    long\
    \ f = 1;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n    long j = 1;\n\
    \    long k = 1;\n    long l = 1;\n\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({2, 2})));\n    assert(candidate((8)) == (std::vector<long>({2,\
    \ 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3, 19})));\n  \
    \  assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({3, 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2,\
    \ 3, 3})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpi_7ag0iv.cpp: In function \u2018std::vector<long int> factorize(long\
    \ int)\u2019:\n/tmp/tmpi_7ag0iv.cpp:38:10: error: declaration of \u2018long int\
    \ n\u2019 shadows a parameter\n   38 |     long n = 1;\n      |          ^\n/tmp/tmpi_7ag0iv.cpp:40:10:\
    \ error: redeclaration of \u2018long int p\u2019\n   40 |     long p = 1;\n  \
    \    |          ^\n/tmp/tmpi_7ag0iv.cpp:14:10: note: \u2018long int p\u2019 previously\
    \ declared here\n   14 |     long p = 1;\n      |          ^\n/tmp/tmpi_7ag0iv.cpp:41:10:\
    \ error: redeclaration of \u2018long int q\u2019\n   41 |     long q = 1;\n  \
    \    |          ^\n/tmp/tmpi_7ag0iv.cpp:15:10: note: \u2018long int q\u2019 previously\
    \ declared here\n   15 |     long q = n;\n      |          ^\n/tmp/tmpi_7ag0iv.cpp:42:10:\
    \ error: redeclaration of \u2018long int r\u2019\n   42 |     long r = 1;\n  \
    \    |          ^\n/tmp/tmpi_7ag0iv.cpp:16:10: note: \u2018long int r\u2019 previously\
    \ declared here\n   16 |     long r = n;\n      |          ^\n/tmp/tmpi_7ag0iv.cpp:43:10:\
    \ error: redeclaration of \u2018long int s\u2019\n   43 |     long s = 1;\n  \
    \    |          ^\n/tmp/tmpi_7ag0iv.cpp:17:10: note: \u2018long int s\u2019 previously\
    \ declared here\n   17 |     long s = 2;\n      |          ^\n/tmp/tmpi_7ag0iv.cpp:44:10:\
    \ error: redeclaration of \u2018long int t\u2019\n   44 |     long t = 1;\n  \
    \    |          ^\n/tmp/tmpi_7ag0iv.cpp:18:10: note: \u2018long int t\u2019 previously\
    \ declared here\n   18 |     long t = 0;\n      |          ^\n/tmp/tmpi_7ag0iv.cpp:45:10:\
    \ error: redeclaration of \u2018long int u\u2019\n   45 |     long u = 1;\n  \
    \    |          ^\n/tmp/tmpi_7ag0iv.cpp:19:10: note: \u2018long int u\u2019 previously\
    \ declared here\n   19 |     long u = 1;\n      |          ^\n/tmp/tmpi_7ag0iv.cpp:46:10:\
    \ error: redeclaration of \u2018long int v\u2019\n   46 |     long v = 1;\n  \
    \    |          ^\n/tmp/tmpi_7ag0iv.cpp:20:10: note: \u2018long int v\u2019 previously\
    \ declared here\n   20 |     long v = 1;\n      |          ^\n/tmp/tmpi_7ag0iv.cpp:47:10:\
    \ error: redeclaration of \u2018long int w\u2019\n   47 |     long w = 1;\n  \
    \    |          ^\n/tmp/tmpi_7ag0iv.cpp:21:10: note: \u2018long int w\u2019 previously\
    \ declared here\n   21 |     long w = 1;\n      |          ^\n/tmp/tmpi_7ag0iv.cpp:48:10:\
    \ error: redeclaration of \u2018long i"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long i = 2;\n    while (i <= n / i) {\n        while (n % i == 0) {\n   \
    \         factors.push_back(i);\n            n /= i;\n        }\n        i++;\n\
    \    }\n    if (n != 1) {\n        factors.push_back(n);\n    }\n    return factors;\n\
    }\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2)) ==\
    \ (std::vector<long>({2})));\n    assert(candidate((4)) == (std::vector<long>({2,\
    \ 2})));\n    assert(candidate((8)) == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({3, 19})));\n    assert(candidate((3249)) == (std::vector<long>({3,\
    \ 3, 19, 19})));\n    assert(candidate((185193)) == (std::vector<long>({3, 3,\
    \ 3, 19, 19, 19})));\n    assert(candidate((20577)) == (std::vector<long>({3,\
    \ 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long i = 2;\n    while (i <= sqrt(n)) {\n        while (n % i == 0) {\n \
    \           factors.push_back(i);\n            n /= i;\n        }\n        i++;\n\
    \    }\n    if (n != 1) {\n        factors.push_back(n);\n    }\n    return factors;\n\
    }\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2)) ==\
    \ (std::vector<long>({2})));\n    assert(candidate((4)) == (std::vector<long>({2,\
    \ 2})));\n    assert(candidate((8)) == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({3, 19})));\n    assert(candidate((3249)) == (std::vector<long>({3,\
    \ 3, 19, 19})));\n    assert(candidate((185193)) == (std::vector<long>({3, 3,\
    \ 3, 19, 19, 19})));\n    assert(candidate((20577)) == (std::vector<long>({3,\
    \ 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long i = 2;\n    while (i <= n) {\n        while (n % i == 0) {\n       \
    \     factors.push_back(i);\n            n /= i;\n        }\n        i++;\n  \
    \  }\n    if (n > 1) {\n        factors.push_back(n);\n    }\n    return factors;\n\
    }\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2)) ==\
    \ (std::vector<long>({2})));\n    assert(candidate((4)) == (std::vector<long>({2,\
    \ 2})));\n    assert(candidate((8)) == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({3, 19})));\n    assert(candidate((3249)) == (std::vector<long>({3,\
    \ 3, 19, 19})));\n    assert(candidate((185193)) == (std::vector<long>({3, 3,\
    \ 3, 19, 19, 19})));\n    assert(candidate((20577)) == (std::vector<long>({3,\
    \ 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long i = 2;\n    while (i <= n) {\n        while (n % i == 0) {\n       \
    \     factors.push_back(i);\n            n /= i;\n        }\n        i++;\n  \
    \  }\n    if (n != 1) {\n        factors.push_back(n);\n    }\n    return factors;\n\
    }\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2)) ==\
    \ (std::vector<long>({2})));\n    assert(candidate((4)) == (std::vector<long>({2,\
    \ 2})));\n    assert(candidate((8)) == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({3, 19})));\n    assert(candidate((3249)) == (std::vector<long>({3,\
    \ 3, 19, 19})));\n    assert(candidate((185193)) == (std::vector<long>({3, 3,\
    \ 3, 19, 19, 19})));\n    assert(candidate((20577)) == (std::vector<long>({3,\
    \ 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long factor = 1;\n    for (long i = 1; i <= n; i++) {\n        while (n %\
    \ i == 0) {\n            n /= i;\n            factors.push_back(i);\n        }\n\
    \    }\n    if (n != 1) {\n        factors.push_back(n);\n    }\n    return factors;\n\
    }\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2)) ==\
    \ (std::vector<long>({2})));\n    assert(candidate((4)) == (std::vector<long>({2,\
    \ 2})));\n    assert(candidate((8)) == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({3, 19})));\n    assert(candidate((3249)) == (std::vector<long>({3,\
    \ 3, 19, 19})));\n    assert(candidate((185193)) == (std::vector<long>({3, 3,\
    \ 3, 19, 19, 19})));\n    assert(candidate((20577)) == (std::vector<long>({3,\
    \ 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long factor = 1;\n    long i = 2;\n    while (i <= n / factor) {\n      \
    \  while (n % i == 0) {\n            factors.push_back(i);\n            n /= i;\n\
    \        }\n        i++;\n    }\n    if (n != 1) {\n        factors.push_back(n);\n\
    \    }\n    return factors;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({2, 2})));\n    assert(candidate((8)) == (std::vector<long>({2,\
    \ 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3, 19})));\n  \
    \  assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({3, 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2,\
    \ 3, 3})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long i = 2;\n    long factor = 1;\n    while (i <= n) {\n        while (n\
    \ % i == 0) {\n            factor *= i;\n            n /= i;\n        }\n    \
    \    factors.push_back(factor);\n        i++;\n    }\n    return factors;\n}\n\
    int main() {\n    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({2, 2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3,\
    \ 19})));\n    assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n\
    \    assert(candidate((185193)) == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({3, 19, 19, 19})));\n   \
    \ assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n}\n"
  stdout: ''
  stderr: "tmp52wja_ee: /tmp/tmp52wja_ee.cpp:29: int main(): Assertion `candidate((4))\
    \ == (std::vector<long>({2, 2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long i = 2;\n    while (i <= n) {\n        while (n % i == 0) {\n       \
    \     factors.push_back(i);\n            n /= i;\n        }\n        i++;\n  \
    \  }\n    if (n != 1) {\n        factors.push_back(n);\n    }\n    return factors;\n\
    }\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2)) ==\
    \ (std::vector<long>({2})));\n    assert(candidate((4)) == (std::vector<long>({2,\
    \ 2})));\n    assert(candidate((8)) == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({3, 19})));\n    assert(candidate((3249)) == (std::vector<long>({3,\
    \ 3, 19, 19})));\n    assert(candidate((185193)) == (std::vector<long>({3, 3,\
    \ 3, 19, 19, 19})));\n    assert(candidate((20577)) == (std::vector<long>({3,\
    \ 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long i = 2;\n    while (i <= n / i) {\n        while (n % i == 0) {\n   \
    \         factors.push_back(i);\n            n /= i;\n        }\n        i++;\n\
    \    }\n    if (n > 1) {\n        factors.push_back(n);\n    }\n    return factors;\n\
    }\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2)) ==\
    \ (std::vector<long>({2})));\n    assert(candidate((4)) == (std::vector<long>({2,\
    \ 2})));\n    assert(candidate((8)) == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({3, 19})));\n    assert(candidate((3249)) == (std::vector<long>({3,\
    \ 3, 19, 19})));\n    assert(candidate((185193)) == (std::vector<long>({3, 3,\
    \ 3, 19, 19, 19})));\n    assert(candidate((20577)) == (std::vector<long>({3,\
    \ 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long i = 2;\n    while (i <= sqrt(n)) {\n        while (n % i == 0) {\n \
    \           factors.push_back(i);\n            n /= i;\n        }\n        i++;\n\
    \    }\n    if (n != 1)\n        factors.push_back(n);\n    return factors;\n\
    }\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2)) ==\
    \ (std::vector<long>({2})));\n    assert(candidate((4)) == (std::vector<long>({2,\
    \ 2})));\n    assert(candidate((8)) == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({3, 19})));\n    assert(candidate((3249)) == (std::vector<long>({3,\
    \ 3, 19, 19})));\n    assert(candidate((185193)) == (std::vector<long>({3, 3,\
    \ 3, 19, 19, 19})));\n    assert(candidate((20577)) == (std::vector<long>({3,\
    \ 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long i = 2;\n    long factor = 1;\n    while (i <= n) {\n        while (n\
    \ % i == 0) {\n            factor *= i;\n            factors.push_back(factor);\n\
    \            n /= i;\n        }\n        i++;\n    }\n    if (n != 1) {\n    \
    \    factors.push_back(n);\n    }\n    return factors;\n}\nint main() {\n    auto\
    \ candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({2, 2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3,\
    \ 19})));\n    assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n\
    \    assert(candidate((185193)) == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({3, 19, 19, 19})));\n   \
    \ assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n}\n"
  stdout: ''
  stderr: "tmp8n5s4x4t: /tmp/tmp8n5s4x4t.cpp:32: int main(): Assertion `candidate((4))\
    \ == (std::vector<long>({2, 2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long i = 2;\n    long factor = 1;\n    while (i <= n) {\n        if (n %\
    \ i == 0) {\n            factor *= i;\n            while (n % i == 0) {\n    \
    \            n /= i;\n                factors.push_back(i);\n            }\n \
    \       }\n        i++;\n    }\n    if (n > 1) {\n        factors.push_back(1);\n\
    \    }\n    return factors;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({2, 2})));\n    assert(candidate((8)) == (std::vector<long>({2,\
    \ 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3, 19})));\n  \
    \  assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({3, 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2,\
    \ 3, 3})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long i = 2;\n    long factor = 1;\n    while (i <= n) {\n        while (n\
    \ % i == 0) {\n            factor *= i;\n            n /= i;\n        }\n    \
    \    factors.push_back(factor);\n        factor = 1;\n        i++;\n    }\n  \
    \  return factors;\n}\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2))\
    \ == (std::vector<long>({2})));\n    assert(candidate((4)) == (std::vector<long>({2,\
    \ 2})));\n    assert(candidate((8)) == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({3, 19})));\n    assert(candidate((3249)) == (std::vector<long>({3,\
    \ 3, 19, 19})));\n    assert(candidate((185193)) == (std::vector<long>({3, 3,\
    \ 3, 19, 19, 19})));\n    assert(candidate((20577)) == (std::vector<long>({3,\
    \ 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n\
    }\n"
  stdout: ''
  stderr: "tmp3lq8k13j: /tmp/tmp3lq8k13j.cpp:30: int main(): Assertion `candidate((4))\
    \ == (std::vector<long>({2, 2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long factor = 1;\n    long count = 1;\n    long i = 2;\n    while (i <= n)\
    \ {\n        if (n % i == 0) {\n            factor *= i;\n            while (n\
    \ / i > i) {\n                factor *= i;\n                count++;\n       \
    \     }\n            factors.push_back(factor);\n            factor = 1;\n   \
    \         count = 1;\n        }\n        i++;\n    }\n    return factors;\n}\n\
    int main() {\n    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({2, 2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3,\
    \ 19})));\n    assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n\
    \    assert(candidate((185193)) == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({3, 19, 19, 19})));\n   \
    \ assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n}\n"
  stdout: ''
  stderr: "tmp_o6idhze: /tmp/tmp_o6idhze.cpp:35: int main(): Assertion `candidate((4))\
    \ == (std::vector<long>({2, 2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long p = 1;\n    long q = n;\n    long r = n;\n    long s = 1;\n    long\
    \ t = 1;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n\
    \    long y = 1;\n    long z = 1;\n    long a = 1;\n    long b = 1;\n    long\
    \ c = 1;\n    long d = 1;\n    long e = 1;\n    long f = 1;\n    long g = 1;\n\
    \    long h = 1;\n    long i = 1;\n    long j = 1;\n    long k = 1;\n    long\
    \ l = 1;\n    long m = 1;\n    long n = 1;\n    long o = 1;\n    long p = 1;\n\
    \    long q = 1;\n    long r = 1;\n    long s = 1;\n    long t = 1;\n    long\
    \ u = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n    long y = 1;\n\
    \    long z = 1;\n    long a = 1;\n    long b = 1;\n    long c = 1;\n    long\
    \ d = 1;\n    long e = 1;\n    long f = 1;\n    long g = 1;\n    long h = 1;\n\
    \    long i = 1;\n    long j = 1;\n    long k = 1;\n    long l = 1;\n    long\
    \ m = 1;\n    long n = 1;\n    long o = 1;\n    long p = 1;\n    long q = 1;\n\
    \    long r = 1;\n    long s = 1;\n    long t = 1;\n    long u = 1;\n    long\
    \ v = 1;\n    long w = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n\
    \    long a = 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n    long\
    \ e = 1;\n    long f = 1;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n\
    \    long j = 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n    long\
    \ n = 1;\n    long o = 1;\n    long p = 1;\n    long q = 1;\n    long r = 1;\n\
    \    long s = 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n    long\
    \ w = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n    long a = 1;\n\
    \    long b = 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n    long\
    \ f = 1;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n    long j = 1;\n\
    \    long k = 1;\n    long l = 1;\n\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({2, 2})));\n    assert(candidate((8)) == (std::vector<long>({2,\
    \ 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3, 19})));\n  \
    \  assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({3, 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2,\
    \ 3, 3})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_prkcbpy.cpp: In function \u2018std::vector<long int> factorize(long\
    \ int)\u2019:\n/tmp/tmp_prkcbpy.cpp:38:10: error: declaration of \u2018long int\
    \ n\u2019 shadows a parameter\n   38 |     long n = 1;\n      |          ^\n/tmp/tmp_prkcbpy.cpp:40:10:\
    \ error: redeclaration of \u2018long int p\u2019\n   40 |     long p = 1;\n  \
    \    |          ^\n/tmp/tmp_prkcbpy.cpp:14:10: note: \u2018long int p\u2019 previously\
    \ declared here\n   14 |     long p = 1;\n      |          ^\n/tmp/tmp_prkcbpy.cpp:41:10:\
    \ error: redeclaration of \u2018long int q\u2019\n   41 |     long q = 1;\n  \
    \    |          ^\n/tmp/tmp_prkcbpy.cpp:15:10: note: \u2018long int q\u2019 previously\
    \ declared here\n   15 |     long q = n;\n      |          ^\n/tmp/tmp_prkcbpy.cpp:42:10:\
    \ error: redeclaration of \u2018long int r\u2019\n   42 |     long r = 1;\n  \
    \    |          ^\n/tmp/tmp_prkcbpy.cpp:16:10: note: \u2018long int r\u2019 previously\
    \ declared here\n   16 |     long r = n;\n      |          ^\n/tmp/tmp_prkcbpy.cpp:43:10:\
    \ error: redeclaration of \u2018long int s\u2019\n   43 |     long s = 1;\n  \
    \    |          ^\n/tmp/tmp_prkcbpy.cpp:17:10: note: \u2018long int s\u2019 previously\
    \ declared here\n   17 |     long s = 1;\n      |          ^\n/tmp/tmp_prkcbpy.cpp:44:10:\
    \ error: redeclaration of \u2018long int t\u2019\n   44 |     long t = 1;\n  \
    \    |          ^\n/tmp/tmp_prkcbpy.cpp:18:10: note: \u2018long int t\u2019 previously\
    \ declared here\n   18 |     long t = 1;\n      |          ^\n/tmp/tmp_prkcbpy.cpp:45:10:\
    \ error: redeclaration of \u2018long int u\u2019\n   45 |     long u = 1;\n  \
    \    |          ^\n/tmp/tmp_prkcbpy.cpp:19:10: note: \u2018long int u\u2019 previously\
    \ declared here\n   19 |     long u = 1;\n      |          ^\n/tmp/tmp_prkcbpy.cpp:46:10:\
    \ error: redeclaration of \u2018long int v\u2019\n   46 |     long v = 1;\n  \
    \    |          ^\n/tmp/tmp_prkcbpy.cpp:20:10: note: \u2018long int v\u2019 previously\
    \ declared here\n   20 |     long v = 1;\n      |          ^\n/tmp/tmp_prkcbpy.cpp:47:10:\
    \ error: redeclaration of \u2018long int w\u2019\n   47 |     long w = 1;\n  \
    \    |          ^\n/tmp/tmp_prkcbpy.cpp:21:10: note: \u2018long int w\u2019 previously\
    \ declared here\n   21 |     long w = 1;\n      |          ^\n/tmp/tmp_prkcbpy.cpp:48:10:\
    \ error: redeclaration of \u2018long i"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long p = n;\n    long q = n;\n    long r = n;\n    long s = n;\n    long\
    \ t = n;\n    long u = n;\n    long v = n;\n    long w = n;\n    long x = n;\n\
    \    long y = n;\n    long z = n;\n    long a = n;\n    long b = n;\n    long\
    \ c = n;\n    long d = n;\n    long e = n;\n    long f = n;\n    long g = n;\n\
    \    long h = n;\n    long i = n;\n    long j = n;\n    long k = n;\n    long\
    \ l = n;\n    long m = n;\n    long n = n;\n    long o = n;\n    long p = n;\n\
    \    long q = n;\n    long r = n;\n    long s = n;\n    long t = n;\n    long\
    \ u = n;\n    long v = n;\n    long w = n;\n    long x = n;\n    long y = n;\n\
    \    long z = n;\n    long a = n;\n    long b = n;\n    long c = n;\n    long\
    \ d = n;\n    long e = n;\n    long f = n;\n    long g = n;\n    long h = n;\n\
    \    long i = n;\n    long j = n;\n    long k = n;\n    long l = n;\n    long\
    \ m = n;\n    long n = n;\n    long o = n;\n    long p = n;\n    long q = n;\n\
    \    long r = n;\n    long s = n;\n    long t = n;\n    long u = n;\n    long\
    \ v = n;\n    long w = n;\n    long x = n;\n    long y = n;\n    long z = n;\n\
    \    long a = n;\n    long b = n;\n    long c = n;\n    long d = n;\n    long\
    \ e = n;\n    long f = n;\n    long g = n;\n    long h = n;\n    long i = n;\n\
    \    long j = n;\n    long k = n;\n    long l = n;\n    long m = n;\n    long\
    \ n = n;\n    long o = n;\n    long p = n;\n    long q = n;\n    long r = n;\n\
    \    long s = n;\n    long t = n;\n    long u = n;\n    long v = n;\n    long\
    \ w = n;\n    long x = n;\n    long y = n;\n    long z = n;\n    long a = n;\n\
    \    long b = n;\n    long c = n;\n    long d = n;\n    long e = n;\n    long\
    \ f = n;\n    long g = n;\n    long h = n;\n    long i = n;\n    long j = n;\n\
    \    long k = n;\n    long l = n;\n\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({2, 2})));\n    assert(candidate((8)) == (std::vector<long>({2,\
    \ 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3, 19})));\n  \
    \  assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({3, 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2,\
    \ 3, 3})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpmtfgr9_o.cpp: In function \u2018std::vector<long int> factorize(long\
    \ int)\u2019:\n/tmp/tmpmtfgr9_o.cpp:38:10: error: declaration of \u2018long int\
    \ n\u2019 shadows a parameter\n   38 |     long n = n;\n      |          ^\n/tmp/tmpmtfgr9_o.cpp:40:10:\
    \ error: redeclaration of \u2018long int p\u2019\n   40 |     long p = n;\n  \
    \    |          ^\n/tmp/tmpmtfgr9_o.cpp:14:10: note: \u2018long int p\u2019 previously\
    \ declared here\n   14 |     long p = n;\n      |          ^\n/tmp/tmpmtfgr9_o.cpp:41:10:\
    \ error: redeclaration of \u2018long int q\u2019\n   41 |     long q = n;\n  \
    \    |          ^\n/tmp/tmpmtfgr9_o.cpp:15:10: note: \u2018long int q\u2019 previously\
    \ declared here\n   15 |     long q = n;\n      |          ^\n/tmp/tmpmtfgr9_o.cpp:42:10:\
    \ error: redeclaration of \u2018long int r\u2019\n   42 |     long r = n;\n  \
    \    |          ^\n/tmp/tmpmtfgr9_o.cpp:16:10: note: \u2018long int r\u2019 previously\
    \ declared here\n   16 |     long r = n;\n      |          ^\n/tmp/tmpmtfgr9_o.cpp:43:10:\
    \ error: redeclaration of \u2018long int s\u2019\n   43 |     long s = n;\n  \
    \    |          ^\n/tmp/tmpmtfgr9_o.cpp:17:10: note: \u2018long int s\u2019 previously\
    \ declared here\n   17 |     long s = n;\n      |          ^\n/tmp/tmpmtfgr9_o.cpp:44:10:\
    \ error: redeclaration of \u2018long int t\u2019\n   44 |     long t = n;\n  \
    \    |          ^\n/tmp/tmpmtfgr9_o.cpp:18:10: note: \u2018long int t\u2019 previously\
    \ declared here\n   18 |     long t = n;\n      |          ^\n/tmp/tmpmtfgr9_o.cpp:45:10:\
    \ error: redeclaration of \u2018long int u\u2019\n   45 |     long u = n;\n  \
    \    |          ^\n/tmp/tmpmtfgr9_o.cpp:19:10: note: \u2018long int u\u2019 previously\
    \ declared here\n   19 |     long u = n;\n      |          ^\n/tmp/tmpmtfgr9_o.cpp:46:10:\
    \ error: redeclaration of \u2018long int v\u2019\n   46 |     long v = n;\n  \
    \    |          ^\n/tmp/tmpmtfgr9_o.cpp:20:10: note: \u2018long int v\u2019 previously\
    \ declared here\n   20 |     long v = n;\n      |          ^\n/tmp/tmpmtfgr9_o.cpp:47:10:\
    \ error: redeclaration of \u2018long int w\u2019\n   47 |     long w = n;\n  \
    \    |          ^\n/tmp/tmpmtfgr9_o.cpp:21:10: note: \u2018long int w\u2019 previously\
    \ declared here\n   21 |     long w = n;\n      |          ^\n/tmp/tmpmtfgr9_o.cpp:48:10:\
    \ error: redeclaration of \u2018long i"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long p = n;\n    long q = n;\n    long r = n;\n    long s = n;\n    long\
    \ t = n;\n    long u = n;\n    long v = n;\n    long w = n;\n    long x = n;\n\
    \    long y = n;\n    long z = n;\n    long a = n;\n    long b = n;\n    long\
    \ c = n;\n    long d = n;\n    long e = n;\n    long f = n;\n    long g = n;\n\
    \    long h = n;\n    long i = n;\n    long j = n;\n    long k = n;\n    long\
    \ l = n;\n    long m = n;\n    long n = n;\n    long o = n;\n    long p = n;\n\
    \    long q = n;\n    long r = n;\n    long s = n;\n    long t = n;\n    long\
    \ u = n;\n    long v = n;\n    long w = n;\n    long x = n;\n    long y = n;\n\
    \    long z = n;\n    long a = n;\n    long b = n;\n    long c = n;\n    long\
    \ d = n;\n    long e = n;\n    long f = n;\n    long g = n;\n    long h = n;\n\
    \    long i = n;\n    long j = n;\n    long k = n;\n    long l = n;\n    long\
    \ m = n;\n    long n = n;\n    long o = n;\n    long p = n;\n    long q = n;\n\
    \    long r = n;\n    long s = n;\n    long t = n;\n    long u = n;\n    long\
    \ v = n;\n    long w = n;\n    long x = n;\n    long y = n;\n    long z = n;\n\
    \    long a = n;\n    long b = n;\n    long c = n;\n    long d = n;\n    long\
    \ e = n;\n    long f = n;\n    long g = n;\n    long h = n;\n    long i = n;\n\
    \    long j = n;\n    long k = n;\n    long l = n;\n    long m = n;\n    long\
    \ n = n;\n    long o = n;\n    long p = n;\n    long q = n;\n    long r = n;\n\
    \    long s = n;\n    long t = n;\n    long u = n;\n    long v = n;\n    long\
    \ w = n;\n    long x = n;\n    long y = n;\n    long z = n;\n    long a = n;\n\
    \    long b = n;\n    long c = n;\n    long d = n;\n    long e = n;\n    long\
    \ f = n;\n    long g = n;\n    long h = n;\n    long i = n;\n    long j = n;\n\
    \    long k = n;\n    long l = n;\n\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({2, 2})));\n    assert(candidate((8)) == (std::vector<long>({2,\
    \ 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3, 19})));\n  \
    \  assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({3, 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2,\
    \ 3, 3})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpmyy5rs2w.cpp: In function \u2018std::vector<long int> factorize(long\
    \ int)\u2019:\n/tmp/tmpmyy5rs2w.cpp:38:10: error: declaration of \u2018long int\
    \ n\u2019 shadows a parameter\n   38 |     long n = n;\n      |          ^\n/tmp/tmpmyy5rs2w.cpp:40:10:\
    \ error: redeclaration of \u2018long int p\u2019\n   40 |     long p = n;\n  \
    \    |          ^\n/tmp/tmpmyy5rs2w.cpp:14:10: note: \u2018long int p\u2019 previously\
    \ declared here\n   14 |     long p = n;\n      |          ^\n/tmp/tmpmyy5rs2w.cpp:41:10:\
    \ error: redeclaration of \u2018long int q\u2019\n   41 |     long q = n;\n  \
    \    |          ^\n/tmp/tmpmyy5rs2w.cpp:15:10: note: \u2018long int q\u2019 previously\
    \ declared here\n   15 |     long q = n;\n      |          ^\n/tmp/tmpmyy5rs2w.cpp:42:10:\
    \ error: redeclaration of \u2018long int r\u2019\n   42 |     long r = n;\n  \
    \    |          ^\n/tmp/tmpmyy5rs2w.cpp:16:10: note: \u2018long int r\u2019 previously\
    \ declared here\n   16 |     long r = n;\n      |          ^\n/tmp/tmpmyy5rs2w.cpp:43:10:\
    \ error: redeclaration of \u2018long int s\u2019\n   43 |     long s = n;\n  \
    \    |          ^\n/tmp/tmpmyy5rs2w.cpp:17:10: note: \u2018long int s\u2019 previously\
    \ declared here\n   17 |     long s = n;\n      |          ^\n/tmp/tmpmyy5rs2w.cpp:44:10:\
    \ error: redeclaration of \u2018long int t\u2019\n   44 |     long t = n;\n  \
    \    |          ^\n/tmp/tmpmyy5rs2w.cpp:18:10: note: \u2018long int t\u2019 previously\
    \ declared here\n   18 |     long t = n;\n      |          ^\n/tmp/tmpmyy5rs2w.cpp:45:10:\
    \ error: redeclaration of \u2018long int u\u2019\n   45 |     long u = n;\n  \
    \    |          ^\n/tmp/tmpmyy5rs2w.cpp:19:10: note: \u2018long int u\u2019 previously\
    \ declared here\n   19 |     long u = n;\n      |          ^\n/tmp/tmpmyy5rs2w.cpp:46:10:\
    \ error: redeclaration of \u2018long int v\u2019\n   46 |     long v = n;\n  \
    \    |          ^\n/tmp/tmpmyy5rs2w.cpp:20:10: note: \u2018long int v\u2019 previously\
    \ declared here\n   20 |     long v = n;\n      |          ^\n/tmp/tmpmyy5rs2w.cpp:47:10:\
    \ error: redeclaration of \u2018long int w\u2019\n   47 |     long w = n;\n  \
    \    |          ^\n/tmp/tmpmyy5rs2w.cpp:21:10: note: \u2018long int w\u2019 previously\
    \ declared here\n   21 |     long w = n;\n      |          ^\n/tmp/tmpmyy5rs2w.cpp:48:10:\
    \ error: redeclaration of \u2018long i"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long i = 2;\n    long factor = 1;\n    while (i <= n / i) {\n        while\
    \ (n % i == 0) {\n            factor *= i;\n            n /= i;\n        }\n \
    \       factors.push_back(factor);\n        i++;\n    }\n    return factors;\n\
    }\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2)) ==\
    \ (std::vector<long>({2})));\n    assert(candidate((4)) == (std::vector<long>({2,\
    \ 2})));\n    assert(candidate((8)) == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({3, 19})));\n    assert(candidate((3249)) == (std::vector<long>({3,\
    \ 3, 19, 19})));\n    assert(candidate((185193)) == (std::vector<long>({3, 3,\
    \ 3, 19, 19, 19})));\n    assert(candidate((20577)) == (std::vector<long>({3,\
    \ 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n\
    }\n"
  stdout: ''
  stderr: "tmpydh_z9rv: /tmp/tmpydh_z9rv.cpp:28: int main(): Assertion `candidate((2))\
    \ == (std::vector<long>({2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long i = 2;\n    long factor = 1;\n    while (i <= n) {\n        while (n\
    \ % i == 0) {\n            factor *= i;\n            n /= i;\n        }\n    \
    \    factors.push_back(factor);\n        ++i;\n    }\n    return factors;\n}\n\
    int main() {\n    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({2, 2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3,\
    \ 19})));\n    assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n\
    \    assert(candidate((185193)) == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({3, 19, 19, 19})));\n   \
    \ assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n}\n"
  stdout: ''
  stderr: "tmp9r4rdnx6: /tmp/tmp9r4rdnx6.cpp:29: int main(): Assertion `candidate((4))\
    \ == (std::vector<long>({2, 2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long p = n;\n    long q = n;\n    long r = n;\n    long s = n;\n    long\
    \ t = n;\n    long u = n;\n    long v = n;\n    long w = n;\n    long x = n;\n\
    \    long y = n;\n    long z = n;\n    long a = n;\n    long b = n;\n    long\
    \ c = n;\n    long d = n;\n    long e = n;\n    long f = n;\n    long g = n;\n\
    \    long h = n;\n    long i = n;\n    long j = n;\n    long k = n;\n    long\
    \ l = n;\n    long m = n;\n    long n = n;\n    long o = n;\n    long p = n;\n\
    \    long q = n;\n    long r = n;\n    long s = n;\n    long t = n;\n    long\
    \ u = n;\n    long v = n;\n    long w = n;\n    long x = n;\n    long y = n;\n\
    \    long z = n;\n    long a = n;\n    long b = n;\n    long c = n;\n    long\
    \ d = n;\n    long e = n;\n    long f = n;\n    long g = n;\n    long h = n;\n\
    \    long i = n;\n    long j = n;\n    long k = n;\n    long l = n;\n    long\
    \ m = n;\n    long n = n;\n    long o = n;\n    long p = n;\n    long q = n;\n\
    \    long r = n;\n    long s = n;\n    long t = n;\n    long u = n;\n    long\
    \ v = n;\n    long w = n;\n    long x = n;\n    long y = n;\n    long z = n;\n\
    \    long a = n;\n    long b = n;\n    long c = n;\n    long d = n;\n    long\
    \ e = n;\n    long f = n;\n    long g = n;\n    long h = n;\n    long i = n;\n\
    \    long j = n;\n    long k = n;\n    long l = n;\n    long m = n;\n    long\
    \ n = n;\n    long o = n;\n    long p = n;\n    long q = n;\n    long r = n;\n\
    \    long s = n;\n    long t = n;\n    long u = n;\n    long v = n;\n    long\
    \ w = n;\n    long x = n;\n    long y = n;\n    long z = n;\n    long a = n;\n\
    \    long b = n;\n    long c = n;\n    long d = n;\n    long e = n;\n    long\
    \ f = n;\n    long g = n;\n    long h = n;\n    long i = n;\n    long j = n;\n\
    \    long k = n;\n    long l = n;\n\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({2, 2})));\n    assert(candidate((8)) == (std::vector<long>({2,\
    \ 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3, 19})));\n  \
    \  assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({3, 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2,\
    \ 3, 3})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3_v9cg8y.cpp: In function \u2018std::vector<long int> factorize(long\
    \ int)\u2019:\n/tmp/tmp3_v9cg8y.cpp:38:10: error: declaration of \u2018long int\
    \ n\u2019 shadows a parameter\n   38 |     long n = n;\n      |          ^\n/tmp/tmp3_v9cg8y.cpp:40:10:\
    \ error: redeclaration of \u2018long int p\u2019\n   40 |     long p = n;\n  \
    \    |          ^\n/tmp/tmp3_v9cg8y.cpp:14:10: note: \u2018long int p\u2019 previously\
    \ declared here\n   14 |     long p = n;\n      |          ^\n/tmp/tmp3_v9cg8y.cpp:41:10:\
    \ error: redeclaration of \u2018long int q\u2019\n   41 |     long q = n;\n  \
    \    |          ^\n/tmp/tmp3_v9cg8y.cpp:15:10: note: \u2018long int q\u2019 previously\
    \ declared here\n   15 |     long q = n;\n      |          ^\n/tmp/tmp3_v9cg8y.cpp:42:10:\
    \ error: redeclaration of \u2018long int r\u2019\n   42 |     long r = n;\n  \
    \    |          ^\n/tmp/tmp3_v9cg8y.cpp:16:10: note: \u2018long int r\u2019 previously\
    \ declared here\n   16 |     long r = n;\n      |          ^\n/tmp/tmp3_v9cg8y.cpp:43:10:\
    \ error: redeclaration of \u2018long int s\u2019\n   43 |     long s = n;\n  \
    \    |          ^\n/tmp/tmp3_v9cg8y.cpp:17:10: note: \u2018long int s\u2019 previously\
    \ declared here\n   17 |     long s = n;\n      |          ^\n/tmp/tmp3_v9cg8y.cpp:44:10:\
    \ error: redeclaration of \u2018long int t\u2019\n   44 |     long t = n;\n  \
    \    |          ^\n/tmp/tmp3_v9cg8y.cpp:18:10: note: \u2018long int t\u2019 previously\
    \ declared here\n   18 |     long t = n;\n      |          ^\n/tmp/tmp3_v9cg8y.cpp:45:10:\
    \ error: redeclaration of \u2018long int u\u2019\n   45 |     long u = n;\n  \
    \    |          ^\n/tmp/tmp3_v9cg8y.cpp:19:10: note: \u2018long int u\u2019 previously\
    \ declared here\n   19 |     long u = n;\n      |          ^\n/tmp/tmp3_v9cg8y.cpp:46:10:\
    \ error: redeclaration of \u2018long int v\u2019\n   46 |     long v = n;\n  \
    \    |          ^\n/tmp/tmp3_v9cg8y.cpp:20:10: note: \u2018long int v\u2019 previously\
    \ declared here\n   20 |     long v = n;\n      |          ^\n/tmp/tmp3_v9cg8y.cpp:47:10:\
    \ error: redeclaration of \u2018long int w\u2019\n   47 |     long w = n;\n  \
    \    |          ^\n/tmp/tmp3_v9cg8y.cpp:21:10: note: \u2018long int w\u2019 previously\
    \ declared here\n   21 |     long w = n;\n      |          ^\n/tmp/tmp3_v9cg8y.cpp:48:10:\
    \ error: redeclaration of \u2018long i"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long factor = 1;\n    long i = 2;\n    while (i <= n) {\n        while (n\
    \ % i == 0) {\n            factors.push_back(i);\n            n /= i;\n      \
    \  }\n        i++;\n    }\n    if (n != 1) {\n        factors.push_back(n);\n\
    \    }\n    return factors;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({2, 2})));\n    assert(candidate((8)) == (std::vector<long>({2,\
    \ 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3, 19})));\n  \
    \  assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({3, 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2,\
    \ 3, 3})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long p = 1;\n    long q = n;\n    long r = 1;\n    long s = 1;\n    long\
    \ t = 1;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n\
    \    long y = 1;\n    long z = 1;\n    long a = 1;\n    long b = 1;\n    long\
    \ c = 1;\n    long d = 1;\n    long e = 1;\n    long f = 1;\n    long g = 1;\n\
    \    long h = 1;\n    long i = 1;\n    long j = 1;\n    long k = 1;\n    long\
    \ l = 1;\n    long m = 1;\n    long n = 1;\n    long o = 1;\n    long p = 1;\n\
    \    long q = 1;\n    long r = 1;\n    long s = 1;\n    long t = 1;\n    long\
    \ u = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n    long y = 1;\n\
    \    long z = 1;\n    long a = 1;\n    long b = 1;\n    long c = 1;\n    long\
    \ d = 1;\n    long e = 1;\n    long f = 1;\n    long g = 1;\n    long h = 1;\n\
    \    long i = 1;\n    long j = 1;\n    long k = 1;\n    long l = 1;\n    long\
    \ m = 1;\n    long n = 1;\n    long o = 1;\n    long p = 1;\n    long q = 1;\n\
    \    long r = 1;\n    long s = 1;\n    long t = 1;\n    long u = 1;\n    long\
    \ v = 1;\n    long w = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n\
    \    long a = 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n    long\
    \ e = 1;\n    long f = 1;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n\
    \    long j = 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n    long\
    \ n = 1;\n    long o = 1;\n    long p = 1;\n    long q = 1;\n    long r = 1;\n\
    \    long s = 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n    long\
    \ w = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n    long a = 1;\n\
    \    long b = 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n    long\
    \ f = 1;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n    long j = 1;\n\
    \    long k = 1;\n    long l = 1;\n\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({2, 2})));\n    assert(candidate((8)) == (std::vector<long>({2,\
    \ 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3, 19})));\n  \
    \  assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({3, 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2,\
    \ 3, 3})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmps5f6r359.cpp: In function \u2018std::vector<long int> factorize(long\
    \ int)\u2019:\n/tmp/tmps5f6r359.cpp:38:10: error: declaration of \u2018long int\
    \ n\u2019 shadows a parameter\n   38 |     long n = 1;\n      |          ^\n/tmp/tmps5f6r359.cpp:40:10:\
    \ error: redeclaration of \u2018long int p\u2019\n   40 |     long p = 1;\n  \
    \    |          ^\n/tmp/tmps5f6r359.cpp:14:10: note: \u2018long int p\u2019 previously\
    \ declared here\n   14 |     long p = 1;\n      |          ^\n/tmp/tmps5f6r359.cpp:41:10:\
    \ error: redeclaration of \u2018long int q\u2019\n   41 |     long q = 1;\n  \
    \    |          ^\n/tmp/tmps5f6r359.cpp:15:10: note: \u2018long int q\u2019 previously\
    \ declared here\n   15 |     long q = n;\n      |          ^\n/tmp/tmps5f6r359.cpp:42:10:\
    \ error: redeclaration of \u2018long int r\u2019\n   42 |     long r = 1;\n  \
    \    |          ^\n/tmp/tmps5f6r359.cpp:16:10: note: \u2018long int r\u2019 previously\
    \ declared here\n   16 |     long r = 1;\n      |          ^\n/tmp/tmps5f6r359.cpp:43:10:\
    \ error: redeclaration of \u2018long int s\u2019\n   43 |     long s = 1;\n  \
    \    |          ^\n/tmp/tmps5f6r359.cpp:17:10: note: \u2018long int s\u2019 previously\
    \ declared here\n   17 |     long s = 1;\n      |          ^\n/tmp/tmps5f6r359.cpp:44:10:\
    \ error: redeclaration of \u2018long int t\u2019\n   44 |     long t = 1;\n  \
    \    |          ^\n/tmp/tmps5f6r359.cpp:18:10: note: \u2018long int t\u2019 previously\
    \ declared here\n   18 |     long t = 1;\n      |          ^\n/tmp/tmps5f6r359.cpp:45:10:\
    \ error: redeclaration of \u2018long int u\u2019\n   45 |     long u = 1;\n  \
    \    |          ^\n/tmp/tmps5f6r359.cpp:19:10: note: \u2018long int u\u2019 previously\
    \ declared here\n   19 |     long u = 1;\n      |          ^\n/tmp/tmps5f6r359.cpp:46:10:\
    \ error: redeclaration of \u2018long int v\u2019\n   46 |     long v = 1;\n  \
    \    |          ^\n/tmp/tmps5f6r359.cpp:20:10: note: \u2018long int v\u2019 previously\
    \ declared here\n   20 |     long v = 1;\n      |          ^\n/tmp/tmps5f6r359.cpp:47:10:\
    \ error: redeclaration of \u2018long int w\u2019\n   47 |     long w = 1;\n  \
    \    |          ^\n/tmp/tmps5f6r359.cpp:21:10: note: \u2018long int w\u2019 previously\
    \ declared here\n   21 |     long w = 1;\n      |          ^\n/tmp/tmps5f6r359.cpp:48:10:\
    \ error: redeclaration of \u2018long i"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long i = 2;\n    while (i <= n / i) {\n        while (n % i == 0) {\n   \
    \         factors.push_back(i);\n            n /= i;\n        }\n        i++;\n\
    \    }\n    if (n != 1) {\n        factors.push_back(n);\n    }\n    return factors;\n\
    }\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2)) ==\
    \ (std::vector<long>({2})));\n    assert(candidate((4)) == (std::vector<long>({2,\
    \ 2})));\n    assert(candidate((8)) == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({3, 19})));\n    assert(candidate((3249)) == (std::vector<long>({3,\
    \ 3, 19, 19})));\n    assert(candidate((185193)) == (std::vector<long>({3, 3,\
    \ 3, 19, 19, 19})));\n    assert(candidate((20577)) == (std::vector<long>({3,\
    \ 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long factor = 1;\n    long i = 2;\n    long count = 0;\n    while (i <= n\
    \ / factor) {\n        while (n % i == 0) {\n            factors.push_back(factor);\n\
    \            n /= i;\n            count++;\n        }\n        i++;\n    }\n \
    \   if (n != 1) {\n        factors.push_back(factor);\n    }\n    return factors;\n\
    }\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2)) ==\
    \ (std::vector<long>({2})));\n    assert(candidate((4)) == (std::vector<long>({2,\
    \ 2})));\n    assert(candidate((8)) == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({3, 19})));\n    assert(candidate((3249)) == (std::vector<long>({3,\
    \ 3, 19, 19})));\n    assert(candidate((185193)) == (std::vector<long>({3, 3,\
    \ 3, 19, 19, 19})));\n    assert(candidate((20577)) == (std::vector<long>({3,\
    \ 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n\
    }\n"
  stdout: ''
  stderr: "tmpvapv_h6j: /tmp/tmpvapv_h6j.cpp:32: int main(): Assertion `candidate((2))\
    \ == (std::vector<long>({2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long i = 2;\n    long p = n;\n    while (p != 1) {\n        while (p % i\
    \ == 0) {\n            factors.push_back(i);\n            p /= i;\n        }\n\
    \        i++;\n    }\n    return factors;\n}\nint main() {\n    auto candidate\
    \ = factorize;\n    assert(candidate((2)) == (std::vector<long>({2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({2, 2})));\n    assert(candidate((8)) == (std::vector<long>({2,\
    \ 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3, 19})));\n  \
    \  assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({3, 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2,\
    \ 3, 3})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long p = n;\n    long q = n;\n    long r = n;\n    long s = n;\n    long\
    \ t = n;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n\
    \    long y = 1;\n    long z = 1;\n    long a = 1;\n    long b = 1;\n    long\
    \ c = 1;\n    long d = 1;\n    long e = 1;\n    long f = 1;\n    long g = 1;\n\
    \    long h = 1;\n    long i = 1;\n    long j = 1;\n    long k = 1;\n    long\
    \ l = 1;\n    long m = 1;\n    long n = 1;\n    long o = 1;\n    long p = 1;\n\
    \    long q = 1;\n    long r = 1;\n    long s = 1;\n    long t = 1;\n    long\
    \ u = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n    long y = 1;\n\
    \    long z = 1;\n    long a = 1;\n    long b = 1;\n    long c = 1;\n    long\
    \ d = 1;\n    long e = 1;\n    long f = 1;\n    long g = 1;\n    long h = 1;\n\
    \    long i = 1;\n    long j = 1;\n    long k = 1;\n    long l = 1;\n    long\
    \ m = 1;\n    long n = 1;\n    long o = 1;\n    long p = 1;\n    long q = 1;\n\
    \    long r = 1;\n    long s = 1;\n    long t = 1;\n    long u = 1;\n    long\
    \ v = 1;\n    long w = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n\
    \    long a = 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n    long\
    \ e = 1;\n    long f = 1;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n\
    \    long j = 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n    long\
    \ n = 1;\n    long o = 1;\n    long p = 1;\n    long q = 1;\n    long r = 1;\n\
    \    long s = 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n    long\
    \ w = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n    long a = 1;\n\
    \    long b = 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n    long\
    \ f = 1;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n    long j = 1;\n\
    \    long k = 1;\n    long l = 1;\n\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({2, 2})));\n    assert(candidate((8)) == (std::vector<long>({2,\
    \ 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3, 19})));\n  \
    \  assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({3, 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2,\
    \ 3, 3})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpjceqjxcg.cpp: In function \u2018std::vector<long int> factorize(long\
    \ int)\u2019:\n/tmp/tmpjceqjxcg.cpp:38:10: error: declaration of \u2018long int\
    \ n\u2019 shadows a parameter\n   38 |     long n = 1;\n      |          ^\n/tmp/tmpjceqjxcg.cpp:40:10:\
    \ error: redeclaration of \u2018long int p\u2019\n   40 |     long p = 1;\n  \
    \    |          ^\n/tmp/tmpjceqjxcg.cpp:14:10: note: \u2018long int p\u2019 previously\
    \ declared here\n   14 |     long p = n;\n      |          ^\n/tmp/tmpjceqjxcg.cpp:41:10:\
    \ error: redeclaration of \u2018long int q\u2019\n   41 |     long q = 1;\n  \
    \    |          ^\n/tmp/tmpjceqjxcg.cpp:15:10: note: \u2018long int q\u2019 previously\
    \ declared here\n   15 |     long q = n;\n      |          ^\n/tmp/tmpjceqjxcg.cpp:42:10:\
    \ error: redeclaration of \u2018long int r\u2019\n   42 |     long r = 1;\n  \
    \    |          ^\n/tmp/tmpjceqjxcg.cpp:16:10: note: \u2018long int r\u2019 previously\
    \ declared here\n   16 |     long r = n;\n      |          ^\n/tmp/tmpjceqjxcg.cpp:43:10:\
    \ error: redeclaration of \u2018long int s\u2019\n   43 |     long s = 1;\n  \
    \    |          ^\n/tmp/tmpjceqjxcg.cpp:17:10: note: \u2018long int s\u2019 previously\
    \ declared here\n   17 |     long s = n;\n      |          ^\n/tmp/tmpjceqjxcg.cpp:44:10:\
    \ error: redeclaration of \u2018long int t\u2019\n   44 |     long t = 1;\n  \
    \    |          ^\n/tmp/tmpjceqjxcg.cpp:18:10: note: \u2018long int t\u2019 previously\
    \ declared here\n   18 |     long t = n;\n      |          ^\n/tmp/tmpjceqjxcg.cpp:45:10:\
    \ error: redeclaration of \u2018long int u\u2019\n   45 |     long u = 1;\n  \
    \    |          ^\n/tmp/tmpjceqjxcg.cpp:19:10: note: \u2018long int u\u2019 previously\
    \ declared here\n   19 |     long u = 1;\n      |          ^\n/tmp/tmpjceqjxcg.cpp:46:10:\
    \ error: redeclaration of \u2018long int v\u2019\n   46 |     long v = 1;\n  \
    \    |          ^\n/tmp/tmpjceqjxcg.cpp:20:10: note: \u2018long int v\u2019 previously\
    \ declared here\n   20 |     long v = 1;\n      |          ^\n/tmp/tmpjceqjxcg.cpp:47:10:\
    \ error: redeclaration of \u2018long int w\u2019\n   47 |     long w = 1;\n  \
    \    |          ^\n/tmp/tmpjceqjxcg.cpp:21:10: note: \u2018long int w\u2019 previously\
    \ declared here\n   21 |     long w = 1;\n      |          ^\n/tmp/tmpjceqjxcg.cpp:48:10:\
    \ error: redeclaration of \u2018long i"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long factor = 1;\n    long i = 2;\n    while (i <= n) {\n        while (n\
    \ % i == 0) {\n            factors.push_back(i);\n            n /= i;\n      \
    \  }\n        i++;\n    }\n    if (n != 1) {\n        factors.push_back(n);\n\
    \    }\n    return factors;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({2, 2})));\n    assert(candidate((8)) == (std::vector<long>({2,\
    \ 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3, 19})));\n  \
    \  assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({3, 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2,\
    \ 3, 3})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long factor = 1;\n    long count = 1;\n    long temp = n;\n    while (temp\
    \ > 1) {\n        while (temp % factor == 0) {\n            count++;\n       \
    \     temp /= factor;\n        }\n        factors.push_back(factor);\n       \
    \ factor *= count;\n        count = 1;\n    }\n    return factors;\n}\nint main()\
    \ {\n    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({2, 2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3,\
    \ 19})));\n    assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n\
    \    assert(candidate((185193)) == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({3, 19, 19, 19})));\n   \
    \ assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long i = 2;\n    while (i <= sqrt(n)) {\n        while (n % i == 0) {\n \
    \           factors.push_back(i);\n            n /= i;\n        }\n        i++;\n\
    \    }\n    if (n != 1)\n        factors.push_back(n);\n    return factors;\n\
    }\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2)) ==\
    \ (std::vector<long>({2})));\n    assert(candidate((4)) == (std::vector<long>({2,\
    \ 2})));\n    assert(candidate((8)) == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({3, 19})));\n    assert(candidate((3249)) == (std::vector<long>({3,\
    \ 3, 19, 19})));\n    assert(candidate((185193)) == (std::vector<long>({3, 3,\
    \ 3, 19, 19, 19})));\n    assert(candidate((20577)) == (std::vector<long>({3,\
    \ 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long i = 2;\n    long factor = 1;\n    while (i <= n) {\n        while (n\
    \ % i == 0) {\n            factor *= i;\n            factors.push_back(factor);\n\
    \            n /= i;\n        }\n        i++;\n    }\n    if (n != 1) {\n    \
    \    factors.push_back(n);\n    }\n    return factors;\n}\nint main() {\n    auto\
    \ candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({2, 2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3,\
    \ 19})));\n    assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n\
    \    assert(candidate((185193)) == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({3, 19, 19, 19})));\n   \
    \ assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n}\n"
  stdout: ''
  stderr: "tmpqrocuh6b: /tmp/tmpqrocuh6b.cpp:32: int main(): Assertion `candidate((4))\
    \ == (std::vector<long>({2, 2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long factor = 1;\n    long count = 0;\n    long i = 2;\n    while (i <= n\
    \ / factor) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n            count++;\n        }\n        i++;\n    }\n \
    \   if (n != 1) {\n        factors.push_back(n);\n    }\n    return factors;\n\
    }\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2)) ==\
    \ (std::vector<long>({2})));\n    assert(candidate((4)) == (std::vector<long>({2,\
    \ 2})));\n    assert(candidate((8)) == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({3, 19})));\n    assert(candidate((3249)) == (std::vector<long>({3,\
    \ 3, 19, 19})));\n    assert(candidate((185193)) == (std::vector<long>({3, 3,\
    \ 3, 19, 19, 19})));\n    assert(candidate((20577)) == (std::vector<long>({3,\
    \ 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long factor = 1;\n    long count = 0;\n    long i = 2;\n    while (i <= n)\
    \ {\n        while (n % i == 0) {\n            n /= i;\n            factors.push_back(factor);\n\
    \            factor++;\n            count++;\n        }\n        i++;\n    }\n\
    \    factors.push_back(factor);\n    factors.push_back(count);\n    return factors;\n\
    }\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2)) ==\
    \ (std::vector<long>({2})));\n    assert(candidate((4)) == (std::vector<long>({2,\
    \ 2})));\n    assert(candidate((8)) == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({3, 19})));\n    assert(candidate((3249)) == (std::vector<long>({3,\
    \ 3, 19, 19})));\n    assert(candidate((185193)) == (std::vector<long>({3, 3,\
    \ 3, 19, 19, 19})));\n    assert(candidate((20577)) == (std::vector<long>({3,\
    \ 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n\
    }\n"
  stdout: ''
  stderr: "tmp41v194ga: /tmp/tmp41v194ga.cpp:32: int main(): Assertion `candidate((2))\
    \ == (std::vector<long>({2}))' failed.\n"
  exit_code: -6
  status: Exception
