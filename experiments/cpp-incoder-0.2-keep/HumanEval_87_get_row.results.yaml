name: HumanEval_87_get_row
language: cpp
results:
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    std::vector<std::tuple<long, long>> res;\n    res.reserve(lst.size());\n\
    \    for (auto &row : lst) {\n        std::vector<std::tuple<long, long>> rowres;\n\
    \        rowres.reserve(row.size());\n        for (auto &el : row) {\n       \
    \     if (el == x) {\n                rowres.emplace_back(std::make_tuple(std::distance(row.begin(),\
    \ std::find(row.begin(), row.end(), x)), std::distance(row.begin(), std::find(row.begin(),\
    \ row.end(), x) + 1)));\n            }\n        }\n        res.emplace_back(std::make_tuple(std::distance(row.begin(),\
    \ std::find(row.begin(), row.end(), x)), std::distance(row.begin(), std::find(row.begin(),\
    \ row.end(), x) + 1)));\n    }\n    std::sort(res.begin(), res.end(), [](const\
    \ std::tuple<long, long> &a, const std::tuple<long, long> &b) { return std::get<0>(a)\
    \ > std::get<0>(b); });\n    std::sort(res.begin(), res.end(), [](const std::tuple<long,\
    \ long> &a, const std::tuple<long, long> &b) { return std::get<1>(a) > std::get<1>(b);\
    \ });\n    return res;\n}\nint main() {\n    auto candidate = get_row;\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "tmp0p722ygg: /tmp/tmp0p722ygg.cpp:38: int main(): Assertion `candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    // Your code here\n    std::vector<std::tuple<long, long>>\
    \ res;\n    for(auto &row : lst){\n        for(auto &col : row){\n           \
    \ if(col == x){\n                res.push_back(std::make_tuple(row.size() - 1,\
    \ col.size() - 1));\n            }\n        }\n    }\n    std::sort(res.begin(),\
    \ res.end(), [](std::tuple<long, long> a, std::tuple<long, long> b){\n       \
    \ return std::get<0>(a) < std::get<0>(b);\n    });\n    std::sort(res.begin(),\
    \ res.end(), [](std::tuple<long, long> a, std::tuple<long, long> b){\n       \
    \ return std::get<1>(a) < std::get<1>(b);\n    });\n    return res;\n}\nint main()\
    \ {\n    auto candidate = get_row;\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp012pgf3e.cpp: In function \u2018std::vector<std::tuple<long int,\
    \ long int> > get_row(std::vector<std::vector<long int> >, long int)\u2019:\n\
    /tmp/tmp012pgf3e.cpp:25:67: error: request for member \u2018size\u2019 in \u2018\
    col\u2019, which is of non-class type \u2018long int\u2019\n   25 |          \
    \       res.push_back(std::make_tuple(row.size() - 1, col.size() - 1));\n    \
    \  |                                                                   ^~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    // Your code here\n    std::vector<std::tuple<long, long>>\
    \ res;\n    for(auto &row : lst){\n        for(auto &col : row){\n           \
    \ if(col == x){\n                res.push_back(std::make_tuple(row.size() - 1,\
    \ col.size() - 1));\n            }\n        }\n    }\n    std::sort(res.begin(),\
    \ res.end(), [](auto &a, auto &b){\n        return std::get<0>(a) < std::get<0>(b);\n\
    \    });\n    std::sort(res.begin(), res.end(), [](auto &a, auto &b){\n      \
    \  return std::get<1>(a) < std::get<1>(b);\n    });\n    return res;\n}\nint main()\
    \ {\n    auto candidate = get_row;\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3id14vyu.cpp: In function \u2018std::vector<std::tuple<long int,\
    \ long int> > get_row(std::vector<std::vector<long int> >, long int)\u2019:\n\
    /tmp/tmp3id14vyu.cpp:25:67: error: request for member \u2018size\u2019 in \u2018\
    col\u2019, which is of non-class type \u2018long int\u2019\n   25 |          \
    \       res.push_back(std::make_tuple(row.size() - 1, col.size() - 1));\n    \
    \  |                                                                   ^~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    std::vector<std::tuple<long, long>> res;\n    res.reserve(lst.size());\n\
    \    for (auto &row : lst) {\n        std::vector<std::tuple<long, long>> rowres;\n\
    \        rowres.reserve(row.size());\n        for (auto &elem : row) {\n     \
    \       if (elem == x) {\n                rowres.push_back({elem - 1, elem + 1});\n\
    \            }\n        }\n        res.push_back(std::make_tuple(rowres.begin(),\
    \ rowres.end()));\n    }\n    std::sort(res.begin(), res.end(), [](const std::tuple<long,\
    \ long> &a, const std::tuple<long, long> &b) { return std::get<0>(a) < std::get<0>(b);\
    \ });\n    std::sort(res.begin(), res.end(), [](const std::tuple<long, long> &a,\
    \ const std::tuple<long, long> &b) { return std::get<1>(a) < std::get<1>(b); });\n\
    \    return res;\n}\nint main() {\n    auto candidate = get_row;\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7o_17xto.cpp: In function \u2018std::vector<std::tuple<long int,\
    \ long int> > get_row(std::vector<std::vector<long int> >, long int)\u2019:\n\
    /tmp/tmp7o_17xto.cpp:30:68: error: no matching function for call to \u2018std::vector<std::tuple<long\
    \ int, long int> >::push_back(std::tuple<__gnu_cxx::__normal_iterator<std::tuple<long\
    \ int, long int>*, std::vector<std::tuple<long int, long int>, std::allocator<std::tuple<long\
    \ int, long int> > > >, __gnu_cxx::__normal_iterator<std::tuple<long int, long\
    \ int>*, std::vector<std::tuple<long int, long int>, std::allocator<std::tuple<long\
    \ int, long int> > > > >)\u2019\n   30 |         res.push_back(std::make_tuple(rowres.begin(),\
    \ rowres.end()));\n      |                                                   \
    \                 ^\nIn file included from /usr/include/c++/9/vector:67,\n   \
    \              from /usr/include/c++/9/queue:61,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:86,\n\
    \                 from /tmp/tmp7o_17xto.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::tuple<long int, long int>; _Alloc = std::allocator<std::tuple<long\
    \ int, long int> >; std::vector<_Tp, _Alloc>::value_type = std::tuple<long int,\
    \ long int>]\u2019\n 1184 |       push_back(const value_type& __x)\n      |  \
    \     ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1184:35: note:   no known\
    \ conversion for argument 1 from \u2018std::tuple<__gnu_cxx::__normal_iterator<std::tuple<long\
    \ int, long int>*, std::vector<std::tuple<long int, long int>, std::allocator<std::tuple<long\
    \ int, long int> > > >, __gnu_cxx::__normal_iterator<std::tuple<long int, long\
    \ int>*, std::vector<std::tuple<long int, long int>, std::allocator<std::tuple<long\
    \ int, long int> > > > >\u2019 to \u2018const value_type&\u2019 {aka \u2018const\
    \ std::tuple<long int, long int>&\u2019}\n 1184 |       push_back(const value_type&\
    \ __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n/usr/include/c++/9/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = std::tuple<long int, long int>; _Alloc =\
    \ std::allocator<std::tuple<long int, long int> >; std::vector<_Tp, _Alloc>::value_type\
    \ = std::tuple<long int, long int>]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018std::tuple<__gnu_cxx::__normal_iterator<std::tuple<long\
    \ int, long int>*, std::vector<std::tuple<long int, long int>, std::allocator<std::tuple<long\
    \ int, long int> > > >, __gnu_cxx::__normal_iterator<std::tuple<long int, long\
    \ int>*, std::vector<std::tuple<long int, long int>, std::allocator<std::tuple<long\
    \ int, long int> > > > >\u2019 to \u2018std::vector<std::tuple<long int, long\
    \ int> >::value_type&&\u2019 {aka \u2018std::tuple<long int, long int>&&\u2019\
    }\n 1200 |       push_back(value_type&& __x)\n      |                 ~~~~~~~~~~~~~^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    // Write your code here\n    std::vector<std::tuple<long,\
    \ long>> res;\n    for(auto &row:lst){\n        for(auto &val:row){\n        \
    \    if(val==x){\n                res.push_back(std::make_tuple(row.size(),row.size()-1));\n\
    \            }\n        }\n    }\n    std::sort(res.begin(),res.end(),[](std::tuple<long,\
    \ long> a, std::tuple<long, long> b){\n        return std::get<0>(a)>std::get<0>(b);\n\
    \    });\n    std::sort(res.begin(),res.end(),[](std::tuple<long, long> a, std::tuple<long,\
    \ long> b){\n        return std::get<1>(a)>std::get<1>(b);\n    });\n    return\
    \ res;\n}\nint main() {\n    auto candidate = get_row;\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "tmpu5mjzj1v: /tmp/tmpu5mjzj1v.cpp:39: int main(): Assertion `candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    std::vector<std::tuple<long, long>> res;\n    std::vector<std::tuple<long,\
    \ long>> row;\n    std::vector<std::tuple<long, long>> col;\n    long row_index\
    \ = 0;\n    long col_index = 0;\n    long row_len = 0;\n    long col_len = 0;\n\
    \    for (auto &row : lst) {\n        row_len += row.size();\n    }\n    for (auto\
    \ &col : lst) {\n        col_len += col.size();\n    }\n    for (auto &row : lst)\
    \ {\n        for (auto &col : row) {\n            if (col == x) {\n          \
    \      res.push_back({row_index, col_index});\n            }\n        }\n    }\n\
    \    std::sort(res.begin(), res.end(), [](const std::tuple<long, long> &a, const\
    \ std::tuple<long, long> &b) {\n        return std::get<0>(a) < std::get<0>(b);\n\
    \    });\n    for (auto &res : res) {\n        std::sort(res.begin(), res.end(),\
    \ [](const std::tuple<long, long> &a, const std::tuple<long, long> &b) {\n   \
    \         return std::get<1>(a) < std::get<1>(b);\n        });\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = get_row;\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpr0f9twz8.cpp: In function \u2018std::vector<std::tuple<long int,\
    \ long int> > get_row(std::vector<std::vector<long int> >, long int)\u2019:\n\
    /tmp/tmpr0f9twz8.cpp:44:23: error: \u2018class std::tuple<long int, long int>\u2019\
    \ has no member named \u2018begin\u2019\n   44 |         std::sort(res.begin(),\
    \ res.end(), [](const std::tuple<long, long> &a, const std::tuple<long, long>\
    \ &b) {\n      |                       ^~~~~\n/tmp/tmpr0f9twz8.cpp:44:36: error:\
    \ \u2018class std::tuple<long int, long int>\u2019 has no member named \u2018\
    end\u2019\n   44 |         std::sort(res.begin(), res.end(), [](const std::tuple<long,\
    \ long> &a, const std::tuple<long, long> &b) {\n      |                      \
    \              ^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    std::vector<std::tuple<long, long>> res;\n    std::vector<long>\
    \ row;\n    std::vector<long> col;\n    long cnt = 0;\n    for (auto &row : lst)\
    \ {\n        row.clear();\n        col.clear();\n        for (auto &elem : row)\
    \ {\n            row.push_back(elem);\n            col.push_back(elem);\n    \
    \    }\n        std::sort(row.begin(), row.end());\n        std::sort(col.begin(),\
    \ col.end());\n        if (row.size() == col.size()) {\n            for (auto\
    \ &elem : row) {\n                if (elem == x) {\n                    res.push_back({cnt,\
    \ elem});\n                }\n                cnt++;\n            }\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_row;\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "tmph_kenyvk: /tmp/tmph_kenyvk.cpp:46: int main(): Assertion `candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    std::vector<std::tuple<long, long>> res;\n    std::vector<long>\
    \ row;\n    std::vector<long> col;\n    long cnt = 0;\n    for (auto &i : lst)\
    \ {\n        row.push_back(i[0]);\n        col.push_back(i.size() - 1);\n    \
    \    cnt += i[0];\n    }\n    row.push_back(x);\n    col.push_back(cnt);\n   \
    \ res.push_back(std::make_tuple(std::get<0>(row), std::get<1>(col)));\n    for\
    \ (auto &i : row) {\n        std::sort(col.begin(), col.end(), std::greater<long>());\n\
    \        std::sort(row.begin(), row.end(), std::greater<long>());\n        for\
    \ (auto &j : col) {\n            std::sort(res.begin(), res.end(), std::greater<std::tuple<long,\
    \ long>>());\n            if (j == i) {\n                res.push_back(std::make_tuple(i,\
    \ std::get<1>(col)));\n            }\n        }\n    }\n    return res;\n}\nint\
    \ main() {\n    auto candidate = get_row;\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0l2d3a_5.cpp: In function \u2018std::vector<std::tuple<long int,\
    \ long int> > get_row(std::vector<std::vector<long int> >, long int)\u2019:\n\
    /tmp/tmp0l2d3a_5.cpp:31:50: error: no matching function for call to \u2018get<0>(std::vector<long\
    \ int>&)\u2019\n   31 |     res.push_back(std::make_tuple(std::get<0>(row), std::get<1>(col)));\n\
    \      |                                                  ^\nIn file included\
    \ from /usr/include/c++/9/algorithm:60,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp0l2d3a_5.cpp:2:\n/usr/include/c++/9/utility:219:5:\
    \ note: candidate: \u2018template<long unsigned int _Int, class _Tp1, class _Tp2>\
    \ constexpr typename std::tuple_element<_Int, std::pair<_Tp1, _Tp2> >::type& std::get(std::pair<_Tp1,\
    \ _Tp2>&)\u2019\n  219 |     get(std::pair<_Tp1, _Tp2>& __in) noexcept\n     \
    \ |     ^~~\n/usr/include/c++/9/utility:219:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp0l2d3a_5.cpp:31:50: note:   \u2018std::vector<long int>\u2019\
    \ is not derived from \u2018std::pair<_Tp1, _Tp2>\u2019\n   31 |     res.push_back(std::make_tuple(std::get<0>(row),\
    \ std::get<1>(col)));\n      |                                               \
    \   ^\nIn file included from /usr/include/c++/9/algorithm:60,\n              \
    \   from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n             \
    \    from /tmp/tmp0l2d3a_5.cpp:2:\n/usr/include/c++/9/utility:224:5: note: candidate:\
    \ \u2018template<long unsigned int _Int, class _Tp1, class _Tp2> constexpr typename\
    \ std::tuple_element<_Int, std::pair<_Tp1, _Tp2> >::type&& std::get(std::pair<_Tp1,\
    \ _Tp2>&&)\u2019\n  224 |     get(std::pair<_Tp1, _Tp2>&& __in) noexcept\n   \
    \   |     ^~~\n/usr/include/c++/9/utility:224:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp0l2d3a_5.cpp:31:50: note:   \u2018std::vector<long int>\u2019\
    \ is not derived from \u2018std::pair<_Tp1, _Tp2>\u2019\n   31 |     res.push_back(std::make_tuple(std::get<0>(row),\
    \ std::get<1>(col)));\n      |                                               \
    \   ^\nIn file included from /usr/include/c++/9/algorithm:60,\n              \
    \   from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n             \
    \    from /tmp/tmp0l2d3a_5.cpp:2:\n/usr/include/c++/9/utility:229:5: note: candidate:\
    \ \u2018template<long unsigned int _Int, class _Tp1, class _Tp2> constexpr const\
    \ typename std::tuple_element<_Int, std::pair<_Tp1, _Tp2> >::type& std::get(const\
    \ std::pair<_Tp1, _Tp2>&)\u2019\n  229 |     get(const std::pair<_Tp1, _Tp2>&\
    \ __in) noexcept\n      |     ^~~\n/usr/include/c++/9/utility:229:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmp0l2d3a_5.cpp:31:50: note: \
    \  \u2018std::vector<long int>\u2019 is not derived from \u2018const std::pair<_Tp1,\
    \ _Tp2>\u2019\n   31 |     res.push_back(std::make_tuple(std::get<0>(row), std::get<1>(col)));\n\
    \      |                                                  ^\nIn file included\
    \ from /usr/include/c++/9/algorithm:60,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp0l2d3a_5.cpp:2:\n/usr/include/c++/9/utility:234:5:\
    \ note: candidate: \u2018template<long unsigned int _Int, class _Tp1, class _Tp2>\
    \ constexpr const typename std::tuple_element<_Int, std::pair<_Tp1, _Tp2> >::type&&\
    \ std::get(const std::pair<_Tp1, _Tp2>&&)\u2019\n  234 |     get(const std::pair<_Tp1,\
    \ _Tp2>&& __in) noexcept\n      |     ^~~\n/usr/include/c++/9/utility:234:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmp0l2d3a_5.cpp:31:50:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::pair<_Tp1,\
    \ _Tp2>\u2019\n   31 |     res.push_back(std::make_tuple(std::get<0>(row), std::get<1>(col)));\n\
    \      |                                                  ^\nIn file included\
    \ from /usr/include/c++/9/algorithm:60,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp0l2d3a_5.cpp:2:\n/usr/include/c++/9/utility:243:5:\
    \ note: candidate: \u2018template<class _Tp, class _Up> constexpr _Tp& std::get(std::pair<_T1,\
    \ _T2>&)\u2019\n  243 |     get(pair<_Tp, _Up>& __p) noexcept\n      |     ^~~\n\
    /usr/include/c++/9/utility:243:5: note:   template argument deduction/substitution\
    \ failed:\n/usr/include/c++/9/utility:248:5: note: candidate: \u2018template<class\
    \ _Tp, class _Up> constexpr const _Tp& std::get(const std::pair<_T1, _T2>&)\u2019\
    \n  248 |     get(const pair<_Tp, _Up>& __p) noexcept\n      |     ^~~\n/usr/include/c++/9/utility:248:5:\
    \ note:   template argument deduction/substitution failed:\n/usr/include/c++/9/utility:253:5:\
    \ note: candidate: \u2018template<class _Tp, class _Up> constexpr _Tp&& std::get(std::pair<_T1,\
    \ _T2>&&)\u2019\n  253 |     get(pair<_Tp, _Up>&& __p) noexcept\n      |     ^~~\n\
    /usr/include/c++/9/utility:253:5: note:   template argument deduction/substitution\
    \ failed:\n/usr/include/c++/9/utility:258:5: note: candidate: \u2018template<class\
    \ _Tp, class _Up> constexpr const _Tp&& std::get(const std::pair<_T1, _T2>&&)\u2019\
    \n  258 |     get(const pair<_Tp, _Up>&& __p) noexcept\n      |     ^~~\n/usr/include/c++/9/utility:258:5:\
    \ note:   template argument deduction/substitution failed:\n/usr/include/c++/9/utility:263:5:\
    \ note: candidate: \u2018template<class _Tp, class _Up> constexpr _Tp& std::get(std::pair<_Up,\
    \ _Tp>&)\u2019\n  263 |     get(pair<_Up, _Tp>& __p) noexcept\n      |     ^~~\n\
    /usr/include/c++/9/utility:263:5: note:   template argument deduction/substitution\
    \ failed:\n/usr/include/c++/9/utility:268:5: note: candidate: \u2018template<class\
    \ _Tp, class _Up> constexpr const _Tp& std::get(const std::pair<_Up, _Tp>&)\u2019\
    \n  268 |     get(const pair<_Up, _Tp>& __p) noexcept\n      |     ^~~\n/usr/include/c++/9/utility:268:5:\
    \ note:   template argument deduction/substitution failed:\n/usr/include/c++/9/utility:273:5:\
    \ note: candidate: \u2018template<class _Tp, class _Up> constexpr _Tp&& std::get(std::pair<_Up,\
    \ _Tp>&&)\u2019\n  273 |     get(pair<_Up, _Tp>&& __p) noexcept\n      |     ^~~\n\
    /usr/include/c++/9/utility:273:5: note:   template argument deduction/substitution\
    \ failed:\n/usr/include/c++/9/utility:278:5: note: candidate: \u2018template<class\
    \ _Tp, class _Up> constexpr const _Tp&& std::get(const std::pair<_Up, _Tp>&&)\u2019\
    \n  278 |     get(const pair<_Up, _Tp>&& __p) noexcept\n      |     ^~~\n/usr/include/c++/9/utility:278:5:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/9/tuple:39,\n                 from /usr/include/c++/9/functional:54,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmp0l2d3a_5.cpp:2:\n/usr/include/c++/9/array:307:5:\
    \ note: candidate: \u2018template<long unsigned int _Int, class _Tp, long unsigned\
    \ int _Nm> constexpr _Tp& std::get(std::array<_Tp, _Nm>&)\u2019\n  307 |     get(array<_Tp,\
    \ _Nm>& __arr) noexcept\n      |     ^~~\n/usr/include/c++/9/array:307:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmp0l2d3a_5.cpp:31:50:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018std::array<_Tp,\
    \ _Nm>\u2019\n   31 |     res.push_back(std::make_tuple(std::get<0>(row), std::get<1>(col)));\n\
    \      |                                                  ^\nIn file included\
    \ from /usr/include/c++/9/tuple:39,\n                 from /usr/include/c++/9/functional:54,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmp0l2d3a_5.cpp:2:\n/usr/include/c++/9/array:316:5:\
    \ note: candidate: \u2018template<long unsigned int _Int, class _Tp, long unsigned\
    \ int _Nm> constexpr _Tp&& std::get(std::array<_Tp, _Nm>&&)\u2019\n  316 |   \
    \  get(array<_Tp, _Nm>&& __arr) noexcept\n      |     ^~~\n/usr/include/c++/9/array:316:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp0l2d3a_5.cpp:31:50:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018std::array<_Tp,\
    \ _Nm>\u2019\n   31 |     res.push_back(std::make_tuple(std::get<0>(row), std::get<1>(col)));\n\
    \      |                                                  ^\nIn file included\
    \ from /usr/include/c++/9/tuple:39,\n                 from /usr/include/c++/9/functional:54,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmp0l2d3a_5.cpp:2:\n/usr/include/c++/9/array:324:5:\
    \ note: candidate: \u2018template<long unsigned int _Int, class _Tp, long unsigned\
    \ int _Nm> constexpr const _Tp& std::get(const std::array<_Tp, _Nm>&)\u2019\n\
    \  324 |     get(const array<_Tp, _Nm>& __arr) noexcept\n      |     ^~~\n/usr/include/c++/9/array:324:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp0l2d3a_5.cpp:31:50:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::array<_Tp,\
    \ _Nm>\u2019\n   31 |     res.push_back(std::make_tuple(std::get<0>(row), std::get<1>(col)));\n\
    \      |                                                  ^\nIn file included\
    \ from /usr/include/c++/9/tuple:39,\n                 from /usr/include/c++/9/functional:54,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmp0l2d3a_5.cpp:2:\n/usr/include/c++/9/array:333:5:\
    \ note: candidate: \u2018template<long unsigned int _Int, class _Tp, long unsigned\
    \ int _Nm> constexpr const _Tp&& std::get(const std::array<_Tp, _Nm>&&)\u2019\n\
    \  333 |     get(const array<_Tp, _Nm>&& __arr) noexcept\n      |     ^~~\n/usr/include/c++/9/array:333:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp0l2d3a_5.cpp:31:50:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::array<_Tp,\
    \ _Nm>\u2019\n   31 |     res.push_back(std::make_tuple(std::get<0>(row), std::get<1>(col)));\n\
    \      |                                                  ^\nIn file included\
    \ from /usr/include/c++/9/functional:54,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmp0l2d3a_5.cpp:2:\n/usr/include/c++/9/tuple:1320:5:\
    \ note: candidate: \u2018template<long unsigned int __i, class ... _Elements>\
    \ constexpr std::__tuple_element_t<__i, std::tuple<_Elements ...> >& std::get(std::tuple<_Elements\
    \ ...>&)\u2019\n 1320 |     get(tuple<_Elements...>& __t) noexcept\n      |  \
    \   ^~~\n/usr/include/c++/9/tuple:1320:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp0l2d3a_5.cpp:31:50: note:   \u2018std::vector<long int>\u2019\
    \ is not derived from \u2018std::tuple<_Elements ...>\u2019\n   31 |     res.push_back(std::make_tuple(std::get<0>(row),\
    \ std::get<1>(col)));\n      |                                               \
    \   ^\nIn file included from /usr/include/c++/9/functional:54,\n             \
    \    from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n            \
    \     from /tmp/tmp0l2d3a_5.cpp:2:\n/usr/include/c++/9/tuple:1326:5: note: candidate:\
    \ \u2018template<long unsigned int __i, class ... _Elements> constexpr std::__tuple_element_t<__i,\
    \ std::tuple<_Elements ...> >& std::get(const std::tuple<_Elements ...>&)\u2019\
    \n 1326 |     get(const tuple<_Elements...>& __t) noexcept\n      |     ^~~\n\
    /usr/include/c++/9/tuple:1326:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp0l2d3a_5.cpp:31:50: note:   \u2018std::vector<long int>\u2019\
    \ is not derived from \u2018const std::tuple<_Elements ...>\u2019\n   31 |   \
    \  res.push_back(std::make_tuple(std::get<0>(row), std::get<1>(col)));\n     \
    \ |                                                  ^\nIn file included from\
    \ /usr/include/c++/9/functional:54,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmp0l2d3a_5.cpp:2:\n/usr/include/c++/9/tuple:1332:5:\
    \ note: candidate: \u2018template<long unsigned int __i, class ... _Elements>\
    \ constexpr std::__tuple_element_t<__i, std::tuple<_Elements ...> >&& std::get(std::tuple<_Elements\
    \ ...>&&)\u2019\n 1332 |     get(tuple<_Elements...>&& __t) noexcept\n      |\
    \     ^~~\n/usr/include/c++/9/tuple:1332:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp0l2d3a_5.cpp:31:50: note:   \u2018std::vector<long int>\u2019\
    \ is not derived from \u2018std::tuple<_Elements ...>\u2019\n   31 |     res.push_back(std::make_tuple(std::get<0>(row),\
    \ std::get<1>(col)));\n      |                                               \
    \   ^\nIn file included from /usr/include/c++/9/functional:54,\n             \
    \    from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n            \
    \     from /tmp/tmp0l2d3a_5.cpp:2:\n/usr/include/c++/9/tuple:1341:5: note: candidate:\
    \ \u2018template<long unsigned int __i, class ... _Elements> constexpr std::__tuple_element_t<__i,\
    \ std::tuple<_Elements ...> >&& std::get(const std::tuple<_Elements ...>&&)\u2019\
    \n 1341 |     get(const tuple<_Elements...>&& __t) noexcept\n      |     ^~~\n\
    /usr/include/c++/9/tuple:1341:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp0l2d3a_5.cpp:31:50: note:   \u2018std::vector<long int>\u2019\
    \ is not derived from \u2018const std::tuple<_Elements ...>\u2019\n   31 |   \
    \  res.push_back(std::make_tuple(std::get<0>(row), std::get<1>(col)));\n     \
    \ |                                                  ^\nIn file included from\
    \ /usr/include/c++/9/functional:54,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmp0l2d3a_5.cpp:2:\n/usr/include/c++/9/tuple:1364:5:\
    \ note: candidate: \u2018template<class _Tp, class ... _Types> constexpr _Tp&\
    \ std::get(std::tuple<_Elements ...>&)\u2019\n 1364 |     get(tuple<_Types...>&\
    \ __t) noexcept\n      |     ^~~\n/usr/include/c++/9/tuple:1364:5: note:   template\
    \ argument deduction/substitution failed:\n/usr/include/c++/9/tuple:1370:5: note:\
    \ candidate: \u2018template<class _Tp, class ... _Types> constexpr _Tp&& std::get(std::tuple<_Elements\
    \ ...>&&)\u2019\n 1370 |     get(tuple<_Types...>&& __t) noexcept\n      |   \
    \  ^~~\n/usr/include/c++/9/tuple:1370:5: note:   template argument deduction/substitution\
    \ failed:\n/usr/include/c++/9/tuple:1376:5: note: candidate: \u2018template<class\
    \ _Tp, class ... _Types> constexpr const _Tp& std::get(const std::tuple<_Elements\
    \ ...>&)\u2019\n 1376 |     get(const tuple<_Types...>& __t) noexcept\n      |\
    \     ^~~\n/usr/include/c++/9/tuple:1376:5: note:   template argument deduction/substitution\
    \ failed:\n/usr/include/c++/9/tuple:1383:5: note: candidate: \u2018template<class\
    \ _Tp, class ... _Types> constexpr const _Tp&& std::get(const std::tuple<_Elements\
    \ ...>&&)\u2019\n 1383 |     get(const tuple<_Types...>&& __t) noexcept\n    \
    \  |     ^~~\n/usr/include/c++/9/tuple:1383:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp0l2d3a_5.cpp:31:68: error: no matching function for call to\
    \ \u2018get<1>(std::vector<long int>&)\u2019\n   31 |     res.push_back(std::make_tuple(std::get<0>(row),\
    \ std::get<1>(col)));\n      |                                               \
    \                     ^\nIn file included from /usr/include/c++/9/algorithm:60,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp0l2d3a_5.cpp:2:\n/usr/include/c++/9/utility:219:5:\
    \ note: candidate: \u2018template<long unsigned int _Int, class _Tp1, class _Tp2>\
    \ constexpr typename std::tuple_element<_Int, std::pair<_Tp1, _Tp2> >::type& std::get(std::pair<_Tp1,\
    \ _Tp2>&)\u2019\n  219 |     get(std::pair<_Tp1, _Tp2>& __in) noexcept\n     \
    \ |     ^~~\n/usr/include/c++/9/utility:219:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp0l2d3a_5.cpp:31:68: note:   \u2018std::vector<long int>\u2019\
    \ is not derived from \u2018std::pair<_Tp1, _Tp2>\u2019\n   31 |     res.push_back(std::make_tuple(std::get<0>(row),\
    \ std::get<1>(col)));\n      |                                               \
    \                     ^\nIn file included from /usr/include/c++/9/algorithm:60,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp0l2d3a_5.cpp:2:\n/usr/include/c++/9/utility:224:5:\
    \ note: candidate: \u2018template<long unsigned int _Int, class _Tp1, class _Tp2>\
    \ constexpr typename std::tuple_element<_Int, std::pair<_Tp1, _Tp2> >::type&&\
    \ std::get(std::pair<_Tp1, _Tp2>&&)\u2019\n  224 |     get(std::pair<_Tp1, _Tp2>&&\
    \ __in) noexcept\n      |     ^~~\n/usr/include/c++/9/utility:224:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmp0l2d3a_5.cpp:31:68: note: \
    \  \u2018std::vector<long int>\u2019 is not derived from \u2018std::pair<_Tp1,\
    \ _Tp2>\u2019\n   31 |     res.push_back(std::make_tuple(std::get<0>(row), std::get<1>(col)));\n\
    \      |                                                                    ^\n\
    In file included from /usr/include/c++/9/algorithm:60,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n                 from\
    \ /tmp/tmp0l2d3a_5.cpp:2:\n/usr/include/c++/9/utility:229:5: note: candidate:\
    \ \u2018template<long unsigned int _Int, class _Tp1, class _Tp2> constexpr const\
    \ typename std::tuple_element<_Int, std::pair<_Tp1, _Tp2> >::type& std::get(const\
    \ std::pair<_Tp1, _Tp2>&)\u2019\n  229 |     get(const std::pair<_Tp1, _Tp2>&\
    \ __in) noexcept\n      |     ^~~\n/usr/include/c++/9/utility:229:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmp0l2d3a_5.cpp:31:68: note: \
    \  \u2018std::vector<long int>\u2019 is not derived from \u2018const std::pair<_Tp1,\
    \ _Tp2>\u2019\n   31 |     res.push_back(std::make_tuple(std::get<0>(row), std::get<1>(col)));\n\
    \      |                                                                    ^\n\
    In file included from /usr/include/c++/9/algorithm:60,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n                 from\
    \ /tmp/tmp0l2d3a_5.cpp:2:\n/usr/include/c++/9/utility:234:5: note: candidate:\
    \ \u2018template<long unsigned int _Int, class _Tp1, class _Tp2> constexpr const\
    \ typename std::tuple_element<_Int, std::pair<_Tp1, _Tp2> >::type&& std::get(const\
    \ std::pair<_Tp1, _Tp2>&&)\u2019\n  234 |     get(const std::pair<_Tp1, _Tp2>&&\
    \ __in) noexcept\n      |     ^~~\n/usr/include/c++/9/utility:234:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmp0l2d3a_5.cpp:31:68: note: \
    \  \u2018std::vector<long int>\u2019 is not derived from \u2018const std::pair<_Tp1,\
    \ _Tp2>\u2019\n   31 |     res.push_back(std::make_tuple(std::get<0>(row), std::get<1>(col)));\n\
    \      |                                                                    ^\n\
    In file included from /usr/include/c++/9/algorithm:60,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n                 from\
    \ /tmp/tmp0l2d3a_5.cpp:2:\n/usr/include/c++/9/utility:243:5: note: candidate:\
    \ \u2018template<class _Tp, class _Up> constexpr _Tp& std::get(std::pair<_T1,\
    \ _T2>&)\u2019\n  243 |     get(pair<_Tp, _Up>& __p) noexcept\n      |     ^~~\n\
    /usr/include/c++/9/utility:243:5: note:   template argument deduction/substitution\
    \ failed:\n/usr/include/c++/9/utility:248:5: note: candidate: \u2018template<class\
    \ _Tp, class _Up> constexpr const _Tp& std::get(const std::pair<_T1, _T2>&)\u2019\
    \n  248 |     get(const pair<_Tp, _Up>& __p) noexcept\n      |     ^~~\n/usr/include/c++/9/utility:248:5:\
    \ note:   template argument deduction/substitution failed:\n/usr/include/c++/9/utility:253:5:\
    \ note: candidate: \u2018template<class _Tp, class _Up> constexpr _Tp&& std::get(std::pair<_T1,\
    \ _T2>&&)\u2019\n  253 |     get(pair<_Tp, _Up>&& __p) noexcept\n      |     ^~~\n\
    /usr/include/c++/9/utility:253:5: note:   template argument deduction/substitution\
    \ failed:\n/usr/include/c++/9/utility:258:5: note: candidate: \u2018template<class\
    \ _Tp, class _Up> constexpr const _Tp&& std::get(const std::pair<_T1, _T2>&&)\u2019\
    \n  258 |     get(const pair<_Tp, _Up>&& __p) noexcept\n      |     ^~~\n/usr/include/c++/9/utility:258:5:\
    \ note:   template argument deduction/substitution failed:\n/usr/include/c++/9/utility:263:5:\
    \ note: candidate: \u2018template<class _Tp, class _Up> constexpr _Tp& std::get(std::pair<_Up,\
    \ _Tp>&)\u2019\n  263 |     get(pair<_Up, _Tp>& __p) noexcept\n      |     ^~~\n\
    /usr/include/c++/9/utility:263:5: note:   template argument deduction/substitution\
    \ failed:\n/usr/include/c++/9/utility:268:5: note: candidate: \u2018template<class\
    \ _Tp, class _Up> constexpr const _Tp& std::get(const std::pair<_Up, _Tp>&)\u2019\
    \n  268 |     get(const pair<_Up, _Tp>& __p) noexcept\n      |     ^~~\n/usr/include/c++/9/utility:268:5:\
    \ note:   template argument deduction/substitution failed:\n/usr/include/c++/9/utility:273:5:\
    \ note: candidate: \u2018template<class _Tp, class _Up> constexpr _Tp&& std::get(std::pair<_Up,\
    \ _Tp>&&)\u2019\n  273 |     get(pair<_Up, _Tp>&& __p) noexcept\n      |     ^~~\n\
    /usr/include/c++/9/utility:273:5: note:   template argument deduction/substitution\
    \ failed:\n/usr/include/c++/9/utility:278:5: note: candidate: \u2018template<class\
    \ _Tp, class _Up> constexpr const _Tp&& std::get(const std::pair<_Up, _Tp>&&)\u2019\
    \n  278 |     get(const pair<_Up, _Tp>&& __p) noexcept\n      |     ^~~\n/usr/include/c++/9/utility:278:5:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/9/tuple:39,\n                 from /usr/include/c++/9/functional:54,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmp0l2d3a_5.cpp:2:\n/usr/include/c++/9/array:307:5:\
    \ note: candidate: \u2018template<long unsigned int _Int, class _Tp, long unsigned\
    \ int _Nm> constexpr _Tp& std::get(std::array<_Tp, _Nm>&)\u2019\n  307 |     get(array<_Tp,\
    \ _Nm>& __arr) noexcept\n      |     ^~~\n/usr/include/c++/9/array:307:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmp0l2d3a_5.cpp:31:68:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018std::array<_Tp,\
    \ _Nm>\u2019\n   31 |     res.push_back(std::make_tuple(std::get<0>(row), std::get<1>(col)));\n\
    \      |                                                                    ^\n\
    In file included from /usr/include/c++/9/tuple:39,\n                 from /usr/include/c++/9/functional:54,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmp0l2d3a_5.cpp:2:\n/usr/include/c++/9/array:316:5:\
    \ note: candidate: \u2018template<long unsigned int _Int, class _Tp, long unsigned\
    \ int _Nm> constexpr _Tp&& std::get(std::array<_Tp, _Nm>&&)\u2019\n  316 |   \
    \  get(array<_Tp, _Nm>&& __arr) noexcept\n      |     ^~~\n/usr/include/c++/9/array:316:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp0l2d3a_5.cpp:31:68:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018std::array<_Tp,\
    \ _Nm>\u2019\n   31 |     res.push_back(std::make_tuple(std::get<0>(row), std::get<1>(col)));\n\
    \      |                                                                    ^\n\
    In file included from /usr/include/c++/9/tuple:39,\n                 from /usr/include/c++/9/functional:54,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmp0l2d3a_5.cpp:2:\n/usr/include/c++/9/array:324:5:\
    \ note: candidate: \u2018template<long unsigned int _Int, class _Tp, long unsigned\
    \ int _Nm> constexpr const _Tp& std::get(const std::array<_Tp, _Nm>&)\u2019\n\
    \  324 |     get(const array<_Tp, _Nm>& __arr) noexcept\n      |     ^~~\n/usr/include/c++/9/array:324:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp0l2d3a_5.cpp:31:68:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::array<_Tp,\
    \ _Nm>\u2019\n   31 |     res.push_back(std::make_tuple(std::get<0>(row), std::get<1>(col)));\n\
    \      |                                                                    ^\n\
    In file included from /usr/include/c++/9/tuple:39,\n                 from /usr/include/c++/9/functional:54,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmp0l2d3a_5.cpp:2:\n/usr/include/c++/9/array:333:5:\
    \ note: candidate: \u2018template<long unsigned int _Int, class _Tp, long unsigned\
    \ int _Nm> constexpr const _Tp&& std::get(const std::array<_Tp, _Nm>&&)\u2019\n\
    \  333 |     get(const array<_Tp, _Nm>&& __arr) noexcept\n      |     ^~~\n/usr/include/c++/9/array:333:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp0l2d3a_5.cpp:31:68:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::array<_Tp,\
    \ _Nm>\u2019\n   31 |     res.push_back(std::make_tuple(std::get<0>(row), std::get<1>(col)));\n\
    \      |                                                                    ^\n\
    In file included from /usr/include/c++/9/functional:54,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n                 from\
    \ /tmp/tmp0l2d3a_5.cpp:2:\n/usr/include/c++/9/tuple:1320:5: note: candidate: \u2018\
    template<long unsigned int __i, class ... _Elements> constexpr std::__tuple_element_t<__i,\
    \ std::tuple<_Elements ...> >& std::get(std::tuple<_Elements ...>&)\u2019\n 1320\
    \ |     get(tuple<_Elements...>& __t) noexcept\n      |     ^~~\n/usr/include/c++/9/tuple:1320:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp0l2d3a_5.cpp:31:68:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018std::tuple<_Elements\
    \ ...>\u2019\n   31 |     res.push_back(std::make_tuple(std::get<0>(row), std::get<1>(col)));\n\
    \      |                                                                    ^\n\
    In file included from /usr/include/c++/9/functional:54,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n                 from\
    \ /tmp/tmp0l2d3a_5.cpp:2:\n/usr/include/c++/9/tuple:1326:5: note: candidate: \u2018\
    template<long unsigned int __i, class ... _Elements> constexpr std::__tuple_element_t<__i,\
    \ std::tuple<_Elements ...> >& std::get(const std::tuple<_Elements ...>&)\u2019\
    \n 1326 |     get(const tuple<_Elements...>& __t) noexcept\n      |     ^~~\n\
    /usr/include/c++/9/tuple:1326:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp0l2d3a_5.cpp:31:68: note:   \u2018std::vector<long int>\u2019\
    \ is not derived from \u2018const std::tuple<_Elements ...>\u2019\n   31 |   \
    \  res.push_back(std::make_tuple(std::get<0>(row), std::get<1>(col)));\n     \
    \ |                                                                    ^\nIn file\
    \ included from /usr/include/c++/9/functional:54,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmp0l2d3a_5.cpp:2:\n/usr/include/c++/9/tuple:1332:5:\
    \ note: candidate: \u2018template<long unsigned int __i, class ... _Elements>\
    \ constexpr std::__tuple_element_t<__i, std::tuple<_Elements ...> >&& std::get(std::tuple<_Elements\
    \ ...>&&)\u2019\n 1332 |     get(tuple<_Elements...>&& __t) noexcept\n      |\
    \     ^~~\n/usr/include/c++/9/tuple:1332:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp0l2d3a_5.cpp:31:68: note:   \u2018std::vector<long int>\u2019\
    \ is not derived from \u2018std::tuple<_Elements ...>\u2019\n   31 |     res.push_back(std::make_tuple(std::get<0>(row),\
    \ std::get<1>(col)));\n      |                                               \
    \                     ^\nIn file included from /usr/include/c++/9/functional:54,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmp0l2d3a_5.cpp:2:\n/usr/include/c++/9/tuple:1341:5:\
    \ note: candidate: \u2018template<long unsigned int __i, class ... _Elements>\
    \ constexpr std::__tuple_element_t<__i, std::tuple<_Elements ...> >&& std::get(const\
    \ std::tuple<_Elements ...>&&)\u2019\n 1341 |     get(const tuple<_Elements...>&&\
    \ __t) noexcept\n      |     ^~~\n/usr/include/c++/9/tuple:1341:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmp0l2d3a_5.cpp:31:68: note: \
    \  \u2018std::vector<long int>\u2019 is not derived from \u2018const std::tuple<_Elements\
    \ ...>\u2019\n   31 |     res.push_back(std::make_tuple(std::get<0>(row), std::get<1>(col)));\n\
    \      |                                                                    ^\n\
    In file included from /usr/include/c++/9/functional:54,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n                 from\
    \ /tmp/tmp0l2d3a_5.cpp:2:\n/usr/include/c++/9/tuple:1364:5: note: candidate: \u2018\
    template<class _Tp, class ... _Types> constexpr _Tp& std::get(std::tuple<_Elements\
    \ ...>&)\u2019\n 1364 |     get(tuple<_Types...>& __t) noexcept\n      |     ^~~\n\
    /usr/include/c++/9/tuple:1364:5: note:   template argument deduction/substitution\
    \ failed:\n/usr/include/c++/9/tuple:1370:5: note: candidate: \u2018template<class\
    \ _Tp, class ... _Types> constexpr _Tp&& std::get(std::tuple<_Elements ...>&&)\u2019\
    \n 1370 |     get(tuple<_Types...>&& __t) noexcept\n      |     ^~~\n/usr/include/c++/9/tuple:1370:5:\
    \ note:   template argument deduction/substitution failed:\n/usr/include/c++/9/tuple:1376:5:\
    \ note: candidate: \u2018template<class _Tp, class ... _Types> constexpr const\
    \ _Tp& std::get(const std::tuple<_Elements ...>&)\u2019\n 1376 |     get(const\
    \ tuple<_Types...>& __t) noexcept\n      |     ^~~\n/usr/include/c++/9/tuple:1376:5:\
    \ note:   template argument deduction/substitution failed:\n/usr/include/c++/9/tuple:1383:5:\
    \ note: candidate: \u2018template<class _Tp, class ... _Types> constexpr const\
    \ _Tp&& std::get(const std::tuple<_Elements ...>&&)\u2019\n 1383 |     get(const\
    \ tuple<_Types...>&& __t) noexcept\n      |     ^~~\n/usr/include/c++/9/tuple:1383:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp0l2d3a_5.cpp:38:65:\
    \ error: no matching function for call to \u2018get<1>(std::vector<long int>&)\u2019\
    \n   38 |                 res.push_back(std::make_tuple(i, std::get<1>(col)));\n\
    \      |                                                                 ^\nIn\
    \ file included from /usr/include/c++/9/algorithm:60,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp0l2d3a_5.cpp:2:\n/usr/include/c++/9/utility:219:5:\
    \ note: candidate: \u2018template<long unsigned int _Int, class _Tp1, class _Tp2>\
    \ constexpr typename std::tuple_element<_Int, std::pair<_Tp1, _Tp2> >::type& std::get(std::pair<_Tp1,\
    \ _Tp2>&)\u2019\n  219 |     get(std::pair<_Tp1, _Tp2>& __in) noexcept\n     \
    \ |     ^~~\n/usr/include/c++/9/utility:219:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp0l2d3a_5.cpp:38:65: note:   \u2018std::vector<long int>\u2019\
    \ is not derived from \u2018std::pair<_Tp1, _Tp2>\u2019\n   38 |             \
    \    res.push_back(std::make_tuple(i, std::get<1>(col)));\n      |           \
    \                                                      ^\nIn file included from\
    \ /usr/include/c++/9/algorithm:60,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp0l2d3a_5.cpp:2:\n/usr/include/c++/9/utility:224:5:\
    \ note: candidate: \u2018template<long unsigned int _Int, class _Tp1, class _Tp2>\
    \ constexpr typename std::tuple_element<_Int, std::pair<_Tp1, _Tp2> >::type&&\
    \ std::get(std::pair<_Tp1, _Tp2>&&)\u2019\n  224 |     get(std::pair<_Tp1, _Tp2>&&\
    \ __in) noexcept\n      |     ^~~\n/usr/include/c++/9/utility:224:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmp0l2d3a_5.cpp:38:65: note: \
    \  \u2018std::vector<long int>\u2019 is not derived from \u2018std::pair<_Tp1,\
    \ _Tp2>\u2019\n   38 |                 res.push_back(std::make_tuple(i, std::get<1>(col)));\n\
    \      |                                                                 ^\nIn\
    \ file included from /usr/include/c++/9/algorithm:60,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp0l2d3a_5.cpp:2:\n/usr/include/c++/9/utility:229:5:\
    \ note: candidate: \u2018template<long unsigned int _Int, class _Tp1, class _Tp2>\
    \ constexpr const typename std::tuple_element<_Int, std::pair<_Tp1, _Tp2> >::type&\
    \ std::get(const std::pair<_Tp1, _Tp2>&)\u2019\n  229 |     get(const std::pair<_Tp1,\
    \ _Tp2>& __in) noexcept\n      |     ^~~\n/usr/include/c++/9/utility:229:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmp0l2d3a_5.cpp:38:65:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::pair<_Tp1,\
    \ _Tp2>\u2019\n   38 |                 res.push_back(std::make_tuple(i, std::get<1>(col)));\n\
    \      |                                                                 ^\nIn\
    \ file included from /usr/include/c++/9/algorithm:60,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp0l2d3a_5.cpp:2:\n/usr/include/c++/9/utility:234:5:\
    \ note: candidate: \u2018template<long unsigned int _Int, class _Tp1, class _Tp2>\
    \ constexpr const typename std::tuple_element<_Int, std::pair<_Tp1, _Tp2> >::type&&\
    \ std::get(const std::pair<_Tp1, _Tp2>&&)\u2019\n  234 |     get(const std::pair<_Tp1,\
    \ _Tp2>&& __in) noexcept\n      |     ^~~\n/usr/include/c++/9/utility:234:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmp0l2d3a_5.cpp:38:65:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::pair<_Tp1,\
    \ _Tp2>\u2019\n   38 |                 res.push_back(std::make_tuple(i, std::get<1>(col)));\n\
    \      |                                                                 ^\nIn\
    \ file included from /usr/include/c++/9/algorithm:60,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp0l2d3a_5.cpp:2:\n/usr/include/c++/9/utility:243:5:\
    \ note: candidate: \u2018template<class _Tp, class _Up> constexpr _Tp& std::get(std::pair<_T1,\
    \ _T2>&)\u2019\n  243 |     get(pair<_Tp, _Up>& __p) noexcept\n      |     ^~~\n\
    /usr/include/c++/9/utility:243:5: note:   template argument deduction/substitution\
    \ failed:\n/usr/include/c++/9/utility:248:5: note: candidate: \u2018template<class\
    \ _Tp, class _Up> constexpr const _Tp& std::get(const std::pair<_T1, _T2>&)\u2019\
    \n  248 |     get(const pair<_Tp, _Up>& __p) noexcept\n      |     ^~~\n/usr/include/c++/9/utility:248:5:\
    \ note:   template argument deduction/substitution failed:\n/usr/include/c++/9/utility:253:5:\
    \ note: candidate: \u2018template<class _Tp, class _Up> constexpr _Tp&& std::get(std::pair<_T1,\
    \ _T2>&&)\u2019\n  253 |     get(pair<_Tp, _Up>&& __p) noexcept\n      |     ^~~\n\
    /usr/include/c++/9/utility:253:5: note:   template argument deduction/substitution\
    \ failed:\n/usr/include/c++/9/utility:258:5: note: candidate: \u2018template<class\
    \ _Tp, class _Up> constexpr const _Tp&& std::get(const std::pair<_T1, _T2>&&)\u2019\
    \n  258 |     get(const pair<_Tp, _Up>&& __p) noexcept\n      |     ^~~\n/usr/include/c++/9/utility:258:5:\
    \ note:   template argument deduction/substitution failed:\n/usr/include/c++/9/utility:263:5:\
    \ note: candidate: \u2018template<class _Tp, class _Up> constexpr _Tp& std::get(std::pair<_Up,\
    \ _Tp>&)\u2019\n  263 |     get(pair<_Up, _Tp>& __p) noexcept\n      |     ^~~\n\
    /usr/include/c++/9/utility:263:5: note:   template argument deduction/substitution\
    \ failed:\n/usr/include/c++/9/utility:268:5: note: candidate: \u2018template<class\
    \ _Tp, class _Up> constexpr const _Tp& std::get(const std::pair<_Up, _Tp>&)\u2019\
    \n  268 |     get(const pair<_Up, _Tp>& __p) noexcept\n      |     ^~~\n/usr/include/c++/9/utility:268:5:\
    \ note:   template argument deduction/substitution failed:\n/usr/include/c++/9/utility:273:5:\
    \ note: candidate: \u2018template<class _Tp, class _Up> constexpr _Tp&& std::get(std::pair<_Up,\
    \ _Tp>&&)\u2019\n  273 |     get(pair<_Up, _Tp>&& __p) noexcept\n      |     ^~~\n\
    /usr/include/c++/9/utility:273:5: note:   template argument deduction/substitution\
    \ failed:\n/usr/include/c++/9/utility:278:5: note: candidate: \u2018template<class\
    \ _Tp, class _Up> constexpr const _Tp&& std::get(const std::pair<_Up, _Tp>&&)\u2019\
    \n  278 |     get(const pair<_Up, _Tp>&& __p) noexcept\n      |     ^~~\n/usr/include/c++/9/utility:278:5:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/9/tuple:39,\n                 from /usr/include/c++/9/functional:54,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmp0l2d3a_5.cpp:2:\n/usr/include/c++/9/array:307:5:\
    \ note: candidate: \u2018template<long unsigned int _Int, class _Tp, long unsigned\
    \ int _Nm> constexpr _Tp& std::get(std::array<_Tp, _Nm>&)\u2019\n  307 |     get(array<_Tp,\
    \ _Nm>& __arr) noexcept\n      |     ^~~\n/usr/include/c++/9/array:307:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmp0l2d3a_5.cpp:38:65:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018std::array<_Tp,\
    \ _Nm>\u2019\n   38 |                 res.push_back(std::make_tuple(i, std::get<1>(col)));\n\
    \      |                                                                 ^\nIn\
    \ file included from /usr/include/c++/9/tuple:39,\n                 from /usr/include/c++/9/functional:54,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmp0l2d3a_5.cpp:2:\n/usr/include/c++/9/array:316:5:\
    \ note: candidate: \u2018template<long unsigned int _Int, class _Tp, long unsigned\
    \ int _Nm> constexpr _Tp&& std::get(std::array<_Tp, _Nm>&&)\u2019\n  316 |   \
    \  get(array<_Tp, _Nm>&& __arr) noexcept\n      |     ^~~\n/usr/include/c++/9/array:316:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp0l2d3a_5.cpp:38:65:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018std::array<_Tp,\
    \ _Nm>\u2019\n   38 |                 res.push_back(std::make_tuple(i, std::get<1>(col)));\n\
    \      |                                                                 ^\nIn\
    \ file included from /usr/include/c++/9/tuple:39,\n                 from /usr/include/c++/9/functional:54,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmp0l2d3a_5.cpp:2:\n/usr/include/c++/9/array:324:5:\
    \ note: candidate: \u2018template<long unsigned int _Int, class _Tp, long unsigned\
    \ int _Nm> constexpr const _Tp& std::get(const std::array<_Tp, _Nm>&)\u2019\n\
    \  324 |     get(const array<_Tp, _Nm>& __arr) noexcept\n      |     ^~~\n/usr/include/c++/9/array:324:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp0l2d3a_5.cpp:38:65:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::array<_Tp,\
    \ _Nm>\u2019\n   38 |                 res.push_back(std::make_tuple(i, std::get<1>(col)));\n\
    \      |                                                                 ^\nIn\
    \ file included from /usr/include/c++/9/tuple:39,\n                 from /usr/include/c++/9/functional:54,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmp0l2d3a_5.cpp:2:\n/usr/include/c++/9/array:333:5:\
    \ note: candidate: \u2018template<long unsigned int _Int, class _Tp, long unsigned\
    \ int _Nm> constexpr const _Tp&& std::get(const std::array<_Tp, _Nm>&&)\u2019\n\
    \  333 |     get(const array<_Tp, _Nm>&& __arr) noexcept\n      |     ^~~\n/usr/include/c++/9/array:333:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp0l2d3a_5.cpp:38:65:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::array<_Tp,\
    \ _Nm>\u2019\n   38 |                 res.push_back(std::make_tuple(i, std::get<1>(col)));\n\
    \      |                                                                 ^\nIn\
    \ file included from /usr/include/c++/9/functional:54,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n                 from\
    \ /tmp/tmp0l2d3a_5.cpp:2:\n/usr/include/c++/9/tuple:1320:5: note: candidate: \u2018\
    template<long unsigned int __i, class ... _Elements> constexpr std::__tuple_element_t<__i,\
    \ std::tuple<_Elements ...> >& std::get(std::tuple<_Elements ...>&)\u2019\n 1320\
    \ |     get(tuple<_Elements...>& __t) noexcept\n      |     ^~~\n/usr/include/c++/9/tuple:1320:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp0l2d3a_5.cpp:38:65:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018std::tuple<_Elements\
    \ ...>\u2019\n   38 |                 res.push_back(std::make_tuple(i, std::get<1>(col)));\n\
    \      |                                                                 ^\nIn\
    \ file included from /usr/include/c++/9/functional:54,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n                 from\
    \ /tmp/tmp0l2d3a_5.cpp:2:\n/usr/include/c++/9/tuple:1326:5: note: candidate: \u2018\
    template<long unsigned int __i, class ... _Elements> constexpr std::__tuple_element_t<__i,\
    \ std::tuple<_Elements ...> >& std::get(const std::tuple<_Elements ...>&)\u2019\
    \n 1326 |     get(const tuple<_Elements...>& __t) noexcept\n      |     ^~~\n\
    /usr/include/c++/9/tuple:1326:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp0l2d3a_5.cpp:38:65: note:   \u2018std::vector<long int>\u2019\
    \ is not derived from \u2018const std::tuple<_Elements ...>\u2019\n   38 |   \
    \              res.push_back(std::make_tuple(i, std::get<1>(col)));\n      | \
    \                                                                ^\nIn file included\
    \ from /usr/include/c++/9/functional:54,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmp0l2d3a_5.cpp:2:\n/usr/include/c++/9/tuple:1332:5:\
    \ note: candidate: \u2018template<long unsigned int __i, class ... _Elements>\
    \ constexpr std::__tuple_element_t<__i, std::tuple<_Elements ...> >&& std::get(std::tuple<_Elements\
    \ ...>&&)\u2019\n 1332 |     get(tuple<_Elements...>&& __t) noexcept\n      |\
    \     ^~~\n/usr/include/c++/9/tuple:1332:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp0l2d3a_5.cpp:38:65: note:   \u2018std::vector<long int>\u2019\
    \ is not derived from \u2018std::tuple<_Elements ...>\u2019\n   38 |         \
    \        res.push_back(std::make_tuple(i, std::get<1>(col)));\n      |       \
    \                                                          ^\nIn file included\
    \ from /usr/include/c++/9/functional:54,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmp0l2d3a_5.cpp:2:\n/usr/include/c++/9/tuple:1341:5:\
    \ note: candidate: \u2018template<long unsigned int __i, class ... _Elements>\
    \ constexpr std::__tuple_element_t<__i, std::tuple<_Elements ...> >&& std::get(const\
    \ std::tuple<_Elements ...>&&)\u2019\n 1341 |     get(const tuple<_Elements...>&&\
    \ __t) noexcept\n      |     ^~~\n/usr/include/c++/9/tuple:1341:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmp0l2d3a_5.cpp:38:65: note: \
    \  \u2018std::vector<long int>\u2019 is not derived from \u2018const std::tuple<_Elements\
    \ ...>\u2019\n   38 |                 res.push_back(std::make_tuple(i, std::get<1>(col)));\n\
    \      |                                                                 ^\nIn\
    \ file included from /usr/include/c++/9/functional:54,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n                 from\
    \ /tmp/tmp0l2d3a_5.cpp:2:\n/usr/include/c++/9/tuple:1364:5: note: candidate: \u2018\
    template<class _Tp, class ... _Types> constexpr _Tp& std::get(std::tuple<_Elements\
    \ ...>&)\u2019\n 1364 |     get(tuple<_Types...>& __t) noexcept\n      |     ^~~\n\
    /usr/include/c++/9/tuple:1364:5: note:   template argument deduction/substitution\
    \ failed:\n/usr/include/c++/9/tuple:1370:5: note: candidate: \u2018template<class\
    \ _Tp, class ... _Types> constexpr _Tp&& std::get(std::tuple<_Elements ...>&&)\u2019\
    \n 1370 |     get(tuple<_Types...>&& __t) noexcept\n      |     ^~~\n/usr/include/c++/9/tuple:1370:5:\
    \ note:   template argument deduction/substitution failed:\n/usr/include/c++/9/tuple:1376:5:\
    \ note: candidate: \u2018template<class _Tp, class ... _Types> constexpr const\
    \ _Tp& std::get(const std::tuple<_Elements ...>&)\u2019\n 1376 |     get(const\
    \ tuple<_Types...>& __t) noexcept\n      |     ^~~\n/usr/include/c++/9/tuple:1376:5:\
    \ note:   template argument deduction/substitution failed:\n/usr/include/c++/9/tuple:1383:5:\
    \ note: candidate: \u2018template<class _Tp, class ... _Types> constexpr const\
    \ _Tp&& std::get(const std::tuple<_Elements ...>&&)\u2019\n 1383 |     get(const\
    \ tuple<_Types...>&& __t) noexcept\n      |     ^~~\n/usr/include/c++/9/tuple:1383:5:\
    \ note:   template argument deduction/substitution failed:\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    std::vector<std::tuple<long, long>> res;\n    for(auto &row\
    \ : lst) {\n        for(auto &col : row) {\n            if(col == x) {\n     \
    \           res.push_back(std::make_tuple(row.size() - 1, col.size() - 1));\n\
    \            }\n        }\n    }\n    std::sort(res.begin(), res.end(), [](auto\
    \ &a, auto &b) { return std::get<0>(a) < std::get<0>(b); });\n    std::sort(res.begin(),\
    \ res.end(), [](auto &a, auto &b) { return std::get<1>(a) < std::get<1>(b); });\n\
    \    return res;\n}\nint main() {\n    auto candidate = get_row;\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_9s72c3l.cpp: In function \u2018std::vector<std::tuple<long int,\
    \ long int> > get_row(std::vector<std::vector<long int> >, long int)\u2019:\n\
    /tmp/tmp_9s72c3l.cpp:24:67: error: request for member \u2018size\u2019 in \u2018\
    col\u2019, which is of non-class type \u2018long int\u2019\n   24 |          \
    \       res.push_back(std::make_tuple(row.size() - 1, col.size() - 1));\n    \
    \  |                                                                   ^~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    std::vector<std::tuple<long, long>> res;\n    std::vector<long>\
    \ row;\n    std::vector<long> col;\n    for (auto &i : lst) {\n        row.push_back(i[0]);\n\
    \        col.push_back(i.size() - 1);\n    }\n    std::sort(row.begin(), row.end());\n\
    \    std::sort(col.begin(), col.end());\n    for (long i = 0; i < row.size();\
    \ i++) {\n        if (row[i] == x) {\n            std::sort(col.begin(), col.end());\n\
    \            for (long j = 0; j < col.size(); j++) {\n                res.push_back(std::make_tuple(i,\
    \ col[j]));\n            }\n        }\n    }\n    return res;\n}\nint main() {\n\
    \    auto candidate = get_row;\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "tmpbypt__va: /tmp/tmpbypt__va.cpp:41: int main(): Assertion `candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    // Your code here\n    std::vector<std::tuple<long, long>>\
    \ res;\n    for(auto &row : lst) {\n        for(auto &el : row) {\n          \
    \  if(el == x) {\n                res.emplace_back(std::make_tuple(row.size()\
    \ - 1, row.size() - 1));\n            }\n        }\n    }\n    std::sort(res.begin(),\
    \ res.end(), [](const std::tuple<long, long> &a, const std::tuple<long, long>\
    \ &b) -> bool {\n        return std::get<0>(a) < std::get<0>(b);\n    });\n  \
    \  std::sort(res.begin(), res.end(), [](const std::tuple<long, long> &a, const\
    \ std::tuple<long, long> &b) -> bool {\n        return std::get<1>(a) < std::get<1>(b);\n\
    \    });\n    return res;\n}\nint main() {\n    auto candidate = get_row;\n  \
    \  assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "tmpsqpqjvao: /tmp/tmpsqpqjvao.cpp:39: int main(): Assertion `candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    std::vector<std::tuple<long, long>> res;\n    std::vector<long>\
    \ row;\n    std::vector<long> col;\n    for (auto &v : lst) {\n        row.push_back(v[0]);\n\
    \        col.push_back(v[1]);\n    }\n    std::sort(row.begin(), row.end());\n\
    \    std::sort(col.begin(), col.end());\n    for (long i = 0; i < row.size();\
    \ i++) {\n        if (row[i] == x) {\n            res.push_back(std::make_tuple(i,\
    \ col[i]));\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = get_row;\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "tmplonnq149: /tmp/tmplonnq149.cpp:38: int main(): Assertion `candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    std::vector<std::tuple<long, long>> res;\n    for(auto &row\
    \ : lst) {\n        for(auto &el : row) {\n            if(el == x) {\n       \
    \         res.emplace_back(std::make_tuple(row.size(), row.size() - 1));\n   \
    \         }\n        }\n    }\n    std::sort(res.begin(), res.end(), [](auto &a,\
    \ auto &b) { return std::get<0>(a) > std::get<0>(b); });\n    std::sort(res.begin(),\
    \ res.end(), [](auto &a, auto &b) { return std::get<1>(a) > std::get<1>(b); });\n\
    \    return res;\n}\nint main() {\n    auto candidate = get_row;\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "tmpylv93hwm: /tmp/tmpylv93hwm.cpp:34: int main(): Assertion `candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    std::vector<std::tuple<long, long>> res;\n    std::vector<long>\
    \ row;\n    std::vector<long> col;\n    for (auto &i : lst) {\n        row.push_back(i[0]);\n\
    \        col.push_back(i.size() - 1);\n    }\n    std::sort(row.begin(), row.end());\n\
    \    std::sort(col.begin(), col.end());\n    for (long i = 0; i < row.size();\
    \ i++) {\n        long j = col[i];\n        while (j > 0) {\n            if (row[j]\
    \ == x) {\n                res.push_back(std::make_tuple(i, j));\n           \
    \ }\n            j--;\n        }\n    }\n    return res;\n}\nint main() {\n  \
    \  auto candidate = get_row;\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "tmpd0hzi3os: /tmp/tmpd0hzi3os.cpp:42: int main(): Assertion `candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    std::vector<std::tuple<long, long>> res;\n    std::vector<long>\
    \ row;\n    std::vector<long> col;\n    long row_index = 0;\n    long col_index\
    \ = 0;\n    long row_size = lst.size();\n    long col_size = lst[0].size();\n\
    \    long row_max = std::max(row_size, col_size);\n    long col_max = std::max(row_size,\
    \ col_size);\n    long row_min = std::min(row_size, col_size);\n    long col_min\
    \ = std::min(row_size, col_size);\n    long row_mid = row_size / 2;\n    long\
    \ col_mid = col_size / 2;\n    for (long i = 0; i < row_size; i++) {\n       \
    \ row.push_back(i);\n    }\n    for (long i = 0; i < col_size; i++) {\n      \
    \  col.push_back(i);\n    }\n    for (long i = 0; i < row_max; i++) {\n      \
    \  for (long j = 0; j < col_max; j++) {\n            if (i == row_mid && j ==\
    \ col_mid && row_mid != col_mid) {\n                res.push_back(std::make_tuple(i,\
    \ j));\n            }\n            if (i == row_mid && j != col_mid && row_mid\
    \ != col_mid) {\n                res.push_back(std::make_tuple(i, j));\n     \
    \       }\n            if (i != row_mid && j == col_mid && row_mid != col_mid)\
    \ {\n                res.push_back(std::make_tuple(i, j));\n            }\n  \
    \          if (i != row_mid && j != col_mid && row_mid != col_mid) {\n       \
    \         res.push_back(std::make_tuple(i, j));\n            }\n            if\
    \ (i == row_mid && j == col_mid && row_mid == col_mid) {\n                res.push_back(std::make_tuple(i,\
    \ j));\n            }\n            if (i != row_mid && j == col_mid && row_mid\
    \ == col_mid) {\n                res.push_back(std::make_tuple(i, j));\n     \
    \       }\n            if (i != row_mid && j != col_mid && row_mid == col_mid)\
    \ {\n                res.push_back(std::make_tuple(i, j));\n            }\n  \
    \          if (i == row_mid && j != col_mid && row_mid != col_mid) {\n       \
    \         res.push_back(std::make_tuple(i, j));\n            }\n            if\
    \ (i != row_mid && j == col_mid && row_mid != col_mid) {\n                res.push_back(std::make_tuple(i,\
    \ j));\n            }\n            if (i != row_mid && j != col_mid && row_mid\
    \ != col_mid) {\n                res.push_back(std::make_tuple(i, j));\n     \
    \       }\n        }\n    }\n    std::sort(res.begin(), res.end(), [](const std::tuple<long,\
    \ long> &a, const std::tuple<long, long> &b) {\n        return std::get\n}\nint\
    \ main() {\n    auto candidate = get_row;\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0m8getk8.cpp: In lambda function:\n/tmp/tmp0m8getk8.cpp:74:21:\
    \ error: unable to deduce lambda return type from \u2018std::get\u2019\n   74\
    \ |         return std::get\n      |                     ^~~\n/tmp/tmp0m8getk8.cpp:74:21:\
    \ note:   couldn\u2019t deduce template parameter \u2018auto\u2019\n/tmp/tmp0m8getk8.cpp:74:24:\
    \ error: expected \u2018;\u2019 before \u2018}\u2019 token\n   74 |         return\
    \ std::get\n      |                        ^\n      |                        ;\n\
    \   75 | }\n      | ~                       \n/tmp/tmp0m8getk8.cpp: In function\
    \ \u2018std::vector<std::tuple<long int, long int> > get_row(std::vector<std::vector<long\
    \ int> >, long int)\u2019:\n/tmp/tmp0m8getk8.cpp:75:2: error: expected \u2018\
    )\u2019 before \u2018int\u2019\n   75 | }\n      |  ^\n      |  )\n   76 | int\
    \ main() {\n      | ~~~\n/tmp/tmp0m8getk8.cpp:73:14: note: to match this \u2018\
    (\u2019\n   73 |     std::sort(res.begin(), res.end(), [](const std::tuple<long,\
    \ long> &a, const std::tuple<long, long> &b) {\n      |              ^\n/tmp/tmp0m8getk8.cpp:84:1:\
    \ error: expected \u2018}\u2019 at end of input\n   84 | }\n      | ^\n/tmp/tmp0m8getk8.cpp:19:89:\
    \ note: to match this \u2018{\u2019\n   19 | std::vector<std::tuple<long, long>>\
    \ get_row(std::vector<std::vector<long>> lst, long x) {\n      |             \
    \                                                                            ^\n\
    /tmp/tmp0m8getk8.cpp:84:1: warning: no return statement in function returning\
    \ non-void [-Wreturn-type]\n   84 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    std::vector<std::tuple<long, long>> res;\n    for(auto &row\
    \ : lst) {\n        for(auto &val : row) {\n            if(val == x) {\n     \
    \           res.emplace_back(std::make_tuple(row.size() - 1, row.size() - 1));\n\
    \            }\n        }\n    }\n    std::sort(res.begin(), res.end(), [](std::tuple<long,\
    \ long> a, std::tuple<long, long> b) {\n        return std::get<0>(a) < std::get<0>(b);\n\
    \    });\n    std::sort(res.begin(), res.end(), [](std::tuple<long, long> a, std::tuple<long,\
    \ long> b) {\n        return std::get<1>(a) < std::get<1>(b);\n    });\n    return\
    \ res;\n}\nint main() {\n    auto candidate = get_row;\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "tmpr0pthmcb: /tmp/tmpr0pthmcb.cpp:38: int main(): Assertion `candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    // Your code here\n    std::vector<std::tuple<long, long>>\
    \ res;\n    for(auto &row : lst) {\n        for(auto &el : row) {\n          \
    \  if(el == x) {\n                res.emplace_back(row.size() - 1, row.size()\
    \ - 1);\n            }\n        }\n    }\n    std::sort(res.begin(), res.end(),\
    \ [](const std::tuple<long, long> &a, const std::tuple<long, long> &b) { return\
    \ std::get<0>(a) < std::get<0>(b); });\n    std::sort(res.begin(), res.end(),\
    \ [](const std::tuple<long, long> &a, const std::tuple<long, long> &b) { return\
    \ std::get<1>(a) < std::get<1>(b); });\n    return res;\n}\nint main() {\n   \
    \ auto candidate = get_row;\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "tmp3staml0w: /tmp/tmp3staml0w.cpp:35: int main(): Assertion `candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    std::vector<std::tuple<long, long>> res;\n    for(auto &row\
    \ : lst) {\n        for(auto &val : row) {\n            if(val == x) {\n     \
    \           res.push_back(std::make_tuple(row.size(), row.size() - 1));\n    \
    \        }\n        }\n    }\n    std::sort(res.begin(), res.end(), [](const std::tuple<long,\
    \ long> &a, const std::tuple<long, long> &b) { return std::get<0>(a) > std::get<0>(b);\
    \ });\n    std::sort(res.begin(), res.end(), [](const std::tuple<long, long> &a,\
    \ const std::tuple<long, long> &b) { return std::get<1>(a) > std::get<1>(b); });\n\
    \    return res;\n}\nint main() {\n    auto candidate = get_row;\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "tmpkcuylkd4: /tmp/tmpkcuylkd4.cpp:34: int main(): Assertion `candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    std::vector<std::tuple<long, long>> res;\n    long n = lst.size();\n\
    \    long m = lst[0].size();\n    long i = 0;\n    long j = 0;\n    long k = 0;\n\
    \    long l = 0;\n    long m1 = m - 1;\n    long n1 = n - 1;\n    while (i < n1\
    \ && j < m1) {\n        if (lst[i][j] == x) {\n            std::tuple<long, long>\
    \ t = std::make_tuple(i, j);\n            res.push_back(t);\n            i +=\
    \ 1;\n            j += 1;\n        } else if (lst[i][j] < x) {\n            i\
    \ += 1;\n        } else {\n            j += 1;\n        }\n    }\n    while (i\
    \ < n1) {\n        std::tuple<long, long> t = std::make_tuple(i, 0);\n       \
    \ res.push_back(t);\n        i += 1;\n    }\n    while (j < m1) {\n        std::tuple<long,\
    \ long> t = std::make_tuple(0, j);\n        res.push_back(t);\n        j += 1;\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_row;\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "tmp9covz7q_: /tmp/tmp9covz7q_.cpp:55: int main(): Assertion `candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    // Write your code here\n    std::vector<std::tuple<long,\
    \ long>> res;\n    for(auto &row : lst){\n        for(auto &el : row){\n     \
    \       if(el == x){\n                res.emplace_back(std::make_tuple(row.size()\
    \ - 1, row.size() - 1));\n            }\n        }\n    }\n    std::sort(res.begin(),\
    \ res.end(), [](const std::tuple<long, long> &a, const std::tuple<long, long>\
    \ &b){\n        return std::get<0>(a) < std::get<0>(b);\n    });\n    std::sort(res.begin(),\
    \ res.end(), [](const std::tuple<long, long> &a, const std::tuple<long, long>\
    \ &b){\n        return std::get<1>(a) < std::get<1>(b);\n    });\n    return res;\n\
    }\nint main() {\n    auto candidate = get_row;\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "tmpqky2y4_4: /tmp/tmpqky2y4_4.cpp:39: int main(): Assertion `candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    std::vector<std::tuple<long, long>> res;\n    std::vector<long>\
    \ row;\n    std::vector<long> col;\n    std::vector<long> temp;\n    long cnt\
    \ = 0;\n    for (auto &i : lst) {\n        row.push_back(i.size());\n        col.push_back(i);\n\
    \    }\n    sort(row.begin(), row.end());\n    sort(col.begin(), col.end());\n\
    \    for (long i = 0; i < row.size(); i++) {\n        for (long j = 0; j < col.size();\
    \ j++) {\n            if (row[i] == col[j]) {\n                temp.push_back(col[j]);\n\
    \                cnt++;\n            }\n        }\n    }\n    for (long i = 0;\
    \ i < temp.size(); i++) {\n        res.push_back(std::make_tuple(i, temp[i]));\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_row;\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmppgj6wo5e.cpp: In function \u2018std::vector<std::tuple<long int,\
    \ long int> > get_row(std::vector<std::vector<long int> >, long int)\u2019:\n\
    /tmp/tmppgj6wo5e.cpp:27:24: error: no matching function for call to \u2018std::vector<long\
    \ int>::push_back(std::vector<long int>&)\u2019\n   27 |         col.push_back(i);\n\
    \      |                        ^\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/queue:61,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:86,\n\
    \                 from /tmp/tmppgj6wo5e.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = long int; _Alloc = std::allocator<long int>; std::vector<_Tp, _Alloc>::value_type\
    \ = long int]\u2019\n 1184 |       push_back(const value_type& __x)\n      | \
    \      ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1184:35: note:   no known\
    \ conversion for argument 1 from \u2018std::vector<long int>\u2019 to \u2018const\
    \ value_type&\u2019 {aka \u2018const long int&\u2019}\n 1184 |       push_back(const\
    \ value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n/usr/include/c++/9/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = long int; _Alloc = std::allocator<long int>;\
    \ std::vector<_Tp, _Alloc>::value_type = long int]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018std::vector<long int>\u2019\
    \ to \u2018std::vector<long int>::value_type&&\u2019 {aka \u2018long int&&\u2019\
    }\n 1200 |       push_back(value_type&& __x)\n      |                 ~~~~~~~~~~~~~^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    // Write your code here\n    std::vector<std::tuple<long,\
    \ long>> res;\n    for(auto &row : lst){\n        for(auto &col : row){\n    \
    \        if(col == x){\n                res.push_back(std::make_tuple(row.size()\
    \ - 1, col.size() - 1));\n            }\n        }\n    }\n    std::sort(res.begin(),\
    \ res.end(), [](auto &a, auto &b){return std::get<0>(a) < std::get<0>(b);});\n\
    \    std::sort(res.begin(), res.end(), [](auto &a, auto &b){return std::get<1>(a)\
    \ < std::get<1>(b);});\n    return res;\n}\nint main() {\n    auto candidate =\
    \ get_row;\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpbfgux_48.cpp: In function \u2018std::vector<std::tuple<long int,\
    \ long int> > get_row(std::vector<std::vector<long int> >, long int)\u2019:\n\
    /tmp/tmpbfgux_48.cpp:25:67: error: request for member \u2018size\u2019 in \u2018\
    col\u2019, which is of non-class type \u2018long int\u2019\n   25 |          \
    \       res.push_back(std::make_tuple(row.size() - 1, col.size() - 1));\n    \
    \  |                                                                   ^~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    std::vector<std::tuple<long, long>> res;\n    std::vector<long>\
    \ row;\n    std::vector<long> col;\n    long cnt = 0;\n    for (auto &i : lst)\
    \ {\n        row.push_back(i.size());\n        col.push_back(cnt);\n        cnt\
    \ += i.size();\n    }\n    std::sort(row.begin(), row.end(), [](long a, long b)\
    \ { return a < b; });\n    std::sort(col.begin(), col.end(), [](long a, long b)\
    \ { return a < b; });\n    for (long i = 0; i < row.size(); i++) {\n        for\
    \ (long j = 0; j < col[i]; j++) {\n            if (row[i] == x && col[j] == x)\
    \ {\n                res.push_back({i, j});\n            }\n        }\n    }\n\
    \    return res;\n}\nint main() {\n    auto candidate = get_row;\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "tmpmxko77oa: /tmp/tmpmxko77oa.cpp:42: int main(): Assertion `candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    // Write your code here\n    std::vector<std::tuple<long,\
    \ long>> res;\n    for(auto &row : lst) {\n        for(auto &col : row) {\n  \
    \          if(col == x) {\n                res.push_back(std::make_tuple(row.size()\
    \ - 1, col.size() - 1));\n            }\n        }\n    }\n    std::sort(res.begin(),\
    \ res.end(), [](auto &a, auto &b){return std::get<0>(a) < std::get<0>(b);});\n\
    \    std::sort(res.begin(), res.end(), [](auto &a, auto &b){return std::get<1>(a)\
    \ < std::get<1>(b);});\n    return res;\n}\nint main() {\n    auto candidate =\
    \ get_row;\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5quthf4c.cpp: In function \u2018std::vector<std::tuple<long int,\
    \ long int> > get_row(std::vector<std::vector<long int> >, long int)\u2019:\n\
    /tmp/tmp5quthf4c.cpp:25:67: error: request for member \u2018size\u2019 in \u2018\
    col\u2019, which is of non-class type \u2018long int\u2019\n   25 |          \
    \       res.push_back(std::make_tuple(row.size() - 1, col.size() - 1));\n    \
    \  |                                                                   ^~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    std::vector<std::tuple<long, long>> res;\n    std::vector<long>\
    \ row;\n    std::vector<long> col;\n    for (auto &v : lst) {\n        row.push_back(v[0]);\n\
    \        col.push_back(v[1]);\n    }\n    std::sort(row.begin(), row.end());\n\
    \    std::sort(col.begin(), col.end());\n    for (long i = 0; i < row.size();\
    \ i++) {\n        for (long j = 0; j < col.size(); j++) {\n            if (row[i]\
    \ == x && col[j] == x) {\n                res.push_back(std::make_tuple(i, j));\n\
    \            }\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = get_row;\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "tmpaaaubilh: /tmp/tmpaaaubilh.cpp:40: int main(): Assertion `candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    // Write your code here\n    std::vector<std::tuple<long,\
    \ long>> res;\n    for(auto &row : lst) {\n        for(auto &val : row) {\n  \
    \          if(val == x) {\n                res.push_back({row.size(), row.size()\
    \ - 1});\n            }\n        }\n    }\n    std::sort(res.begin(), res.end(),\
    \ [](const std::tuple<long, long> &a, const std::tuple<long, long> &b) { return\
    \ std::get<0>(a) < std::get<0>(b); });\n    std::sort(res.begin(), res.end(),\
    \ [](const std::tuple<long, long> &a, const std::tuple<long, long> &b) { return\
    \ std::get<1>(a) < std::get<1>(b); });\n    return res;\n}\nint main() {\n   \
    \ auto candidate = get_row;\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "tmpzz5monbc: /tmp/tmpzz5monbc.cpp:35: int main(): Assertion `candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    std::vector<std::tuple<long, long>> res;\n    for(auto &row\
    \ : lst) {\n        for(auto &val : row) {\n            if(val == x) {\n     \
    \           res.emplace_back(std::make_tuple(row.size(), row.size() - 1));\n \
    \           }\n        }\n    }\n    std::sort(res.begin(), res.end(), [](auto\
    \ &a, auto &b) { return std::get<0>(a) < std::get<0>(b); });\n    std::sort(res.begin(),\
    \ res.end(), [](auto &a, auto &b) { return std::get<1>(a) < std::get<1>(b); });\n\
    \    return res;\n}\nint main() {\n    auto candidate = get_row;\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "tmpcur15x8v: /tmp/tmpcur15x8v.cpp:34: int main(): Assertion `candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    // Write your code here\n    std::vector<std::tuple<long,\
    \ long>> res;\n    for(auto &row : lst) {\n        for(auto &col : row) {\n  \
    \          if(col == x) {\n                res.push_back({row, col});\n      \
    \      }\n        }\n    }\n    std::sort(res.begin(), res.end(), [](const std::tuple<long,\
    \ long> &a, const std::tuple<long, long> &b) -> bool {\n        return std::get<0>(a)\
    \ < std::get<0>(b);\n    });\n    std::sort(res.begin(), res.end(), [](const std::tuple<long,\
    \ long> &a, const std::tuple<long, long> &b) -> bool {\n        return std::get<1>(a)\
    \ > std::get<1>(b);\n    });\n    return res;\n}\nint main() {\n    auto candidate\
    \ = get_row;\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpeapso62g.cpp: In function \u2018std::vector<std::tuple<long int,\
    \ long int> > get_row(std::vector<std::vector<long int> >, long int)\u2019:\n\
    /tmp/tmpeapso62g.cpp:25:41: error: no matching function for call to \u2018std::vector<std::tuple<long\
    \ int, long int> >::push_back(<brace-enclosed initializer list>)\u2019\n   25\
    \ |                 res.push_back({row, col});\n      |                      \
    \                   ^\nIn file included from /usr/include/c++/9/vector:67,\n \
    \                from /usr/include/c++/9/queue:61,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:86,\n\
    \                 from /tmp/tmpeapso62g.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::tuple<long int, long int>; _Alloc = std::allocator<std::tuple<long\
    \ int, long int> >; std::vector<_Tp, _Alloc>::value_type = std::tuple<long int,\
    \ long int>]\u2019\n 1184 |       push_back(const value_type& __x)\n      |  \
    \     ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1184:35: note:   no known\
    \ conversion for argument 1 from \u2018<brace-enclosed initializer list>\u2019\
    \ to \u2018const value_type&\u2019 {aka \u2018const std::tuple<long int, long\
    \ int>&\u2019}\n 1184 |       push_back(const value_type& __x)\n      |      \
    \           ~~~~~~~~~~~~~~~~~~^~~\n/usr/include/c++/9/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = std::tuple<long int, long int>; _Alloc =\
    \ std::allocator<std::tuple<long int, long int> >; std::vector<_Tp, _Alloc>::value_type\
    \ = std::tuple<long int, long int>]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018<brace-enclosed initializer\
    \ list>\u2019 to \u2018std::vector<std::tuple<long int, long int> >::value_type&&\u2019\
    \ {aka \u2018std::tuple<long int, long int>&&\u2019}\n 1200 |       push_back(value_type&&\
    \ __x)\n      |                 ~~~~~~~~~~~~~^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    // Write your code here\n    std::vector<std::tuple<long,\
    \ long>> res;\n    for(auto &row : lst){\n        for(auto &col : row){\n    \
    \        if(col == x){\n                res.emplace_back(std::make_tuple(row.size()\
    \ - 1, col.size() - 1));\n            }\n        }\n    }\n    std::sort(res.begin(),\
    \ res.end(), [](auto &a, auto &b){return std::get<0>(a) < std::get<0>(b);});\n\
    \    std::sort(res.begin(), res.end(), [](auto &a, auto &b){return std::get<1>(a)\
    \ < std::get<1>(b);});\n    return res;\n}\nint main() {\n    auto candidate =\
    \ get_row;\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpci82dqy8.cpp: In function \u2018std::vector<std::tuple<long int,\
    \ long int> > get_row(std::vector<std::vector<long int> >, long int)\u2019:\n\
    /tmp/tmpci82dqy8.cpp:25:70: error: request for member \u2018size\u2019 in \u2018\
    col\u2019, which is of non-class type \u2018long int\u2019\n   25 |          \
    \       res.emplace_back(std::make_tuple(row.size() - 1, col.size() - 1));\n \
    \     |                                                                      ^~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    // Write your code here\n    std::vector<std::tuple<long,\
    \ long>> res;\n    for(auto &row : lst){\n        for(auto &col : row){\n    \
    \        if(col == x){\n                res.emplace_back(std::make_tuple(row.size()\
    \ - 1, col.size() - 1));\n            }\n        }\n    }\n    std::sort(res.begin(),\
    \ res.end(), [](auto &a, auto &b){return std::get<0>(a) < std::get<0>(b);});\n\
    \    std::sort(res.begin(), res.end(), [](auto &a, auto &b){return std::get<1>(a)\
    \ > std::get<1>(b);});\n    return res;\n}\nint main() {\n    auto candidate =\
    \ get_row;\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmppcx5dmwg.cpp: In function \u2018std::vector<std::tuple<long int,\
    \ long int> > get_row(std::vector<std::vector<long int> >, long int)\u2019:\n\
    /tmp/tmppcx5dmwg.cpp:25:70: error: request for member \u2018size\u2019 in \u2018\
    col\u2019, which is of non-class type \u2018long int\u2019\n   25 |          \
    \       res.emplace_back(std::make_tuple(row.size() - 1, col.size() - 1));\n \
    \     |                                                                      ^~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    std::vector<std::tuple<long, long>> res;\n    for(auto &row\
    \ : lst) {\n        for(auto &val : row) {\n            if(val == x) {\n     \
    \           res.push_back(std::make_tuple(row.size() - 1, row.size() - 1));\n\
    \            }\n        }\n    }\n    std::sort(res.begin(), res.end(), [](std::tuple<long,\
    \ long> a, std::tuple<long, long> b) {\n        return std::get<0>(a) < std::get<0>(b);\n\
    \    });\n    std::sort(res.begin(), res.end(), [](std::tuple<long, long> a, std::tuple<long,\
    \ long> b) {\n        return std::get<1>(a) < std::get<1>(b);\n    });\n    return\
    \ res;\n}\nint main() {\n    auto candidate = get_row;\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "tmpunywszbi: /tmp/tmpunywszbi.cpp:38: int main(): Assertion `candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    std::vector<std::tuple<long, long>> res;\n    long n = lst.size();\n\
    \    long m = lst[0].size();\n    long i = 0;\n    long j = 0;\n    long k = 0;\n\
    \    long l = 0;\n    long m1 = n - 1;\n    long m2 = m - 1;\n    while (i < m1\
    \ && j < m2) {\n        if (lst[i][j] == x) {\n            res.push_back({i, j});\n\
    \            i += 1;\n            j += 1;\n        } else if (lst[i][j] > x) {\n\
    \            i += 1;\n        } else {\n            j += 1;\n        }\n    }\n\
    \    while (i < m1) {\n        res.push_back({i, 0});\n        i += 1;\n    }\n\
    \    while (j < m2) {\n        res.push_back({0, j});\n        j += 1;\n    }\n\
    \    return res;\n}\nint main() {\n    auto candidate = get_row;\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "tmptjcv8z67: /tmp/tmptjcv8z67.cpp:52: int main(): Assertion `candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    std::vector<std::tuple<long, long>> res;\n    long row =\
    \ 0;\n    long col = 0;\n    for (auto &row : lst) {\n        long row_size =\
    \ row.size();\n        for (long i = 0; i < row_size; i++) {\n            if (row[i]\
    \ == x) {\n                res.push_back({row, col});\n                break;\n\
    \            }\n        }\n        col += row_size;\n    }\n    std::sort(res.begin(),\
    \ res.end(), [](const std::tuple<long, long> &a, const std::tuple<long, long>\
    \ &b) -> bool {\n        return std::get<0>(a) < std::get<0>(b);\n    });\n  \
    \  std::sort(res.begin(), res.end(), [](const std::tuple<long, long> &a, const\
    \ std::tuple<long, long> &b) -> bool {\n        return std::get<1>(a) > std::get<1>(b);\n\
    \    });\n    return res;\n}\nint main() {\n    auto candidate = get_row;\n  \
    \  assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpqo4tlotx.cpp: In function \u2018std::vector<std::tuple<long int,\
    \ long int> > get_row(std::vector<std::vector<long int> >, long int)\u2019:\n\
    /tmp/tmpqo4tlotx.cpp:27:41: error: no matching function for call to \u2018std::vector<std::tuple<long\
    \ int, long int> >::push_back(<brace-enclosed initializer list>)\u2019\n   27\
    \ |                 res.push_back({row, col});\n      |                      \
    \                   ^\nIn file included from /usr/include/c++/9/vector:67,\n \
    \                from /usr/include/c++/9/queue:61,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:86,\n\
    \                 from /tmp/tmpqo4tlotx.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::tuple<long int, long int>; _Alloc = std::allocator<std::tuple<long\
    \ int, long int> >; std::vector<_Tp, _Alloc>::value_type = std::tuple<long int,\
    \ long int>]\u2019\n 1184 |       push_back(const value_type& __x)\n      |  \
    \     ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1184:35: note:   no known\
    \ conversion for argument 1 from \u2018<brace-enclosed initializer list>\u2019\
    \ to \u2018const value_type&\u2019 {aka \u2018const std::tuple<long int, long\
    \ int>&\u2019}\n 1184 |       push_back(const value_type& __x)\n      |      \
    \           ~~~~~~~~~~~~~~~~~~^~~\n/usr/include/c++/9/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = std::tuple<long int, long int>; _Alloc =\
    \ std::allocator<std::tuple<long int, long int> >; std::vector<_Tp, _Alloc>::value_type\
    \ = std::tuple<long int, long int>]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018<brace-enclosed initializer\
    \ list>\u2019 to \u2018std::vector<std::tuple<long int, long int> >::value_type&&\u2019\
    \ {aka \u2018std::tuple<long int, long int>&&\u2019}\n 1200 |       push_back(value_type&&\
    \ __x)\n      |                 ~~~~~~~~~~~~~^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    // Your code here\n    std::vector<std::tuple<long, long>>\
    \ res;\n    for(auto &row : lst) {\n        for(auto &el : row) {\n          \
    \  if(el == x) {\n                res.push_back(std::make_tuple(row.size() - 1,\
    \ row.size() - 1));\n            }\n        }\n    }\n    std::sort(res.begin(),\
    \ res.end(), [](const std::tuple<long, long> &a, const std::tuple<long, long>\
    \ &b) -> bool {\n        return std::get<0>(a) < std::get<0>(b);\n    });\n  \
    \  std::sort(res.begin(), res.end(), [](const std::tuple<long, long> &a, const\
    \ std::tuple<long, long> &b) -> bool {\n        return std::get<1>(a) < std::get<1>(b);\n\
    \    });\n    return res;\n}\nint main() {\n    auto candidate = get_row;\n  \
    \  assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "tmppusyvqv1: /tmp/tmppusyvqv1.cpp:39: int main(): Assertion `candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    std::vector<std::tuple<long, long>> res;\n    long n = lst.size();\n\
    \    long m = lst[0].size();\n    long i = 0;\n    long j = 0;\n    long k = 0;\n\
    \    long l = 0;\n    long m1 = m;\n    long n1 = n;\n    long k1 = k;\n    long\
    \ l1 = l;\n    long m2 = m;\n    long n2 = n;\n    long k2 = k;\n    long l2 =\
    \ l;\n    long m3 = m;\n    long n3 = n;\n    long k3 = k;\n    long l3 = l;\n\
    \    long m4 = m;\n    long n4 = n;\n    long k4 = k;\n    long l4 = l;\n    long\
    \ m5 = m;\n    long n5 = n;\n    long k5 = k;\n    long l5 = l;\n    long m6 =\
    \ m;\n    long n6 = n;\n    long k6 = k;\n    long l6 = l;\n    long m7 = m;\n\
    \    long n7 = n;\n    long k7 = k;\n    long l7 = l;\n    long m8 = m;\n    long\
    \ n8 = n;\n    long k8 = k;\n    long l8 = l;\n    long m9 = m;\n    long n9 =\
    \ n;\n    long k9 = k;\n    long l9 = l;\n    long m10 = m;\n    long n10 = n;\n\
    \    long k10 = k;\n    long l10 = l;\n    long m11 = m;\n    long n11 = n;\n\
    \    long k11 = k;\n    long l11 = l;\n    long m12 = m;\n    long n12 = n;\n\
    \    long k12 = k;\n    long l12 = l;\n    long m13 = m;\n    long n13 = n;\n\
    \    long k13 = k;\n    long l13 = l;\n    long m14 = m;\n    long n14 = n;\n\
    \    long k14 = k;\n    long l14 = l;\n    long m15 = m;\n    long n15 = n;\n\
    \    long k15 = k;\n    long l15 = l;\n    long m16 = m;\n    long n16 = n;\n\
    \    long k16 = k;\n    long l16 = l;\n    long m17 = m;\n    long n17 = n;\n\
    \    long k17 = k;\n    long l17 = l;\n    long m18 = m;\n    long n18 = n;\n\
    \    long k18 = k;\n    long l18 = l;\n    long m19 = m;\n    long n19\n}\nint\
    \ main() {\n    auto candidate = get_row;\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5lo3foy4.cpp: In function \u2018std::vector<std::tuple<long int,\
    \ long int> > get_row(std::vector<std::vector<long int> >, long int)\u2019:\n\
    /tmp/tmp5lo3foy4.cpp:101:1: error: expected initializer before \u2018}\u2019 token\n\
    \  101 | }\n      | ^\n/tmp/tmp5lo3foy4.cpp:101:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    std::vector<std::tuple<long, long>> res;\n    std::vector<long>\
    \ row;\n    std::vector<long> col;\n    long row_index = 0;\n    long col_index\
    \ = 0;\n    for (auto &row : lst) {\n        row.push_back(x);\n        row_index++;\n\
    \    }\n    for (auto &row : lst) {\n        for (auto &col : row) {\n       \
    \     col.push_back(x);\n            col_index++;\n        }\n    }\n    std::sort(row.begin(),\
    \ row.end());\n    std::sort(col.begin(), col.end());\n    for (long i = 0; i\
    \ < row_index; i++) {\n        res.push_back(std::make_tuple(i, row[i]));\n  \
    \  }\n    for (long i = 0; i < col_index; i++) {\n        res.push_back(std::make_tuple(row[i],\
    \ i));\n    }\n    return res;\n}\nint main() {\n    auto candidate = get_row;\n\
    \    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_d5rxr6b.cpp: In function \u2018std::vector<std::tuple<long int,\
    \ long int> > get_row(std::vector<std::vector<long int> >, long int)\u2019:\n\
    /tmp/tmp_d5rxr6b.cpp:31:17: error: request for member \u2018push_back\u2019 in\
    \ \u2018col\u2019, which is of non-class type \u2018long int\u2019\n   31 |  \
    \           col.push_back(x);\n      |                 ^~~~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    std::vector<std::tuple<long, long>> res;\n    for(auto &row\
    \ : lst) {\n        for(auto &val : row) {\n            if(val == x) {\n     \
    \           res.push_back({row.size(), row.size() - 1});\n            }\n    \
    \    }\n    }\n    std::sort(res.begin(), res.end(), [](const std::tuple<long,\
    \ long> &a, const std::tuple<long, long> &b) -> bool {\n        return std::get<0>(a)\
    \ < std::get<0>(b);\n    });\n    std::sort(res.begin(), res.end(), [](const std::tuple<long,\
    \ long> &a, const std::tuple<long, long> &b) -> bool {\n        return std::get<1>(a)\
    \ < std::get<1>(b);\n    });\n    return res;\n}\nint main() {\n    auto candidate\
    \ = get_row;\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "tmpgdep0ho7: /tmp/tmpgdep0ho7.cpp:38: int main(): Assertion `candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    std::vector<std::tuple<long, long>> res;\n    long row =\
    \ 0;\n    long col = 0;\n    long cnt = 0;\n    long cnt2 = 0;\n    long cnt3\
    \ = 0;\n    long cnt4 = 0;\n    long cnt5 = 0;\n    long cnt6 = 0;\n    long cnt7\
    \ = 0;\n    long cnt8 = 0;\n    long cnt9 = 0;\n    long cnt10 = 0;\n    long\
    \ cnt11 = 0;\n    long cnt12 = 0;\n    long cnt13 = 0;\n    long cnt14 = 0;\n\
    \    long cnt15 = 0;\n    long cnt16 = 0;\n    long cnt17 = 0;\n    long cnt18\
    \ = 0;\n    long cnt19 = 0;\n    long cnt20 = 0;\n    long cnt21 = 0;\n    long\
    \ cnt22 = 0;\n    long cnt23 = 0;\n    long cnt24 = 0;\n    long cnt25 = 0;\n\
    \    long cnt26 = 0;\n    long cnt27 = 0;\n    long cnt28 = 0;\n    long cnt29\
    \ = 0;\n    long cnt30 = 0;\n    long cnt31 = 0;\n    long cnt32 = 0;\n    long\
    \ cnt33 = 0;\n    long cnt34 = 0;\n    long cnt35 = 0;\n    long cnt36 = 0;\n\
    \    long cnt37 = 0;\n    long cnt38 = 0;\n    long cnt39 = 0;\n    long cnt40\
    \ = 0;\n    long cnt41 = 0;\n    long cnt42 = 0;\n    long cnt43 = 0;\n    long\
    \ cnt44 = 0;\n    long cnt45 = 0;\n    long cnt46 = 0;\n    long cnt47 = 0;\n\
    \    long cnt48 = 0;\n    long cnt49 = 0;\n    long cnt50 = 0;\n    long cnt51\
    \ = 0;\n    long cnt52 = 0;\n    long cnt53 = 0;\n    long cnt54 = 0;\n    long\
    \ cnt55 = 0;\n    long cnt56 = 0;\n    long cnt57 = 0;\n    long cnt58 = 0;\n\
    \    long cnt59 = 0;\n    long cnt60 = 0;\n    long cnt61 = 0;\n    long cnt62\
    \ = 0;\n    long cnt63 = 0;\n    long cnt64 = 0;\n    long cnt65 = 0;\n    long\
    \ cnt66 = 0;\n    long cnt67 = 0;\n    long cnt68 = 0;\n    long cnt69 = 0;\n\
    \    long cnt70 = 0;\n    long cnt71 = 0;\n    long cnt72 = 0;\n    long cnt73\
    \ = 0;\n    long cnt74 = 0;\n    long cnt75 = 0;\n    long cnt76 = 0;\n    long\
    \ cnt77 = 0;\n    long cnt78 = 0;\n    long cnt79 = 0;\n    long cnt80 = 0;\n\
    \    long cnt81 = 0;\n    long cnt82 = 0;\n    long cnt83 = 0;\n}\nint main()\
    \ {\n    auto candidate = get_row;\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "tmplw09uurk: /tmp/tmplw09uurk.cpp:109: int main(): Assertion `candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    std::vector<std::tuple<long, long>> res;\n    if (lst.size()\
    \ == 0) {\n        return res;\n    }\n    std::vector<std::tuple<long, long>>\
    \ row;\n    std::vector<std::tuple<long, long>> row2;\n    for (auto &i : lst)\
    \ {\n        row.clear();\n        row2.clear();\n        for (auto &j : i) {\n\
    \            if (j == x) {\n                row.emplace_back(j, 0);\n        \
    \        row2.emplace_back(j, 0);\n            } else {\n                row.emplace_back(j,\
    \ 0);\n                row2.emplace_back(j, 0);\n            }\n        }\n  \
    \      res.emplace_back(std::make_tuple(std::get<0>(row), std::get<1>(row)));\n\
    \        res.emplace_back(std::make_tuple(std::get<0>(row2), std::get<1>(row2)));\n\
    \    }\n    std::sort(res.begin(), res.end(), [](const std::tuple<long, long>\
    \ &a, const std::tuple<long, long> &b) {\n        return std::get<0>(a) < std::get<0>(b);\n\
    \    });\n    std::sort(res.begin(), res.end(), [](const std::tuple<long, long>\
    \ &a, const std::tuple<long, long> &b) {\n        return std::get<1>(a) < std::get<1>(b);\n\
    \    });\n    return res;\n}\nint main() {\n    auto candidate = get_row;\n  \
    \  assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpkjw1z5nd.cpp: In function \u2018std::vector<std::tuple<long int,\
    \ long int> > get_row(std::vector<std::vector<long int> >, long int)\u2019:\n\
    /tmp/tmpkjw1z5nd.cpp:38:57: error: no matching function for call to \u2018get<0>(std::vector<std::tuple<long\
    \ int, long int> >&)\u2019\n   38 |         res.emplace_back(std::make_tuple(std::get<0>(row),\
    \ std::get<1>(row)));\n      |                                               \
    \          ^\nIn file included from /usr/include/c++/9/algorithm:60,\n       \
    \          from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n      \
    \           from /tmp/tmpkjw1z5nd.cpp:2:\n/usr/include/c++/9/utility:219:5: note:\
    \ candidate: \u2018template<long unsigned int _Int, class _Tp1, class _Tp2> constexpr\
    \ typename std::tuple_element<_Int, std::pair<_Tp1, _Tp2> >::type& std::get(std::pair<_Tp1,\
    \ _Tp2>&)\u2019\n  219 |     get(std::pair<_Tp1, _Tp2>& __in) noexcept\n     \
    \ |     ^~~\n/usr/include/c++/9/utility:219:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpkjw1z5nd.cpp:38:57: note:   \u2018std::vector<std::tuple<long\
    \ int, long int> >\u2019 is not derived from \u2018std::pair<_Tp1, _Tp2>\u2019\
    \n   38 |         res.emplace_back(std::make_tuple(std::get<0>(row), std::get<1>(row)));\n\
    \      |                                                         ^\nIn file included\
    \ from /usr/include/c++/9/algorithm:60,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpkjw1z5nd.cpp:2:\n/usr/include/c++/9/utility:224:5:\
    \ note: candidate: \u2018template<long unsigned int _Int, class _Tp1, class _Tp2>\
    \ constexpr typename std::tuple_element<_Int, std::pair<_Tp1, _Tp2> >::type&&\
    \ std::get(std::pair<_Tp1, _Tp2>&&)\u2019\n  224 |     get(std::pair<_Tp1, _Tp2>&&\
    \ __in) noexcept\n      |     ^~~\n/usr/include/c++/9/utility:224:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmpkjw1z5nd.cpp:38:57: note: \
    \  \u2018std::vector<std::tuple<long int, long int> >\u2019 is not derived from\
    \ \u2018std::pair<_Tp1, _Tp2>\u2019\n   38 |         res.emplace_back(std::make_tuple(std::get<0>(row),\
    \ std::get<1>(row)));\n      |                                               \
    \          ^\nIn file included from /usr/include/c++/9/algorithm:60,\n       \
    \          from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n      \
    \           from /tmp/tmpkjw1z5nd.cpp:2:\n/usr/include/c++/9/utility:229:5: note:\
    \ candidate: \u2018template<long unsigned int _Int, class _Tp1, class _Tp2> constexpr\
    \ const typename std::tuple_element<_Int, std::pair<_Tp1, _Tp2> >::type& std::get(const\
    \ std::pair<_Tp1, _Tp2>&)\u2019\n  229 |     get(const std::pair<_Tp1, _Tp2>&\
    \ __in) noexcept\n      |     ^~~\n/usr/include/c++/9/utility:229:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmpkjw1z5nd.cpp:38:57: note: \
    \  \u2018std::vector<std::tuple<long int, long int> >\u2019 is not derived from\
    \ \u2018const std::pair<_Tp1, _Tp2>\u2019\n   38 |         res.emplace_back(std::make_tuple(std::get<0>(row),\
    \ std::get<1>(row)));\n      |                                               \
    \          ^\nIn file included from /usr/include/c++/9/algorithm:60,\n       \
    \          from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n      \
    \           from /tmp/tmpkjw1z5nd.cpp:2:\n/usr/include/c++/9/utility:234:5: note:\
    \ candidate: \u2018template<long unsigned int _Int, class _Tp1, class _Tp2> constexpr\
    \ const typename std::tuple_element<_Int, std::pair<_Tp1, _Tp2> >::type&& std::get(const\
    \ std::pair<_Tp1, _Tp2>&&)\u2019\n  234 |     get(const std::pair<_Tp1, _Tp2>&&\
    \ __in) noexcept\n      |     ^~~\n/usr/include/c++/9/utility:234:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmpkjw1z5nd.cpp:38:57: note: \
    \  \u2018std::vector<std::tuple<long int, long int> >\u2019 is not derived from\
    \ \u2018const std::pair<_Tp1, _Tp2>\u2019\n   38 |         res.emplace_back(std::make_tuple(std::get<0>(row),\
    \ std::get<1>(row)));\n      |                                               \
    \          ^\nIn file included from /usr/include/c++/9/algorithm:60,\n       \
    \          from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n      \
    \           from /tmp/tmpkjw1z5nd.cpp:2:\n/usr/include/c++/9/utility:243:5: note:\
    \ candidate: \u2018template<class _Tp, class _Up> constexpr _Tp& std::get(std::pair<_T1,\
    \ _T2>&)\u2019\n  243 |     get(pair<_Tp, _Up>& __p) noexcept\n      |     ^~~\n\
    /usr/include/c++/9/utility:243:5: note:   template argument deduction/substitution\
    \ failed:\n/usr/include/c++/9/utility:248:5: note: candidate: \u2018template<class\
    \ _Tp, class _Up> constexpr const _Tp& std::get(const std::pair<_T1, _T2>&)\u2019\
    \n  248 |     get(const pair<_Tp, _Up>& __p) noexcept\n      |     ^~~\n/usr/include/c++/9/utility:248:5:\
    \ note:   template argument deduction/substitution failed:\n/usr/include/c++/9/utility:253:5:\
    \ note: candidate: \u2018template<class _Tp, class _Up> constexpr _Tp&& std::get(std::pair<_T1,\
    \ _T2>&&)\u2019\n  253 |     get(pair<_Tp, _Up>&& __p) noexcept\n      |     ^~~\n\
    /usr/include/c++/9/utility:253:5: note:   template argument deduction/substitution\
    \ failed:\n/usr/include/c++/9/utility:258:5: note: candidate: \u2018template<class\
    \ _Tp, class _Up> constexpr const _Tp&& std::get(const std::pair<_T1, _T2>&&)\u2019\
    \n  258 |     get(const pair<_Tp, _Up>&& __p) noexcept\n      |     ^~~\n/usr/include/c++/9/utility:258:5:\
    \ note:   template argument deduction/substitution failed:\n/usr/include/c++/9/utility:263:5:\
    \ note: candidate: \u2018template<class _Tp, class _Up> constexpr _Tp& std::get(std::pair<_Up,\
    \ _Tp>&)\u2019\n  263 |     get(pair<_Up, _Tp>& __p) noexcept\n      |     ^~~\n\
    /usr/include/c++/9/utility:263:5: note:   template argument deduction/substitution\
    \ failed:\n/usr/include/c++/9/utility:268:5: note: candidate: \u2018template<class\
    \ _Tp, class _Up> constexpr const _Tp& std::get(const std::pair<_Up, _Tp>&)\u2019\
    \n  268 |     get(const pair<_Up, _Tp>& __p) noexcept\n      |     ^~~\n/usr/include/c++/9/utility:268:5:\
    \ note:   template argument deduction/substitution failed:\n/usr/include/c++/9/utility:273:5:\
    \ note: candidate: \u2018template<class _Tp, class _Up> constexpr _Tp&& std::get(std::pair<_Up,\
    \ _Tp>&&)\u2019\n  273 |     get(pair<_Up, _Tp>&& __p) noexcept\n      |     ^~~\n\
    /usr/include/c++/9/utility:273:5: note:   template argument deduction/substitution\
    \ failed:\n/usr/include/c++/9/utility:278:5: note: candidate: \u2018template<class\
    \ _Tp, class _Up> constexpr const _Tp&& std::get(const std::pair<_Up, _Tp>&&)\u2019\
    \n  278 |     get(const pair<_Up, _Tp>&& __p) noexcept\n      |     ^~~\n/usr/include/c++/9/utility:278:5:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/9/tuple:39,\n                 from /usr/include/c++/9/functional:54,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmpkjw1z5nd.cpp:2:\n/usr/include/c++/9/array:307:5:\
    \ note: candidate: \u2018template<long unsigned int _Int, class _Tp, long unsigned\
    \ int _Nm> constexpr _Tp& std::get(std::array<_Tp, _Nm>&)\u2019\n  307 |     get(array<_Tp,\
    \ _Nm>& __arr) noexcept\n      |     ^~~\n/usr/include/c++/9/array:307:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpkjw1z5nd.cpp:38:57:\
    \ note:   \u2018std::vector<std::tuple<long int, long int> >\u2019 is not derived\
    \ from \u2018std::array<_Tp, _Nm>\u2019\n   38 |         res.emplace_back(std::make_tuple(std::get<0>(row),\
    \ std::get<1>(row)));\n      |                                               \
    \          ^\nIn file included from /usr/include/c++/9/tuple:39,\n           \
    \      from /usr/include/c++/9/functional:54,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmpkjw1z5nd.cpp:2:\n/usr/include/c++/9/array:316:5:\
    \ note: candidate: \u2018template<long unsigned int _Int, class _Tp, long unsigned\
    \ int _Nm> constexpr _Tp&& std::get(std::array<_Tp, _Nm>&&)\u2019\n  316 |   \
    \  get(array<_Tp, _Nm>&& __arr) noexcept\n      |     ^~~\n/usr/include/c++/9/array:316:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpkjw1z5nd.cpp:38:57:\
    \ note:   \u2018std::vector<std::tuple<long int, long int> >\u2019 is not derived\
    \ from \u2018std::array<_Tp, _Nm>\u2019\n   38 |         res.emplace_back(std::make_tuple(std::get<0>(row),\
    \ std::get<1>(row)));\n      |                                               \
    \          ^\nIn file included from /usr/include/c++/9/tuple:39,\n           \
    \      from /usr/include/c++/9/functional:54,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmpkjw1z5nd.cpp:2:\n/usr/include/c++/9/array:324:5:\
    \ note: candidate: \u2018template<long unsigned int _Int, class _Tp, long unsigned\
    \ int _Nm> constexpr const _Tp& std::get(const std::array<_Tp, _Nm>&)\u2019\n\
    \  324 |     get(const array<_Tp, _Nm>& __arr) noexcept\n      |     ^~~\n/usr/include/c++/9/array:324:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpkjw1z5nd.cpp:38:57:\
    \ note:   \u2018std::vector<std::tuple<long int, long int> >\u2019 is not derived\
    \ from \u2018const std::array<_Tp, _Nm>\u2019\n   38 |         res.emplace_back(std::make_tuple(std::get<0>(row),\
    \ std::get<1>(row)));\n      |                                               \
    \          ^\nIn file included from /usr/include/c++/9/tuple:39,\n           \
    \      from /usr/include/c++/9/functional:54,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmpkjw1z5nd.cpp:2:\n/usr/include/c++/9/array:333:5:\
    \ note: candidate: \u2018template<long unsigned int _Int, class _Tp, long unsigned\
    \ int _Nm> constexpr const _Tp&& std::get(const std::array<_Tp, _Nm>&&)\u2019\n\
    \  333 |     get(const array<_Tp, _Nm>&& __arr) noexcept\n      |     ^~~\n/usr/include/c++/9/array:333:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpkjw1z5nd.cpp:38:57:\
    \ note:   \u2018std::vector<std::tuple<long int, long int> >\u2019 is not derived\
    \ from \u2018const std::array<_Tp, _Nm>\u2019\n   38 |         res.emplace_back(std::make_tuple(std::get<0>(row),\
    \ std::get<1>(row)));\n      |                                               \
    \          ^\nIn file included from /usr/include/c++/9/functional:54,\n      \
    \           from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n     \
    \            from /tmp/tmpkjw1z5nd.cpp:2:\n/usr/include/c++/9/tuple:1320:5: note:\
    \ candidate: \u2018template<long unsigned int __i, class ... _Elements> constexpr\
    \ std::__tuple_element_t<__i, std::tuple<_Elements ...> >& std::get(std::tuple<_Elements\
    \ ...>&)\u2019\n 1320 |     get(tuple<_Elements...>& __t) noexcept\n      |  \
    \   ^~~\n/usr/include/c++/9/tuple:1320:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpkjw1z5nd.cpp:38:57: note:   \u2018std::vector<std::tuple<long\
    \ int, long int> >\u2019 is not derived from \u2018std::tuple<_Elements ...>\u2019\
    \n   38 |         res.emplace_back(std::make_tuple(std::get<0>(row), std::get<1>(row)));\n\
    \      |                                                         ^\nIn file included\
    \ from /usr/include/c++/9/functional:54,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmpkjw1z5nd.cpp:2:\n/usr/include/c++/9/tuple:1326:5:\
    \ note: candidate: \u2018template<long unsigned int __i, class ... _Elements>\
    \ constexpr std::__tuple_element_t<__i, std::tuple<_Elements ...> >& std::get(const\
    \ std::tuple<_Elements ...>&)\u2019\n 1326 |     get(const tuple<_Elements...>&\
    \ __t) noexcept\n      |     ^~~\n/usr/include/c++/9/tuple:1326:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmpkjw1z5nd.cpp:38:57: note: \
    \  \u2018std::vector<std::tuple<long int, long int> >\u2019 is not derived from\
    \ \u2018const std::tuple<_Elements ...>\u2019\n   38 |         res.emplace_back(std::make_tuple(std::get<0>(row),\
    \ std::get<1>(row)));\n      |                                               \
    \          ^\nIn file included from /usr/include/c++/9/functional:54,\n      \
    \           from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n     \
    \            from /tmp/tmpkjw1z5nd.cpp:2:\n/usr/include/c++/9/tuple:1332:5: note:\
    \ candidate: \u2018template<long unsigned int __i, class ... _Elements> constexpr\
    \ std::__tuple_element_t<__i, std::tuple<_Elements ...> >&& std::get(std::tuple<_Elements\
    \ ...>&&)\u2019\n 1332 |     get(tuple<_Elements...>&& __t) noexcept\n      |\
    \     ^~~\n/usr/include/c++/9/tuple:1332:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpkjw1z5nd.cpp:38:57: note:   \u2018std::vector<std::tuple<long\
    \ int, long int> >\u2019 is not derived from \u2018std::tuple<_Elements ...>\u2019\
    \n   38 |         res.emplace_back(std::make_tuple(std::get<0>(row), std::get<1>(row)));\n\
    \      |                                                         ^\nIn file included\
    \ from /usr/include/c++/9/functional:54,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmpkjw1z5nd.cpp:2:\n/usr/include/c++/9/tuple:1341:5:\
    \ note: candidate: \u2018template<long unsigned int __i, class ... _Elements>\
    \ constexpr std::__tuple_element_t<__i, std::tuple<_Elements ...> >&& std::get(const\
    \ std::tuple<_Elements ...>&&)\u2019\n 1341 |     get(const tuple<_Elements...>&&\
    \ __t) noexcept\n      |     ^~~\n/usr/include/c++/9/tuple:1341:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmpkjw1z5nd.cpp:38:57: note: \
    \  \u2018std::vector<std::tuple<long int, long int> >\u2019 is not derived from\
    \ \u2018const std::tuple<_Elements ...>\u2019\n   38 |         res.emplace_back(std::make_tuple(std::get<0>(row),\
    \ std::get<1>(row)));\n      |                                               \
    \          ^\nIn file included from /usr/include/c++/9/functional:54,\n      \
    \           from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n     \
    \            from /tmp/tmpkjw1z5nd.cpp:2:\n/usr/include/c++/9/tuple:1364:5: note:\
    \ candidate: \u2018template<class _Tp, class ... _Types> constexpr _Tp& std::get(std::tuple<_Elements\
    \ ...>&)\u2019\n 1364 |     get(tuple<_Types...>& __t) noexcept\n      |     ^~~\n\
    /usr/include/c++/9/tuple:1364:5: note:   template argument deduction/substitution\
    \ failed:\n/usr/include/c++/9/tuple:1370:5: note: candidate: \u2018template<class\
    \ _Tp, class ... _Types> constexpr _Tp&& std::get(std::tuple<_Elements ...>&&)\u2019\
    \n 1370 |     get(tuple<_Types...>&& __t) noexcept\n      |     ^~~\n/usr/include/c++/9/tuple:1370:5:\
    \ note:   template argument deduction/substitution failed:\n/usr/include/c++/9/tuple:1376:5:\
    \ note: candidate: \u2018template<class _Tp, class ... _Types> constexpr const\
    \ _Tp& std::get(const std::tuple<_Elements ...>&)\u2019\n 1376 |     get(const\
    \ tuple<_Types...>& __t) noexcept\n      |     ^~~\n/usr/include/c++/9/tuple:1376:5:\
    \ note:   template argument deduction/substitution failed:\n/usr/include/c++/9/tuple:1383:5:\
    \ note: candidate: \u2018template<class _Tp, class ... _Types> constexpr const\
    \ _Tp&& std::get(const std::tuple<_Elements ...>&&)\u2019\n 1383 |     get(const\
    \ tuple<_Types...>&& __t) noexcept\n      |     ^~~\n/usr/include/c++/9/tuple:1383:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpkjw1z5nd.cpp:38:75:\
    \ error: no matching function for call to \u2018get<1>(std::vector<std::tuple<long\
    \ int, long int> >&)\u2019\n   38 |         res.emplace_back(std::make_tuple(std::get<0>(row),\
    \ std::get<1>(row)));\n      |                                               \
    \                            ^\nIn file included from /usr/include/c++/9/algorithm:60,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpkjw1z5nd.cpp:2:\n/usr/include/c++/9/utility:219:5:\
    \ note: candidate: \u2018template<long unsigned int _Int, class _Tp1, class _Tp2>\
    \ constexpr typename std::tuple_element<_Int, std::pair<_Tp1, _Tp2> >::type& std::get(std::pair<_Tp1,\
    \ _Tp2>&)\u2019\n  219 |     get(std::pair<_Tp1, _Tp2>& __in) noexcept\n     \
    \ |     ^~~\n/usr/include/c++/9/utility:219:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpkjw1z5nd.cpp:38:75: note:   \u2018std::vector<std::tuple<long\
    \ int, long int> >\u2019 is not derived from \u2018std::pair<_Tp1, _Tp2>\u2019\
    \n   38 |         res.emplace_back(std::make_tuple(std::get<0>(row), std::get<1>(row)));\n\
    \      |                                                                     \
    \      ^\nIn file included from /usr/include/c++/9/algorithm:60,\n           \
    \      from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n          \
    \       from /tmp/tmpkjw1z5nd.cpp:2:\n/usr/include/c++/9/utility:224:5: note:\
    \ candidate: \u2018template<long unsigned int _Int, class _Tp1, class _Tp2> constexpr\
    \ typename std::tuple_element<_Int, std::pair<_Tp1, _Tp2> >::type&& std::get(std::pair<_Tp1,\
    \ _Tp2>&&)\u2019\n  224 |     get(std::pair<_Tp1, _Tp2>&& __in) noexcept\n   \
    \   |     ^~~\n/usr/include/c++/9/utility:224:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpkjw1z5nd.cpp:38:75: note:   \u2018std::vector<std::tuple<long\
    \ int, long int> >\u2019 is not derived from \u2018std::pair<_Tp1, _Tp2>\u2019\
    \n   38 |         res.emplace_back(std::make_tuple(std::get<0>(row), std::get<1>(row)));\n\
    \      |                                                                     \
    \      ^\nIn file included from /usr/include/c++/9/algorithm:60,\n           \
    \      from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n          \
    \       from /tmp/tmpkjw1z5nd.cpp:2:\n/usr/include/c++/9/utility:229:5: note:\
    \ candidate: \u2018template<long unsigned int _Int, class _Tp1, class _Tp2> constexpr\
    \ const typename std::tuple_element<_Int, std::pair<_Tp1, _Tp2> >::type& std::get(const\
    \ std::pair<_Tp1, _Tp2>&)\u2019\n  229 |     get(const std::pair<_Tp1, _Tp2>&\
    \ __in) noexcept\n      |     ^~~\n/usr/include/c++/9/utility:229:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmpkjw1z5nd.cpp:38:75: note: \
    \  \u2018std::vector<std::tuple<long int, long int> >\u2019 is not derived from\
    \ \u2018const std::pair<_Tp1, _Tp2>\u2019\n   38 |         res.emplace_back(std::make_tuple(std::get<0>(row),\
    \ std::get<1>(row)));\n      |                                               \
    \                            ^\nIn file included from /usr/include/c++/9/algorithm:60,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpkjw1z5nd.cpp:2:\n/usr/include/c++/9/utility:234:5:\
    \ note: candidate: \u2018template<long unsigned int _Int, class _Tp1, class _Tp2>\
    \ constexpr const typename std::tuple_element<_Int, std::pair<_Tp1, _Tp2> >::type&&\
    \ std::get(const std::pair<_Tp1, _Tp2>&&)\u2019\n  234 |     get(const std::pair<_Tp1,\
    \ _Tp2>&& __in) noexcept\n      |     ^~~\n/usr/include/c++/9/utility:234:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpkjw1z5nd.cpp:38:75:\
    \ note:   \u2018std::vector<std::tuple<long int, long int> >\u2019 is not derived\
    \ from \u2018const std::pair<_Tp1, _Tp2>\u2019\n   38 |         res.emplace_back(std::make_tuple(std::get<0>(row),\
    \ std::get<1>(row)));\n      |                                               \
    \                            ^\nIn file included from /usr/include/c++/9/algorithm:60,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpkjw1z5nd.cpp:2:\n/usr/include/c++/9/utility:243:5:\
    \ note: candidate: \u2018template<class _Tp, class _Up> constexpr _Tp& std::get(std::pair<_T1,\
    \ _T2>&)\u2019\n  243 |     get(pair<_Tp, _Up>& __p) noexcept\n      |     ^~~\n\
    /usr/include/c++/9/utility:243:5: note:   template argument deduction/substitution\
    \ failed:\n/usr/include/c++/9/utility:248:5: note: candidate: \u2018template<class\
    \ _Tp, class _Up> constexpr const _Tp& std::get(const std::pair<_T1, _T2>&)\u2019\
    \n  248 |     get(const pair<_Tp, _Up>& __p) noexcept\n      |     ^~~\n/usr/include/c++/9/utility:248:5:\
    \ note:   template argument deduction/substitution failed:\n/usr/include/c++/9/utility:253:5:\
    \ note: candidate: \u2018template<class _Tp, class _Up> constexpr _Tp&& std::get(std::pair<_T1,\
    \ _T2>&&)\u2019\n  253 |     get(pair<_Tp, _Up>&& __p) noexcept\n      |     ^~~\n\
    /usr/include/c++/9/utility:253:5: note:   template argument deduction/substitution\
    \ failed:\n/usr/include/c++/9/utility:258:5: note: candidate: \u2018template<class\
    \ _Tp, class _Up> constexpr const _Tp&& std::get(const std::pair<_T1, _T2>&&)\u2019\
    \n  258 |     get(const pair<_Tp, _Up>&& __p) noexcept\n      |     ^~~\n/usr/include/c++/9/utility:258:5:\
    \ note:   template argument deduction/substitution failed:\n/usr/include/c++/9/utility:263:5:\
    \ note: candidate: \u2018template<class _Tp, class _Up> constexpr _Tp& std::get(std::pair<_Up,\
    \ _Tp>&)\u2019\n  263 |     get(pair<_Up, _Tp>& __p) noexcept\n      |     ^~~\n\
    /usr/include/c++/9/utility:263:5: note:   template argument deduction/substitution\
    \ failed:\n/usr/include/c++/9/utility:268:5: note: candidate: \u2018template<class\
    \ _Tp, class _Up> constexpr const _Tp& std::get(const std::pair<_Up, _Tp>&)\u2019\
    \n  268 |     get(const pair<_Up, _Tp>& __p) noexcept\n      |     ^~~\n/usr/include/c++/9/utility:268:5:\
    \ note:   template argument deduction/substitution failed:\n/usr/include/c++/9/utility:273:5:\
    \ note: candidate: \u2018template<class _Tp, class _Up> constexpr _Tp&& std::get(std::pair<_Up,\
    \ _Tp>&&)\u2019\n  273 |     get(pair<_Up, _Tp>&& __p) noexcept\n      |     ^~~\n\
    /usr/include/c++/9/utility:273:5: note:   template argument deduction/substitution\
    \ failed:\n/usr/include/c++/9/utility:278:5: note: candidate: \u2018template<class\
    \ _Tp, class _Up> constexpr const _Tp&& std::get(const std::pair<_Up, _Tp>&&)\u2019\
    \n  278 |     get(const pair<_Up, _Tp>&& __p) noexcept\n      |     ^~~\n/usr/include/c++/9/utility:278:5:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/9/tuple:39,\n                 from /usr/include/c++/9/functional:54,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmpkjw1z5nd.cpp:2:\n/usr/include/c++/9/array:307:5:\
    \ note: candidate: \u2018template<long unsigned int _Int, class _Tp, long unsigned\
    \ int _Nm> constexpr _Tp& std::get(std::array<_Tp, _Nm>&)\u2019\n  307 |     get(array<_Tp,\
    \ _Nm>& __arr) noexcept\n      |     ^~~\n/usr/include/c++/9/array:307:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpkjw1z5nd.cpp:38:75:\
    \ note:   \u2018std::vector<std::tuple<long int, long int> >\u2019 is not derived\
    \ from \u2018std::array<_Tp, _Nm>\u2019\n   38 |         res.emplace_back(std::make_tuple(std::get<0>(row),\
    \ std::get<1>(row)));\n      |                                               \
    \                            ^\nIn file included from /usr/include/c++/9/tuple:39,\n\
    \                 from /usr/include/c++/9/functional:54,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n                 from\
    \ /tmp/tmpkjw1z5nd.cpp:2:\n/usr/include/c++/9/array:316:5: note: candidate: \u2018\
    template<long unsigned int _Int, class _Tp, long unsigned int _Nm> constexpr _Tp&&\
    \ std::get(std::array<_Tp, _Nm>&&)\u2019\n  316 |     get(array<_Tp, _Nm>&& __arr)\
    \ noexcept\n      |     ^~~\n/usr/include/c++/9/array:316:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmpkjw1z5nd.cpp:38:75: note: \
    \  \u2018std::vector<std::tuple<long int, long int> >\u2019 is not derived from\
    \ \u2018std::array<_Tp, _Nm>\u2019\n   38 |         res.emplace_back(std::make_tuple(std::get<0>(row),\
    \ std::get<1>(row)));\n      |                                               \
    \                            ^\nIn file included from /usr/include/c++/9/tuple:39,\n\
    \                 from /usr/include/c++/9/functional:54,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n                 from\
    \ /tmp/tmpkjw1z5nd.cpp:2:\n/usr/include/c++/9/array:324:5: note: candidate: \u2018\
    template<long unsigned int _Int, class _Tp, long unsigned int _Nm> constexpr const\
    \ _Tp& std::get(const std::array<_Tp, _Nm>&)\u2019\n  324 |     get(const array<_Tp,\
    \ _Nm>& __arr) noexcept\n      |     ^~~\n/usr/include/c++/9/array:324:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpkjw1z5nd.cpp:38:75:\
    \ note:   \u2018std::vector<std::tuple<long int, long int> >\u2019 is not derived\
    \ from \u2018const std::array<_Tp, _Nm>\u2019\n   38 |         res.emplace_back(std::make_tuple(std::get<0>(row),\
    \ std::get<1>(row)));\n      |                                               \
    \                            ^\nIn file included from /usr/include/c++/9/tuple:39,\n\
    \                 from /usr/include/c++/9/functional:54,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n                 from\
    \ /tmp/tmpkjw1z5nd.cpp:2:\n/usr/include/c++/9/array:333:5: note: candidate: \u2018\
    template<long unsigned int _Int, class _Tp, long unsigned int _Nm> constexpr const\
    \ _Tp&& std::get(const std::array<_Tp, _Nm>&&)\u2019\n  333 |     get(const array<_Tp,\
    \ _Nm>&& __arr) noexcept\n      |     ^~~\n/usr/include/c++/9/array:333:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpkjw1z5nd.cpp:38:75:\
    \ note:   \u2018std::vector<std::tuple<long int, long int> >\u2019 is not derived\
    \ from \u2018const std::array<_Tp, _Nm>\u2019\n   38 |         res.emplace_back(std::make_tuple(std::get<0>(row),\
    \ std::get<1>(row)));\n      |                                               \
    \                            ^\nIn file included from /usr/include/c++/9/functional:54,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmpkjw1z5nd.cpp:2:\n/usr/include/c++/9/tuple:1320:5:\
    \ note: candidate: \u2018template<long unsigned int __i, class ... _Elements>\
    \ constexpr std::__tuple_element_t<__i, std::tuple<_Elements ...> >& std::get(std::tuple<_Elements\
    \ ...>&)\u2019\n 1320 |     get(tuple<_Elements...>& __t) noexcept\n      |  \
    \   ^~~\n/usr/include/c++/9/tuple:1320:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpkjw1z5nd.cpp:38:75: note:   \u2018std::vector<std::tuple<long\
    \ int, long int> >\u2019 is not derived from \u2018std::tuple<_Elements ...>\u2019\
    \n   38 |         res.emplace_back(std::make_tuple(std::get<0>(row), std::get<1>(row)));\n\
    \      |                                                                     \
    \      ^\nIn file included from /usr/include/c++/9/functional:54,\n          \
    \       from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n         \
    \        from /tmp/tmpkjw1z5nd.cpp:2:\n/usr/include/c++/9/tuple:1326:5: note:\
    \ candidate: \u2018template<long unsigned int __i, class ... _Elements> constexpr\
    \ std::__tuple_element_t<__i, std::tuple<_Elements ...> >& std::get(const std::tuple<_Elements\
    \ ...>&)\u2019\n 1326 |     get(const tuple<_Elements...>& __t) noexcept\n   \
    \   |     ^~~\n/usr/include/c++/9/tuple:1326:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpkjw1z5nd.cpp:38:75: note:   \u2018std::vector<std::tuple<long\
    \ int, long int> >\u2019 is not derived from \u2018const std::tuple<_Elements\
    \ ...>\u2019\n   38 |         res.emplace_back(std::make_tuple(std::get<0>(row),\
    \ std::get<1>(row)));\n      |                                               \
    \                            ^\nIn file included from /usr/include/c++/9/functional:54,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmpkjw1z5nd.cpp:2:\n/usr/include/c++/9/tuple:1332:5:\
    \ note: candidate: \u2018template<long unsigned int __i, class ... _Elements>\
    \ constexpr std::__tuple_element_t<__i, std::tuple<_Elements ...> >&& std::get(std::tuple<_Elements\
    \ ...>&&)\u2019\n 1332 |     get(tuple<_Elements...>&& __t) noexcept\n      |\
    \     ^~~\n/usr/include/c++/9/tuple:1332:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpkjw1z5nd.cpp:38:75: note:   \u2018std::vector<std::tuple<long\
    \ int, long int> >\u2019 is not derived from \u2018std::tuple<_Elements ...>\u2019\
    \n   38 |         res.emplace_back(std::make_tuple(std::get<0>(row), std::get<1>(row)));\n\
    \      |                                                                     \
    \      ^\nIn file included from /usr/include/c++/9/functional:54,\n          \
    \       from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n         \
    \        from /tmp/tmpkjw1z5nd.cpp:2:\n/usr/include/c++/9/tuple:1341:5: note:\
    \ candidate: \u2018template<long unsigned int __i, class ... _Elements> constexpr\
    \ std::__tuple_element_t<__i, std::tuple<_Elements ...> >&& std::get(const std::tuple<_Elements\
    \ ...>&&)\u2019\n 1341 |     get(const tuple<_Elements...>&& __t) noexcept\n \
    \     |     ^~~\n/usr/include/c++/9/tuple:1341:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpkjw1z5nd.cpp:38:75: note:   \u2018std::vector<std::tuple<long\
    \ int, long int> >\u2019 is not derived from \u2018const std::tuple<_Elements\
    \ ...>\u2019\n   38 |         res.emplace_back(std::make_tuple(std::get<0>(row),\
    \ std::get<1>(row)));\n      |                                               \
    \                            ^\nIn file included from /usr/include/c++/9/functional:54,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmpkjw1z5nd.cpp:2:\n/usr/include/c++/9/tuple:1364:5:\
    \ note: candidate: \u2018template<class _Tp, class ... _Types> constexpr _Tp&\
    \ std::get(std::tuple<_Elements ...>&)\u2019\n 1364 |     get(tuple<_Types...>&\
    \ __t) noexcept\n      |     ^~~\n/usr/include/c++/9/tuple:1364:5: note:   template\
    \ argument deduction/substitution failed:\n/usr/include/c++/9/tuple:1370:5: note:\
    \ candidate: \u2018template<class _Tp, class ... _Types> constexpr _Tp&& std::get(std::tuple<_Elements\
    \ ...>&&)\u2019\n 1370 |     get(tuple<_Types...>&& __t) noexcept\n      |   \
    \  ^~~\n/usr/include/c++/9/tuple:1370:5: note:   template argument deduction/substitution\
    \ failed:\n/usr/include/c++/9/tuple:1376:5: note: candidate: \u2018template<class\
    \ _Tp, class ... _Types> constexpr const _Tp& std::get(const std::tuple<_Elements\
    \ ...>&)\u2019\n 1376 |     get(const tuple<_Types...>& __t) noexcept\n      |\
    \     ^~~\n/usr/include/c++/9/tuple:1376:5: note:   template argument deduction/substitution\
    \ failed:\n/usr/include/c++/9/tuple:1383:5: note: candidate: \u2018template<class\
    \ _Tp, class ... _Types> constexpr const _Tp&& std::get(const std::tuple<_Elements\
    \ ...>&&)\u2019\n 1383 |     get(const tuple<_Types...>&& __t) noexcept\n    \
    \  |     ^~~\n/usr/include/c++/9/tuple:1383:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpkjw1z5nd.cpp:39:58: error: no matching function for call to\
    \ \u2018get<0>(std::vector<std::tuple<long int, long int> >&)\u2019\n   39 | \
    \        res.emplace_back(std::make_tuple(std::get<0>(row2), std::get<1>(row2)));\n\
    \      |                                                          ^\nIn file included\
    \ from /usr/include/c++/9/algorithm:60,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpkjw1z5nd.cpp:2:\n/usr/include/c++/9/utility:219:5:\
    \ note: candidate: \u2018template<long unsigned int _Int, class _Tp1, class _Tp2>\
    \ constexpr typename std::tuple_element<_Int, std::pair<_Tp1, _Tp2> >::type& std::get(std::pair<_Tp1,\
    \ _Tp2>&)\u2019\n  219 |     get(std::pair<_Tp1, _Tp2>& __in) noexcept\n     \
    \ |     ^~~\n/usr/include/c++/9/utility:219:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpkjw1z5nd.cpp:39:58: note:   \u2018std::vector<std::tuple<long\
    \ int, long int> >\u2019 is not derived from \u2018std::pair<_Tp1, _Tp2>\u2019\
    \n   39 |         res.emplace_back(std::make_tuple(std::get<0>(row2), std::get<1>(row2)));\n\
    \      |                                                          ^\nIn file included\
    \ from /usr/include/c++/9/algorithm:60,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpkjw1z5nd.cpp:2:\n/usr/include/c++/9/utility:224:5:\
    \ note: candidate: \u2018template<long unsigned int _Int, class _Tp1, class _Tp2>\
    \ constexpr typename std::tuple_element<_Int, std::pair<_Tp1, _Tp2> >::type&&\
    \ std::get(std::pair<_Tp1, _Tp2>&&)\u2019\n  224 |     get(std::pair<_Tp1, _Tp2>&&\
    \ __in) noexcept\n      |     ^~~\n/usr/include/c++/9/utility:224:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmpkjw1z5nd.cpp:39:58: note: \
    \  \u2018std::vector<std::tuple<long int, long int> >\u2019 is not derived from\
    \ \u2018std::pair<_Tp1, _Tp2>\u2019\n   39 |         res.emplace_back(std::make_tuple(std::get<0>(row2),\
    \ std::get<1>(row2)));\n      |                                              \
    \            ^\nIn file included from /usr/include/c++/9/algorithm:60,\n     \
    \            from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n    \
    \             from /tmp/tmpkjw1z5nd.cpp:2:\n/usr/include/c++/9/utility:229:5:\
    \ note: candidate: \u2018template<long unsigned int _Int, class _Tp1, class _Tp2>\
    \ constexpr const typename std::tuple_element<_Int, std::pair<_Tp1, _Tp2> >::type&\
    \ std::get(const std::pair<_Tp1, _Tp2>&)\u2019\n  229 |     get(const std::pair<_Tp1,\
    \ _Tp2>& __in) noexcept\n      |     ^~~\n/usr/include/c++/9/utility:229:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpkjw1z5nd.cpp:39:58:\
    \ note:   \u2018std::vector<std::tuple<long int, long int> >\u2019 is not derived\
    \ from \u2018const std::pair<_Tp1, _Tp2>\u2019\n   39 |         res.emplace_back(std::make_tuple(std::get<0>(row2),\
    \ std::get<1>(row2)));\n      |                                              \
    \            ^\nIn file included from /usr/include/c++/9/algorithm:60,\n     \
    \            from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n    \
    \             from /tmp/tmpkjw1z5nd.cpp:2:\n/usr/include/c++/9/utility:234:5:\
    \ note: candidate: \u2018template<long unsigned int _Int, class _Tp1, class _Tp2>\
    \ constexpr const typename std::tuple_element<_Int, std::pair<_Tp1, _Tp2> >::type&&\
    \ std::get(const std::pair<_Tp1, _Tp2>&&)\u2019\n  234 |     get(const std::pair<_Tp1,\
    \ _Tp2>&& __in) noexcept\n      |     ^~~\n/usr/include/c++/9/utility:234:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpkjw1z5nd.cpp:39:58:\
    \ note:   \u2018std::vector<std::tuple<long int, long int> >\u2019 is not derived\
    \ from \u2018const std::pair<_Tp1, _Tp2>\u2019\n   39 |         res.emplace_back(std::make_tuple(std::get<0>(row2),\
    \ std::get<1>(row2)));\n      |                                              \
    \            ^\nIn file included from /usr/include/c++/9/algorithm:60,\n     \
    \            from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n    \
    \             from /tmp/tmpkjw1z5nd.cpp:2:\n/usr/include/c++/9/utility:243:5:\
    \ note: candidate: \u2018template<class _Tp, class _Up> constexpr _Tp& std::get(std::pair<_T1,\
    \ _T2>&)\u2019\n  243 |     get(pair<_Tp, _Up>& __p) noexcept\n      |     ^~~\n\
    /usr/include/c++/9/utility:243:5: note:   template argument deduction/substitution\
    \ failed:\n/usr/include/c++/9/utility:248:5: note: candidate: \u2018template<class\
    \ _Tp, class _Up> constexpr const _Tp& std::get(const std::pair<_T1, _T2>&)\u2019\
    \n  248 |     get(const pair<_Tp, _Up>& __p) noexcept\n      |     ^~~\n/usr/include/c++/9/utility:248:5:\
    \ note:   template argument deduction/substitution failed:\n/usr/include/c++/9/utility:253:5:\
    \ note: candidate: \u2018template<class _Tp, class _Up> constexpr _Tp&& std::get(std::pair<_T1,\
    \ _T2>&&)\u2019\n  253 |     get(pair<_Tp, _Up>&& __p) noexcept\n      |     ^~~\n\
    /usr/include/c++/9/utility:253:5: note:   template argument deduction/substitution\
    \ failed:\n/usr/include/c++/9/utility:258:5: note: candidate: \u2018template<class\
    \ _Tp, class _Up> constexpr const _Tp&& std::get(const std::pair<_T1, _T2>&&)\u2019\
    \n  258 |     get(const pair<_Tp, _Up>&& __p) noexcept\n      |     ^~~\n/usr/include/c++/9/utility:258:5:\
    \ note:   template argument deduction/substitution failed:\n/usr/include/c++/9/utility:263:5:\
    \ note: candidate: \u2018template<class _Tp, class _Up> constexpr _Tp& std::get(std::pair<_Up,\
    \ _Tp>&)\u2019\n  263 |     get(pair<_Up, _Tp>& __p) noexcept\n      |     ^~~\n\
    /usr/include/c++/9/utility:263:5: note:   template argument deduction/substitution\
    \ failed:\n/usr/include/c++/9/utility:268:5: note: candidate: \u2018template<class\
    \ _Tp, class _Up> constexpr const _Tp& std::get(const std::pair<_Up, _Tp>&)\u2019\
    \n  268 |     get(const pair<_Up, _Tp>& __p) noexcept\n      |     ^~~\n/usr/include/c++/9/utility:268:5:\
    \ note:   template argument deduction/substitution failed:\n/usr/include/c++/9/utility:273:5:\
    \ note: candidate: \u2018template<class _Tp, class _Up> constexpr _Tp&& std::get(std::pair<_Up,\
    \ _Tp>&&)\u2019\n  273 |     get(pair<_Up, _Tp>&& __p) noexcept\n      |     ^~~\n\
    /usr/include/c++/9/utility:273:5: note:   template argument deduction/substitution\
    \ failed:\n/usr/include/c++/9/utility:278:5: note: candidate: \u2018template<class\
    \ _Tp, class _Up> constexpr const _Tp&& std::get(const std::pair<_Up, _Tp>&&)\u2019\
    \n  278 |     get(const pair<_Up, _Tp>&& __p) noexcept\n      |     ^~~\n/usr/include/c++/9/utility:278:5:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/9/tuple:39,\n                 from /usr/include/c++/9/functional:54,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmpkjw1z5nd.cpp:2:\n/usr/include/c++/9/array:307:5:\
    \ note: candidate: \u2018template<long unsigned int _Int, class _Tp, long unsigned\
    \ int _Nm> constexpr _Tp& std::get(std::array<_Tp, _Nm>&)\u2019\n  307 |     get(array<_Tp,\
    \ _Nm>& __arr) noexcept\n      |     ^~~\n/usr/include/c++/9/array:307:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpkjw1z5nd.cpp:39:58:\
    \ note:   \u2018std::vector<std::tuple<long int, long int> >\u2019 is not derived\
    \ from \u2018std::array<_Tp, _Nm>\u2019\n   39 |         res.emplace_back(std::make_tuple(std::get<0>(row2),\
    \ std::get<1>(row2)));\n      |                                              \
    \            ^\nIn file included from /usr/include/c++/9/tuple:39,\n         \
    \        from /usr/include/c++/9/functional:54,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmpkjw1z5nd.cpp:2:\n/usr/include/c++/9/array:316:5:\
    \ note: candidate: \u2018template<long unsigned int _Int, class _Tp, long unsigned\
    \ int _Nm> constexpr _Tp&& std::get(std::array<_Tp, _Nm>&&)\u2019\n  316 |   \
    \  get(array<_Tp, _Nm>&& __arr) noexcept\n      |     ^~~\n/usr/include/c++/9/array:316:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpkjw1z5nd.cpp:39:58:\
    \ note:   \u2018std::vector<std::tuple<long int, long int> >\u2019 is not derived\
    \ from \u2018std::array<_Tp, _Nm>\u2019\n   39 |         res.emplace_back(std::make_tuple(std::get<0>(row2),\
    \ std::get<1>(row2)));\n      |                                              \
    \            ^\nIn file included from /usr/include/c++/9/tuple:39,\n         \
    \        from /usr/include/c++/9/functional:54,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmpkjw1z5nd.cpp:2:\n/usr/include/c++/9/array:324:5:\
    \ note: candidate: \u2018template<long unsigned int _Int, class _Tp, long unsigned\
    \ int _Nm> constexpr const _Tp& std::get(const std::array<_Tp, _Nm>&)\u2019\n\
    \  324 |     get(const array<_Tp, _Nm>& __arr) noexcept\n      |     ^~~\n/usr/include/c++/9/array:324:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpkjw1z5nd.cpp:39:58:\
    \ note:   \u2018std::vector<std::tuple<long int, long int> >\u2019 is not derived\
    \ from \u2018const std::array<_Tp, _Nm>\u2019\n   39 |         res.emplace_back(std::make_tuple(std::get<0>(row2),\
    \ std::get<1>(row2)));\n      |                                              \
    \            ^\nIn file included from /usr/include/c++/9/tuple:39,\n         \
    \        from /usr/include/c++/9/functional:54,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmpkjw1z5nd.cpp:2:\n/usr/include/c++/9/array:333:5:\
    \ note: candidate: \u2018template<long unsigned int _Int, class _Tp, long unsigned\
    \ int _Nm> constexpr const _Tp&& std::get(const std::array<_Tp, _Nm>&&)\u2019\n\
    \  333 |     get(const array<_Tp, _Nm>&& __arr) noexcept\n      |     ^~~\n/usr/include/c++/9/array:333:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpkjw1z5nd.cpp:39:58:\
    \ note:   \u2018std::vector<std::tuple<long int, long int> >\u2019 is not derived\
    \ from \u2018const std::array<_Tp, _Nm>\u2019\n   39 |         res.emplace_back(std::make_tuple(std::get<0>(row2),\
    \ std::get<1>(row2)));\n      |                                              \
    \            ^\nIn file included from /usr/include/c++/9/functional:54,\n    \
    \             from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n   \
    \              from /tmp/tmpkjw1z5nd.cpp:2:\n/usr/include/c++/9/tuple:1320:5:\
    \ note: candidate: \u2018template<long unsigned int __i, class ... _Elements>\
    \ constexpr std::__tuple_element_t<__i, std::tuple<_Elements ...> >& std::get(std::tuple<_Elements\
    \ ...>&)\u2019\n 1320 |     get(tuple<_Elements...>& __t) noexcept\n      |  \
    \   ^~~\n/usr/include/c++/9/tuple:1320:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpkjw1z5nd.cpp:39:58: note:   \u2018std::vector<std::tuple<long\
    \ int, long int> >\u2019 is not derived from \u2018std::tuple<_Elements ...>\u2019\
    \n   39 |         res.emplace_back(std::make_tuple(std::get<0>(row2), std::get<1>(row2)));\n\
    \      |                                                          ^\nIn file included\
    \ from /usr/include/c++/9/functional:54,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmpkjw1z5nd.cpp:2:\n/usr/include/c++/9/tuple:1326:5:\
    \ note: candidate: \u2018template<long unsigned int __i, class ... _Elements>\
    \ constexpr std::__tuple_element_t<__i, std::tuple<_Elements ...> >& std::get(const\
    \ std::tuple<_Elements ...>&)\u2019\n 1326 |     get(const tuple<_Elements...>&\
    \ __t) noexcept\n      |     ^~~\n/usr/include/c++/9/tuple:1326:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmpkjw1z5nd.cpp:39:58: note: \
    \  \u2018std::vector<std::tuple<long int, long int> >\u2019 is not derived from\
    \ \u2018const std::tuple<_Elements ...>\u2019\n   39 |         res.emplace_back(std::make_tuple(std::get<0>(row2),\
    \ std::get<1>(row2)));\n      |                                              \
    \            ^\nIn file included from /usr/include/c++/9/functional:54,\n    \
    \             from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n   \
    \              from /tmp/tmpkjw1z5nd.cpp:2:\n/usr/include/c++/9/tuple:1332:5:\
    \ note: candidate: \u2018template<long unsigned int __i, class ... _Elements>\
    \ constexpr std::__tuple_element_t<__i, std::tuple<_Elements ...> >&& std::get(std::tuple<_Elements\
    \ ...>&&)\u2019\n 1332 |     get(tuple<_Elements...>&& __t) noexcept\n      |\
    \     ^~~\n/usr/include/c++/9/tuple:1332:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpkjw1z5nd.cpp:39:58: note:   \u2018std::vector<std::tuple<long\
    \ int, long int> >\u2019 is not derived from \u2018std::tuple<_Elements ...>\u2019\
    \n   39 |         res.emplace_back(std::make_tuple(std::get<0>(row2), std::get<1>(row2)));\n\
    \      |                                                          ^\nIn file included\
    \ from /usr/include/c++/9/functional:54,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmpkjw1z5nd.cpp:2:\n/usr/include/c++/9/tuple:1341:5:\
    \ note: candidate: \u2018template<long unsigned int __i, class ... _Elements>\
    \ constexpr std::__tuple_element_t<__i, std::tuple<_Elements ...> >&& std::get(const\
    \ std::tuple<_Elements ...>&&)\u2019\n 1341 |     get(const tuple<_Elements...>&&\
    \ __t) noexcept\n      |     ^~~\n/usr/include/c++/9/tuple:1341:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmpkjw1z5nd.cpp:39:58: note: \
    \  \u2018std::vector<std::tuple<long int, long int> >\u2019 is not derived from\
    \ \u2018const std::tuple<_Elements ...>\u2019\n   39 |         res.emplace_back(std::make_tuple(std::get<0>(row2),\
    \ std::get<1>(row2)));\n      |                                              \
    \            ^\nIn file included from /usr/include/c++/9/functional:54,\n    \
    \             from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n   \
    \              from /tmp/tmpkjw1z5nd.cpp:2:\n/usr/include/c++/9/tuple:1364:5:\
    \ note: candidate: \u2018template<class _Tp, class ... _Types> constexpr _Tp&\
    \ std::get(std::tuple<_Elements ...>&)\u2019\n 1364 |     get(tuple<_Types...>&\
    \ __t) noexcept\n      |     ^~~\n/usr/include/c++/9/tuple:1364:5: note:   template\
    \ argument deduction/substitution failed:\n/usr/include/c++/9/tuple:1370:5: note:\
    \ candidate: \u2018template<class _Tp, class ... _Types> constexpr _Tp&& std::get(std::tuple<_Elements\
    \ ...>&&)\u2019\n 1370 |     get(tuple<_Types...>&& __t) noexcept\n      |   \
    \  ^~~\n/usr/include/c++/9/tuple:1370:5: note:   template argument deduction/substitution\
    \ failed:\n/usr/include/c++/9/tuple:1376:5: note: candidate: \u2018template<class\
    \ _Tp, class ... _Types> constexpr const _Tp& std::get(const std::tuple<_Elements\
    \ ...>&)\u2019\n 1376 |     get(const tuple<_Types...>& __t) noexcept\n      |\
    \     ^~~\n/usr/include/c++/9/tuple:1376:5: note:   template argument deduction/substitution\
    \ failed:\n/usr/include/c++/9/tuple:1383:5: note: candidate: \u2018template<class\
    \ _Tp, class ... _Types> constexpr const _Tp&& std::get(const std::tuple<_Elements\
    \ ...>&&)\u2019\n 1383 |     get(const tuple<_Types...>&& __t) noexcept\n    \
    \  |     ^~~\n/usr/include/c++/9/tuple:1383:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpkjw1z5nd.cpp:39:77: error: no matching function for call to\
    \ \u2018get<1>(std::vector<std::tuple<long int, long int> >&)\u2019\n   39 | \
    \        res.emplace_back(std::make_tuple(std::get<0>(row2), std::get<1>(row2)));\n\
    \      |                                                                     \
    \        ^\nIn file included from /usr/include/c++/9/algorithm:60,\n         \
    \        from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n        \
    \         from /tmp/tmpkjw1z5nd.cpp:2:\n/usr/include/c++/9/utility:219:5: note:\
    \ candidate: \u2018template<long unsigned int _Int, class _Tp1, class _Tp2> constexpr\
    \ typename std::tuple_element<_Int, std::pair<_Tp1, _Tp2> >::type& std::get(std::pair<_Tp1,\
    \ _Tp2>&)\u2019\n  219 |     get(std::pair<_Tp1, _Tp2>& __in) noexcept\n     \
    \ |     ^~~\n/usr/include/c++/9/utility:219:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpkjw1z5nd.cpp:39:77: note:   \u2018std::vector<std::tuple<long\
    \ int, long int> >\u2019 is not derived from \u2018std::pair<_Tp1, _Tp2>\u2019\
    \n   39 |         res.emplace_back(std::make_tuple(std::get<0>(row2), std::get<1>(row2)));\n\
    \      |                                                                     \
    \        ^\nIn file included from /usr/include/c++/9/algorithm:60,\n         \
    \        from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n        \
    \         from /tmp/tmpkjw1z5nd.cpp:2:\n/usr/include/c++/9/utility:224:5: note:\
    \ candidate: \u2018template<long unsigned int _Int, class _Tp1, class _Tp2> constexpr\
    \ typename std::tuple_element<_Int, std::pair<_Tp1, _Tp2> >::type&& std::get(std::pair<_Tp1,\
    \ _Tp2>&&)\u2019\n  224 |     get(std::pair<_Tp1, _Tp2>&& __in) noexcept\n   \
    \   |     ^~~\n/usr/include/c++/9/utility:224:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpkjw1z5nd.cpp:39:77: note:   \u2018std::vector<std::tuple<long\
    \ int, long int> >\u2019 is not derived from \u2018std::pair<_Tp1, _Tp2>\u2019\
    \n   39 |         res.emplace_back(std::make_tuple(std::get<0>(row2), std::get<1>(row2)));\n\
    \      |                                                                     \
    \        ^\nIn file included from /usr/include/c++/9/algorithm:60,\n         \
    \        from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n        \
    \         from /tmp/tmpkjw1z5nd.cpp:2:\n/usr/include/c++/9/utility:229:5: note:\
    \ candidate: \u2018template<long unsigned int _Int, class _Tp1, class _Tp2> constexpr\
    \ const typename std::tuple_element<_Int, std::pair<_Tp1, _Tp2> >::type& std::get(const\
    \ std::pair<_Tp1, _Tp2>&)\u2019\n  229 |     get(const std::pair<_Tp1, _Tp2>&\
    \ __in) noexcept\n      |     ^~~\n/usr/include/c++/9/utility:229:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmpkjw1z5nd.cpp:39:77: note: \
    \  \u2018std::vector<std::tuple<long int, long int> >\u2019 is not derived from\
    \ \u2018const std::pair<_Tp1, _Tp2>\u2019\n   39 |         res.emplace_back(std::make_tuple(std::get<0>(row2),\
    \ std::get<1>(row2)));\n      |                                              \
    \                               ^\nIn file included from /usr/include/c++/9/algorithm:60,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpkjw1z5nd.cpp:2:\n/usr/include/c++/9/utility:234:5:\
    \ note: candidate: \u2018template<long unsigned int _Int, class _Tp1, class _Tp2>\
    \ constexpr const typename std::tuple_element<_Int, std::pair<_Tp1, _Tp2> >::type&&\
    \ std::get(const std::pair<_Tp1, _Tp2>&&)\u2019\n  234 |     get(const std::pair<_Tp1,\
    \ _Tp2>&& __in) noexcept\n      |     ^~~\n/usr/include/c++/9/utility:234:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpkjw1z5nd.cpp:39:77:\
    \ note:   \u2018std::vector<std::tuple<long int, long int> >\u2019 is not derived\
    \ from \u2018const std::pair<_Tp1, _Tp2>\u2019\n   39 |         res.emplace_back(std::make_tuple(std::get<0>(row2),\
    \ std::get<1>(row2)));\n      |                                              \
    \                               ^\nIn file included from /usr/include/c++/9/algorithm:60,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpkjw1z5nd.cpp:2:\n/usr/include/c++/9/utility:243:5:\
    \ note: candidate: \u2018template<class _Tp, class _Up> constexpr _Tp& std::get(std::pair<_T1,\
    \ _T2>&)\u2019\n  243 |     get(pair<_Tp, _Up>& __p) noexcept\n      |     ^~~\n\
    /usr/include/c++/9/utility:243:5: note:   template argument deduction/substitution\
    \ failed:\n/usr/include/c++/9/utility:248:5: note: candidate: \u2018template<class\
    \ _Tp, class _Up> constexpr const _Tp& std::get(const std::pair<_T1, _T2>&)\u2019\
    \n  248 |     get(const pair<_Tp, _Up>& __p) noexcept\n      |     ^~~\n/usr/include/c++/9/utility:248:5:\
    \ note:   template argument deduction/substitution failed:\n/usr/include/c++/9/utility:253:5:\
    \ note: candidate: \u2018template<class _Tp, class _Up> constexpr _Tp&& std::get(std::pair<_T1,\
    \ _T2>&&)\u2019\n  253 |     get(pair<_Tp, _Up>&& __p) noexcept\n      |     ^~~\n\
    /usr/include/c++/9/utility:253:5: note:   template argument deduction/substitution\
    \ failed:\n/usr/include/c++/9/utility:258:5: note: candidate: \u2018template<class\
    \ _Tp, class _Up> constexpr const _Tp&& std::get(const std::pair<_T1, _T2>&&)\u2019\
    \n  258 |     get(const pair<_Tp, _Up>&& __p) noexcept\n      |     ^~~\n/usr/include/c++/9/utility:258:5:\
    \ note:   template argument deduction/substitution failed:\n/usr/include/c++/9/utility:263:5:\
    \ note: candidate: \u2018template<class _Tp, class _Up> constexpr _Tp& std::get(std::pair<_Up,\
    \ _Tp>&)\u2019\n  263 |     get(pair<_Up, _Tp>& __p) noexcept\n      |     ^~~\n\
    /usr/include/c++/9/utility:263:5: note:   template argument deduction/substitution\
    \ failed:\n/usr/include/c++/9/utility:268:5: note: candidate: \u2018template<class\
    \ _Tp, class _Up> constexpr const _Tp& std::get(const std::pair<_Up, _Tp>&)\u2019\
    \n  268 |     get(const pair<_Up, _Tp>& __p) noexcept\n      |     ^~~\n/usr/include/c++/9/utility:268:5:\
    \ note:   template argument deduction/substitution failed:\n/usr/include/c++/9/utility:273:5:\
    \ note: candidate: \u2018template<class _Tp, class _Up> constexpr _Tp&& std::get(std::pair<_Up,\
    \ _Tp>&&)\u2019\n  273 |     get(pair<_Up, _Tp>&& __p) noexcept\n      |     ^~~\n\
    /usr/include/c++/9/utility:273:5: note:   template argument deduction/substitution\
    \ failed:\n/usr/include/c++/9/utility:278:5: note: candidate: \u2018template<class\
    \ _Tp, class _Up> constexpr const _Tp&& std::get(const std::pair<_Up, _Tp>&&)\u2019\
    \n  278 |     get(const pair<_Up, _Tp>&& __p) noexcept\n      |     ^~~\n/usr/include/c++/9/utility:278:5:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/9/tuple:39,\n                 from /usr/include/c++/9/functional:54,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmpkjw1z5nd.cpp:2:\n/usr/include/c++/9/array:307:5:\
    \ note: candidate: \u2018template<long unsigned int _Int, class _Tp, long unsigned\
    \ int _Nm> constexpr _Tp& std::get(std::array<_Tp, _Nm>&)\u2019\n  307 |     get(array<_Tp,\
    \ _Nm>& __arr) noexcept\n      |     ^~~\n/usr/include/c++/9/array:307:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpkjw1z5nd.cpp:39:77:\
    \ note:   \u2018std::vector<std::tuple<long int, long int> >\u2019 is not derived\
    \ from \u2018std::array<_Tp, _Nm>\u2019\n   39 |         res.emplace_back(std::make_tuple(std::get<0>(row2),\
    \ std::get<1>(row2)));\n      |                                              \
    \                               ^\nIn file included from /usr/include/c++/9/tuple:39,\n\
    \                 from /usr/include/c++/9/functional:54,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n                 from\
    \ /tmp/tmpkjw1z5nd.cpp:2:\n/usr/include/c++/9/array:316:5: note: candidate: \u2018\
    template<long unsigned int _Int, class _Tp, long unsigned int _Nm> constexpr _Tp&&\
    \ std::get(std::array<_Tp, _Nm>&&)\u2019\n  316 |     get(array<_Tp, _Nm>&& __arr)\
    \ noexcept\n      |     ^~~\n/usr/include/c++/9/array:316:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmpkjw1z5nd.cpp:39:77: note: \
    \  \u2018std::vector<std::tuple<long int, long int> >\u2019 is not derived from\
    \ \u2018std::array<_Tp, _Nm>\u2019\n   39 |         res.emplace_back(std::make_tuple(std::get<0>(row2),\
    \ std::get<1>(row2)));\n      |                                              \
    \                               ^\nIn file included from /usr/include/c++/9/tuple:39,\n\
    \                 from /usr/include/c++/9/functional:54,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n                 from\
    \ /tmp/tmpkjw1z5nd.cpp:2:\n/usr/include/c++/9/array:324:5: note: candidate: \u2018\
    template<long unsigned int _Int, class _Tp, long unsigned int _Nm> constexpr const\
    \ _Tp& std::get(const std::array<_Tp, _Nm>&)\u2019\n  324 |     get(const array<_Tp,\
    \ _Nm>& __arr) noexcept\n      |     ^~~\n/usr/include/c++/9/array:324:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpkjw1z5nd.cpp:39:77:\
    \ note:   \u2018std::vector<std::tuple<long int, long int> >\u2019 is not derived\
    \ from \u2018const std::array<_Tp, _Nm>\u2019\n   39 |         res.emplace_back(std::make_tuple(std::get<0>(row2),\
    \ std::get<1>(row2)));\n      |                                              \
    \                               ^\nIn file included from /usr/include/c++/9/tuple:39,\n\
    \                 from /usr/include/c++/9/functional:54,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n                 from\
    \ /tmp/tmpkjw1z5nd.cpp:2:\n/usr/include/c++/9/array:333:5: note: candidate: \u2018\
    template<long unsigned int _Int, class _Tp, long unsigned int _Nm> constexpr const\
    \ _Tp&& std::get(const std::array<_Tp, _Nm>&&)\u2019\n  333 |     get(const array<_Tp,\
    \ _Nm>&& __arr) noexcept\n      |     ^~~\n/usr/include/c++/9/array:333:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpkjw1z5nd.cpp:39:77:\
    \ note:   \u2018std::vector<std::tuple<long int, long int> >\u2019 is not derived\
    \ from \u2018const std::array<_Tp, _Nm>\u2019\n   39 |         res.emplace_back(std::make_tuple(std::get<0>(row2),\
    \ std::get<1>(row2)));\n      |                                              \
    \                               ^\nIn file included from /usr/include/c++/9/functional:54,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmpkjw1z5nd.cpp:2:\n/usr/include/c++/9/tuple:1320:5:\
    \ note: candidate: \u2018template<long unsigned int __i, class ... _Elements>\
    \ constexpr std::__tuple_element_t<__i, std::tuple<_Elements ...> >& std::get(std::tuple<_Elements\
    \ ...>&)\u2019\n 1320 |     get(tuple<_Elements...>& __t) noexcept\n      |  \
    \   ^~~\n/usr/include/c++/9/tuple:1320:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpkjw1z5nd.cpp:39:77: note:   \u2018std::vector<std::tuple<long\
    \ int, long int> >\u2019 is not derived from \u2018std::tuple<_Elements ...>\u2019\
    \n   39 |         res.emplace_back(std::make_tuple(std::get<0>(row2), std::get<1>(row2)));\n\
    \      |                                                                     \
    \        ^\nIn file included from /usr/include/c++/9/functional:54,\n        \
    \         from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n       \
    \          from /tmp/tmpkjw1z5nd.cpp:2:\n/usr/include/c++/9/tuple:1326:5: note:\
    \ candidate: \u2018template<long unsigned int __i, class ... _Elements> constexpr\
    \ std::__tuple_element_t<__i, std::tuple<_Elements ...> >& std::get(const std::tuple<_Elements\
    \ ...>&)\u2019\n 1326 |     get(const tuple<_Elements...>& __t) noexcept\n   \
    \   |     ^~~\n/usr/include/c++/9/tuple:1326:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpkjw1z5nd.cpp:39:77: note:   \u2018std::vector<std::tuple<long\
    \ int, long int> >\u2019 is not derived from \u2018const std::tuple<_Elements\
    \ ...>\u2019\n   39 |         res.emplace_back(std::make_tuple(std::get<0>(row2),\
    \ std::get<1>(row2)));\n      |                                              \
    \                               ^\nIn file included from /usr/include/c++/9/functional:54,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmpkjw1z5nd.cpp:2:\n/usr/include/c++/9/tuple:1332:5:\
    \ note: candidate: \u2018template<long unsigned int __i, class ... _Elements>\
    \ constexpr std::__tuple_element_t<__i, std::tuple<_Elements ...> >&& std::get(std::tuple<_Elements\
    \ ...>&&)\u2019\n 1332 |     get(tuple<_Elements...>&& __t) noexcept\n      |\
    \     ^~~\n/usr/include/c++/9/tuple:1332:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpkjw1z5nd.cpp:39:77: note:   \u2018std::vector<std::tuple<long\
    \ int, long int> >\u2019 is not derived from \u2018std::tuple<_Elements ...>\u2019\
    \n   39 |         res.emplace_back(std::make_tuple(std::get<0>(row2), std::get<1>(row2)));\n\
    \      |                                                                     \
    \        ^\nIn file included from /usr/include/c++/9/functional:54,\n        \
    \         from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n       \
    \          from /tmp/tmpkjw1z5nd.cpp:2:\n/usr/include/c++/9/tuple:1341:5: note:\
    \ candidate: \u2018template<long unsigned int __i, class ... _Elements> constexpr\
    \ std::__tuple_element_t<__i, std::tuple<_Elements ...> >&& std::get(const std::tuple<_Elements\
    \ ...>&&)\u2019\n 1341 |     get(const tuple<_Elements...>&& __t) noexcept\n \
    \     |     ^~~\n/usr/include/c++/9/tuple:1341:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpkjw1z5nd.cpp:39:77: note:   \u2018std::vector<std::tuple<long\
    \ int, long int> >\u2019 is not derived from \u2018const std::tuple<_Elements\
    \ ...>\u2019\n   39 |         res.emplace_back(std::make_tuple(std::get<0>(row2),\
    \ std::get<1>(row2)));\n      |                                              \
    \                               ^\nIn file included from /usr/include/c++/9/functional:54,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmpkjw1z5nd.cpp:2:\n/usr/include/c++/9/tuple:1364:5:\
    \ note: candidate: \u2018template<class _Tp, class ... _Types> constexpr _Tp&\
    \ std::get(std::tuple<_Elements ...>&)\u2019\n 1364 |     get(tuple<_Types...>&\
    \ __t) noexcept\n      |     ^~~\n/usr/include/c++/9/tuple:1364:5: note:   template\
    \ argument deduction/substitution failed:\n/usr/include/c++/9/tuple:1370:5: note:\
    \ candidate: \u2018template<class _Tp, class ... _Types> constexpr _Tp&& std::get(std::tuple<_Elements\
    \ ...>&&)\u2019\n 1370 |     get(tuple<_Types...>&& __t) noexcept\n      |   \
    \  ^~~\n/usr/include/c++/9/tuple:1370:5: note:   template argument deduction/substitution\
    \ failed:\n/usr/include/c++/9/tuple:1376:5: note: candidate: \u2018template<class\
    \ _Tp, class ... _Types> constexpr const _Tp& std::get(const std::tuple<_Elements\
    \ ...>&)\u2019\n 1376 |     get(const tuple<_Types...>& __t) noexcept\n      |\
    \     ^~~\n/usr/include/c++/9/tuple:1376:5: note:   template argument deduction/substitution\
    \ failed:\n/usr/include/c++/9/tuple:1383:5: note: candidate: \u2018template<class\
    \ _Tp, class ... _Types> constexpr const _Tp&& std::get(const std::tuple<_Elements\
    \ ...>&&)\u2019\n 1383 |     get(const tuple<_Types...>&& __t) noexcept\n    \
    \  |     ^~~\n/usr/include/c++/9/tuple:1383:5: note:   template argument deduction/substitution\
    \ failed:\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    std::vector<std::tuple<long, long>> res;\n    std::vector<long>\
    \ row;\n    std::vector<long> col;\n    for (auto &i : lst) {\n        row.push_back(i[0]);\n\
    \        col.push_back(i.size() - 1);\n    }\n    std::sort(row.begin(), row.end());\n\
    \    std::sort(col.begin(), col.end());\n    for (long i = 0; i < row.size();\
    \ i++) {\n        for (long j = 0; j < col.size(); j++) {\n            if (row[i]\
    \ == x && col[j] == i) {\n                res.push_back(std::make_tuple(i, j));\n\
    \            }\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = get_row;\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "tmp5v_3ze61: /tmp/tmp5v_3ze61.cpp:40: int main(): Assertion `candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    std::vector<std::tuple<long, long>> res;\n    long n = lst.size();\n\
    \    long m = lst[0].size();\n    long i = 0;\n    long j = 0;\n    long k = 0;\n\
    \    long l = 0;\n    long m1 = n - 1;\n    long m2 = m - 1;\n    long m3 = n\
    \ - 1;\n    long m4 = m - 1;\n    long m5 = n - 1;\n    long m6 = m - 1;\n   \
    \ long m7 = n - 1;\n    long m8 = m - 1;\n    long m9 = n - 1;\n    long m10 =\
    \ m - 1;\n    long m11 = n - 1;\n    long m12 = m - 1;\n    long m13 = n - 1;\n\
    \    long m14 = m - 1;\n    long m15 = n - 1;\n    long m16 = m - 1;\n    long\
    \ m17 = n - 1;\n    long m18 = m - 1;\n    long m19 = n - 1;\n    long m20 = m\
    \ - 1;\n    long m21 = n - 1;\n    long m22 = m - 1;\n    long m23 = n - 1;\n\
    \    long m24 = m - 1;\n    long m25 = n - 1;\n    long m26 = m - 1;\n    long\
    \ m27 = n - 1;\n    long m28 = m - 1;\n    long m29 = n - 1;\n    long m30 = m\
    \ - 1;\n    long m31 = n - 1;\n    long m32 = m - 1;\n    long m33 = n - 1;\n\
    \    long m34 = m - 1;\n    long m35 = n - 1;\n    long m36 = m - 1;\n    long\
    \ m37 = n - 1;\n    long m38 = m - 1;\n    long m39 = n - 1;\n    long m40 = m\
    \ - 1;\n    long m41 = n - 1;\n    long m42 = m - 1;\n    long m43 = n - 1;\n\
    \    long m44 = m - 1;\n    long m45 = n - 1;\n    long m46 = m - 1;\n    long\
    \ m47 = n - 1;\n    long m48 = m - 1;\n    long m49 = n - 1;\n    long m50 = m\
    \ - 1;\n    long m51 = n - 1;\n    long m52 = m - 1;\n    long m53 = n - 1;\n\
    \    long m54 = m - 1;\n    long m55 = n - 1;\n    long m56 = m - 1;\n    long\
    \ m57 = n - 1;\n    long m58 = m - 1;\n    long m59 = n - 1;\n    long m60 = m\
    \ - 1;\n    \n}\nint main() {\n    auto candidate = get_row;\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "tmpa0kaznik: /tmp/tmpa0kaznik.cpp:91: int main(): Assertion `candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    std::vector<std::tuple<long, long>> res;\n    long row =\
    \ 0;\n    long col = 0;\n    for (auto &i : lst) {\n        row = std::max(row,\
    \ i[0]);\n        col = std::max(col, i[1]);\n    }\n    for (auto &i : lst) {\n\
    \        if (i[0] == row) {\n            res.push_back({row, col});\n        }\n\
    \    }\n    std::sort(res.begin(), res.end(), [](std::tuple<long, long> a, std::tuple<long,\
    \ long> b) {\n        return std::get<0>(a) > std::get<0>(b);\n    });\n    std::sort(res.begin(),\
    \ res.end(), [](std::tuple<long, long> a, std::tuple<long, long> b) {\n      \
    \  return std::get<1>(a) > std::get<1>(b);\n    });\n    return res;\n}\nint main()\
    \ {\n    auto candidate = get_row;\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "tmp1ebdi5s4: /tmp/tmp1ebdi5s4.cpp:42: int main(): Assertion `candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    std::vector<std::tuple<long, long>> res;\n    std::vector<std::vector<long>>\
    \ row;\n    std::vector<std::vector<long>> col;\n    long n = lst.size();\n  \
    \  long m = lst[0].size();\n    long cnt = 0;\n    for (long i = 0; i < n; i++)\
    \ {\n        row.push_back(std::vector<long>());\n        col.push_back(std::vector<long>());\n\
    \        for (long j = 0; j < m; j++) {\n            if (lst[i][j] == x) {\n \
    \               row.back().push_back(j);\n                col.back().push_back(i);\n\
    \                cnt++;\n            }\n        }\n    }\n    for (long i = 0;\
    \ i < n; i++) {\n        for (long j = 0; j < m; j++) {\n            if (row.back().size()\
    \ > col.back().size()) {\n                res.push_back(std::make_tuple(i, j));\n\
    \            }\n        }\n    }\n    std::sort(res.begin(), res.end(), [](std::tuple<long,\
    \ long> a, std::tuple<long, long> b) {\n        return std::get<0>(a) < std::get<0>(b);\n\
    \    });\n    for (long i = 0; i < n; i++) {\n        std::sort(res.begin() +\
    \ i, res.end(), [](std::tuple<long, long> a, std::tuple<long, long> b) {\n   \
    \         return std::get<1>(a) < std::get<1>(b);\n        });\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = get_row;\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    std::vector<std::tuple<long, long>> res;\n    for(auto &row\
    \ : lst) {\n        for(auto &el : row) {\n            if(el == x) {\n       \
    \         res.push_back(std::make_tuple(row.size() - 1, row.size() - 1));\n  \
    \          }\n        }\n    }\n    std::sort(res.begin(), res.end(), [](std::tuple<long,\
    \ long> a, std::tuple<long, long> b) {\n        return std::get<0>(a) < std::get<0>(b);\n\
    \    });\n    std::sort(res.begin(), res.end(), [](std::tuple<long, long> a, std::tuple<long,\
    \ long> b) {\n        return std::get<1>(a) > std::get<1>(b);\n    });\n    return\
    \ res;\n}\nint main() {\n    auto candidate = get_row;\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "tmpfcw8mxwv: /tmp/tmpfcw8mxwv.cpp:38: int main(): Assertion `candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    std::vector<std::tuple<long, long>> res;\n    std::vector<long>\
    \ row;\n    std::vector<long> col;\n    std::vector<long> row_col;\n    std::vector<long>\
    \ row_col2;\n    std::vector<long> row_col3;\n    std::vector<long> row_col4;\n\
    \    std::vector<long> row_col5;\n    std::vector<long> row_col6;\n    std::vector<long>\
    \ row_col7;\n    std::vector<long> row_col8;\n    std::vector<long> row_col9;\n\
    \    std::vector<long> row_col10;\n    std::vector<long> row_col11;\n    std::vector<long>\
    \ row_col12;\n    std::vector<long> row_col13;\n    std::vector<long> row_col14;\n\
    \    std::vector<long> row_col15;\n    std::vector<long> row_col16;\n    std::vector<long>\
    \ row_col17;\n    std::vector<long> row_col18;\n    std::vector<long> row_col19;\n\
    \    std::vector<long> row_col20;\n    std::vector<long> row_col21;\n    std::vector<long>\
    \ row_col22;\n    std::vector<long> row_col23;\n    std::vector<long> row_col24;\n\
    \    std::vector<long> row_col25;\n    std::vector<long> row_col26;\n    std::vector<long>\
    \ row_col27;\n    std::vector<long> row_col28;\n    std::vector<long> row_col29;\n\
    \    std::vector<long> row_col30;\n    std::vector<long> row_col31;\n    std::vector<long>\
    \ row_col32;\n    std::vector<long> row_col33;\n    std::vector<long> row_col34;\n\
    \    std::vector<long> row_col35;\n    std::vector<long> row_col36;\n    std::vector<long>\
    \ row_col37;\n    std::vector<long> row_col38;\n    std::vector<long> row_col39;\n\
    \    std::vector<long> row_col40;\n    std::vector<long> row_col41;\n    std::vector<long>\
    \ row_col42;\n    std::vector<long> row_col43;\n    std::vector<long> row_col44;\n\
    \    std::vector<long> row_col45;\n    std::vector<long> row_col46;\n    std::vector<long>\
    \ row_col47;\n    std::vector<long> row_col48;\n    std::vector<long> row_col49;\n\
    \    std::vector<long> row_col50;\n    std::vector<long> row_col51;\n    std::vector<long>\
    \ row_col52;\n    std::vector<long> row_col53;\n    std::vector<long> row_col54;\n\
    \    std::vector<long> row_col55;\n    std::vector<long> row_col56;\n    std::vector<long\n\
    }\nint main() {\n    auto candidate = get_row;\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmppqivpj8t.cpp: In function \u2018std::vector<std::tuple<long int,\
    \ long int> > get_row(std::vector<std::vector<long int> >, long int)\u2019:\n\
    /tmp/tmppqivpj8t.cpp:79:17: error: template argument 1 is invalid\n   79 |   \
    \  std::vector<long\n      |                 ^~~~\n/tmp/tmppqivpj8t.cpp:79:17:\
    \ error: template argument 2 is invalid\n/tmp/tmppqivpj8t.cpp:80:1: error: expected\
    \ unqualified-id before \u2018}\u2019 token\n   80 | }\n      | ^\n/tmp/tmppqivpj8t.cpp:80:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    std::vector<std::tuple<long, long>> res;\n    std::vector<long>\
    \ row;\n    std::vector<long> col;\n    for (auto &i : lst) {\n        row.push_back(i[0]);\n\
    \        col.push_back(i.size() - 1);\n    }\n    std::sort(row.begin(), row.end());\n\
    \    std::sort(col.begin(), col.end());\n    for (long i = 0; i < row.size();\
    \ i++) {\n        long j = row[i];\n        long k = col[i];\n        if (j ==\
    \ k) {\n            continue;\n        }\n        for (long l = 0; l < j; l++)\
    \ {\n            for (long m = k; m < j; m++) {\n                if (lst[j][m]\
    \ == x) {\n                    res.push_back({i, j});\n                }\n   \
    \         }\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = get_row;\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "tmp9mghsfb2: /tmp/tmp9mghsfb2.cpp:47: int main(): Assertion `candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    std::vector<std::tuple<long, long>> res;\n    std::vector<std::tuple<long,\
    \ long>> temp;\n    long row = 0;\n    long col = 0;\n    long cnt = 0;\n    for\
    \ (auto &i : lst) {\n        cnt += i.size();\n    }\n    for (auto &i : lst)\
    \ {\n        for (auto &j : i) {\n            if (j == x) {\n                res.push_back(std::make_tuple(row,\
    \ col));\n                temp.push_back(std::make_tuple(row, col));\n       \
    \     }\n        }\n    }\n    std::sort(temp.begin(), temp.end(), [](std::tuple<long,\
    \ long> a, std::tuple<long, long> b) {\n        return std::get<0>(a) > std::get<0>(b);\n\
    \    });\n    std::sort(res.begin(), res.end(), [](std::tuple<long, long> a, std::tuple<long,\
    \ long> b) {\n        return std::get<0>(a) > std::get<0>(b);\n    });\n    for\
    \ (auto &i : temp) {\n        res.push_back(i);\n    }\n    return res;\n}\nint\
    \ main() {\n    auto candidate = get_row;\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "tmpn28v0r80: /tmp/tmpn28v0r80.cpp:49: int main(): Assertion `candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    std::vector<std::tuple<long, long>> res;\n    std::vector<long>\
    \ row;\n    std::vector<long> col;\n    for (auto &v : lst) {\n        row.push_back(v[0]);\n\
    \        col.push_back(v[1]);\n    }\n    std::sort(row.begin(), row.end());\n\
    \    std::sort(col.begin(), col.end());\n    for (long i = 0; i < row.size();\
    \ i++) {\n        long j = row[i];\n        long k = col[i];\n        if (j ==\
    \ k) {\n            continue;\n        }\n        for (long m = j; m < k; m++)\
    \ {\n            std::tuple<long, long> t = std::make_tuple(i, m);\n         \
    \   res.push_back(t);\n        }\n    }\n    return res;\n}\nint main() {\n  \
    \  auto candidate = get_row;\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "tmp00n_rrhf: /tmp/tmp00n_rrhf.cpp:44: int main(): Assertion `candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    std::vector<std::tuple<long, long>> res;\n    long row =\
    \ 0;\n    long col = 0;\n    for (auto &row : lst) {\n        auto it = std::find(row.begin(),\
    \ row.end(), x);\n        if (it != row.end()) {\n            col = std::distance(row.begin(),\
    \ it);\n            res.emplace_back(row, col);\n        }\n    }\n    std::sort(res.begin(),\
    \ res.end(), [](const std::tuple<long, long> &a, const std::tuple<long, long>\
    \ &b) {\n        return std::get<0>(a) < std::get<0>(b);\n    });\n    std::sort(res.begin(),\
    \ res.end(), [](const std::tuple<long, long> &a, const std::tuple<long, long>\
    \ &b) {\n        return std::get<1>(a) > std::get<1>(b);\n    });\n    return\
    \ res;\n}\nint main() {\n    auto candidate = get_row;\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "In file included from /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n\
    \                 from /usr/include/c++/9/bits/allocator.h:46,\n             \
    \    from /usr/include/c++/9/string:41,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpsiah8o9_.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h: In instantiation\
    \ of \u2018void __gnu_cxx::new_allocator<_Tp>::construct(_Up*, _Args&& ...) [with\
    \ _Up = std::tuple<long int, long int>; _Args = {std::vector<long int, std::allocator<long\
    \ int> >&, long int&}; _Tp = std::tuple<long int, long int>]\u2019:\n/usr/include/c++/9/bits/alloc_traits.h:483:4:\
    \   required from \u2018static void std::allocator_traits<std::allocator<_CharT>\
    \ >::construct(std::allocator_traits<std::allocator<_CharT> >::allocator_type&,\
    \ _Up*, _Args&& ...) [with _Up = std::tuple<long int, long int>; _Args = {std::vector<long\
    \ int, std::allocator<long int> >&, long int&}; _Tp = std::tuple<long int, long\
    \ int>; std::allocator_traits<std::allocator<_CharT> >::allocator_type = std::allocator<std::tuple<long\
    \ int, long int> >]\u2019\n/usr/include/c++/9/bits/vector.tcc:115:30:   required\
    \ from \u2018void std::vector<_Tp, _Alloc>::emplace_back(_Args&& ...) [with _Args\
    \ = {std::vector<long int, std::allocator<long int> >&, long int&}; _Tp = std::tuple<long\
    \ int, long int>; _Alloc = std::allocator<std::tuple<long int, long int> >]\u2019\
    \n/tmp/tmpsiah8o9_.cpp:27:38:   required from here\n/usr/include/c++/9/ext/new_allocator.h:146:4:\
    \ error: no matching function for call to \u2018std::tuple<long int, long int>::tuple(std::vector<long\
    \ int>&, long int&)\u2019\n  146 |  { ::new((void *)__p) _Up(std::forward<_Args>(__args)...);\
    \ }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nIn file\
    \ included from /usr/include/c++/9/functional:54,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmpsiah8o9_.cpp:2:\n/usr/include/c++/9/tuple:1199:18:\
    \ note: candidate: \u2018template<class _Alloc, class _U1, class _U2, typename\
    \ std::enable_if<(_MoveConstructibleTuple<_U1, _U2>() && (! _ImplicitlyMoveConvertibleTuple<_U1,\
    \ _U2>())), bool>::type <anonymous> > std::tuple<_T1, _T2>::tuple(std::allocator_arg_t,\
    \ const _Alloc&, std::pair<_U1, _U2>&&)\u2019\n 1199 |         explicit tuple(allocator_arg_t\
    \ __tag, const _Alloc& __a,\n      |                  ^~~~~\n/usr/include/c++/9/tuple:1199:18:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n              \
    \   from /usr/include/c++/9/bits/allocator.h:46,\n                 from /usr/include/c++/9/string:41,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpsiah8o9_.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4:\
    \ note:   candidate expects 3 arguments, 2 provided\n  146 |  { ::new((void *)__p)\
    \ _Up(std::forward<_Args>(__args)...); }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    In file included from /usr/include/c++/9/functional:54,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n                 from\
    \ /tmp/tmpsiah8o9_.cpp:2:\n/usr/include/c++/9/tuple:1189:9: note: candidate: \u2018\
    template<class _Alloc, class _U1, class _U2, typename std::enable_if<(_MoveConstructibleTuple<_U1,\
    \ _U2>() && _ImplicitlyMoveConvertibleTuple<_U1, _U2>()), bool>::type <anonymous>\
    \ > std::tuple<_T1, _T2>::tuple(std::allocator_arg_t, const _Alloc&, std::pair<_U1,\
    \ _U2>&&)\u2019\n 1189 |         tuple(allocator_arg_t __tag, const _Alloc& __a,\
    \ pair<_U1, _U2>&& __in)\n      |         ^~~~~\n/usr/include/c++/9/tuple:1189:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n              \
    \   from /usr/include/c++/9/bits/allocator.h:46,\n                 from /usr/include/c++/9/string:41,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpsiah8o9_.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4:\
    \ note:   candidate expects 3 arguments, 2 provided\n  146 |  { ::new((void *)__p)\
    \ _Up(std::forward<_Args>(__args)...); }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    In file included from /usr/include/c++/9/functional:54,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n                 from\
    \ /tmp/tmpsiah8o9_.cpp:2:\n/usr/include/c++/9/tuple:1179:18: note: candidate:\
    \ \u2018template<class _Alloc, class _U1, class _U2, typename std::enable_if<(_ConstructibleTuple<_U1,\
    \ _U2>() && (! _ImplicitlyConvertibleTuple<_U1, _U2>())), bool>::type <anonymous>\
    \ > std::tuple<_T1, _T2>::tuple(std::allocator_arg_t, const _Alloc&, const std::pair<_U1,\
    \ _U2>&)\u2019\n 1179 |         explicit tuple(allocator_arg_t __tag, const _Alloc&\
    \ __a,\n      |                  ^~~~~\n/usr/include/c++/9/tuple:1179:18: note:\
    \   template argument deduction/substitution failed:\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n\
    \                 from /usr/include/c++/9/bits/allocator.h:46,\n             \
    \    from /usr/include/c++/9/string:41,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpsiah8o9_.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4: note:\
    \   candidate expects 3 arguments, 2 provided\n  146 |  { ::new((void *)__p) _Up(std::forward<_Args>(__args)...);\
    \ }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nIn file\
    \ included from /usr/include/c++/9/functional:54,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmpsiah8o9_.cpp:2:\n/usr/include/c++/9/tuple:1169:9:\
    \ note: candidate: \u2018template<class _Alloc, class _U1, class _U2, typename\
    \ std::enable_if<(_ConstructibleTuple<_U1, _U2>() && _ImplicitlyConvertibleTuple<_U1,\
    \ _U2>()), bool>::type <anonymous> > std::tuple<_T1, _T2>::tuple(std::allocator_arg_t,\
    \ const _Alloc&, const std::pair<_U1, _U2>&)\u2019\n 1169 |         tuple(allocator_arg_t\
    \ __tag, const _Alloc& __a,\n      |         ^~~~~\n/usr/include/c++/9/tuple:1169:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n              \
    \   from /usr/include/c++/9/bits/allocator.h:46,\n                 from /usr/include/c++/9/string:41,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpsiah8o9_.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4:\
    \ note:   candidate expects 3 arguments, 2 provided\n  146 |  { ::new((void *)__p)\
    \ _Up(std::forward<_Args>(__args)...); }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    In file included from /usr/include/c++/9/functional:54,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n                 from\
    \ /tmp/tmpsiah8o9_.cpp:2:\n/usr/include/c++/9/tuple:1158:11: note: candidate:\
    \ \u2018template<class _Alloc, class _U1, class _U2, typename std::enable_if<(_MoveConstructibleTuple<_U1,\
    \ _U2>() && (! _ImplicitlyMoveConvertibleTuple<_U1, _U2>())), bool>::type <anonymous>\
    \ > std::tuple<_T1, _T2>::tuple(std::allocator_arg_t, const _Alloc&, std::tuple<_U1,\
    \ _U2>&&)\u2019\n 1158 |  explicit tuple(allocator_arg_t __tag, const _Alloc&\
    \ __a,\n      |           ^~~~~\n/usr/include/c++/9/tuple:1158:11: note:   template\
    \ argument deduction/substitution failed:\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n\
    \                 from /usr/include/c++/9/bits/allocator.h:46,\n             \
    \    from /usr/include/c++/9/string:41,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpsiah8o9_.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4: note:\
    \   candidate expects 3 arguments, 2 provided\n  146 |  { ::new((void *)__p) _Up(std::forward<_Args>(__args)...);\
    \ }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nIn file\
    \ included from /usr/include/c++/9/functional:54,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmpsiah8o9_.cpp:2:\n/usr/include/c++/9/tuple:1148:2:\
    \ note: candidate: \u2018template<class _Alloc, class _U1, class _U2, typename\
    \ std::enable_if<(_MoveConstructibleTuple<_U1, _U2>() && _ImplicitlyMoveConvertibleTuple<_U1,\
    \ _U2>()), bool>::type <anonymous> > std::tuple<_T1, _T2>::tuple(std::allocator_arg_t,\
    \ const _Alloc&, std::tuple<_U1, _U2>&&)\u2019\n 1148 |  tuple(allocator_arg_t\
    \ __tag, const _Alloc& __a, tuple<_U1, _U2>&& __in)\n      |  ^~~~~\n/usr/include/c++/9/tuple:1148:2:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n              \
    \   from /usr/include/c++/9/bits/allocator.h:46,\n                 from /usr/include/c++/9/string:41,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpsiah8o9_.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4:\
    \ note:   candidate expects 3 arguments, 2 provided\n  146 |  { ::new((void *)__p)\
    \ _Up(std::forward<_Args>(__args)...); }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    In file included from /usr/include/c++/9/functional:54,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n                 from\
    \ /tmp/tmpsiah8o9_.cpp:2:\n/usr/include/c++/9/tuple:1136:11: note: candidate:\
    \ \u2018template<class _Alloc, class _U1, class _U2, typename std::enable_if<(_ConstructibleTuple<_U1,\
    \ _U2>() && (! _ImplicitlyConvertibleTuple<_U1, _U2>())), bool>::type <anonymous>\
    \ > std::tuple<_T1, _T2>::tuple(std::allocator_arg_t, const _Alloc&, const std::tuple<_U1,\
    \ _U2>&)\u2019\n 1136 |  explicit tuple(allocator_arg_t __tag, const _Alloc& __a,\n\
    \      |           ^~~~~\n/usr/include/c++/9/tuple:1136:11: note:   template argument\
    \ deduction/substitution failed:\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n\
    \                 from /usr/include/c++/9/bits/allocator.h:46,\n             \
    \    from /usr/include/c++/9/string:41,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpsiah8o9_.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4: note:\
    \   candidate expects 3 arguments, 2 provided\n  146 |  { ::new((void *)__p) _Up(std::forward<_Args>(__args)...);\
    \ }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nIn file\
    \ included from /usr/include/c++/9/functional:54,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmpsiah8o9_.cpp:2:\n/usr/include/c++/9/tuple:1124:2:\
    \ note: candidate: \u2018template<class _Alloc, class _U1, class _U2, typename\
    \ std::enable_if<(_ConstructibleTuple<_U1, _U2>() && _ImplicitlyConvertibleTuple<_U1,\
    \ _U2>()), bool>::type <anonymous> > std::tuple<_T1, _T2>::tuple(std::allocator_arg_t,\
    \ const _Alloc&, const std::tuple<_U1, _U2>&)\u2019\n 1124 |  tuple(allocator_arg_t\
    \ __tag, const _Alloc& __a,\n      |  ^~~~~\n/usr/include/c++/9/tuple:1124:2:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n              \
    \   from /usr/include/c++/9/bits/allocator.h:46,\n                 from /usr/include/c++/9/string:41,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpsiah8o9_.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4:\
    \ note:   candidate expects 3 arguments, 2 provided\n  146 |  { ::new((void *)__p)\
    \ _Up(std::forward<_Args>(__args)...); }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    In file included from /usr/include/c++/9/functional:54,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n                 from\
    \ /tmp/tmpsiah8o9_.cpp:2:\n/usr/include/c++/9/tuple:1115:2: note: candidate: \u2018\
    template<class _Alloc> std::tuple<_T1, _T2>::tuple(std::allocator_arg_t, const\
    \ _Alloc&, std::tuple<_T1, _T2>&&)\u2019\n 1115 |  tuple(allocator_arg_t __tag,\
    \ const _Alloc& __a, tuple&& __in)\n      |  ^~~~~\n/usr/include/c++/9/tuple:1115:2:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n              \
    \   from /usr/include/c++/9/bits/allocator.h:46,\n                 from /usr/include/c++/9/string:41,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpsiah8o9_.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4:\
    \ note:   candidate expects 3 arguments, 2 provided\n  146 |  { ::new((void *)__p)\
    \ _Up(std::forward<_Args>(__args)...); }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    In file included from /usr/include/c++/9/functional:54,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n                 from\
    \ /tmp/tmpsiah8o9_.cpp:2:\n/usr/include/c++/9/tuple:1111:2: note: candidate: \u2018\
    template<class _Alloc> std::tuple<_T1, _T2>::tuple(std::allocator_arg_t, const\
    \ _Alloc&, const std::tuple<_T1, _T2>&)\u2019\n 1111 |  tuple(allocator_arg_t\
    \ __tag, const _Alloc& __a, const tuple& __in)\n      |  ^~~~~\n/usr/include/c++/9/tuple:1111:2:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n              \
    \   from /usr/include/c++/9/bits/allocator.h:46,\n                 from /usr/include/c++/9/string:41,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpsiah8o9_.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4:\
    \ note:   candidate expects 3 arguments, 2 provided\n  146 |  { ::new((void *)__p)\
    \ _Up(std::forward<_Args>(__args)...); }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    In file included from /usr/include/c++/9/functional:54,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n                 from\
    \ /tmp/tmpsiah8o9_.cpp:2:\n/usr/include/c++/9/tuple:1105:11: note: candidate:\
    \ \u2018template<class _Alloc, class _U1, class _U2, typename std::enable_if<(_MoveConstructibleTuple<_U1,\
    \ _U2>() && (! _ImplicitlyMoveConvertibleTuple<_U1, _U2>())), bool>::type <anonymous>\
    \ > std::tuple<_T1, _T2>::tuple(std::allocator_arg_t, const _Alloc&, _U1&&, _U2&&)\u2019\
    \n 1105 |  explicit tuple(allocator_arg_t __tag, const _Alloc& __a,\n      | \
    \          ^~~~~\n/usr/include/c++/9/tuple:1105:11: note:   template argument\
    \ deduction/substitution failed:\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n\
    \                 from /usr/include/c++/9/bits/allocator.h:46,\n             \
    \    from /usr/include/c++/9/string:41,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpsiah8o9_.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4: note:\
    \   candidate expects 4 arguments, 2 provided\n  146 |  { ::new((void *)__p) _Up(std::forward<_Args>(__args)...);\
    \ }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nIn file\
    \ included from /usr/include/c++/9/functional:54,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmpsiah8o9_.cpp:2:\n/usr/include/c++/9/tuple:1095:2:\
    \ note: candidate: \u2018template<class _Alloc, class _U1, class _U2, typename\
    \ std::enable_if<(_MoveConstructibleTuple<_U1, _U2>() && _ImplicitlyMoveConvertibleTuple<_U1,\
    \ _U2>()), bool>::type <anonymous> > std::tuple<_T1, _T2>::tuple(std::allocator_arg_t,\
    \ const _Alloc&, _U1&&, _U2&&)\u2019\n 1095 |  tuple(allocator_arg_t __tag, const\
    \ _Alloc& __a, _U1&& __a1, _U2&& __a2)\n      |  ^~~~~\n/usr/include/c++/9/tuple:1095:2:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n              \
    \   from /usr/include/c++/9/bits/allocator.h:46,\n                 from /usr/include/c++/9/string:41,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpsiah8o9_.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4:\
    \ note:   candidate expects 4 arguments, 2 provided\n  146 |  { ::new((void *)__p)\
    \ _Up(std::forward<_Args>(__args)...); }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    In file included from /usr/include/c++/9/functional:54,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n                 from\
    \ /tmp/tmpsiah8o9_.cpp:2:\n/usr/include/c++/9/tuple:1085:11: note: candidate:\
    \ \u2018template<class _Alloc, class _Dummy, typename std::enable_if<(std::_TC<std::is_same<_Dummy,\
    \ void>::value, long int, long int>::_ConstructibleTuple<long int, long int>()\
    \ && (! std::_TC<std::is_same<_Dummy, void>::value, long int, long int>::_ImplicitlyConvertibleTuple<long\
    \ int, long int>())), bool>::type <anonymous> > std::tuple<_T1, _T2>::tuple(std::allocator_arg_t,\
    \ const _Alloc&, const _T1&, const _T2&)\u2019\n 1085 |  explicit tuple(allocator_arg_t\
    \ __tag, const _Alloc& __a,\n      |           ^~~~~\n/usr/include/c++/9/tuple:1085:11:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n              \
    \   from /usr/include/c++/9/bits/allocator.h:46,\n                 from /usr/include/c++/9/string:41,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpsiah8o9_.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4:\
    \ note:   candidate expects 4 arguments, 2 provided\n  146 |  { ::new((void *)__p)\
    \ _Up(std::forward<_Args>(__args)...); }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    In file included from /usr/include/c++/9/functional:54,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n                 from\
    \ /tmp/tmpsiah8o9_.cpp:2:\n/usr/include/c++/9/tuple:1073:2: note: candidate: \u2018\
    template<class _Alloc, class _Dummy, typename std::enable_if<(std::_TC<std::is_same<_Dummy,\
    \ void>::value, long int, long int>::_ConstructibleTuple<long int, long int>()\
    \ && std::_TC<std::is_same<_Dummy, void>::value, long int, long int>::_ImplicitlyConvertibleTuple<long\
    \ int, long int>()), bool>::type <anonymous> > std::tuple<_T1, _T2>::tuple(std::allocator_arg_t,\
    \ const _Alloc&, const _T1&, const _T2&)\u2019\n 1073 |  tuple(allocator_arg_t\
    \ __tag, const _Alloc& __a,\n      |  ^~~~~\n/usr/include/c++/9/tuple:1073:2:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n              \
    \   from /usr/include/c++/9/bits/allocator.h:46,\n                 from /usr/include/c++/9/string:41,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpsiah8o9_.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4:\
    \ note:   candidate expects 4 arguments, 2 provided\n  146 |  { ::new((void *)__p)\
    \ _Up(std::forward<_Args>(__args)...); }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    In file included from /usr/include/c++/9/functional:54,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n                 from\
    \ /tmp/tmpsiah8o9_.cpp:2:\n/usr/include/c++/9/tuple:1062:2: note: candidate: \u2018\
    template<class _Alloc> std::tuple<_T1, _T2>::tuple(std::allocator_arg_t, const\
    \ _Alloc&)\u2019\n 1062 |  tuple(allocator_arg_t __tag, const _Alloc& __a)\n \
    \     |  ^~~~~\n/usr/include/c++/9/tuple:1062:2: note:   template argument deduction/substitution\
    \ failed:\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n\
    \                 from /usr/include/c++/9/bits/allocator.h:46,\n             \
    \    from /usr/include/c++/9/string:41,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpsiah8o9_.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4: note:\
    \   cannot convert \u2018std::forward<std::vector<long int>&>((* & __args#0))\u2019\
    \ (type \u2018std::vector<long int>\u2019) to type \u2018std::allocator_arg_t\u2019\
    \n  146 |  { ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }\n     \
    \ |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nIn file included\
    \ from /usr/include/c++/9/functional:54,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmpsiah8o9_.cpp:2:\n/usr/include/c++/9/tuple:1055:28:\
    \ note: candidate: \u2018template<class _U1, class _U2, typename std::enable_if<(_MoveConstructibleTuple<_U1,\
    \ _U2>() && (! _ImplicitlyMoveConvertibleTuple<_U1, _U2>())), bool>::type <anonymous>\
    \ > constexpr std::tuple<_T1, _T2>::tuple(std::pair<_U1, _U2>&&)\u2019\n 1055\
    \ |         explicit constexpr tuple(pair<_U1, _U2>&& __in)\n      |         \
    \                   ^~~~~\n/usr/include/c++/9/tuple:1055:28: note:   template\
    \ argument deduction/substitution failed:\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n\
    \                 from /usr/include/c++/9/bits/allocator.h:46,\n             \
    \    from /usr/include/c++/9/string:41,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpsiah8o9_.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4: note:\
    \   \u2018std::vector<long int>\u2019 is not derived from \u2018std::pair<_T1,\
    \ _T2>\u2019\n  146 |  { ::new((void *)__p) _Up(std::forward<_Args>(__args)...);\
    \ }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nIn file\
    \ included from /usr/include/c++/9/functional:54,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmpsiah8o9_.cpp:2:\n/usr/include/c++/9/tuple:1045:19:\
    \ note: candidate: \u2018template<class _U1, class _U2, typename std::enable_if<(_MoveConstructibleTuple<_U1,\
    \ _U2>() && _ImplicitlyMoveConvertibleTuple<_U1, _U2>()), bool>::type <anonymous>\
    \ > constexpr std::tuple<_T1, _T2>::tuple(std::pair<_U1, _U2>&&)\u2019\n 1045\
    \ |         constexpr tuple(pair<_U1, _U2>&& __in)\n      |                  \
    \ ^~~~~\n/usr/include/c++/9/tuple:1045:19: note:   template argument deduction/substitution\
    \ failed:\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n\
    \                 from /usr/include/c++/9/bits/allocator.h:46,\n             \
    \    from /usr/include/c++/9/string:41,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpsiah8o9_.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4: note:\
    \   \u2018std::vector<long int>\u2019 is not derived from \u2018std::pair<_T1,\
    \ _T2>\u2019\n  146 |  { ::new((void *)__p) _Up(std::forward<_Args>(__args)...);\
    \ }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nIn file\
    \ included from /usr/include/c++/9/functional:54,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmpsiah8o9_.cpp:2:\n/usr/include/c++/9/tuple:1036:28:\
    \ note: candidate: \u2018template<class _U1, class _U2, typename std::enable_if<(_ConstructibleTuple<_U1,\
    \ _U2>() && (! _ImplicitlyConvertibleTuple<_U1, _U2>())), bool>::type <anonymous>\
    \ > constexpr std::tuple<_T1, _T2>::tuple(const std::pair<_U1, _U2>&)\u2019\n\
    \ 1036 |         explicit constexpr tuple(const pair<_U1, _U2>& __in)\n      |\
    \                            ^~~~~\n/usr/include/c++/9/tuple:1036:28: note:  \
    \ template argument deduction/substitution failed:\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n\
    \                 from /usr/include/c++/9/bits/allocator.h:46,\n             \
    \    from /usr/include/c++/9/string:41,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpsiah8o9_.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4: note:\
    \   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::pair<_T1,\
    \ _T2>\u2019\n  146 |  { ::new((void *)__p) _Up(std::forward<_Args>(__args)...);\
    \ }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nIn file\
    \ included from /usr/include/c++/9/functional:54,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmpsiah8o9_.cpp:2:\n/usr/include/c++/9/tuple:1027:19:\
    \ note: candidate: \u2018template<class _U1, class _U2, typename std::enable_if<(_ConstructibleTuple<_U1,\
    \ _U2>() && _ImplicitlyConvertibleTuple<_U1, _U2>()), bool>::type <anonymous>\
    \ > constexpr std::tuple<_T1, _T2>::tuple(const std::pair<_U1, _U2>&)\u2019\n\
    \ 1027 |         constexpr tuple(const pair<_U1, _U2>& __in)\n      |        \
    \           ^~~~~\n/usr/include/c++/9/tuple:1027:19: note:   template argument\
    \ deduction/substitution failed:\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n\
    \                 from /usr/include/c++/9/bits/allocator.h:46,\n             \
    \    from /usr/include/c++/9/string:41,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpsiah8o9_.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4: note:\
    \   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::pair<_T1,\
    \ _T2>\u2019\n  146 |  { ::new((void *)__p) _Up(std::forward<_Args>(__args)...);\
    \ }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nIn file\
    \ included from /usr/include/c++/9/functional:54,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmpsiah8o9_.cpp:2:\n/usr/include/c++/9/tuple:1018:28:\
    \ note: candidate: \u2018template<class _U1, class _U2, typename std::enable_if<(_MoveConstructibleTuple<_U1,\
    \ _U2>() && (! _ImplicitlyMoveConvertibleTuple<_U1, _U2>())), bool>::type <anonymous>\
    \ > constexpr std::tuple<_T1, _T2>::tuple(std::tuple<_U1, _U2>&&)\u2019\n 1018\
    \ |         explicit constexpr tuple(tuple<_U1, _U2>&& __in)\n      |        \
    \                    ^~~~~\n/usr/include/c++/9/tuple:1018:28: note:   template\
    \ argument deduction/substitution failed:\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n\
    \                 from /usr/include/c++/9/bits/allocator.h:46,\n             \
    \    from /usr/include/c++/9/string:41,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpsiah8o9_.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4: note:\
    \   \u2018std::vector<long int>\u2019 is not derived from \u2018std::tuple<_T1,\
    \ _T2>\u2019\n  146 |  { ::new((void *)__p) _Up(std::forward<_Args>(__args)...);\
    \ }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nIn file\
    \ included from /usr/include/c++/9/functional:54,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmpsiah8o9_.cpp:2:\n/usr/include/c++/9/tuple:1009:19:\
    \ note: candidate: \u2018template<class _U1, class _U2, typename std::enable_if<(_MoveConstructibleTuple<_U1,\
    \ _U2>() && _ImplicitlyMoveConvertibleTuple<_U1, _U2>()), bool>::type <anonymous>\
    \ > constexpr std::tuple<_T1, _T2>::tuple(std::tuple<_U1, _U2>&&)\u2019\n 1009\
    \ |         constexpr tuple(tuple<_U1, _U2>&& __in)\n      |                 \
    \  ^~~~~\n/usr/include/c++/9/tuple:1009:19: note:   template argument deduction/substitution\
    \ failed:\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n\
    \                 from /usr/include/c++/9/bits/allocator.h:46,\n             \
    \    from /usr/include/c++/9/string:41,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpsiah8o9_.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4: note:\
    \   \u2018std::vector<long int>\u2019 is not derived from \u2018std::tuple<_T1,\
    \ _T2>\u2019\n  146 |  { ::new((void *)__p) _Up(std::forward<_Args>(__args)...);\
    \ }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nIn file\
    \ included from /usr/include/c++/9/functional:54,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmpsiah8o9_.cpp:2:\n/usr/include/c++/9/tuple:1000:28:\
    \ note: candidate: \u2018template<class _U1, class _U2, typename std::enable_if<(_ConstructibleTuple<_U1,\
    \ _U2>() && (! _ImplicitlyConvertibleTuple<_U1, _U2>())), bool>::type <anonymous>\
    \ > constexpr std::tuple<_T1, _T2>::tuple(const std::tuple<_U1, _U2>&)\u2019\n\
    \ 1000 |         explicit constexpr tuple(const tuple<_U1, _U2>& __in)\n     \
    \ |                            ^~~~~\n/usr/include/c++/9/tuple:1000:28: note:\
    \   template argument deduction/substitution failed:\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n\
    \                 from /usr/include/c++/9/bits/allocator.h:46,\n             \
    \    from /usr/include/c++/9/string:41,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpsiah8o9_.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4: note:\
    \   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::tuple<_T1,\
    \ _T2>\u2019\n  146 |  { ::new((void *)__p) _Up(std::forward<_Args>(__args)...);\
    \ }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nIn file\
    \ included from /usr/include/c++/9/functional:54,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmpsiah8o9_.cpp:2:\n/usr/include/c++/9/tuple:991:19:\
    \ note: candidate: \u2018template<class _U1, class _U2, typename std::enable_if<(_ConstructibleTuple<_U1,\
    \ _U2>() && _ImplicitlyConvertibleTuple<_U1, _U2>()), bool>::type <anonymous>\
    \ > constexpr std::tuple<_T1, _T2>::tuple(const std::tuple<_U1, _U2>&)\u2019\n\
    \  991 |         constexpr tuple(const tuple<_U1, _U2>& __in)\n      |       \
    \            ^~~~~\n/usr/include/c++/9/tuple:991:19: note:   template argument\
    \ deduction/substitution failed:\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n\
    \                 from /usr/include/c++/9/bits/allocator.h:46,\n             \
    \    from /usr/include/c++/9/string:41,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpsiah8o9_.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4: note:\
    \   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::tuple<_T1,\
    \ _T2>\u2019\n  146 |  { ::new((void *)__p) _Up(std::forward<_Args>(__args)...);\
    \ }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nIn file\
    \ included from /usr/include/c++/9/functional:54,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmpsiah8o9_.cpp:2:\n/usr/include/c++/9/tuple:983:17:\
    \ note: candidate: \u2018constexpr std::tuple<_T1, _T2>::tuple(std::tuple<_T1,\
    \ _T2>&&) [with _T1 = long int; _T2 = long int]\u2019\n  983 |       constexpr\
    \ tuple(tuple&&) = default;\n      |                 ^~~~~\n/usr/include/c++/9/tuple:983:17:\
    \ note:   candidate expects 1 argument, 2 provided\n/usr/include/c++/9/tuple:981:17:\
    \ note: candidate: \u2018constexpr std::tuple<_T1, _T2>::tuple(const std::tuple<_T1,\
    \ _T2>&) [with _T1 = long int; _T2 = long int]\u2019\n  981 |       constexpr\
    \ tuple(const tuple&) = default;\n      |                 ^~~~~\n/usr/include/c++/9/tuple:981:17:\
    \ note:   candidate expects 1 argument, 2 provided\n/usr/include/c++/9/tuple:978:28:\
    \ note: candidate: \u2018template<class _U1, class _U2, typename std::enable_if<((_MoveConstructibleTuple<_U1,\
    \ _U2>() && (! _ImplicitlyMoveConvertibleTuple<_U1, _U2>())) && (! std::is_same<typename\
    \ std::remove_cv<typename std::remove_reference<_Tp>::type>::type, std::allocator_arg_t>::value)),\
    \ bool>::type <anonymous> > constexpr std::tuple<_T1, _T2>::tuple(_U1&&, _U2&&)\u2019\
    \n  978 |         explicit constexpr tuple(_U1&& __a1, _U2&& __a2)\n      |  \
    \                          ^~~~~\n/usr/include/c++/9/tuple:978:28: note:   template\
    \ argument deduction/substitution failed:\n/usr/include/c++/9/tuple:977:16: error:\
    \ no type named \u2018type\u2019 in \u2018struct std::enable_if<false, bool>\u2019\
    \n  977 |  bool>::type = false>\n      |                ^~~~~\n/usr/include/c++/9/tuple:968:19:\
    \ note: candidate: \u2018template<class _U1, class _U2, typename std::enable_if<((_MoveConstructibleTuple<_U1,\
    \ _U2>() && _ImplicitlyMoveConvertibleTuple<_U1, _U2>()) && (! std::is_same<typename\
    \ std::remove_cv<typename std::remove_reference<_Tp>::type>::type, std::allocator_arg_t>::value)),\
    \ bool>::type <anonymous> > constexpr std::tuple<_T1, _T2>::tuple(_U1&&, _U2&&)\u2019\
    \n  968 |         constexpr tuple(_U1&& __a1, _U2&& __a2)\n      |           \
    \        ^~~~~\n/usr/include/c++/9/tuple:968:19: note:   template argument deduction/substitution\
    \ failed:\n/usr/include/c++/9/tuple:967:16: error: no type named \u2018type\u2019\
    \ in \u2018struct std::enable_if<false, bool>\u2019\n  967 |  bool>::type = true>\n\
    \      |                ^~~~\n/usr/include/c++/9/tuple:954:28: note: candidate:\
    \ \u2018template<class _Dummy, typename std::enable_if<(std::_TC<std::is_same<_Dummy,\
    \ void>::value, long int, long int>::_ConstructibleTuple<long int, long int>()\
    \ && (! std::_TC<std::is_same<_Dummy, void>::value, long int, long int>::_ImplicitlyConvertibleTuple<long\
    \ int, long int>())), bool>::type <anonymous> > constexpr std::tuple<_T1, _T2>::tuple(const\
    \ _T1&, const _T2&)\u2019\n  954 |         explicit constexpr tuple(const _T1&\
    \ __a1, const _T2& __a2)\n      |                            ^~~~~\n/usr/include/c++/9/tuple:954:28:\
    \ note:   template argument deduction/substitution failed:\n/usr/include/c++/9/tuple:953:16:\
    \ error: no type named \u2018type\u2019 in \u2018struct std::enable_if<false,\
    \ bool>\u2019\n  953 |  bool>::type = false>\n      |                ^~~~~\n/usr/include/c++/9/tuple:945:19:\
    \ note: candidate: \u2018template<class _Dummy, typename std::enable_if<(std::_TC<std::is_same<_Dummy,\
    \ void>::value, long int, long int>::_ConstructibleTuple<long int, long int>()\
    \ && std::_TC<std::is_same<_Dummy, void>::value, long int, long int>::_ImplicitlyConvertibleTuple<long\
    \ int, long int>()), bool>::type <anonymous> > constexpr std::tuple<_T1, _T2>::tuple(const\
    \ _T1&, const _T2&)\u2019\n  945 |         constexpr tuple(const _T1& __a1, const\
    \ _T2& __a2)\n      |                   ^~~~~\n/usr/include/c++/9/tuple:945:19:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n              \
    \   from /usr/include/c++/9/bits/allocator.h:46,\n                 from /usr/include/c++/9/string:41,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpsiah8o9_.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4:\
    \ note:   cannot convert \u2018std::forward<std::vector<long int>&>((* & __args#0))\u2019\
    \ (type \u2018std::vector<long int>\u2019) to type \u2018const long int&\u2019\
    \n  146 |  { ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }\n     \
    \ |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nIn file included\
    \ from /usr/include/c++/9/functional:54,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmpsiah8o9_.cpp:2:\n/usr/include/c++/9/tuple:931:21:\
    \ note: candidate: \u2018template<class _U1, class _U2, typename std::enable_if<std::__and_<std::is_default_constructible<_Tp>,\
    \ std::is_default_constructible<_Dp>, std::__not_<std::__and_<std::__is_implicitly_default_constructible<_U1>,\
    \ std::__is_implicitly_default_constructible<_U2> > > >::value, bool>::type <anonymous>\
    \ > constexpr std::tuple<_T1, _T2>::tuple()\u2019\n  931 |  explicit constexpr\
    \ tuple()\n      |                     ^~~~~\n/usr/include/c++/9/tuple:931:21:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n              \
    \   from /usr/include/c++/9/bits/allocator.h:46,\n                 from /usr/include/c++/9/string:41,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpsiah8o9_.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4:\
    \ note:   candidate expects 0 arguments, 2 provided\n  146 |  { ::new((void *)__p)\
    \ _Up(std::forward<_Args>(__args)...); }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    In file included from /usr/include/c++/9/functional:54,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n                 from\
    \ /tmp/tmpsiah8o9_.cpp:2:\n/usr/include/c++/9/tuple:918:12: note: candidate: \u2018\
    template<class _U1, class _U2, typename std::enable_if<std::__and_<std::__is_implicitly_default_constructible<_U1>,\
    \ std::__is_implicitly_default_constructible<_U2> >::value, bool>::type <anonymous>\
    \ > constexpr std::tuple<_T1, _T2>::tuple()\u2019\n  918 |  constexpr tuple()\n\
    \      |            ^~~~~\n/usr/include/c++/9/tuple:918:12: note:   template argument\
    \ deduction/substitution failed:\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n\
    \                 from /usr/include/c++/9/bits/allocator.h:46,\n             \
    \    from /usr/include/c++/9/string:41,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpsiah8o9_.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4: note:\
    \   candidate expects 0 arguments, 2 provided\n  146 |  { ::new((void *)__p) _Up(std::forward<_Args>(__args)...);\
    \ }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    std::vector<std::tuple<long, long>> res;\n    long n = lst.size();\n\
    \    long m = lst[0].size();\n    long i = 0;\n    long j = 0;\n    long k = 0;\n\
    \    long l = 0;\n    long m1 = m;\n    long n1 = n;\n    long xx = x;\n    long\
    \ yy = x;\n    long zz = x;\n    long aa = x;\n    long bb = x;\n    long cc =\
    \ x;\n    long dd = x;\n    long ee = x;\n    long ff = x;\n    long gg = x;\n\
    \    long hh = x;\n    long ii = x;\n    long jj = x;\n    long kk = x;\n    long\
    \ ll = x;\n    long mm = x;\n    long nn = x;\n    long oo = x;\n    long pp =\
    \ x;\n    long qq = x;\n    long rr = x;\n    long ss = x;\n    long tt = x;\n\
    \    long uu = x;\n    long vv = x;\n    long ww = x;\n    long xx = x;\n    long\
    \ yy = x;\n    long zz = x;\n    long aa = x;\n    long bb = x;\n    long cc =\
    \ x;\n    long dd = x;\n    long ee = x;\n    long ff = x;\n    long gg = x;\n\
    \    long hh = x;\n    long ii = x;\n    long jj = x;\n    long kk = x;\n    long\
    \ ll = x;\n    long mm = x;\n    long nn = x;\n    long oo = x;\n    long pp =\
    \ x;\n    long qq = x;\n    long rr = x;\n    long ss = x;\n    long tt = x;\n\
    \    long uu = x;\n    long vv = x;\n    long ww = x;\n    long xx = x;\n    long\
    \ yy = x;\n    long zz = x;\n    long aa = x;\n    long bb = x;\n    long cc =\
    \ x;\n    long dd = x;\n    long ee = x;\n    long ff = x;\n    long gg = x;\n\
    \    long hh = x;\n    long ii = x;\n    long jj = x;\n    long kk = x;\n    long\
    \ ll = x;\n    long mm = x;\n    long nn = x;\n    long oo = x;\n    long pp =\
    \ x;\n    long qq = x;\n    long rr = x;\n    long ss = x;\n    long tt = x;\n\
    \    long uu = x;\n    long \n}\nint main() {\n    auto candidate = get_row;\n\
    \    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpp5rlfdu4.cpp: In function \u2018std::vector<std::tuple<long int,\
    \ long int> > get_row(std::vector<std::vector<long int> >, long int)\u2019:\n\
    /tmp/tmpp5rlfdu4.cpp:55:10: error: redeclaration of \u2018long int xx\u2019\n\
    \   55 |     long xx = x;\n      |          ^~\n/tmp/tmpp5rlfdu4.cpp:29:10: note:\
    \ \u2018long int xx\u2019 previously declared here\n   29 |     long xx = x;\n\
    \      |          ^~\n/tmp/tmpp5rlfdu4.cpp:56:10: error: redeclaration of \u2018\
    long int yy\u2019\n   56 |     long yy = x;\n      |          ^~\n/tmp/tmpp5rlfdu4.cpp:30:10:\
    \ note: \u2018long int yy\u2019 previously declared here\n   30 |     long yy\
    \ = x;\n      |          ^~\n/tmp/tmpp5rlfdu4.cpp:57:10: error: redeclaration\
    \ of \u2018long int zz\u2019\n   57 |     long zz = x;\n      |          ^~\n\
    /tmp/tmpp5rlfdu4.cpp:31:10: note: \u2018long int zz\u2019 previously declared\
    \ here\n   31 |     long zz = x;\n      |          ^~\n/tmp/tmpp5rlfdu4.cpp:58:10:\
    \ error: redeclaration of \u2018long int aa\u2019\n   58 |     long aa = x;\n\
    \      |          ^~\n/tmp/tmpp5rlfdu4.cpp:32:10: note: \u2018long int aa\u2019\
    \ previously declared here\n   32 |     long aa = x;\n      |          ^~\n/tmp/tmpp5rlfdu4.cpp:59:10:\
    \ error: redeclaration of \u2018long int bb\u2019\n   59 |     long bb = x;\n\
    \      |          ^~\n/tmp/tmpp5rlfdu4.cpp:33:10: note: \u2018long int bb\u2019\
    \ previously declared here\n   33 |     long bb = x;\n      |          ^~\n/tmp/tmpp5rlfdu4.cpp:60:10:\
    \ error: redeclaration of \u2018long int cc\u2019\n   60 |     long cc = x;\n\
    \      |          ^~\n/tmp/tmpp5rlfdu4.cpp:34:10: note: \u2018long int cc\u2019\
    \ previously declared here\n   34 |     long cc = x;\n      |          ^~\n/tmp/tmpp5rlfdu4.cpp:61:10:\
    \ error: redeclaration of \u2018long int dd\u2019\n   61 |     long dd = x;\n\
    \      |          ^~\n/tmp/tmpp5rlfdu4.cpp:35:10: note: \u2018long int dd\u2019\
    \ previously declared here\n   35 |     long dd = x;\n      |          ^~\n/tmp/tmpp5rlfdu4.cpp:62:10:\
    \ error: redeclaration of \u2018long int ee\u2019\n   62 |     long ee = x;\n\
    \      |          ^~\n/tmp/tmpp5rlfdu4.cpp:36:10: note: \u2018long int ee\u2019\
    \ previously declared here\n   36 |     long ee = x;\n      |          ^~\n/tmp/tmpp5rlfdu4.cpp:63:10:\
    \ error: redeclaration of \u2018long int ff\u2019\n   63 |     long ff = x;\n\
    \      |          ^~\n/tmp/tmpp5rlfdu4.cpp:37:10: note: \u2018long int ff\u2019\
    \ previously declared here\n   37 |     long ff = x;\n      |          ^~\n/tmp/tmpp5rlfdu4.cpp:64:10:\
    \ error: redeclaration of \u2018long int gg\u2019\n   64 |     long gg = x;\n\
    \      |          ^~\n/tmp/tmpp5rlfdu4.cpp:38:10: note: \u2018long int gg\u2019\
    \ previously declared here\n   38 |     long gg = x;\n      |          ^~\n/tmp/tmpp5rlfdu4.cpp:65:10:\
    \ error: redeclaration of \u2018long int hh\u2019\n   65 |     long hh = x;\n\
    \      |          ^~\n/tmp/tmpp5rlfdu4.cpp:39:10: note: \u2018long int hh\u2019\
    \ previously declared here\n   39 |     long hh = x;\n      |          ^~\n/tmp/tmpp5rlfdu4.cpp:66:10:\
    \ error: redeclaration of \u2018long int ii\u2019\n   66 |     long ii = x;\n\
    \      |          ^~\n/tmp/tmpp5rlfdu4.cpp:40:10: note: \u2018long int ii\u2019\
    \ previously declared here\n   40 |     long ii = x;\n      |          ^~\n/tmp/tmpp5rlfdu4.cpp:67:10:\
    \ error: redeclaration of \u2018long int jj\u2019\n   67 |     long jj = x;\n\
    \      |          ^~\n/tmp/tmpp5rlfdu4.cpp:41:10: note: \u2018long int jj\u2019\
    \ previously declared here\n   41 |     long jj = x;\n      |          ^~\n/tmp/tmpp5rlfdu4.cpp:68:10:\
    \ error: redeclaration of \u2018long int kk\u2019\n   68 |     long kk = x;\n\
    \      |          ^~\n/tmp/tmpp5rlfdu4.cpp:42:10: note: \u2018long int kk\u2019\
    \ previously declared here\n   42 |     long kk = x;\n      |          ^~\n/tmp/tmpp5rlfdu4.cpp:69:10:\
    \ error: redeclaration of \u2018long int ll\u2019\n   69 |     long ll = x;\n\
    \      |          ^~\n/tmp/tmpp5rlfdu4.cpp:43:10: note: \u2018long int ll\u2019\
    \ previously declared here\n   43 |     long ll = x;\n      |          ^~\n/tmp/tmpp5rlfdu4.cpp:70:10:\
    \ error: redeclaration of \u2018long int mm\u2019\n   70 |     long mm = x;\n\
    \      |          ^~\n/tmp/tmpp5rlfdu4.cpp:44:10: note: \u2018long int mm\u2019\
    \ previously declared here\n   44 |     long mm = x;\n      |          ^~\n/tmp/tmpp5rlfdu4.cpp:71:10:\
    \ error: redeclaration of \u2018long int nn\u2019\n   71 |     long nn = x;\n\
    \      |          ^~\n/tmp/tmpp5rlfdu4.cpp:45:10: note: \u2018long int nn\u2019\
    \ previously declared here\n   45 |     long nn = x;\n      |          ^~\n/tmp/tmpp5rlfdu4.cpp:72:10:\
    \ error: redeclaration of \u2018long int oo\u2019\n   72 |     long oo = x;\n\
    \      |          ^~\n/tmp/tmpp5rlfdu4.cpp:46:10: note: \u2018long int oo\u2019\
    \ previously declared here\n   46 |     long oo = x;\n      |          ^~\n/tmp/tmpp5rlfdu4.cpp:73:10:\
    \ error: redeclaration of \u2018long int pp\u2019\n   73 |     long pp = x;\n\
    \      |          ^~\n/tmp/tmpp5rlfdu4.cpp:47:10: note: \u2018long int pp\u2019\
    \ previously declared here\n   47 |     long pp = x;\n      |          ^~\n/tmp/tmpp5rlfdu4.cpp:74:10:\
    \ error: redeclaration of \u2018long int qq\u2019\n   74 |     long qq = x;\n\
    \      |          ^~\n/tmp/tmpp5rlfdu4.cpp:48:10: note: \u2018long int qq\u2019\
    \ previously declared here\n   48 |     long qq = x;\n      |          ^~\n/tmp/tmpp5rlfdu4.cpp:75:10:\
    \ error: redeclaration of \u2018long int rr\u2019\n   75 |     long rr = x;\n\
    \      |          ^~\n/tmp/tmpp5rlfdu4.cpp:49:10: note: \u2018long int rr\u2019\
    \ previously declared here\n   49 |     long rr = x;\n      |          ^~\n/tmp/tmpp5rlfdu4.cpp:76:10:\
    \ error: redeclaration of \u2018long int ss\u2019\n   76 |     long ss = x;\n\
    \      |          ^~\n/tmp/tmpp5rlfdu4.cpp:50:10: note: \u2018long int ss\u2019\
    \ previously declared here\n   50 |     long ss = x;\n      |          ^~\n/tmp/tmpp5rlfdu4.cpp:77:10:\
    \ error: redeclaration of \u2018long int tt\u2019\n   77 |     long tt = x;\n\
    \      |          ^~\n/tmp/tmpp5rlfdu4.cpp:51:10: note: \u2018long int tt\u2019\
    \ previously declared here\n   51 |     long tt = x;\n      |          ^~\n/tmp/tmpp5rlfdu4.cpp:78:10:\
    \ error: redeclaration of \u2018long int uu\u2019\n   78 |     long uu = x;\n\
    \      |          ^~\n/tmp/tmpp5rlfdu4.cpp:52:10: note: \u2018long int uu\u2019\
    \ previously declared here\n   52 |     long uu = x;\n      |          ^~\n/tmp/tmpp5rlfdu4.cpp:79:10:\
    \ error: redeclaration of \u2018long int vv\u2019\n   79 |     long vv = x;\n\
    \      |          ^~\n/tmp/tmpp5rlfdu4.cpp:53:10: note: \u2018long int vv\u2019\
    \ previously declared here\n   53 |     long vv = x;\n      |          ^~\n/tmp/tmpp5rlfdu4.cpp:80:10:\
    \ error: redeclaration of \u2018long int ww\u2019\n   80 |     long ww = x;\n\
    \      |          ^~\n/tmp/tmpp5rlfdu4.cpp:54:10: note: \u2018long int ww\u2019\
    \ previously declared here\n   54 |     long ww = x;\n      |          ^~\n/tmp/tmpp5rlfdu4.cpp:81:10:\
    \ error: redeclaration of \u2018long int xx\u2019\n   81 |     long xx = x;\n\
    \      |          ^~\n/tmp/tmpp5rlfdu4.cpp:29:10: note: \u2018long int xx\u2019\
    \ previously declared here\n   29 |     long xx = x;\n      |          ^~\n/tmp/tmpp5rlfdu4.cpp:82:10:\
    \ error: redeclaration of \u2018long int yy\u2019\n   82 |     long yy = x;\n\
    \      |          ^~\n/tmp/tmpp5rlfdu4.cpp:30:10: note: \u2018long int yy\u2019\
    \ previously declared here\n   30 |     long yy = x;\n      |          ^~\n/tmp/tmpp5rlfdu4.cpp:83:10:\
    \ error: redeclaration of \u2018long int zz\u2019\n   83 |     long zz = x;\n\
    \      |          ^~\n/tmp/tmpp5rlfdu4.cpp:31:10: note: \u2018long int zz\u2019\
    \ previously declared here\n   31 |     long zz = x;\n      |          ^~\n/tmp/tmpp5rlfdu4.cpp:84:10:\
    \ error: redeclaration of \u2018long int aa\u2019\n   84 |     long aa = x;\n\
    \      |          ^~\n/tmp/tmpp5rlfdu4.cpp:32:10: note: \u2018long int aa\u2019\
    \ previously declared here\n   32 |     long aa = x;\n      |          ^~\n/tmp/tmpp5rlfdu4.cpp:85:10:\
    \ error: redeclaration of \u2018long int bb\u2019\n   85 |     long bb = x;\n\
    \      |          ^~\n/tmp/tmpp5rlfdu4.cpp:33:10: note: \u2018long int bb\u2019\
    \ previously declared here\n   33 |     long bb = x;\n      |          ^~\n/tmp/tmpp5rlfdu4.cpp:86:10:\
    \ error: redeclaration of \u2018long int cc\u2019\n   86 |     long cc = x;\n\
    \      |          ^~\n/tmp/tmpp5rlfdu4.cpp:34:10: note: \u2018long int cc\u2019\
    \ previously declared here\n   34 |     long cc = x;\n      |          ^~\n/tmp/tmpp5rlfdu4.cpp:87:10:\
    \ error: redeclaration of \u2018long int dd\u2019\n   87 |     long dd = x;\n\
    \      |          ^~\n/tmp/tmpp5rlfdu4.cpp:35:10: note: \u2018long int dd\u2019\
    \ previously declared here\n   35 |     long dd = x;\n      |          ^~\n/tmp/tmpp5rlfdu4.cpp:88:10:\
    \ error: redeclaration of \u2018long int ee\u2019\n   88 |     long ee = x;\n\
    \      |          ^~\n/tmp/tmpp5rlfdu4.cpp:36:10: note: \u2018long int ee\u2019\
    \ previously declared here\n   36 |     long ee = x;\n      |          ^~\n/tmp/tmpp5rlfdu4.cpp:89:10:\
    \ error: redeclaration of \u2018long int ff\u2019\n   89 |     long ff = x;\n\
    \      |          ^~\n/tmp/tmpp5rlfdu4.cpp:37:10: note: \u2018long int ff\u2019\
    \ previously declared here\n   37 |     long ff = x;\n      |          ^~\n/tmp/tmpp5rlfdu4.cpp:90:10:\
    \ error: redeclaration of \u2018long int gg\u2019\n   90 |     long gg = x;\n\
    \      |          ^~\n/tmp/tmpp5rlfdu4.cpp:38:10: note: \u2018long int gg\u2019\
    \ previously declared here\n   38 |     long gg = x;\n      |          ^~\n/tmp/tmpp5rlfdu4.cpp:91:10:\
    \ error: redeclaration of \u2018long int hh\u2019\n   91 |     long hh = x;\n\
    \      |          ^~\n/tmp/tmpp5rlfdu4.cpp:39:10: note: \u2018long int hh\u2019\
    \ previously declared here\n   39 |     long hh = x;\n      |          ^~\n/tmp/tmpp5rlfdu4.cpp:92:10:\
    \ error: redeclaration of \u2018long int ii\u2019\n   92 |     long ii = x;\n\
    \      |          ^~\n/tmp/tmpp5rlfdu4.cpp:40:10: note: \u2018long int ii\u2019\
    \ previously declared here\n   40 |     long ii = x;\n      |          ^~\n/tmp/tmpp5rlfdu4.cpp:93:10:\
    \ error: redeclaration of \u2018long int jj\u2019\n   93 |     long jj = x;\n\
    \      |          ^~\n/tmp/tmpp5rlfdu4.cpp:41:10: note: \u2018long int jj\u2019\
    \ previously declared here\n   41 |     long jj = x;\n      |          ^~\n/tmp/tmpp5rlfdu4.cpp:94:10:\
    \ error: redeclaration of \u2018long int kk\u2019\n   94 |     long kk = x;\n\
    \      |          ^~\n/tmp/tmpp5rlfdu4.cpp:42:10: note: \u2018long int kk\u2019\
    \ previously declared here\n   42 |     long kk = x;\n      |          ^~\n/tmp/tmpp5rlfdu4.cpp:95:10:\
    \ error: redeclaration of \u2018long int ll\u2019\n   95 |     long ll = x;\n\
    \      |          ^~\n/tmp/tmpp5rlfdu4.cpp:43:10: note: \u2018long int ll\u2019\
    \ previously declared here\n   43 |     long ll = x;\n      |          ^~\n/tmp/tmpp5rlfdu4.cpp:96:10:\
    \ error: redeclaration of \u2018long int mm\u2019\n   96 |     long mm = x;\n\
    \      |          ^~\n/tmp/tmpp5rlfdu4.cpp:44:10: note: \u2018long int mm\u2019\
    \ previously declared here\n   44 |     long mm = x;\n      |          ^~\n/tmp/tmpp5rlfdu4.cpp:97:10:\
    \ error: redeclaration of \u2018long int nn\u2019\n   97 |     long nn = x;\n\
    \      |          ^~\n/tmp/tmpp5rlfdu4.cpp:45:10: note: \u2018long int nn\u2019\
    \ previously declared here\n   45 |     long nn = x;\n      |          ^~\n/tmp/tmpp5rlfdu4.cpp:98:10:\
    \ error: redeclaration of \u2018long int oo\u2019\n   98 |     long oo = x;\n\
    \      |          ^~\n/tmp/tmpp5rlfdu4.cpp:46:10: note: \u2018long int oo\u2019\
    \ previously declared here\n   46 |     long oo = x;\n      |          ^~\n/tmp/tmpp5rlfdu4.cpp:99:10:\
    \ error: redeclaration of \u2018long int pp\u2019\n   99 |     long pp = x;\n\
    \      |          ^~\n/tmp/tmpp5rlfdu4.cpp:47:10: note: \u2018long int pp\u2019\
    \ previously declared here\n   47 |     long pp = x;\n      |          ^~\n/tmp/tmpp5rlfdu4.cpp:100:10:\
    \ error: redeclaration of \u2018long int qq\u2019\n  100 |     long qq = x;\n\
    \      |          ^~\n/tmp/tmpp5rlfdu4.cpp:48:10: note: \u2018long int qq\u2019\
    \ previously declared here\n   48 |     long qq = x;\n      |          ^~\n/tmp/tmpp5rlfdu4.cpp:101:10:\
    \ error: redeclaration of \u2018long int rr\u2019\n  101 |     long rr = x;\n\
    \      |          ^~\n/tmp/tmpp5rlfdu4.cpp:49:10: note: \u2018long int rr\u2019\
    \ previously declared here\n   49 |     long rr = x;\n      |          ^~\n/tmp/tmpp5rlfdu4.cpp:102:10:\
    \ error: redeclaration of \u2018long int ss\u2019\n  102 |     long ss = x;\n\
    \      |          ^~\n/tmp/tmpp5rlfdu4.cpp:50:10: note: \u2018long int ss\u2019\
    \ previously declared here\n   50 |     long ss = x;\n      |          ^~\n/tmp/tmpp5rlfdu4.cpp:103:10:\
    \ error: redeclaration of \u2018long int tt\u2019\n  103 |     long tt = x;\n\
    \      |          ^~\n/tmp/tmpp5rlfdu4.cpp:51:10: note: \u2018long int tt\u2019\
    \ previously declared here\n   51 |     long tt = x;\n      |          ^~\n/tmp/tmpp5rlfdu4.cpp:104:10:\
    \ error: redeclaration of \u2018long int uu\u2019\n  104 |     long uu = x;\n\
    \      |          ^~\n/tmp/tmpp5rlfdu4.cpp:52:10: note: \u2018long int uu\u2019\
    \ previously declared here\n   52 |     long uu = x;\n      |          ^~\n/tmp/tmpp5rlfdu4.cpp:106:1:\
    \ error: expected unqualified-id before \u2018}\u2019 token\n  106 | }\n     \
    \ | ^\n/tmp/tmpp5rlfdu4.cpp:106:1: warning: no return statement in function returning\
    \ non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    std::vector<std::tuple<long, long>> res;\n    std::vector<std::tuple<long,\
    \ long>> temp;\n    long n = lst.size();\n    long m = lst[0].size();\n    long\
    \ count = 0;\n    for (long i = 0; i < n; i++) {\n        long j = i;\n      \
    \  while (j > 0 && lst[j][j - 1] == lst[j][j]) {\n            j--;\n        }\n\
    \        if (j == -1) {\n            temp.push_back(std::make_tuple(i, 0));\n\
    \            count++;\n        } else {\n            temp.push_back(std::make_tuple(i,\
    \ j));\n            count++;\n        }\n    }\n    std::sort(temp.begin(), temp.end(),\
    \ [](std::tuple<long, long> a, std::tuple<long, long> b) {\n        return std::get<0>(a)\
    \ < std::get<0>(b);\n    });\n    for (long i = 0; i < count; i++) {\n       \
    \ res.push_back(temp[i]);\n    }\n    std::sort(res.begin(), res.end(), [](std::tuple<long,\
    \ long> a, std::tuple<long, long> b) {\n        return std::get<1>(a) > std::get<1>(b);\n\
    \    });\n    return res;\n}\nint main() {\n    auto candidate = get_row;\n  \
    \  assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "tmplwk8vaob: /tmp/tmplwk8vaob.cpp:51: int main(): Assertion `candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    std::vector<std::tuple<long, long>> res;\n    std::vector<long>\
    \ row;\n    std::vector<long> col;\n    std::vector<long> rowCol;\n    std::vector<long>\
    \ rowColCol;\n    std::vector<long> rowColColCol;\n    std::vector<long> rowColColColCol;\n\
    \    std::vector<long> rowColColColColCol;\n    std::vector<long> rowColColColColColCol;\n\
    \    std::vector<long> rowColColColColColColCol;\n    std::vector<long> rowColColColColColColColCol;\n\
    \    std::vector<long> rowColColColColColColColColCol;\n    std::vector<long>\
    \ rowColColColColColColColColColCol;\n    std::vector<long> rowColColColColColColColColColColCol;\n\
    \    std::vector<long> rowColColColColColColColColColColColCol;\n    std::vector<long>\
    \ rowColColColColColColColColColColColColCol;\n    std::vector<long> rowColColColColColColColColColColColColColCol;\n\
    \    std::vector<long> rowColColColColColColColColColColColColColColCol;\n   \
    \ std::vector<long> rowColColColColColColColColColColColColColColCol;\n    std::vector<long>\
    \ rowColColColColColColColColColColColColColColColCol;\n    std::vector<long>\
    \ rowColColColColColColColColColColColColColColColColCol;\n    std::vector<long>\
    \ rowColColColColColColColColColColColColColColColColColCol;\n    std::vector<long>\
    \ rowColColColColColColColColColColColColColColColColColCol;\n    std::vector<long>\
    \ rowColColColColColColColColColColColColColColColColColCol;\n    std::vector<long>\
    \ rowColColColColColColColColColColColColColColColColColColCol;\n    std::vector<long>\
    \ rowColColColColColColColColColColColColColColColColColColColColCol;\n    std::vector<long>\
    \ rowColColColColColColColColColColColColColColColColColColColColColCol;\n   \
    \ std::vector<long> rowColColColColColColColColColColColColColColColColColColColColCol;\n\
    \    std::vector<long> rowColColCol\n}\nint main() {\n    auto candidate = get_row;\n\
    \    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpu3gy4rsv.cpp: In function \u2018std::vector<std::tuple<long int,\
    \ long int> > get_row(std::vector<std::vector<long int> >, long int)\u2019:\n\
    /tmp/tmpu3gy4rsv.cpp:38:23: error: redeclaration of \u2018std::vector<long int>\
    \ rowColColColColColColColColColColColColColColCol\u2019\n   38 |     std::vector<long>\
    \ rowColColColColColColColColColColColColColColCol;\n      |                 \
    \      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpu3gy4rsv.cpp:37:23:\
    \ note: \u2018std::vector<long int> rowColColColColColColColColColColColColColColCol\u2019\
    \ previously declared here\n   37 |     std::vector<long> rowColColColColColColColColColColColColColColCol;\n\
    \      |                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpu3gy4rsv.cpp:42:23: error: redeclaration of \u2018std::vector<long int>\
    \ rowColColColColColColColColColColColColColColColColColCol\u2019\n   42 |   \
    \  std::vector<long> rowColColColColColColColColColColColColColColColColColCol;\n\
    \      |                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpu3gy4rsv.cpp:41:23: note: \u2018std::vector<long int> rowColColColColColColColColColColColColColColColColColCol\u2019\
    \ previously declared here\n   41 |     std::vector<long> rowColColColColColColColColColColColColColColColColColCol;\n\
    \      |                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpu3gy4rsv.cpp:43:23: error: redeclaration of \u2018std::vector<long int>\
    \ rowColColColColColColColColColColColColColColColColColCol\u2019\n   43 |   \
    \  std::vector<long> rowColColColColColColColColColColColColColColColColColCol;\n\
    \      |                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpu3gy4rsv.cpp:41:23: note: \u2018std::vector<long int> rowColColColColColColColColColColColColColColColColColCol\u2019\
    \ previously declared here\n   41 |     std::vector<long> rowColColColColColColColColColColColColColColColColColCol;\n\
    \      |                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpu3gy4rsv.cpp:47:23: error: redeclaration of \u2018std::vector<long int>\
    \ rowColColColColColColColColColColColColColColColColColColColColCol\u2019\n \
    \  47 |     std::vector<long> rowColColColColColColColColColColColColColColColColColColColColCol;\n\
    \      |                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpu3gy4rsv.cpp:45:23: note: \u2018std::vector<long int> rowColColColColColColColColColColColColColColColColColColColColCol\u2019\
    \ previously declared here\n   45 |     std::vector<long> rowColColColColColColColColColColColColColColColColColColColColCol;\n\
    \      |                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpu3gy4rsv.cpp:49:1: error: expected initializer before \u2018}\u2019 token\n\
    \   49 | }\n      | ^\n/tmp/tmpu3gy4rsv.cpp:49:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    std::vector<std::tuple<long, long>> res;\n    std::vector<long>\
    \ row;\n    std::vector<long> col;\n    long row_index = 0;\n    long col_index\
    \ = 0;\n    for (auto &row : lst) {\n        row.clear();\n        col.clear();\n\
    \        for (auto &elem : row) {\n            row.push_back(elem);\n        \
    \    col.push_back(elem);\n        }\n        std::sort(row.begin(), row.end());\n\
    \        std::sort(col.begin(), col.end());\n        if (row_index == 0)\n   \
    \         std::sort(row.begin(), row.end());\n        if (col_index == 0)\n  \
    \          std::sort(col.begin(), col.end());\n        if (row_index == col.size()\
    \ && row_index < row.size() && col_index == row.size()) {\n            std::sort(row.begin(),\
    \ row.end());\n            std::sort(col.begin(), col.end());\n        }\n   \
    \     if (row_index == row.size() && col_index == col.size()) {\n            std::sort(row.begin(),\
    \ row.end());\n            std::sort(col.begin(), col.end());\n        }\n   \
    \     if (row_index == row.size() && col_index < row.size()) {\n            std::sort(row.begin(),\
    \ row.end());\n            std::sort(col.begin(), col.end());\n        }\n   \
    \     if (row_index < row.size() && col_index == row.size()) {\n            std::sort(row.begin(),\
    \ row.end());\n            std::sort(col.begin(), col.end());\n        }\n   \
    \     if (row_index < row.size() && col_index < row.size()) {\n            std::sort(row.begin(),\
    \ row.end());\n            std::sort(col.begin(), col.end());\n        }\n   \
    \     if (row_index == row.size() && col_index == row.size()) {\n            std::sort(row.begin(),\
    \ row.end());\n            std::sort(col.begin(), col.end());\n        }\n   \
    \     if (row_index < row.size() && col_index < row.size()) {\n            std::sort(row.begin(),\
    \ row.end());\n            std::sort(col.begin(), col.end());\n        }\n   \
    \     if (row_index == row.size() && col_index == row.size()) {\n            std::sort(row.begin(),\
    \ row.end());\n            std::sort(col.begin(), col.end());\n        }\n   \
    \     if (row_index < row.size() && col_index == row.size()) {\n            std::sort(row.begin(),\
    \ row.end());\n            std::sort(col.begin(), col.end());\n        }\n   \
    \     if (row_index == row.size() && col_index < row.size()) {\n            std::sort(row.begin(),\
    \ row.end());\n            std::sort(col.begin(), col.end());\n        }\n   \
    \     if (row_index < row.size() && col_index == row.size()) {\n            std::sort(row.begin(),\
    \ \n}\nint main() {\n    auto candidate = get_row;\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzzr2nv5y.cpp: In function \u2018std::vector<std::tuple<long int,\
    \ long int> > get_row(std::vector<std::vector<long int> >, long int)\u2019:\n\
    /tmp/tmpzzr2nv5y.cpp:80:1: error: expected primary-expression before \u2018}\u2019\
    \ token\n   80 | }\n      | ^\n/tmp/tmpzzr2nv5y.cpp:81:12: error: a function-definition\
    \ is not allowed here before \u2018{\u2019 token\n   81 | int main() {\n     \
    \ |            ^\n/tmp/tmpzzr2nv5y.cpp:89:1: error: expected \u2018}\u2019 at\
    \ end of input\n   89 | }\n      | ^\n/tmp/tmpzzr2nv5y.cpp:25:27: note: to match\
    \ this \u2018{\u2019\n   25 |     for (auto &row : lst) {\n      |           \
    \                ^\n/tmp/tmpzzr2nv5y.cpp:89:1: error: expected \u2018}\u2019 at\
    \ end of input\n   89 | }\n      | ^\n/tmp/tmpzzr2nv5y.cpp:19:89: note: to match\
    \ this \u2018{\u2019\n   19 | std::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n      |                                                    \
    \                                     ^\n/tmp/tmpzzr2nv5y.cpp:89:1: warning: no\
    \ return statement in function returning non-void [-Wreturn-type]\n   89 | }\n\
    \      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    std::vector<std::tuple<long, long>> res;\n    for(auto &row\
    \ : lst) {\n        for(auto &elem : row) {\n            if(elem == x) {\n   \
    \             res.push_back(std::make_tuple(row.size() - 1, row.size() - 1));\n\
    \            }\n        }\n    }\n    std::sort(res.begin(), res.end(), [](const\
    \ std::tuple<long, long> &a, const std::tuple<long, long> &b) {\n        return\
    \ std::get<0>(a) < std::get<0>(b);\n    });\n    std::sort(res.begin(), res.end(),\
    \ [](const std::tuple<long, long> &a, const std::tuple<long, long> &b) {\n   \
    \     return std::get<1>(a) < std::get<1>(b);\n    });\n    return res;\n}\nint\
    \ main() {\n    auto candidate = get_row;\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "tmprnywyctg: /tmp/tmprnywyctg.cpp:38: int main(): Assertion `candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    std::vector<std::tuple<long, long>> res;\n    for(auto &row\
    \ : lst) {\n        for(auto &el : row) {\n            if(el == x) {\n       \
    \         res.emplace_back(std::make_tuple(row.size() - 1, row.size() - 1));\n\
    \            }\n        }\n    }\n    std::sort(res.begin(), res.end(), [](std::tuple<long,\
    \ long> a, std::tuple<long, long> b) {\n        return std::get<0>(a) < std::get<0>(b);\n\
    \    });\n    std::sort(res.begin(), res.end(), [](std::tuple<long, long> a, std::tuple<long,\
    \ long> b) {\n        return std::get<1>(a) < std::get<1>(b);\n    });\n    return\
    \ res;\n}\nint main() {\n    auto candidate = get_row;\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "tmpr3r_p3ft: /tmp/tmpr3r_p3ft.cpp:38: int main(): Assertion `candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    std::vector<std::tuple<long, long>> res;\n    long n = lst.size();\n\
    \    long m = lst[0].size();\n    long cnt = 0;\n    for (long i = 0; i < n; i++)\
    \ {\n        long cnt2 = 0;\n        for (long j = 0; j < m; j++) {\n        \
    \    if (lst[i][j] == x) {\n                res.push_back({i, j});\n         \
    \       cnt2++;\n            }\n        }\n        if (cnt2 == m) {\n        \
    \    cnt++;\n        }\n    }\n    if (cnt == 0) {\n        res.clear();\n   \
    \ }\n    std::sort(res.begin(), res.end(), [](auto a, auto b) {\n        return\
    \ std::get<0>(a) < std::get<0>(b);\n    });\n    for (auto &it : res) {\n    \
    \    std::sort(std::get<1>(it), res.end(), [](auto a, auto b) {\n            return\
    \ std::get<1>(a) < std::get<1>(b);\n        });\n    }\n    return res;\n}\nint\
    \ main() {\n    auto candidate = get_row;\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp891qcgrm.cpp: In function \u2018std::vector<std::tuple<long int,\
    \ long int> > get_row(std::vector<std::vector<long int> >, long int)\u2019:\n\
    /tmp/tmp891qcgrm.cpp:45:10: error: no matching function for call to \u2018sort(std::__tuple_element_t<1,\
    \ std::tuple<long int, long int> >&, std::vector<std::tuple<long int, long int>\
    \ >::iterator, get_row(std::vector<std::vector<long int> >, long int)::<lambda(auto:3,\
    \ auto:4)>)\u2019\n   45 |         });\n      |          ^\nIn file included from\
    \ /usr/include/c++/9/algorithm:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp891qcgrm.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:4863:5:\
    \ note: candidate: \u2018template<class _RAIter> void std::sort(_RAIter, _RAIter)\u2019\
    \n 4863 |     sort(_RandomAccessIterator __first, _RandomAccessIterator __last)\n\
    \      |     ^~~~\n/usr/include/c++/9/bits/stl_algo.h:4863:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmp891qcgrm.cpp:45:10: note: \
    \  deduced conflicting types for parameter \u2018_RAIter\u2019 (\u2018long int\u2019\
    \ and \u2018__gnu_cxx::__normal_iterator<std::tuple<long int, long int>*, std::vector<std::tuple<long\
    \ int, long int> > >\u2019)\n   45 |         });\n      |          ^\nIn file\
    \ included from /usr/include/c++/9/algorithm:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp891qcgrm.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:4893:5:\
    \ note: candidate: \u2018template<class _RAIter, class _Compare> void std::sort(_RAIter,\
    \ _RAIter, _Compare)\u2019\n 4893 |     sort(_RandomAccessIterator __first, _RandomAccessIterator\
    \ __last,\n      |     ^~~~\n/usr/include/c++/9/bits/stl_algo.h:4893:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmp891qcgrm.cpp:45:10:\
    \ note:   deduced conflicting types for parameter \u2018_RAIter\u2019 (\u2018\
    long int\u2019 and \u2018__gnu_cxx::__normal_iterator<std::tuple<long int, long\
    \ int>*, std::vector<std::tuple<long int, long int> > >\u2019)\n   45 |      \
    \   });\n      |          ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    std::vector<std::tuple<long, long>> res;\n    std::vector<long>\
    \ row;\n    std::vector<long> col;\n    for (auto &i : lst) {\n        row.push_back(i[0]);\n\
    \        col.push_back(i.size() - 1);\n    }\n    std::sort(row.begin(), row.end(),\
    \ [](long a, long b) { return a < b; });\n    std::sort(col.begin(), col.end(),\
    \ [](long a, long b) { return b < a; });\n    for (long i = 0; i < row.size();\
    \ i++) {\n        for (long j = 0; j < col.size(); j++) {\n            if (row[i]\
    \ == x && col[j] == x) {\n                res.push_back(std::make_tuple(i, j));\n\
    \            }\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = get_row;\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "tmpb9e7b47o: /tmp/tmpb9e7b47o.cpp:40: int main(): Assertion `candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    std::vector<std::tuple<long, long>> res;\n    long row =\
    \ 0;\n    long col = 0;\n    for (auto &row : lst) {\n        col = row.size()\
    \ - 1;\n        while (col >= 0 && row[col] == x) {\n            col--;\n    \
    \    }\n        if (col >= 0) {\n            res.emplace_back(std::make_tuple(row,\
    \ col));\n        }\n        row++;\n    }\n    std::sort(res.begin(), res.end(),\
    \ [](auto &a, auto &b) { return std::get<0>(a) < std::get<0>(b); });\n    std::sort(res.begin(),\
    \ res.end(), [](auto &a, auto &b) { return std::get<1>(a) < std::get<1>(b); });\n\
    \    return res;\n}\nint main() {\n    auto candidate = get_row;\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdcbm39f2.cpp: In function \u2018std::vector<std::tuple<long int,\
    \ long int> > get_row(std::vector<std::vector<long int> >, long int)\u2019:\n\
    /tmp/tmpdcbm39f2.cpp:31:12: error: no \u2018operator++(int)\u2019 declared for\
    \ postfix \u2018++\u2019 [-fpermissive]\n   31 |         row++;\n      |     \
    \    ~~~^~\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n\
    \                 from /usr/include/c++/9/bits/allocator.h:46,\n             \
    \    from /usr/include/c++/9/string:41,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpdcbm39f2.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h: In instantiation\
    \ of \u2018void __gnu_cxx::new_allocator<_Tp>::construct(_Up*, _Args&& ...) [with\
    \ _Up = std::tuple<long int, long int>; _Args = {std::tuple<std::vector<long int,\
    \ std::allocator<long int> >, long int>}; _Tp = std::tuple<long int, long int>]\u2019\
    :\n/usr/include/c++/9/bits/alloc_traits.h:483:4:   required from \u2018static\
    \ void std::allocator_traits<std::allocator<_CharT> >::construct(std::allocator_traits<std::allocator<_CharT>\
    \ >::allocator_type&, _Up*, _Args&& ...) [with _Up = std::tuple<long int, long\
    \ int>; _Args = {std::tuple<std::vector<long int, std::allocator<long int> >,\
    \ long int>}; _Tp = std::tuple<long int, long int>; std::allocator_traits<std::allocator<_CharT>\
    \ >::allocator_type = std::allocator<std::tuple<long int, long int> >]\u2019\n\
    /usr/include/c++/9/bits/vector.tcc:115:30:   required from \u2018void std::vector<_Tp,\
    \ _Alloc>::emplace_back(_Args&& ...) [with _Args = {std::tuple<std::vector<long\
    \ int, std::allocator<long int> >, long int>}; _Tp = std::tuple<long int, long\
    \ int>; _Alloc = std::allocator<std::tuple<long int, long int> >]\u2019\n/tmp/tmpdcbm39f2.cpp:29:55:\
    \   required from here\n/usr/include/c++/9/ext/new_allocator.h:146:4: error: no\
    \ matching function for call to \u2018std::tuple<long int, long int>::tuple(std::tuple<std::vector<long\
    \ int, std::allocator<long int> >, long int>)\u2019\n  146 |  { ::new((void *)__p)\
    \ _Up(std::forward<_Args>(__args)...); }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    In file included from /usr/include/c++/9/functional:54,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n                 from\
    \ /tmp/tmpdcbm39f2.cpp:2:\n/usr/include/c++/9/tuple:1199:18: note: candidate:\
    \ \u2018template<class _Alloc, class _U1, class _U2, typename std::enable_if<(_MoveConstructibleTuple<_U1,\
    \ _U2>() && (! _ImplicitlyMoveConvertibleTuple<_U1, _U2>())), bool>::type <anonymous>\
    \ > std::tuple<_T1, _T2>::tuple(std::allocator_arg_t, const _Alloc&, std::pair<_U1,\
    \ _U2>&&)\u2019\n 1199 |         explicit tuple(allocator_arg_t __tag, const _Alloc&\
    \ __a,\n      |                  ^~~~~\n/usr/include/c++/9/tuple:1199:18: note:\
    \   template argument deduction/substitution failed:\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n\
    \                 from /usr/include/c++/9/bits/allocator.h:46,\n             \
    \    from /usr/include/c++/9/string:41,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpdcbm39f2.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4: note:\
    \   candidate expects 3 arguments, 1 provided\n  146 |  { ::new((void *)__p) _Up(std::forward<_Args>(__args)...);\
    \ }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nIn file\
    \ included from /usr/include/c++/9/functional:54,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmpdcbm39f2.cpp:2:\n/usr/include/c++/9/tuple:1189:9:\
    \ note: candidate: \u2018template<class _Alloc, class _U1, class _U2, typename\
    \ std::enable_if<(_MoveConstructibleTuple<_U1, _U2>() && _ImplicitlyMoveConvertibleTuple<_U1,\
    \ _U2>()), bool>::type <anonymous> > std::tuple<_T1, _T2>::tuple(std::allocator_arg_t,\
    \ const _Alloc&, std::pair<_U1, _U2>&&)\u2019\n 1189 |         tuple(allocator_arg_t\
    \ __tag, const _Alloc& __a, pair<_U1, _U2>&& __in)\n      |         ^~~~~\n/usr/include/c++/9/tuple:1189:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n              \
    \   from /usr/include/c++/9/bits/allocator.h:46,\n                 from /usr/include/c++/9/string:41,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpdcbm39f2.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4:\
    \ note:   candidate expects 3 arguments, 1 provided\n  146 |  { ::new((void *)__p)\
    \ _Up(std::forward<_Args>(__args)...); }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    In file included from /usr/include/c++/9/functional:54,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n                 from\
    \ /tmp/tmpdcbm39f2.cpp:2:\n/usr/include/c++/9/tuple:1179:18: note: candidate:\
    \ \u2018template<class _Alloc, class _U1, class _U2, typename std::enable_if<(_ConstructibleTuple<_U1,\
    \ _U2>() && (! _ImplicitlyConvertibleTuple<_U1, _U2>())), bool>::type <anonymous>\
    \ > std::tuple<_T1, _T2>::tuple(std::allocator_arg_t, const _Alloc&, const std::pair<_U1,\
    \ _U2>&)\u2019\n 1179 |         explicit tuple(allocator_arg_t __tag, const _Alloc&\
    \ __a,\n      |                  ^~~~~\n/usr/include/c++/9/tuple:1179:18: note:\
    \   template argument deduction/substitution failed:\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n\
    \                 from /usr/include/c++/9/bits/allocator.h:46,\n             \
    \    from /usr/include/c++/9/string:41,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpdcbm39f2.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4: note:\
    \   candidate expects 3 arguments, 1 provided\n  146 |  { ::new((void *)__p) _Up(std::forward<_Args>(__args)...);\
    \ }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nIn file\
    \ included from /usr/include/c++/9/functional:54,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmpdcbm39f2.cpp:2:\n/usr/include/c++/9/tuple:1169:9:\
    \ note: candidate: \u2018template<class _Alloc, class _U1, class _U2, typename\
    \ std::enable_if<(_ConstructibleTuple<_U1, _U2>() && _ImplicitlyConvertibleTuple<_U1,\
    \ _U2>()), bool>::type <anonymous> > std::tuple<_T1, _T2>::tuple(std::allocator_arg_t,\
    \ const _Alloc&, const std::pair<_U1, _U2>&)\u2019\n 1169 |         tuple(allocator_arg_t\
    \ __tag, const _Alloc& __a,\n      |         ^~~~~\n/usr/include/c++/9/tuple:1169:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n              \
    \   from /usr/include/c++/9/bits/allocator.h:46,\n                 from /usr/include/c++/9/string:41,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpdcbm39f2.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4:\
    \ note:   candidate expects 3 arguments, 1 provided\n  146 |  { ::new((void *)__p)\
    \ _Up(std::forward<_Args>(__args)...); }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    In file included from /usr/include/c++/9/functional:54,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n                 from\
    \ /tmp/tmpdcbm39f2.cpp:2:\n/usr/include/c++/9/tuple:1158:11: note: candidate:\
    \ \u2018template<class _Alloc, class _U1, class _U2, typename std::enable_if<(_MoveConstructibleTuple<_U1,\
    \ _U2>() && (! _ImplicitlyMoveConvertibleTuple<_U1, _U2>())), bool>::type <anonymous>\
    \ > std::tuple<_T1, _T2>::tuple(std::allocator_arg_t, const _Alloc&, std::tuple<_U1,\
    \ _U2>&&)\u2019\n 1158 |  explicit tuple(allocator_arg_t __tag, const _Alloc&\
    \ __a,\n      |           ^~~~~\n/usr/include/c++/9/tuple:1158:11: note:   template\
    \ argument deduction/substitution failed:\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n\
    \                 from /usr/include/c++/9/bits/allocator.h:46,\n             \
    \    from /usr/include/c++/9/string:41,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpdcbm39f2.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4: note:\
    \   candidate expects 3 arguments, 1 provided\n  146 |  { ::new((void *)__p) _Up(std::forward<_Args>(__args)...);\
    \ }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nIn file\
    \ included from /usr/include/c++/9/functional:54,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmpdcbm39f2.cpp:2:\n/usr/include/c++/9/tuple:1148:2:\
    \ note: candidate: \u2018template<class _Alloc, class _U1, class _U2, typename\
    \ std::enable_if<(_MoveConstructibleTuple<_U1, _U2>() && _ImplicitlyMoveConvertibleTuple<_U1,\
    \ _U2>()), bool>::type <anonymous> > std::tuple<_T1, _T2>::tuple(std::allocator_arg_t,\
    \ const _Alloc&, std::tuple<_U1, _U2>&&)\u2019\n 1148 |  tuple(allocator_arg_t\
    \ __tag, const _Alloc& __a, tuple<_U1, _U2>&& __in)\n      |  ^~~~~\n/usr/include/c++/9/tuple:1148:2:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n              \
    \   from /usr/include/c++/9/bits/allocator.h:46,\n                 from /usr/include/c++/9/string:41,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpdcbm39f2.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4:\
    \ note:   candidate expects 3 arguments, 1 provided\n  146 |  { ::new((void *)__p)\
    \ _Up(std::forward<_Args>(__args)...); }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    In file included from /usr/include/c++/9/functional:54,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n                 from\
    \ /tmp/tmpdcbm39f2.cpp:2:\n/usr/include/c++/9/tuple:1136:11: note: candidate:\
    \ \u2018template<class _Alloc, class _U1, class _U2, typename std::enable_if<(_ConstructibleTuple<_U1,\
    \ _U2>() && (! _ImplicitlyConvertibleTuple<_U1, _U2>())), bool>::type <anonymous>\
    \ > std::tuple<_T1, _T2>::tuple(std::allocator_arg_t, const _Alloc&, const std::tuple<_U1,\
    \ _U2>&)\u2019\n 1136 |  explicit tuple(allocator_arg_t __tag, const _Alloc& __a,\n\
    \      |           ^~~~~\n/usr/include/c++/9/tuple:1136:11: note:   template argument\
    \ deduction/substitution failed:\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n\
    \                 from /usr/include/c++/9/bits/allocator.h:46,\n             \
    \    from /usr/include/c++/9/string:41,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpdcbm39f2.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4: note:\
    \   candidate expects 3 arguments, 1 provided\n  146 |  { ::new((void *)__p) _Up(std::forward<_Args>(__args)...);\
    \ }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nIn file\
    \ included from /usr/include/c++/9/functional:54,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmpdcbm39f2.cpp:2:\n/usr/include/c++/9/tuple:1124:2:\
    \ note: candidate: \u2018template<class _Alloc, class _U1, class _U2, typename\
    \ std::enable_if<(_ConstructibleTuple<_U1, _U2>() && _ImplicitlyConvertibleTuple<_U1,\
    \ _U2>()), bool>::type <anonymous> > std::tuple<_T1, _T2>::tuple(std::allocator_arg_t,\
    \ const _Alloc&, const std::tuple<_U1, _U2>&)\u2019\n 1124 |  tuple(allocator_arg_t\
    \ __tag, const _Alloc& __a,\n      |  ^~~~~\n/usr/include/c++/9/tuple:1124:2:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n              \
    \   from /usr/include/c++/9/bits/allocator.h:46,\n                 from /usr/include/c++/9/string:41,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpdcbm39f2.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4:\
    \ note:   candidate expects 3 arguments, 1 provided\n  146 |  { ::new((void *)__p)\
    \ _Up(std::forward<_Args>(__args)...); }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    In file included from /usr/include/c++/9/functional:54,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n                 from\
    \ /tmp/tmpdcbm39f2.cpp:2:\n/usr/include/c++/9/tuple:1115:2: note: candidate: \u2018\
    template<class _Alloc> std::tuple<_T1, _T2>::tuple(std::allocator_arg_t, const\
    \ _Alloc&, std::tuple<_T1, _T2>&&)\u2019\n 1115 |  tuple(allocator_arg_t __tag,\
    \ const _Alloc& __a, tuple&& __in)\n      |  ^~~~~\n/usr/include/c++/9/tuple:1115:2:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n              \
    \   from /usr/include/c++/9/bits/allocator.h:46,\n                 from /usr/include/c++/9/string:41,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpdcbm39f2.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4:\
    \ note:   candidate expects 3 arguments, 1 provided\n  146 |  { ::new((void *)__p)\
    \ _Up(std::forward<_Args>(__args)...); }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    In file included from /usr/include/c++/9/functional:54,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n                 from\
    \ /tmp/tmpdcbm39f2.cpp:2:\n/usr/include/c++/9/tuple:1111:2: note: candidate: \u2018\
    template<class _Alloc> std::tuple<_T1, _T2>::tuple(std::allocator_arg_t, const\
    \ _Alloc&, const std::tuple<_T1, _T2>&)\u2019\n 1111 |  tuple(allocator_arg_t\
    \ __tag, const _Alloc& __a, const tuple& __in)\n      |  ^~~~~\n/usr/include/c++/9/tuple:1111:2:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n              \
    \   from /usr/include/c++/9/bits/allocator.h:46,\n                 from /usr/include/c++/9/string:41,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpdcbm39f2.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4:\
    \ note:   candidate expects 3 arguments, 1 provided\n  146 |  { ::new((void *)__p)\
    \ _Up(std::forward<_Args>(__args)...); }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    In file included from /usr/include/c++/9/functional:54,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n                 from\
    \ /tmp/tmpdcbm39f2.cpp:2:\n/usr/include/c++/9/tuple:1105:11: note: candidate:\
    \ \u2018template<class _Alloc, class _U1, class _U2, typename std::enable_if<(_MoveConstructibleTuple<_U1,\
    \ _U2>() && (! _ImplicitlyMoveConvertibleTuple<_U1, _U2>())), bool>::type <anonymous>\
    \ > std::tuple<_T1, _T2>::tuple(std::allocator_arg_t, const _Alloc&, _U1&&, _U2&&)\u2019\
    \n 1105 |  explicit tuple(allocator_arg_t __tag, const _Alloc& __a,\n      | \
    \          ^~~~~\n/usr/include/c++/9/tuple:1105:11: note:   template argument\
    \ deduction/substitution failed:\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n\
    \                 from /usr/include/c++/9/bits/allocator.h:46,\n             \
    \    from /usr/include/c++/9/string:41,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpdcbm39f2.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4: note:\
    \   candidate expects 4 arguments, 1 provided\n  146 |  { ::new((void *)__p) _Up(std::forward<_Args>(__args)...);\
    \ }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nIn file\
    \ included from /usr/include/c++/9/functional:54,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmpdcbm39f2.cpp:2:\n/usr/include/c++/9/tuple:1095:2:\
    \ note: candidate: \u2018template<class _Alloc, class _U1, class _U2, typename\
    \ std::enable_if<(_MoveConstructibleTuple<_U1, _U2>() && _ImplicitlyMoveConvertibleTuple<_U1,\
    \ _U2>()), bool>::type <anonymous> > std::tuple<_T1, _T2>::tuple(std::allocator_arg_t,\
    \ const _Alloc&, _U1&&, _U2&&)\u2019\n 1095 |  tuple(allocator_arg_t __tag, const\
    \ _Alloc& __a, _U1&& __a1, _U2&& __a2)\n      |  ^~~~~\n/usr/include/c++/9/tuple:1095:2:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n              \
    \   from /usr/include/c++/9/bits/allocator.h:46,\n                 from /usr/include/c++/9/string:41,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpdcbm39f2.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4:\
    \ note:   candidate expects 4 arguments, 1 provided\n  146 |  { ::new((void *)__p)\
    \ _Up(std::forward<_Args>(__args)...); }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    In file included from /usr/include/c++/9/functional:54,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n                 from\
    \ /tmp/tmpdcbm39f2.cpp:2:\n/usr/include/c++/9/tuple:1085:11: note: candidate:\
    \ \u2018template<class _Alloc, class _Dummy, typename std::enable_if<(std::_TC<std::is_same<_Dummy,\
    \ void>::value, long int, long int>::_ConstructibleTuple<long int, long int>()\
    \ && (! std::_TC<std::is_same<_Dummy, void>::value, long int, long int>::_ImplicitlyConvertibleTuple<long\
    \ int, long int>())), bool>::type <anonymous> > std::tuple<_T1, _T2>::tuple(std::allocator_arg_t,\
    \ const _Alloc&, const _T1&, const _T2&)\u2019\n 1085 |  explicit tuple(allocator_arg_t\
    \ __tag, const _Alloc& __a,\n      |           ^~~~~\n/usr/include/c++/9/tuple:1085:11:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n              \
    \   from /usr/include/c++/9/bits/allocator.h:46,\n                 from /usr/include/c++/9/string:41,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpdcbm39f2.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4:\
    \ note:   candidate expects 4 arguments, 1 provided\n  146 |  { ::new((void *)__p)\
    \ _Up(std::forward<_Args>(__args)...); }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    In file included from /usr/include/c++/9/functional:54,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n                 from\
    \ /tmp/tmpdcbm39f2.cpp:2:\n/usr/include/c++/9/tuple:1073:2: note: candidate: \u2018\
    template<class _Alloc, class _Dummy, typename std::enable_if<(std::_TC<std::is_same<_Dummy,\
    \ void>::value, long int, long int>::_ConstructibleTuple<long int, long int>()\
    \ && std::_TC<std::is_same<_Dummy, void>::value, long int, long int>::_ImplicitlyConvertibleTuple<long\
    \ int, long int>()), bool>::type <anonymous> > std::tuple<_T1, _T2>::tuple(std::allocator_arg_t,\
    \ const _Alloc&, const _T1&, const _T2&)\u2019\n 1073 |  tuple(allocator_arg_t\
    \ __tag, const _Alloc& __a,\n      |  ^~~~~\n/usr/include/c++/9/tuple:1073:2:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n              \
    \   from /usr/include/c++/9/bits/allocator.h:46,\n                 from /usr/include/c++/9/string:41,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpdcbm39f2.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4:\
    \ note:   candidate expects 4 arguments, 1 provided\n  146 |  { ::new((void *)__p)\
    \ _Up(std::forward<_Args>(__args)...); }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    In file included from /usr/include/c++/9/functional:54,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n                 from\
    \ /tmp/tmpdcbm39f2.cpp:2:\n/usr/include/c++/9/tuple:1062:2: note: candidate: \u2018\
    template<class _Alloc> std::tuple<_T1, _T2>::tuple(std::allocator_arg_t, const\
    \ _Alloc&)\u2019\n 1062 |  tuple(allocator_arg_t __tag, const _Alloc& __a)\n \
    \     |  ^~~~~\n/usr/include/c++/9/tuple:1062:2: note:   template argument deduction/substitution\
    \ failed:\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n\
    \                 from /usr/include/c++/9/bits/allocator.h:46,\n             \
    \    from /usr/include/c++/9/string:41,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpdcbm39f2.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4: note:\
    \   candidate expects 2 arguments, 1 provided\n  146 |  { ::new((void *)__p) _Up(std::forward<_Args>(__args)...);\
    \ }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nIn file\
    \ included from /usr/include/c++/9/functional:54,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmpdcbm39f2.cpp:2:\n/usr/include/c++/9/tuple:1055:28:\
    \ note: candidate: \u2018template<class _U1, class _U2, typename std::enable_if<(_MoveConstructibleTuple<_U1,\
    \ _U2>() && (! _ImplicitlyMoveConvertibleTuple<_U1, _U2>())), bool>::type <anonymous>\
    \ > constexpr std::tuple<_T1, _T2>::tuple(std::pair<_U1, _U2>&&)\u2019\n 1055\
    \ |         explicit constexpr tuple(pair<_U1, _U2>&& __in)\n      |         \
    \                   ^~~~~\n/usr/include/c++/9/tuple:1055:28: note:   template\
    \ argument deduction/substitution failed:\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n\
    \                 from /usr/include/c++/9/bits/allocator.h:46,\n             \
    \    from /usr/include/c++/9/string:41,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpdcbm39f2.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4: note:\
    \   \u2018std::tuple<std::vector<long int, std::allocator<long int> >, long int>\u2019\
    \ is not derived from \u2018std::pair<_T1, _T2>\u2019\n  146 |  { ::new((void\
    \ *)__p) _Up(std::forward<_Args>(__args)...); }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    In file included from /usr/include/c++/9/functional:54,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n                 from\
    \ /tmp/tmpdcbm39f2.cpp:2:\n/usr/include/c++/9/tuple:1045:19: note: candidate:\
    \ \u2018template<class _U1, class _U2, typename std::enable_if<(_MoveConstructibleTuple<_U1,\
    \ _U2>() && _ImplicitlyMoveConvertibleTuple<_U1, _U2>()), bool>::type <anonymous>\
    \ > constexpr std::tuple<_T1, _T2>::tuple(std::pair<_U1, _U2>&&)\u2019\n 1045\
    \ |         constexpr tuple(pair<_U1, _U2>&& __in)\n      |                  \
    \ ^~~~~\n/usr/include/c++/9/tuple:1045:19: note:   template argument deduction/substitution\
    \ failed:\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n\
    \                 from /usr/include/c++/9/bits/allocator.h:46,\n             \
    \    from /usr/include/c++/9/string:41,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpdcbm39f2.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4: note:\
    \   \u2018std::tuple<std::vector<long int, std::allocator<long int> >, long int>\u2019\
    \ is not derived from \u2018std::pair<_T1, _T2>\u2019\n  146 |  { ::new((void\
    \ *)__p) _Up(std::forward<_Args>(__args)...); }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    In file included from /usr/include/c++/9/functional:54,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n                 from\
    \ /tmp/tmpdcbm39f2.cpp:2:\n/usr/include/c++/9/tuple:1036:28: note: candidate:\
    \ \u2018template<class _U1, class _U2, typename std::enable_if<(_ConstructibleTuple<_U1,\
    \ _U2>() && (! _ImplicitlyConvertibleTuple<_U1, _U2>())), bool>::type <anonymous>\
    \ > constexpr std::tuple<_T1, _T2>::tuple(const std::pair<_U1, _U2>&)\u2019\n\
    \ 1036 |         explicit constexpr tuple(const pair<_U1, _U2>& __in)\n      |\
    \                            ^~~~~\n/usr/include/c++/9/tuple:1036:28: note:  \
    \ template argument deduction/substitution failed:\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n\
    \                 from /usr/include/c++/9/bits/allocator.h:46,\n             \
    \    from /usr/include/c++/9/string:41,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpdcbm39f2.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4: note:\
    \   \u2018std::tuple<std::vector<long int, std::allocator<long int> >, long int>\u2019\
    \ is not derived from \u2018const std::pair<_T1, _T2>\u2019\n  146 |  { ::new((void\
    \ *)__p) _Up(std::forward<_Args>(__args)...); }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    In file included from /usr/include/c++/9/functional:54,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n                 from\
    \ /tmp/tmpdcbm39f2.cpp:2:\n/usr/include/c++/9/tuple:1027:19: note: candidate:\
    \ \u2018template<class _U1, class _U2, typename std::enable_if<(_ConstructibleTuple<_U1,\
    \ _U2>() && _ImplicitlyConvertibleTuple<_U1, _U2>()), bool>::type <anonymous>\
    \ > constexpr std::tuple<_T1, _T2>::tuple(const std::pair<_U1, _U2>&)\u2019\n\
    \ 1027 |         constexpr tuple(const pair<_U1, _U2>& __in)\n      |        \
    \           ^~~~~\n/usr/include/c++/9/tuple:1027:19: note:   template argument\
    \ deduction/substitution failed:\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n\
    \                 from /usr/include/c++/9/bits/allocator.h:46,\n             \
    \    from /usr/include/c++/9/string:41,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpdcbm39f2.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4: note:\
    \   \u2018std::tuple<std::vector<long int, std::allocator<long int> >, long int>\u2019\
    \ is not derived from \u2018const std::pair<_T1, _T2>\u2019\n  146 |  { ::new((void\
    \ *)__p) _Up(std::forward<_Args>(__args)...); }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    In file included from /usr/include/c++/9/functional:54,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n                 from\
    \ /tmp/tmpdcbm39f2.cpp:2:\n/usr/include/c++/9/tuple:1018:28: note: candidate:\
    \ \u2018template<class _U1, class _U2, typename std::enable_if<(_MoveConstructibleTuple<_U1,\
    \ _U2>() && (! _ImplicitlyMoveConvertibleTuple<_U1, _U2>())), bool>::type <anonymous>\
    \ > constexpr std::tuple<_T1, _T2>::tuple(std::tuple<_U1, _U2>&&)\u2019\n 1018\
    \ |         explicit constexpr tuple(tuple<_U1, _U2>&& __in)\n      |        \
    \                    ^~~~~\n/usr/include/c++/9/tuple:1018:28: note:   template\
    \ argument deduction/substitution failed:\n/usr/include/c++/9/tuple:1017:16: error:\
    \ no type named \u2018type\u2019 in \u2018struct std::enable_if<false, bool>\u2019\
    \n 1017 |  bool>::type = false>\n      |                ^~~~~\n/usr/include/c++/9/tuple:1009:19:\
    \ note: candidate: \u2018template<class _U1, class _U2, typename std::enable_if<(_MoveConstructibleTuple<_U1,\
    \ _U2>() && _ImplicitlyMoveConvertibleTuple<_U1, _U2>()), bool>::type <anonymous>\
    \ > constexpr std::tuple<_T1, _T2>::tuple(std::tuple<_U1, _U2>&&)\u2019\n 1009\
    \ |         constexpr tuple(tuple<_U1, _U2>&& __in)\n      |                 \
    \  ^~~~~\n/usr/include/c++/9/tuple:1009:19: note:   template argument deduction/substitution\
    \ failed:\n/usr/include/c++/9/tuple:1008:16: error: no type named \u2018type\u2019\
    \ in \u2018struct std::enable_if<false, bool>\u2019\n 1008 |  bool>::type = true>\n\
    \      |                ^~~~\n/usr/include/c++/9/tuple:1000:28: note: candidate:\
    \ \u2018template<class _U1, class _U2, typename std::enable_if<(_ConstructibleTuple<_U1,\
    \ _U2>() && (! _ImplicitlyConvertibleTuple<_U1, _U2>())), bool>::type <anonymous>\
    \ > constexpr std::tuple<_T1, _T2>::tuple(const std::tuple<_U1, _U2>&)\u2019\n\
    \ 1000 |         explicit constexpr tuple(const tuple<_U1, _U2>& __in)\n     \
    \ |                            ^~~~~\n/usr/include/c++/9/tuple:1000:28: note:\
    \   template argument deduction/substitution failed:\n/usr/include/c++/9/tuple:999:16:\
    \ error: no type named \u2018type\u2019 in \u2018struct std::enable_if<false,\
    \ bool>\u2019\n  999 |  bool>::type = false>\n      |                ^~~~~\n/usr/include/c++/9/tuple:991:19:\
    \ note: candidate: \u2018template<class _U1, class _U2, typename std::enable_if<(_ConstructibleTuple<_U1,\
    \ _U2>() && _ImplicitlyConvertibleTuple<_U1, _U2>()), bool>::type <anonymous>\
    \ > constexpr std::tuple<_T1, _T2>::tuple(const std::tuple<_U1, _U2>&)\u2019\n\
    \  991 |         constexpr tuple(const tuple<_U1, _U2>& __in)\n      |       \
    \            ^~~~~\n/usr/include/c++/9/tuple:991:19: note:   template argument\
    \ deduction/substitution failed:\n/usr/include/c++/9/tuple:990:16: error: no type\
    \ named \u2018type\u2019 in \u2018struct std::enable_if<false, bool>\u2019\n \
    \ 990 |  bool>::type = true>\n      |                ^~~~\n/usr/include/c++/9/tuple:983:17:\
    \ note: candidate: \u2018constexpr std::tuple<_T1, _T2>::tuple(std::tuple<_T1,\
    \ _T2>&&) [with _T1 = long int; _T2 = long int]\u2019\n  983 |       constexpr\
    \ tuple(tuple&&) = default;\n      |                 ^~~~~\n/usr/include/c++/9/tuple:983:23:\
    \ note:   no known conversion for argument 1 from \u2018std::tuple<std::vector<long\
    \ int, std::allocator<long int> >, long int>\u2019 to \u2018std::tuple<long int,\
    \ long int>&&\u2019\n  983 |       constexpr tuple(tuple&&) = default;\n     \
    \ |                       ^~~~~~~\n/usr/include/c++/9/tuple:981:17: note: candidate:\
    \ \u2018constexpr std::tuple<_T1, _T2>::tuple(const std::tuple<_T1, _T2>&) [with\
    \ _T1 = long int; _T2 = long int]\u2019\n  981 |       constexpr tuple(const tuple&)\
    \ = default;\n      |                 ^~~~~\n/usr/include/c++/9/tuple:981:23:\
    \ note:   no known conversion for argument 1 from \u2018std::tuple<std::vector<long\
    \ int, std::allocator<long int> >, long int>\u2019 to \u2018const std::tuple<long\
    \ int, long int>&\u2019\n  981 |       constexpr tuple(const tuple&) = default;\n\
    \      |                       ^~~~~~~~~~~~\n/usr/include/c++/9/tuple:978:28:\
    \ note: candidate: \u2018template<class _U1, class _U2, typename std::enable_if<((_MoveConstructibleTuple<_U1,\
    \ _U2>() && (! _ImplicitlyMoveConvertibleTuple<_U1, _U2>())) && (! std::is_same<typename\
    \ std::remove_cv<typename std::remove_reference<_Tp>::type>::type, std::allocator_arg_t>::value)),\
    \ bool>::type <anonymous> > constexpr std::tuple<_T1, _T2>::tuple(_U1&&, _U2&&)\u2019\
    \n  978 |         explicit constexpr tuple(_U1&& __a1, _U2&& __a2)\n      |  \
    \                          ^~~~~\n/usr/include/c++/9/tuple:978:28: note:   template\
    \ argument deduction/substitution failed:\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n\
    \                 from /usr/include/c++/9/bits/allocator.h:46,\n             \
    \    from /usr/include/c++/9/string:41,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpdcbm39f2.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4: note:\
    \   candidate expects 2 arguments, 1 provided\n  146 |  { ::new((void *)__p) _Up(std::forward<_Args>(__args)...);\
    \ }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nIn file\
    \ included from /usr/include/c++/9/functional:54,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmpdcbm39f2.cpp:2:\n/usr/include/c++/9/tuple:968:19:\
    \ note: candidate: \u2018template<class _U1, class _U2, typename std::enable_if<((_MoveConstructibleTuple<_U1,\
    \ _U2>() && _ImplicitlyMoveConvertibleTuple<_U1, _U2>()) && (! std::is_same<typename\
    \ std::remove_cv<typename std::remove_reference<_Tp>::type>::type, std::allocator_arg_t>::value)),\
    \ bool>::type <anonymous> > constexpr std::tuple<_T1, _T2>::tuple(_U1&&, _U2&&)\u2019\
    \n  968 |         constexpr tuple(_U1&& __a1, _U2&& __a2)\n      |           \
    \        ^~~~~\n/usr/include/c++/9/tuple:968:19: note:   template argument deduction/substitution\
    \ failed:\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n\
    \                 from /usr/include/c++/9/bits/allocator.h:46,\n             \
    \    from /usr/include/c++/9/string:41,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpdcbm39f2.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4: note:\
    \   candidate expects 2 arguments, 1 provided\n  146 |  { ::new((void *)__p) _Up(std::forward<_Args>(__args)...);\
    \ }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nIn file\
    \ included from /usr/include/c++/9/functional:54,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmpdcbm39f2.cpp:2:\n/usr/include/c++/9/tuple:954:28:\
    \ note: candidate: \u2018template<class _Dummy, typename std::enable_if<(std::_TC<std::is_same<_Dummy,\
    \ void>::value, long int, long int>::_ConstructibleTuple<long int, long int>()\
    \ && (! std::_TC<std::is_same<_Dummy, void>::value, long int, long int>::_ImplicitlyConvertibleTuple<long\
    \ int, long int>())), bool>::type <anonymous> > constexpr std::tuple<_T1, _T2>::tuple(const\
    \ _T1&, const _T2&)\u2019\n  954 |         explicit constexpr tuple(const _T1&\
    \ __a1, const _T2& __a2)\n      |                            ^~~~~\n/usr/include/c++/9/tuple:954:28:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n              \
    \   from /usr/include/c++/9/bits/allocator.h:46,\n                 from /usr/include/c++/9/string:41,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpdcbm39f2.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4:\
    \ note:   candidate expects 2 arguments, 1 provided\n  146 |  { ::new((void *)__p)\
    \ _Up(std::forward<_Args>(__args)...); }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    In file included from /usr/include/c++/9/functional:54,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n                 from\
    \ /tmp/tmpdcbm39f2.cpp:2:\n/usr/include/c++/9/tuple:945:19: note: candidate: \u2018\
    template<class _Dummy, typename std::enable_if<(std::_TC<std::is_same<_Dummy,\
    \ void>::value, long int, long int>::_ConstructibleTuple<long int, long int>()\
    \ && std::_TC<std::is_same<_Dummy, void>::value, long int, long int>::_ImplicitlyConvertibleTuple<long\
    \ int, long int>()), bool>::type <anonymous> > constexpr std::tuple<_T1, _T2>::tuple(const\
    \ _T1&, const _T2&)\u2019\n  945 |         constexpr tuple(const _T1& __a1, const\
    \ _T2& __a2)\n      |                   ^~~~~\n/usr/include/c++/9/tuple:945:19:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n              \
    \   from /usr/include/c++/9/bits/allocator.h:46,\n                 from /usr/include/c++/9/string:41,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpdcbm39f2.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4:\
    \ note:   candidate expects 2 arguments, 1 provided\n  146 |  { ::new((void *)__p)\
    \ _Up(std::forward<_Args>(__args)...); }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    In file included from /usr/include/c++/9/functional:54,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n                 from\
    \ /tmp/tmpdcbm39f2.cpp:2:\n/usr/include/c++/9/tuple:931:21: note: candidate: \u2018\
    template<class _U1, class _U2, typename std::enable_if<std::__and_<std::is_default_constructible<_Tp>,\
    \ std::is_default_constructible<_Dp>, std::__not_<std::__and_<std::__is_implicitly_default_constructible<_U1>,\
    \ std::__is_implicitly_default_constructible<_U2> > > >::value, bool>::type <anonymous>\
    \ > constexpr std::tuple<_T1, _T2>::tuple()\u2019\n  931 |  explicit constexpr\
    \ tuple()\n      |                     ^~~~~\n/usr/include/c++/9/tuple:931:21:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n              \
    \   from /usr/include/c++/9/bits/allocator.h:46,\n                 from /usr/include/c++/9/string:41,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpdcbm39f2.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4:\
    \ note:   candidate expects 0 arguments, 1 provided\n  146 |  { ::new((void *)__p)\
    \ _Up(std::forward<_Args>(__args)...); }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    In file included from /usr/include/c++/9/functional:54,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n                 from\
    \ /tmp/tmpdcbm39f2.cpp:2:\n/usr/include/c++/9/tuple:918:12: note: candidate: \u2018\
    template<class _U1, class _U2, typename std::enable_if<std::__and_<std::__is_implicitly_default_constructible<_U1>,\
    \ std::__is_implicitly_default_constructible<_U2> >::value, bool>::type <anonymous>\
    \ > constexpr std::tuple<_T1, _T2>::tuple()\u2019\n  918 |  constexpr tuple()\n\
    \      |            ^~~~~\n/usr/include/c++/9/tuple:918:12: note:   template argument\
    \ deduction/substitution failed:\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n\
    \                 from /usr/include/c++/9/bits/allocator.h:46,\n             \
    \    from /usr/include/c++/9/string:41,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpdcbm39f2.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4: note:\
    \   candidate expects 0 arguments, 1 provided\n  146 |  { ::new((void *)__p) _Up(std::forward<_Args>(__args)...);\
    \ }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    std::vector<std::tuple<long, long>> res;\n    if (lst.empty())\n\
    \        return res;\n    std::vector<std::tuple<long, long>> row;\n    std::vector<std::tuple<long,\
    \ long>> row2;\n    for (auto &row : lst) {\n        row.clear();\n        row2.clear();\n\
    \        for (auto &elem : row) {\n            row.push_back(elem);\n        }\n\
    \        for (auto &elem : row2) {\n            row2.push_back(elem);\n      \
    \  }\n    }\n    std::sort(row.begin(), row.end(), [](auto &a, auto &b) { return\
    \ std::get<0>(a) < std::get<0>(b); });\n    std::sort(row2.begin(), row2.end(),\
    \ [](auto &a, auto &b) { return std::get<1>(a) < std::get<1>(b); });\n    for\
    \ (auto &row : row) {\n        std::sort(row2.begin(), row2.end(), [](auto &a,\
    \ auto &b) { return std::get<0>(a) < std::get<0>(b); });\n        if (std::get<0>(row)\
    \ == x)\n            res.push_back(std::make_tuple(std::get<0>(row), std::get<1>(row)));\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_row;\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "tmpuqo08bs0: /tmp/tmpuqo08bs0.cpp:46: int main(): Assertion `candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    std::vector<std::tuple<long, long>> res;\n    long row =\
    \ 0;\n    long col = 0;\n    long cnt = 0;\n    for (auto &row : lst) {\n    \
    \    cnt += row.size();\n    }\n    for (auto &row : lst) {\n        auto it =\
    \ std::find(row.begin(), row.end(), x);\n        if (it != row.end()) {\n    \
    \        col = std::distance(row.begin(), it);\n            res.push_back({row,\
    \ col});\n        }\n    }\n    std::sort(res.begin(), res.end(), [](const std::tuple<long,\
    \ long> &a, const std::tuple<long, long> &b) {\n        return std::get<0>(a)\
    \ < std::get<0>(b);\n    });\n    std::sort(res.begin(), res.end(), [](const std::tuple<long,\
    \ long> &a, const std::tuple<long, long> &b) {\n        return std::get<1>(a)\
    \ < std::get<1>(b);\n    });\n    return res;\n}\nint main() {\n    auto candidate\
    \ = get_row;\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpru4ws4es.cpp: In function \u2018std::vector<std::tuple<long int,\
    \ long int> > get_row(std::vector<std::vector<long int> >, long int)\u2019:\n\
    /tmp/tmpru4ws4es.cpp:31:37: error: no matching function for call to \u2018std::vector<std::tuple<long\
    \ int, long int> >::push_back(<brace-enclosed initializer list>)\u2019\n   31\
    \ |             res.push_back({row, col});\n      |                          \
    \           ^\nIn file included from /usr/include/c++/9/vector:67,\n         \
    \        from /usr/include/c++/9/queue:61,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:86,\n\
    \                 from /tmp/tmpru4ws4es.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::tuple<long int, long int>; _Alloc = std::allocator<std::tuple<long\
    \ int, long int> >; std::vector<_Tp, _Alloc>::value_type = std::tuple<long int,\
    \ long int>]\u2019\n 1184 |       push_back(const value_type& __x)\n      |  \
    \     ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1184:35: note:   no known\
    \ conversion for argument 1 from \u2018<brace-enclosed initializer list>\u2019\
    \ to \u2018const value_type&\u2019 {aka \u2018const std::tuple<long int, long\
    \ int>&\u2019}\n 1184 |       push_back(const value_type& __x)\n      |      \
    \           ~~~~~~~~~~~~~~~~~~^~~\n/usr/include/c++/9/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = std::tuple<long int, long int>; _Alloc =\
    \ std::allocator<std::tuple<long int, long int> >; std::vector<_Tp, _Alloc>::value_type\
    \ = std::tuple<long int, long int>]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018<brace-enclosed initializer\
    \ list>\u2019 to \u2018std::vector<std::tuple<long int, long int> >::value_type&&\u2019\
    \ {aka \u2018std::tuple<long int, long int>&&\u2019}\n 1200 |       push_back(value_type&&\
    \ __x)\n      |                 ~~~~~~~~~~~~~^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    // Your code here\n    std::vector<std::tuple<long, long>>\
    \ res;\n    for(auto &row : lst) {\n        for(auto &ele : row) {\n         \
    \   if(ele == x) {\n                res.push_back({row.size(), ele});\n      \
    \      }\n        }\n    }\n    std::sort(res.begin(), res.end(), [](const std::tuple<long,\
    \ long> &a, const std::tuple<long, long> &b) -> bool {\n        return std::get<0>(a)\
    \ < std::get<0>(b);\n    });\n    std::sort(res.begin(), res.end(), [](const std::tuple<long,\
    \ long> &a, const std::tuple<long, long> &b) -> bool {\n        return std::get<1>(a)\
    \ < std::get<1>(b);\n    });\n    return res;\n}\nint main() {\n    auto candidate\
    \ = get_row;\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "tmpn3ublbl5: /tmp/tmpn3ublbl5.cpp:39: int main(): Assertion `candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    std::vector<std::tuple<long, long>> res;\n    std::vector<long>\
    \ row;\n    std::vector<long> col;\n    for (auto &i : lst) {\n        row.push_back(i[0]);\n\
    \        col.push_back(i.size() - 1);\n    }\n    std::sort(row.begin(), row.end());\n\
    \    std::sort(col.begin(), col.end());\n    for (long i = 0; i < row.size();\
    \ i++) {\n        for (long j = 0; j < col.size(); j++) {\n            if (row[i]\
    \ == x && col[j] == i) {\n                res.push_back(std::make_tuple(i, j));\n\
    \            }\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = get_row;\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "tmp0bxi8f_3: /tmp/tmp0bxi8f_3.cpp:40: int main(): Assertion `candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    // Write your code here\n    std::vector<std::tuple<long,\
    \ long>> res;\n    for(auto &row : lst){\n        for(auto &el : row){\n     \
    \       if(el == x){\n                res.emplace_back(row.size() - 1, row.size()\
    \ - 1);\n            }\n        }\n    }\n    std::sort(res.begin(), res.end(),\
    \ [](const std::tuple<long, long> &a, const std::tuple<long, long> &b){\n    \
    \    return std::get<0>(a) < std::get<0>(b);\n    });\n    std::sort(res.begin(),\
    \ res.end(), [](const std::tuple<long, long> &a, const std::tuple<long, long>\
    \ &b){\n        return std::get<1>(a) < std::get<1>(b);\n    });\n    return res;\n\
    }\nint main() {\n    auto candidate = get_row;\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "tmp40flehyz: /tmp/tmp40flehyz.cpp:39: int main(): Assertion `candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    std::vector<std::tuple<long, long>> res;\n    for(auto &row\
    \ : lst) {\n        for(auto &col : row) {\n            if(col == x) {\n     \
    \           res.emplace_back(std::make_tuple(row.size() - 1, col.size() - 1));\n\
    \            }\n        }\n    }\n    std::sort(res.begin(), res.end(), [](const\
    \ std::tuple<long, long> &a, const std::tuple<long, long> &b) {\n        return\
    \ std::get<0>(a) < std::get<0>(b);\n    });\n    std::sort(res.begin(), res.end(),\
    \ [](const std::tuple<long, long> &a, const std::tuple<long, long> &b) {\n   \
    \     return std::get<1>(a) < std::get<1>(b);\n    });\n    return res;\n}\nint\
    \ main() {\n    auto candidate = get_row;\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpgoa3s9a4.cpp: In function \u2018std::vector<std::tuple<long int,\
    \ long int> > get_row(std::vector<std::vector<long int> >, long int)\u2019:\n\
    /tmp/tmpgoa3s9a4.cpp:24:70: error: request for member \u2018size\u2019 in \u2018\
    col\u2019, which is of non-class type \u2018long int\u2019\n   24 |          \
    \       res.emplace_back(std::make_tuple(row.size() - 1, col.size() - 1));\n \
    \     |                                                                      ^~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    std::vector<std::tuple<long, long>> res;\n    for(auto &row\
    \ : lst) {\n        for(auto &el : row) {\n            if(el == x) {\n       \
    \         res.push_back(std::make_tuple(row.size() - 1, row.size() - 1));\n  \
    \          }\n        }\n    }\n    std::sort(res.begin(), res.end(), [](const\
    \ std::tuple<long, long> &a, const std::tuple<long, long> &b) {\n        return\
    \ std::get<0>(a) < std::get<0>(b);\n    });\n    std::sort(res.begin(), res.end(),\
    \ [](const std::tuple<long, long> &a, const std::tuple<long, long> &b) {\n   \
    \     return std::get<1>(a) < std::get<1>(b);\n    });\n    return res;\n}\nint\
    \ main() {\n    auto candidate = get_row;\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "tmpmjukof2_: /tmp/tmpmjukof2_.cpp:38: int main(): Assertion `candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    // Write your code here\n    std::vector<std::tuple<long,\
    \ long>> res;\n    for(auto &row : lst) {\n        for(auto &elem : row) {\n \
    \           if(elem == x) {\n                res.push_back(std::make_tuple(row.size(),\
    \ row.size() - 1));\n            }\n        }\n    }\n    std::sort(res.begin(),\
    \ res.end(), [](const std::tuple<long, long> &a, const std::tuple<long, long>\
    \ &b) -> bool {\n        return std::get<0>(a) < std::get<0>(b);\n    });\n  \
    \  std::sort(res.begin(), res.end(), [](const std::tuple<long, long> &a, const\
    \ std::tuple<long, long> &b) -> bool {\n        return std::get<1>(a) > std::get<1>(b);\n\
    \    });\n    return res;\n}\nint main() {\n    auto candidate = get_row;\n  \
    \  assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "tmp95j71mzp: /tmp/tmp95j71mzp.cpp:39: int main(): Assertion `candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    std::vector<std::tuple<long, long>> res;\n    std::vector<long>\
    \ row;\n    std::vector<long> col;\n    for (auto &i : lst) {\n        row.push_back(i.size());\n\
    \        col.push_back(0);\n    }\n    std::sort(row.begin(), row.end(), [](long\
    \ a, long b) { return a < b; });\n    std::sort(col.begin(), col.end(), [](long\
    \ a, long b) { return b < a; });\n    for (long i = 0; i < row.size(); i++) {\n\
    \        for (long j = 0; j < row[i]; j++) {\n            if (col[j] == x) {\n\
    \                res.push_back(std::make_tuple(i, j));\n            }\n      \
    \  }\n    }\n    return res;\n}\nint main() {\n    auto candidate = get_row;\n\
    \    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "tmp9aedii8i: /tmp/tmp9aedii8i.cpp:40: int main(): Assertion `candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    // Write your code here\n    std::vector<std::tuple<long,\
    \ long>> res;\n    for(auto &row : lst){\n        for(auto &el : row){\n     \
    \       if(el == x){\n                res.push_back(std::make_tuple(row.size()\
    \ - 1, row.size() - 1));\n            }\n        }\n    }\n    std::sort(res.begin(),\
    \ res.end(), [](std::tuple<long, long> a, std::tuple<long, long> b){\n       \
    \ return std::get<0>(a) < std::get<0>(b);\n    });\n    std::sort(res.begin(),\
    \ res.end(), [](std::tuple<long, long> a, std::tuple<long, long> b){\n       \
    \ return std::get<1>(a) < std::get<1>(b);\n    });\n    return res;\n}\nint main()\
    \ {\n    auto candidate = get_row;\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "tmphfkz8ueh: /tmp/tmphfkz8ueh.cpp:39: int main(): Assertion `candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    // Write your code here\n    std::vector<std::tuple<long,\
    \ long>> res;\n    for(auto &row : lst){\n        for(auto &ele : row){\n    \
    \        if(ele == x){\n                res.push_back(std::make_tuple(row.size()\
    \ - 1, row.size() - 1));\n            }\n        }\n    }\n    std::sort(res.begin(),\
    \ res.end(), [](std::tuple<long, long> a, std::tuple<long, long> b){\n       \
    \ return std::get<0>(a) < std::get<0>(b);\n    });\n    std::sort(res.begin(),\
    \ res.end(), [](std::tuple<long, long> a, std::tuple<long, long> b){\n       \
    \ return std::get<1>(a) < std::get<1>(b);\n    });\n    return res;\n}\nint main()\
    \ {\n    auto candidate = get_row;\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "tmpu9u1_gkc: /tmp/tmpu9u1_gkc.cpp:39: int main(): Assertion `candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    std::vector<std::tuple<long, long>> res;\n    std::vector<long>\
    \ row;\n    std::vector<long> col;\n    long row_index = 0;\n    long col_index\
    \ = 0;\n    for (auto &row : lst) {\n        row.clear();\n        col.clear();\n\
    \        for (auto &col : row) {\n            if (col == x) {\n              \
    \  res.emplace_back(row_index, col_index);\n            }\n            col.push_back(x);\n\
    \        }\n        row_index++;\n    }\n    std::sort(res.begin(), res.end(),\
    \ [](const std::tuple<long, long> &a, const std::tuple<long, long> &b) {\n   \
    \     return std::get<0>(a) < std::get<0>(b);\n    });\n    for (auto &row : res)\
    \ {\n        std::sort(row.begin(), row.end(), [](const long &a, const long &b)\
    \ {\n            return std::get<1>(a) < std::get<1>(b);\n        });\n    }\n\
    \    return res;\n}\nint main() {\n    auto candidate = get_row;\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7i0d8cb7.cpp: In function \u2018std::vector<std::tuple<long int,\
    \ long int> > get_row(std::vector<std::vector<long int> >, long int)\u2019:\n\
    /tmp/tmp7i0d8cb7.cpp:32:17: error: request for member \u2018push_back\u2019 in\
    \ \u2018col\u2019, which is of non-class type \u2018long int\u2019\n   32 |  \
    \           col.push_back(x);\n      |                 ^~~~~~~~~\n/tmp/tmp7i0d8cb7.cpp:40:23:\
    \ error: \u2018class std::tuple<long int, long int>\u2019 has no member named\
    \ \u2018begin\u2019\n   40 |         std::sort(row.begin(), row.end(), [](const\
    \ long &a, const long &b) {\n      |                       ^~~~~\n/tmp/tmp7i0d8cb7.cpp:40:36:\
    \ error: \u2018class std::tuple<long int, long int>\u2019 has no member named\
    \ \u2018end\u2019\n   40 |         std::sort(row.begin(), row.end(), [](const\
    \ long &a, const long &b) {\n      |                                    ^~~\n\
    /tmp/tmp7i0d8cb7.cpp: In lambda function:\n/tmp/tmp7i0d8cb7.cpp:41:33: error:\
    \ no matching function for call to \u2018get<1>(const long int&)\u2019\n   41\
    \ |             return std::get<1>(a) < std::get<1>(b);\n      |             \
    \                    ^\nIn file included from /usr/include/c++/9/algorithm:60,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp7i0d8cb7.cpp:2:\n/usr/include/c++/9/utility:219:5:\
    \ note: candidate: \u2018template<long unsigned int _Int, class _Tp1, class _Tp2>\
    \ constexpr typename std::tuple_element<_Int, std::pair<_Tp1, _Tp2> >::type& std::get(std::pair<_Tp1,\
    \ _Tp2>&)\u2019\n  219 |     get(std::pair<_Tp1, _Tp2>& __in) noexcept\n     \
    \ |     ^~~\n/usr/include/c++/9/utility:219:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp7i0d8cb7.cpp:41:33: note:   mismatched types \u2018std::pair<_Tp1,\
    \ _Tp2>\u2019 and \u2018const long int\u2019\n   41 |             return std::get<1>(a)\
    \ < std::get<1>(b);\n      |                                 ^\nIn file included\
    \ from /usr/include/c++/9/algorithm:60,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp7i0d8cb7.cpp:2:\n/usr/include/c++/9/utility:224:5:\
    \ note: candidate: \u2018template<long unsigned int _Int, class _Tp1, class _Tp2>\
    \ constexpr typename std::tuple_element<_Int, std::pair<_Tp1, _Tp2> >::type&&\
    \ std::get(std::pair<_Tp1, _Tp2>&&)\u2019\n  224 |     get(std::pair<_Tp1, _Tp2>&&\
    \ __in) noexcept\n      |     ^~~\n/usr/include/c++/9/utility:224:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmp7i0d8cb7.cpp:41:33: note: \
    \  mismatched types \u2018std::pair<_Tp1, _Tp2>\u2019 and \u2018const long int\u2019\
    \n   41 |             return std::get<1>(a) < std::get<1>(b);\n      |       \
    \                          ^\nIn file included from /usr/include/c++/9/algorithm:60,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp7i0d8cb7.cpp:2:\n/usr/include/c++/9/utility:229:5:\
    \ note: candidate: \u2018template<long unsigned int _Int, class _Tp1, class _Tp2>\
    \ constexpr const typename std::tuple_element<_Int, std::pair<_Tp1, _Tp2> >::type&\
    \ std::get(const std::pair<_Tp1, _Tp2>&)\u2019\n  229 |     get(const std::pair<_Tp1,\
    \ _Tp2>& __in) noexcept\n      |     ^~~\n/usr/include/c++/9/utility:229:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmp7i0d8cb7.cpp:41:33:\
    \ note:   mismatched types \u2018const std::pair<_Tp1, _Tp2>\u2019 and \u2018\
    const long int\u2019\n   41 |             return std::get<1>(a) < std::get<1>(b);\n\
    \      |                                 ^\nIn file included from /usr/include/c++/9/algorithm:60,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp7i0d8cb7.cpp:2:\n/usr/include/c++/9/utility:234:5:\
    \ note: candidate: \u2018template<long unsigned int _Int, class _Tp1, class _Tp2>\
    \ constexpr const typename std::tuple_element<_Int, std::pair<_Tp1, _Tp2> >::type&&\
    \ std::get(const std::pair<_Tp1, _Tp2>&&)\u2019\n  234 |     get(const std::pair<_Tp1,\
    \ _Tp2>&& __in) noexcept\n      |     ^~~\n/usr/include/c++/9/utility:234:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmp7i0d8cb7.cpp:41:33:\
    \ note:   mismatched types \u2018const std::pair<_Tp1, _Tp2>\u2019 and \u2018\
    const long int\u2019\n   41 |             return std::get<1>(a) < std::get<1>(b);\n\
    \      |                                 ^\nIn file included from /usr/include/c++/9/algorithm:60,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp7i0d8cb7.cpp:2:\n/usr/include/c++/9/utility:243:5:\
    \ note: candidate: \u2018template<class _Tp, class _Up> constexpr _Tp& std::get(std::pair<_T1,\
    \ _T2>&)\u2019\n  243 |     get(pair<_Tp, _Up>& __p) noexcept\n      |     ^~~\n\
    /usr/include/c++/9/utility:243:5: note:   template argument deduction/substitution\
    \ failed:\n/usr/include/c++/9/utility:248:5: note: candidate: \u2018template<class\
    \ _Tp, class _Up> constexpr const _Tp& std::get(const std::pair<_T1, _T2>&)\u2019\
    \n  248 |     get(const pair<_Tp, _Up>& __p) noexcept\n      |     ^~~\n/usr/include/c++/9/utility:248:5:\
    \ note:   template argument deduction/substitution failed:\n/usr/include/c++/9/utility:253:5:\
    \ note: candidate: \u2018template<class _Tp, class _Up> constexpr _Tp&& std::get(std::pair<_T1,\
    \ _T2>&&)\u2019\n  253 |     get(pair<_Tp, _Up>&& __p) noexcept\n      |     ^~~\n\
    /usr/include/c++/9/utility:253:5: note:   template argument deduction/substitution\
    \ failed:\n/usr/include/c++/9/utility:258:5: note: candidate: \u2018template<class\
    \ _Tp, class _Up> constexpr const _Tp&& std::get(const std::pair<_T1, _T2>&&)\u2019\
    \n  258 |     get(const pair<_Tp, _Up>&& __p) noexcept\n      |     ^~~\n/usr/include/c++/9/utility:258:5:\
    \ note:   template argument deduction/substitution failed:\n/usr/include/c++/9/utility:263:5:\
    \ note: candidate: \u2018template<class _Tp, class _Up> constexpr _Tp& std::get(std::pair<_Up,\
    \ _Tp>&)\u2019\n  263 |     get(pair<_Up, _Tp>& __p) noexcept\n      |     ^~~\n\
    /usr/include/c++/9/utility:263:5: note:   template argument deduction/substitution\
    \ failed:\n/usr/include/c++/9/utility:268:5: note: candidate: \u2018template<class\
    \ _Tp, class _Up> constexpr const _Tp& std::get(const std::pair<_Up, _Tp>&)\u2019\
    \n  268 |     get(const pair<_Up, _Tp>& __p) noexcept\n      |     ^~~\n/usr/include/c++/9/utility:268:5:\
    \ note:   template argument deduction/substitution failed:\n/usr/include/c++/9/utility:273:5:\
    \ note: candidate: \u2018template<class _Tp, class _Up> constexpr _Tp&& std::get(std::pair<_Up,\
    \ _Tp>&&)\u2019\n  273 |     get(pair<_Up, _Tp>&& __p) noexcept\n      |     ^~~\n\
    /usr/include/c++/9/utility:273:5: note:   template argument deduction/substitution\
    \ failed:\n/usr/include/c++/9/utility:278:5: note: candidate: \u2018template<class\
    \ _Tp, class _Up> constexpr const _Tp&& std::get(const std::pair<_Up, _Tp>&&)\u2019\
    \n  278 |     get(const pair<_Up, _Tp>&& __p) noexcept\n      |     ^~~\n/usr/include/c++/9/utility:278:5:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/9/tuple:39,\n                 from /usr/include/c++/9/functional:54,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmp7i0d8cb7.cpp:2:\n/usr/include/c++/9/array:307:5:\
    \ note: candidate: \u2018template<long unsigned int _Int, class _Tp, long unsigned\
    \ int _Nm> constexpr _Tp& std::get(std::array<_Tp, _Nm>&)\u2019\n  307 |     get(array<_Tp,\
    \ _Nm>& __arr) noexcept\n      |     ^~~\n/usr/include/c++/9/array:307:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmp7i0d8cb7.cpp:41:33:\
    \ note:   mismatched types \u2018std::array<_Tp, _Nm>\u2019 and \u2018const long\
    \ int\u2019\n   41 |             return std::get<1>(a) < std::get<1>(b);\n   \
    \   |                                 ^\nIn file included from /usr/include/c++/9/tuple:39,\n\
    \                 from /usr/include/c++/9/functional:54,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n                 from\
    \ /tmp/tmp7i0d8cb7.cpp:2:\n/usr/include/c++/9/array:316:5: note: candidate: \u2018\
    template<long unsigned int _Int, class _Tp, long unsigned int _Nm> constexpr _Tp&&\
    \ std::get(std::array<_Tp, _Nm>&&)\u2019\n  316 |     get(array<_Tp, _Nm>&& __arr)\
    \ noexcept\n      |     ^~~\n/usr/include/c++/9/array:316:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmp7i0d8cb7.cpp:41:33: note: \
    \  mismatched types \u2018std::array<_Tp, _Nm>\u2019 and \u2018const long int\u2019\
    \n   41 |             return std::get<1>(a) < std::get<1>(b);\n      |       \
    \                          ^\nIn file included from /usr/include/c++/9/tuple:39,\n\
    \                 from /usr/include/c++/9/functional:54,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n                 from\
    \ /tmp/tmp7i0d8cb7.cpp:2:\n/usr/include/c++/9/array:324:5: note: candidate: \u2018\
    template<long unsigned int _Int, class _Tp, long unsigned int _Nm> constexpr const\
    \ _Tp& std::get(const std::array<_Tp, _Nm>&)\u2019\n  324 |     get(const array<_Tp,\
    \ _Nm>& __arr) noexcept\n      |     ^~~\n/usr/include/c++/9/array:324:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmp7i0d8cb7.cpp:41:33:\
    \ note:   mismatched types \u2018const std::array<_Tp, _Nm>\u2019 and \u2018const\
    \ long int\u2019\n   41 |             return std::get<1>(a) < std::get<1>(b);\n\
    \      |                                 ^\nIn file included from /usr/include/c++/9/tuple:39,\n\
    \                 from /usr/include/c++/9/functional:54,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n                 from\
    \ /tmp/tmp7i0d8cb7.cpp:2:\n/usr/include/c++/9/array:333:5: note: candidate: \u2018\
    template<long unsigned int _Int, class _Tp, long unsigned int _Nm> constexpr const\
    \ _Tp&& std::get(const std::array<_Tp, _Nm>&&)\u2019\n  333 |     get(const array<_Tp,\
    \ _Nm>&& __arr) noexcept\n      |     ^~~\n/usr/include/c++/9/array:333:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmp7i0d8cb7.cpp:41:33:\
    \ note:   mismatched types \u2018const std::array<_Tp, _Nm>\u2019 and \u2018const\
    \ long int\u2019\n   41 |             return std::get<1>(a) < std::get<1>(b);\n\
    \      |                                 ^\nIn file included from /usr/include/c++/9/functional:54,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmp7i0d8cb7.cpp:2:\n/usr/include/c++/9/tuple:1320:5:\
    \ note: candidate: \u2018template<long unsigned int __i, class ... _Elements>\
    \ constexpr std::__tuple_element_t<__i, std::tuple<_Elements ...> >& std::get(std::tuple<_Elements\
    \ ...>&)\u2019\n 1320 |     get(tuple<_Elements...>& __t) noexcept\n      |  \
    \   ^~~\n/usr/include/c++/9/tuple:1320:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp7i0d8cb7.cpp:41:33: note:   mismatched types \u2018std::tuple<_Elements\
    \ ...>\u2019 and \u2018const long int\u2019\n   41 |             return std::get<1>(a)\
    \ < std::get<1>(b);\n      |                                 ^\nIn file included\
    \ from /usr/include/c++/9/functional:54,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmp7i0d8cb7.cpp:2:\n/usr/include/c++/9/tuple:1326:5:\
    \ note: candidate: \u2018template<long unsigned int __i, class ... _Elements>\
    \ constexpr std::__tuple_element_t<__i, std::tuple<_Elements ...> >& std::get(const\
    \ std::tuple<_Elements ...>&)\u2019\n 1326 |     get(const tuple<_Elements...>&\
    \ __t) noexcept\n      |     ^~~\n/usr/include/c++/9/tuple:1326:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmp7i0d8cb7.cpp:41:33: note: \
    \  mismatched types \u2018const std::tuple<_Elements ...>\u2019 and \u2018const\
    \ long int\u2019\n   41 |             return std::get<1>(a) < std::get<1>(b);\n\
    \      |                                 ^\nIn file included from /usr/include/c++/9/functional:54,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmp7i0d8cb7.cpp:2:\n/usr/include/c++/9/tuple:1332:5:\
    \ note: candidate: \u2018template<long unsigned int __i, class ... _Elements>\
    \ constexpr std::__tuple_element_t<__i, std::tuple<_Elements ...> >&& std::get(std::tuple<_Elements\
    \ ...>&&)\u2019\n 1332 |     get(tuple<_Elements...>&& __t) noexcept\n      |\
    \     ^~~\n/usr/include/c++/9/tuple:1332:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp7i0d8cb7.cpp:41:33: note:   mismatched types \u2018std::tuple<_Elements\
    \ ...>\u2019 and \u2018const long int\u2019\n   41 |             return std::get<1>(a)\
    \ < std::get<1>(b);\n      |                                 ^\nIn file included\
    \ from /usr/include/c++/9/functional:54,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmp7i0d8cb7.cpp:2:\n/usr/include/c++/9/tuple:1341:5:\
    \ note: candidate: \u2018template<long unsigned int __i, class ... _Elements>\
    \ constexpr std::__tuple_element_t<__i, std::tuple<_Elements ...> >&& std::get(const\
    \ std::tuple<_Elements ...>&&)\u2019\n 1341 |     get(const tuple<_Elements...>&&\
    \ __t) noexcept\n      |     ^~~\n/usr/include/c++/9/tuple:1341:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmp7i0d8cb7.cpp:41:33: note: \
    \  mismatched types \u2018const std::tuple<_Elements ...>\u2019 and \u2018const\
    \ long int\u2019\n   41 |             return std::get<1>(a) < std::get<1>(b);\n\
    \      |                                 ^\nIn file included from /usr/include/c++/9/functional:54,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmp7i0d8cb7.cpp:2:\n/usr/include/c++/9/tuple:1364:5:\
    \ note: candidate: \u2018template<class _Tp, class ... _Types> constexpr _Tp&\
    \ std::get(std::tuple<_Elements ...>&)\u2019\n 1364 |     get(tuple<_Types...>&\
    \ __t) noexcept\n      |     ^~~\n/usr/include/c++/9/tuple:1364:5: note:   template\
    \ argument deduction/substitution failed:\n/usr/include/c++/9/tuple:1370:5: note:\
    \ candidate: \u2018template<class _Tp, class ... _Types> constexpr _Tp&& std::get(std::tuple<_Elements\
    \ ...>&&)\u2019\n 1370 |     get(tuple<_Types...>&& __t) noexcept\n      |   \
    \  ^~~\n/usr/include/c++/9/tuple:1370:5: note:   template argument deduction/substitution\
    \ failed:\n/usr/include/c++/9/tuple:1376:5: note: candidate: \u2018template<class\
    \ _Tp, class ... _Types> constexpr const _Tp& std::get(const std::tuple<_Elements\
    \ ...>&)\u2019\n 1376 |     get(const tuple<_Types...>& __t) noexcept\n      |\
    \     ^~~\n/usr/include/c++/9/tuple:1376:5: note:   template argument deduction/substitution\
    \ failed:\n/usr/include/c++/9/tuple:1383:5: note: candidate: \u2018template<class\
    \ _Tp, class ... _Types> constexpr const _Tp&& std::get(const std::tuple<_Elements\
    \ ...>&&)\u2019\n 1383 |     get(const tuple<_Types...>&& __t) noexcept\n    \
    \  |     ^~~\n/usr/include/c++/9/tuple:1383:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp7i0d8cb7.cpp:41:50: error: no matching function for call to\
    \ \u2018get<1>(const long int&)\u2019\n   41 |             return std::get<1>(a)\
    \ < std::get<1>(b);\n      |                                                 \
    \ ^\nIn file included from /usr/include/c++/9/algorithm:60,\n                \
    \ from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n               \
    \  from /tmp/tmp7i0d8cb7.cpp:2:\n/usr/include/c++/9/utility:219:5: note: candidate:\
    \ \u2018template<long unsigned int _Int, class _Tp1, class _Tp2> constexpr typename\
    \ std::tuple_element<_Int, std::pair<_Tp1, _Tp2> >::type& std::get(std::pair<_Tp1,\
    \ _Tp2>&)\u2019\n  219 |     get(std::pair<_Tp1, _Tp2>& __in) noexcept\n     \
    \ |     ^~~\n/usr/include/c++/9/utility:219:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp7i0d8cb7.cpp:41:50: note:   mismatched types \u2018std::pair<_Tp1,\
    \ _Tp2>\u2019 and \u2018const long int\u2019\n   41 |             return std::get<1>(a)\
    \ < std::get<1>(b);\n      |                                                 \
    \ ^\nIn file included from /usr/include/c++/9/algorithm:60,\n                \
    \ from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n               \
    \  from /tmp/tmp7i0d8cb7.cpp:2:\n/usr/include/c++/9/utility:224:5: note: candidate:\
    \ \u2018template<long unsigned int _Int, class _Tp1, class _Tp2> constexpr typename\
    \ std::tuple_element<_Int, std::pair<_Tp1, _Tp2> >::type&& std::get(std::pair<_Tp1,\
    \ _Tp2>&&)\u2019\n  224 |     get(std::pair<_Tp1, _Tp2>&& __in) noexcept\n   \
    \   |     ^~~\n/usr/include/c++/9/utility:224:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp7i0d8cb7.cpp:41:50: note:   mismatched types \u2018std::pair<_Tp1,\
    \ _Tp2>\u2019 and \u2018const long int\u2019\n   41 |             return std::get<1>(a)\
    \ < std::get<1>(b);\n      |                                                 \
    \ ^\nIn file included from /usr/include/c++/9/algorithm:60,\n                \
    \ from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n               \
    \  from /tmp/tmp7i0d8cb7.cpp:2:\n/usr/include/c++/9/utility:229:5: note: candidate:\
    \ \u2018template<long unsigned int _Int, class _Tp1, class _Tp2> constexpr const\
    \ typename std::tuple_element<_Int, std::pair<_Tp1, _Tp2> >::type& std::get(const\
    \ std::pair<_Tp1, _Tp2>&)\u2019\n  229 |     get(const std::pair<_Tp1, _Tp2>&\
    \ __in) noexcept\n      |     ^~~\n/usr/include/c++/9/utility:229:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmp7i0d8cb7.cpp:41:50: note: \
    \  mismatched types \u2018const std::pair<_Tp1, _Tp2>\u2019 and \u2018const long\
    \ int\u2019\n   41 |             return std::get<1>(a) < std::get<1>(b);\n   \
    \   |                                                  ^\nIn file included from\
    \ /usr/include/c++/9/algorithm:60,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp7i0d8cb7.cpp:2:\n/usr/include/c++/9/utility:234:5:\
    \ note: candidate: \u2018template<long unsigned int _Int, class _Tp1, class _Tp2>\
    \ constexpr const typename std::tuple_element<_Int, std::pair<_Tp1, _Tp2> >::type&&\
    \ std::get(const std::pair<_Tp1, _Tp2>&&)\u2019\n  234 |     get(const std::pair<_Tp1,\
    \ _Tp2>&& __in) noexcept\n      |     ^~~\n/usr/include/c++/9/utility:234:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmp7i0d8cb7.cpp:41:50:\
    \ note:   mismatched types \u2018const std::pair<_Tp1, _Tp2>\u2019 and \u2018\
    const long int\u2019\n   41 |             return std::get<1>(a) < std::get<1>(b);\n\
    \      |                                                  ^\nIn file included\
    \ from /usr/include/c++/9/algorithm:60,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp7i0d8cb7.cpp:2:\n/usr/include/c++/9/utility:243:5:\
    \ note: candidate: \u2018template<class _Tp, class _Up> constexpr _Tp& std::get(std::pair<_T1,\
    \ _T2>&)\u2019\n  243 |     get(pair<_Tp, _Up>& __p) noexcept\n      |     ^~~\n\
    /usr/include/c++/9/utility:243:5: note:   template argument deduction/substitution\
    \ failed:\n/usr/include/c++/9/utility:248:5: note: candidate: \u2018template<class\
    \ _Tp, class _Up> constexpr const _Tp& std::get(const std::pair<_T1, _T2>&)\u2019\
    \n  248 |     get(const pair<_Tp, _Up>& __p) noexcept\n      |     ^~~\n/usr/include/c++/9/utility:248:5:\
    \ note:   template argument deduction/substitution failed:\n/usr/include/c++/9/utility:253:5:\
    \ note: candidate: \u2018template<class _Tp, class _Up> constexpr _Tp&& std::get(std::pair<_T1,\
    \ _T2>&&)\u2019\n  253 |     get(pair<_Tp, _Up>&& __p) noexcept\n      |     ^~~\n\
    /usr/include/c++/9/utility:253:5: note:   template argument deduction/substitution\
    \ failed:\n/usr/include/c++/9/utility:258:5: note: candidate: \u2018template<class\
    \ _Tp, class _Up> constexpr const _Tp&& std::get(const std::pair<_T1, _T2>&&)\u2019\
    \n  258 |     get(const pair<_Tp, _Up>&& __p) noexcept\n      |     ^~~\n/usr/include/c++/9/utility:258:5:\
    \ note:   template argument deduction/substitution failed:\n/usr/include/c++/9/utility:263:5:\
    \ note: candidate: \u2018template<class _Tp, class _Up> constexpr _Tp& std::get(std::pair<_Up,\
    \ _Tp>&)\u2019\n  263 |     get(pair<_Up, _Tp>& __p) noexcept\n      |     ^~~\n\
    /usr/include/c++/9/utility:263:5: note:   template argument deduction/substitution\
    \ failed:\n/usr/include/c++/9/utility:268:5: note: candidate: \u2018template<class\
    \ _Tp, class _Up> constexpr const _Tp& std::get(const std::pair<_Up, _Tp>&)\u2019\
    \n  268 |     get(const pair<_Up, _Tp>& __p) noexcept\n      |     ^~~\n/usr/include/c++/9/utility:268:5:\
    \ note:   template argument deduction/substitution failed:\n/usr/include/c++/9/utility:273:5:\
    \ note: candidate: \u2018template<class _Tp, class _Up> constexpr _Tp&& std::get(std::pair<_Up,\
    \ _Tp>&&)\u2019\n  273 |     get(pair<_Up, _Tp>&& __p) noexcept\n      |     ^~~\n\
    /usr/include/c++/9/utility:273:5: note:   template argument deduction/substitution\
    \ failed:\n/usr/include/c++/9/utility:278:5: note: candidate: \u2018template<class\
    \ _Tp, class _Up> constexpr const _Tp&& std::get(const std::pair<_Up, _Tp>&&)\u2019\
    \n  278 |     get(const pair<_Up, _Tp>&& __p) noexcept\n      |     ^~~\n/usr/include/c++/9/utility:278:5:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/9/tuple:39,\n                 from /usr/include/c++/9/functional:54,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmp7i0d8cb7.cpp:2:\n/usr/include/c++/9/array:307:5:\
    \ note: candidate: \u2018template<long unsigned int _Int, class _Tp, long unsigned\
    \ int _Nm> constexpr _Tp& std::get(std::array<_Tp, _Nm>&)\u2019\n  307 |     get(array<_Tp,\
    \ _Nm>& __arr) noexcept\n      |     ^~~\n/usr/include/c++/9/array:307:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmp7i0d8cb7.cpp:41:50:\
    \ note:   mismatched types \u2018std::array<_Tp, _Nm>\u2019 and \u2018const long\
    \ int\u2019\n   41 |             return std::get<1>(a) < std::get<1>(b);\n   \
    \   |                                                  ^\nIn file included from\
    \ /usr/include/c++/9/tuple:39,\n                 from /usr/include/c++/9/functional:54,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmp7i0d8cb7.cpp:2:\n/usr/include/c++/9/array:316:5:\
    \ note: candidate: \u2018template<long unsigned int _Int, class _Tp, long unsigned\
    \ int _Nm> constexpr _Tp&& std::get(std::array<_Tp, _Nm>&&)\u2019\n  316 |   \
    \  get(array<_Tp, _Nm>&& __arr) noexcept\n      |     ^~~\n/usr/include/c++/9/array:316:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp7i0d8cb7.cpp:41:50:\
    \ note:   mismatched types \u2018std::array<_Tp, _Nm>\u2019 and \u2018const long\
    \ int\u2019\n   41 |             return std::get<1>(a) < std::get<1>(b);\n   \
    \   |                                                  ^\nIn file included from\
    \ /usr/include/c++/9/tuple:39,\n                 from /usr/include/c++/9/functional:54,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmp7i0d8cb7.cpp:2:\n/usr/include/c++/9/array:324:5:\
    \ note: candidate: \u2018template<long unsigned int _Int, class _Tp, long unsigned\
    \ int _Nm> constexpr const _Tp& std::get(const std::array<_Tp, _Nm>&)\u2019\n\
    \  324 |     get(const array<_Tp, _Nm>& __arr) noexcept\n      |     ^~~\n/usr/include/c++/9/array:324:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp7i0d8cb7.cpp:41:50:\
    \ note:   mismatched types \u2018const std::array<_Tp, _Nm>\u2019 and \u2018const\
    \ long int\u2019\n   41 |             return std::get<1>(a) < std::get<1>(b);\n\
    \      |                                                  ^\nIn file included\
    \ from /usr/include/c++/9/tuple:39,\n                 from /usr/include/c++/9/functional:54,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmp7i0d8cb7.cpp:2:\n/usr/include/c++/9/array:333:5:\
    \ note: candidate: \u2018template<long unsigned int _Int, class _Tp, long unsigned\
    \ int _Nm> constexpr const _Tp&& std::get(const std::array<_Tp, _Nm>&&)\u2019\n\
    \  333 |     get(const array<_Tp, _Nm>&& __arr) noexcept\n      |     ^~~\n/usr/include/c++/9/array:333:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp7i0d8cb7.cpp:41:50:\
    \ note:   mismatched types \u2018const std::array<_Tp, _Nm>\u2019 and \u2018const\
    \ long int\u2019\n   41 |             return std::get<1>(a) < std::get<1>(b);\n\
    \      |                                                  ^\nIn file included\
    \ from /usr/include/c++/9/functional:54,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmp7i0d8cb7.cpp:2:\n/usr/include/c++/9/tuple:1320:5:\
    \ note: candidate: \u2018template<long unsigned int __i, class ... _Elements>\
    \ constexpr std::__tuple_element_t<__i, std::tuple<_Elements ...> >& std::get(std::tuple<_Elements\
    \ ...>&)\u2019\n 1320 |     get(tuple<_Elements...>& __t) noexcept\n      |  \
    \   ^~~\n/usr/include/c++/9/tuple:1320:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp7i0d8cb7.cpp:41:50: note:   mismatched types \u2018std::tuple<_Elements\
    \ ...>\u2019 and \u2018const long int\u2019\n   41 |             return std::get<1>(a)\
    \ < std::get<1>(b);\n      |                                                 \
    \ ^\nIn file included from /usr/include/c++/9/functional:54,\n               \
    \  from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n              \
    \   from /tmp/tmp7i0d8cb7.cpp:2:\n/usr/include/c++/9/tuple:1326:5: note: candidate:\
    \ \u2018template<long unsigned int __i, class ... _Elements> constexpr std::__tuple_element_t<__i,\
    \ std::tuple<_Elements ...> >& std::get(const std::tuple<_Elements ...>&)\u2019\
    \n 1326 |     get(const tuple<_Elements...>& __t) noexcept\n      |     ^~~\n\
    /usr/include/c++/9/tuple:1326:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp7i0d8cb7.cpp:41:50: note:   mismatched types \u2018const std::tuple<_Elements\
    \ ...>\u2019 and \u2018const long int\u2019\n   41 |             return std::get<1>(a)\
    \ < std::get<1>(b);\n      |                                                 \
    \ ^\nIn file included from /usr/include/c++/9/functional:54,\n               \
    \  from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n              \
    \   from /tmp/tmp7i0d8cb7.cpp:2:\n/usr/include/c++/9/tuple:1332:5: note: candidate:\
    \ \u2018template<long unsigned int __i, class ... _Elements> constexpr std::__tuple_element_t<__i,\
    \ std::tuple<_Elements ...> >&& std::get(std::tuple<_Elements ...>&&)\u2019\n\
    \ 1332 |     get(tuple<_Elements...>&& __t) noexcept\n      |     ^~~\n/usr/include/c++/9/tuple:1332:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp7i0d8cb7.cpp:41:50:\
    \ note:   mismatched types \u2018std::tuple<_Elements ...>\u2019 and \u2018const\
    \ long int\u2019\n   41 |             return std::get<1>(a) < std::get<1>(b);\n\
    \      |                                                  ^\nIn file included\
    \ from /usr/include/c++/9/functional:54,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmp7i0d8cb7.cpp:2:\n/usr/include/c++/9/tuple:1341:5:\
    \ note: candidate: \u2018template<long unsigned int __i, class ... _Elements>\
    \ constexpr std::__tuple_element_t<__i, std::tuple<_Elements ...> >&& std::get(const\
    \ std::tuple<_Elements ...>&&)\u2019\n 1341 |     get(const tuple<_Elements...>&&\
    \ __t) noexcept\n      |     ^~~\n/usr/include/c++/9/tuple:1341:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmp7i0d8cb7.cpp:41:50: note: \
    \  mismatched types \u2018const std::tuple<_Elements ...>\u2019 and \u2018const\
    \ long int\u2019\n   41 |             return std::get<1>(a) < std::get<1>(b);\n\
    \      |                                                  ^\nIn file included\
    \ from /usr/include/c++/9/functional:54,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmp7i0d8cb7.cpp:2:\n/usr/include/c++/9/tuple:1364:5:\
    \ note: candidate: \u2018template<class _Tp, class ... _Types> constexpr _Tp&\
    \ std::get(std::tuple<_Elements ...>&)\u2019\n 1364 |     get(tuple<_Types...>&\
    \ __t) noexcept\n      |     ^~~\n/usr/include/c++/9/tuple:1364:5: note:   template\
    \ argument deduction/substitution failed:\n/usr/include/c++/9/tuple:1370:5: note:\
    \ candidate: \u2018template<class _Tp, class ... _Types> constexpr _Tp&& std::get(std::tuple<_Elements\
    \ ...>&&)\u2019\n 1370 |     get(tuple<_Types...>&& __t) noexcept\n      |   \
    \  ^~~\n/usr/include/c++/9/tuple:1370:5: note:   template argument deduction/substitution\
    \ failed:\n/usr/include/c++/9/tuple:1376:5: note: candidate: \u2018template<class\
    \ _Tp, class ... _Types> constexpr const _Tp& std::get(const std::tuple<_Elements\
    \ ...>&)\u2019\n 1376 |     get(const tuple<_Types...>& __t) noexcept\n      |\
    \     ^~~\n/usr/include/c++/9/tuple:1376:5: note:   template argument deduction/substitution\
    \ failed:\n/usr/include/c++/9/tuple:1383:5: note: candidate: \u2018template<class\
    \ _Tp, class ... _Types> constexpr const _Tp&& std::get(const std::tuple<_Elements\
    \ ...>&&)\u2019\n 1383 |     get(const tuple<_Types...>&& __t) noexcept\n    \
    \  |     ^~~\n/usr/include/c++/9/tuple:1383:5: note:   template argument deduction/substitution\
    \ failed:\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    std::vector<std::tuple<long, long>> res;\n    std::vector<long>\
    \ row;\n    std::vector<long> col;\n    long row_index = 0;\n    long col_index\
    \ = 0;\n    long row_size = lst.size();\n    long col_size = lst[0].size();\n\
    \    for (long i = 0; i < row_size; i++) {\n        row.push_back(i);\n    }\n\
    \    for (long i = 0; i < row_size; i++) {\n        col.push_back(i);\n    }\n\
    \    for (long i = 0; i < row_size; i++) {\n        for (long j = 0; j < col_size;\
    \ j++) {\n            if (lst[i][j] == x) {\n                res.push_back(std::make_tuple(i,\
    \ j));\n            }\n        }\n    }\n    std::sort(res.begin(), res.end(),\
    \ [](std::tuple<long, long> a, std::tuple<long, long> b) {\n        return std::get<0>(a)\
    \ < std::get<0>(b);\n    });\n    std::sort(res.begin(), res.end(), [](std::tuple<long,\
    \ long> a, std::tuple<long, long> b) {\n        return std::get<1>(a) > std::get<1>(b);\n\
    \    });\n    for (long i = 0; i < row_size; i++) {\n        std::sort(res.begin()\
    \ + i, res.end(), [](std::tuple<long, long> a, std::tuple<long, long> b) {\n \
    \           return std::get<0>(a) < std::get<0>(b);\n        });\n        std::sort(res.begin()\
    \ + i, res.end(), [](std::tuple<long, long> a, std::tuple<long, long> b) {\n \
    \           return std::get<1>(a) > std::get<1>(b);\n        });\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = get_row;\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "tmpcuntps1a: /tmp/tmpcuntps1a.cpp:58: int main(): Assertion `candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    std::vector<std::tuple<long, long>> res;\n    if (lst.size()\
    \ == 0) {\n        return res;\n    }\n    std::vector<std::tuple<long, long>>\
    \ row;\n    for (auto &v : lst) {\n        row.emplace_back(std::make_tuple(v.size(),\
    \ v.size()));\n    }\n    std::sort(row.begin(), row.end(), [](const std::tuple<long,\
    \ long> &a, const std::tuple<long, long> &b) {\n        return std::get<0>(a)\
    \ < std::get<0>(b);\n    });\n    std::sort(row.begin(), row.end(), [](const std::tuple<long,\
    \ long> &a, const std::tuple<long, long> &b) {\n        return std::get<1>(a)\
    \ < std::get<1>(b);\n    });\n    for (auto &v : row) {\n        auto it = std::find(v.begin(),\
    \ v.end(), x);\n        if (it != v.end()) {\n            res.emplace_back(std::make_tuple(std::get<0>(*it),\
    \ std::get<1>(*it)));\n        }\n    }\n    return res;\n}\nint main() {\n  \
    \  auto candidate = get_row;\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpmq5n6zyr.cpp: In function \u2018std::vector<std::tuple<long int,\
    \ long int> > get_row(std::vector<std::vector<long int> >, long int)\u2019:\n\
    /tmp/tmpmq5n6zyr.cpp:35:31: error: \u2018class std::tuple<long int, long int>\u2019\
    \ has no member named \u2018begin\u2019\n   35 |         auto it = std::find(v.begin(),\
    \ v.end(), x);\n      |                               ^~~~~\n/tmp/tmpmq5n6zyr.cpp:35:42:\
    \ error: \u2018class std::tuple<long int, long int>\u2019 has no member named\
    \ \u2018end\u2019\n   35 |         auto it = std::find(v.begin(), v.end(), x);\n\
    \      |                                          ^~~\n/tmp/tmpmq5n6zyr.cpp:36:21:\
    \ error: \u2018class std::tuple<long int, long int>\u2019 has no member named\
    \ \u2018end\u2019\n   36 |         if (it != v.end()) {\n      |             \
    \        ^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    // Write your code here\n    std::vector<std::tuple<long,\
    \ long>> res;\n    for(auto &row : lst){\n        for(auto &col : row){\n    \
    \        if(col == x){\n                res.emplace_back(std::make_tuple(row.size()\
    \ - 1, col.size() - 1));\n            }\n        }\n    }\n    std::sort(res.begin(),\
    \ res.end(), [](auto &a, auto &b){return std::get<0>(a) < std::get<0>(b);});\n\
    \    std::sort(res.begin(), res.end(), [](auto &a, auto &b){return std::get<1>(a)\
    \ > std::get<1>(b);});\n    return res;\n}\nint main() {\n    auto candidate =\
    \ get_row;\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp46l_tw89.cpp: In function \u2018std::vector<std::tuple<long int,\
    \ long int> > get_row(std::vector<std::vector<long int> >, long int)\u2019:\n\
    /tmp/tmp46l_tw89.cpp:25:70: error: request for member \u2018size\u2019 in \u2018\
    col\u2019, which is of non-class type \u2018long int\u2019\n   25 |          \
    \       res.emplace_back(std::make_tuple(row.size() - 1, col.size() - 1));\n \
    \     |                                                                      ^~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    std::vector<std::tuple<long, long>> res;\n    long row =\
    \ 0;\n    long col = 0;\n    long cnt = 0;\n    for(auto &row : lst) {\n     \
    \   for(auto &col : row) {\n            if(cnt == x) {\n                res.push_back(std::make_tuple(row,\
    \ col));\n            }\n            cnt++;\n        }\n    }\n    std::sort(res.begin(),\
    \ res.end(), [](std::tuple<long, long> a, std::tuple<long, long> b) { return std::get<0>(a)\
    \ < std::get<0>(b); });\n    std::sort(res.begin(), res.end(), [](std::tuple<long,\
    \ long> a, std::tuple<long, long> b) { return std::get<1>(a) > std::get<1>(b);\
    \ });\n    return res;\n}\nint main() {\n    auto candidate = get_row;\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpo2wllvpw.cpp: In function \u2018std::vector<std::tuple<long int,\
    \ long int> > get_row(std::vector<std::vector<long int> >, long int)\u2019:\n\
    /tmp/tmpo2wllvpw.cpp:27:56: error: no matching function for call to \u2018std::vector<std::tuple<long\
    \ int, long int> >::push_back(std::tuple<std::vector<long int, std::allocator<long\
    \ int> >, long int>)\u2019\n   27 |                 res.push_back(std::make_tuple(row,\
    \ col));\n      |                                                        ^\nIn\
    \ file included from /usr/include/c++/9/vector:67,\n                 from /usr/include/c++/9/queue:61,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:86,\n\
    \                 from /tmp/tmpo2wllvpw.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::tuple<long int, long int>; _Alloc = std::allocator<std::tuple<long\
    \ int, long int> >; std::vector<_Tp, _Alloc>::value_type = std::tuple<long int,\
    \ long int>]\u2019\n 1184 |       push_back(const value_type& __x)\n      |  \
    \     ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1184:35: note:   no known\
    \ conversion for argument 1 from \u2018std::tuple<std::vector<long int, std::allocator<long\
    \ int> >, long int>\u2019 to \u2018const value_type&\u2019 {aka \u2018const std::tuple<long\
    \ int, long int>&\u2019}\n 1184 |       push_back(const value_type& __x)\n   \
    \   |                 ~~~~~~~~~~~~~~~~~~^~~\n/usr/include/c++/9/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = std::tuple<long int, long int>; _Alloc =\
    \ std::allocator<std::tuple<long int, long int> >; std::vector<_Tp, _Alloc>::value_type\
    \ = std::tuple<long int, long int>]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018std::tuple<std::vector<long\
    \ int, std::allocator<long int> >, long int>\u2019 to \u2018std::vector<std::tuple<long\
    \ int, long int> >::value_type&&\u2019 {aka \u2018std::tuple<long int, long int>&&\u2019\
    }\n 1200 |       push_back(value_type&& __x)\n      |                 ~~~~~~~~~~~~~^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    std::vector<std::tuple<long, long>> res;\n    long n = lst.size();\n\
    \    long m = lst[0].size();\n    long i = 0;\n    long j = 0;\n    long k = 0;\n\
    \    long l = 0;\n    long m1 = m - 1;\n    long m2 = m - 2;\n    long m3 = m\
    \ - 3;\n    long m4 = m - 4;\n    long m5 = m - 5;\n    long m6 = m - 6;\n   \
    \ long m7 = m - 7;\n    long m8 = m - 8;\n    long m9 = m - 9;\n    long m10 =\
    \ m - 10;\n    long m11 = m - 11;\n    long m12 = m - 12;\n    long m13 = m -\
    \ 13;\n    long m14 = m - 14;\n    long m15 = m - 15;\n    long m16 = m - 16;\n\
    \    long m17 = m - 17;\n    long m18 = m - 18;\n    long m19 = m - 19;\n    long\
    \ m20 = m - 20;\n    long m21 = m / 2;\n    long m22 = m / 2;\n    long m23 =\
    \ m / 2;\n    long m24 = m / 2;\n    long m25 = m / 2;\n    long m26 = m / 2;\n\
    \    long m27 = m / 2;\n    long m28 = m / 2;\n    long m29 = m / 2;\n    long\
    \ m30 = m / 2;\n    long m31 = m / 2;\n    long m32 = m / 2;\n    long m33 = m\
    \ / 2;\n    long m34 = m / 2;\n    long m35 = m / 2;\n    long m36 = m / 2;\n\
    \    long m37 = m / 2;\n    long m38 = m / 2;\n    long m39 = m / 2;\n    long\
    \ m40 = m / 2;\n    long m41 = m / 2;\n    long m42 = m / 2;\n    long m43 = m\
    \ / 2;\n    long m44 = m / 2;\n    long m45 = m / 2;\n    long m46 = m / 2;\n\
    \    long m47 = m / 2;\n    long m48 = m / 2;\n    long m49 = m / 2;\n    long\
    \ m50 = m / 2;\n    long m51 = m / 2;\n    long m52 = m / 2;\n    long m53 = m\
    \ / 2;\n    long m54 = m / 2;\n    long m55 = m / 2;\n    long m\n}\nint main()\
    \ {\n    auto candidate = get_row;\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzvtq0_y8.cpp: In function \u2018std::vector<std::tuple<long int,\
    \ long int> > get_row(std::vector<std::vector<long int> >, long int)\u2019:\n\
    /tmp/tmpzvtq0_y8.cpp:83:1: error: expected initializer before \u2018}\u2019 token\n\
    \   83 | }\n      | ^\n/tmp/tmpzvtq0_y8.cpp:83:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    // Write your code here\n    std::vector<std::tuple<long,\
    \ long>> res;\n    for(auto &row : lst) {\n        for(auto &col : row) {\n  \
    \          if(col == x) {\n                res.emplace_back(std::make_tuple(row.size()\
    \ - 1, col.size() - 1));\n            }\n        }\n    }\n    std::sort(res.begin(),\
    \ res.end(), [](auto &a, auto &b) { return std::get<0>(a) < std::get<0>(b); });\n\
    \    std::sort(res.begin(), res.end(), [](auto &a, auto &b) { return std::get<1>(a)\
    \ < std::get<1>(b); });\n    return res;\n}\nint main() {\n    auto candidate\
    \ = get_row;\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp269tsspx.cpp: In function \u2018std::vector<std::tuple<long int,\
    \ long int> > get_row(std::vector<std::vector<long int> >, long int)\u2019:\n\
    /tmp/tmp269tsspx.cpp:25:70: error: request for member \u2018size\u2019 in \u2018\
    col\u2019, which is of non-class type \u2018long int\u2019\n   25 |          \
    \       res.emplace_back(std::make_tuple(row.size() - 1, col.size() - 1));\n \
    \     |                                                                      ^~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    std::vector<std::tuple<long, long>> res;\n    std::vector<long>\
    \ row;\n    std::vector<long> col;\n    long row_index = 0;\n    long col_index\
    \ = 0;\n    for (auto &row : lst) {\n        row.clear();\n        col.clear();\n\
    \        for (auto &el : row) {\n            if (el == x) {\n                row.push_back(row_index);\n\
    \                col.push_back(col_index);\n            }\n        }\n       \
    \ row_index++;\n        col_index--;\n        res.push_back(std::make_tuple(std::move(row),\
    \ std::move(col)));\n    }\n    std::sort(res.begin(), res.end(), [](const std::tuple<long,\
    \ long> &a, const std::tuple<long, long> &b) {\n        return std::get<0>(a)\
    \ < std::get<0>(b);\n    });\n    std::sort(res.begin(), res.end(), [](const std::tuple<long,\
    \ long> &a, const std::tuple<long, long> &b) {\n        return std::get<1>(a)\
    \ < std::get<1>(b);\n    });\n    return res;\n}\nint main() {\n    auto candidate\
    \ = get_row;\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmprj5yhob1.cpp: In function \u2018std::vector<std::tuple<long int,\
    \ long int> > get_row(std::vector<std::vector<long int> >, long int)\u2019:\n\
    /tmp/tmprj5yhob1.cpp:36:70: error: no matching function for call to \u2018std::vector<std::tuple<long\
    \ int, long int> >::push_back(std::tuple<std::vector<long int, std::allocator<long\
    \ int> >, std::vector<long int, std::allocator<long int> > >)\u2019\n   36 | \
    \        res.push_back(std::make_tuple(std::move(row), std::move(col)));\n   \
    \   |                                                                      ^\n\
    In file included from /usr/include/c++/9/vector:67,\n                 from /usr/include/c++/9/queue:61,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:86,\n\
    \                 from /tmp/tmprj5yhob1.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::tuple<long int, long int>; _Alloc = std::allocator<std::tuple<long\
    \ int, long int> >; std::vector<_Tp, _Alloc>::value_type = std::tuple<long int,\
    \ long int>]\u2019\n 1184 |       push_back(const value_type& __x)\n      |  \
    \     ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1184:35: note:   no known\
    \ conversion for argument 1 from \u2018std::tuple<std::vector<long int, std::allocator<long\
    \ int> >, std::vector<long int, std::allocator<long int> > >\u2019 to \u2018const\
    \ value_type&\u2019 {aka \u2018const std::tuple<long int, long int>&\u2019}\n\
    \ 1184 |       push_back(const value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n\
    /usr/include/c++/9/bits/stl_vector.h:1200:7: note: candidate: \u2018void std::vector<_Tp,\
    \ _Alloc>::push_back(std::vector<_Tp, _Alloc>::value_type&&) [with _Tp = std::tuple<long\
    \ int, long int>; _Alloc = std::allocator<std::tuple<long int, long int> >; std::vector<_Tp,\
    \ _Alloc>::value_type = std::tuple<long int, long int>]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018std::tuple<std::vector<long\
    \ int, std::allocator<long int> >, std::vector<long int, std::allocator<long int>\
    \ > >\u2019 to \u2018std::vector<std::tuple<long int, long int> >::value_type&&\u2019\
    \ {aka \u2018std::tuple<long int, long int>&&\u2019}\n 1200 |       push_back(value_type&&\
    \ __x)\n      |                 ~~~~~~~~~~~~~^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    // Your code here\n    std::vector<std::tuple<long, long>>\
    \ res;\n    for(auto &row : lst) {\n        for(auto &col : row) {\n         \
    \   if(col == x) {\n                res.push_back(std::make_tuple(row.size(),\
    \ col.size()));\n            }\n        }\n    }\n    std::sort(res.begin(), res.end(),\
    \ [](auto &a, auto &b) { return std::get<0>(a) > std::get<0>(b); });\n    std::sort(res.begin(),\
    \ res.end(), [](auto &a, auto &b) { return std::get<1>(a) > std::get<1>(b); });\n\
    \    return res;\n}\nint main() {\n    auto candidate = get_row;\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmphaq2p_5o.cpp: In function \u2018std::vector<std::tuple<long int,\
    \ long int> > get_row(std::vector<std::vector<long int> >, long int)\u2019:\n\
    /tmp/tmphaq2p_5o.cpp:25:63: error: request for member \u2018size\u2019 in \u2018\
    col\u2019, which is of non-class type \u2018long int\u2019\n   25 |          \
    \       res.push_back(std::make_tuple(row.size(), col.size()));\n      |     \
    \                                                          ^~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    // Your code here\n    std::vector<std::tuple<long, long>>\
    \ res;\n    for(auto &row : lst) {\n        for(auto &val : row) {\n         \
    \   if(val == x) {\n                res.push_back(std::make_tuple(row.size() -\
    \ 1, row.size() - 1));\n            }\n        }\n    }\n    std::sort(res.begin(),\
    \ res.end(), [](const std::tuple<long, long> &a, const std::tuple<long, long>\
    \ &b) { return std::get<0>(a) < std::get<0>(b); });\n    std::sort(res.begin(),\
    \ res.end(), [](const std::tuple<long, long> &a, const std::tuple<long, long>\
    \ &b) { return std::get<1>(a) > std::get<1>(b); });\n    return res;\n}\nint main()\
    \ {\n    auto candidate = get_row;\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "tmp9usfo0yi: /tmp/tmp9usfo0yi.cpp:35: int main(): Assertion `candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    std::vector<std::tuple<long, long>> res;\n    for(auto &row\
    \ : lst) {\n        for(auto &val : row) {\n            if(val == x) {\n     \
    \           res.emplace_back(row.size() - 1, row.size() - 1);\n            }\n\
    \        }\n    }\n    std::sort(res.begin(), res.end(), [](auto &a, auto &b)\
    \ { return std::get<0>(a) < std::get<0>(b); });\n    std::sort(res.begin(), res.end(),\
    \ [](auto &a, auto &b) { return std::get<1>(a) < std::get<1>(b); });\n    return\
    \ res;\n}\nint main() {\n    auto candidate = get_row;\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "tmppkdk6v8r: /tmp/tmppkdk6v8r.cpp:34: int main(): Assertion `candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    std::vector<std::tuple<long, long>> res;\n    for(auto &row\
    \ : lst) {\n        for(auto &col : row) {\n            if(col == x) {\n     \
    \           res.emplace_back(std::make_tuple(row.size() - 1, col.size() - 1));\n\
    \            }\n        }\n    }\n    std::sort(res.begin(), res.end(), [](const\
    \ std::tuple<long, long> &a, const std::tuple<long, long> &b) {\n        return\
    \ std::get<0>(a) < std::get<0>(b);\n    });\n    std::sort(res.begin(), res.end(),\
    \ [](const std::tuple<long, long> &a, const std::tuple<long, long> &b) {\n   \
    \     return std::get<1>(a) < std::get<1>(b);\n    });\n    return res;\n}\nint\
    \ main() {\n    auto candidate = get_row;\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdmj64kwx.cpp: In function \u2018std::vector<std::tuple<long int,\
    \ long int> > get_row(std::vector<std::vector<long int> >, long int)\u2019:\n\
    /tmp/tmpdmj64kwx.cpp:24:70: error: request for member \u2018size\u2019 in \u2018\
    col\u2019, which is of non-class type \u2018long int\u2019\n   24 |          \
    \       res.emplace_back(std::make_tuple(row.size() - 1, col.size() - 1));\n \
    \     |                                                                      ^~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    std::vector<std::tuple<long, long>> res;\n    for(auto &row\
    \ : lst) {\n        for(auto &col : row) {\n            if(col == x) {\n     \
    \           res.push_back(std::make_tuple(row.size() - 1, col.size() - 1));\n\
    \            }\n        }\n    }\n    std::sort(res.begin(), res.end(), [](const\
    \ std::tuple<long, long> &a, const std::tuple<long, long> &b) -> bool {\n    \
    \    return std::get<0>(a) < std::get<0>(b);\n    });\n    std::sort(res.begin(),\
    \ res.end(), [](const std::tuple<long, long> &a, const std::tuple<long, long>\
    \ &b) -> bool {\n        return std::get<1>(a) < std::get<1>(b);\n    });\n  \
    \  return res;\n}\nint main() {\n    auto candidate = get_row;\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpjoisn_0r.cpp: In function \u2018std::vector<std::tuple<long int,\
    \ long int> > get_row(std::vector<std::vector<long int> >, long int)\u2019:\n\
    /tmp/tmpjoisn_0r.cpp:24:67: error: request for member \u2018size\u2019 in \u2018\
    col\u2019, which is of non-class type \u2018long int\u2019\n   24 |          \
    \       res.push_back(std::make_tuple(row.size() - 1, col.size() - 1));\n    \
    \  |                                                                   ^~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    std::vector<std::tuple<long, long>> res;\n    for(auto &row\
    \ : lst) {\n        for(auto &el : row) {\n            if(el == x) {\n       \
    \         res.push_back(std::make_tuple(row.size(), row.size() - 1));\n      \
    \      }\n        }\n    }\n    std::sort(res.begin(), res.end(), [](const std::tuple<long,\
    \ long> &a, const std::tuple<long, long> &b) {\n        return std::get<0>(a)\
    \ < std::get<0>(b);\n    });\n    std::sort(res.begin(), res.end(), [](const std::tuple<long,\
    \ long> &a, const std::tuple<long, long> &b) {\n        return std::get<1>(a)\
    \ > std::get<1>(b);\n    });\n    return res;\n}\nint main() {\n    auto candidate\
    \ = get_row;\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "tmpasbpeorz: /tmp/tmpasbpeorz.cpp:38: int main(): Assertion `candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    std::vector<std::tuple<long, long>> res;\n    res.reserve(lst.size());\n\
    \    for (auto &row : lst) {\n        std::vector<std::tuple<long, long>> rowres;\n\
    \        rowres.reserve(row.size());\n        for (auto &el : row) {\n       \
    \     if (el == x) {\n                rowres.emplace_back(std::make_tuple(std::distance(row.begin(),\
    \ std::find(row.begin(), row.end(), x)), std::distance(row.begin(), std::find(row.begin(),\
    \ row.end(), x) + 1)));\n            }\n        }\n        res.emplace_back(std::make_tuple(std::distance(row.begin(),\
    \ std::find(row.begin(), row.end(), x)), std::distance(row.begin(), std::find(row.begin(),\
    \ row.end(), x) + 1)));\n    }\n    std::sort(res.begin(), res.end(), [](const\
    \ std::tuple<long, long> &a, const std::tuple<long, long> &b) {\n        return\
    \ std::get<0>(a) < std::get<0>(b);\n    });\n    std::sort(res.begin(), res.end(),\
    \ [](const std::tuple<long, long> &a, const std::tuple<long, long> &b) {\n   \
    \     return std::get<1>(a) < std::get<1>(b);\n    });\n    return res;\n}\nint\
    \ main() {\n    auto candidate = get_row;\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "tmpzyarixs3: /tmp/tmpzyarixs3.cpp:42: int main(): Assertion `candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    std::vector<std::tuple<long, long>> res;\n    std::vector<long>\
    \ row;\n    std::vector<long> col;\n    long cnt = 0;\n    for (auto &v : lst)\
    \ {\n        row.push_back(v[0]);\n        col.push_back(v[1]);\n        cnt +=\
    \ v[0];\n    }\n    sort(row.begin(), row.end());\n    sort(col.begin(), col.end());\n\
    \    for (long i = 0; i < row.size(); i++) {\n        long j = row[i];\n     \
    \   long k = col[i];\n        for (long l = 0; l < cnt; l++) {\n            if\
    \ (j == k) {\n                res.push_back({i, j});\n                break;\n\
    \            }\n            j++;\n            k--;\n        }\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = get_row;\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "tmp35rbluaf: /tmp/tmp35rbluaf.cpp:47: int main(): Assertion `candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    // Your code here\n    std::vector<std::tuple<long, long>>\
    \ res;\n    for(auto &row : lst) {\n        for(auto &el : row) {\n          \
    \  if(el == x) {\n                res.push_back(std::make_tuple(row.size() - 1,\
    \ row.size() - 1));\n            }\n        }\n    }\n    std::sort(res.begin(),\
    \ res.end(), [](const std::tuple<long, long> &a, const std::tuple<long, long>\
    \ &b) -> bool {\n        return std::get<0>(a) < std::get<0>(b);\n    });\n  \
    \  std::sort(res.begin(), res.end(), [](const std::tuple<long, long> &a, const\
    \ std::tuple<long, long> &b) -> bool {\n        return std::get<1>(a) < std::get<1>(b);\n\
    \    });\n    return res;\n}\nint main() {\n    auto candidate = get_row;\n  \
    \  assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "tmpm84tikon: /tmp/tmpm84tikon.cpp:39: int main(): Assertion `candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    std::vector<std::tuple<long, long>> res;\n    std::vector<std::tuple<long,\
    \ long>> row;\n    std::vector<std::tuple<long, long>> col;\n    std::vector<std::tuple<long,\
    \ long>> temp;\n    long row_index = 0;\n    long col_index = 0;\n    for (auto\
    \ &row : lst) {\n        row.clear();\n        temp.clear();\n        for (auto\
    \ &col : row) {\n            col.clear();\n            temp.push_back(std::make_tuple(col_index,\
    \ row_index));\n            col_index++;\n        }\n        row.swap(temp);\n\
    \        row_index++;\n    }\n    for (auto &row : lst) {\n        row.clear();\n\
    \        temp.clear();\n        for (auto &col : row) {\n            col.clear();\n\
    \            temp.push_back(std::make_tuple(col_index, row_index));\n        \
    \    col_index++;\n        }\n        row.swap(temp);\n        row_index++;\n\
    \    }\n    for (auto &row : lst) {\n        row.clear();\n        temp.clear();\n\
    \        for (auto &col : row) {\n            col.clear();\n            temp.push_back(std::make_tuple(col_index,\
    \ row_index));\n            col_index++;\n        }\n        row.swap(temp);\n\
    \        row_index++;\n    }\n    for (auto &row : lst) {\n        row.clear();\n\
    \        temp.clear();\n        for (auto &col : row) {\n            col.clear();\n\
    \            temp.push_back(std::make_tuple(col_index, row_index));\n        \
    \    col_index++;\n        }\n        row.swap(temp);\n        row_index++;\n\
    \    }\n    for (auto &row : lst) {\n        row.clear();\n        temp.clear();\n\
    \        for (auto &col : row) {\n            col.clear();\n            temp.push_back(std::make_tuple(col_index,\
    \ row_index));\n            col_index++;\n        }\n        row.swap(temp);\n\
    \        row_index++;\n    }\n    for (auto &row : lst) {\n        row.clear();\n\
    \        temp.clear();\n        for (auto &col : row) {\n            col.clear();\n\
    \            temp.push_back(std::make_tuple(col_index, row_index));\n        \
    \    col_index++;\n        }\n        row.swap(temp);\n        row_index++;\n\
    \    }\n    for (auto &row : lst) {\n        row.clear();\n        temp.clear();\n\
    \        for (auto &col : row) {\n            col.clear();\n            temp.push_back(std::make_tuple(col_index,\
    \ row_index));\n            col_index++;\n        }\n        row.swap(temp);\n\
    \        row_index++;\n    }\n    for (auto &row : lst) {\n        row.clear();\n\
    \        temp.clear();\n        for (auto &col : row) {\n            col.clear();\n\
    \            temp.push_back(std::make_tuple(col_index, \n}\nint main() {\n   \
    \ auto candidate = get_row;\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp22irsl2i.cpp: In function \u2018std::vector<std::tuple<long int,\
    \ long int> > get_row(std::vector<std::vector<long int> >, long int)\u2019:\n\
    /tmp/tmp22irsl2i.cpp:30:17: error: request for member \u2018clear\u2019 in \u2018\
    col\u2019, which is of non-class type \u2018long int\u2019\n   30 |          \
    \   col.clear();\n      |                 ^~~~~\n/tmp/tmp22irsl2i.cpp:34:18: error:\
    \ cannot convert \u2018std::vector<std::tuple<long int, long int> >\u2019 to \u2018\
    std::vector<long int>&\u2019\n   34 |         row.swap(temp);\n      |       \
    \           ^~~~\n      |                  |\n      |                  std::vector<std::tuple<long\
    \ int, long int> >\nIn file included from /usr/include/c++/9/vector:67,\n    \
    \             from /usr/include/c++/9/queue:61,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:86,\n\
    \                 from /tmp/tmp22irsl2i.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1477:20:\
    \ note:   initializing argument 1 of \u2018void std::vector<_Tp, _Alloc>::swap(std::vector<_Tp,\
    \ _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n 1477\
    \ |       swap(vector& __x) _GLIBCXX_NOEXCEPT\n      |            ~~~~~~~~^~~\n\
    /tmp/tmp22irsl2i.cpp:41:17: error: request for member \u2018clear\u2019 in \u2018\
    col\u2019, which is of non-class type \u2018long int\u2019\n   41 |          \
    \   col.clear();\n      |                 ^~~~~\n/tmp/tmp22irsl2i.cpp:45:18: error:\
    \ cannot convert \u2018std::vector<std::tuple<long int, long int> >\u2019 to \u2018\
    std::vector<long int>&\u2019\n   45 |         row.swap(temp);\n      |       \
    \           ^~~~\n      |                  |\n      |                  std::vector<std::tuple<long\
    \ int, long int> >\nIn file included from /usr/include/c++/9/vector:67,\n    \
    \             from /usr/include/c++/9/queue:61,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:86,\n\
    \                 from /tmp/tmp22irsl2i.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1477:20:\
    \ note:   initializing argument 1 of \u2018void std::vector<_Tp, _Alloc>::swap(std::vector<_Tp,\
    \ _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n 1477\
    \ |       swap(vector& __x) _GLIBCXX_NOEXCEPT\n      |            ~~~~~~~~^~~\n\
    /tmp/tmp22irsl2i.cpp:52:17: error: request for member \u2018clear\u2019 in \u2018\
    col\u2019, which is of non-class type \u2018long int\u2019\n   52 |          \
    \   col.clear();\n      |                 ^~~~~\n/tmp/tmp22irsl2i.cpp:56:18: error:\
    \ cannot convert \u2018std::vector<std::tuple<long int, long int> >\u2019 to \u2018\
    std::vector<long int>&\u2019\n   56 |         row.swap(temp);\n      |       \
    \           ^~~~\n      |                  |\n      |                  std::vector<std::tuple<long\
    \ int, long int> >\nIn file included from /usr/include/c++/9/vector:67,\n    \
    \             from /usr/include/c++/9/queue:61,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:86,\n\
    \                 from /tmp/tmp22irsl2i.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1477:20:\
    \ note:   initializing argument 1 of \u2018void std::vector<_Tp, _Alloc>::swap(std::vector<_Tp,\
    \ _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n 1477\
    \ |       swap(vector& __x) _GLIBCXX_NOEXCEPT\n      |            ~~~~~~~~^~~\n\
    /tmp/tmp22irsl2i.cpp:63:17: error: request for member \u2018clear\u2019 in \u2018\
    col\u2019, which is of non-class type \u2018long int\u2019\n   63 |          \
    \   col.clear();\n      |                 ^~~~~\n/tmp/tmp22irsl2i.cpp:67:18: error:\
    \ cannot convert \u2018std::vector<std::tuple<long int, long int> >\u2019 to \u2018\
    std::vector<long int>&\u2019\n   67 |         row.swap(temp);\n      |       \
    \           ^~~~\n      |                  |\n      |                  std::vector<std::tuple<long\
    \ int, long int> >\nIn file included from /usr/include/c++/9/vector:67,\n    \
    \             from /usr/include/c++/9/queue:61,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:86,\n\
    \                 from /tmp/tmp22irsl2i.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1477:20:\
    \ note:   initializing argument 1 of \u2018void std::vector<_Tp, _Alloc>::swap(std::vector<_Tp,\
    \ _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n 1477\
    \ |       swap(vector& __x) _GLIBCXX_NOEXCEPT\n      |            ~~~~~~~~^~~\n\
    /tmp/tmp22irsl2i.cpp:74:17: error: request for member \u2018clear\u2019 in \u2018\
    col\u2019, which is of non-class type \u2018long int\u2019\n   74 |          \
    \   col.clear();\n      |                 ^~~~~\n/tmp/tmp22irsl2i.cpp:78:18: error:\
    \ cannot convert \u2018std::vector<std::tuple<long int, long int> >\u2019 to \u2018\
    std::vector<long int>&\u2019\n   78 |         row.swap(temp);\n      |       \
    \           ^~~~\n      |                  |\n      |                  std::vector<std::tuple<long\
    \ int, long int> >\nIn file included from /usr/include/c++/9/vector:67,\n    \
    \             from /usr/include/c++/9/queue:61,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:86,\n\
    \                 from /tmp/tmp22irsl2i.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1477:20:\
    \ note:   initializing argument 1 of \u2018void std::vector<_Tp, _Alloc>::swap(std::vector<_Tp,\
    \ _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n 1477\
    \ |       swap(vector& __x) _GLIBCXX_NOEXCEPT\n      |            ~~~~~~~~^~~\n\
    /tmp/tmp22irsl2i.cpp:85:17: error: request for member \u2018clear\u2019 in \u2018\
    col\u2019, which is of non-class type \u2018long int\u2019\n   85 |          \
    \   col.clear();\n      |                 ^~~~~\n/tmp/tmp22irsl2i.cpp:89:18: error:\
    \ cannot convert \u2018std::vector<std::tuple<long int, long int> >\u2019 to \u2018\
    std::vector<long int>&\u2019\n   89 |         row.swap(temp);\n      |       \
    \           ^~~~\n      |                  |\n      |                  std::vector<std::tuple<long\
    \ int, long int> >\nIn file included from /usr/include/c++/9/vector:67,\n    \
    \             from /usr/include/c++/9/queue:61,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:86,\n\
    \                 from /tmp/tmp22irsl2i.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1477:20:\
    \ note:   initializing argument 1 of \u2018void std::vector<_Tp, _Alloc>::swap(std::vector<_Tp,\
    \ _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n 1477\
    \ |       swap(vector& __x) _GLIBCXX_NOEXCEPT\n      |            ~~~~~~~~^~~\n\
    /tmp/tmp22irsl2i.cpp:96:17: error: request for member \u2018clear\u2019 in \u2018\
    col\u2019, which is of non-class type \u2018long int\u2019\n   96 |          \
    \   col.clear();\n      |                 ^~~~~\n/tmp/tmp22irsl2i.cpp:100:18:\
    \ error: cannot convert \u2018std::vector<std::tuple<long int, long int> >\u2019\
    \ to \u2018std::vector<long int>&\u2019\n  100 |         row.swap(temp);\n   \
    \   |                  ^~~~\n      |                  |\n      |             \
    \     std::vector<std::tuple<long int, long int> >\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/queue:61,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:86,\n\
    \                 from /tmp/tmp22irsl2i.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1477:20:\
    \ note:   initializing argument 1 of \u2018void std::vector<_Tp, _Alloc>::swap(std::vector<_Tp,\
    \ _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n 1477\
    \ |       swap(vector& __x) _GLIBCXX_NOEXCEPT\n      |            ~~~~~~~~^~~\n\
    /tmp/tmp22irsl2i.cpp:107:17: error: request for member \u2018clear\u2019 in \u2018\
    col\u2019, which is of non-class type \u2018long int\u2019\n  107 |          \
    \   col.clear();\n      |                 ^~~~~\n/tmp/tmp22irsl2i.cpp:109:1: error:\
    \ expected primary-expression before \u2018}\u2019 token\n  109 | }\n      | ^\n\
    /tmp/tmp22irsl2i.cpp:110:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n  110 | int main() {\n      |            ^\n/tmp/tmp22irsl2i.cpp:118:1:\
    \ error: expected \u2018}\u2019 at end of input\n  118 | }\n      | ^\n/tmp/tmp22irsl2i.cpp:103:27:\
    \ note: to match this \u2018{\u2019\n  103 |     for (auto &row : lst) {\n   \
    \   |                           ^\n/tmp/tmp22irsl2i.cpp:118:1: error: expected\
    \ \u2018}\u2019 at end of input\n  118 | }\n      | ^\n/tmp/tmp22irsl2i.cpp:19:89:\
    \ note: to match this \u2018{\u2019\n   19 | std::vector<std::tuple<long, long>>\
    \ get_row(std::vector<std::vector<long>> lst, long x) {\n      |             \
    \                                                                            ^\n\
    /tmp/tmp22irsl2i.cpp:118:1: warning: no return statement in function returning\
    \ non-void [-Wreturn-type]\n  118 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    std::vector<std::tuple<long, long>> res;\n    std::vector<std::vector<long>>\
    \ temp;\n    long row = 0;\n    long col = 0;\n    for (auto &i : lst) {\n   \
    \     row = i;\n        temp.push_back(i);\n    }\n    for (auto &i : temp) {\n\
    \        for (auto &j : i) {\n            if (j == x) {\n                res.push_back(std::make_tuple(row,\
    \ col));\n            }\n        }\n    }\n    std::sort(res.begin(), res.end(),\
    \ [](std::tuple<long, long> a, std::tuple<long, long> b) {\n        return std::get<0>(a)\
    \ < std::get<0>(b);\n    });\n    std::sort(res.begin(), res.end(), [](std::tuple<long,\
    \ long> a, std::tuple<long, long> b) {\n        return std::get<1>(a) < std::get<1>(b);\n\
    \    });\n    return res;\n}\nint main() {\n    auto candidate = get_row;\n  \
    \  assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpm11vjs53.cpp: In function \u2018std::vector<std::tuple<long int,\
    \ long int> > get_row(std::vector<std::vector<long int> >, long int)\u2019:\n\
    /tmp/tmpm11vjs53.cpp:25:15: error: cannot convert \u2018std::vector<long int>\u2019\
    \ to \u2018long int\u2019 in assignment\n   25 |         row = i;\n      |   \
    \            ^\n      |               |\n      |               std::vector<long\
    \ int>\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    std::vector<std::tuple<long, long>> res;\n    for(auto &row\
    \ : lst) {\n        for(auto &elem : row) {\n            if(elem == x) {\n   \
    \             res.push_back(std::make_tuple(row.size() - 1, row.size() - 1));\n\
    \            }\n        }\n    }\n    std::sort(res.begin(), res.end(), [](const\
    \ std::tuple<long, long> &a, const std::tuple<long, long> &b) { return std::get<0>(a)\
    \ < std::get<0>(b); });\n    std::sort(res.begin(), res.end(), [](const std::tuple<long,\
    \ long> &a, const std::tuple<long, long> &b) { return std::get<1>(a) < std::get<1>(b);\
    \ });\n    return res;\n}\nint main() {\n    auto candidate = get_row;\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "tmp643mvvnx: /tmp/tmp643mvvnx.cpp:34: int main(): Assertion `candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    std::vector<std::tuple<long, long>> res;\n    std::vector<std::tuple<long,\
    \ long>> row;\n    std::vector<std::tuple<long, long>> col;\n    for (auto &i\
    \ : lst) {\n        row.push_back(i);\n    }\n    for (auto &i : row) {\n    \
    \    col.push_back(i);\n    }\n    for (auto &i : col) {\n        std::sort(i.begin(),\
    \ i.end(), [](long a, long b) { return a > b; });\n        std::sort(i.rbegin(),\
    \ i.rend(), [](long a, long b) { return b > a; });\n    }\n    for (auto &i :\
    \ col) {\n        for (auto &j : i) {\n            if (j == x) {\n           \
    \     res.push_back(std::make_tuple(i, j));\n            }\n        }\n    }\n\
    \    return res;\n}\nint main() {\n    auto candidate = get_row;\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpo4m_x6wz.cpp: In function \u2018std::vector<std::tuple<long int,\
    \ long int> > get_row(std::vector<std::vector<long int> >, long int)\u2019:\n\
    /tmp/tmpo4m_x6wz.cpp:24:24: error: no matching function for call to \u2018std::vector<std::tuple<long\
    \ int, long int> >::push_back(std::vector<long int>&)\u2019\n   24 |         row.push_back(i);\n\
    \      |                        ^\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/queue:61,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:86,\n\
    \                 from /tmp/tmpo4m_x6wz.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::tuple<long int, long int>; _Alloc = std::allocator<std::tuple<long\
    \ int, long int> >; std::vector<_Tp, _Alloc>::value_type = std::tuple<long int,\
    \ long int>]\u2019\n 1184 |       push_back(const value_type& __x)\n      |  \
    \     ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1184:35: note:   no known\
    \ conversion for argument 1 from \u2018std::vector<long int>\u2019 to \u2018const\
    \ value_type&\u2019 {aka \u2018const std::tuple<long int, long int>&\u2019}\n\
    \ 1184 |       push_back(const value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n\
    /usr/include/c++/9/bits/stl_vector.h:1200:7: note: candidate: \u2018void std::vector<_Tp,\
    \ _Alloc>::push_back(std::vector<_Tp, _Alloc>::value_type&&) [with _Tp = std::tuple<long\
    \ int, long int>; _Alloc = std::allocator<std::tuple<long int, long int> >; std::vector<_Tp,\
    \ _Alloc>::value_type = std::tuple<long int, long int>]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018std::vector<long int>\u2019\
    \ to \u2018std::vector<std::tuple<long int, long int> >::value_type&&\u2019 {aka\
    \ \u2018std::tuple<long int, long int>&&\u2019}\n 1200 |       push_back(value_type&&\
    \ __x)\n      |                 ~~~~~~~~~~~~~^~~\n/tmp/tmpo4m_x6wz.cpp:30:21:\
    \ error: \u2018class std::tuple<long int, long int>\u2019 has no member named\
    \ \u2018begin\u2019\n   30 |         std::sort(i.begin(), i.end(), [](long a,\
    \ long b) { return a > b; });\n      |                     ^~~~~\n/tmp/tmpo4m_x6wz.cpp:30:32:\
    \ error: \u2018class std::tuple<long int, long int>\u2019 has no member named\
    \ \u2018end\u2019\n   30 |         std::sort(i.begin(), i.end(), [](long a, long\
    \ b) { return a > b; });\n      |                                ^~~\n/tmp/tmpo4m_x6wz.cpp:31:21:\
    \ error: \u2018class std::tuple<long int, long int>\u2019 has no member named\
    \ \u2018rbegin\u2019\n   31 |         std::sort(i.rbegin(), i.rend(), [](long\
    \ a, long b) { return b > a; });\n      |                     ^~~~~~\n/tmp/tmpo4m_x6wz.cpp:31:33:\
    \ error: \u2018class std::tuple<long int, long int>\u2019 has no member named\
    \ \u2018rend\u2019\n   31 |         std::sort(i.rbegin(), i.rend(), [](long a,\
    \ long b) { return b > a; });\n      |                                 ^~~~\n\
    /tmp/tmpo4m_x6wz.cpp:34:24: error: no matching function for call to \u2018begin(std::tuple<long\
    \ int, long int>&)\u2019\n   34 |         for (auto &j : i) {\n      |       \
    \                 ^\nIn file included from /usr/include/c++/9/bits/range_access.h:36,\n\
    \                 from /usr/include/c++/9/string:54,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpo4m_x6wz.cpp:2:\n/usr/include/c++/9/initializer_list:89:5: note: candidate:\
    \ \u2018template<class _Tp> constexpr const _Tp* std::begin(std::initializer_list<_Tp>)\u2019\
    \n   89 |     begin(initializer_list<_Tp> __ils) noexcept\n      |     ^~~~~\n\
    /usr/include/c++/9/initializer_list:89:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpo4m_x6wz.cpp:34:24: note:   \u2018std::tuple<long int, long\
    \ int>\u2019 is not derived from \u2018std::initializer_list<_Tp>\u2019\n   34\
    \ |         for (auto &j : i) {\n      |                        ^\nIn file included\
    \ from /usr/include/c++/9/string:54,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpo4m_x6wz.cpp:2:\n/usr/include/c++/9/bits/range_access.h:48:5: note:\
    \ candidate: \u2018template<class _Container> decltype (__cont.begin()) std::begin(_Container&)\u2019\
    \n   48 |     begin(_Container& __cont) -> decltype(__cont.begin())\n      | \
    \    ^~~~~\n/usr/include/c++/9/bits/range_access.h:48:5: note:   template argument\
    \ deduction/substitution failed:\n/usr/include/c++/9/bits/range_access.h: In substitution\
    \ of \u2018template<class _Container> decltype (__cont.begin()) std::begin(_Container&)\
    \ [with _Container = std::tuple<long int, long int>]\u2019:\n/tmp/tmpo4m_x6wz.cpp:34:24:\
    \   required from here\n/usr/include/c++/9/bits/range_access.h:48:50: error: \u2018\
    class std::tuple<long int, long int>\u2019 has no member named \u2018begin\u2019\
    \n   48 |     begin(_Container& __cont) -> decltype(__cont.begin())\n      | \
    \                                          ~~~~~~~^~~~~\n/usr/include/c++/9/bits/range_access.h:58:5:\
    \ note: candidate: \u2018template<class _Container> decltype (__cont.begin())\
    \ std::begin(const _Container&)\u2019\n   58 |     begin(const _Container& __cont)\
    \ -> decltype(__cont.begin())\n      |     ^~~~~\n/usr/include/c++/9/bits/range_access.h:58:5:\
    \ note:   template argument deduction/substitution failed:\n/usr/include/c++/9/bits/range_access.h:\
    \ In substitution of \u2018template<class _Container> decltype (__cont.begin())\
    \ std::begin(const _Container&) [with _Container = std::tuple<long int, long int>]\u2019\
    :\n/tmp/tmpo4m_x6wz.cpp:34:24:   required from here\n/usr/include/c++/9/bits/range_access.h:58:56:\
    \ error: \u2018const class std::tuple<long int, long int>\u2019 has no member\
    \ named \u2018begin\u2019\n   58 |     begin(const _Container& __cont) -> decltype(__cont.begin())\n\
    \      |                                                 ~~~~~~~^~~~~\n/usr/include/c++/9/bits/range_access.h:87:5:\
    \ note: candidate: \u2018template<class _Tp, long unsigned int _Nm> constexpr\
    \ _Tp* std::begin(_Tp (&)[_Nm])\u2019\n   87 |     begin(_Tp (&__arr)[_Nm]) noexcept\n\
    \      |     ^~~~~\n/usr/include/c++/9/bits/range_access.h:87:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmpo4m_x6wz.cpp:34:24: note: \
    \  mismatched types \u2018_Tp [_Nm]\u2019 and \u2018std::tuple<long int, long\
    \ int>\u2019\n   34 |         for (auto &j : i) {\n      |                   \
    \     ^\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n\
    \                 from /tmp/tmpo4m_x6wz.cpp:2:\n/usr/include/c++/9/valarray:1214:5:\
    \ note: candidate: \u2018template<class _Tp> _Tp* std::begin(std::valarray<_Tp>&)\u2019\
    \n 1214 |     begin(valarray<_Tp>& __va)\n      |     ^~~~~\n/usr/include/c++/9/valarray:1214:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpo4m_x6wz.cpp:34:24:\
    \ note:   \u2018std::tuple<long int, long int>\u2019 is not derived from \u2018\
    std::valarray<_Tp>\u2019\n   34 |         for (auto &j : i) {\n      |       \
    \                 ^\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n\
    \                 from /tmp/tmpo4m_x6wz.cpp:2:\n/usr/include/c++/9/valarray:1224:5:\
    \ note: candidate: \u2018template<class _Tp> const _Tp* std::begin(const std::valarray<_Tp>&)\u2019\
    \n 1224 |     begin(const valarray<_Tp>& __va)\n      |     ^~~~~\n/usr/include/c++/9/valarray:1224:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpo4m_x6wz.cpp:34:24:\
    \ note:   \u2018std::tuple<long int, long int>\u2019 is not derived from \u2018\
    const std::valarray<_Tp>\u2019\n   34 |         for (auto &j : i) {\n      | \
    \                       ^\n/tmp/tmpo4m_x6wz.cpp:34:24: error: no matching function\
    \ for call to \u2018end(std::tuple<long int, long int>&)\u2019\nIn file included\
    \ from /usr/include/c++/9/bits/range_access.h:36,\n                 from /usr/include/c++/9/string:54,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpo4m_x6wz.cpp:2:\n/usr/include/c++/9/initializer_list:99:5:\
    \ note: candidate: \u2018template<class _Tp> constexpr const _Tp* std::end(std::initializer_list<_Tp>)\u2019\
    \n   99 |     end(initializer_list<_Tp> __ils) noexcept\n      |     ^~~\n/usr/include/c++/9/initializer_list:99:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpo4m_x6wz.cpp:34:24:\
    \ note:   \u2018std::tuple<long int, long int>\u2019 is not derived from \u2018\
    std::initializer_list<_Tp>\u2019\n   34 |         for (auto &j : i) {\n      |\
    \                        ^\nIn file included from /usr/include/c++/9/string:54,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpo4m_x6wz.cpp:2:\n/usr/include/c++/9/bits/range_access.h:68:5:\
    \ note: candidate: \u2018template<class _Container> decltype (__cont.end()) std::end(_Container&)\u2019\
    \n   68 |     end(_Container& __cont) -> decltype(__cont.end())\n      |     ^~~\n\
    /usr/include/c++/9/bits/range_access.h:68:5: note:   template argument deduction/substitution\
    \ failed:\n/usr/include/c++/9/bits/range_access.h: In substitution of \u2018template<class\
    \ _Container> decltype (__cont.end()) std::end(_Container&) [with _Container =\
    \ std::tuple<long int, long int>]\u2019:\n/tmp/tmpo4m_x6wz.cpp:34:24:   required\
    \ from here\n/usr/include/c++/9/bits/range_access.h:68:48: error: \u2018class\
    \ std::tuple<long int, long int>\u2019 has no member named \u2018end\u2019\n \
    \  68 |     end(_Container& __cont) -> decltype(__cont.end())\n      |       \
    \                                  ~~~~~~~^~~\n/usr/include/c++/9/bits/range_access.h:78:5:\
    \ note: candidate: \u2018template<class _Container> decltype (__cont.end()) std::end(const\
    \ _Container&)\u2019\n   78 |     end(const _Container& __cont) -> decltype(__cont.end())\n\
    \      |     ^~~\n/usr/include/c++/9/bits/range_access.h:78:5: note:   template\
    \ argument deduction/substitution failed:\n/usr/include/c++/9/bits/range_access.h:\
    \ In substitution of \u2018template<class _Container> decltype (__cont.end())\
    \ std::end(const _Container&) [with _Container = std::tuple<long int, long int>]\u2019\
    :\n/tmp/tmpo4m_x6wz.cpp:34:24:   required from here\n/usr/include/c++/9/bits/range_access.h:78:54:\
    \ error: \u2018const class std::tuple<long int, long int>\u2019 has no member\
    \ named \u2018end\u2019\n   78 |     end(const _Container& __cont) -> decltype(__cont.end())\n\
    \      |                                               ~~~~~~~^~~\n/usr/include/c++/9/bits/range_access.h:97:5:\
    \ note: candidate: \u2018template<class _Tp, long unsigned int _Nm> constexpr\
    \ _Tp* std::end(_Tp (&)[_Nm])\u2019\n   97 |     end(_Tp (&__arr)[_Nm]) noexcept\n\
    \      |     ^~~\n/usr/include/c++/9/bits/range_access.h:97:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmpo4m_x6wz.cpp:34:24: note: \
    \  mismatched types \u2018_Tp [_Nm]\u2019 and \u2018std::tuple<long int, long\
    \ int>\u2019\n   34 |         for (auto &j : i) {\n      |                   \
    \     ^\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n\
    \                 from /tmp/tmpo4m_x6wz.cpp:2:\n/usr/include/c++/9/valarray:1234:5:\
    \ note: candidate: \u2018template<class _Tp> _Tp* std::end(std::valarray<_Tp>&)\u2019\
    \n 1234 |     end(valarray<_Tp>& __va)\n      |     ^~~\n/usr/include/c++/9/valarray:1234:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpo4m_x6wz.cpp:34:24:\
    \ note:   \u2018std::tuple<long int, long int>\u2019 is not derived from \u2018\
    std::valarray<_Tp>\u2019\n   34 |         for (auto &j : i) {\n      |       \
    \                 ^\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n\
    \                 from /tmp/tmpo4m_x6wz.cpp:2:\n/usr/include/c++/9/valarray:1244:5:\
    \ note: candidate: \u2018template<class _Tp> const _Tp* std::end(const std::valarray<_Tp>&)\u2019\
    \n 1244 |     end(const valarray<_Tp>& __va)\n      |     ^~~\n/usr/include/c++/9/valarray:1244:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpo4m_x6wz.cpp:34:24:\
    \ note:   \u2018std::tuple<long int, long int>\u2019 is not derived from \u2018\
    const std::valarray<_Tp>\u2019\n   34 |         for (auto &j : i) {\n      | \
    \                       ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    // Your code here\n    std::vector<std::tuple<long, long>>\
    \ res;\n    for(auto &row : lst){\n        for(auto &ele : row){\n           \
    \ if(ele == x){\n                res.push_back(std::make_tuple(row.size() - 1,\
    \ row.size() - 1));\n            }\n        }\n    }\n    std::sort(res.begin(),\
    \ res.end(), [](std::tuple<long, long> a, std::tuple<long, long> b){\n       \
    \ return std::get<0>(a) > std::get<0>(b);\n    });\n    std::sort(res.begin(),\
    \ res.end(), [](std::tuple<long, long> a, std::tuple<long, long> b){\n       \
    \ return std::get<1>(a) > std::get<1>(b);\n    });\n    return res;\n}\nint main()\
    \ {\n    auto candidate = get_row;\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "tmp2se3gui5: /tmp/tmp2se3gui5.cpp:39: int main(): Assertion `candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    // Your code here\n    std::vector<std::tuple<long, long>>\
    \ res;\n    for(auto &v : lst) {\n        for(auto &v2 : v) {\n            if(v2\
    \ == x) {\n                res.emplace_back(v);\n            }\n        }\n  \
    \  }\n    std::sort(res.begin(), res.end(), [](const std::tuple<long, long> &a,\
    \ const std::tuple<long, long> &b) -> bool {\n        return std::get<0>(a) <\
    \ std::get<0>(b);\n    });\n    std::sort(res.begin(), res.end(), [](const std::tuple<long,\
    \ long> &a, const std::tuple<long, long> &b) -> bool {\n        return std::get<1>(a)\
    \ < std::get<1>(b);\n    });\n    return res;\n}\nint main() {\n    auto candidate\
    \ = get_row;\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "In file included from /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n\
    \                 from /usr/include/c++/9/bits/allocator.h:46,\n             \
    \    from /usr/include/c++/9/string:41,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpv0j5td8v.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h: In instantiation\
    \ of \u2018void __gnu_cxx::new_allocator<_Tp>::construct(_Up*, _Args&& ...) [with\
    \ _Up = std::tuple<long int, long int>; _Args = {std::vector<long int, std::allocator<long\
    \ int> >&}; _Tp = std::tuple<long int, long int>]\u2019:\n/usr/include/c++/9/bits/alloc_traits.h:483:4:\
    \   required from \u2018static void std::allocator_traits<std::allocator<_CharT>\
    \ >::construct(std::allocator_traits<std::allocator<_CharT> >::allocator_type&,\
    \ _Up*, _Args&& ...) [with _Up = std::tuple<long int, long int>; _Args = {std::vector<long\
    \ int, std::allocator<long int> >&}; _Tp = std::tuple<long int, long int>; std::allocator_traits<std::allocator<_CharT>\
    \ >::allocator_type = std::allocator<std::tuple<long int, long int> >]\u2019\n\
    /usr/include/c++/9/bits/vector.tcc:115:30:   required from \u2018void std::vector<_Tp,\
    \ _Alloc>::emplace_back(_Args&& ...) [with _Args = {std::vector<long int, std::allocator<long\
    \ int> >&}; _Tp = std::tuple<long int, long int>; _Alloc = std::allocator<std::tuple<long\
    \ int, long int> >]\u2019\n/tmp/tmpv0j5td8v.cpp:25:35:   required from here\n\
    /usr/include/c++/9/ext/new_allocator.h:146:4: error: no matching function for\
    \ call to \u2018std::tuple<long int, long int>::tuple(std::vector<long int>&)\u2019\
    \n  146 |  { ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }\n     \
    \ |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nIn file included\
    \ from /usr/include/c++/9/functional:54,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmpv0j5td8v.cpp:2:\n/usr/include/c++/9/tuple:1199:18:\
    \ note: candidate: \u2018template<class _Alloc, class _U1, class _U2, typename\
    \ std::enable_if<(_MoveConstructibleTuple<_U1, _U2>() && (! _ImplicitlyMoveConvertibleTuple<_U1,\
    \ _U2>())), bool>::type <anonymous> > std::tuple<_T1, _T2>::tuple(std::allocator_arg_t,\
    \ const _Alloc&, std::pair<_U1, _U2>&&)\u2019\n 1199 |         explicit tuple(allocator_arg_t\
    \ __tag, const _Alloc& __a,\n      |                  ^~~~~\n/usr/include/c++/9/tuple:1199:18:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n              \
    \   from /usr/include/c++/9/bits/allocator.h:46,\n                 from /usr/include/c++/9/string:41,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpv0j5td8v.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4:\
    \ note:   candidate expects 3 arguments, 1 provided\n  146 |  { ::new((void *)__p)\
    \ _Up(std::forward<_Args>(__args)...); }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    In file included from /usr/include/c++/9/functional:54,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n                 from\
    \ /tmp/tmpv0j5td8v.cpp:2:\n/usr/include/c++/9/tuple:1189:9: note: candidate: \u2018\
    template<class _Alloc, class _U1, class _U2, typename std::enable_if<(_MoveConstructibleTuple<_U1,\
    \ _U2>() && _ImplicitlyMoveConvertibleTuple<_U1, _U2>()), bool>::type <anonymous>\
    \ > std::tuple<_T1, _T2>::tuple(std::allocator_arg_t, const _Alloc&, std::pair<_U1,\
    \ _U2>&&)\u2019\n 1189 |         tuple(allocator_arg_t __tag, const _Alloc& __a,\
    \ pair<_U1, _U2>&& __in)\n      |         ^~~~~\n/usr/include/c++/9/tuple:1189:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n              \
    \   from /usr/include/c++/9/bits/allocator.h:46,\n                 from /usr/include/c++/9/string:41,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpv0j5td8v.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4:\
    \ note:   candidate expects 3 arguments, 1 provided\n  146 |  { ::new((void *)__p)\
    \ _Up(std::forward<_Args>(__args)...); }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    In file included from /usr/include/c++/9/functional:54,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n                 from\
    \ /tmp/tmpv0j5td8v.cpp:2:\n/usr/include/c++/9/tuple:1179:18: note: candidate:\
    \ \u2018template<class _Alloc, class _U1, class _U2, typename std::enable_if<(_ConstructibleTuple<_U1,\
    \ _U2>() && (! _ImplicitlyConvertibleTuple<_U1, _U2>())), bool>::type <anonymous>\
    \ > std::tuple<_T1, _T2>::tuple(std::allocator_arg_t, const _Alloc&, const std::pair<_U1,\
    \ _U2>&)\u2019\n 1179 |         explicit tuple(allocator_arg_t __tag, const _Alloc&\
    \ __a,\n      |                  ^~~~~\n/usr/include/c++/9/tuple:1179:18: note:\
    \   template argument deduction/substitution failed:\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n\
    \                 from /usr/include/c++/9/bits/allocator.h:46,\n             \
    \    from /usr/include/c++/9/string:41,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpv0j5td8v.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4: note:\
    \   candidate expects 3 arguments, 1 provided\n  146 |  { ::new((void *)__p) _Up(std::forward<_Args>(__args)...);\
    \ }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nIn file\
    \ included from /usr/include/c++/9/functional:54,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmpv0j5td8v.cpp:2:\n/usr/include/c++/9/tuple:1169:9:\
    \ note: candidate: \u2018template<class _Alloc, class _U1, class _U2, typename\
    \ std::enable_if<(_ConstructibleTuple<_U1, _U2>() && _ImplicitlyConvertibleTuple<_U1,\
    \ _U2>()), bool>::type <anonymous> > std::tuple<_T1, _T2>::tuple(std::allocator_arg_t,\
    \ const _Alloc&, const std::pair<_U1, _U2>&)\u2019\n 1169 |         tuple(allocator_arg_t\
    \ __tag, const _Alloc& __a,\n      |         ^~~~~\n/usr/include/c++/9/tuple:1169:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n              \
    \   from /usr/include/c++/9/bits/allocator.h:46,\n                 from /usr/include/c++/9/string:41,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpv0j5td8v.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4:\
    \ note:   candidate expects 3 arguments, 1 provided\n  146 |  { ::new((void *)__p)\
    \ _Up(std::forward<_Args>(__args)...); }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    In file included from /usr/include/c++/9/functional:54,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n                 from\
    \ /tmp/tmpv0j5td8v.cpp:2:\n/usr/include/c++/9/tuple:1158:11: note: candidate:\
    \ \u2018template<class _Alloc, class _U1, class _U2, typename std::enable_if<(_MoveConstructibleTuple<_U1,\
    \ _U2>() && (! _ImplicitlyMoveConvertibleTuple<_U1, _U2>())), bool>::type <anonymous>\
    \ > std::tuple<_T1, _T2>::tuple(std::allocator_arg_t, const _Alloc&, std::tuple<_U1,\
    \ _U2>&&)\u2019\n 1158 |  explicit tuple(allocator_arg_t __tag, const _Alloc&\
    \ __a,\n      |           ^~~~~\n/usr/include/c++/9/tuple:1158:11: note:   template\
    \ argument deduction/substitution failed:\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n\
    \                 from /usr/include/c++/9/bits/allocator.h:46,\n             \
    \    from /usr/include/c++/9/string:41,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpv0j5td8v.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4: note:\
    \   candidate expects 3 arguments, 1 provided\n  146 |  { ::new((void *)__p) _Up(std::forward<_Args>(__args)...);\
    \ }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nIn file\
    \ included from /usr/include/c++/9/functional:54,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmpv0j5td8v.cpp:2:\n/usr/include/c++/9/tuple:1148:2:\
    \ note: candidate: \u2018template<class _Alloc, class _U1, class _U2, typename\
    \ std::enable_if<(_MoveConstructibleTuple<_U1, _U2>() && _ImplicitlyMoveConvertibleTuple<_U1,\
    \ _U2>()), bool>::type <anonymous> > std::tuple<_T1, _T2>::tuple(std::allocator_arg_t,\
    \ const _Alloc&, std::tuple<_U1, _U2>&&)\u2019\n 1148 |  tuple(allocator_arg_t\
    \ __tag, const _Alloc& __a, tuple<_U1, _U2>&& __in)\n      |  ^~~~~\n/usr/include/c++/9/tuple:1148:2:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n              \
    \   from /usr/include/c++/9/bits/allocator.h:46,\n                 from /usr/include/c++/9/string:41,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpv0j5td8v.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4:\
    \ note:   candidate expects 3 arguments, 1 provided\n  146 |  { ::new((void *)__p)\
    \ _Up(std::forward<_Args>(__args)...); }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    In file included from /usr/include/c++/9/functional:54,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n                 from\
    \ /tmp/tmpv0j5td8v.cpp:2:\n/usr/include/c++/9/tuple:1136:11: note: candidate:\
    \ \u2018template<class _Alloc, class _U1, class _U2, typename std::enable_if<(_ConstructibleTuple<_U1,\
    \ _U2>() && (! _ImplicitlyConvertibleTuple<_U1, _U2>())), bool>::type <anonymous>\
    \ > std::tuple<_T1, _T2>::tuple(std::allocator_arg_t, const _Alloc&, const std::tuple<_U1,\
    \ _U2>&)\u2019\n 1136 |  explicit tuple(allocator_arg_t __tag, const _Alloc& __a,\n\
    \      |           ^~~~~\n/usr/include/c++/9/tuple:1136:11: note:   template argument\
    \ deduction/substitution failed:\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n\
    \                 from /usr/include/c++/9/bits/allocator.h:46,\n             \
    \    from /usr/include/c++/9/string:41,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpv0j5td8v.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4: note:\
    \   candidate expects 3 arguments, 1 provided\n  146 |  { ::new((void *)__p) _Up(std::forward<_Args>(__args)...);\
    \ }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nIn file\
    \ included from /usr/include/c++/9/functional:54,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmpv0j5td8v.cpp:2:\n/usr/include/c++/9/tuple:1124:2:\
    \ note: candidate: \u2018template<class _Alloc, class _U1, class _U2, typename\
    \ std::enable_if<(_ConstructibleTuple<_U1, _U2>() && _ImplicitlyConvertibleTuple<_U1,\
    \ _U2>()), bool>::type <anonymous> > std::tuple<_T1, _T2>::tuple(std::allocator_arg_t,\
    \ const _Alloc&, const std::tuple<_U1, _U2>&)\u2019\n 1124 |  tuple(allocator_arg_t\
    \ __tag, const _Alloc& __a,\n      |  ^~~~~\n/usr/include/c++/9/tuple:1124:2:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n              \
    \   from /usr/include/c++/9/bits/allocator.h:46,\n                 from /usr/include/c++/9/string:41,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpv0j5td8v.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4:\
    \ note:   candidate expects 3 arguments, 1 provided\n  146 |  { ::new((void *)__p)\
    \ _Up(std::forward<_Args>(__args)...); }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    In file included from /usr/include/c++/9/functional:54,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n                 from\
    \ /tmp/tmpv0j5td8v.cpp:2:\n/usr/include/c++/9/tuple:1115:2: note: candidate: \u2018\
    template<class _Alloc> std::tuple<_T1, _T2>::tuple(std::allocator_arg_t, const\
    \ _Alloc&, std::tuple<_T1, _T2>&&)\u2019\n 1115 |  tuple(allocator_arg_t __tag,\
    \ const _Alloc& __a, tuple&& __in)\n      |  ^~~~~\n/usr/include/c++/9/tuple:1115:2:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n              \
    \   from /usr/include/c++/9/bits/allocator.h:46,\n                 from /usr/include/c++/9/string:41,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpv0j5td8v.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4:\
    \ note:   candidate expects 3 arguments, 1 provided\n  146 |  { ::new((void *)__p)\
    \ _Up(std::forward<_Args>(__args)...); }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    In file included from /usr/include/c++/9/functional:54,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n                 from\
    \ /tmp/tmpv0j5td8v.cpp:2:\n/usr/include/c++/9/tuple:1111:2: note: candidate: \u2018\
    template<class _Alloc> std::tuple<_T1, _T2>::tuple(std::allocator_arg_t, const\
    \ _Alloc&, const std::tuple<_T1, _T2>&)\u2019\n 1111 |  tuple(allocator_arg_t\
    \ __tag, const _Alloc& __a, const tuple& __in)\n      |  ^~~~~\n/usr/include/c++/9/tuple:1111:2:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n              \
    \   from /usr/include/c++/9/bits/allocator.h:46,\n                 from /usr/include/c++/9/string:41,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpv0j5td8v.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4:\
    \ note:   candidate expects 3 arguments, 1 provided\n  146 |  { ::new((void *)__p)\
    \ _Up(std::forward<_Args>(__args)...); }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    In file included from /usr/include/c++/9/functional:54,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n                 from\
    \ /tmp/tmpv0j5td8v.cpp:2:\n/usr/include/c++/9/tuple:1105:11: note: candidate:\
    \ \u2018template<class _Alloc, class _U1, class _U2, typename std::enable_if<(_MoveConstructibleTuple<_U1,\
    \ _U2>() && (! _ImplicitlyMoveConvertibleTuple<_U1, _U2>())), bool>::type <anonymous>\
    \ > std::tuple<_T1, _T2>::tuple(std::allocator_arg_t, const _Alloc&, _U1&&, _U2&&)\u2019\
    \n 1105 |  explicit tuple(allocator_arg_t __tag, const _Alloc& __a,\n      | \
    \          ^~~~~\n/usr/include/c++/9/tuple:1105:11: note:   template argument\
    \ deduction/substitution failed:\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n\
    \                 from /usr/include/c++/9/bits/allocator.h:46,\n             \
    \    from /usr/include/c++/9/string:41,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpv0j5td8v.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4: note:\
    \   candidate expects 4 arguments, 1 provided\n  146 |  { ::new((void *)__p) _Up(std::forward<_Args>(__args)...);\
    \ }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nIn file\
    \ included from /usr/include/c++/9/functional:54,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmpv0j5td8v.cpp:2:\n/usr/include/c++/9/tuple:1095:2:\
    \ note: candidate: \u2018template<class _Alloc, class _U1, class _U2, typename\
    \ std::enable_if<(_MoveConstructibleTuple<_U1, _U2>() && _ImplicitlyMoveConvertibleTuple<_U1,\
    \ _U2>()), bool>::type <anonymous> > std::tuple<_T1, _T2>::tuple(std::allocator_arg_t,\
    \ const _Alloc&, _U1&&, _U2&&)\u2019\n 1095 |  tuple(allocator_arg_t __tag, const\
    \ _Alloc& __a, _U1&& __a1, _U2&& __a2)\n      |  ^~~~~\n/usr/include/c++/9/tuple:1095:2:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n              \
    \   from /usr/include/c++/9/bits/allocator.h:46,\n                 from /usr/include/c++/9/string:41,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpv0j5td8v.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4:\
    \ note:   candidate expects 4 arguments, 1 provided\n  146 |  { ::new((void *)__p)\
    \ _Up(std::forward<_Args>(__args)...); }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    In file included from /usr/include/c++/9/functional:54,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n                 from\
    \ /tmp/tmpv0j5td8v.cpp:2:\n/usr/include/c++/9/tuple:1085:11: note: candidate:\
    \ \u2018template<class _Alloc, class _Dummy, typename std::enable_if<(std::_TC<std::is_same<_Dummy,\
    \ void>::value, long int, long int>::_ConstructibleTuple<long int, long int>()\
    \ && (! std::_TC<std::is_same<_Dummy, void>::value, long int, long int>::_ImplicitlyConvertibleTuple<long\
    \ int, long int>())), bool>::type <anonymous> > std::tuple<_T1, _T2>::tuple(std::allocator_arg_t,\
    \ const _Alloc&, const _T1&, const _T2&)\u2019\n 1085 |  explicit tuple(allocator_arg_t\
    \ __tag, const _Alloc& __a,\n      |           ^~~~~\n/usr/include/c++/9/tuple:1085:11:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n              \
    \   from /usr/include/c++/9/bits/allocator.h:46,\n                 from /usr/include/c++/9/string:41,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpv0j5td8v.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4:\
    \ note:   candidate expects 4 arguments, 1 provided\n  146 |  { ::new((void *)__p)\
    \ _Up(std::forward<_Args>(__args)...); }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    In file included from /usr/include/c++/9/functional:54,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n                 from\
    \ /tmp/tmpv0j5td8v.cpp:2:\n/usr/include/c++/9/tuple:1073:2: note: candidate: \u2018\
    template<class _Alloc, class _Dummy, typename std::enable_if<(std::_TC<std::is_same<_Dummy,\
    \ void>::value, long int, long int>::_ConstructibleTuple<long int, long int>()\
    \ && std::_TC<std::is_same<_Dummy, void>::value, long int, long int>::_ImplicitlyConvertibleTuple<long\
    \ int, long int>()), bool>::type <anonymous> > std::tuple<_T1, _T2>::tuple(std::allocator_arg_t,\
    \ const _Alloc&, const _T1&, const _T2&)\u2019\n 1073 |  tuple(allocator_arg_t\
    \ __tag, const _Alloc& __a,\n      |  ^~~~~\n/usr/include/c++/9/tuple:1073:2:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n              \
    \   from /usr/include/c++/9/bits/allocator.h:46,\n                 from /usr/include/c++/9/string:41,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpv0j5td8v.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4:\
    \ note:   candidate expects 4 arguments, 1 provided\n  146 |  { ::new((void *)__p)\
    \ _Up(std::forward<_Args>(__args)...); }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    In file included from /usr/include/c++/9/functional:54,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n                 from\
    \ /tmp/tmpv0j5td8v.cpp:2:\n/usr/include/c++/9/tuple:1062:2: note: candidate: \u2018\
    template<class _Alloc> std::tuple<_T1, _T2>::tuple(std::allocator_arg_t, const\
    \ _Alloc&)\u2019\n 1062 |  tuple(allocator_arg_t __tag, const _Alloc& __a)\n \
    \     |  ^~~~~\n/usr/include/c++/9/tuple:1062:2: note:   template argument deduction/substitution\
    \ failed:\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n\
    \                 from /usr/include/c++/9/bits/allocator.h:46,\n             \
    \    from /usr/include/c++/9/string:41,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpv0j5td8v.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4: note:\
    \   candidate expects 2 arguments, 1 provided\n  146 |  { ::new((void *)__p) _Up(std::forward<_Args>(__args)...);\
    \ }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nIn file\
    \ included from /usr/include/c++/9/functional:54,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmpv0j5td8v.cpp:2:\n/usr/include/c++/9/tuple:1055:28:\
    \ note: candidate: \u2018template<class _U1, class _U2, typename std::enable_if<(_MoveConstructibleTuple<_U1,\
    \ _U2>() && (! _ImplicitlyMoveConvertibleTuple<_U1, _U2>())), bool>::type <anonymous>\
    \ > constexpr std::tuple<_T1, _T2>::tuple(std::pair<_U1, _U2>&&)\u2019\n 1055\
    \ |         explicit constexpr tuple(pair<_U1, _U2>&& __in)\n      |         \
    \                   ^~~~~\n/usr/include/c++/9/tuple:1055:28: note:   template\
    \ argument deduction/substitution failed:\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n\
    \                 from /usr/include/c++/9/bits/allocator.h:46,\n             \
    \    from /usr/include/c++/9/string:41,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpv0j5td8v.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4: note:\
    \   \u2018std::vector<long int>\u2019 is not derived from \u2018std::pair<_T1,\
    \ _T2>\u2019\n  146 |  { ::new((void *)__p) _Up(std::forward<_Args>(__args)...);\
    \ }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nIn file\
    \ included from /usr/include/c++/9/functional:54,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmpv0j5td8v.cpp:2:\n/usr/include/c++/9/tuple:1045:19:\
    \ note: candidate: \u2018template<class _U1, class _U2, typename std::enable_if<(_MoveConstructibleTuple<_U1,\
    \ _U2>() && _ImplicitlyMoveConvertibleTuple<_U1, _U2>()), bool>::type <anonymous>\
    \ > constexpr std::tuple<_T1, _T2>::tuple(std::pair<_U1, _U2>&&)\u2019\n 1045\
    \ |         constexpr tuple(pair<_U1, _U2>&& __in)\n      |                  \
    \ ^~~~~\n/usr/include/c++/9/tuple:1045:19: note:   template argument deduction/substitution\
    \ failed:\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n\
    \                 from /usr/include/c++/9/bits/allocator.h:46,\n             \
    \    from /usr/include/c++/9/string:41,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpv0j5td8v.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4: note:\
    \   \u2018std::vector<long int>\u2019 is not derived from \u2018std::pair<_T1,\
    \ _T2>\u2019\n  146 |  { ::new((void *)__p) _Up(std::forward<_Args>(__args)...);\
    \ }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nIn file\
    \ included from /usr/include/c++/9/functional:54,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmpv0j5td8v.cpp:2:\n/usr/include/c++/9/tuple:1036:28:\
    \ note: candidate: \u2018template<class _U1, class _U2, typename std::enable_if<(_ConstructibleTuple<_U1,\
    \ _U2>() && (! _ImplicitlyConvertibleTuple<_U1, _U2>())), bool>::type <anonymous>\
    \ > constexpr std::tuple<_T1, _T2>::tuple(const std::pair<_U1, _U2>&)\u2019\n\
    \ 1036 |         explicit constexpr tuple(const pair<_U1, _U2>& __in)\n      |\
    \                            ^~~~~\n/usr/include/c++/9/tuple:1036:28: note:  \
    \ template argument deduction/substitution failed:\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n\
    \                 from /usr/include/c++/9/bits/allocator.h:46,\n             \
    \    from /usr/include/c++/9/string:41,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpv0j5td8v.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4: note:\
    \   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::pair<_T1,\
    \ _T2>\u2019\n  146 |  { ::new((void *)__p) _Up(std::forward<_Args>(__args)...);\
    \ }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nIn file\
    \ included from /usr/include/c++/9/functional:54,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmpv0j5td8v.cpp:2:\n/usr/include/c++/9/tuple:1027:19:\
    \ note: candidate: \u2018template<class _U1, class _U2, typename std::enable_if<(_ConstructibleTuple<_U1,\
    \ _U2>() && _ImplicitlyConvertibleTuple<_U1, _U2>()), bool>::type <anonymous>\
    \ > constexpr std::tuple<_T1, _T2>::tuple(const std::pair<_U1, _U2>&)\u2019\n\
    \ 1027 |         constexpr tuple(const pair<_U1, _U2>& __in)\n      |        \
    \           ^~~~~\n/usr/include/c++/9/tuple:1027:19: note:   template argument\
    \ deduction/substitution failed:\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n\
    \                 from /usr/include/c++/9/bits/allocator.h:46,\n             \
    \    from /usr/include/c++/9/string:41,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpv0j5td8v.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4: note:\
    \   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::pair<_T1,\
    \ _T2>\u2019\n  146 |  { ::new((void *)__p) _Up(std::forward<_Args>(__args)...);\
    \ }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nIn file\
    \ included from /usr/include/c++/9/functional:54,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmpv0j5td8v.cpp:2:\n/usr/include/c++/9/tuple:1018:28:\
    \ note: candidate: \u2018template<class _U1, class _U2, typename std::enable_if<(_MoveConstructibleTuple<_U1,\
    \ _U2>() && (! _ImplicitlyMoveConvertibleTuple<_U1, _U2>())), bool>::type <anonymous>\
    \ > constexpr std::tuple<_T1, _T2>::tuple(std::tuple<_U1, _U2>&&)\u2019\n 1018\
    \ |         explicit constexpr tuple(tuple<_U1, _U2>&& __in)\n      |        \
    \                    ^~~~~\n/usr/include/c++/9/tuple:1018:28: note:   template\
    \ argument deduction/substitution failed:\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n\
    \                 from /usr/include/c++/9/bits/allocator.h:46,\n             \
    \    from /usr/include/c++/9/string:41,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpv0j5td8v.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4: note:\
    \   \u2018std::vector<long int>\u2019 is not derived from \u2018std::tuple<_T1,\
    \ _T2>\u2019\n  146 |  { ::new((void *)__p) _Up(std::forward<_Args>(__args)...);\
    \ }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nIn file\
    \ included from /usr/include/c++/9/functional:54,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmpv0j5td8v.cpp:2:\n/usr/include/c++/9/tuple:1009:19:\
    \ note: candidate: \u2018template<class _U1, class _U2, typename std::enable_if<(_MoveConstructibleTuple<_U1,\
    \ _U2>() && _ImplicitlyMoveConvertibleTuple<_U1, _U2>()), bool>::type <anonymous>\
    \ > constexpr std::tuple<_T1, _T2>::tuple(std::tuple<_U1, _U2>&&)\u2019\n 1009\
    \ |         constexpr tuple(tuple<_U1, _U2>&& __in)\n      |                 \
    \  ^~~~~\n/usr/include/c++/9/tuple:1009:19: note:   template argument deduction/substitution\
    \ failed:\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n\
    \                 from /usr/include/c++/9/bits/allocator.h:46,\n             \
    \    from /usr/include/c++/9/string:41,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpv0j5td8v.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4: note:\
    \   \u2018std::vector<long int>\u2019 is not derived from \u2018std::tuple<_T1,\
    \ _T2>\u2019\n  146 |  { ::new((void *)__p) _Up(std::forward<_Args>(__args)...);\
    \ }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nIn file\
    \ included from /usr/include/c++/9/functional:54,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmpv0j5td8v.cpp:2:\n/usr/include/c++/9/tuple:1000:28:\
    \ note: candidate: \u2018template<class _U1, class _U2, typename std::enable_if<(_ConstructibleTuple<_U1,\
    \ _U2>() && (! _ImplicitlyConvertibleTuple<_U1, _U2>())), bool>::type <anonymous>\
    \ > constexpr std::tuple<_T1, _T2>::tuple(const std::tuple<_U1, _U2>&)\u2019\n\
    \ 1000 |         explicit constexpr tuple(const tuple<_U1, _U2>& __in)\n     \
    \ |                            ^~~~~\n/usr/include/c++/9/tuple:1000:28: note:\
    \   template argument deduction/substitution failed:\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n\
    \                 from /usr/include/c++/9/bits/allocator.h:46,\n             \
    \    from /usr/include/c++/9/string:41,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpv0j5td8v.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4: note:\
    \   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::tuple<_T1,\
    \ _T2>\u2019\n  146 |  { ::new((void *)__p) _Up(std::forward<_Args>(__args)...);\
    \ }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nIn file\
    \ included from /usr/include/c++/9/functional:54,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmpv0j5td8v.cpp:2:\n/usr/include/c++/9/tuple:991:19:\
    \ note: candidate: \u2018template<class _U1, class _U2, typename std::enable_if<(_ConstructibleTuple<_U1,\
    \ _U2>() && _ImplicitlyConvertibleTuple<_U1, _U2>()), bool>::type <anonymous>\
    \ > constexpr std::tuple<_T1, _T2>::tuple(const std::tuple<_U1, _U2>&)\u2019\n\
    \  991 |         constexpr tuple(const tuple<_U1, _U2>& __in)\n      |       \
    \            ^~~~~\n/usr/include/c++/9/tuple:991:19: note:   template argument\
    \ deduction/substitution failed:\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n\
    \                 from /usr/include/c++/9/bits/allocator.h:46,\n             \
    \    from /usr/include/c++/9/string:41,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpv0j5td8v.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4: note:\
    \   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::tuple<_T1,\
    \ _T2>\u2019\n  146 |  { ::new((void *)__p) _Up(std::forward<_Args>(__args)...);\
    \ }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nIn file\
    \ included from /usr/include/c++/9/functional:54,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmpv0j5td8v.cpp:2:\n/usr/include/c++/9/tuple:983:17:\
    \ note: candidate: \u2018constexpr std::tuple<_T1, _T2>::tuple(std::tuple<_T1,\
    \ _T2>&&) [with _T1 = long int; _T2 = long int]\u2019\n  983 |       constexpr\
    \ tuple(tuple&&) = default;\n      |                 ^~~~~\n/usr/include/c++/9/tuple:983:23:\
    \ note:   no known conversion for argument 1 from \u2018std::vector<long int>\u2019\
    \ to \u2018std::tuple<long int, long int>&&\u2019\n  983 |       constexpr tuple(tuple&&)\
    \ = default;\n      |                       ^~~~~~~\n/usr/include/c++/9/tuple:981:17:\
    \ note: candidate: \u2018constexpr std::tuple<_T1, _T2>::tuple(const std::tuple<_T1,\
    \ _T2>&) [with _T1 = long int; _T2 = long int]\u2019\n  981 |       constexpr\
    \ tuple(const tuple&) = default;\n      |                 ^~~~~\n/usr/include/c++/9/tuple:981:23:\
    \ note:   no known conversion for argument 1 from \u2018std::vector<long int>\u2019\
    \ to \u2018const std::tuple<long int, long int>&\u2019\n  981 |       constexpr\
    \ tuple(const tuple&) = default;\n      |                       ^~~~~~~~~~~~\n\
    /usr/include/c++/9/tuple:978:28: note: candidate: \u2018template<class _U1, class\
    \ _U2, typename std::enable_if<((_MoveConstructibleTuple<_U1, _U2>() && (! _ImplicitlyMoveConvertibleTuple<_U1,\
    \ _U2>())) && (! std::is_same<typename std::remove_cv<typename std::remove_reference<_Tp>::type>::type,\
    \ std::allocator_arg_t>::value)), bool>::type <anonymous> > constexpr std::tuple<_T1,\
    \ _T2>::tuple(_U1&&, _U2&&)\u2019\n  978 |         explicit constexpr tuple(_U1&&\
    \ __a1, _U2&& __a2)\n      |                            ^~~~~\n/usr/include/c++/9/tuple:978:28:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n              \
    \   from /usr/include/c++/9/bits/allocator.h:46,\n                 from /usr/include/c++/9/string:41,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpv0j5td8v.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4:\
    \ note:   candidate expects 2 arguments, 1 provided\n  146 |  { ::new((void *)__p)\
    \ _Up(std::forward<_Args>(__args)...); }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    In file included from /usr/include/c++/9/functional:54,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n                 from\
    \ /tmp/tmpv0j5td8v.cpp:2:\n/usr/include/c++/9/tuple:968:19: note: candidate: \u2018\
    template<class _U1, class _U2, typename std::enable_if<((_MoveConstructibleTuple<_U1,\
    \ _U2>() && _ImplicitlyMoveConvertibleTuple<_U1, _U2>()) && (! std::is_same<typename\
    \ std::remove_cv<typename std::remove_reference<_Tp>::type>::type, std::allocator_arg_t>::value)),\
    \ bool>::type <anonymous> > constexpr std::tuple<_T1, _T2>::tuple(_U1&&, _U2&&)\u2019\
    \n  968 |         constexpr tuple(_U1&& __a1, _U2&& __a2)\n      |           \
    \        ^~~~~\n/usr/include/c++/9/tuple:968:19: note:   template argument deduction/substitution\
    \ failed:\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n\
    \                 from /usr/include/c++/9/bits/allocator.h:46,\n             \
    \    from /usr/include/c++/9/string:41,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpv0j5td8v.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4: note:\
    \   candidate expects 2 arguments, 1 provided\n  146 |  { ::new((void *)__p) _Up(std::forward<_Args>(__args)...);\
    \ }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nIn file\
    \ included from /usr/include/c++/9/functional:54,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmpv0j5td8v.cpp:2:\n/usr/include/c++/9/tuple:954:28:\
    \ note: candidate: \u2018template<class _Dummy, typename std::enable_if<(std::_TC<std::is_same<_Dummy,\
    \ void>::value, long int, long int>::_ConstructibleTuple<long int, long int>()\
    \ && (! std::_TC<std::is_same<_Dummy, void>::value, long int, long int>::_ImplicitlyConvertibleTuple<long\
    \ int, long int>())), bool>::type <anonymous> > constexpr std::tuple<_T1, _T2>::tuple(const\
    \ _T1&, const _T2&)\u2019\n  954 |         explicit constexpr tuple(const _T1&\
    \ __a1, const _T2& __a2)\n      |                            ^~~~~\n/usr/include/c++/9/tuple:954:28:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n              \
    \   from /usr/include/c++/9/bits/allocator.h:46,\n                 from /usr/include/c++/9/string:41,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpv0j5td8v.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4:\
    \ note:   candidate expects 2 arguments, 1 provided\n  146 |  { ::new((void *)__p)\
    \ _Up(std::forward<_Args>(__args)...); }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    In file included from /usr/include/c++/9/functional:54,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n                 from\
    \ /tmp/tmpv0j5td8v.cpp:2:\n/usr/include/c++/9/tuple:945:19: note: candidate: \u2018\
    template<class _Dummy, typename std::enable_if<(std::_TC<std::is_same<_Dummy,\
    \ void>::value, long int, long int>::_ConstructibleTuple<long int, long int>()\
    \ && std::_TC<std::is_same<_Dummy, void>::value, long int, long int>::_ImplicitlyConvertibleTuple<long\
    \ int, long int>()), bool>::type <anonymous> > constexpr std::tuple<_T1, _T2>::tuple(const\
    \ _T1&, const _T2&)\u2019\n  945 |         constexpr tuple(const _T1& __a1, const\
    \ _T2& __a2)\n      |                   ^~~~~\n/usr/include/c++/9/tuple:945:19:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n              \
    \   from /usr/include/c++/9/bits/allocator.h:46,\n                 from /usr/include/c++/9/string:41,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpv0j5td8v.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4:\
    \ note:   candidate expects 2 arguments, 1 provided\n  146 |  { ::new((void *)__p)\
    \ _Up(std::forward<_Args>(__args)...); }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    In file included from /usr/include/c++/9/functional:54,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n                 from\
    \ /tmp/tmpv0j5td8v.cpp:2:\n/usr/include/c++/9/tuple:931:21: note: candidate: \u2018\
    template<class _U1, class _U2, typename std::enable_if<std::__and_<std::is_default_constructible<_Tp>,\
    \ std::is_default_constructible<_Dp>, std::__not_<std::__and_<std::__is_implicitly_default_constructible<_U1>,\
    \ std::__is_implicitly_default_constructible<_U2> > > >::value, bool>::type <anonymous>\
    \ > constexpr std::tuple<_T1, _T2>::tuple()\u2019\n  931 |  explicit constexpr\
    \ tuple()\n      |                     ^~~~~\n/usr/include/c++/9/tuple:931:21:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n              \
    \   from /usr/include/c++/9/bits/allocator.h:46,\n                 from /usr/include/c++/9/string:41,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpv0j5td8v.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4:\
    \ note:   candidate expects 0 arguments, 1 provided\n  146 |  { ::new((void *)__p)\
    \ _Up(std::forward<_Args>(__args)...); }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    In file included from /usr/include/c++/9/functional:54,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n                 from\
    \ /tmp/tmpv0j5td8v.cpp:2:\n/usr/include/c++/9/tuple:918:12: note: candidate: \u2018\
    template<class _U1, class _U2, typename std::enable_if<std::__and_<std::__is_implicitly_default_constructible<_U1>,\
    \ std::__is_implicitly_default_constructible<_U2> >::value, bool>::type <anonymous>\
    \ > constexpr std::tuple<_T1, _T2>::tuple()\u2019\n  918 |  constexpr tuple()\n\
    \      |            ^~~~~\n/usr/include/c++/9/tuple:918:12: note:   template argument\
    \ deduction/substitution failed:\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n\
    \                 from /usr/include/c++/9/bits/allocator.h:46,\n             \
    \    from /usr/include/c++/9/string:41,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpv0j5td8v.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4: note:\
    \   candidate expects 0 arguments, 1 provided\n  146 |  { ::new((void *)__p) _Up(std::forward<_Args>(__args)...);\
    \ }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    std::vector<std::tuple<long, long>> res;\n    std::vector<long>\
    \ row;\n    std::vector<long> col;\n    std::vector<long> temp;\n    long cnt\
    \ = 0;\n    for (auto &i : lst) {\n        row.push_back(i[0]);\n        col.push_back(i.size()\
    \ - 1);\n    }\n    sort(row.begin(), row.end());\n    sort(col.begin(), col.end());\n\
    \    for (long i = 0; i < row.size(); i++) {\n        for (long j = 0; j < col.size();\
    \ j++) {\n            if (row[i] == x && col[j] == x) {\n                res.push_back({i,\
    \ j});\n                cnt++;\n            }\n        }\n    }\n    if (cnt ==\
    \ 0) {\n        res.push_back(std::make_tuple(0, 0));\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = get_row;\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "tmpke9iq7zf: /tmp/tmpke9iq7zf.cpp:46: int main(): Assertion `candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    std::vector<std::tuple<long, long>> res;\n    if (lst.size()\
    \ == 0) {\n        return res;\n    }\n    std::vector<std::tuple<long, long>>\
    \ row;\n    for (auto &i : lst) {\n        row.push_back(i);\n    }\n    row.sort([](auto\
    \ &a, auto &b) { return std::get<0>(a) < std::get<0>(b); });\n    row.sort([](auto\
    \ &a, auto &b) { return std::get<1>(a) > std::get<1>(b); });\n    for (auto &i\
    \ : row) {\n        if (std::get<0>(i) == x) {\n            res.push_back(std::make_tuple(std::get<0>(i),\
    \ std::get<1>(i)));\n        }\n    }\n    return res;\n}\nint main() {\n    auto\
    \ candidate = get_row;\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp76htdjp3.cpp: In function \u2018std::vector<std::tuple<long int,\
    \ long int> > get_row(std::vector<std::vector<long int> >, long int)\u2019:\n\
    /tmp/tmp76htdjp3.cpp:26:24: error: no matching function for call to \u2018std::vector<std::tuple<long\
    \ int, long int> >::push_back(std::vector<long int>&)\u2019\n   26 |         row.push_back(i);\n\
    \      |                        ^\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/queue:61,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:86,\n\
    \                 from /tmp/tmp76htdjp3.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::tuple<long int, long int>; _Alloc = std::allocator<std::tuple<long\
    \ int, long int> >; std::vector<_Tp, _Alloc>::value_type = std::tuple<long int,\
    \ long int>]\u2019\n 1184 |       push_back(const value_type& __x)\n      |  \
    \     ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1184:35: note:   no known\
    \ conversion for argument 1 from \u2018std::vector<long int>\u2019 to \u2018const\
    \ value_type&\u2019 {aka \u2018const std::tuple<long int, long int>&\u2019}\n\
    \ 1184 |       push_back(const value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n\
    /usr/include/c++/9/bits/stl_vector.h:1200:7: note: candidate: \u2018void std::vector<_Tp,\
    \ _Alloc>::push_back(std::vector<_Tp, _Alloc>::value_type&&) [with _Tp = std::tuple<long\
    \ int, long int>; _Alloc = std::allocator<std::tuple<long int, long int> >; std::vector<_Tp,\
    \ _Alloc>::value_type = std::tuple<long int, long int>]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018std::vector<long int>\u2019\
    \ to \u2018std::vector<std::tuple<long int, long int> >::value_type&&\u2019 {aka\
    \ \u2018std::tuple<long int, long int>&&\u2019}\n 1200 |       push_back(value_type&&\
    \ __x)\n      |                 ~~~~~~~~~~~~~^~~\n/tmp/tmp76htdjp3.cpp:28:9: error:\
    \ \u2018class std::vector<std::tuple<long int, long int> >\u2019 has no member\
    \ named \u2018sort\u2019\n   28 |     row.sort([](auto &a, auto &b) { return std::get<0>(a)\
    \ < std::get<0>(b); });\n      |         ^~~~\n/tmp/tmp76htdjp3.cpp:29:9: error:\
    \ \u2018class std::vector<std::tuple<long int, long int> >\u2019 has no member\
    \ named \u2018sort\u2019\n   29 |     row.sort([](auto &a, auto &b) { return std::get<1>(a)\
    \ > std::get<1>(b); });\n      |         ^~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    std::vector<std::tuple<long, long>> res;\n    for(auto &row\
    \ : lst) {\n        for(auto &el : row) {\n            if(el == x) {\n       \
    \         res.push_back(std::make_tuple(row.size(), row.size() - 1));\n      \
    \      }\n        }\n    }\n    std::sort(res.begin(), res.end(), [](const std::tuple<long,\
    \ long> &a, const std::tuple<long, long> &b) { return std::get<0>(a) < std::get<0>(b);\
    \ });\n    std::sort(res.begin(), res.end(), [](const std::tuple<long, long> &a,\
    \ const std::tuple<long, long> &b) { return std::get<1>(a) < std::get<1>(b); });\n\
    \    return res;\n}\nint main() {\n    auto candidate = get_row;\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "tmp3wivmdw2: /tmp/tmp3wivmdw2.cpp:34: int main(): Assertion `candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    std::vector<std::tuple<long, long>> res;\n    std::vector<long>\
    \ row;\n    std::vector<long> col;\n    long row_index = 0;\n    long col_index\
    \ = 0;\n    for (auto &row : lst) {\n        row.clear();\n        col.clear();\n\
    \        for (auto &el : row) {\n            if (el == x) {\n                row.push_back(row_index);\n\
    \                col.push_back(col_index);\n            }\n        }\n       \
    \ row_index++;\n        col_index++;\n    }\n    std::sort(row.begin(), row.end());\n\
    \    std::sort(col.begin(), col.end());\n    for (auto &el : row) {\n        for\
    \ (auto &el2 : col) {\n            if (el == el2) {\n                res.push_back(std::make_tuple(el,\
    \ el2));\n            }\n        }\n    }\n    return res;\n}\nint main() {\n\
    \    auto candidate = get_row;\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "tmpc4ponila: /tmp/tmpc4ponila.cpp:50: int main(): Assertion `candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    std::vector<std::tuple<long, long>> res;\n    for(auto &row\
    \ : lst) {\n        for(auto &val : row) {\n            if(val == x) {\n     \
    \           res.push_back(std::make_tuple(row.size() - 1, row.size() - 1));\n\
    \            }\n        }\n    }\n    std::sort(res.begin(), res.end(), [](auto\
    \ &a, auto &b) {\n        return std::get<0>(a) > std::get<0>(b);\n    });\n \
    \   std::sort(res.begin(), res.end(), [](auto &a, auto &b) {\n        return std::get<1>(a)\
    \ > std::get<1>(b);\n    });\n    return res;\n}\nint main() {\n    auto candidate\
    \ = get_row;\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "tmpcpwuxp_x: /tmp/tmpcpwuxp_x.cpp:38: int main(): Assertion `candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    std::vector<std::tuple<long, long>> res;\n    for(auto &row\
    \ : lst) {\n        for(auto &val : row) {\n            if(val == x) {\n     \
    \           res.emplace_back(std::make_tuple(row.size(), row.size() - 1));\n \
    \           }\n        }\n    }\n    std::sort(res.begin(), res.end(), [](const\
    \ std::tuple<long, long> &a, const std::tuple<long, long> &b) { return std::get<0>(a)\
    \ < std::get<0>(b); });\n    std::sort(res.begin(), res.end(), [](const std::tuple<long,\
    \ long> &a, const std::tuple<long, long> &b) { return std::get<1>(a) < std::get<1>(b);\
    \ });\n    return res;\n}\nint main() {\n    auto candidate = get_row;\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "tmpo3nh5f2f: /tmp/tmpo3nh5f2f.cpp:34: int main(): Assertion `candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    // Your code here\n    std::vector<std::tuple<long, long>>\
    \ res;\n    for(auto &row : lst){\n        for(auto &col : row){\n           \
    \ if(col == x){\n                res.push_back(std::make_tuple(row.size() - 1,\
    \ col.size() - 1));\n            }\n        }\n    }\n    std::sort(res.begin(),\
    \ res.end(), [](auto &a, auto &b){\n        return std::get<0>(a) < std::get<0>(b);\n\
    \    });\n    std::sort(res.begin(), res.end(), [](auto &a, auto &b){\n      \
    \  return std::get<1>(a) > std::get<1>(b);\n    });\n    return res;\n}\nint main()\
    \ {\n    auto candidate = get_row;\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmprmks075l.cpp: In function \u2018std::vector<std::tuple<long int,\
    \ long int> > get_row(std::vector<std::vector<long int> >, long int)\u2019:\n\
    /tmp/tmprmks075l.cpp:25:67: error: request for member \u2018size\u2019 in \u2018\
    col\u2019, which is of non-class type \u2018long int\u2019\n   25 |          \
    \       res.push_back(std::make_tuple(row.size() - 1, col.size() - 1));\n    \
    \  |                                                                   ^~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    std::vector<std::tuple<long, long>> res;\n    std::vector<long>\
    \ row;\n    std::vector<long> col;\n    std::vector<long> temp;\n    for (auto\
    \ &i : lst) {\n        row.push_back(i[0]);\n        col.push_back(i.size() -\
    \ 1);\n    }\n    std::sort(row.begin(), row.end());\n    std::sort(col.begin(),\
    \ col.end());\n    for (long i = 0; i < row.size(); i++) {\n        temp.clear();\n\
    \        for (long j = 0; j < col.size(); j++) {\n            if (row[i] == col[j])\
    \ {\n                temp.push_back(j);\n            }\n        }\n        res.push_back(std::make_tuple(row[i],\
    \ temp.size()));\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = get_row;\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "tmpx0sdrlwe: /tmp/tmpx0sdrlwe.cpp:43: int main(): Assertion `candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    std::vector<std::tuple<long, long>> res;\n    for(auto &row\
    \ : lst) {\n        for(auto &el : row) {\n            if(el == x) {\n       \
    \         res.emplace_back(std::make_tuple(row.size(), row.size() - 1));\n   \
    \         }\n        }\n    }\n    std::sort(res.begin(), res.end(), [](auto &a,\
    \ auto &b) { return std::get<0>(a) < std::get<0>(b); });\n    std::sort(res.begin(),\
    \ res.end(), [](auto &a, auto &b) { return std::get<1>(a) < std::get<1>(b); });\n\
    \    return res;\n}\nint main() {\n    auto candidate = get_row;\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "tmpygql2c8v: /tmp/tmpygql2c8v.cpp:34: int main(): Assertion `candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    std::vector<std::tuple<long, long>> res;\n    std::vector<long>\
    \ row;\n    std::vector<long> col;\n    for (auto &v : lst) {\n        row.push_back(v[0]);\n\
    \        col.push_back(v[1]);\n    }\n    std::sort(row.begin(), row.end());\n\
    \    std::sort(col.begin(), col.end());\n    for (long i = 0; i < row.size();\
    \ i++) {\n        long j = row.size() - i - 1;\n        long k = col.size() -\
    \ j - 1;\n        if (row[i] == x && col[j] == x) {\n            res.push_back({i,\
    \ j});\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = get_row;\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "tmptxox7_jh: /tmp/tmptxox7_jh.cpp:40: int main(): Assertion `candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    // Your code here\n    std::vector<std::tuple<long, long>>\
    \ res;\n    for(auto &row : lst) {\n        for(auto &val : row) {\n         \
    \   if(val == x) {\n                res.emplace_back(std::make_tuple(row.size()\
    \ - 1, row.size() - 1));\n            }\n        }\n    }\n    std::sort(res.begin(),\
    \ res.end(), [](const std::tuple<long, long> &a, const std::tuple<long, long>\
    \ &b){\n        return std::get<0>(a) < std::get<0>(b);\n    });\n    std::sort(res.begin(),\
    \ res.end(), [](const std::tuple<long, long> &a, const std::tuple<long, long>\
    \ &b){\n        return std::get<1>(a) < std::get<1>(b);\n    });\n    return res;\n\
    }\nint main() {\n    auto candidate = get_row;\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "tmpuonfiz7u: /tmp/tmpuonfiz7u.cpp:39: int main(): Assertion `candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    std::vector<std::tuple<long, long>> res;\n    for(auto &row\
    \ : lst) {\n        for(auto &val : row) {\n            if(val == x) {\n     \
    \           res.emplace_back(std::make_tuple(row.size(), row.size() - 1));\n \
    \           }\n        }\n    }\n    std::sort(res.begin(), res.end(), [](const\
    \ std::tuple<long, long> &a, const std::tuple<long, long> &b) {\n        return\
    \ std::get<0>(a) < std::get<0>(b);\n    });\n    std::sort(res.begin(), res.end(),\
    \ [](const std::tuple<long, long> &a, const std::tuple<long, long> &b) {\n   \
    \     return std::get<1>(a) < std::get<1>(b);\n    });\n    return res;\n}\nint\
    \ main() {\n    auto candidate = get_row;\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "tmp92ib5gbq: /tmp/tmp92ib5gbq.cpp:38: int main(): Assertion `candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    // Write your code here\n    std::vector<std::tuple<long,\
    \ long>> res;\n    for(auto &row : lst){\n        for(auto &val : row){\n    \
    \        if(val == x){\n                res.emplace_back(row.size() - 1, row.size()\
    \ - 1);\n            }\n        }\n    }\n    std::sort(res.begin(), res.end(),\
    \ [](const std::tuple<long, long> &a, const std::tuple<long, long> &b){\n    \
    \    return std::get<0>(a) < std::get<0>(b);\n    });\n    std::sort(res.begin(),\
    \ res.end(), [](const std::tuple<long, long> &a, const std::tuple<long, long>\
    \ &b){\n        return std::get<1>(a) < std::get<1>(b);\n    });\n    return res;\n\
    }\nint main() {\n    auto candidate = get_row;\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "tmpe35h932q: /tmp/tmpe35h932q.cpp:39: int main(): Assertion `candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    std::vector<std::tuple<long, long>> res;\n    long row =\
    \ 0;\n    long col = 0;\n    for (auto &v : lst) {\n        row += v.size();\n\
    \        col += v.size();\n    }\n    long row_max = row;\n    long col_max =\
    \ col;\n    for (auto &v : lst) {\n        row_max = std::max(row_max, v.size());\n\
    \        col_max = std::max(col_max, v.size());\n    }\n    long row_min = row;\n\
    \    long col_min = col;\n    for (auto &v : lst) {\n        row_min = std::min(row_min,\
    \ v.size());\n        col_min = std::min(col_min, v.size());\n    }\n    long\
    \ row_mid = row - row_min;\n    long col_mid = col - col_min;\n    long row_start\
    \ = row_mid - row_max;\n    long row_end = row_mid + row_max;\n    long col_start\
    \ = col_mid - col_max;\n    long col_end = col_mid + col_max;\n    for (auto &v\
    \ : lst) {\n        for (long i = 0; i < v.size(); i++) {\n            if (v[i]\
    \ == x) {\n                res.emplace_back(std::make_tuple(row_start + i, col_start\
    \ + i));\n            }\n        }\n    }\n    std::sort(res.begin(), res.end(),\
    \ [](const std::tuple<long, long> &a, const std::tuple<long, long> &b) {\n   \
    \     return std::get<0>(a) < std::get<0>(b);\n    });\n    std::sort(res.begin(),\
    \ res.end(), [](const std::tuple<long, long> &a, const std::tuple<long, long>\
    \ &b) {\n        return std::get<1>(a) < std::get<1>(b);\n    });\n    return\
    \ res;\n}\nint main() {\n    auto candidate = get_row;\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxo4kicwj.cpp: In function \u2018std::vector<std::tuple<long int,\
    \ long int> > get_row(std::vector<std::vector<long int> >, long int)\u2019:\n\
    /tmp/tmpxo4kicwj.cpp:30:45: error: no matching function for call to \u2018max(long\
    \ int&, std::vector<long int>::size_type)\u2019\n   30 |         row_max = std::max(row_max,\
    \ v.size());\n      |                                             ^\nIn file included\
    \ from /usr/include/c++/9/bits/char_traits.h:39,\n                 from /usr/include/c++/9/ios:40,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpxo4kicwj.cpp:2:\n/usr/include/c++/9/bits/stl_algobase.h:222:5:\
    \ note: candidate: \u2018template<class _Tp> constexpr const _Tp& std::max(const\
    \ _Tp&, const _Tp&)\u2019\n  222 |     max(const _Tp& __a, const _Tp& __b)\n \
    \     |     ^~~\n/usr/include/c++/9/bits/stl_algobase.h:222:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmpxo4kicwj.cpp:30:45: note: \
    \  deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018long int\u2019\
    \ and \u2018std::vector<long int>::size_type\u2019 {aka \u2018long unsigned int\u2019\
    })\n   30 |         row_max = std::max(row_max, v.size());\n      |          \
    \                                   ^\nIn file included from /usr/include/c++/9/bits/char_traits.h:39,\n\
    \                 from /usr/include/c++/9/ios:40,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpxo4kicwj.cpp:2:\n/usr/include/c++/9/bits/stl_algobase.h:268:5: note:\
    \ candidate: \u2018template<class _Tp, class _Compare> constexpr const _Tp& std::max(const\
    \ _Tp&, const _Tp&, _Compare)\u2019\n  268 |     max(const _Tp& __a, const _Tp&\
    \ __b, _Compare __comp)\n      |     ^~~\n/usr/include/c++/9/bits/stl_algobase.h:268:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpxo4kicwj.cpp:30:45:\
    \ note:   deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018\
    long int\u2019 and \u2018std::vector<long int>::size_type\u2019 {aka \u2018long\
    \ unsigned int\u2019})\n   30 |         row_max = std::max(row_max, v.size());\n\
    \      |                                             ^\nIn file included from\
    \ /usr/include/c++/9/algorithm:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpxo4kicwj.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3462:5:\
    \ note: candidate: \u2018template<class _Tp> constexpr _Tp std::max(std::initializer_list<_Tp>)\u2019\
    \n 3462 |     max(initializer_list<_Tp> __l)\n      |     ^~~\n/usr/include/c++/9/bits/stl_algo.h:3462:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpxo4kicwj.cpp:30:45:\
    \ note:   mismatched types \u2018std::initializer_list<_Tp>\u2019 and \u2018long\
    \ int\u2019\n   30 |         row_max = std::max(row_max, v.size());\n      | \
    \                                            ^\nIn file included from /usr/include/c++/9/algorithm:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpxo4kicwj.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3468:5:\
    \ note: candidate: \u2018template<class _Tp, class _Compare> constexpr _Tp std::max(std::initializer_list<_Tp>,\
    \ _Compare)\u2019\n 3468 |     max(initializer_list<_Tp> __l, _Compare __comp)\n\
    \      |     ^~~\n/usr/include/c++/9/bits/stl_algo.h:3468:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmpxo4kicwj.cpp:30:45: note: \
    \  mismatched types \u2018std::initializer_list<_Tp>\u2019 and \u2018long int\u2019\
    \n   30 |         row_max = std::max(row_max, v.size());\n      |            \
    \                                 ^\n/tmp/tmpxo4kicwj.cpp:31:45: error: no matching\
    \ function for call to \u2018max(long int&, std::vector<long int>::size_type)\u2019\
    \n   31 |         col_max = std::max(col_max, v.size());\n      |            \
    \                                 ^\nIn file included from /usr/include/c++/9/bits/char_traits.h:39,\n\
    \                 from /usr/include/c++/9/ios:40,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpxo4kicwj.cpp:2:\n/usr/include/c++/9/bits/stl_algobase.h:222:5: note:\
    \ candidate: \u2018template<class _Tp> constexpr const _Tp& std::max(const _Tp&,\
    \ const _Tp&)\u2019\n  222 |     max(const _Tp& __a, const _Tp& __b)\n      |\
    \     ^~~\n/usr/include/c++/9/bits/stl_algobase.h:222:5: note:   template argument\
    \ deduction/substitution failed:\n/tmp/tmpxo4kicwj.cpp:31:45: note:   deduced\
    \ conflicting types for parameter \u2018const _Tp\u2019 (\u2018long int\u2019\
    \ and \u2018std::vector<long int>::size_type\u2019 {aka \u2018long unsigned int\u2019\
    })\n   31 |         col_max = std::max(col_max, v.size());\n      |          \
    \                                   ^\nIn file included from /usr/include/c++/9/bits/char_traits.h:39,\n\
    \                 from /usr/include/c++/9/ios:40,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpxo4kicwj.cpp:2:\n/usr/include/c++/9/bits/stl_algobase.h:268:5: note:\
    \ candidate: \u2018template<class _Tp, class _Compare> constexpr const _Tp& std::max(const\
    \ _Tp&, const _Tp&, _Compare)\u2019\n  268 |     max(const _Tp& __a, const _Tp&\
    \ __b, _Compare __comp)\n      |     ^~~\n/usr/include/c++/9/bits/stl_algobase.h:268:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpxo4kicwj.cpp:31:45:\
    \ note:   deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018\
    long int\u2019 and \u2018std::vector<long int>::size_type\u2019 {aka \u2018long\
    \ unsigned int\u2019})\n   31 |         col_max = std::max(col_max, v.size());\n\
    \      |                                             ^\nIn file included from\
    \ /usr/include/c++/9/algorithm:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpxo4kicwj.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3462:5:\
    \ note: candidate: \u2018template<class _Tp> constexpr _Tp std::max(std::initializer_list<_Tp>)\u2019\
    \n 3462 |     max(initializer_list<_Tp> __l)\n      |     ^~~\n/usr/include/c++/9/bits/stl_algo.h:3462:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpxo4kicwj.cpp:31:45:\
    \ note:   mismatched types \u2018std::initializer_list<_Tp>\u2019 and \u2018long\
    \ int\u2019\n   31 |         col_max = std::max(col_max, v.size());\n      | \
    \                                            ^\nIn file included from /usr/include/c++/9/algorithm:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpxo4kicwj.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3468:5:\
    \ note: candidate: \u2018template<class _Tp, class _Compare> constexpr _Tp std::max(std::initializer_list<_Tp>,\
    \ _Compare)\u2019\n 3468 |     max(initializer_list<_Tp> __l, _Compare __comp)\n\
    \      |     ^~~\n/usr/include/c++/9/bits/stl_algo.h:3468:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmpxo4kicwj.cpp:31:45: note: \
    \  mismatched types \u2018std::initializer_list<_Tp>\u2019 and \u2018long int\u2019\
    \n   31 |         col_max = std::max(col_max, v.size());\n      |            \
    \                                 ^\n/tmp/tmpxo4kicwj.cpp:36:45: error: no matching\
    \ function for call to \u2018min(long int&, std::vector<long int>::size_type)\u2019\
    \n   36 |         row_min = std::min(row_min, v.size());\n      |            \
    \                                 ^\nIn file included from /usr/include/c++/9/bits/char_traits.h:39,\n\
    \                 from /usr/include/c++/9/ios:40,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpxo4kicwj.cpp:2:\n/usr/include/c++/9/bits/stl_algobase.h:198:5: note:\
    \ candidate: \u2018template<class _Tp> constexpr const _Tp& std::min(const _Tp&,\
    \ const _Tp&)\u2019\n  198 |     min(const _Tp& __a, const _Tp& __b)\n      |\
    \     ^~~\n/usr/include/c++/9/bits/stl_algobase.h:198:5: note:   template argument\
    \ deduction/substitution failed:\n/tmp/tmpxo4kicwj.cpp:36:45: note:   deduced\
    \ conflicting types for parameter \u2018const _Tp\u2019 (\u2018long int\u2019\
    \ and \u2018std::vector<long int>::size_type\u2019 {aka \u2018long unsigned int\u2019\
    })\n   36 |         row_min = std::min(row_min, v.size());\n      |          \
    \                                   ^\nIn file included from /usr/include/c++/9/bits/char_traits.h:39,\n\
    \                 from /usr/include/c++/9/ios:40,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpxo4kicwj.cpp:2:\n/usr/include/c++/9/bits/stl_algobase.h:246:5: note:\
    \ candidate: \u2018template<class _Tp, class _Compare> constexpr const _Tp& std::min(const\
    \ _Tp&, const _Tp&, _Compare)\u2019\n  246 |     min(const _Tp& __a, const _Tp&\
    \ __b, _Compare __comp)\n      |     ^~~\n/usr/include/c++/9/bits/stl_algobase.h:246:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpxo4kicwj.cpp:36:45:\
    \ note:   deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018\
    long int\u2019 and \u2018std::vector<long int>::size_type\u2019 {aka \u2018long\
    \ unsigned int\u2019})\n   36 |         row_min = std::min(row_min, v.size());\n\
    \      |                                             ^\nIn file included from\
    \ /usr/include/c++/9/algorithm:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpxo4kicwj.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3450:5:\
    \ note: candidate: \u2018template<class _Tp> constexpr _Tp std::min(std::initializer_list<_Tp>)\u2019\
    \n 3450 |     min(initializer_list<_Tp> __l)\n      |     ^~~\n/usr/include/c++/9/bits/stl_algo.h:3450:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpxo4kicwj.cpp:36:45:\
    \ note:   mismatched types \u2018std::initializer_list<_Tp>\u2019 and \u2018long\
    \ int\u2019\n   36 |         row_min = std::min(row_min, v.size());\n      | \
    \                                            ^\nIn file included from /usr/include/c++/9/algorithm:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpxo4kicwj.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3456:5:\
    \ note: candidate: \u2018template<class _Tp, class _Compare> constexpr _Tp std::min(std::initializer_list<_Tp>,\
    \ _Compare)\u2019\n 3456 |     min(initializer_list<_Tp> __l, _Compare __comp)\n\
    \      |     ^~~\n/usr/include/c++/9/bits/stl_algo.h:3456:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmpxo4kicwj.cpp:36:45: note: \
    \  mismatched types \u2018std::initializer_list<_Tp>\u2019 and \u2018long int\u2019\
    \n   36 |         row_min = std::min(row_min, v.size());\n      |            \
    \                                 ^\n/tmp/tmpxo4kicwj.cpp:37:45: error: no matching\
    \ function for call to \u2018min(long int&, std::vector<long int>::size_type)\u2019\
    \n   37 |         col_min = std::min(col_min, v.size());\n      |            \
    \                                 ^\nIn file included from /usr/include/c++/9/bits/char_traits.h:39,\n\
    \                 from /usr/include/c++/9/ios:40,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpxo4kicwj.cpp:2:\n/usr/include/c++/9/bits/stl_algobase.h:198:5: note:\
    \ candidate: \u2018template<class _Tp> constexpr const _Tp& std::min(const _Tp&,\
    \ const _Tp&)\u2019\n  198 |     min(const _Tp& __a, const _Tp& __b)\n      |\
    \     ^~~\n/usr/include/c++/9/bits/stl_algobase.h:198:5: note:   template argument\
    \ deduction/substitution failed:\n/tmp/tmpxo4kicwj.cpp:37:45: note:   deduced\
    \ conflicting types for parameter \u2018const _Tp\u2019 (\u2018long int\u2019\
    \ and \u2018std::vector<long int>::size_type\u2019 {aka \u2018long unsigned int\u2019\
    })\n   37 |         col_min = std::min(col_min, v.size());\n      |          \
    \                                   ^\nIn file included from /usr/include/c++/9/bits/char_traits.h:39,\n\
    \                 from /usr/include/c++/9/ios:40,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpxo4kicwj.cpp:2:\n/usr/include/c++/9/bits/stl_algobase.h:246:5: note:\
    \ candidate: \u2018template<class _Tp, class _Compare> constexpr const _Tp& std::min(const\
    \ _Tp&, const _Tp&, _Compare)\u2019\n  246 |     min(const _Tp& __a, const _Tp&\
    \ __b, _Compare __comp)\n      |     ^~~\n/usr/include/c++/9/bits/stl_algobase.h:246:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpxo4kicwj.cpp:37:45:\
    \ note:   deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018\
    long int\u2019 and \u2018std::vector<long int>::size_type\u2019 {aka \u2018long\
    \ unsigned int\u2019})\n   37 |         col_min = std::min(col_min, v.size());\n\
    \      |                                             ^\nIn file included from\
    \ /usr/include/c++/9/algorithm:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpxo4kicwj.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3450:5:\
    \ note: candidate: \u2018template<class _Tp> constexpr _Tp std::min(std::initializer_list<_Tp>)\u2019\
    \n 3450 |     min(initializer_list<_Tp> __l)\n      |     ^~~\n/usr/include/c++/9/bits/stl_algo.h:3450:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpxo4kicwj.cpp:37:45:\
    \ note:   mismatched types \u2018std::initializer_list<_Tp>\u2019 and \u2018long\
    \ int\u2019\n   37 |         col_min = std::min(col_min, v.size());\n      | \
    \                                            ^\nIn file included from /usr/include/c++/9/algorithm:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpxo4kicwj.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3456:5:\
    \ note: candidate: \u2018template<class _Tp, class _Compare> constexpr _Tp std::min(std::initializer_list<_Tp>,\
    \ _Compare)\u2019\n 3456 |     min(initializer_list<_Tp> __l, _Compare __comp)\n\
    \      |     ^~~\n/usr/include/c++/9/bits/stl_algo.h:3456:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmpxo4kicwj.cpp:37:45: note: \
    \  mismatched types \u2018std::initializer_list<_Tp>\u2019 and \u2018long int\u2019\
    \n   37 |         col_min = std::min(col_min, v.size());\n      |            \
    \                                 ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    std::vector<std::tuple<long, long>> res;\n    std::vector<long>\
    \ row;\n    std::vector<long> col;\n    long row_index = 0;\n    long col_index\
    \ = 0;\n    for (auto &row : lst) {\n        row.push_back(0);\n    }\n    for\
    \ (auto &row : lst) {\n        for (auto &col : row) {\n            if (col ==\
    \ x) {\n                res.push_back({row_index, col_index});\n            }\n\
    \        }\n    }\n    std::sort(res.begin(), res.end(), [](const std::tuple<long,\
    \ long> &a, const std::tuple<long, long> &b) {\n        return std::get<0>(a)\
    \ < std::get<0>(b);\n    });\n    std::sort(res.begin(), res.end(), [](const std::tuple<long,\
    \ long> &a, const std::tuple<long, long> &b) {\n        return std::get<1>(a)\
    \ < std::get<1>(b);\n    });\n    return res;\n}\nint main() {\n    auto candidate\
    \ = get_row;\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "tmpz2c86zf0: /tmp/tmpz2c86zf0.cpp:45: int main(): Assertion `candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    std::vector<std::tuple<long, long>> res;\n    if (lst.size()\
    \ == 0) {\n        return res;\n    }\n    std::vector<std::tuple<long, long>>\
    \ row;\n    std::vector<std::tuple<long, long>> col;\n    for (auto &it : lst)\
    \ {\n        row.emplace_back(std::get<0>(it), std::get<1>(it));\n        col.emplace_back(std::get<0>(it),\
    \ std::get<1>(it));\n    }\n    std::sort(row.begin(), row.end(), [](const std::tuple<long,\
    \ long> &a, const std::tuple<long, long> &b) {\n        return std::get<0>(a)\
    \ < std::get<0>(b);\n    });\n    std::sort(col.begin(), col.end(), [](const std::tuple<long,\
    \ long> &a, const std::tuple<long, long> &b) {\n        return std::get<1>(a)\
    \ < std::get<1>(b);\n    });\n    for (auto &it : row) {\n        if (std::get<0>(it)\
    \ == x) {\n            res.emplace_back(std::get<0>(it), std::get<1>(it));\n \
    \       }\n    }\n    return res;\n}\nint main() {\n    auto candidate = get_row;\n\
    \    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp39pn4r19.cpp: In function \u2018std::vector<std::tuple<long int,\
    \ long int> > get_row(std::vector<std::vector<long int> >, long int)\u2019:\n\
    /tmp/tmp39pn4r19.cpp:27:40: error: no matching function for call to \u2018get<0>(std::vector<long\
    \ int>&)\u2019\n   27 |         row.emplace_back(std::get<0>(it), std::get<1>(it));\n\
    \      |                                        ^\nIn file included from /usr/include/c++/9/algorithm:60,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp39pn4r19.cpp:2:\n/usr/include/c++/9/utility:219:5:\
    \ note: candidate: \u2018template<long unsigned int _Int, class _Tp1, class _Tp2>\
    \ constexpr typename std::tuple_element<_Int, std::pair<_Tp1, _Tp2> >::type& std::get(std::pair<_Tp1,\
    \ _Tp2>&)\u2019\n  219 |     get(std::pair<_Tp1, _Tp2>& __in) noexcept\n     \
    \ |     ^~~\n/usr/include/c++/9/utility:219:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp39pn4r19.cpp:27:40: note:   \u2018std::vector<long int>\u2019\
    \ is not derived from \u2018std::pair<_Tp1, _Tp2>\u2019\n   27 |         row.emplace_back(std::get<0>(it),\
    \ std::get<1>(it));\n      |                                        ^\nIn file\
    \ included from /usr/include/c++/9/algorithm:60,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp39pn4r19.cpp:2:\n/usr/include/c++/9/utility:224:5:\
    \ note: candidate: \u2018template<long unsigned int _Int, class _Tp1, class _Tp2>\
    \ constexpr typename std::tuple_element<_Int, std::pair<_Tp1, _Tp2> >::type&&\
    \ std::get(std::pair<_Tp1, _Tp2>&&)\u2019\n  224 |     get(std::pair<_Tp1, _Tp2>&&\
    \ __in) noexcept\n      |     ^~~\n/usr/include/c++/9/utility:224:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmp39pn4r19.cpp:27:40: note: \
    \  \u2018std::vector<long int>\u2019 is not derived from \u2018std::pair<_Tp1,\
    \ _Tp2>\u2019\n   27 |         row.emplace_back(std::get<0>(it), std::get<1>(it));\n\
    \      |                                        ^\nIn file included from /usr/include/c++/9/algorithm:60,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp39pn4r19.cpp:2:\n/usr/include/c++/9/utility:229:5:\
    \ note: candidate: \u2018template<long unsigned int _Int, class _Tp1, class _Tp2>\
    \ constexpr const typename std::tuple_element<_Int, std::pair<_Tp1, _Tp2> >::type&\
    \ std::get(const std::pair<_Tp1, _Tp2>&)\u2019\n  229 |     get(const std::pair<_Tp1,\
    \ _Tp2>& __in) noexcept\n      |     ^~~\n/usr/include/c++/9/utility:229:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmp39pn4r19.cpp:27:40:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::pair<_Tp1,\
    \ _Tp2>\u2019\n   27 |         row.emplace_back(std::get<0>(it), std::get<1>(it));\n\
    \      |                                        ^\nIn file included from /usr/include/c++/9/algorithm:60,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp39pn4r19.cpp:2:\n/usr/include/c++/9/utility:234:5:\
    \ note: candidate: \u2018template<long unsigned int _Int, class _Tp1, class _Tp2>\
    \ constexpr const typename std::tuple_element<_Int, std::pair<_Tp1, _Tp2> >::type&&\
    \ std::get(const std::pair<_Tp1, _Tp2>&&)\u2019\n  234 |     get(const std::pair<_Tp1,\
    \ _Tp2>&& __in) noexcept\n      |     ^~~\n/usr/include/c++/9/utility:234:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmp39pn4r19.cpp:27:40:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::pair<_Tp1,\
    \ _Tp2>\u2019\n   27 |         row.emplace_back(std::get<0>(it), std::get<1>(it));\n\
    \      |                                        ^\nIn file included from /usr/include/c++/9/algorithm:60,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp39pn4r19.cpp:2:\n/usr/include/c++/9/utility:243:5:\
    \ note: candidate: \u2018template<class _Tp, class _Up> constexpr _Tp& std::get(std::pair<_T1,\
    \ _T2>&)\u2019\n  243 |     get(pair<_Tp, _Up>& __p) noexcept\n      |     ^~~\n\
    /usr/include/c++/9/utility:243:5: note:   template argument deduction/substitution\
    \ failed:\n/usr/include/c++/9/utility:248:5: note: candidate: \u2018template<class\
    \ _Tp, class _Up> constexpr const _Tp& std::get(const std::pair<_T1, _T2>&)\u2019\
    \n  248 |     get(const pair<_Tp, _Up>& __p) noexcept\n      |     ^~~\n/usr/include/c++/9/utility:248:5:\
    \ note:   template argument deduction/substitution failed:\n/usr/include/c++/9/utility:253:5:\
    \ note: candidate: \u2018template<class _Tp, class _Up> constexpr _Tp&& std::get(std::pair<_T1,\
    \ _T2>&&)\u2019\n  253 |     get(pair<_Tp, _Up>&& __p) noexcept\n      |     ^~~\n\
    /usr/include/c++/9/utility:253:5: note:   template argument deduction/substitution\
    \ failed:\n/usr/include/c++/9/utility:258:5: note: candidate: \u2018template<class\
    \ _Tp, class _Up> constexpr const _Tp&& std::get(const std::pair<_T1, _T2>&&)\u2019\
    \n  258 |     get(const pair<_Tp, _Up>&& __p) noexcept\n      |     ^~~\n/usr/include/c++/9/utility:258:5:\
    \ note:   template argument deduction/substitution failed:\n/usr/include/c++/9/utility:263:5:\
    \ note: candidate: \u2018template<class _Tp, class _Up> constexpr _Tp& std::get(std::pair<_Up,\
    \ _Tp>&)\u2019\n  263 |     get(pair<_Up, _Tp>& __p) noexcept\n      |     ^~~\n\
    /usr/include/c++/9/utility:263:5: note:   template argument deduction/substitution\
    \ failed:\n/usr/include/c++/9/utility:268:5: note: candidate: \u2018template<class\
    \ _Tp, class _Up> constexpr const _Tp& std::get(const std::pair<_Up, _Tp>&)\u2019\
    \n  268 |     get(const pair<_Up, _Tp>& __p) noexcept\n      |     ^~~\n/usr/include/c++/9/utility:268:5:\
    \ note:   template argument deduction/substitution failed:\n/usr/include/c++/9/utility:273:5:\
    \ note: candidate: \u2018template<class _Tp, class _Up> constexpr _Tp&& std::get(std::pair<_Up,\
    \ _Tp>&&)\u2019\n  273 |     get(pair<_Up, _Tp>&& __p) noexcept\n      |     ^~~\n\
    /usr/include/c++/9/utility:273:5: note:   template argument deduction/substitution\
    \ failed:\n/usr/include/c++/9/utility:278:5: note: candidate: \u2018template<class\
    \ _Tp, class _Up> constexpr const _Tp&& std::get(const std::pair<_Up, _Tp>&&)\u2019\
    \n  278 |     get(const pair<_Up, _Tp>&& __p) noexcept\n      |     ^~~\n/usr/include/c++/9/utility:278:5:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/9/tuple:39,\n                 from /usr/include/c++/9/functional:54,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmp39pn4r19.cpp:2:\n/usr/include/c++/9/array:307:5:\
    \ note: candidate: \u2018template<long unsigned int _Int, class _Tp, long unsigned\
    \ int _Nm> constexpr _Tp& std::get(std::array<_Tp, _Nm>&)\u2019\n  307 |     get(array<_Tp,\
    \ _Nm>& __arr) noexcept\n      |     ^~~\n/usr/include/c++/9/array:307:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmp39pn4r19.cpp:27:40:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018std::array<_Tp,\
    \ _Nm>\u2019\n   27 |         row.emplace_back(std::get<0>(it), std::get<1>(it));\n\
    \      |                                        ^\nIn file included from /usr/include/c++/9/tuple:39,\n\
    \                 from /usr/include/c++/9/functional:54,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n                 from\
    \ /tmp/tmp39pn4r19.cpp:2:\n/usr/include/c++/9/array:316:5: note: candidate: \u2018\
    template<long unsigned int _Int, class _Tp, long unsigned int _Nm> constexpr _Tp&&\
    \ std::get(std::array<_Tp, _Nm>&&)\u2019\n  316 |     get(array<_Tp, _Nm>&& __arr)\
    \ noexcept\n      |     ^~~\n/usr/include/c++/9/array:316:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmp39pn4r19.cpp:27:40: note: \
    \  \u2018std::vector<long int>\u2019 is not derived from \u2018std::array<_Tp,\
    \ _Nm>\u2019\n   27 |         row.emplace_back(std::get<0>(it), std::get<1>(it));\n\
    \      |                                        ^\nIn file included from /usr/include/c++/9/tuple:39,\n\
    \                 from /usr/include/c++/9/functional:54,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n                 from\
    \ /tmp/tmp39pn4r19.cpp:2:\n/usr/include/c++/9/array:324:5: note: candidate: \u2018\
    template<long unsigned int _Int, class _Tp, long unsigned int _Nm> constexpr const\
    \ _Tp& std::get(const std::array<_Tp, _Nm>&)\u2019\n  324 |     get(const array<_Tp,\
    \ _Nm>& __arr) noexcept\n      |     ^~~\n/usr/include/c++/9/array:324:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmp39pn4r19.cpp:27:40:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::array<_Tp,\
    \ _Nm>\u2019\n   27 |         row.emplace_back(std::get<0>(it), std::get<1>(it));\n\
    \      |                                        ^\nIn file included from /usr/include/c++/9/tuple:39,\n\
    \                 from /usr/include/c++/9/functional:54,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n                 from\
    \ /tmp/tmp39pn4r19.cpp:2:\n/usr/include/c++/9/array:333:5: note: candidate: \u2018\
    template<long unsigned int _Int, class _Tp, long unsigned int _Nm> constexpr const\
    \ _Tp&& std::get(const std::array<_Tp, _Nm>&&)\u2019\n  333 |     get(const array<_Tp,\
    \ _Nm>&& __arr) noexcept\n      |     ^~~\n/usr/include/c++/9/array:333:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmp39pn4r19.cpp:27:40:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::array<_Tp,\
    \ _Nm>\u2019\n   27 |         row.emplace_back(std::get<0>(it), std::get<1>(it));\n\
    \      |                                        ^\nIn file included from /usr/include/c++/9/functional:54,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmp39pn4r19.cpp:2:\n/usr/include/c++/9/tuple:1320:5:\
    \ note: candidate: \u2018template<long unsigned int __i, class ... _Elements>\
    \ constexpr std::__tuple_element_t<__i, std::tuple<_Elements ...> >& std::get(std::tuple<_Elements\
    \ ...>&)\u2019\n 1320 |     get(tuple<_Elements...>& __t) noexcept\n      |  \
    \   ^~~\n/usr/include/c++/9/tuple:1320:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp39pn4r19.cpp:27:40: note:   \u2018std::vector<long int>\u2019\
    \ is not derived from \u2018std::tuple<_Elements ...>\u2019\n   27 |         row.emplace_back(std::get<0>(it),\
    \ std::get<1>(it));\n      |                                        ^\nIn file\
    \ included from /usr/include/c++/9/functional:54,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmp39pn4r19.cpp:2:\n/usr/include/c++/9/tuple:1326:5:\
    \ note: candidate: \u2018template<long unsigned int __i, class ... _Elements>\
    \ constexpr std::__tuple_element_t<__i, std::tuple<_Elements ...> >& std::get(const\
    \ std::tuple<_Elements ...>&)\u2019\n 1326 |     get(const tuple<_Elements...>&\
    \ __t) noexcept\n      |     ^~~\n/usr/include/c++/9/tuple:1326:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmp39pn4r19.cpp:27:40: note: \
    \  \u2018std::vector<long int>\u2019 is not derived from \u2018const std::tuple<_Elements\
    \ ...>\u2019\n   27 |         row.emplace_back(std::get<0>(it), std::get<1>(it));\n\
    \      |                                        ^\nIn file included from /usr/include/c++/9/functional:54,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmp39pn4r19.cpp:2:\n/usr/include/c++/9/tuple:1332:5:\
    \ note: candidate: \u2018template<long unsigned int __i, class ... _Elements>\
    \ constexpr std::__tuple_element_t<__i, std::tuple<_Elements ...> >&& std::get(std::tuple<_Elements\
    \ ...>&&)\u2019\n 1332 |     get(tuple<_Elements...>&& __t) noexcept\n      |\
    \     ^~~\n/usr/include/c++/9/tuple:1332:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp39pn4r19.cpp:27:40: note:   \u2018std::vector<long int>\u2019\
    \ is not derived from \u2018std::tuple<_Elements ...>\u2019\n   27 |         row.emplace_back(std::get<0>(it),\
    \ std::get<1>(it));\n      |                                        ^\nIn file\
    \ included from /usr/include/c++/9/functional:54,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmp39pn4r19.cpp:2:\n/usr/include/c++/9/tuple:1341:5:\
    \ note: candidate: \u2018template<long unsigned int __i, class ... _Elements>\
    \ constexpr std::__tuple_element_t<__i, std::tuple<_Elements ...> >&& std::get(const\
    \ std::tuple<_Elements ...>&&)\u2019\n 1341 |     get(const tuple<_Elements...>&&\
    \ __t) noexcept\n      |     ^~~\n/usr/include/c++/9/tuple:1341:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmp39pn4r19.cpp:27:40: note: \
    \  \u2018std::vector<long int>\u2019 is not derived from \u2018const std::tuple<_Elements\
    \ ...>\u2019\n   27 |         row.emplace_back(std::get<0>(it), std::get<1>(it));\n\
    \      |                                        ^\nIn file included from /usr/include/c++/9/functional:54,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmp39pn4r19.cpp:2:\n/usr/include/c++/9/tuple:1364:5:\
    \ note: candidate: \u2018template<class _Tp, class ... _Types> constexpr _Tp&\
    \ std::get(std::tuple<_Elements ...>&)\u2019\n 1364 |     get(tuple<_Types...>&\
    \ __t) noexcept\n      |     ^~~\n/usr/include/c++/9/tuple:1364:5: note:   template\
    \ argument deduction/substitution failed:\n/usr/include/c++/9/tuple:1370:5: note:\
    \ candidate: \u2018template<class _Tp, class ... _Types> constexpr _Tp&& std::get(std::tuple<_Elements\
    \ ...>&&)\u2019\n 1370 |     get(tuple<_Types...>&& __t) noexcept\n      |   \
    \  ^~~\n/usr/include/c++/9/tuple:1370:5: note:   template argument deduction/substitution\
    \ failed:\n/usr/include/c++/9/tuple:1376:5: note: candidate: \u2018template<class\
    \ _Tp, class ... _Types> constexpr const _Tp& std::get(const std::tuple<_Elements\
    \ ...>&)\u2019\n 1376 |     get(const tuple<_Types...>& __t) noexcept\n      |\
    \     ^~~\n/usr/include/c++/9/tuple:1376:5: note:   template argument deduction/substitution\
    \ failed:\n/usr/include/c++/9/tuple:1383:5: note: candidate: \u2018template<class\
    \ _Tp, class ... _Types> constexpr const _Tp&& std::get(const std::tuple<_Elements\
    \ ...>&&)\u2019\n 1383 |     get(const tuple<_Types...>&& __t) noexcept\n    \
    \  |     ^~~\n/usr/include/c++/9/tuple:1383:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp39pn4r19.cpp:27:57: error: no matching function for call to\
    \ \u2018get<1>(std::vector<long int>&)\u2019\n   27 |         row.emplace_back(std::get<0>(it),\
    \ std::get<1>(it));\n      |                                                 \
    \        ^\nIn file included from /usr/include/c++/9/algorithm:60,\n         \
    \        from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n        \
    \         from /tmp/tmp39pn4r19.cpp:2:\n/usr/include/c++/9/utility:219:5: note:\
    \ candidate: \u2018template<long unsigned int _Int, class _Tp1, class _Tp2> constexpr\
    \ typename std::tuple_element<_Int, std::pair<_Tp1, _Tp2> >::type& std::get(std::pair<_Tp1,\
    \ _Tp2>&)\u2019\n  219 |     get(std::pair<_Tp1, _Tp2>& __in) noexcept\n     \
    \ |     ^~~\n/usr/include/c++/9/utility:219:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp39pn4r19.cpp:27:57: note:   \u2018std::vector<long int>\u2019\
    \ is not derived from \u2018std::pair<_Tp1, _Tp2>\u2019\n   27 |         row.emplace_back(std::get<0>(it),\
    \ std::get<1>(it));\n      |                                                 \
    \        ^\nIn file included from /usr/include/c++/9/algorithm:60,\n         \
    \        from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n        \
    \         from /tmp/tmp39pn4r19.cpp:2:\n/usr/include/c++/9/utility:224:5: note:\
    \ candidate: \u2018template<long unsigned int _Int, class _Tp1, class _Tp2> constexpr\
    \ typename std::tuple_element<_Int, std::pair<_Tp1, _Tp2> >::type&& std::get(std::pair<_Tp1,\
    \ _Tp2>&&)\u2019\n  224 |     get(std::pair<_Tp1, _Tp2>&& __in) noexcept\n   \
    \   |     ^~~\n/usr/include/c++/9/utility:224:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp39pn4r19.cpp:27:57: note:   \u2018std::vector<long int>\u2019\
    \ is not derived from \u2018std::pair<_Tp1, _Tp2>\u2019\n   27 |         row.emplace_back(std::get<0>(it),\
    \ std::get<1>(it));\n      |                                                 \
    \        ^\nIn file included from /usr/include/c++/9/algorithm:60,\n         \
    \        from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n        \
    \         from /tmp/tmp39pn4r19.cpp:2:\n/usr/include/c++/9/utility:229:5: note:\
    \ candidate: \u2018template<long unsigned int _Int, class _Tp1, class _Tp2> constexpr\
    \ const typename std::tuple_element<_Int, std::pair<_Tp1, _Tp2> >::type& std::get(const\
    \ std::pair<_Tp1, _Tp2>&)\u2019\n  229 |     get(const std::pair<_Tp1, _Tp2>&\
    \ __in) noexcept\n      |     ^~~\n/usr/include/c++/9/utility:229:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmp39pn4r19.cpp:27:57: note: \
    \  \u2018std::vector<long int>\u2019 is not derived from \u2018const std::pair<_Tp1,\
    \ _Tp2>\u2019\n   27 |         row.emplace_back(std::get<0>(it), std::get<1>(it));\n\
    \      |                                                         ^\nIn file included\
    \ from /usr/include/c++/9/algorithm:60,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp39pn4r19.cpp:2:\n/usr/include/c++/9/utility:234:5:\
    \ note: candidate: \u2018template<long unsigned int _Int, class _Tp1, class _Tp2>\
    \ constexpr const typename std::tuple_element<_Int, std::pair<_Tp1, _Tp2> >::type&&\
    \ std::get(const std::pair<_Tp1, _Tp2>&&)\u2019\n  234 |     get(const std::pair<_Tp1,\
    \ _Tp2>&& __in) noexcept\n      |     ^~~\n/usr/include/c++/9/utility:234:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmp39pn4r19.cpp:27:57:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::pair<_Tp1,\
    \ _Tp2>\u2019\n   27 |         row.emplace_back(std::get<0>(it), std::get<1>(it));\n\
    \      |                                                         ^\nIn file included\
    \ from /usr/include/c++/9/algorithm:60,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp39pn4r19.cpp:2:\n/usr/include/c++/9/utility:243:5:\
    \ note: candidate: \u2018template<class _Tp, class _Up> constexpr _Tp& std::get(std::pair<_T1,\
    \ _T2>&)\u2019\n  243 |     get(pair<_Tp, _Up>& __p) noexcept\n      |     ^~~\n\
    /usr/include/c++/9/utility:243:5: note:   template argument deduction/substitution\
    \ failed:\n/usr/include/c++/9/utility:248:5: note: candidate: \u2018template<class\
    \ _Tp, class _Up> constexpr const _Tp& std::get(const std::pair<_T1, _T2>&)\u2019\
    \n  248 |     get(const pair<_Tp, _Up>& __p) noexcept\n      |     ^~~\n/usr/include/c++/9/utility:248:5:\
    \ note:   template argument deduction/substitution failed:\n/usr/include/c++/9/utility:253:5:\
    \ note: candidate: \u2018template<class _Tp, class _Up> constexpr _Tp&& std::get(std::pair<_T1,\
    \ _T2>&&)\u2019\n  253 |     get(pair<_Tp, _Up>&& __p) noexcept\n      |     ^~~\n\
    /usr/include/c++/9/utility:253:5: note:   template argument deduction/substitution\
    \ failed:\n/usr/include/c++/9/utility:258:5: note: candidate: \u2018template<class\
    \ _Tp, class _Up> constexpr const _Tp&& std::get(const std::pair<_T1, _T2>&&)\u2019\
    \n  258 |     get(const pair<_Tp, _Up>&& __p) noexcept\n      |     ^~~\n/usr/include/c++/9/utility:258:5:\
    \ note:   template argument deduction/substitution failed:\n/usr/include/c++/9/utility:263:5:\
    \ note: candidate: \u2018template<class _Tp, class _Up> constexpr _Tp& std::get(std::pair<_Up,\
    \ _Tp>&)\u2019\n  263 |     get(pair<_Up, _Tp>& __p) noexcept\n      |     ^~~\n\
    /usr/include/c++/9/utility:263:5: note:   template argument deduction/substitution\
    \ failed:\n/usr/include/c++/9/utility:268:5: note: candidate: \u2018template<class\
    \ _Tp, class _Up> constexpr const _Tp& std::get(const std::pair<_Up, _Tp>&)\u2019\
    \n  268 |     get(const pair<_Up, _Tp>& __p) noexcept\n      |     ^~~\n/usr/include/c++/9/utility:268:5:\
    \ note:   template argument deduction/substitution failed:\n/usr/include/c++/9/utility:273:5:\
    \ note: candidate: \u2018template<class _Tp, class _Up> constexpr _Tp&& std::get(std::pair<_Up,\
    \ _Tp>&&)\u2019\n  273 |     get(pair<_Up, _Tp>&& __p) noexcept\n      |     ^~~\n\
    /usr/include/c++/9/utility:273:5: note:   template argument deduction/substitution\
    \ failed:\n/usr/include/c++/9/utility:278:5: note: candidate: \u2018template<class\
    \ _Tp, class _Up> constexpr const _Tp&& std::get(const std::pair<_Up, _Tp>&&)\u2019\
    \n  278 |     get(const pair<_Up, _Tp>&& __p) noexcept\n      |     ^~~\n/usr/include/c++/9/utility:278:5:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/9/tuple:39,\n                 from /usr/include/c++/9/functional:54,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmp39pn4r19.cpp:2:\n/usr/include/c++/9/array:307:5:\
    \ note: candidate: \u2018template<long unsigned int _Int, class _Tp, long unsigned\
    \ int _Nm> constexpr _Tp& std::get(std::array<_Tp, _Nm>&)\u2019\n  307 |     get(array<_Tp,\
    \ _Nm>& __arr) noexcept\n      |     ^~~\n/usr/include/c++/9/array:307:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmp39pn4r19.cpp:27:57:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018std::array<_Tp,\
    \ _Nm>\u2019\n   27 |         row.emplace_back(std::get<0>(it), std::get<1>(it));\n\
    \      |                                                         ^\nIn file included\
    \ from /usr/include/c++/9/tuple:39,\n                 from /usr/include/c++/9/functional:54,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmp39pn4r19.cpp:2:\n/usr/include/c++/9/array:316:5:\
    \ note: candidate: \u2018template<long unsigned int _Int, class _Tp, long unsigned\
    \ int _Nm> constexpr _Tp&& std::get(std::array<_Tp, _Nm>&&)\u2019\n  316 |   \
    \  get(array<_Tp, _Nm>&& __arr) noexcept\n      |     ^~~\n/usr/include/c++/9/array:316:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp39pn4r19.cpp:27:57:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018std::array<_Tp,\
    \ _Nm>\u2019\n   27 |         row.emplace_back(std::get<0>(it), std::get<1>(it));\n\
    \      |                                                         ^\nIn file included\
    \ from /usr/include/c++/9/tuple:39,\n                 from /usr/include/c++/9/functional:54,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmp39pn4r19.cpp:2:\n/usr/include/c++/9/array:324:5:\
    \ note: candidate: \u2018template<long unsigned int _Int, class _Tp, long unsigned\
    \ int _Nm> constexpr const _Tp& std::get(const std::array<_Tp, _Nm>&)\u2019\n\
    \  324 |     get(const array<_Tp, _Nm>& __arr) noexcept\n      |     ^~~\n/usr/include/c++/9/array:324:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp39pn4r19.cpp:27:57:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::array<_Tp,\
    \ _Nm>\u2019\n   27 |         row.emplace_back(std::get<0>(it), std::get<1>(it));\n\
    \      |                                                         ^\nIn file included\
    \ from /usr/include/c++/9/tuple:39,\n                 from /usr/include/c++/9/functional:54,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmp39pn4r19.cpp:2:\n/usr/include/c++/9/array:333:5:\
    \ note: candidate: \u2018template<long unsigned int _Int, class _Tp, long unsigned\
    \ int _Nm> constexpr const _Tp&& std::get(const std::array<_Tp, _Nm>&&)\u2019\n\
    \  333 |     get(const array<_Tp, _Nm>&& __arr) noexcept\n      |     ^~~\n/usr/include/c++/9/array:333:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp39pn4r19.cpp:27:57:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::array<_Tp,\
    \ _Nm>\u2019\n   27 |         row.emplace_back(std::get<0>(it), std::get<1>(it));\n\
    \      |                                                         ^\nIn file included\
    \ from /usr/include/c++/9/functional:54,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmp39pn4r19.cpp:2:\n/usr/include/c++/9/tuple:1320:5:\
    \ note: candidate: \u2018template<long unsigned int __i, class ... _Elements>\
    \ constexpr std::__tuple_element_t<__i, std::tuple<_Elements ...> >& std::get(std::tuple<_Elements\
    \ ...>&)\u2019\n 1320 |     get(tuple<_Elements...>& __t) noexcept\n      |  \
    \   ^~~\n/usr/include/c++/9/tuple:1320:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp39pn4r19.cpp:27:57: note:   \u2018std::vector<long int>\u2019\
    \ is not derived from \u2018std::tuple<_Elements ...>\u2019\n   27 |         row.emplace_back(std::get<0>(it),\
    \ std::get<1>(it));\n      |                                                 \
    \        ^\nIn file included from /usr/include/c++/9/functional:54,\n        \
    \         from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n       \
    \          from /tmp/tmp39pn4r19.cpp:2:\n/usr/include/c++/9/tuple:1326:5: note:\
    \ candidate: \u2018template<long unsigned int __i, class ... _Elements> constexpr\
    \ std::__tuple_element_t<__i, std::tuple<_Elements ...> >& std::get(const std::tuple<_Elements\
    \ ...>&)\u2019\n 1326 |     get(const tuple<_Elements...>& __t) noexcept\n   \
    \   |     ^~~\n/usr/include/c++/9/tuple:1326:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp39pn4r19.cpp:27:57: note:   \u2018std::vector<long int>\u2019\
    \ is not derived from \u2018const std::tuple<_Elements ...>\u2019\n   27 |   \
    \      row.emplace_back(std::get<0>(it), std::get<1>(it));\n      |          \
    \                                               ^\nIn file included from /usr/include/c++/9/functional:54,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmp39pn4r19.cpp:2:\n/usr/include/c++/9/tuple:1332:5:\
    \ note: candidate: \u2018template<long unsigned int __i, class ... _Elements>\
    \ constexpr std::__tuple_element_t<__i, std::tuple<_Elements ...> >&& std::get(std::tuple<_Elements\
    \ ...>&&)\u2019\n 1332 |     get(tuple<_Elements...>&& __t) noexcept\n      |\
    \     ^~~\n/usr/include/c++/9/tuple:1332:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp39pn4r19.cpp:27:57: note:   \u2018std::vector<long int>\u2019\
    \ is not derived from \u2018std::tuple<_Elements ...>\u2019\n   27 |         row.emplace_back(std::get<0>(it),\
    \ std::get<1>(it));\n      |                                                 \
    \        ^\nIn file included from /usr/include/c++/9/functional:54,\n        \
    \         from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n       \
    \          from /tmp/tmp39pn4r19.cpp:2:\n/usr/include/c++/9/tuple:1341:5: note:\
    \ candidate: \u2018template<long unsigned int __i, class ... _Elements> constexpr\
    \ std::__tuple_element_t<__i, std::tuple<_Elements ...> >&& std::get(const std::tuple<_Elements\
    \ ...>&&)\u2019\n 1341 |     get(const tuple<_Elements...>&& __t) noexcept\n \
    \     |     ^~~\n/usr/include/c++/9/tuple:1341:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp39pn4r19.cpp:27:57: note:   \u2018std::vector<long int>\u2019\
    \ is not derived from \u2018const std::tuple<_Elements ...>\u2019\n   27 |   \
    \      row.emplace_back(std::get<0>(it), std::get<1>(it));\n      |          \
    \                                               ^\nIn file included from /usr/include/c++/9/functional:54,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmp39pn4r19.cpp:2:\n/usr/include/c++/9/tuple:1364:5:\
    \ note: candidate: \u2018template<class _Tp, class ... _Types> constexpr _Tp&\
    \ std::get(std::tuple<_Elements ...>&)\u2019\n 1364 |     get(tuple<_Types...>&\
    \ __t) noexcept\n      |     ^~~\n/usr/include/c++/9/tuple:1364:5: note:   template\
    \ argument deduction/substitution failed:\n/usr/include/c++/9/tuple:1370:5: note:\
    \ candidate: \u2018template<class _Tp, class ... _Types> constexpr _Tp&& std::get(std::tuple<_Elements\
    \ ...>&&)\u2019\n 1370 |     get(tuple<_Types...>&& __t) noexcept\n      |   \
    \  ^~~\n/usr/include/c++/9/tuple:1370:5: note:   template argument deduction/substitution\
    \ failed:\n/usr/include/c++/9/tuple:1376:5: note: candidate: \u2018template<class\
    \ _Tp, class ... _Types> constexpr const _Tp& std::get(const std::tuple<_Elements\
    \ ...>&)\u2019\n 1376 |     get(const tuple<_Types...>& __t) noexcept\n      |\
    \     ^~~\n/usr/include/c++/9/tuple:1376:5: note:   template argument deduction/substitution\
    \ failed:\n/usr/include/c++/9/tuple:1383:5: note: candidate: \u2018template<class\
    \ _Tp, class ... _Types> constexpr const _Tp&& std::get(const std::tuple<_Elements\
    \ ...>&&)\u2019\n 1383 |     get(const tuple<_Types...>&& __t) noexcept\n    \
    \  |     ^~~\n/usr/include/c++/9/tuple:1383:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp39pn4r19.cpp:28:40: error: no matching function for call to\
    \ \u2018get<0>(std::vector<long int>&)\u2019\n   28 |         col.emplace_back(std::get<0>(it),\
    \ std::get<1>(it));\n      |                                        ^\nIn file\
    \ included from /usr/include/c++/9/algorithm:60,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp39pn4r19.cpp:2:\n/usr/include/c++/9/utility:219:5:\
    \ note: candidate: \u2018template<long unsigned int _Int, class _Tp1, class _Tp2>\
    \ constexpr typename std::tuple_element<_Int, std::pair<_Tp1, _Tp2> >::type& std::get(std::pair<_Tp1,\
    \ _Tp2>&)\u2019\n  219 |     get(std::pair<_Tp1, _Tp2>& __in) noexcept\n     \
    \ |     ^~~\n/usr/include/c++/9/utility:219:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp39pn4r19.cpp:28:40: note:   \u2018std::vector<long int>\u2019\
    \ is not derived from \u2018std::pair<_Tp1, _Tp2>\u2019\n   28 |         col.emplace_back(std::get<0>(it),\
    \ std::get<1>(it));\n      |                                        ^\nIn file\
    \ included from /usr/include/c++/9/algorithm:60,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp39pn4r19.cpp:2:\n/usr/include/c++/9/utility:224:5:\
    \ note: candidate: \u2018template<long unsigned int _Int, class _Tp1, class _Tp2>\
    \ constexpr typename std::tuple_element<_Int, std::pair<_Tp1, _Tp2> >::type&&\
    \ std::get(std::pair<_Tp1, _Tp2>&&)\u2019\n  224 |     get(std::pair<_Tp1, _Tp2>&&\
    \ __in) noexcept\n      |     ^~~\n/usr/include/c++/9/utility:224:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmp39pn4r19.cpp:28:40: note: \
    \  \u2018std::vector<long int>\u2019 is not derived from \u2018std::pair<_Tp1,\
    \ _Tp2>\u2019\n   28 |         col.emplace_back(std::get<0>(it), std::get<1>(it));\n\
    \      |                                        ^\nIn file included from /usr/include/c++/9/algorithm:60,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp39pn4r19.cpp:2:\n/usr/include/c++/9/utility:229:5:\
    \ note: candidate: \u2018template<long unsigned int _Int, class _Tp1, class _Tp2>\
    \ constexpr const typename std::tuple_element<_Int, std::pair<_Tp1, _Tp2> >::type&\
    \ std::get(const std::pair<_Tp1, _Tp2>&)\u2019\n  229 |     get(const std::pair<_Tp1,\
    \ _Tp2>& __in) noexcept\n      |     ^~~\n/usr/include/c++/9/utility:229:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmp39pn4r19.cpp:28:40:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::pair<_Tp1,\
    \ _Tp2>\u2019\n   28 |         col.emplace_back(std::get<0>(it), std::get<1>(it));\n\
    \      |                                        ^\nIn file included from /usr/include/c++/9/algorithm:60,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp39pn4r19.cpp:2:\n/usr/include/c++/9/utility:234:5:\
    \ note: candidate: \u2018template<long unsigned int _Int, class _Tp1, class _Tp2>\
    \ constexpr const typename std::tuple_element<_Int, std::pair<_Tp1, _Tp2> >::type&&\
    \ std::get(const std::pair<_Tp1, _Tp2>&&)\u2019\n  234 |     get(const std::pair<_Tp1,\
    \ _Tp2>&& __in) noexcept\n      |     ^~~\n/usr/include/c++/9/utility:234:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmp39pn4r19.cpp:28:40:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::pair<_Tp1,\
    \ _Tp2>\u2019\n   28 |         col.emplace_back(std::get<0>(it), std::get<1>(it));\n\
    \      |                                        ^\nIn file included from /usr/include/c++/9/algorithm:60,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp39pn4r19.cpp:2:\n/usr/include/c++/9/utility:243:5:\
    \ note: candidate: \u2018template<class _Tp, class _Up> constexpr _Tp& std::get(std::pair<_T1,\
    \ _T2>&)\u2019\n  243 |     get(pair<_Tp, _Up>& __p) noexcept\n      |     ^~~\n\
    /usr/include/c++/9/utility:243:5: note:   template argument deduction/substitution\
    \ failed:\n/usr/include/c++/9/utility:248:5: note: candidate: \u2018template<class\
    \ _Tp, class _Up> constexpr const _Tp& std::get(const std::pair<_T1, _T2>&)\u2019\
    \n  248 |     get(const pair<_Tp, _Up>& __p) noexcept\n      |     ^~~\n/usr/include/c++/9/utility:248:5:\
    \ note:   template argument deduction/substitution failed:\n/usr/include/c++/9/utility:253:5:\
    \ note: candidate: \u2018template<class _Tp, class _Up> constexpr _Tp&& std::get(std::pair<_T1,\
    \ _T2>&&)\u2019\n  253 |     get(pair<_Tp, _Up>&& __p) noexcept\n      |     ^~~\n\
    /usr/include/c++/9/utility:253:5: note:   template argument deduction/substitution\
    \ failed:\n/usr/include/c++/9/utility:258:5: note: candidate: \u2018template<class\
    \ _Tp, class _Up> constexpr const _Tp&& std::get(const std::pair<_T1, _T2>&&)\u2019\
    \n  258 |     get(const pair<_Tp, _Up>&& __p) noexcept\n      |     ^~~\n/usr/include/c++/9/utility:258:5:\
    \ note:   template argument deduction/substitution failed:\n/usr/include/c++/9/utility:263:5:\
    \ note: candidate: \u2018template<class _Tp, class _Up> constexpr _Tp& std::get(std::pair<_Up,\
    \ _Tp>&)\u2019\n  263 |     get(pair<_Up, _Tp>& __p) noexcept\n      |     ^~~\n\
    /usr/include/c++/9/utility:263:5: note:   template argument deduction/substitution\
    \ failed:\n/usr/include/c++/9/utility:268:5: note: candidate: \u2018template<class\
    \ _Tp, class _Up> constexpr const _Tp& std::get(const std::pair<_Up, _Tp>&)\u2019\
    \n  268 |     get(const pair<_Up, _Tp>& __p) noexcept\n      |     ^~~\n/usr/include/c++/9/utility:268:5:\
    \ note:   template argument deduction/substitution failed:\n/usr/include/c++/9/utility:273:5:\
    \ note: candidate: \u2018template<class _Tp, class _Up> constexpr _Tp&& std::get(std::pair<_Up,\
    \ _Tp>&&)\u2019\n  273 |     get(pair<_Up, _Tp>&& __p) noexcept\n      |     ^~~\n\
    /usr/include/c++/9/utility:273:5: note:   template argument deduction/substitution\
    \ failed:\n/usr/include/c++/9/utility:278:5: note: candidate: \u2018template<class\
    \ _Tp, class _Up> constexpr const _Tp&& std::get(const std::pair<_Up, _Tp>&&)\u2019\
    \n  278 |     get(const pair<_Up, _Tp>&& __p) noexcept\n      |     ^~~\n/usr/include/c++/9/utility:278:5:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/9/tuple:39,\n                 from /usr/include/c++/9/functional:54,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmp39pn4r19.cpp:2:\n/usr/include/c++/9/array:307:5:\
    \ note: candidate: \u2018template<long unsigned int _Int, class _Tp, long unsigned\
    \ int _Nm> constexpr _Tp& std::get(std::array<_Tp, _Nm>&)\u2019\n  307 |     get(array<_Tp,\
    \ _Nm>& __arr) noexcept\n      |     ^~~\n/usr/include/c++/9/array:307:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmp39pn4r19.cpp:28:40:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018std::array<_Tp,\
    \ _Nm>\u2019\n   28 |         col.emplace_back(std::get<0>(it), std::get<1>(it));\n\
    \      |                                        ^\nIn file included from /usr/include/c++/9/tuple:39,\n\
    \                 from /usr/include/c++/9/functional:54,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n                 from\
    \ /tmp/tmp39pn4r19.cpp:2:\n/usr/include/c++/9/array:316:5: note: candidate: \u2018\
    template<long unsigned int _Int, class _Tp, long unsigned int _Nm> constexpr _Tp&&\
    \ std::get(std::array<_Tp, _Nm>&&)\u2019\n  316 |     get(array<_Tp, _Nm>&& __arr)\
    \ noexcept\n      |     ^~~\n/usr/include/c++/9/array:316:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmp39pn4r19.cpp:28:40: note: \
    \  \u2018std::vector<long int>\u2019 is not derived from \u2018std::array<_Tp,\
    \ _Nm>\u2019\n   28 |         col.emplace_back(std::get<0>(it), std::get<1>(it));\n\
    \      |                                        ^\nIn file included from /usr/include/c++/9/tuple:39,\n\
    \                 from /usr/include/c++/9/functional:54,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n                 from\
    \ /tmp/tmp39pn4r19.cpp:2:\n/usr/include/c++/9/array:324:5: note: candidate: \u2018\
    template<long unsigned int _Int, class _Tp, long unsigned int _Nm> constexpr const\
    \ _Tp& std::get(const std::array<_Tp, _Nm>&)\u2019\n  324 |     get(const array<_Tp,\
    \ _Nm>& __arr) noexcept\n      |     ^~~\n/usr/include/c++/9/array:324:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmp39pn4r19.cpp:28:40:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::array<_Tp,\
    \ _Nm>\u2019\n   28 |         col.emplace_back(std::get<0>(it), std::get<1>(it));\n\
    \      |                                        ^\nIn file included from /usr/include/c++/9/tuple:39,\n\
    \                 from /usr/include/c++/9/functional:54,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n                 from\
    \ /tmp/tmp39pn4r19.cpp:2:\n/usr/include/c++/9/array:333:5: note: candidate: \u2018\
    template<long unsigned int _Int, class _Tp, long unsigned int _Nm> constexpr const\
    \ _Tp&& std::get(const std::array<_Tp, _Nm>&&)\u2019\n  333 |     get(const array<_Tp,\
    \ _Nm>&& __arr) noexcept\n      |     ^~~\n/usr/include/c++/9/array:333:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmp39pn4r19.cpp:28:40:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::array<_Tp,\
    \ _Nm>\u2019\n   28 |         col.emplace_back(std::get<0>(it), std::get<1>(it));\n\
    \      |                                        ^\nIn file included from /usr/include/c++/9/functional:54,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmp39pn4r19.cpp:2:\n/usr/include/c++/9/tuple:1320:5:\
    \ note: candidate: \u2018template<long unsigned int __i, class ... _Elements>\
    \ constexpr std::__tuple_element_t<__i, std::tuple<_Elements ...> >& std::get(std::tuple<_Elements\
    \ ...>&)\u2019\n 1320 |     get(tuple<_Elements...>& __t) noexcept\n      |  \
    \   ^~~\n/usr/include/c++/9/tuple:1320:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp39pn4r19.cpp:28:40: note:   \u2018std::vector<long int>\u2019\
    \ is not derived from \u2018std::tuple<_Elements ...>\u2019\n   28 |         col.emplace_back(std::get<0>(it),\
    \ std::get<1>(it));\n      |                                        ^\nIn file\
    \ included from /usr/include/c++/9/functional:54,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmp39pn4r19.cpp:2:\n/usr/include/c++/9/tuple:1326:5:\
    \ note: candidate: \u2018template<long unsigned int __i, class ... _Elements>\
    \ constexpr std::__tuple_element_t<__i, std::tuple<_Elements ...> >& std::get(const\
    \ std::tuple<_Elements ...>&)\u2019\n 1326 |     get(const tuple<_Elements...>&\
    \ __t) noexcept\n      |     ^~~\n/usr/include/c++/9/tuple:1326:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmp39pn4r19.cpp:28:40: note: \
    \  \u2018std::vector<long int>\u2019 is not derived from \u2018const std::tuple<_Elements\
    \ ...>\u2019\n   28 |         col.emplace_back(std::get<0>(it), std::get<1>(it));\n\
    \      |                                        ^\nIn file included from /usr/include/c++/9/functional:54,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmp39pn4r19.cpp:2:\n/usr/include/c++/9/tuple:1332:5:\
    \ note: candidate: \u2018template<long unsigned int __i, class ... _Elements>\
    \ constexpr std::__tuple_element_t<__i, std::tuple<_Elements ...> >&& std::get(std::tuple<_Elements\
    \ ...>&&)\u2019\n 1332 |     get(tuple<_Elements...>&& __t) noexcept\n      |\
    \     ^~~\n/usr/include/c++/9/tuple:1332:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp39pn4r19.cpp:28:40: note:   \u2018std::vector<long int>\u2019\
    \ is not derived from \u2018std::tuple<_Elements ...>\u2019\n   28 |         col.emplace_back(std::get<0>(it),\
    \ std::get<1>(it));\n      |                                        ^\nIn file\
    \ included from /usr/include/c++/9/functional:54,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmp39pn4r19.cpp:2:\n/usr/include/c++/9/tuple:1341:5:\
    \ note: candidate: \u2018template<long unsigned int __i, class ... _Elements>\
    \ constexpr std::__tuple_element_t<__i, std::tuple<_Elements ...> >&& std::get(const\
    \ std::tuple<_Elements ...>&&)\u2019\n 1341 |     get(const tuple<_Elements...>&&\
    \ __t) noexcept\n      |     ^~~\n/usr/include/c++/9/tuple:1341:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmp39pn4r19.cpp:28:40: note: \
    \  \u2018std::vector<long int>\u2019 is not derived from \u2018const std::tuple<_Elements\
    \ ...>\u2019\n   28 |         col.emplace_back(std::get<0>(it), std::get<1>(it));\n\
    \      |                                        ^\nIn file included from /usr/include/c++/9/functional:54,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmp39pn4r19.cpp:2:\n/usr/include/c++/9/tuple:1364:5:\
    \ note: candidate: \u2018template<class _Tp, class ... _Types> constexpr _Tp&\
    \ std::get(std::tuple<_Elements ...>&)\u2019\n 1364 |     get(tuple<_Types...>&\
    \ __t) noexcept\n      |     ^~~\n/usr/include/c++/9/tuple:1364:5: note:   template\
    \ argument deduction/substitution failed:\n/usr/include/c++/9/tuple:1370:5: note:\
    \ candidate: \u2018template<class _Tp, class ... _Types> constexpr _Tp&& std::get(std::tuple<_Elements\
    \ ...>&&)\u2019\n 1370 |     get(tuple<_Types...>&& __t) noexcept\n      |   \
    \  ^~~\n/usr/include/c++/9/tuple:1370:5: note:   template argument deduction/substitution\
    \ failed:\n/usr/include/c++/9/tuple:1376:5: note: candidate: \u2018template<class\
    \ _Tp, class ... _Types> constexpr const _Tp& std::get(const std::tuple<_Elements\
    \ ...>&)\u2019\n 1376 |     get(const tuple<_Types...>& __t) noexcept\n      |\
    \     ^~~\n/usr/include/c++/9/tuple:1376:5: note:   template argument deduction/substitution\
    \ failed:\n/usr/include/c++/9/tuple:1383:5: note: candidate: \u2018template<class\
    \ _Tp, class ... _Types> constexpr const _Tp&& std::get(const std::tuple<_Elements\
    \ ...>&&)\u2019\n 1383 |     get(const tuple<_Types...>&& __t) noexcept\n    \
    \  |     ^~~\n/usr/include/c++/9/tuple:1383:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp39pn4r19.cpp:28:57: error: no matching function for call to\
    \ \u2018get<1>(std::vector<long int>&)\u2019\n   28 |         col.emplace_back(std::get<0>(it),\
    \ std::get<1>(it));\n      |                                                 \
    \        ^\nIn file included from /usr/include/c++/9/algorithm:60,\n         \
    \        from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n        \
    \         from /tmp/tmp39pn4r19.cpp:2:\n/usr/include/c++/9/utility:219:5: note:\
    \ candidate: \u2018template<long unsigned int _Int, class _Tp1, class _Tp2> constexpr\
    \ typename std::tuple_element<_Int, std::pair<_Tp1, _Tp2> >::type& std::get(std::pair<_Tp1,\
    \ _Tp2>&)\u2019\n  219 |     get(std::pair<_Tp1, _Tp2>& __in) noexcept\n     \
    \ |     ^~~\n/usr/include/c++/9/utility:219:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp39pn4r19.cpp:28:57: note:   \u2018std::vector<long int>\u2019\
    \ is not derived from \u2018std::pair<_Tp1, _Tp2>\u2019\n   28 |         col.emplace_back(std::get<0>(it),\
    \ std::get<1>(it));\n      |                                                 \
    \        ^\nIn file included from /usr/include/c++/9/algorithm:60,\n         \
    \        from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n        \
    \         from /tmp/tmp39pn4r19.cpp:2:\n/usr/include/c++/9/utility:224:5: note:\
    \ candidate: \u2018template<long unsigned int _Int, class _Tp1, class _Tp2> constexpr\
    \ typename std::tuple_element<_Int, std::pair<_Tp1, _Tp2> >::type&& std::get(std::pair<_Tp1,\
    \ _Tp2>&&)\u2019\n  224 |     get(std::pair<_Tp1, _Tp2>&& __in) noexcept\n   \
    \   |     ^~~\n/usr/include/c++/9/utility:224:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp39pn4r19.cpp:28:57: note:   \u2018std::vector<long int>\u2019\
    \ is not derived from \u2018std::pair<_Tp1, _Tp2>\u2019\n   28 |         col.emplace_back(std::get<0>(it),\
    \ std::get<1>(it));\n      |                                                 \
    \        ^\nIn file included from /usr/include/c++/9/algorithm:60,\n         \
    \        from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n        \
    \         from /tmp/tmp39pn4r19.cpp:2:\n/usr/include/c++/9/utility:229:5: note:\
    \ candidate: \u2018template<long unsigned int _Int, class _Tp1, class _Tp2> constexpr\
    \ const typename std::tuple_element<_Int, std::pair<_Tp1, _Tp2> >::type& std::get(const\
    \ std::pair<_Tp1, _Tp2>&)\u2019\n  229 |     get(const std::pair<_Tp1, _Tp2>&\
    \ __in) noexcept\n      |     ^~~\n/usr/include/c++/9/utility:229:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmp39pn4r19.cpp:28:57: note: \
    \  \u2018std::vector<long int>\u2019 is not derived from \u2018const std::pair<_Tp1,\
    \ _Tp2>\u2019\n   28 |         col.emplace_back(std::get<0>(it), std::get<1>(it));\n\
    \      |                                                         ^\nIn file included\
    \ from /usr/include/c++/9/algorithm:60,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp39pn4r19.cpp:2:\n/usr/include/c++/9/utility:234:5:\
    \ note: candidate: \u2018template<long unsigned int _Int, class _Tp1, class _Tp2>\
    \ constexpr const typename std::tuple_element<_Int, std::pair<_Tp1, _Tp2> >::type&&\
    \ std::get(const std::pair<_Tp1, _Tp2>&&)\u2019\n  234 |     get(const std::pair<_Tp1,\
    \ _Tp2>&& __in) noexcept\n      |     ^~~\n/usr/include/c++/9/utility:234:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmp39pn4r19.cpp:28:57:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::pair<_Tp1,\
    \ _Tp2>\u2019\n   28 |         col.emplace_back(std::get<0>(it), std::get<1>(it));\n\
    \      |                                                         ^\nIn file included\
    \ from /usr/include/c++/9/algorithm:60,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp39pn4r19.cpp:2:\n/usr/include/c++/9/utility:243:5:\
    \ note: candidate: \u2018template<class _Tp, class _Up> constexpr _Tp& std::get(std::pair<_T1,\
    \ _T2>&)\u2019\n  243 |     get(pair<_Tp, _Up>& __p) noexcept\n      |     ^~~\n\
    /usr/include/c++/9/utility:243:5: note:   template argument deduction/substitution\
    \ failed:\n/usr/include/c++/9/utility:248:5: note: candidate: \u2018template<class\
    \ _Tp, class _Up> constexpr const _Tp& std::get(const std::pair<_T1, _T2>&)\u2019\
    \n  248 |     get(const pair<_Tp, _Up>& __p) noexcept\n      |     ^~~\n/usr/include/c++/9/utility:248:5:\
    \ note:   template argument deduction/substitution failed:\n/usr/include/c++/9/utility:253:5:\
    \ note: candidate: \u2018template<class _Tp, class _Up> constexpr _Tp&& std::get(std::pair<_T1,\
    \ _T2>&&)\u2019\n  253 |     get(pair<_Tp, _Up>&& __p) noexcept\n      |     ^~~\n\
    /usr/include/c++/9/utility:253:5: note:   template argument deduction/substitution\
    \ failed:\n/usr/include/c++/9/utility:258:5: note: candidate: \u2018template<class\
    \ _Tp, class _Up> constexpr const _Tp&& std::get(const std::pair<_T1, _T2>&&)\u2019\
    \n  258 |     get(const pair<_Tp, _Up>&& __p) noexcept\n      |     ^~~\n/usr/include/c++/9/utility:258:5:\
    \ note:   template argument deduction/substitution failed:\n/usr/include/c++/9/utility:263:5:\
    \ note: candidate: \u2018template<class _Tp, class _Up> constexpr _Tp& std::get(std::pair<_Up,\
    \ _Tp>&)\u2019\n  263 |     get(pair<_Up, _Tp>& __p) noexcept\n      |     ^~~\n\
    /usr/include/c++/9/utility:263:5: note:   template argument deduction/substitution\
    \ failed:\n/usr/include/c++/9/utility:268:5: note: candidate: \u2018template<class\
    \ _Tp, class _Up> constexpr const _Tp& std::get(const std::pair<_Up, _Tp>&)\u2019\
    \n  268 |     get(const pair<_Up, _Tp>& __p) noexcept\n      |     ^~~\n/usr/include/c++/9/utility:268:5:\
    \ note:   template argument deduction/substitution failed:\n/usr/include/c++/9/utility:273:5:\
    \ note: candidate: \u2018template<class _Tp, class _Up> constexpr _Tp&& std::get(std::pair<_Up,\
    \ _Tp>&&)\u2019\n  273 |     get(pair<_Up, _Tp>&& __p) noexcept\n      |     ^~~\n\
    /usr/include/c++/9/utility:273:5: note:   template argument deduction/substitution\
    \ failed:\n/usr/include/c++/9/utility:278:5: note: candidate: \u2018template<class\
    \ _Tp, class _Up> constexpr const _Tp&& std::get(const std::pair<_Up, _Tp>&&)\u2019\
    \n  278 |     get(const pair<_Up, _Tp>&& __p) noexcept\n      |     ^~~\n/usr/include/c++/9/utility:278:5:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/9/tuple:39,\n                 from /usr/include/c++/9/functional:54,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmp39pn4r19.cpp:2:\n/usr/include/c++/9/array:307:5:\
    \ note: candidate: \u2018template<long unsigned int _Int, class _Tp, long unsigned\
    \ int _Nm> constexpr _Tp& std::get(std::array<_Tp, _Nm>&)\u2019\n  307 |     get(array<_Tp,\
    \ _Nm>& __arr) noexcept\n      |     ^~~\n/usr/include/c++/9/array:307:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmp39pn4r19.cpp:28:57:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018std::array<_Tp,\
    \ _Nm>\u2019\n   28 |         col.emplace_back(std::get<0>(it), std::get<1>(it));\n\
    \      |                                                         ^\nIn file included\
    \ from /usr/include/c++/9/tuple:39,\n                 from /usr/include/c++/9/functional:54,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmp39pn4r19.cpp:2:\n/usr/include/c++/9/array:316:5:\
    \ note: candidate: \u2018template<long unsigned int _Int, class _Tp, long unsigned\
    \ int _Nm> constexpr _Tp&& std::get(std::array<_Tp, _Nm>&&)\u2019\n  316 |   \
    \  get(array<_Tp, _Nm>&& __arr) noexcept\n      |     ^~~\n/usr/include/c++/9/array:316:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp39pn4r19.cpp:28:57:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018std::array<_Tp,\
    \ _Nm>\u2019\n   28 |         col.emplace_back(std::get<0>(it), std::get<1>(it));\n\
    \      |                                                         ^\nIn file included\
    \ from /usr/include/c++/9/tuple:39,\n                 from /usr/include/c++/9/functional:54,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmp39pn4r19.cpp:2:\n/usr/include/c++/9/array:324:5:\
    \ note: candidate: \u2018template<long unsigned int _Int, class _Tp, long unsigned\
    \ int _Nm> constexpr const _Tp& std::get(const std::array<_Tp, _Nm>&)\u2019\n\
    \  324 |     get(const array<_Tp, _Nm>& __arr) noexcept\n      |     ^~~\n/usr/include/c++/9/array:324:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp39pn4r19.cpp:28:57:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::array<_Tp,\
    \ _Nm>\u2019\n   28 |         col.emplace_back(std::get<0>(it), std::get<1>(it));\n\
    \      |                                                         ^\nIn file included\
    \ from /usr/include/c++/9/tuple:39,\n                 from /usr/include/c++/9/functional:54,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmp39pn4r19.cpp:2:\n/usr/include/c++/9/array:333:5:\
    \ note: candidate: \u2018template<long unsigned int _Int, class _Tp, long unsigned\
    \ int _Nm> constexpr const _Tp&& std::get(const std::array<_Tp, _Nm>&&)\u2019\n\
    \  333 |     get(const array<_Tp, _Nm>&& __arr) noexcept\n      |     ^~~\n/usr/include/c++/9/array:333:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp39pn4r19.cpp:28:57:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::array<_Tp,\
    \ _Nm>\u2019\n   28 |         col.emplace_back(std::get<0>(it), std::get<1>(it));\n\
    \      |                                                         ^\nIn file included\
    \ from /usr/include/c++/9/functional:54,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmp39pn4r19.cpp:2:\n/usr/include/c++/9/tuple:1320:5:\
    \ note: candidate: \u2018template<long unsigned int __i, class ... _Elements>\
    \ constexpr std::__tuple_element_t<__i, std::tuple<_Elements ...> >& std::get(std::tuple<_Elements\
    \ ...>&)\u2019\n 1320 |     get(tuple<_Elements...>& __t) noexcept\n      |  \
    \   ^~~\n/usr/include/c++/9/tuple:1320:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp39pn4r19.cpp:28:57: note:   \u2018std::vector<long int>\u2019\
    \ is not derived from \u2018std::tuple<_Elements ...>\u2019\n   28 |         col.emplace_back(std::get<0>(it),\
    \ std::get<1>(it));\n      |                                                 \
    \        ^\nIn file included from /usr/include/c++/9/functional:54,\n        \
    \         from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n       \
    \          from /tmp/tmp39pn4r19.cpp:2:\n/usr/include/c++/9/tuple:1326:5: note:\
    \ candidate: \u2018template<long unsigned int __i, class ... _Elements> constexpr\
    \ std::__tuple_element_t<__i, std::tuple<_Elements ...> >& std::get(const std::tuple<_Elements\
    \ ...>&)\u2019\n 1326 |     get(const tuple<_Elements...>& __t) noexcept\n   \
    \   |     ^~~\n/usr/include/c++/9/tuple:1326:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp39pn4r19.cpp:28:57: note:   \u2018std::vector<long int>\u2019\
    \ is not derived from \u2018const std::tuple<_Elements ...>\u2019\n   28 |   \
    \      col.emplace_back(std::get<0>(it), std::get<1>(it));\n      |          \
    \                                               ^\nIn file included from /usr/include/c++/9/functional:54,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmp39pn4r19.cpp:2:\n/usr/include/c++/9/tuple:1332:5:\
    \ note: candidate: \u2018template<long unsigned int __i, class ... _Elements>\
    \ constexpr std::__tuple_element_t<__i, std::tuple<_Elements ...> >&& std::get(std::tuple<_Elements\
    \ ...>&&)\u2019\n 1332 |     get(tuple<_Elements...>&& __t) noexcept\n      |\
    \     ^~~\n/usr/include/c++/9/tuple:1332:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp39pn4r19.cpp:28:57: note:   \u2018std::vector<long int>\u2019\
    \ is not derived from \u2018std::tuple<_Elements ...>\u2019\n   28 |         col.emplace_back(std::get<0>(it),\
    \ std::get<1>(it));\n      |                                                 \
    \        ^\nIn file included from /usr/include/c++/9/functional:54,\n        \
    \         from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n       \
    \          from /tmp/tmp39pn4r19.cpp:2:\n/usr/include/c++/9/tuple:1341:5: note:\
    \ candidate: \u2018template<long unsigned int __i, class ... _Elements> constexpr\
    \ std::__tuple_element_t<__i, std::tuple<_Elements ...> >&& std::get(const std::tuple<_Elements\
    \ ...>&&)\u2019\n 1341 |     get(const tuple<_Elements...>&& __t) noexcept\n \
    \     |     ^~~\n/usr/include/c++/9/tuple:1341:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp39pn4r19.cpp:28:57: note:   \u2018std::vector<long int>\u2019\
    \ is not derived from \u2018const std::tuple<_Elements ...>\u2019\n   28 |   \
    \      col.emplace_back(std::get<0>(it), std::get<1>(it));\n      |          \
    \                                               ^\nIn file included from /usr/include/c++/9/functional:54,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmp39pn4r19.cpp:2:\n/usr/include/c++/9/tuple:1364:5:\
    \ note: candidate: \u2018template<class _Tp, class ... _Types> constexpr _Tp&\
    \ std::get(std::tuple<_Elements ...>&)\u2019\n 1364 |     get(tuple<_Types...>&\
    \ __t) noexcept\n      |     ^~~\n/usr/include/c++/9/tuple:1364:5: note:   template\
    \ argument deduction/substitution failed:\n/usr/include/c++/9/tuple:1370:5: note:\
    \ candidate: \u2018template<class _Tp, class ... _Types> constexpr _Tp&& std::get(std::tuple<_Elements\
    \ ...>&&)\u2019\n 1370 |     get(tuple<_Types...>&& __t) noexcept\n      |   \
    \  ^~~\n/usr/include/c++/9/tuple:1370:5: note:   template argument deduction/substitution\
    \ failed:\n/usr/include/c++/9/tuple:1376:5: note: candidate: \u2018template<class\
    \ _Tp, class ... _Types> constexpr const _Tp& std::get(const std::tuple<_Elements\
    \ ...>&)\u2019\n 1376 |     get(const tuple<_Types...>& __t) noexcept\n      |\
    \     ^~~\n/usr/include/c++/9/tuple:1376:5: note:   template argument deduction/substitution\
    \ failed:\n/usr/include/c++/9/tuple:1383:5: note: candidate: \u2018template<class\
    \ _Tp, class ... _Types> constexpr const _Tp&& std::get(const std::tuple<_Elements\
    \ ...>&&)\u2019\n 1383 |     get(const tuple<_Types...>&& __t) noexcept\n    \
    \  |     ^~~\n/usr/include/c++/9/tuple:1383:5: note:   template argument deduction/substitution\
    \ failed:\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    std::vector<std::tuple<long, long>> res;\n    for(auto &row\
    \ : lst) {\n        for(auto &col : row) {\n            if(col == x) {\n     \
    \           res.emplace_back(std::make_tuple(row.size(), col.size()));\n     \
    \       }\n        }\n    }\n    std::sort(res.begin(), res.end(), [](const std::tuple<long,\
    \ long> &a, const std::tuple<long, long> &b) {\n        return std::get<0>(a)\
    \ < std::get<0>(b);\n    });\n    std::sort(res.begin(), res.end(), [](const std::tuple<long,\
    \ long> &a, const std::tuple<long, long> &b) {\n        return std::get<1>(a)\
    \ < std::get<1>(b);\n    });\n    return res;\n}\nint main() {\n    auto candidate\
    \ = get_row;\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpnvk3w4k3.cpp: In function \u2018std::vector<std::tuple<long int,\
    \ long int> > get_row(std::vector<std::vector<long int> >, long int)\u2019:\n\
    /tmp/tmpnvk3w4k3.cpp:24:66: error: request for member \u2018size\u2019 in \u2018\
    col\u2019, which is of non-class type \u2018long int\u2019\n   24 |          \
    \       res.emplace_back(std::make_tuple(row.size(), col.size()));\n      |  \
    \                                                                ^~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    std::vector<std::tuple<long, long>> res;\n    long row =\
    \ 0;\n    long col = 0;\n    long cnt = 0;\n    for(auto &row : lst) {\n     \
    \   for(auto &col : row) {\n            if(col == x) {\n                res.push_back(std::make_tuple(row,\
    \ col));\n                cnt++;\n            }\n        }\n    }\n    for(auto\
    \ &row : lst) {\n        for(auto &col : row) {\n            if(col != x) {\n\
    \                res.push_back(std::make_tuple(row, col));\n            }\n  \
    \      }\n    }\n    for(auto &row : lst) {\n        for(auto &col : row) {\n\
    \            if(col == x) {\n                res.push_back(std::make_tuple(row,\
    \ col));\n            }\n        }\n    }\n    for(auto &row : lst) {\n      \
    \  for(auto &col : row) {\n            if(col != x) {\n                res.push_back(std::make_tuple(row,\
    \ col));\n            }\n        }\n    }\n    for(auto &row : lst) {\n      \
    \  for(auto &col : row) {\n            if(col != x) {\n                res.push_back(std::make_tuple(row,\
    \ col));\n            }\n        }\n    }\n    for(auto &row : lst) {\n      \
    \  for(auto &col : row) {\n            if(col != x) {\n                res.push_back(std::make_tuple(row,\
    \ col));\n            }\n        }\n    }\n    for(auto &row : lst) {\n      \
    \  for(auto &col : row) {\n            if(col != x) {\n                res.push_back(std::make_tuple(row,\
    \ col));\n            }\n        }\n    }\n    for(auto &row : lst) {\n      \
    \  for(auto &col : row) {\n            if(col != x) {\n                res.push_back(std::make_tuple(row,\
    \ col));\n            }\n        }\n    }\n    for(auto &row : lst) {\n      \
    \  for(auto &col : row) {\n            if(col != x) {\n                res.push_back(std::make_tuple(row,\
    \ col));\n            }\n        }\n    }\n    for(auto &row : lst) {\n      \
    \  for(auto &col : row) {\n            if(col != x) {\n                res.push_back(std::make_tuple(row,\
    \ col));\n            }\n        }\n    }\n    for(auto &row : lst) {\n      \
    \  for(auto &col : row) {\n            if(col != x) {\n                res.push_back(std::make_tuple(row,\
    \ col));\n            }\n        }\n    }\n    for(auto &row : lst) {\n      \
    \  for(auto &col : row) {\n            if(col != x) {\n                res.push_back(std::make_tuple(row,\
    \ col));\n            }\n        }\n    }\n    for(auto \n}\nint main() {\n  \
    \  auto candidate = get_row;\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpg67ehxpn.cpp: In function \u2018std::vector<std::tuple<long int,\
    \ long int> > get_row(std::vector<std::vector<long int> >, long int)\u2019:\n\
    /tmp/tmpg67ehxpn.cpp:27:56: error: no matching function for call to \u2018std::vector<std::tuple<long\
    \ int, long int> >::push_back(std::tuple<std::vector<long int, std::allocator<long\
    \ int> >, long int>)\u2019\n   27 |                 res.push_back(std::make_tuple(row,\
    \ col));\n      |                                                        ^\nIn\
    \ file included from /usr/include/c++/9/vector:67,\n                 from /usr/include/c++/9/queue:61,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:86,\n\
    \                 from /tmp/tmpg67ehxpn.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::tuple<long int, long int>; _Alloc = std::allocator<std::tuple<long\
    \ int, long int> >; std::vector<_Tp, _Alloc>::value_type = std::tuple<long int,\
    \ long int>]\u2019\n 1184 |       push_back(const value_type& __x)\n      |  \
    \     ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1184:35: note:   no known\
    \ conversion for argument 1 from \u2018std::tuple<std::vector<long int, std::allocator<long\
    \ int> >, long int>\u2019 to \u2018const value_type&\u2019 {aka \u2018const std::tuple<long\
    \ int, long int>&\u2019}\n 1184 |       push_back(const value_type& __x)\n   \
    \   |                 ~~~~~~~~~~~~~~~~~~^~~\n/usr/include/c++/9/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = std::tuple<long int, long int>; _Alloc =\
    \ std::allocator<std::tuple<long int, long int> >; std::vector<_Tp, _Alloc>::value_type\
    \ = std::tuple<long int, long int>]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018std::tuple<std::vector<long\
    \ int, std::allocator<long int> >, long int>\u2019 to \u2018std::vector<std::tuple<long\
    \ int, long int> >::value_type&&\u2019 {aka \u2018std::tuple<long int, long int>&&\u2019\
    }\n 1200 |       push_back(value_type&& __x)\n      |                 ~~~~~~~~~~~~~^~~\n\
    /tmp/tmpg67ehxpn.cpp:35:56: error: no matching function for call to \u2018std::vector<std::tuple<long\
    \ int, long int> >::push_back(std::tuple<std::vector<long int, std::allocator<long\
    \ int> >, long int>)\u2019\n   35 |                 res.push_back(std::make_tuple(row,\
    \ col));\n      |                                                        ^\nIn\
    \ file included from /usr/include/c++/9/vector:67,\n                 from /usr/include/c++/9/queue:61,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:86,\n\
    \                 from /tmp/tmpg67ehxpn.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::tuple<long int, long int>; _Alloc = std::allocator<std::tuple<long\
    \ int, long int> >; std::vector<_Tp, _Alloc>::value_type = std::tuple<long int,\
    \ long int>]\u2019\n 1184 |       push_back(const value_type& __x)\n      |  \
    \     ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1184:35: note:   no known\
    \ conversion for argument 1 from \u2018std::tuple<std::vector<long int, std::allocator<long\
    \ int> >, long int>\u2019 to \u2018const value_type&\u2019 {aka \u2018const std::tuple<long\
    \ int, long int>&\u2019}\n 1184 |       push_back(const value_type& __x)\n   \
    \   |                 ~~~~~~~~~~~~~~~~~~^~~\n/usr/include/c++/9/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = std::tuple<long int, long int>; _Alloc =\
    \ std::allocator<std::tuple<long int, long int> >; std::vector<_Tp, _Alloc>::value_type\
    \ = std::tuple<long int, long int>]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018std::tuple<std::vector<long\
    \ int, std::allocator<long int> >, long int>\u2019 to \u2018std::vector<std::tuple<long\
    \ int, long int> >::value_type&&\u2019 {aka \u2018std::tuple<long int, long int>&&\u2019\
    }\n 1200 |       push_back(value_type&& __x)\n      |                 ~~~~~~~~~~~~~^~~\n\
    /tmp/tmpg67ehxpn.cpp:42:56: error: no matching function for call to \u2018std::vector<std::tuple<long\
    \ int, long int> >::push_back(std::tuple<std::vector<long int, std::allocator<long\
    \ int> >, long int>)\u2019\n   42 |                 res.push_back(std::make_tuple(row,\
    \ col));\n      |                                                        ^\nIn\
    \ file included from /usr/include/c++/9/vector:67,\n                 from /usr/include/c++/9/queue:61,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:86,\n\
    \                 from /tmp/tmpg67ehxpn.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::tuple<long int, long int>; _Alloc = std::allocator<std::tuple<long\
    \ int, long int> >; std::vector<_Tp, _Alloc>::value_type = std::tuple<long int,\
    \ long int>]\u2019\n 1184 |       push_back(const value_type& __x)\n      |  \
    \     ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1184:35: note:   no known\
    \ conversion for argument 1 from \u2018std::tuple<std::vector<long int, std::allocator<long\
    \ int> >, long int>\u2019 to \u2018const value_type&\u2019 {aka \u2018const std::tuple<long\
    \ int, long int>&\u2019}\n 1184 |       push_back(const value_type& __x)\n   \
    \   |                 ~~~~~~~~~~~~~~~~~~^~~\n/usr/include/c++/9/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = std::tuple<long int, long int>; _Alloc =\
    \ std::allocator<std::tuple<long int, long int> >; std::vector<_Tp, _Alloc>::value_type\
    \ = std::tuple<long int, long int>]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018std::tuple<std::vector<long\
    \ int, std::allocator<long int> >, long int>\u2019 to \u2018std::vector<std::tuple<long\
    \ int, long int> >::value_type&&\u2019 {aka \u2018std::tuple<long int, long int>&&\u2019\
    }\n 1200 |       push_back(value_type&& __x)\n      |                 ~~~~~~~~~~~~~^~~\n\
    /tmp/tmpg67ehxpn.cpp:49:56: error: no matching function for call to \u2018std::vector<std::tuple<long\
    \ int, long int> >::push_back(std::tuple<std::vector<long int, std::allocator<long\
    \ int> >, long int>)\u2019\n   49 |                 res.push_back(std::make_tuple(row,\
    \ col));\n      |                                                        ^\nIn\
    \ file included from /usr/include/c++/9/vector:67,\n                 from /usr/include/c++/9/queue:61,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:86,\n\
    \                 from /tmp/tmpg67ehxpn.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::tuple<long int, long int>; _Alloc = std::allocator<std::tuple<long\
    \ int, long int> >; std::vector<_Tp, _Alloc>::value_type = std::tuple<long int,\
    \ long int>]\u2019\n 1184 |       push_back(const value_type& __x)\n      |  \
    \     ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1184:35: note:   no known\
    \ conversion for argument 1 from \u2018std::tuple<std::vector<long int, std::allocator<long\
    \ int> >, long int>\u2019 to \u2018const value_type&\u2019 {aka \u2018const std::tuple<long\
    \ int, long int>&\u2019}\n 1184 |       push_back(const value_type& __x)\n   \
    \   |                 ~~~~~~~~~~~~~~~~~~^~~\n/usr/include/c++/9/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = std::tuple<long int, long int>; _Alloc =\
    \ std::allocator<std::tuple<long int, long int> >; std::vector<_Tp, _Alloc>::value_type\
    \ = std::tuple<long int, long int>]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018std::tuple<std::vector<long\
    \ int, std::allocator<long int> >, long int>\u2019 to \u2018std::vector<std::tuple<long\
    \ int, long int> >::value_type&&\u2019 {aka \u2018std::tuple<long int, long int>&&\u2019\
    }\n 1200 |       push_back(value_type&& __x)\n      |                 ~~~~~~~~~~~~~^~~\n\
    /tmp/tmpg67ehxpn.cpp:56:56: error: no matching function for call to \u2018std::vector<std::tuple<long\
    \ int, long int> >::push_back(std::tuple<std::vector<long int, std::allocator<long\
    \ int> >, long int>)\u2019\n   56 |                 res.push_back(std::make_tuple(row,\
    \ col));\n      |                                                        ^\nIn\
    \ file included from /usr/include/c++/9/vector:67,\n                 from /usr/include/c++/9/queue:61,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:86,\n\
    \                 from /tmp/tmpg67ehxpn.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::tuple<long int, long int>; _Alloc = std::allocator<std::tuple<long\
    \ int, long int> >; std::vector<_Tp, _Alloc>::value_type = std::tuple<long int,\
    \ long int>]\u2019\n 1184 |       push_back(const value_type& __x)\n      |  \
    \     ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1184:35: note:   no known\
    \ conversion for argument 1 from \u2018std::tuple<std::vector<long int, std::allocator<long\
    \ int> >, long int>\u2019 to \u2018const value_type&\u2019 {aka \u2018const std::tuple<long\
    \ int, long int>&\u2019}\n 1184 |       push_back(const value_type& __x)\n   \
    \   |                 ~~~~~~~~~~~~~~~~~~^~~\n/usr/include/c++/9/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = std::tuple<long int, long int>; _Alloc =\
    \ std::allocator<std::tuple<long int, long int> >; std::vector<_Tp, _Alloc>::value_type\
    \ = std::tuple<long int, long int>]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018std::tuple<std::vector<long\
    \ int, std::allocator<long int> >, long int>\u2019 to \u2018std::vector<std::tuple<long\
    \ int, long int> >::value_type&&\u2019 {aka \u2018std::tuple<long int, long int>&&\u2019\
    }\n 1200 |       push_back(value_type&& __x)\n      |                 ~~~~~~~~~~~~~^~~\n\
    /tmp/tmpg67ehxpn.cpp:63:56: error: no matching function for call to \u2018std::vector<std::tuple<long\
    \ int, long int> >::push_back(std::tuple<std::vector<long int, std::allocator<long\
    \ int> >, long int>)\u2019\n   63 |                 res.push_back(std::make_tuple(row,\
    \ col));\n      |                                                        ^\nIn\
    \ file included from /usr/include/c++/9/vector:67,\n                 from /usr/include/c++/9/queue:61,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:86,\n\
    \                 from /tmp/tmpg67ehxpn.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::tuple<long int, long int>; _Alloc = std::allocator<std::tuple<long\
    \ int, long int> >; std::vector<_Tp, _Alloc>::value_type = std::tuple<long int,\
    \ long int>]\u2019\n 1184 |       push_back(const value_type& __x)\n      |  \
    \     ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1184:35: note:   no known\
    \ conversion for argument 1 from \u2018std::tuple<std::vector<long int, std::allocator<long\
    \ int> >, long int>\u2019 to \u2018const value_type&\u2019 {aka \u2018const std::tuple<long\
    \ int, long int>&\u2019}\n 1184 |       push_back(const value_type& __x)\n   \
    \   |                 ~~~~~~~~~~~~~~~~~~^~~\n/usr/include/c++/9/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = std::tuple<long int, long int>; _Alloc =\
    \ std::allocator<std::tuple<long int, long int> >; std::vector<_Tp, _Alloc>::value_type\
    \ = std::tuple<long int, long int>]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018std::tuple<std::vector<long\
    \ int, std::allocator<long int> >, long int>\u2019 to \u2018std::vector<std::tuple<long\
    \ int, long int> >::value_type&&\u2019 {aka \u2018std::tuple<long int, long int>&&\u2019\
    }\n 1200 |       push_back(value_type&& __x)\n      |                 ~~~~~~~~~~~~~^~~\n\
    /tmp/tmpg67ehxpn.cpp:70:56: error: no matching function for call to \u2018std::vector<std::tuple<long\
    \ int, long int> >::push_back(std::tuple<std::vector<long int, std::allocator<long\
    \ int> >, long int>)\u2019\n   70 |                 res.push_back(std::make_tuple(row,\
    \ col));\n      |                                                        ^\nIn\
    \ file included from /usr/include/c++/9/vector:67,\n                 from /usr/include/c++/9/queue:61,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:86,\n\
    \                 from /tmp/tmpg67ehxpn.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::tuple<long int, long int>; _Alloc = std::allocator<std::tuple<long\
    \ int, long int> >; std::vector<_Tp, _Alloc>::value_type = std::tuple<long int,\
    \ long int>]\u2019\n 1184 |       push_back(const value_type& __x)\n      |  \
    \     ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1184:35: note:   no known\
    \ conversion for argument 1 from \u2018std::tuple<std::vector<long int, std::allocator<long\
    \ int> >, long int>\u2019 to \u2018const value_type&\u2019 {aka \u2018const std::tuple<long\
    \ int, long int>&\u2019}\n 1184 |       push_back(const value_type& __x)\n   \
    \   |                 ~~~~~~~~~~~~~~~~~~^~~\n/usr/include/c++/9/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = std::tuple<long int, long int>; _Alloc =\
    \ std::allocator<std::tuple<long int, long int> >; std::vector<_Tp, _Alloc>::value_type\
    \ = std::tuple<long int, long int>]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018std::tuple<std::vector<long\
    \ int, std::allocator<long int> >, long int>\u2019 to \u2018std::vector<std::tuple<long\
    \ int, long int> >::value_type&&\u2019 {aka \u2018std::tuple<long int, long int>&&\u2019\
    }\n 1200 |       push_back(value_type&& __x)\n      |                 ~~~~~~~~~~~~~^~~\n\
    /tmp/tmpg67ehxpn.cpp:77:56: error: no matching function for call to \u2018std::vector<std::tuple<long\
    \ int, long int> >::push_back(std::tuple<std::vector<long int, std::allocator<long\
    \ int> >, long int>)\u2019\n   77 |                 res.push_back(std::make_tuple(row,\
    \ col));\n      |                                                        ^\nIn\
    \ file included from /usr/include/c++/9/vector:67,\n                 from /usr/include/c++/9/queue:61,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:86,\n\
    \                 from /tmp/tmpg67ehxpn.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::tuple<long int, long int>; _Alloc = std::allocator<std::tuple<long\
    \ int, long int> >; std::vector<_Tp, _Alloc>::value_type = std::tuple<long int,\
    \ long int>]\u2019\n 1184 |       push_back(const value_type& __x)\n      |  \
    \     ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1184:35: note:   no known\
    \ conversion for argument 1 from \u2018std::tuple<std::vector<long int, std::allocator<long\
    \ int> >, long int>\u2019 to \u2018const value_type&\u2019 {aka \u2018const std::tuple<long\
    \ int, long int>&\u2019}\n 1184 |       push_back(const value_type& __x)\n   \
    \   |                 ~~~~~~~~~~~~~~~~~~^~~\n/usr/include/c++/9/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = std::tuple<long int, long int>; _Alloc =\
    \ std::allocator<std::tuple<long int, long int> >; std::vector<_Tp, _Alloc>::value_type\
    \ = std::tuple<long int, long int>]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018std::tuple<std::vector<long\
    \ int, std::allocator<long int> >, long int>\u2019 to \u2018std::vector<std::tuple<long\
    \ int, long int> >::value_type&&\u2019 {aka \u2018std::tuple<long int, long int>&&\u2019\
    }\n 1200 |       push_back(value_type&& __x)\n      |                 ~~~~~~~~~~~~~^~~\n\
    /tmp/tmpg67ehxpn.cpp:84:56: error: no matching function for call to \u2018std::vector<std::tuple<long\
    \ int, long int> >::push_back(std::tuple<std::vector<long int, std::allocator<long\
    \ int> >, long int>)\u2019\n   84 |                 res.push_back(std::make_tuple(row,\
    \ col));\n      |                                                        ^\nIn\
    \ file included from /usr/include/c++/9/vector:67,\n                 from /usr/include/c++/9/queue:61,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:86,\n\
    \                 from /tmp/tmpg67ehxpn.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::tuple<long int, long int>; _Alloc = std::allocator<std::tuple<long\
    \ int, long int> >; std::vector<_Tp, _Alloc>::value_type = std::tuple<long int,\
    \ long int>]\u2019\n 1184 |       push_back(const value_type& __x)\n      |  \
    \     ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1184:35: note:   no known\
    \ conversion for argument 1 from \u2018std::tuple<std::vector<long int, std::allocator<long\
    \ int> >, long int>\u2019 to \u2018const value_type&\u2019 {aka \u2018const std::tuple<long\
    \ int, long int>&\u2019}\n 1184 |       push_back(const value_type& __x)\n   \
    \   |                 ~~~~~~~~~~~~~~~~~~^~~\n/usr/include/c++/9/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = std::tuple<long int, long int>; _Alloc =\
    \ std::allocator<std::tuple<long int, long int> >; std::vector<_Tp, _Alloc>::value_type\
    \ = std::tuple<long int, long int>]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018std::tuple<std::vector<long\
    \ int, std::allocator<long int> >, long int>\u2019 to \u2018std::vector<std::tuple<long\
    \ int, long int> >::value_type&&\u2019 {aka \u2018std::tuple<long int, long int>&&\u2019\
    }\n 1200 |       push_back(value_type&& __x)\n      |                 ~~~~~~~~~~~~~^~~\n\
    /tmp/tmpg67ehxpn.cpp:91:56: error: no matching function for call to \u2018std::vector<std::tuple<long\
    \ int, long int> >::push_back(std::tuple<std::vector<long int, std::allocator<long\
    \ int> >, long int>)\u2019\n   91 |                 res.push_back(std::make_tuple(row,\
    \ col));\n      |                                                        ^\nIn\
    \ file included from /usr/include/c++/9/vector:67,\n                 from /usr/include/c++/9/queue:61,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:86,\n\
    \                 from /tmp/tmpg67ehxpn.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::tuple<long int, long int>; _Alloc = std::allocator<std::tuple<long\
    \ int, long int> >; std::vector<_Tp, _Alloc>::value_type = std::tuple<long int,\
    \ long int>]\u2019\n 1184 |       push_back(const value_type& __x)\n      |  \
    \     ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1184:35: note:   no known\
    \ conversion for argument 1 from \u2018std::tuple<std::vector<long int, std::allocator<long\
    \ int> >, long int>\u2019 to \u2018const value_type&\u2019 {aka \u2018const std::tuple<long\
    \ int, long int>&\u2019}\n 1184 |       push_back(const value_type& __x)\n   \
    \   |                 ~~~~~~~~~~~~~~~~~~^~~\n/usr/include/c++/9/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = std::tuple<long int, long int>; _Alloc =\
    \ std::allocator<std::tuple<long int, long int> >; std::vector<_Tp, _Alloc>::value_type\
    \ = std::tuple<long int, long int>]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018std::tuple<std::vector<long\
    \ int, std::allocator<long int> >, long int>\u2019 to \u2018std::vector<std::tuple<long\
    \ int, long int> >::value_type&&\u2019 {aka \u2018std::tuple<long int, long int>&&\u2019\
    }\n 1200 |       push_back(value_type&& __x)\n      |                 ~~~~~~~~~~~~~^~~\n\
    /tmp/tmpg67ehxpn.cpp:98:56: error: no matching function for call to \u2018std::vector<std::tuple<long\
    \ int, long int> >::push_back(std::tuple<std::vector<long int, std::allocator<long\
    \ int> >, long int>)\u2019\n   98 |                 res.push_back(std::make_tuple(row,\
    \ col));\n      |                                                        ^\nIn\
    \ file included from /usr/include/c++/9/vector:67,\n                 from /usr/include/c++/9/queue:61,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:86,\n\
    \                 from /tmp/tmpg67ehxpn.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::tuple<long int, long int>; _Alloc = std::allocator<std::tuple<long\
    \ int, long int> >; std::vector<_Tp, _Alloc>::value_type = std::tuple<long int,\
    \ long int>]\u2019\n 1184 |       push_back(const value_type& __x)\n      |  \
    \     ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1184:35: note:   no known\
    \ conversion for argument 1 from \u2018std::tuple<std::vector<long int, std::allocator<long\
    \ int> >, long int>\u2019 to \u2018const value_type&\u2019 {aka \u2018const std::tuple<long\
    \ int, long int>&\u2019}\n 1184 |       push_back(const value_type& __x)\n   \
    \   |                 ~~~~~~~~~~~~~~~~~~^~~\n/usr/include/c++/9/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = std::tuple<long int, long int>; _Alloc =\
    \ std::allocator<std::tuple<long int, long int> >; std::vector<_Tp, _Alloc>::value_type\
    \ = std::tuple<long int, long int>]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018std::tuple<std::vector<long\
    \ int, std::allocator<long int> >, long int>\u2019 to \u2018std::vector<std::tuple<long\
    \ int, long int> >::value_type&&\u2019 {aka \u2018std::tuple<long int, long int>&&\u2019\
    }\n 1200 |       push_back(value_type&& __x)\n      |                 ~~~~~~~~~~~~~^~~\n\
    /tmp/tmpg67ehxpn.cpp:105:56: error: no matching function for call to \u2018std::vector<std::tuple<long\
    \ int, long int> >::push_back(std::tuple<std::vector<long int, std::allocator<long\
    \ int> >, long int>)\u2019\n  105 |                 res.push_back(std::make_tuple(row,\
    \ col));\n      |                                                        ^\nIn\
    \ file included from /usr/include/c++/9/vector:67,\n                 from /usr/include/c++/9/queue:61,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:86,\n\
    \                 from /tmp/tmpg67ehxpn.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::tuple<long int, long int>; _Alloc = std::allocator<std::tuple<long\
    \ int, long int> >; std::vector<_Tp, _Alloc>::value_type = std::tuple<long int,\
    \ long int>]\u2019\n 1184 |       push_back(const value_type& __x)\n      |  \
    \     ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1184:35: note:   no known\
    \ conversion for argument 1 from \u2018std::tuple<std::vector<long int, std::allocator<long\
    \ int> >, long int>\u2019 to \u2018const value_type&\u2019 {aka \u2018const std::tuple<long\
    \ int, long int>&\u2019}\n 1184 |       push_back(const value_type& __x)\n   \
    \   |                 ~~~~~~~~~~~~~~~~~~^~~\n/usr/include/c++/9/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = std::tuple<long int, long int>; _Alloc =\
    \ std::allocator<std::tuple<long int, long int> >; std::vector<_Tp, _Alloc>::value_type\
    \ = std::tuple<long int, long int>]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018std::tuple<std::vector<long\
    \ int, std::allocator<long int> >, long int>\u2019 to \u2018std::vector<std::tuple<long\
    \ int, long int> >::value_type&&\u2019 {aka \u2018std::tuple<long int, long int>&&\u2019\
    }\n 1200 |       push_back(value_type&& __x)\n      |                 ~~~~~~~~~~~~~^~~\n\
    /tmp/tmpg67ehxpn.cpp:110:1: error: expected unqualified-id before \u2018}\u2019\
    \ token\n  110 | }\n      | ^\n/tmp/tmpg67ehxpn.cpp:109:13: error: expected \u2018\
    ;\u2019 before \u2018}\u2019 token\n  109 |     for(auto\n      |            \
    \ ^\n      |             ;\n  110 | }\n      | ~            \n/tmp/tmpg67ehxpn.cpp:110:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n  110 | }\n \
    \     | ^\n/tmp/tmpg67ehxpn.cpp:109:13: error: expected \u2018;\u2019 before \u2018\
    }\u2019 token\n  109 |     for(auto\n      |             ^\n      |          \
    \   ;\n  110 | }\n      | ~            \n/tmp/tmpg67ehxpn.cpp:110:1: error: expected\
    \ primary-expression before \u2018}\u2019 token\n  110 | }\n      | ^\n/tmp/tmpg67ehxpn.cpp:109:13:\
    \ error: expected \u2018)\u2019 before \u2018}\u2019 token\n  109 |     for(auto\n\
    \      |        ~    ^\n      |             )\n  110 | }\n      | ~          \
    \  \n/tmp/tmpg67ehxpn.cpp:110:1: error: expected primary-expression before \u2018\
    }\u2019 token\n  110 | }\n      | ^\n/tmp/tmpg67ehxpn.cpp:110:1: warning: no return\
    \ statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    // Write your code here\n    std::vector<std::tuple<long,\
    \ long>> res;\n    for(auto &row : lst){\n        for(auto &col : row){\n    \
    \        if(col == x){\n                res.emplace_back(row.size() - 1, col.size()\
    \ - 1);\n            }\n        }\n    }\n    std::sort(res.begin(), res.end(),\
    \ [](const std::tuple<long, long> &a, const std::tuple<long, long> &b){\n    \
    \    return std::get<0>(a) < std::get<0>(b);\n    });\n    std::sort(res.begin(),\
    \ res.end(), [](const std::tuple<long, long> &a, const std::tuple<long, long>\
    \ &b){\n        return std::get<1>(a) < std::get<1>(b);\n    });\n    return res;\n\
    }\nint main() {\n    auto candidate = get_row;\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpe2ca34jv.cpp: In function \u2018std::vector<std::tuple<long int,\
    \ long int> > get_row(std::vector<std::vector<long int> >, long int)\u2019:\n\
    /tmp/tmpe2ca34jv.cpp:25:54: error: request for member \u2018size\u2019 in \u2018\
    col\u2019, which is of non-class type \u2018long int\u2019\n   25 |          \
    \       res.emplace_back(row.size() - 1, col.size() - 1);\n      |           \
    \                                           ^~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    std::vector<std::tuple<long, long>> res;\n    std::vector<std::vector<long>>\
    \ row;\n    std::vector<std::vector<long>> column;\n    for (auto &i : lst) {\n\
    \        row.push_back(i);\n    }\n    for (auto &i : row) {\n        column.push_back(i);\n\
    \    }\n    for (auto &i : column) {\n        std::sort(i.begin(), i.end());\n\
    \    }\n    for (auto &i : column) {\n        std::sort(i.rbegin(), i.rend());\n\
    \    }\n    for (auto &i : row) {\n        std::sort(i.begin(), i.end());\n  \
    \  }\n    for (auto &i : row) {\n        std::sort(i.rbegin(), i.rend());\n  \
    \  }\n    for (auto &i : column) {\n        std::sort(i.begin(), i.end());\n \
    \   }\n    for (auto &i : column) {\n        std::sort(i.rbegin(), i.rend());\n\
    \    }\n    for (auto &i : row) {\n        std::sort(i.begin(), i.end());\n  \
    \  }\n    for (auto &i : row) {\n        std::sort(i.rbegin(), i.rend());\n  \
    \  }\n    for (auto &i : column) {\n        std::sort(i.begin(), i.end());\n \
    \   }\n    for (auto &i : column) {\n        std::sort(i.rbegin(), i.rend());\n\
    \    }\n    for (auto &i : row) {\n        std::sort(i.begin(), i.end());\n  \
    \  }\n    for (auto &i : row) {\n        std::sort(i.rbegin(), i.rend());\n  \
    \  }\n    for (auto &i : column) {\n        std::sort(i.begin(), i.end());\n \
    \   }\n    for (auto &i : column) {\n        std::sort(i.rbegin(), i.rend());\n\
    \    }\n    for (auto &i : row) {\n        std::sort(i.begin(), i.end());\n  \
    \  }\n    for (auto &i : row) {\n        std::sort(i.rbegin(), i.rend());\n  \
    \  }\n    for (auto &i : column) {\n        std::sort(i.begin(), i.end());\n \
    \   }\n    for (auto &i : column) {\n        std::sort(i.rbegin(), i.rend());\n\
    \    }\n    for (auto &i : row) {\n        std::sort(i.begin(), i.end());\n  \
    \  }\n    for (auto &i : row) {\n        std::sort(i.rbegin(), i.rend());\n  \
    \  }\n    for (auto &i : column) {\n        std::sort(i.begin(), i.end());\n \
    \   }\n    for (auto &i : column) {\n        std::sort(i.rbegin(), i.rend());\n\
    \    }\n    for (auto &i : \n}\nint main() {\n    auto candidate = get_row;\n\
    \    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_b9gszkl.cpp: In function \u2018std::vector<std::tuple<long int,\
    \ long int> > get_row(std::vector<std::vector<long int> >, long int)\u2019:\n\
    /tmp/tmp_b9gszkl.cpp:96:1: error: expected primary-expression before \u2018}\u2019\
    \ token\n   96 | }\n      | ^\n/tmp/tmp_b9gszkl.cpp:95:19: error: expected \u2018\
    )\u2019 before \u2018}\u2019 token\n   95 |     for (auto &i :\n      |      \
    \   ~         ^\n      |                   )\n   96 | }\n      | ~           \
    \       \n/tmp/tmp_b9gszkl.cpp:96:1: error: expected primary-expression before\
    \ \u2018}\u2019 token\n   96 | }\n      | ^\n/tmp/tmp_b9gszkl.cpp:96:1: warning:\
    \ no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    std::vector<std::tuple<long, long>> res;\n    std::vector<long>\
    \ row;\n    std::vector<long> col;\n    long row_index = 0;\n    long col_index\
    \ = 0;\n    long row_max = std::accumulate(lst.begin(), lst.end(), 0);\n    long\
    \ col_max = std::accumulate(lst.begin(), lst.end(), 0);\n    long row_min = std::numeric_limits<long>::max();\n\
    \    long col_min = std::numeric_limits<long>::max();\n    long row_cnt = 0;\n\
    \    long col_cnt = 0;\n    long row_cnt2 = 0;\n    long col_cnt2 = 0;\n    for\
    \ (auto &row : lst) {\n        row_cnt += row.size();\n        row_cnt2 += row.size();\n\
    \        row_min = std::min(row_min, row.size());\n        row_max = std::max(row_max,\
    \ row.size());\n    }\n    for (auto &col : lst) {\n        col_cnt += col.size();\n\
    \        col_cnt2 += col.size();\n        col_min = std::min(col_min, col.size());\n\
    \        col_max = std::max(col_max, col.size());\n    }\n    for (auto &row :\
    \ lst) {\n        for (auto &col : lst) {\n            if (col == row) {\n   \
    \             continue;\n            }\n            long row_cnt3 = row.size();\n\
    \            long col_cnt3 = col.size();\n            long row_cnt4 = row_cnt3;\n\
    \            long col_cnt4 = col_cnt3;\n            long row_cnt5 = row_cnt4;\n\
    \            long col_cnt5 = col_cnt4;\n            long row_cnt6 = row_cnt5;\n\
    \            long col_cnt6 = col_cnt5;\n            long row_cnt7 = row_cnt6;\n\
    \            long col_cnt7 = col_cnt6;\n            long row_cnt8 = row_cnt7;\n\
    \            long col_cnt8 = col_cnt7;\n            long row_cnt9 = row_cnt8;\n\
    \            long col_cnt9 = col_cnt8;\n            long row_cnt10 = row_cnt9;\n\
    \            long col_cnt10 = col_cnt9;\n            long row_cnt11 = row_cnt10;\n\
    \            long col_cnt11 = col_cnt10;\n            long row_cnt12 = row_cnt11;\n\
    \            long col_cnt12 = col_cnt11;\n            long row_cnt13 = row_cnt12;\n\
    \            long col_cnt13 = col_cnt12;\n            long row_cnt14 = row_cnt13;\n\
    \            long col_cnt14 = col_cnt13;\n            long row_cnt15 = row_cnt14;\n\
    \            long col_cnt15 = col_cnt14;\n\n}\nint main() {\n    auto candidate\
    \ = get_row;\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpk3fa2mlx.cpp: In function \u2018std::vector<std::tuple<long int,\
    \ long int> > get_row(std::vector<std::vector<long int> >, long int)\u2019:\n\
    /tmp/tmpk3fa2mlx.cpp:36:47: error: no matching function for call to \u2018min(long\
    \ int&, std::vector<long int>::size_type)\u2019\n   36 |         row_min = std::min(row_min,\
    \ row.size());\n      |                                               ^\nIn file\
    \ included from /usr/include/c++/9/bits/char_traits.h:39,\n                 from\
    \ /usr/include/c++/9/ios:40,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpk3fa2mlx.cpp:2:\n/usr/include/c++/9/bits/stl_algobase.h:198:5: note:\
    \ candidate: \u2018template<class _Tp> constexpr const _Tp& std::min(const _Tp&,\
    \ const _Tp&)\u2019\n  198 |     min(const _Tp& __a, const _Tp& __b)\n      |\
    \     ^~~\n/usr/include/c++/9/bits/stl_algobase.h:198:5: note:   template argument\
    \ deduction/substitution failed:\n/tmp/tmpk3fa2mlx.cpp:36:47: note:   deduced\
    \ conflicting types for parameter \u2018const _Tp\u2019 (\u2018long int\u2019\
    \ and \u2018std::vector<long int>::size_type\u2019 {aka \u2018long unsigned int\u2019\
    })\n   36 |         row_min = std::min(row_min, row.size());\n      |        \
    \                                       ^\nIn file included from /usr/include/c++/9/bits/char_traits.h:39,\n\
    \                 from /usr/include/c++/9/ios:40,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpk3fa2mlx.cpp:2:\n/usr/include/c++/9/bits/stl_algobase.h:246:5: note:\
    \ candidate: \u2018template<class _Tp, class _Compare> constexpr const _Tp& std::min(const\
    \ _Tp&, const _Tp&, _Compare)\u2019\n  246 |     min(const _Tp& __a, const _Tp&\
    \ __b, _Compare __comp)\n      |     ^~~\n/usr/include/c++/9/bits/stl_algobase.h:246:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpk3fa2mlx.cpp:36:47:\
    \ note:   deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018\
    long int\u2019 and \u2018std::vector<long int>::size_type\u2019 {aka \u2018long\
    \ unsigned int\u2019})\n   36 |         row_min = std::min(row_min, row.size());\n\
    \      |                                               ^\nIn file included from\
    \ /usr/include/c++/9/algorithm:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpk3fa2mlx.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3450:5:\
    \ note: candidate: \u2018template<class _Tp> constexpr _Tp std::min(std::initializer_list<_Tp>)\u2019\
    \n 3450 |     min(initializer_list<_Tp> __l)\n      |     ^~~\n/usr/include/c++/9/bits/stl_algo.h:3450:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpk3fa2mlx.cpp:36:47:\
    \ note:   mismatched types \u2018std::initializer_list<_Tp>\u2019 and \u2018long\
    \ int\u2019\n   36 |         row_min = std::min(row_min, row.size());\n      |\
    \                                               ^\nIn file included from /usr/include/c++/9/algorithm:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpk3fa2mlx.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3456:5:\
    \ note: candidate: \u2018template<class _Tp, class _Compare> constexpr _Tp std::min(std::initializer_list<_Tp>,\
    \ _Compare)\u2019\n 3456 |     min(initializer_list<_Tp> __l, _Compare __comp)\n\
    \      |     ^~~\n/usr/include/c++/9/bits/stl_algo.h:3456:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmpk3fa2mlx.cpp:36:47: note: \
    \  mismatched types \u2018std::initializer_list<_Tp>\u2019 and \u2018long int\u2019\
    \n   36 |         row_min = std::min(row_min, row.size());\n      |          \
    \                                     ^\n/tmp/tmpk3fa2mlx.cpp:37:47: error: no\
    \ matching function for call to \u2018max(long int&, std::vector<long int>::size_type)\u2019\
    \n   37 |         row_max = std::max(row_max, row.size());\n      |          \
    \                                     ^\nIn file included from /usr/include/c++/9/bits/char_traits.h:39,\n\
    \                 from /usr/include/c++/9/ios:40,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpk3fa2mlx.cpp:2:\n/usr/include/c++/9/bits/stl_algobase.h:222:5: note:\
    \ candidate: \u2018template<class _Tp> constexpr const _Tp& std::max(const _Tp&,\
    \ const _Tp&)\u2019\n  222 |     max(const _Tp& __a, const _Tp& __b)\n      |\
    \     ^~~\n/usr/include/c++/9/bits/stl_algobase.h:222:5: note:   template argument\
    \ deduction/substitution failed:\n/tmp/tmpk3fa2mlx.cpp:37:47: note:   deduced\
    \ conflicting types for parameter \u2018const _Tp\u2019 (\u2018long int\u2019\
    \ and \u2018std::vector<long int>::size_type\u2019 {aka \u2018long unsigned int\u2019\
    })\n   37 |         row_max = std::max(row_max, row.size());\n      |        \
    \                                       ^\nIn file included from /usr/include/c++/9/bits/char_traits.h:39,\n\
    \                 from /usr/include/c++/9/ios:40,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpk3fa2mlx.cpp:2:\n/usr/include/c++/9/bits/stl_algobase.h:268:5: note:\
    \ candidate: \u2018template<class _Tp, class _Compare> constexpr const _Tp& std::max(const\
    \ _Tp&, const _Tp&, _Compare)\u2019\n  268 |     max(const _Tp& __a, const _Tp&\
    \ __b, _Compare __comp)\n      |     ^~~\n/usr/include/c++/9/bits/stl_algobase.h:268:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpk3fa2mlx.cpp:37:47:\
    \ note:   deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018\
    long int\u2019 and \u2018std::vector<long int>::size_type\u2019 {aka \u2018long\
    \ unsigned int\u2019})\n   37 |         row_max = std::max(row_max, row.size());\n\
    \      |                                               ^\nIn file included from\
    \ /usr/include/c++/9/algorithm:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpk3fa2mlx.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3462:5:\
    \ note: candidate: \u2018template<class _Tp> constexpr _Tp std::max(std::initializer_list<_Tp>)\u2019\
    \n 3462 |     max(initializer_list<_Tp> __l)\n      |     ^~~\n/usr/include/c++/9/bits/stl_algo.h:3462:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpk3fa2mlx.cpp:37:47:\
    \ note:   mismatched types \u2018std::initializer_list<_Tp>\u2019 and \u2018long\
    \ int\u2019\n   37 |         row_max = std::max(row_max, row.size());\n      |\
    \                                               ^\nIn file included from /usr/include/c++/9/algorithm:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpk3fa2mlx.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3468:5:\
    \ note: candidate: \u2018template<class _Tp, class _Compare> constexpr _Tp std::max(std::initializer_list<_Tp>,\
    \ _Compare)\u2019\n 3468 |     max(initializer_list<_Tp> __l, _Compare __comp)\n\
    \      |     ^~~\n/usr/include/c++/9/bits/stl_algo.h:3468:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmpk3fa2mlx.cpp:37:47: note: \
    \  mismatched types \u2018std::initializer_list<_Tp>\u2019 and \u2018long int\u2019\
    \n   37 |         row_max = std::max(row_max, row.size());\n      |          \
    \                                     ^\n/tmp/tmpk3fa2mlx.cpp:42:47: error: no\
    \ matching function for call to \u2018min(long int&, std::vector<long int>::size_type)\u2019\
    \n   42 |         col_min = std::min(col_min, col.size());\n      |          \
    \                                     ^\nIn file included from /usr/include/c++/9/bits/char_traits.h:39,\n\
    \                 from /usr/include/c++/9/ios:40,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpk3fa2mlx.cpp:2:\n/usr/include/c++/9/bits/stl_algobase.h:198:5: note:\
    \ candidate: \u2018template<class _Tp> constexpr const _Tp& std::min(const _Tp&,\
    \ const _Tp&)\u2019\n  198 |     min(const _Tp& __a, const _Tp& __b)\n      |\
    \     ^~~\n/usr/include/c++/9/bits/stl_algobase.h:198:5: note:   template argument\
    \ deduction/substitution failed:\n/tmp/tmpk3fa2mlx.cpp:42:47: note:   deduced\
    \ conflicting types for parameter \u2018const _Tp\u2019 (\u2018long int\u2019\
    \ and \u2018std::vector<long int>::size_type\u2019 {aka \u2018long unsigned int\u2019\
    })\n   42 |         col_min = std::min(col_min, col.size());\n      |        \
    \                                       ^\nIn file included from /usr/include/c++/9/bits/char_traits.h:39,\n\
    \                 from /usr/include/c++/9/ios:40,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpk3fa2mlx.cpp:2:\n/usr/include/c++/9/bits/stl_algobase.h:246:5: note:\
    \ candidate: \u2018template<class _Tp, class _Compare> constexpr const _Tp& std::min(const\
    \ _Tp&, const _Tp&, _Compare)\u2019\n  246 |     min(const _Tp& __a, const _Tp&\
    \ __b, _Compare __comp)\n      |     ^~~\n/usr/include/c++/9/bits/stl_algobase.h:246:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpk3fa2mlx.cpp:42:47:\
    \ note:   deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018\
    long int\u2019 and \u2018std::vector<long int>::size_type\u2019 {aka \u2018long\
    \ unsigned int\u2019})\n   42 |         col_min = std::min(col_min, col.size());\n\
    \      |                                               ^\nIn file included from\
    \ /usr/include/c++/9/algorithm:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpk3fa2mlx.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3450:5:\
    \ note: candidate: \u2018template<class _Tp> constexpr _Tp std::min(std::initializer_list<_Tp>)\u2019\
    \n 3450 |     min(initializer_list<_Tp> __l)\n      |     ^~~\n/usr/include/c++/9/bits/stl_algo.h:3450:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpk3fa2mlx.cpp:42:47:\
    \ note:   mismatched types \u2018std::initializer_list<_Tp>\u2019 and \u2018long\
    \ int\u2019\n   42 |         col_min = std::min(col_min, col.size());\n      |\
    \                                               ^\nIn file included from /usr/include/c++/9/algorithm:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpk3fa2mlx.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3456:5:\
    \ note: candidate: \u2018template<class _Tp, class _Compare> constexpr _Tp std::min(std::initializer_list<_Tp>,\
    \ _Compare)\u2019\n 3456 |     min(initializer_list<_Tp> __l, _Compare __comp)\n\
    \      |     ^~~\n/usr/include/c++/9/bits/stl_algo.h:3456:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmpk3fa2mlx.cpp:42:47: note: \
    \  mismatched types \u2018std::initializer_list<_Tp>\u2019 and \u2018long int\u2019\
    \n   42 |         col_min = std::min(col_min, col.size());\n      |          \
    \                                     ^\n/tmp/tmpk3fa2mlx.cpp:43:47: error: no\
    \ matching function for call to \u2018max(long int&, std::vector<long int>::size_type)\u2019\
    \n   43 |         col_max = std::max(col_max, col.size());\n      |          \
    \                                     ^\nIn file included from /usr/include/c++/9/bits/char_traits.h:39,\n\
    \                 from /usr/include/c++/9/ios:40,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpk3fa2mlx.cpp:2:\n/usr/include/c++/9/bits/stl_algobase.h:222:5: note:\
    \ candidate: \u2018template<class _Tp> constexpr const _Tp& std::max(const _Tp&,\
    \ const _Tp&)\u2019\n  222 |     max(const _Tp& __a, const _Tp& __b)\n      |\
    \     ^~~\n/usr/include/c++/9/bits/stl_algobase.h:222:5: note:   template argument\
    \ deduction/substitution failed:\n/tmp/tmpk3fa2mlx.cpp:43:47: note:   deduced\
    \ conflicting types for parameter \u2018const _Tp\u2019 (\u2018long int\u2019\
    \ and \u2018std::vector<long int>::size_type\u2019 {aka \u2018long unsigned int\u2019\
    })\n   43 |         col_max = std::max(col_max, col.size());\n      |        \
    \                                       ^\nIn file included from /usr/include/c++/9/bits/char_traits.h:39,\n\
    \                 from /usr/include/c++/9/ios:40,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpk3fa2mlx.cpp:2:\n/usr/include/c++/9/bits/stl_algobase.h:268:5: note:\
    \ candidate: \u2018template<class _Tp, class _Compare> constexpr const _Tp& std::max(const\
    \ _Tp&, const _Tp&, _Compare)\u2019\n  268 |     max(const _Tp& __a, const _Tp&\
    \ __b, _Compare __comp)\n      |     ^~~\n/usr/include/c++/9/bits/stl_algobase.h:268:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpk3fa2mlx.cpp:43:47:\
    \ note:   deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018\
    long int\u2019 and \u2018std::vector<long int>::size_type\u2019 {aka \u2018long\
    \ unsigned int\u2019})\n   43 |         col_max = std::max(col_max, col.size());\n\
    \      |                                               ^\nIn file included from\
    \ /usr/include/c++/9/algorithm:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpk3fa2mlx.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3462:5:\
    \ note: candidate: \u2018template<class _Tp> constexpr _Tp std::max(std::initializer_list<_Tp>)\u2019\
    \n 3462 |     max(initializer_list<_Tp> __l)\n      |     ^~~\n/usr/include/c++/9/bits/stl_algo.h:3462:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpk3fa2mlx.cpp:43:47:\
    \ note:   mismatched types \u2018std::initializer_list<_Tp>\u2019 and \u2018long\
    \ int\u2019\n   43 |         col_max = std::max(col_max, col.size());\n      |\
    \                                               ^\nIn file included from /usr/include/c++/9/algorithm:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpk3fa2mlx.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3468:5:\
    \ note: candidate: \u2018template<class _Tp, class _Compare> constexpr _Tp std::max(std::initializer_list<_Tp>,\
    \ _Compare)\u2019\n 3468 |     max(initializer_list<_Tp> __l, _Compare __comp)\n\
    \      |     ^~~\n/usr/include/c++/9/bits/stl_algo.h:3468:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmpk3fa2mlx.cpp:43:47: note: \
    \  mismatched types \u2018std::initializer_list<_Tp>\u2019 and \u2018long int\u2019\
    \n   43 |         col_max = std::max(col_max, col.size());\n      |          \
    \                                     ^\n/tmp/tmpk3fa2mlx.cpp:78:12: error: a\
    \ function-definition is not allowed here before \u2018{\u2019 token\n   78 |\
    \ int main() {\n      |            ^\n/tmp/tmpk3fa2mlx.cpp:86:1: error: expected\
    \ \u2018}\u2019 at end of input\n   86 | }\n      | ^\n/tmp/tmpk3fa2mlx.cpp:45:27:\
    \ note: to match this \u2018{\u2019\n   45 |     for (auto &row : lst) {\n   \
    \   |                           ^\n/tmp/tmpk3fa2mlx.cpp:86:1: error: expected\
    \ \u2018}\u2019 at end of input\n   86 | }\n      | ^\n/tmp/tmpk3fa2mlx.cpp:19:89:\
    \ note: to match this \u2018{\u2019\n   19 | std::vector<std::tuple<long, long>>\
    \ get_row(std::vector<std::vector<long>> lst, long x) {\n      |             \
    \                                                                            ^\n\
    /tmp/tmpk3fa2mlx.cpp:86:1: warning: no return statement in function returning\
    \ non-void [-Wreturn-type]\n   86 | }\n      | ^\nIn file included from /usr/include/c++/9/numeric:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:84,\n\
    \                 from /tmp/tmpk3fa2mlx.cpp:2:\n/usr/include/c++/9/bits/stl_numeric.h:\
    \ In instantiation of \u2018_Tp std::accumulate(_InputIterator, _InputIterator,\
    \ _Tp) [with _InputIterator = __gnu_cxx::__normal_iterator<std::vector<long int>*,\
    \ std::vector<std::vector<long int> > >; _Tp = int]\u2019:\n/tmp/tmpk3fa2mlx.cpp:25:61:\
    \   required from here\n/usr/include/c++/9/bits/stl_numeric.h:139:39: error: no\
    \ match for \u2018operator+\u2019 (operand types are \u2018int\u2019 and \u2018\
    std::vector<long int>\u2019)\n  139 |  __init = _GLIBCXX_MOVE_IF_20(__init) +\
    \ *__first;\n      |                                       ^\nIn file included\
    \ from /usr/include/c++/9/bits/stl_algobase.h:67,\n                 from /usr/include/c++/9/bits/char_traits.h:39,\n\
    \                 from /usr/include/c++/9/ios:40,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpk3fa2mlx.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:423:5: note:\
    \ candidate: \u2018template<class _Iterator> std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:423:5: note:\
    \   template argument deduction/substitution failed:\nIn file included from /usr/include/c++/9/numeric:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:84,\n\
    \                 from /tmp/tmpk3fa2mlx.cpp:2:\n/usr/include/c++/9/bits/stl_numeric.h:139:39:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n  139 |  __init = _GLIBCXX_MOVE_IF_20(__init) + *__first;\n      |         \
    \                              ^\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/char_traits.h:39,\n           \
    \      from /usr/include/c++/9/ios:40,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpk3fa2mlx.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:1216:5: note:\
    \ candidate: \u2018template<class _Iterator> std::move_iterator<_IteratorL> std::operator+(typename\
    \ std::move_iterator<_IteratorL>::difference_type, const std::move_iterator<_IteratorL>&)\u2019\
    \n 1216 |     operator+(typename move_iterator<_Iterator>::difference_type __n,\n\
    \      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:1216:5: note:  \
    \ template argument deduction/substitution failed:\nIn file included from /usr/include/c++/9/numeric:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:84,\n\
    \                 from /tmp/tmpk3fa2mlx.cpp:2:\n/usr/include/c++/9/bits/stl_numeric.h:139:39:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::move_iterator<_IteratorL>\u2019\
    \n  139 |  __init = _GLIBCXX_MOVE_IF_20(__init) + *__first;\n      |         \
    \                              ^\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpk3fa2mlx.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6023:5:\
    \ note: candidate: \u2018template<class _CharT, class _Traits, class _Alloc> std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc> std::operator+(const std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>&, const std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&)\u2019\n\
    \ 6023 |     operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,\n \
    \     |     ^~~~~~~~\n/usr/include/c++/9/bits/basic_string.h:6023:5: note:   template\
    \ argument deduction/substitution failed:\nIn file included from /usr/include/c++/9/numeric:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:84,\n\
    \                 from /tmp/tmpk3fa2mlx.cpp:2:\n/usr/include/c++/9/bits/stl_numeric.h:139:39:\
    \ note:   mismatched types \u2018const std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>\u2019 and \u2018int\u2019\n  139 |  __init = _GLIBCXX_MOVE_IF_20(__init)\
    \ + *__first;\n      |                                       ^\nIn file included\
    \ from /usr/include/c++/9/string:56,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpk3fa2mlx.cpp:2:\n/usr/include/c++/9/bits/basic_string.tcc:1158:5: note:\
    \ candidate: \u2018template<class _CharT, class _Traits, class _Alloc> std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc> std::operator+(const _CharT*, const std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>&)\u2019\n 1158 |     operator+(const _CharT* __lhs,\n     \
    \ |     ^~~~~~~~\n/usr/include/c++/9/bits/basic_string.tcc:1158:5: note:   template\
    \ argument deduction/substitution failed:\nIn file included from /usr/include/c++/9/numeric:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:84,\n\
    \                 from /tmp/tmpk3fa2mlx.cpp:2:\n/usr/include/c++/9/bits/stl_numeric.h:139:39:\
    \ note:   mismatched types \u2018const _CharT*\u2019 and \u2018int\u2019\n  139\
    \ |  __init = _GLIBCXX_MOVE_IF_20(__init) + *__first;\n      |               \
    \                        ^\nIn file included from /usr/include/c++/9/string:56,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpk3fa2mlx.cpp:2:\n/usr/include/c++/9/bits/basic_string.tcc:1174:5:\
    \ note: candidate: \u2018template<class _CharT, class _Traits, class _Alloc> std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc> std::operator+(_CharT, const std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>&)\u2019\n 1174 |     operator+(_CharT __lhs, const basic_string<_CharT,\
    \ _Traits, _Alloc>& __rhs)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/basic_string.tcc:1174:5:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/9/numeric:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:84,\n\
    \                 from /tmp/tmpk3fa2mlx.cpp:2:\n/usr/include/c++/9/bits/stl_numeric.h:139:39:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>\u2019\n  139 |  __init = _GLIBCXX_MOVE_IF_20(__init) + *__first;\n\
    \      |                                       ^\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpk3fa2mlx.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6060:5:\
    \ note: candidate: \u2018template<class _CharT, class _Traits, class _Alloc> std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc> std::operator+(const std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>&, const _CharT*)\u2019\n 6060 |     operator+(const basic_string<_CharT,\
    \ _Traits, _Alloc>& __lhs,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/basic_string.h:6060:5:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/9/numeric:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:84,\n\
    \                 from /tmp/tmpk3fa2mlx.cpp:2:\n/usr/include/c++/9/bits/stl_numeric.h:139:39:\
    \ note:   mismatched types \u2018const std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>\u2019 and \u2018int\u2019\n  139 |  __init = _GLIBCXX_MOVE_IF_20(__init)\
    \ + *__first;\n      |                                       ^\nIn file included\
    \ from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpk3fa2mlx.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6076:5: note:\
    \ candidate: \u2018template<class _CharT, class _Traits, class _Alloc> std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc> std::operator+(const std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>&, _CharT)\u2019\n 6076 |     operator+(const basic_string<_CharT, _Traits,\
    \ _Alloc>& __lhs, _CharT __rhs)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/basic_string.h:6076:5:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/9/numeric:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:84,\n\
    \                 from /tmp/tmpk3fa2mlx.cpp:2:\n/usr/include/c++/9/bits/stl_numeric.h:139:39:\
    \ note:   mismatched types \u2018const std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>\u2019 and \u2018int\u2019\n  139 |  __init = _GLIBCXX_MOVE_IF_20(__init)\
    \ + *__first;\n      |                                       ^\nIn file included\
    \ from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpk3fa2mlx.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6088:5: note:\
    \ candidate: \u2018template<class _CharT, class _Traits, class _Alloc> std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc> std::operator+(std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>&&, const std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&)\u2019\
    \n 6088 |     operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,\n     \
    \ |     ^~~~~~~~\n/usr/include/c++/9/bits/basic_string.h:6088:5: note:   template\
    \ argument deduction/substitution failed:\nIn file included from /usr/include/c++/9/numeric:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:84,\n\
    \                 from /tmp/tmpk3fa2mlx.cpp:2:\n/usr/include/c++/9/bits/stl_numeric.h:139:39:\
    \ note:   mismatched types \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>\u2019\
    \ and \u2018int\u2019\n  139 |  __init = _GLIBCXX_MOVE_IF_20(__init) + *__first;\n\
    \      |                                       ^\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpk3fa2mlx.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6094:5:\
    \ note: candidate: \u2018template<class _CharT, class _Traits, class _Alloc> std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc> std::operator+(const std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>&, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&&)\u2019\n 6094\
    \ |     operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,\n      |\
    \     ^~~~~~~~\n/usr/include/c++/9/bits/basic_string.h:6094:5: note:   template\
    \ argument deduction/substitution failed:\nIn file included from /usr/include/c++/9/numeric:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:84,\n\
    \                 from /tmp/tmpk3fa2mlx.cpp:2:\n/usr/include/c++/9/bits/stl_numeric.h:139:39:\
    \ note:   mismatched types \u2018const std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>\u2019 and \u2018int\u2019\n  139 |  __init = _GLIBCXX_MOVE_IF_20(__init)\
    \ + *__first;\n      |                                       ^\nIn file included\
    \ from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpk3fa2mlx.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6100:5: note:\
    \ candidate: \u2018template<class _CharT, class _Traits, class _Alloc> std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc> std::operator+(std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>&&, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&&)\u2019\n 6100\
    \ |     operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,\n      |    \
    \ ^~~~~~~~\n/usr/include/c++/9/bits/basic_string.h:6100:5: note:   template argument\
    \ deduction/substitution failed:\nIn file included from /usr/include/c++/9/numeric:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:84,\n\
    \                 from /tmp/tmpk3fa2mlx.cpp:2:\n/usr/include/c++/9/bits/stl_numeric.h:139:39:\
    \ note:   mismatched types \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>\u2019\
    \ and \u2018int\u2019\n  139 |  __init = _GLIBCXX_MOVE_IF_20(__init) + *__first;\n\
    \      |                                       ^\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpk3fa2mlx.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6112:5:\
    \ note: candidate: \u2018template<class _CharT, class _Traits, class _Alloc> std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc> std::operator+(const _CharT*, std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>&&)\u2019\n 6112 |     operator+(const _CharT* __lhs,\n    \
    \  |     ^~~~~~~~\n/usr/include/c++/9/bits/basic_string.h:6112:5: note:   template\
    \ argument deduction/substitution failed:\nIn file included from /usr/include/c++/9/numeric:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:84,\n\
    \                 from /tmp/tmpk3fa2mlx.cpp:2:\n/usr/include/c++/9/bits/stl_numeric.h:139:39:\
    \ note:   mismatched types \u2018const _CharT*\u2019 and \u2018int\u2019\n  139\
    \ |  __init = _GLIBCXX_MOVE_IF_20(__init) + *__first;\n      |               \
    \                        ^\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpk3fa2mlx.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6118:5:\
    \ note: candidate: \u2018template<class _CharT, class _Traits, class _Alloc> std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc> std::operator+(_CharT, std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>&&)\u2019\n 6118 |     operator+(_CharT __lhs,\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/basic_string.h:6118:5: note:   template argument deduction/substitution\
    \ failed:\nIn file included from /usr/include/c++/9/numeric:62,\n            \
    \     from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:84,\n           \
    \      from /tmp/tmpk3fa2mlx.cpp:2:\n/usr/include/c++/9/bits/stl_numeric.h:139:39:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>\u2019\n  139 |  __init = _GLIBCXX_MOVE_IF_20(__init) + *__first;\n\
    \      |                                       ^\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpk3fa2mlx.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6124:5:\
    \ note: candidate: \u2018template<class _CharT, class _Traits, class _Alloc> std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc> std::operator+(std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>&&, const _CharT*)\u2019\n 6124 |     operator+(basic_string<_CharT,\
    \ _Traits, _Alloc>&& __lhs,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/basic_string.h:6124:5:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/9/numeric:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:84,\n\
    \                 from /tmp/tmpk3fa2mlx.cpp:2:\n/usr/include/c++/9/bits/stl_numeric.h:139:39:\
    \ note:   mismatched types \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>\u2019\
    \ and \u2018int\u2019\n  139 |  __init = _GLIBCXX_MOVE_IF_20(__init) + *__first;\n\
    \      |                                       ^\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpk3fa2mlx.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6130:5:\
    \ note: candidate: \u2018template<class _CharT, class _Traits, class _Alloc> std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc> std::operator+(std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>&&, _CharT)\u2019\n 6130 |     operator+(basic_string<_CharT, _Traits,\
    \ _Alloc>&& __lhs,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/basic_string.h:6130:5:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/9/numeric:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:84,\n\
    \                 from /tmp/tmpk3fa2mlx.cpp:2:\n/usr/include/c++/9/bits/stl_numeric.h:139:39:\
    \ note:   mismatched types \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>\u2019\
    \ and \u2018int\u2019\n  139 |  __init = _GLIBCXX_MOVE_IF_20(__init) + *__first;\n\
    \      |                                       ^\nIn file included from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpk3fa2mlx.cpp:2:\n/usr/include/c++/9/complex:331:5:\
    \ note: candidate: \u2018template<class _Tp> std::complex<_Tp> std::operator+(const\
    \ std::complex<_Tp>&, const std::complex<_Tp>&)\u2019\n  331 |     operator+(const\
    \ complex<_Tp>& __x, const complex<_Tp>& __y)\n      |     ^~~~~~~~\n/usr/include/c++/9/complex:331:5:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/9/numeric:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:84,\n\
    \                 from /tmp/tmpk3fa2mlx.cpp:2:\n/usr/include/c++/9/bits/stl_numeric.h:139:39:\
    \ note:   mismatched types \u2018const std::complex<_Tp>\u2019 and \u2018int\u2019\
    \n  139 |  __init = _GLIBCXX_MOVE_IF_20(__init) + *__first;\n      |         \
    \                              ^\nIn file included from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpk3fa2mlx.cpp:2:\n/usr/include/c++/9/complex:340:5:\
    \ note: candidate: \u2018template<class _Tp> std::complex<_Tp> std::operator+(const\
    \ std::complex<_Tp>&, const _Tp&)\u2019\n  340 |     operator+(const complex<_Tp>&\
    \ __x, const _Tp& __y)\n      |     ^~~~~~~~\n/usr/include/c++/9/complex:340:5:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/9/numeric:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:84,\n\
    \                 from /tmp/tmpk3fa2mlx.cpp:2:\n/usr/include/c++/9/bits/stl_numeric.h:139:39:\
    \ note:   mismatched types \u2018const std::complex<_Tp>\u2019 and \u2018int\u2019\
    \n  139 |  __init = _GLIBCXX_MOVE_IF_20(__init) + *__first;\n      |         \
    \                              ^\nIn file included from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpk3fa2mlx.cpp:2:\n/usr/include/c++/9/complex:349:5:\
    \ note: candidate: \u2018template<class _Tp> std::complex<_Tp> std::operator+(const\
    \ _Tp&, const std::complex<_Tp>&)\u2019\n  349 |     operator+(const _Tp& __x,\
    \ const complex<_Tp>& __y)\n      |     ^~~~~~~~\n/usr/include/c++/9/complex:349:5:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/9/numeric:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:84,\n\
    \                 from /tmp/tmpk3fa2mlx.cpp:2:\n/usr/include/c++/9/bits/stl_numeric.h:139:39:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::complex<_Tp>\u2019\
    \n  139 |  __init = _GLIBCXX_MOVE_IF_20(__init) + *__first;\n      |         \
    \                              ^\nIn file included from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpk3fa2mlx.cpp:2:\n/usr/include/c++/9/complex:450:5:\
    \ note: candidate: \u2018template<class _Tp> std::complex<_Tp> std::operator+(const\
    \ std::complex<_Tp>&)\u2019\n  450 |     operator+(const complex<_Tp>& __x)\n\
    \      |     ^~~~~~~~\n/usr/include/c++/9/complex:450:5: note:   template argument\
    \ deduction/substitution failed:\nIn file included from /usr/include/c++/9/numeric:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:84,\n\
    \                 from /tmp/tmpk3fa2mlx.cpp:2:\n/usr/include/c++/9/bits/stl_numeric.h:139:39:\
    \ note:   mismatched types \u2018const std::complex<_Tp>\u2019 and \u2018int\u2019\
    \n  139 |  __init = _GLIBCXX_MOVE_IF_20(__init) + *__first;\n      |         \
    \                              ^\nIn file included from /usr/include/c++/9/deque:67,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:68,\n\
    \                 from /tmp/tmpk3fa2mlx.cpp:2:\n/usr/include/c++/9/bits/stl_deque.h:393:5:\
    \ note: candidate: \u2018template<class _Tp, class _Ref, class _Ptr> std::_Deque_iterator<_Tp,\
    \ _Ref, _Ptr> std::operator+(std::ptrdiff_t, const std::_Deque_iterator<_Tp, _Ref,\
    \ _Ptr>&)\u2019\n  393 |     operator+(ptrdiff_t __n, const _Deque_iterator<_Tp,\
    \ _Ref, _Ptr>& __x)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_deque.h:393:5:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/9/numeric:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:84,\n\
    \                 from /tmp/tmpk3fa2mlx.cpp:2:\n/usr/include/c++/9/bits/stl_numeric.h:139:39:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::_Deque_iterator<_Tp,\
    \ _Ref, _Ptr>\u2019\n  139 |  __init = _GLIBCXX_MOVE_IF_20(__init) + *__first;\n\
    \      |                                       ^\nIn file included from /usr/include/c++/9/vector:68,\n\
    \                 from /usr/include/c++/9/queue:61,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:86,\n\
    \                 from /tmp/tmpk3fa2mlx.cpp:2:\n/usr/include/c++/9/bits/stl_bvector.h:303:3:\
    \ note: candidate: \u2018std::_Bit_iterator std::operator+(std::ptrdiff_t, const\
    \ std::_Bit_iterator&)\u2019\n  303 |   operator+(ptrdiff_t __n, const _Bit_iterator&\
    \ __x)\n      |   ^~~~~~~~\n/usr/include/c++/9/bits/stl_bvector.h:303:49: note:\
    \   no known conversion for argument 2 from \u2018std::vector<long int>\u2019\
    \ to \u2018const std::_Bit_iterator&\u2019\n  303 |   operator+(ptrdiff_t __n,\
    \ const _Bit_iterator& __x)\n      |                            ~~~~~~~~~~~~~~~~~~~~~^~~\n\
    /usr/include/c++/9/bits/stl_bvector.h:393:3: note: candidate: \u2018std::_Bit_const_iterator\
    \ std::operator+(std::ptrdiff_t, const std::_Bit_const_iterator&)\u2019\n  393\
    \ |   operator+(ptrdiff_t __n, const _Bit_const_iterator& __x)\n      |   ^~~~~~~~\n\
    /usr/include/c++/9/bits/stl_bvector.h:393:55: note:   no known conversion for\
    \ argument 2 from \u2018std::vector<long int>\u2019 to \u2018const std::_Bit_const_iterator&\u2019\
    \n  393 |   operator+(ptrdiff_t __n, const _Bit_const_iterator& __x)\n      |\
    \                            ~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\nIn file included\
    \ from /usr/include/c++/9/valarray:603,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n\
    \                 from /tmp/tmpk3fa2mlx.cpp:2:\n/usr/include/c++/9/bits/valarray_after.h:405:5:\
    \ note: candidate: \u2018template<class _Dom1, class _Dom2> std::_Expr<std::__detail::_BinClos<std::__plus,\
    \ std::_Expr, std::_Expr, _Dom1, _Dom2>, typename std::__fun<std::__plus, typename\
    \ _Dom1::value_type>::result_type> std::operator+(const std::_Expr<_Dom1, typename\
    \ _Dom1::value_type>&, const std::_Expr<_Dom2, typename _Dom2::value_type>&)\u2019\
    \n  405 |     _DEFINE_EXPR_BINARY_OPERATOR(+, __plus)\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /usr/include/c++/9/bits/valarray_after.h:405:5: note:   template argument deduction/substitution\
    \ failed:\nIn file included from /usr/include/c++/9/numeric:62,\n            \
    \     from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:84,\n           \
    \      from /tmp/tmpk3fa2mlx.cpp:2:\n/usr/include/c++/9/bits/stl_numeric.h:139:39:\
    \ note:   mismatched types \u2018const std::_Expr<_Dom1, typename _Dom1::value_type>\u2019\
    \ and \u2018int\u2019\n  139 |  __init = _GLIBCXX_MOVE_IF_20(__init) + *__first;\n\
    \      |                                       ^\nIn file included from /usr/include/c++/9/valarray:603,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n\
    \                 from /tmp/tmpk3fa2mlx.cpp:2:\n/usr/include/c++/9/bits/valarray_after.h:405:5:\
    \ note: candidate: \u2018template<class _Dom> std::_Expr<std::__detail::_BinClos<std::__plus,\
    \ std::_Expr, std::_Constant, _Dom, typename _Dom::value_type>, typename std::__fun<std::__plus,\
    \ typename _Dom1::value_type>::result_type> std::operator+(const std::_Expr<_Dom1,\
    \ typename _Dom1::value_type>&, const typename _Dom::value_type&)\u2019\n  405\
    \ |     _DEFINE_EXPR_BINARY_OPERATOR(+, __plus)\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /usr/include/c++/9/bits/valarray_after.h:405:5: note:   template argument deduction/substitution\
    \ failed:\nIn file included from /usr/include/c++/9/numeric:62,\n            \
    \     from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:84,\n           \
    \      from /tmp/tmpk3fa2mlx.cpp:2:\n/usr/include/c++/9/bits/stl_numeric.h:139:39:\
    \ note:   mismatched types \u2018const std::_Expr<_Dom1, typename _Dom1::value_type>\u2019\
    \ and \u2018int\u2019\n  139 |  __init = _GLIBCXX_MOVE_IF_20(__init) + *__first;\n\
    \      |                                       ^\nIn file included from /usr/include/c++/9/valarray:603,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n\
    \                 from /tmp/tmpk3fa2mlx.cpp:2:\n/usr/include/c++/9/bits/valarray_after.h:405:5:\
    \ note: candidate: \u2018template<class _Dom> std::_Expr<std::__detail::_BinClos<std::__plus,\
    \ std::_Constant, std::_Expr, typename _Dom::value_type, _Dom>, typename std::__fun<std::__plus,\
    \ typename _Dom1::value_type>::result_type> std::operator+(const typename _Dom::value_type&,\
    \ const std::_Expr<_Dom1, typename _Dom1::value_type>&)\u2019\n  405 |     _DEFINE_EXPR_BINARY_OPERATOR(+,\
    \ __plus)\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/usr/include/c++/9/bits/valarray_after.h:405:5:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/9/numeric:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:84,\n\
    \                 from /tmp/tmpk3fa2mlx.cpp:2:\n/usr/include/c++/9/bits/stl_numeric.h:139:39:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::_Expr<_Dom1,\
    \ typename _Dom1::value_type>\u2019\n  139 |  __init = _GLIBCXX_MOVE_IF_20(__init)\
    \ + *__first;\n      |                                       ^\nIn file included\
    \ from /usr/include/c++/9/valarray:603,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n\
    \                 from /tmp/tmpk3fa2mlx.cpp:2:\n/usr/include/c++/9/bits/valarray_after.h:405:5:\
    \ note: candidate: \u2018template<class _Dom> std::_Expr<std::__detail::_BinClos<std::__plus,\
    \ std::_Expr, std::_ValArray, _Dom, typename _Dom::value_type>, typename std::__fun<std::__plus,\
    \ typename _Dom1::value_type>::result_type> std::operator+(const std::_Expr<_Dom1,\
    \ typename _Dom1::value_type>&, const std::valarray<typename _Dom::value_type>&)\u2019\
    \n  405 |     _DEFINE_EXPR_BINARY_OPERATOR(+, __plus)\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /usr/include/c++/9/bits/valarray_after.h:405:5: note:   template argument deduction/substitution\
    \ failed:\nIn file included from /usr/include/c++/9/numeric:62,\n            \
    \     from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:84,\n           \
    \      from /tmp/tmpk3fa2mlx.cpp:2:\n/usr/include/c++/9/bits/stl_numeric.h:139:39:\
    \ note:   mismatched types \u2018const std::_Expr<_Dom1, typename _Dom1::value_type>\u2019\
    \ and \u2018int\u2019\n  139 |  __init = _GLIBCXX_MOVE_IF_20(__init) + *__first;\n\
    \      |                                       ^\nIn file included from /usr/include/c++/9/valarray:603,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n\
    \                 from /tmp/tmpk3fa2mlx.cpp:2:\n/usr/include/c++/9/bits/valarray_after.h:405:5:\
    \ note: candidate: \u2018template<class _Dom> std::_Expr<std::__detail::_BinClos<std::__plus,\
    \ std::_ValArray, std::_Expr, typename _Dom::value_type, _Dom>, typename std::__fun<std::__plus,\
    \ typename _Dom1::value_type>::result_type> std::operator+(const std::valarray<typename\
    \ _Dom::value_type>&, const std::_Expr<_Dom1, typename _Dom1::value_type>&)\u2019\
    \n  405 |     _DEFINE_EXPR_BINARY_OPERATOR(+, __plus)\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /usr/include/c++/9/bits/valarray_after.h:405:5: note:   template argument deduction/substitution\
    \ failed:\nIn file included from /usr/include/c++/9/numeric:62,\n            \
    \     from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:84,\n           \
    \      from /tmp/tmpk3fa2mlx.cpp:2:\n/usr/include/c++/9/bits/stl_numeric.h:139:39:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::_Expr<_Dom1,\
    \ typename _Dom1::value_type>\u2019\n  139 |  __init = _GLIBCXX_MOVE_IF_20(__init)\
    \ + *__first;\n      |                                       ^\nIn file included\
    \ from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n               \
    \  from /tmp/tmpk3fa2mlx.cpp:2:\n/usr/include/c++/9/valarray:1185:1: note: candidate:\
    \ \u2018template<class _Tp> std::_Expr<std::__detail::_BinClos<std::__plus, std::_ValArray,\
    \ std::_ValArray, _Tp, _Tp>, typename std::__fun<std::__plus, _Tp>::result_type>\
    \ std::operator+(const std::valarray<_Tp>&, const std::valarray<_Tp>&)\u2019\n\
    \ 1185 | _DEFINE_BINARY_OPERATOR(+, __plus)\n      | ^~~~~~~~~~~~~~~~~~~~~~~\n\
    /usr/include/c++/9/valarray:1185:1: note:   template argument deduction/substitution\
    \ failed:\nIn file included from /usr/include/c++/9/numeric:62,\n            \
    \     from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:84,\n           \
    \      from /tmp/tmpk3fa2mlx.cpp:2:\n/usr/include/c++/9/bits/stl_numeric.h:139:39:\
    \ note:   mismatched types \u2018const std::valarray<_Tp>\u2019 and \u2018int\u2019\
    \n  139 |  __init = _GLIBCXX_MOVE_IF_20(__init) + *__first;\n      |         \
    \                              ^\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n\
    \                 from /tmp/tmpk3fa2mlx.cpp:2:\n/usr/include/c++/9/valarray:1185:1:\
    \ note: candidate: \u2018template<class _Tp> std::_Expr<std::__detail::_BinClos<std::__plus,\
    \ std::_ValArray, std::_Constant, _Tp, _Tp>, typename std::__fun<std::__plus,\
    \ _Tp>::result_type> std::operator+(const std::valarray<_Tp>&, const typename\
    \ std::valarray<_Tp>::value_type&)\u2019\n 1185 | _DEFINE_BINARY_OPERATOR(+, __plus)\n\
    \      | ^~~~~~~~~~~~~~~~~~~~~~~\n/usr/include/c++/9/valarray:1185:1: note:  \
    \ template argument deduction/substitution failed:\nIn file included from /usr/include/c++/9/numeric:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:84,\n\
    \                 from /tmp/tmpk3fa2mlx.cpp:2:\n/usr/include/c++/9/bits/stl_numeric.h:139:39:\
    \ note:   mismatched types \u2018const std::valarray<_Tp>\u2019 and \u2018int\u2019\
    \n  139 |  __init = _GLIBCXX_MOVE_IF_20(__init) + *__first;\n      |         \
    \                              ^\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n\
    \                 from /tmp/tmpk3fa2mlx.cpp:2:\n/usr/include/c++/9/valarray:1185:1:\
    \ note: candidate: \u2018template<class _Tp> std::_Expr<std::__detail::_BinClos<std::__plus,\
    \ std::_Constant, std::_ValArray, _Tp, _Tp>, typename std::__fun<std::__plus,\
    \ _Tp>::result_type> std::operator+(const typename std::valarray<_Tp>::value_type&,\
    \ const std::valarray<_Tp>&)\u2019\n 1185 | _DEFINE_BINARY_OPERATOR(+, __plus)\n\
    \      | ^~~~~~~~~~~~~~~~~~~~~~~\n/usr/include/c++/9/valarray:1185:1: note:  \
    \ template argument deduction/substitution failed:\nIn file included from /usr/include/c++/9/numeric:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:84,\n\
    \                 from /tmp/tmpk3fa2mlx.cpp:2:\n/usr/include/c++/9/bits/stl_numeric.h:139:39:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::valarray<_Tp>\u2019\
    \n  139 |  __init = _GLIBCXX_MOVE_IF_20(__init) + *__first;\n      |         \
    \                              ^\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/char_traits.h:39,\n           \
    \      from /usr/include/c++/9/ios:40,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpk3fa2mlx.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:993:5: note:\
    \ candidate: \u2018template<class _Iterator, class _Container> __gnu_cxx::__normal_iterator<_Iterator,\
    \ _Container> __gnu_cxx::operator+(typename __gnu_cxx::__normal_iterator<_Iterator,\
    \ _Container>::difference_type, const __gnu_cxx::__normal_iterator<_Iterator,\
    \ _Container>&)\u2019\n  993 |     operator+(typename __normal_iterator<_Iterator,\
    \ _Container>::difference_type\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:993:5:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/9/numeric:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:84,\n\
    \                 from /tmp/tmpk3fa2mlx.cpp:2:\n/usr/include/c++/9/bits/stl_numeric.h:139:39:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const __gnu_cxx::__normal_iterator<_Iterator,\
    \ _Container>\u2019\n  139 |  __init = _GLIBCXX_MOVE_IF_20(__init) + *__first;\n\
    \      |                                       ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    // Write your code here\n    std::vector<std::tuple<long,\
    \ long>> res;\n    for(auto &row : lst){\n        for(auto &col : row){\n    \
    \        if(col == x){\n                res.push_back(std::make_tuple(row.size()\
    \ - 1, col.size() - 1));\n            }\n        }\n    }\n    std::sort(res.begin(),\
    \ res.end(), [](std::tuple<long, long> a, std::tuple<long, long> b){\n       \
    \ return std::get<0>(a) < std::get<0>(b);\n    });\n    std::sort(res.begin(),\
    \ res.end(), [](std::tuple<long, long> a, std::tuple<long, long> b){\n       \
    \ return std::get<1>(a) < std::get<1>(b);\n    });\n    return res;\n}\nint main()\
    \ {\n    auto candidate = get_row;\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8x9abvj_.cpp: In function \u2018std::vector<std::tuple<long int,\
    \ long int> > get_row(std::vector<std::vector<long int> >, long int)\u2019:\n\
    /tmp/tmp8x9abvj_.cpp:25:67: error: request for member \u2018size\u2019 in \u2018\
    col\u2019, which is of non-class type \u2018long int\u2019\n   25 |          \
    \       res.push_back(std::make_tuple(row.size() - 1, col.size() - 1));\n    \
    \  |                                                                   ^~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    std::vector<std::tuple<long, long>> res;\n    long n = lst.size();\n\
    \    long m = lst[0].size();\n    long i, j, k;\n    for (i = 0; i < n; i++) {\n\
    \        long row = i;\n        for (j = 0; j < m; j++) {\n            if (lst[i][j]\
    \ == x) {\n                res.push_back(std::make_tuple(row, j));\n         \
    \   }\n        }\n    }\n    std::sort(res.begin(), res.end(), [](std::tuple<long,\
    \ long> a, std::tuple<long, long> b) {\n        return std::get<0>(a) < std::get<0>(b);\n\
    \    });\n    for (i = 0; i < n; i++) {\n        std::sort(res[i].begin(), res[i].end(),\
    \ [](std::tuple<long, long> a, std::tuple<long, long> b) {\n            return\
    \ std::get<1>(a) < std::get<1>(b);\n        });\n    }\n    return res;\n}\nint\
    \ main() {\n    auto candidate = get_row;\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpx9yaaj5q.cpp: In function \u2018std::vector<std::tuple<long int,\
    \ long int> > get_row(std::vector<std::vector<long int> >, long int)\u2019:\n\
    /tmp/tmpx9yaaj5q.cpp:36:26: error: \u2018__gnu_cxx::__alloc_traits<std::allocator<std::tuple<long\
    \ int, long int> >, std::tuple<long int, long int> >::value_type\u2019 {aka \u2018\
    class std::tuple<long int, long int>\u2019} has no member named \u2018begin\u2019\
    \n   36 |         std::sort(res[i].begin(), res[i].end(), [](std::tuple<long,\
    \ long> a, std::tuple<long, long> b) {\n      |                          ^~~~~\n\
    /tmp/tmpx9yaaj5q.cpp:36:42: error: \u2018__gnu_cxx::__alloc_traits<std::allocator<std::tuple<long\
    \ int, long int> >, std::tuple<long int, long int> >::value_type\u2019 {aka \u2018\
    class std::tuple<long int, long int>\u2019} has no member named \u2018end\u2019\
    \n   36 |         std::sort(res[i].begin(), res[i].end(), [](std::tuple<long,\
    \ long> a, std::tuple<long, long> b) {\n      |                              \
    \            ^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    std::vector<std::tuple<long, long>> res;\n    std::vector<long>\
    \ row;\n    std::vector<long> col;\n    for (auto &i : lst) {\n        row.push_back(i[0]);\n\
    \        col.push_back(i.size() - 1);\n    }\n    std::sort(row.begin(), row.end());\n\
    \    std::sort(col.begin(), col.end());\n    for (long i = 0; i < row.size();\
    \ i++) {\n        for (long j = 0; j < col.size(); j++) {\n            if (row[i]\
    \ == x && col[j] == i) {\n                res.push_back(std::make_tuple(i, j));\n\
    \            }\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = get_row;\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "tmpzyuyds9n: /tmp/tmpzyuyds9n.cpp:40: int main(): Assertion `candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    std::vector<std::tuple<long, long>> res;\n    long row =\
    \ 0;\n    long col = 0;\n    long cnt = 0;\n    for (auto &row : lst) {\n    \
    \    cnt += row.size();\n    }\n    for (auto &row : lst) {\n        for (auto\
    \ &val : row) {\n            if (val == x) {\n                res.push_back(std::make_tuple(row,\
    \ col));\n            }\n        }\n        col += row.size();\n    }\n    std::sort(res.begin(),\
    \ res.end(), [](std::tuple<long, long> a, std::tuple<long, long> b) {\n      \
    \  return std::get<0>(a) < std::get<0>(b);\n    });\n    std::sort(res.begin(),\
    \ res.end(), [](std::tuple<long, long> a, std::tuple<long, long> b) {\n      \
    \  return std::get<1>(a) > std::get<1>(b);\n    });\n    return res;\n}\nint main()\
    \ {\n    auto candidate = get_row;\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpbpt28l2h.cpp: In function \u2018std::vector<std::tuple<long int,\
    \ long int> > get_row(std::vector<std::vector<long int> >, long int)\u2019:\n\
    /tmp/tmpbpt28l2h.cpp:30:56: error: no matching function for call to \u2018std::vector<std::tuple<long\
    \ int, long int> >::push_back(std::tuple<std::vector<long int, std::allocator<long\
    \ int> >, long int>)\u2019\n   30 |                 res.push_back(std::make_tuple(row,\
    \ col));\n      |                                                        ^\nIn\
    \ file included from /usr/include/c++/9/vector:67,\n                 from /usr/include/c++/9/queue:61,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:86,\n\
    \                 from /tmp/tmpbpt28l2h.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::tuple<long int, long int>; _Alloc = std::allocator<std::tuple<long\
    \ int, long int> >; std::vector<_Tp, _Alloc>::value_type = std::tuple<long int,\
    \ long int>]\u2019\n 1184 |       push_back(const value_type& __x)\n      |  \
    \     ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1184:35: note:   no known\
    \ conversion for argument 1 from \u2018std::tuple<std::vector<long int, std::allocator<long\
    \ int> >, long int>\u2019 to \u2018const value_type&\u2019 {aka \u2018const std::tuple<long\
    \ int, long int>&\u2019}\n 1184 |       push_back(const value_type& __x)\n   \
    \   |                 ~~~~~~~~~~~~~~~~~~^~~\n/usr/include/c++/9/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = std::tuple<long int, long int>; _Alloc =\
    \ std::allocator<std::tuple<long int, long int> >; std::vector<_Tp, _Alloc>::value_type\
    \ = std::tuple<long int, long int>]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018std::tuple<std::vector<long\
    \ int, std::allocator<long int> >, long int>\u2019 to \u2018std::vector<std::tuple<long\
    \ int, long int> >::value_type&&\u2019 {aka \u2018std::tuple<long int, long int>&&\u2019\
    }\n 1200 |       push_back(value_type&& __x)\n      |                 ~~~~~~~~~~~~~^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    std::vector<std::tuple<long, long>> res;\n    for(auto &row\
    \ : lst) {\n        for(auto &col : row) {\n            if(col == x) {\n     \
    \           res.emplace_back(std::make_tuple(row.size() - 1, col.size() - 1));\n\
    \            }\n        }\n    }\n    std::sort(res.begin(), res.end(), [](const\
    \ std::tuple<long, long> &a, const std::tuple<long, long> &b) { return std::get<0>(a)\
    \ < std::get<0>(b); });\n    std::sort(res.begin(), res.end(), [](const std::tuple<long,\
    \ long> &a, const std::tuple<long, long> &b) { return std::get<1>(a) < std::get<1>(b);\
    \ });\n    return res;\n}\nint main() {\n    auto candidate = get_row;\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpbzwbpncw.cpp: In function \u2018std::vector<std::tuple<long int,\
    \ long int> > get_row(std::vector<std::vector<long int> >, long int)\u2019:\n\
    /tmp/tmpbzwbpncw.cpp:24:70: error: request for member \u2018size\u2019 in \u2018\
    col\u2019, which is of non-class type \u2018long int\u2019\n   24 |          \
    \       res.emplace_back(std::make_tuple(row.size() - 1, col.size() - 1));\n \
    \     |                                                                      ^~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    std::vector<std::tuple<long, long>> res;\n    std::vector<long>\
    \ row;\n    std::vector<long> col;\n    long row_index = 0;\n    long col_index\
    \ = 0;\n    for (auto &row : lst) {\n        row.clear();\n        col.clear();\n\
    \        for (auto &col : row) {\n            if (col == x) {\n              \
    \  res.emplace_back(row_index, col_index);\n                col.clear();\n   \
    \             row_index++;\n                col_index = 0;\n            } else\
    \ {\n                col.push_back(col);\n                col_index++;\n     \
    \       }\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = get_row;\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpb4s0sp8t.cpp: In function \u2018std::vector<std::tuple<long int,\
    \ long int> > get_row(std::vector<std::vector<long int> >, long int)\u2019:\n\
    /tmp/tmpb4s0sp8t.cpp:31:21: error: request for member \u2018clear\u2019 in \u2018\
    col\u2019, which is of non-class type \u2018long int\u2019\n   31 |          \
    \       col.clear();\n      |                     ^~~~~\n/tmp/tmpb4s0sp8t.cpp:35:21:\
    \ error: request for member \u2018push_back\u2019 in \u2018col\u2019, which is\
    \ of non-class type \u2018long int\u2019\n   35 |                 col.push_back(col);\n\
    \      |                     ^~~~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    std::vector<std::tuple<long, long>> res;\n    for(auto &row\
    \ : lst) {\n        for(auto &elem : row) {\n            if(elem == x) {\n   \
    \             res.push_back({row.size(), row.size() - 1});\n            }\n  \
    \      }\n    }\n    std::sort(res.begin(), res.end(), [](const std::tuple<long,\
    \ long> &a, const std::tuple<long, long> &b) -> bool {\n        return std::get<0>(a)\
    \ < std::get<0>(b);\n    });\n    std::sort(res.begin(), res.end(), [](const std::tuple<long,\
    \ long> &a, const std::tuple<long, long> &b) -> bool {\n        return std::get<1>(a)\
    \ < std::get<1>(b);\n    });\n    return res;\n}\nint main() {\n    auto candidate\
    \ = get_row;\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "tmposk73x8n: /tmp/tmposk73x8n.cpp:38: int main(): Assertion `candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    std::vector<std::tuple<long, long>> res;\n    long n = lst.size();\n\
    \    long m = lst[0].size();\n    long i, j, k;\n    for (i = 0; i < n; i++) {\n\
    \        for (j = 0; j < m; j++) {\n            if (lst[i][j] == x) {\n      \
    \          res.push_back({i, j});\n            }\n        }\n    }\n    std::sort(res.begin(),\
    \ res.end(), [](auto a, auto b) {\n        return std::get<0>(a) < std::get<0>(b);\n\
    \    });\n    for (i = 0; i < n; i++) {\n        std::sort(res[i].begin(), res[i].end(),\
    \ [](auto a, auto b) {\n            return std::get<1>(a) < std::get<1>(b);\n\
    \        });\n    }\n    return res;\n}\nint main() {\n    auto candidate = get_row;\n\
    \    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8wbb3oq7.cpp: In function \u2018std::vector<std::tuple<long int,\
    \ long int> > get_row(std::vector<std::vector<long int> >, long int)\u2019:\n\
    /tmp/tmp8wbb3oq7.cpp:35:26: error: \u2018__gnu_cxx::__alloc_traits<std::allocator<std::tuple<long\
    \ int, long int> >, std::tuple<long int, long int> >::value_type\u2019 {aka \u2018\
    class std::tuple<long int, long int>\u2019} has no member named \u2018begin\u2019\
    \n   35 |         std::sort(res[i].begin(), res[i].end(), [](auto a, auto b) {\n\
    \      |                          ^~~~~\n/tmp/tmp8wbb3oq7.cpp:35:42: error: \u2018\
    __gnu_cxx::__alloc_traits<std::allocator<std::tuple<long int, long int> >, std::tuple<long\
    \ int, long int> >::value_type\u2019 {aka \u2018class std::tuple<long int, long\
    \ int>\u2019} has no member named \u2018end\u2019\n   35 |         std::sort(res[i].begin(),\
    \ res[i].end(), [](auto a, auto b) {\n      |                                \
    \          ^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    std::vector<std::tuple<long, long>> res;\n    long row =\
    \ 0;\n    long col = 0;\n    long cnt = 0;\n    for(auto &v : lst) {\n       \
    \ cnt += v.size();\n    }\n    for(auto &v : lst) {\n        for(auto &i : v)\
    \ {\n            if(i == x) {\n                res.push_back(std::make_tuple(row,\
    \ col));\n            }\n        }\n        col += v.size();\n    }\n    for(auto\
    \ &v : lst) {\n        for(auto &i : v) {\n            if(i == x) {\n        \
    \        res.push_back(std::make_tuple(row, col));\n            }\n        }\n\
    \        col -= v.size();\n    }\n    std::sort(res.begin(), res.end(), [](std::tuple<long,\
    \ long> a, std::tuple<long, long> b) {\n        return std::get<0>(a) < std::get<0>(b);\n\
    \    });\n    std::sort(res.begin(), res.end(), [](std::tuple<long, long> a, std::tuple<long,\
    \ long> b) {\n        return std::get<1>(a) > std::get<1>(b);\n    });\n    return\
    \ res;\n}\nint main() {\n    auto candidate = get_row;\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "tmpsd20putz: /tmp/tmpsd20putz.cpp:53: int main(): Assertion `candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    std::vector<std::tuple<long, long>> res;\n    std::vector<long>\
    \ row;\n    std::vector<long> col;\n    std::vector<long> temp;\n    long cnt\
    \ = 0;\n    for (auto &row : lst) {\n        row.clear();\n        temp.clear();\n\
    \        for (auto &col : row) {\n            temp.push_back(col);\n        }\n\
    \        temp.push_back(x);\n        col.push_back(cnt);\n        row.push_back(std::move(temp));\n\
    \        cnt++;\n    }\n    for (auto &row : lst) {\n        std::sort(row.begin(),\
    \ row.end());\n        std::sort(row.begin(), row.end(), [](long a, long b) {\
    \ return b < a; });\n        std::sort(row.begin(), row.end(), [](long a, long\
    \ b) { return b > a; });\n        std::sort(row.begin(), row.end(), [](long a,\
    \ long b) { return b < a; });\n        std::sort(row.begin(), row.end(), [](long\
    \ a, long b) { return b > a; });\n    }\n    for (auto &row : lst) {\n       \
    \ std::sort(row.begin(), row.end());\n        std::sort(row.begin(), row.end(),\
    \ [](long a, long b) { return b < a; });\n        std::sort(row.begin(), row.end(),\
    \ [](long a, long b) { return b > a; });\n        std::sort(row.begin(), row.end(),\
    \ [](long a, long b) { return b < a; });\n        std::sort(row.begin(), row.end(),\
    \ [](long a, long b) { return b > a; });\n    }\n    for (auto &row : lst) {\n\
    \        std::sort(row.begin(), row.end());\n        std::sort(row.begin(), row.end(),\
    \ [](long a, long b) { return b < a; });\n        std::sort(row.begin(), row.end(),\
    \ [](long a, long b) { return b > a; });\n        std::sort(row.begin(), row.end(),\
    \ [](long a, long b) { return b < a; });\n        std::sort(row.begin(), row.end(),\
    \ [](long a, long b) { return b > a; });\n    }\n    for (auto &row : lst) {\n\
    \        std::sort(row.begin(), row.end());\n        std::sort(row.begin(), row.end(),\
    \ [](long a, long b) { return b < a; });\n        std::sort(row.begin(), row.end(),\
    \ [](long a, long b) { return b > a; });\n        std::sort(row.begin(), row.end(),\
    \ [](long a, long b) { return b < a; });\n        std::sort(row.begin(), row.end(),\
    \ [](long a, long b) { return b > a; });\n    }\n    for (auto &row : lst) {\n\
    \        std::\n}\nint main() {\n    auto candidate = get_row;\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2ejxnhiv.cpp: In function \u2018std::vector<std::tuple<long int,\
    \ long int> > get_row(std::vector<std::vector<long int> >, long int)\u2019:\n\
    /tmp/tmp2ejxnhiv.cpp:33:38: error: no matching function for call to \u2018std::vector<long\
    \ int>::push_back(std::remove_reference<std::vector<long int>&>::type)\u2019\n\
    \   33 |         row.push_back(std::move(temp));\n      |                    \
    \                  ^\nIn file included from /usr/include/c++/9/vector:67,\n  \
    \               from /usr/include/c++/9/queue:61,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:86,\n\
    \                 from /tmp/tmp2ejxnhiv.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = long int; _Alloc = std::allocator<long int>; std::vector<_Tp, _Alloc>::value_type\
    \ = long int]\u2019\n 1184 |       push_back(const value_type& __x)\n      | \
    \      ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1184:35: note:   no known\
    \ conversion for argument 1 from \u2018std::remove_reference<std::vector<long\
    \ int>&>::type\u2019 {aka \u2018std::vector<long int>\u2019} to \u2018const value_type&\u2019\
    \ {aka \u2018const long int&\u2019}\n 1184 |       push_back(const value_type&\
    \ __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n/usr/include/c++/9/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = long int; _Alloc = std::allocator<long int>;\
    \ std::vector<_Tp, _Alloc>::value_type = long int]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018std::remove_reference<std::vector<long\
    \ int>&>::type\u2019 {aka \u2018std::vector<long int>\u2019} to \u2018std::vector<long\
    \ int>::value_type&&\u2019 {aka \u2018long int&&\u2019}\n 1200 |       push_back(value_type&&\
    \ __x)\n      |                 ~~~~~~~~~~~~~^~~\n/tmp/tmp2ejxnhiv.cpp:66:1: error:\
    \ expected unqualified-id before \u2018}\u2019 token\n   66 | }\n      | ^\n/tmp/tmp2ejxnhiv.cpp:67:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   67 | int main() {\n      |            ^\n/tmp/tmp2ejxnhiv.cpp:75:1: error:\
    \ expected \u2018}\u2019 at end of input\n   75 | }\n      | ^\n/tmp/tmp2ejxnhiv.cpp:19:89:\
    \ note: to match this \u2018{\u2019\n   19 | std::vector<std::tuple<long, long>>\
    \ get_row(std::vector<std::vector<long>> lst, long x) {\n      |             \
    \                                                                            ^\n\
    /tmp/tmp2ejxnhiv.cpp:75:1: warning: no return statement in function returning\
    \ non-void [-Wreturn-type]\n   75 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    std::vector<std::tuple<long, long>> res;\n    for(auto &row\
    \ : lst) {\n        for(auto &val : row) {\n            if(val == x) {\n     \
    \           res.emplace_back(row.size() - 1, row.size() - 1);\n            }\n\
    \        }\n    }\n    std::sort(res.begin(), res.end(), [](const std::tuple<long,\
    \ long> &a, const std::tuple<long, long> &b) -> bool {\n        return std::get<0>(a)\
    \ < std::get<0>(b);\n    });\n    std::sort(res.begin(), res.end(), [](const std::tuple<long,\
    \ long> &a, const std::tuple<long, long> &b) -> bool {\n        return std::get<1>(a)\
    \ < std::get<1>(b);\n    });\n    return res;\n}\nint main() {\n    auto candidate\
    \ = get_row;\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "tmpyxux6_8s: /tmp/tmpyxux6_8s.cpp:38: int main(): Assertion `candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    std::vector<std::tuple<long, long>> res;\n    std::vector<long>\
    \ row;\n    std::vector<long> col;\n    long row_index = 0;\n    long col_index\
    \ = 0;\n    for (auto &row : lst) {\n        row.clear();\n        col.clear();\n\
    \        for (auto &col : row) {\n            if (col == x) {\n              \
    \  res.emplace_back(row_index, col_index);\n                row_index++;\n   \
    \             col_index++;\n            }\n            col.push_back(0);\n   \
    \     }\n    }\n    std::sort(res.begin(), res.end(), [](const std::tuple<long,\
    \ long> &a, const std::tuple<long, long> &b) {\n        return std::get<0>(a)\
    \ < std::get<0>(b);\n    });\n    std::sort(res.begin(), res.end(), [](const std::tuple<long,\
    \ long> &a, const std::tuple<long, long> &b) {\n        return std::get<1>(a)\
    \ > std::get<1>(b);\n    });\n    return res;\n}\nint main() {\n    auto candidate\
    \ = get_row;\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpk1x285xg.cpp: In function \u2018std::vector<std::tuple<long int,\
    \ long int> > get_row(std::vector<std::vector<long int> >, long int)\u2019:\n\
    /tmp/tmpk1x285xg.cpp:34:17: error: request for member \u2018push_back\u2019 in\
    \ \u2018col\u2019, which is of non-class type \u2018long int\u2019\n   34 |  \
    \           col.push_back(0);\n      |                 ^~~~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    std::vector<std::tuple<long, long>> res;\n    std::vector<long>\
    \ row;\n    std::vector<long> col;\n    for (auto &i : lst) {\n        row.push_back(i.size());\n\
    \        col.push_back(0);\n    }\n    std::sort(row.begin(), row.end(), [](long\
    \ a, long b) { return a < b; });\n    std::sort(col.begin(), col.end(), [](long\
    \ a, long b) { return b < a; });\n    for (long i = 0; i < row.size(); i++) {\n\
    \        for (long j = 0; j < col[i]; j++) {\n            if (row[i] == x && col[j]\
    \ == x) {\n                res.push_back(std::make_tuple(i, j));\n           \
    \ }\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate =\
    \ get_row;\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "tmpi2533u4d: /tmp/tmpi2533u4d.cpp:40: int main(): Assertion `candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    std::vector<std::tuple<long, long>> res;\n    if (lst.size()\
    \ == 0) {\n        return res;\n    }\n    std::vector<std::tuple<long, long>>\
    \ row;\n    for (auto &i : lst) {\n        row.push_back(i);\n    }\n    std::sort(row.begin(),\
    \ row.end(), [](auto &a, auto &b) { return std::get<0>(a) < std::get<0>(b); });\n\
    \    std::sort(row.begin(), row.end(), [](auto &a, auto &b) { return std::get<1>(a)\
    \ > std::get<1>(b); });\n    for (auto &i : row) {\n        if (std::get<0>(i)\
    \ == x) {\n            std::get<1>(i)++;\n            res.push_back(i);\n    \
    \    }\n    }\n    return res;\n}\nint main() {\n    auto candidate = get_row;\n\
    \    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0is15y5a.cpp: In function \u2018std::vector<std::tuple<long int,\
    \ long int> > get_row(std::vector<std::vector<long int> >, long int)\u2019:\n\
    /tmp/tmp0is15y5a.cpp:26:24: error: no matching function for call to \u2018std::vector<std::tuple<long\
    \ int, long int> >::push_back(std::vector<long int>&)\u2019\n   26 |         row.push_back(i);\n\
    \      |                        ^\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/queue:61,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:86,\n\
    \                 from /tmp/tmp0is15y5a.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::tuple<long int, long int>; _Alloc = std::allocator<std::tuple<long\
    \ int, long int> >; std::vector<_Tp, _Alloc>::value_type = std::tuple<long int,\
    \ long int>]\u2019\n 1184 |       push_back(const value_type& __x)\n      |  \
    \     ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1184:35: note:   no known\
    \ conversion for argument 1 from \u2018std::vector<long int>\u2019 to \u2018const\
    \ value_type&\u2019 {aka \u2018const std::tuple<long int, long int>&\u2019}\n\
    \ 1184 |       push_back(const value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n\
    /usr/include/c++/9/bits/stl_vector.h:1200:7: note: candidate: \u2018void std::vector<_Tp,\
    \ _Alloc>::push_back(std::vector<_Tp, _Alloc>::value_type&&) [with _Tp = std::tuple<long\
    \ int, long int>; _Alloc = std::allocator<std::tuple<long int, long int> >; std::vector<_Tp,\
    \ _Alloc>::value_type = std::tuple<long int, long int>]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018std::vector<long int>\u2019\
    \ to \u2018std::vector<std::tuple<long int, long int> >::value_type&&\u2019 {aka\
    \ \u2018std::tuple<long int, long int>&&\u2019}\n 1200 |       push_back(value_type&&\
    \ __x)\n      |                 ~~~~~~~~~~~~~^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    std::vector<std::tuple<long, long>> res;\n    if (lst.size()\
    \ == 0) {\n        return res;\n    }\n    std::vector<std::tuple<long, long>>\
    \ row;\n    std::vector<std::tuple<long, long>> temp;\n    for (auto &i : lst)\
    \ {\n        row.clear();\n        temp.clear();\n        for (auto &j : i) {\n\
    \            if (j == x) {\n                row.push_back(std::make_tuple(i, 0));\n\
    \                temp.push_back(std::make_tuple(i, 0));\n            } else {\n\
    \                row.push_back(std::make_tuple(i, j));\n                temp.push_back(std::make_tuple(i,\
    \ j));\n            }\n        }\n        std::sort(row.begin(), row.end());\n\
    \        std::sort(temp.begin(), temp.end());\n        res.push_back(std::make_tuple(std::get<0>(row),\
    \ std::get<1>(row)));\n        res.push_back(std::make_tuple(std::get<0>(temp),\
    \ std::get<1>(temp)));\n    }\n    std::sort(res.begin(), res.end());\n    return\
    \ res;\n}\nint main() {\n    auto candidate = get_row;\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4nzntvxj.cpp: In function \u2018std::vector<std::tuple<long int,\
    \ long int> > get_row(std::vector<std::vector<long int> >, long int)\u2019:\n\
    /tmp/tmp4nzntvxj.cpp:31:52: error: no matching function for call to \u2018std::vector<std::tuple<long\
    \ int, long int> >::push_back(std::tuple<std::vector<long int, std::allocator<long\
    \ int> >, int>)\u2019\n   31 |                 row.push_back(std::make_tuple(i,\
    \ 0));\n      |                                                    ^\nIn file\
    \ included from /usr/include/c++/9/vector:67,\n                 from /usr/include/c++/9/queue:61,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:86,\n\
    \                 from /tmp/tmp4nzntvxj.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::tuple<long int, long int>; _Alloc = std::allocator<std::tuple<long\
    \ int, long int> >; std::vector<_Tp, _Alloc>::value_type = std::tuple<long int,\
    \ long int>]\u2019\n 1184 |       push_back(const value_type& __x)\n      |  \
    \     ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1184:35: note:   no known\
    \ conversion for argument 1 from \u2018std::tuple<std::vector<long int, std::allocator<long\
    \ int> >, int>\u2019 to \u2018const value_type&\u2019 {aka \u2018const std::tuple<long\
    \ int, long int>&\u2019}\n 1184 |       push_back(const value_type& __x)\n   \
    \   |                 ~~~~~~~~~~~~~~~~~~^~~\n/usr/include/c++/9/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = std::tuple<long int, long int>; _Alloc =\
    \ std::allocator<std::tuple<long int, long int> >; std::vector<_Tp, _Alloc>::value_type\
    \ = std::tuple<long int, long int>]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018std::tuple<std::vector<long\
    \ int, std::allocator<long int> >, int>\u2019 to \u2018std::vector<std::tuple<long\
    \ int, long int> >::value_type&&\u2019 {aka \u2018std::tuple<long int, long int>&&\u2019\
    }\n 1200 |       push_back(value_type&& __x)\n      |                 ~~~~~~~~~~~~~^~~\n\
    /tmp/tmp4nzntvxj.cpp:32:53: error: no matching function for call to \u2018std::vector<std::tuple<long\
    \ int, long int> >::push_back(std::tuple<std::vector<long int, std::allocator<long\
    \ int> >, int>)\u2019\n   32 |                 temp.push_back(std::make_tuple(i,\
    \ 0));\n      |                                                     ^\nIn file\
    \ included from /usr/include/c++/9/vector:67,\n                 from /usr/include/c++/9/queue:61,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:86,\n\
    \                 from /tmp/tmp4nzntvxj.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::tuple<long int, long int>; _Alloc = std::allocator<std::tuple<long\
    \ int, long int> >; std::vector<_Tp, _Alloc>::value_type = std::tuple<long int,\
    \ long int>]\u2019\n 1184 |       push_back(const value_type& __x)\n      |  \
    \     ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1184:35: note:   no known\
    \ conversion for argument 1 from \u2018std::tuple<std::vector<long int, std::allocator<long\
    \ int> >, int>\u2019 to \u2018const value_type&\u2019 {aka \u2018const std::tuple<long\
    \ int, long int>&\u2019}\n 1184 |       push_back(const value_type& __x)\n   \
    \   |                 ~~~~~~~~~~~~~~~~~~^~~\n/usr/include/c++/9/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = std::tuple<long int, long int>; _Alloc =\
    \ std::allocator<std::tuple<long int, long int> >; std::vector<_Tp, _Alloc>::value_type\
    \ = std::tuple<long int, long int>]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018std::tuple<std::vector<long\
    \ int, std::allocator<long int> >, int>\u2019 to \u2018std::vector<std::tuple<long\
    \ int, long int> >::value_type&&\u2019 {aka \u2018std::tuple<long int, long int>&&\u2019\
    }\n 1200 |       push_back(value_type&& __x)\n      |                 ~~~~~~~~~~~~~^~~\n\
    /tmp/tmp4nzntvxj.cpp:34:52: error: no matching function for call to \u2018std::vector<std::tuple<long\
    \ int, long int> >::push_back(std::tuple<std::vector<long int, std::allocator<long\
    \ int> >, long int>)\u2019\n   34 |                 row.push_back(std::make_tuple(i,\
    \ j));\n      |                                                    ^\nIn file\
    \ included from /usr/include/c++/9/vector:67,\n                 from /usr/include/c++/9/queue:61,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:86,\n\
    \                 from /tmp/tmp4nzntvxj.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::tuple<long int, long int>; _Alloc = std::allocator<std::tuple<long\
    \ int, long int> >; std::vector<_Tp, _Alloc>::value_type = std::tuple<long int,\
    \ long int>]\u2019\n 1184 |       push_back(const value_type& __x)\n      |  \
    \     ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1184:35: note:   no known\
    \ conversion for argument 1 from \u2018std::tuple<std::vector<long int, std::allocator<long\
    \ int> >, long int>\u2019 to \u2018const value_type&\u2019 {aka \u2018const std::tuple<long\
    \ int, long int>&\u2019}\n 1184 |       push_back(const value_type& __x)\n   \
    \   |                 ~~~~~~~~~~~~~~~~~~^~~\n/usr/include/c++/9/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = std::tuple<long int, long int>; _Alloc =\
    \ std::allocator<std::tuple<long int, long int> >; std::vector<_Tp, _Alloc>::value_type\
    \ = std::tuple<long int, long int>]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018std::tuple<std::vector<long\
    \ int, std::allocator<long int> >, long int>\u2019 to \u2018std::vector<std::tuple<long\
    \ int, long int> >::value_type&&\u2019 {aka \u2018std::tuple<long int, long int>&&\u2019\
    }\n 1200 |       push_back(value_type&& __x)\n      |                 ~~~~~~~~~~~~~^~~\n\
    /tmp/tmp4nzntvxj.cpp:35:53: error: no matching function for call to \u2018std::vector<std::tuple<long\
    \ int, long int> >::push_back(std::tuple<std::vector<long int, std::allocator<long\
    \ int> >, long int>)\u2019\n   35 |                 temp.push_back(std::make_tuple(i,\
    \ j));\n      |                                                     ^\nIn file\
    \ included from /usr/include/c++/9/vector:67,\n                 from /usr/include/c++/9/queue:61,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:86,\n\
    \                 from /tmp/tmp4nzntvxj.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::tuple<long int, long int>; _Alloc = std::allocator<std::tuple<long\
    \ int, long int> >; std::vector<_Tp, _Alloc>::value_type = std::tuple<long int,\
    \ long int>]\u2019\n 1184 |       push_back(const value_type& __x)\n      |  \
    \     ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1184:35: note:   no known\
    \ conversion for argument 1 from \u2018std::tuple<std::vector<long int, std::allocator<long\
    \ int> >, long int>\u2019 to \u2018const value_type&\u2019 {aka \u2018const std::tuple<long\
    \ int, long int>&\u2019}\n 1184 |       push_back(const value_type& __x)\n   \
    \   |                 ~~~~~~~~~~~~~~~~~~^~~\n/usr/include/c++/9/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = std::tuple<long int, long int>; _Alloc =\
    \ std::allocator<std::tuple<long int, long int> >; std::vector<_Tp, _Alloc>::value_type\
    \ = std::tuple<long int, long int>]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018std::tuple<std::vector<long\
    \ int, std::allocator<long int> >, long int>\u2019 to \u2018std::vector<std::tuple<long\
    \ int, long int> >::value_type&&\u2019 {aka \u2018std::tuple<long int, long int>&&\u2019\
    }\n 1200 |       push_back(value_type&& __x)\n      |                 ~~~~~~~~~~~~~^~~\n\
    /tmp/tmp4nzntvxj.cpp:40:54: error: no matching function for call to \u2018get<0>(std::vector<std::tuple<long\
    \ int, long int> >&)\u2019\n   40 |         res.push_back(std::make_tuple(std::get<0>(row),\
    \ std::get<1>(row)));\n      |                                               \
    \       ^\nIn file included from /usr/include/c++/9/algorithm:60,\n          \
    \       from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n         \
    \        from /tmp/tmp4nzntvxj.cpp:2:\n/usr/include/c++/9/utility:219:5: note:\
    \ candidate: \u2018template<long unsigned int _Int, class _Tp1, class _Tp2> constexpr\
    \ typename std::tuple_element<_Int, std::pair<_Tp1, _Tp2> >::type& std::get(std::pair<_Tp1,\
    \ _Tp2>&)\u2019\n  219 |     get(std::pair<_Tp1, _Tp2>& __in) noexcept\n     \
    \ |     ^~~\n/usr/include/c++/9/utility:219:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp4nzntvxj.cpp:40:54: note:   \u2018std::vector<std::tuple<long\
    \ int, long int> >\u2019 is not derived from \u2018std::pair<_Tp1, _Tp2>\u2019\
    \n   40 |         res.push_back(std::make_tuple(std::get<0>(row), std::get<1>(row)));\n\
    \      |                                                      ^\nIn file included\
    \ from /usr/include/c++/9/algorithm:60,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp4nzntvxj.cpp:2:\n/usr/include/c++/9/utility:224:5:\
    \ note: candidate: \u2018template<long unsigned int _Int, class _Tp1, class _Tp2>\
    \ constexpr typename std::tuple_element<_Int, std::pair<_Tp1, _Tp2> >::type&&\
    \ std::get(std::pair<_Tp1, _Tp2>&&)\u2019\n  224 |     get(std::pair<_Tp1, _Tp2>&&\
    \ __in) noexcept\n      |     ^~~\n/usr/include/c++/9/utility:224:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmp4nzntvxj.cpp:40:54: note: \
    \  \u2018std::vector<std::tuple<long int, long int> >\u2019 is not derived from\
    \ \u2018std::pair<_Tp1, _Tp2>\u2019\n   40 |         res.push_back(std::make_tuple(std::get<0>(row),\
    \ std::get<1>(row)));\n      |                                               \
    \       ^\nIn file included from /usr/include/c++/9/algorithm:60,\n          \
    \       from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n         \
    \        from /tmp/tmp4nzntvxj.cpp:2:\n/usr/include/c++/9/utility:229:5: note:\
    \ candidate: \u2018template<long unsigned int _Int, class _Tp1, class _Tp2> constexpr\
    \ const typename std::tuple_element<_Int, std::pair<_Tp1, _Tp2> >::type& std::get(const\
    \ std::pair<_Tp1, _Tp2>&)\u2019\n  229 |     get(const std::pair<_Tp1, _Tp2>&\
    \ __in) noexcept\n      |     ^~~\n/usr/include/c++/9/utility:229:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmp4nzntvxj.cpp:40:54: note: \
    \  \u2018std::vector<std::tuple<long int, long int> >\u2019 is not derived from\
    \ \u2018const std::pair<_Tp1, _Tp2>\u2019\n   40 |         res.push_back(std::make_tuple(std::get<0>(row),\
    \ std::get<1>(row)));\n      |                                               \
    \       ^\nIn file included from /usr/include/c++/9/algorithm:60,\n          \
    \       from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n         \
    \        from /tmp/tmp4nzntvxj.cpp:2:\n/usr/include/c++/9/utility:234:5: note:\
    \ candidate: \u2018template<long unsigned int _Int, class _Tp1, class _Tp2> constexpr\
    \ const typename std::tuple_element<_Int, std::pair<_Tp1, _Tp2> >::type&& std::get(const\
    \ std::pair<_Tp1, _Tp2>&&)\u2019\n  234 |     get(const std::pair<_Tp1, _Tp2>&&\
    \ __in) noexcept\n      |     ^~~\n/usr/include/c++/9/utility:234:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmp4nzntvxj.cpp:40:54: note: \
    \  \u2018std::vector<std::tuple<long int, long int> >\u2019 is not derived from\
    \ \u2018const std::pair<_Tp1, _Tp2>\u2019\n   40 |         res.push_back(std::make_tuple(std::get<0>(row),\
    \ std::get<1>(row)));\n      |                                               \
    \       ^\nIn file included from /usr/include/c++/9/algorithm:60,\n          \
    \       from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n         \
    \        from /tmp/tmp4nzntvxj.cpp:2:\n/usr/include/c++/9/utility:243:5: note:\
    \ candidate: \u2018template<class _Tp, class _Up> constexpr _Tp& std::get(std::pair<_T1,\
    \ _T2>&)\u2019\n  243 |     get(pair<_Tp, _Up>& __p) noexcept\n      |     ^~~\n\
    /usr/include/c++/9/utility:243:5: note:   template argument deduction/substitution\
    \ failed:\n/usr/include/c++/9/utility:248:5: note: candidate: \u2018template<class\
    \ _Tp, class _Up> constexpr const _Tp& std::get(const std::pair<_T1, _T2>&)\u2019\
    \n  248 |     get(const pair<_Tp, _Up>& __p) noexcept\n      |     ^~~\n/usr/include/c++/9/utility:248:5:\
    \ note:   template argument deduction/substitution failed:\n/usr/include/c++/9/utility:253:5:\
    \ note: candidate: \u2018template<class _Tp, class _Up> constexpr _Tp&& std::get(std::pair<_T1,\
    \ _T2>&&)\u2019\n  253 |     get(pair<_Tp, _Up>&& __p) noexcept\n      |     ^~~\n\
    /usr/include/c++/9/utility:253:5: note:   template argument deduction/substitution\
    \ failed:\n/usr/include/c++/9/utility:258:5: note: candidate: \u2018template<class\
    \ _Tp, class _Up> constexpr const _Tp&& std::get(const std::pair<_T1, _T2>&&)\u2019\
    \n  258 |     get(const pair<_Tp, _Up>&& __p) noexcept\n      |     ^~~\n/usr/include/c++/9/utility:258:5:\
    \ note:   template argument deduction/substitution failed:\n/usr/include/c++/9/utility:263:5:\
    \ note: candidate: \u2018template<class _Tp, class _Up> constexpr _Tp& std::get(std::pair<_Up,\
    \ _Tp>&)\u2019\n  263 |     get(pair<_Up, _Tp>& __p) noexcept\n      |     ^~~\n\
    /usr/include/c++/9/utility:263:5: note:   template argument deduction/substitution\
    \ failed:\n/usr/include/c++/9/utility:268:5: note: candidate: \u2018template<class\
    \ _Tp, class _Up> constexpr const _Tp& std::get(const std::pair<_Up, _Tp>&)\u2019\
    \n  268 |     get(const pair<_Up, _Tp>& __p) noexcept\n      |     ^~~\n/usr/include/c++/9/utility:268:5:\
    \ note:   template argument deduction/substitution failed:\n/usr/include/c++/9/utility:273:5:\
    \ note: candidate: \u2018template<class _Tp, class _Up> constexpr _Tp&& std::get(std::pair<_Up,\
    \ _Tp>&&)\u2019\n  273 |     get(pair<_Up, _Tp>&& __p) noexcept\n      |     ^~~\n\
    /usr/include/c++/9/utility:273:5: note:   template argument deduction/substitution\
    \ failed:\n/usr/include/c++/9/utility:278:5: note: candidate: \u2018template<class\
    \ _Tp, class _Up> constexpr const _Tp&& std::get(const std::pair<_Up, _Tp>&&)\u2019\
    \n  278 |     get(const pair<_Up, _Tp>&& __p) noexcept\n      |     ^~~\n/usr/include/c++/9/utility:278:5:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/9/tuple:39,\n                 from /usr/include/c++/9/functional:54,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmp4nzntvxj.cpp:2:\n/usr/include/c++/9/array:307:5:\
    \ note: candidate: \u2018template<long unsigned int _Int, class _Tp, long unsigned\
    \ int _Nm> constexpr _Tp& std::get(std::array<_Tp, _Nm>&)\u2019\n  307 |     get(array<_Tp,\
    \ _Nm>& __arr) noexcept\n      |     ^~~\n/usr/include/c++/9/array:307:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmp4nzntvxj.cpp:40:54:\
    \ note:   \u2018std::vector<std::tuple<long int, long int> >\u2019 is not derived\
    \ from \u2018std::array<_Tp, _Nm>\u2019\n   40 |         res.push_back(std::make_tuple(std::get<0>(row),\
    \ std::get<1>(row)));\n      |                                               \
    \       ^\nIn file included from /usr/include/c++/9/tuple:39,\n              \
    \   from /usr/include/c++/9/functional:54,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmp4nzntvxj.cpp:2:\n/usr/include/c++/9/array:316:5:\
    \ note: candidate: \u2018template<long unsigned int _Int, class _Tp, long unsigned\
    \ int _Nm> constexpr _Tp&& std::get(std::array<_Tp, _Nm>&&)\u2019\n  316 |   \
    \  get(array<_Tp, _Nm>&& __arr) noexcept\n      |     ^~~\n/usr/include/c++/9/array:316:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp4nzntvxj.cpp:40:54:\
    \ note:   \u2018std::vector<std::tuple<long int, long int> >\u2019 is not derived\
    \ from \u2018std::array<_Tp, _Nm>\u2019\n   40 |         res.push_back(std::make_tuple(std::get<0>(row),\
    \ std::get<1>(row)));\n      |                                               \
    \       ^\nIn file included from /usr/include/c++/9/tuple:39,\n              \
    \   from /usr/include/c++/9/functional:54,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmp4nzntvxj.cpp:2:\n/usr/include/c++/9/array:324:5:\
    \ note: candidate: \u2018template<long unsigned int _Int, class _Tp, long unsigned\
    \ int _Nm> constexpr const _Tp& std::get(const std::array<_Tp, _Nm>&)\u2019\n\
    \  324 |     get(const array<_Tp, _Nm>& __arr) noexcept\n      |     ^~~\n/usr/include/c++/9/array:324:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp4nzntvxj.cpp:40:54:\
    \ note:   \u2018std::vector<std::tuple<long int, long int> >\u2019 is not derived\
    \ from \u2018const std::array<_Tp, _Nm>\u2019\n   40 |         res.push_back(std::make_tuple(std::get<0>(row),\
    \ std::get<1>(row)));\n      |                                               \
    \       ^\nIn file included from /usr/include/c++/9/tuple:39,\n              \
    \   from /usr/include/c++/9/functional:54,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmp4nzntvxj.cpp:2:\n/usr/include/c++/9/array:333:5:\
    \ note: candidate: \u2018template<long unsigned int _Int, class _Tp, long unsigned\
    \ int _Nm> constexpr const _Tp&& std::get(const std::array<_Tp, _Nm>&&)\u2019\n\
    \  333 |     get(const array<_Tp, _Nm>&& __arr) noexcept\n      |     ^~~\n/usr/include/c++/9/array:333:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp4nzntvxj.cpp:40:54:\
    \ note:   \u2018std::vector<std::tuple<long int, long int> >\u2019 is not derived\
    \ from \u2018const std::array<_Tp, _Nm>\u2019\n   40 |         res.push_back(std::make_tuple(std::get<0>(row),\
    \ std::get<1>(row)));\n      |                                               \
    \       ^\nIn file included from /usr/include/c++/9/functional:54,\n         \
    \        from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n        \
    \         from /tmp/tmp4nzntvxj.cpp:2:\n/usr/include/c++/9/tuple:1320:5: note:\
    \ candidate: \u2018template<long unsigned int __i, class ... _Elements> constexpr\
    \ std::__tuple_element_t<__i, std::tuple<_Elements ...> >& std::get(std::tuple<_Elements\
    \ ...>&)\u2019\n 1320 |     get(tuple<_Elements...>& __t) noexcept\n      |  \
    \   ^~~\n/usr/include/c++/9/tuple:1320:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp4nzntvxj.cpp:40:54: note:   \u2018std::vector<std::tuple<long\
    \ int, long int> >\u2019 is not derived from \u2018std::tuple<_Elements ...>\u2019\
    \n   40 |         res.push_back(std::make_tuple(std::get<0>(row), std::get<1>(row)));\n\
    \      |                                                      ^\nIn file included\
    \ from /usr/include/c++/9/functional:54,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmp4nzntvxj.cpp:2:\n/usr/include/c++/9/tuple:1326:5:\
    \ note: candidate: \u2018template<long unsigned int __i, class ... _Elements>\
    \ constexpr std::__tuple_element_t<__i, std::tuple<_Elements ...> >& std::get(const\
    \ std::tuple<_Elements ...>&)\u2019\n 1326 |     get(const tuple<_Elements...>&\
    \ __t) noexcept\n      |     ^~~\n/usr/include/c++/9/tuple:1326:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmp4nzntvxj.cpp:40:54: note: \
    \  \u2018std::vector<std::tuple<long int, long int> >\u2019 is not derived from\
    \ \u2018const std::tuple<_Elements ...>\u2019\n   40 |         res.push_back(std::make_tuple(std::get<0>(row),\
    \ std::get<1>(row)));\n      |                                               \
    \       ^\nIn file included from /usr/include/c++/9/functional:54,\n         \
    \        from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n        \
    \         from /tmp/tmp4nzntvxj.cpp:2:\n/usr/include/c++/9/tuple:1332:5: note:\
    \ candidate: \u2018template<long unsigned int __i, class ... _Elements> constexpr\
    \ std::__tuple_element_t<__i, std::tuple<_Elements ...> >&& std::get(std::tuple<_Elements\
    \ ...>&&)\u2019\n 1332 |     get(tuple<_Elements...>&& __t) noexcept\n      |\
    \     ^~~\n/usr/include/c++/9/tuple:1332:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp4nzntvxj.cpp:40:54: note:   \u2018std::vector<std::tuple<long\
    \ int, long int> >\u2019 is not derived from \u2018std::tuple<_Elements ...>\u2019\
    \n   40 |         res.push_back(std::make_tuple(std::get<0>(row), std::get<1>(row)));\n\
    \      |                                                      ^\nIn file included\
    \ from /usr/include/c++/9/functional:54,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmp4nzntvxj.cpp:2:\n/usr/include/c++/9/tuple:1341:5:\
    \ note: candidate: \u2018template<long unsigned int __i, class ... _Elements>\
    \ constexpr std::__tuple_element_t<__i, std::tuple<_Elements ...> >&& std::get(const\
    \ std::tuple<_Elements ...>&&)\u2019\n 1341 |     get(const tuple<_Elements...>&&\
    \ __t) noexcept\n      |     ^~~\n/usr/include/c++/9/tuple:1341:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmp4nzntvxj.cpp:40:54: note: \
    \  \u2018std::vector<std::tuple<long int, long int> >\u2019 is not derived from\
    \ \u2018const std::tuple<_Elements ...>\u2019\n   40 |         res.push_back(std::make_tuple(std::get<0>(row),\
    \ std::get<1>(row)));\n      |                                               \
    \       ^\nIn file included from /usr/include/c++/9/functional:54,\n         \
    \        from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n        \
    \         from /tmp/tmp4nzntvxj.cpp:2:\n/usr/include/c++/9/tuple:1364:5: note:\
    \ candidate: \u2018template<class _Tp, class ... _Types> constexpr _Tp& std::get(std::tuple<_Elements\
    \ ...>&)\u2019\n 1364 |     get(tuple<_Types...>& __t) noexcept\n      |     ^~~\n\
    /usr/include/c++/9/tuple:1364:5: note:   template argument deduction/substitution\
    \ failed:\n/usr/include/c++/9/tuple:1370:5: note: candidate: \u2018template<class\
    \ _Tp, class ... _Types> constexpr _Tp&& std::get(std::tuple<_Elements ...>&&)\u2019\
    \n 1370 |     get(tuple<_Types...>&& __t) noexcept\n      |     ^~~\n/usr/include/c++/9/tuple:1370:5:\
    \ note:   template argument deduction/substitution failed:\n/usr/include/c++/9/tuple:1376:5:\
    \ note: candidate: \u2018template<class _Tp, class ... _Types> constexpr const\
    \ _Tp& std::get(const std::tuple<_Elements ...>&)\u2019\n 1376 |     get(const\
    \ tuple<_Types...>& __t) noexcept\n      |     ^~~\n/usr/include/c++/9/tuple:1376:5:\
    \ note:   template argument deduction/substitution failed:\n/usr/include/c++/9/tuple:1383:5:\
    \ note: candidate: \u2018template<class _Tp, class ... _Types> constexpr const\
    \ _Tp&& std::get(const std::tuple<_Elements ...>&&)\u2019\n 1383 |     get(const\
    \ tuple<_Types...>&& __t) noexcept\n      |     ^~~\n/usr/include/c++/9/tuple:1383:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp4nzntvxj.cpp:40:72:\
    \ error: no matching function for call to \u2018get<1>(std::vector<std::tuple<long\
    \ int, long int> >&)\u2019\n   40 |         res.push_back(std::make_tuple(std::get<0>(row),\
    \ std::get<1>(row)));\n      |                                               \
    \                         ^\nIn file included from /usr/include/c++/9/algorithm:60,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp4nzntvxj.cpp:2:\n/usr/include/c++/9/utility:219:5:\
    \ note: candidate: \u2018template<long unsigned int _Int, class _Tp1, class _Tp2>\
    \ constexpr typename std::tuple_element<_Int, std::pair<_Tp1, _Tp2> >::type& std::get(std::pair<_Tp1,\
    \ _Tp2>&)\u2019\n  219 |     get(std::pair<_Tp1, _Tp2>& __in) noexcept\n     \
    \ |     ^~~\n/usr/include/c++/9/utility:219:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp4nzntvxj.cpp:40:72: note:   \u2018std::vector<std::tuple<long\
    \ int, long int> >\u2019 is not derived from \u2018std::pair<_Tp1, _Tp2>\u2019\
    \n   40 |         res.push_back(std::make_tuple(std::get<0>(row), std::get<1>(row)));\n\
    \      |                                                                     \
    \   ^\nIn file included from /usr/include/c++/9/algorithm:60,\n              \
    \   from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n             \
    \    from /tmp/tmp4nzntvxj.cpp:2:\n/usr/include/c++/9/utility:224:5: note: candidate:\
    \ \u2018template<long unsigned int _Int, class _Tp1, class _Tp2> constexpr typename\
    \ std::tuple_element<_Int, std::pair<_Tp1, _Tp2> >::type&& std::get(std::pair<_Tp1,\
    \ _Tp2>&&)\u2019\n  224 |     get(std::pair<_Tp1, _Tp2>&& __in) noexcept\n   \
    \   |     ^~~\n/usr/include/c++/9/utility:224:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp4nzntvxj.cpp:40:72: note:   \u2018std::vector<std::tuple<long\
    \ int, long int> >\u2019 is not derived from \u2018std::pair<_Tp1, _Tp2>\u2019\
    \n   40 |         res.push_back(std::make_tuple(std::get<0>(row), std::get<1>(row)));\n\
    \      |                                                                     \
    \   ^\nIn file included from /usr/include/c++/9/algorithm:60,\n              \
    \   from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n             \
    \    from /tmp/tmp4nzntvxj.cpp:2:\n/usr/include/c++/9/utility:229:5: note: candidate:\
    \ \u2018template<long unsigned int _Int, class _Tp1, class _Tp2> constexpr const\
    \ typename std::tuple_element<_Int, std::pair<_Tp1, _Tp2> >::type& std::get(const\
    \ std::pair<_Tp1, _Tp2>&)\u2019\n  229 |     get(const std::pair<_Tp1, _Tp2>&\
    \ __in) noexcept\n      |     ^~~\n/usr/include/c++/9/utility:229:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmp4nzntvxj.cpp:40:72: note: \
    \  \u2018std::vector<std::tuple<long int, long int> >\u2019 is not derived from\
    \ \u2018const std::pair<_Tp1, _Tp2>\u2019\n   40 |         res.push_back(std::make_tuple(std::get<0>(row),\
    \ std::get<1>(row)));\n      |                                               \
    \                         ^\nIn file included from /usr/include/c++/9/algorithm:60,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp4nzntvxj.cpp:2:\n/usr/include/c++/9/utility:234:5:\
    \ note: candidate: \u2018template<long unsigned int _Int, class _Tp1, class _Tp2>\
    \ constexpr const typename std::tuple_element<_Int, std::pair<_Tp1, _Tp2> >::type&&\
    \ std::get(const std::pair<_Tp1, _Tp2>&&)\u2019\n  234 |     get(const std::pair<_Tp1,\
    \ _Tp2>&& __in) noexcept\n      |     ^~~\n/usr/include/c++/9/utility:234:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmp4nzntvxj.cpp:40:72:\
    \ note:   \u2018std::vector<std::tuple<long int, long int> >\u2019 is not derived\
    \ from \u2018const std::pair<_Tp1, _Tp2>\u2019\n   40 |         res.push_back(std::make_tuple(std::get<0>(row),\
    \ std::get<1>(row)));\n      |                                               \
    \                         ^\nIn file included from /usr/include/c++/9/algorithm:60,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp4nzntvxj.cpp:2:\n/usr/include/c++/9/utility:243:5:\
    \ note: candidate: \u2018template<class _Tp, class _Up> constexpr _Tp& std::get(std::pair<_T1,\
    \ _T2>&)\u2019\n  243 |     get(pair<_Tp, _Up>& __p) noexcept\n      |     ^~~\n\
    /usr/include/c++/9/utility:243:5: note:   template argument deduction/substitution\
    \ failed:\n/usr/include/c++/9/utility:248:5: note: candidate: \u2018template<class\
    \ _Tp, class _Up> constexpr const _Tp& std::get(const std::pair<_T1, _T2>&)\u2019\
    \n  248 |     get(const pair<_Tp, _Up>& __p) noexcept\n      |     ^~~\n/usr/include/c++/9/utility:248:5:\
    \ note:   template argument deduction/substitution failed:\n/usr/include/c++/9/utility:253:5:\
    \ note: candidate: \u2018template<class _Tp, class _Up> constexpr _Tp&& std::get(std::pair<_T1,\
    \ _T2>&&)\u2019\n  253 |     get(pair<_Tp, _Up>&& __p) noexcept\n      |     ^~~\n\
    /usr/include/c++/9/utility:253:5: note:   template argument deduction/substitution\
    \ failed:\n/usr/include/c++/9/utility:258:5: note: candidate: \u2018template<class\
    \ _Tp, class _Up> constexpr const _Tp&& std::get(const std::pair<_T1, _T2>&&)\u2019\
    \n  258 |     get(const pair<_Tp, _Up>&& __p) noexcept\n      |     ^~~\n/usr/include/c++/9/utility:258:5:\
    \ note:   template argument deduction/substitution failed:\n/usr/include/c++/9/utility:263:5:\
    \ note: candidate: \u2018template<class _Tp, class _Up> constexpr _Tp& std::get(std::pair<_Up,\
    \ _Tp>&)\u2019\n  263 |     get(pair<_Up, _Tp>& __p) noexcept\n      |     ^~~\n\
    /usr/include/c++/9/utility:263:5: note:   template argument deduction/substitution\
    \ failed:\n/usr/include/c++/9/utility:268:5: note: candidate: \u2018template<class\
    \ _Tp, class _Up> constexpr const _Tp& std::get(const std::pair<_Up, _Tp>&)\u2019\
    \n  268 |     get(const pair<_Up, _Tp>& __p) noexcept\n      |     ^~~\n/usr/include/c++/9/utility:268:5:\
    \ note:   template argument deduction/substitution failed:\n/usr/include/c++/9/utility:273:5:\
    \ note: candidate: \u2018template<class _Tp, class _Up> constexpr _Tp&& std::get(std::pair<_Up,\
    \ _Tp>&&)\u2019\n  273 |     get(pair<_Up, _Tp>&& __p) noexcept\n      |     ^~~\n\
    /usr/include/c++/9/utility:273:5: note:   template argument deduction/substitution\
    \ failed:\n/usr/include/c++/9/utility:278:5: note: candidate: \u2018template<class\
    \ _Tp, class _Up> constexpr const _Tp&& std::get(const std::pair<_Up, _Tp>&&)\u2019\
    \n  278 |     get(const pair<_Up, _Tp>&& __p) noexcept\n      |     ^~~\n/usr/include/c++/9/utility:278:5:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/9/tuple:39,\n                 from /usr/include/c++/9/functional:54,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmp4nzntvxj.cpp:2:\n/usr/include/c++/9/array:307:5:\
    \ note: candidate: \u2018template<long unsigned int _Int, class _Tp, long unsigned\
    \ int _Nm> constexpr _Tp& std::get(std::array<_Tp, _Nm>&)\u2019\n  307 |     get(array<_Tp,\
    \ _Nm>& __arr) noexcept\n      |     ^~~\n/usr/include/c++/9/array:307:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmp4nzntvxj.cpp:40:72:\
    \ note:   \u2018std::vector<std::tuple<long int, long int> >\u2019 is not derived\
    \ from \u2018std::array<_Tp, _Nm>\u2019\n   40 |         res.push_back(std::make_tuple(std::get<0>(row),\
    \ std::get<1>(row)));\n      |                                               \
    \                         ^\nIn file included from /usr/include/c++/9/tuple:39,\n\
    \                 from /usr/include/c++/9/functional:54,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n                 from\
    \ /tmp/tmp4nzntvxj.cpp:2:\n/usr/include/c++/9/array:316:5: note: candidate: \u2018\
    template<long unsigned int _Int, class _Tp, long unsigned int _Nm> constexpr _Tp&&\
    \ std::get(std::array<_Tp, _Nm>&&)\u2019\n  316 |     get(array<_Tp, _Nm>&& __arr)\
    \ noexcept\n      |     ^~~\n/usr/include/c++/9/array:316:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmp4nzntvxj.cpp:40:72: note: \
    \  \u2018std::vector<std::tuple<long int, long int> >\u2019 is not derived from\
    \ \u2018std::array<_Tp, _Nm>\u2019\n   40 |         res.push_back(std::make_tuple(std::get<0>(row),\
    \ std::get<1>(row)));\n      |                                               \
    \                         ^\nIn file included from /usr/include/c++/9/tuple:39,\n\
    \                 from /usr/include/c++/9/functional:54,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n                 from\
    \ /tmp/tmp4nzntvxj.cpp:2:\n/usr/include/c++/9/array:324:5: note: candidate: \u2018\
    template<long unsigned int _Int, class _Tp, long unsigned int _Nm> constexpr const\
    \ _Tp& std::get(const std::array<_Tp, _Nm>&)\u2019\n  324 |     get(const array<_Tp,\
    \ _Nm>& __arr) noexcept\n      |     ^~~\n/usr/include/c++/9/array:324:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmp4nzntvxj.cpp:40:72:\
    \ note:   \u2018std::vector<std::tuple<long int, long int> >\u2019 is not derived\
    \ from \u2018const std::array<_Tp, _Nm>\u2019\n   40 |         res.push_back(std::make_tuple(std::get<0>(row),\
    \ std::get<1>(row)));\n      |                                               \
    \                         ^\nIn file included from /usr/include/c++/9/tuple:39,\n\
    \                 from /usr/include/c++/9/functional:54,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n                 from\
    \ /tmp/tmp4nzntvxj.cpp:2:\n/usr/include/c++/9/array:333:5: note: candidate: \u2018\
    template<long unsigned int _Int, class _Tp, long unsigned int _Nm> constexpr const\
    \ _Tp&& std::get(const std::array<_Tp, _Nm>&&)\u2019\n  333 |     get(const array<_Tp,\
    \ _Nm>&& __arr) noexcept\n      |     ^~~\n/usr/include/c++/9/array:333:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmp4nzntvxj.cpp:40:72:\
    \ note:   \u2018std::vector<std::tuple<long int, long int> >\u2019 is not derived\
    \ from \u2018const std::array<_Tp, _Nm>\u2019\n   40 |         res.push_back(std::make_tuple(std::get<0>(row),\
    \ std::get<1>(row)));\n      |                                               \
    \                         ^\nIn file included from /usr/include/c++/9/functional:54,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmp4nzntvxj.cpp:2:\n/usr/include/c++/9/tuple:1320:5:\
    \ note: candidate: \u2018template<long unsigned int __i, class ... _Elements>\
    \ constexpr std::__tuple_element_t<__i, std::tuple<_Elements ...> >& std::get(std::tuple<_Elements\
    \ ...>&)\u2019\n 1320 |     get(tuple<_Elements...>& __t) noexcept\n      |  \
    \   ^~~\n/usr/include/c++/9/tuple:1320:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp4nzntvxj.cpp:40:72: note:   \u2018std::vector<std::tuple<long\
    \ int, long int> >\u2019 is not derived from \u2018std::tuple<_Elements ...>\u2019\
    \n   40 |         res.push_back(std::make_tuple(std::get<0>(row), std::get<1>(row)));\n\
    \      |                                                                     \
    \   ^\nIn file included from /usr/include/c++/9/functional:54,\n             \
    \    from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n            \
    \     from /tmp/tmp4nzntvxj.cpp:2:\n/usr/include/c++/9/tuple:1326:5: note: candidate:\
    \ \u2018template<long unsigned int __i, class ... _Elements> constexpr std::__tuple_element_t<__i,\
    \ std::tuple<_Elements ...> >& std::get(const std::tuple<_Elements ...>&)\u2019\
    \n 1326 |     get(const tuple<_Elements...>& __t) noexcept\n      |     ^~~\n\
    /usr/include/c++/9/tuple:1326:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp4nzntvxj.cpp:40:72: note:   \u2018std::vector<std::tuple<long\
    \ int, long int> >\u2019 is not derived from \u2018const std::tuple<_Elements\
    \ ...>\u2019\n   40 |         res.push_back(std::make_tuple(std::get<0>(row),\
    \ std::get<1>(row)));\n      |                                               \
    \                         ^\nIn file included from /usr/include/c++/9/functional:54,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmp4nzntvxj.cpp:2:\n/usr/include/c++/9/tuple:1332:5:\
    \ note: candidate: \u2018template<long unsigned int __i, class ... _Elements>\
    \ constexpr std::__tuple_element_t<__i, std::tuple<_Elements ...> >&& std::get(std::tuple<_Elements\
    \ ...>&&)\u2019\n 1332 |     get(tuple<_Elements...>&& __t) noexcept\n      |\
    \     ^~~\n/usr/include/c++/9/tuple:1332:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp4nzntvxj.cpp:40:72: note:   \u2018std::vector<std::tuple<long\
    \ int, long int> >\u2019 is not derived from \u2018std::tuple<_Elements ...>\u2019\
    \n   40 |         res.push_back(std::make_tuple(std::get<0>(row), std::get<1>(row)));\n\
    \      |                                                                     \
    \   ^\nIn file included from /usr/include/c++/9/functional:54,\n             \
    \    from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n            \
    \     from /tmp/tmp4nzntvxj.cpp:2:\n/usr/include/c++/9/tuple:1341:5: note: candidate:\
    \ \u2018template<long unsigned int __i, class ... _Elements> constexpr std::__tuple_element_t<__i,\
    \ std::tuple<_Elements ...> >&& std::get(const std::tuple<_Elements ...>&&)\u2019\
    \n 1341 |     get(const tuple<_Elements...>&& __t) noexcept\n      |     ^~~\n\
    /usr/include/c++/9/tuple:1341:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp4nzntvxj.cpp:40:72: note:   \u2018std::vector<std::tuple<long\
    \ int, long int> >\u2019 is not derived from \u2018const std::tuple<_Elements\
    \ ...>\u2019\n   40 |         res.push_back(std::make_tuple(std::get<0>(row),\
    \ std::get<1>(row)));\n      |                                               \
    \                         ^\nIn file included from /usr/include/c++/9/functional:54,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmp4nzntvxj.cpp:2:\n/usr/include/c++/9/tuple:1364:5:\
    \ note: candidate: \u2018template<class _Tp, class ... _Types> constexpr _Tp&\
    \ std::get(std::tuple<_Elements ...>&)\u2019\n 1364 |     get(tuple<_Types...>&\
    \ __t) noexcept\n      |     ^~~\n/usr/include/c++/9/tuple:1364:5: note:   template\
    \ argument deduction/substitution failed:\n/usr/include/c++/9/tuple:1370:5: note:\
    \ candidate: \u2018template<class _Tp, class ... _Types> constexpr _Tp&& std::get(std::tuple<_Elements\
    \ ...>&&)\u2019\n 1370 |     get(tuple<_Types...>&& __t) noexcept\n      |   \
    \  ^~~\n/usr/include/c++/9/tuple:1370:5: note:   template argument deduction/substitution\
    \ failed:\n/usr/include/c++/9/tuple:1376:5: note: candidate: \u2018template<class\
    \ _Tp, class ... _Types> constexpr const _Tp& std::get(const std::tuple<_Elements\
    \ ...>&)\u2019\n 1376 |     get(const tuple<_Types...>& __t) noexcept\n      |\
    \     ^~~\n/usr/include/c++/9/tuple:1376:5: note:   template argument deduction/substitution\
    \ failed:\n/usr/include/c++/9/tuple:1383:5: note: candidate: \u2018template<class\
    \ _Tp, class ... _Types> constexpr const _Tp&& std::get(const std::tuple<_Elements\
    \ ...>&&)\u2019\n 1383 |     get(const tuple<_Types...>&& __t) noexcept\n    \
    \  |     ^~~\n/usr/include/c++/9/tuple:1383:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp4nzntvxj.cpp:41:55: error: no matching function for call to\
    \ \u2018get<0>(std::vector<std::tuple<long int, long int> >&)\u2019\n   41 | \
    \        res.push_back(std::make_tuple(std::get<0>(temp), std::get<1>(temp)));\n\
    \      |                                                       ^\nIn file included\
    \ from /usr/include/c++/9/algorithm:60,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp4nzntvxj.cpp:2:\n/usr/include/c++/9/utility:219:5:\
    \ note: candidate: \u2018template<long unsigned int _Int, class _Tp1, class _Tp2>\
    \ constexpr typename std::tuple_element<_Int, std::pair<_Tp1, _Tp2> >::type& std::get(std::pair<_Tp1,\
    \ _Tp2>&)\u2019\n  219 |     get(std::pair<_Tp1, _Tp2>& __in) noexcept\n     \
    \ |     ^~~\n/usr/include/c++/9/utility:219:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp4nzntvxj.cpp:41:55: note:   \u2018std::vector<std::tuple<long\
    \ int, long int> >\u2019 is not derived from \u2018std::pair<_Tp1, _Tp2>\u2019\
    \n   41 |         res.push_back(std::make_tuple(std::get<0>(temp), std::get<1>(temp)));\n\
    \      |                                                       ^\nIn file included\
    \ from /usr/include/c++/9/algorithm:60,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp4nzntvxj.cpp:2:\n/usr/include/c++/9/utility:224:5:\
    \ note: candidate: \u2018template<long unsigned int _Int, class _Tp1, class _Tp2>\
    \ constexpr typename std::tuple_element<_Int, std::pair<_Tp1, _Tp2> >::type&&\
    \ std::get(std::pair<_Tp1, _Tp2>&&)\u2019\n  224 |     get(std::pair<_Tp1, _Tp2>&&\
    \ __in) noexcept\n      |     ^~~\n/usr/include/c++/9/utility:224:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmp4nzntvxj.cpp:41:55: note: \
    \  \u2018std::vector<std::tuple<long int, long int> >\u2019 is not derived from\
    \ \u2018std::pair<_Tp1, _Tp2>\u2019\n   41 |         res.push_back(std::make_tuple(std::get<0>(temp),\
    \ std::get<1>(temp)));\n      |                                              \
    \         ^\nIn file included from /usr/include/c++/9/algorithm:60,\n        \
    \         from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n       \
    \          from /tmp/tmp4nzntvxj.cpp:2:\n/usr/include/c++/9/utility:229:5: note:\
    \ candidate: \u2018template<long unsigned int _Int, class _Tp1, class _Tp2> constexpr\
    \ const typename std::tuple_element<_Int, std::pair<_Tp1, _Tp2> >::type& std::get(const\
    \ std::pair<_Tp1, _Tp2>&)\u2019\n  229 |     get(const std::pair<_Tp1, _Tp2>&\
    \ __in) noexcept\n      |     ^~~\n/usr/include/c++/9/utility:229:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmp4nzntvxj.cpp:41:55: note: \
    \  \u2018std::vector<std::tuple<long int, long int> >\u2019 is not derived from\
    \ \u2018const std::pair<_Tp1, _Tp2>\u2019\n   41 |         res.push_back(std::make_tuple(std::get<0>(temp),\
    \ std::get<1>(temp)));\n      |                                              \
    \         ^\nIn file included from /usr/include/c++/9/algorithm:60,\n        \
    \         from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n       \
    \          from /tmp/tmp4nzntvxj.cpp:2:\n/usr/include/c++/9/utility:234:5: note:\
    \ candidate: \u2018template<long unsigned int _Int, class _Tp1, class _Tp2> constexpr\
    \ const typename std::tuple_element<_Int, std::pair<_Tp1, _Tp2> >::type&& std::get(const\
    \ std::pair<_Tp1, _Tp2>&&)\u2019\n  234 |     get(const std::pair<_Tp1, _Tp2>&&\
    \ __in) noexcept\n      |     ^~~\n/usr/include/c++/9/utility:234:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmp4nzntvxj.cpp:41:55: note: \
    \  \u2018std::vector<std::tuple<long int, long int> >\u2019 is not derived from\
    \ \u2018const std::pair<_Tp1, _Tp2>\u2019\n   41 |         res.push_back(std::make_tuple(std::get<0>(temp),\
    \ std::get<1>(temp)));\n      |                                              \
    \         ^\nIn file included from /usr/include/c++/9/algorithm:60,\n        \
    \         from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n       \
    \          from /tmp/tmp4nzntvxj.cpp:2:\n/usr/include/c++/9/utility:243:5: note:\
    \ candidate: \u2018template<class _Tp, class _Up> constexpr _Tp& std::get(std::pair<_T1,\
    \ _T2>&)\u2019\n  243 |     get(pair<_Tp, _Up>& __p) noexcept\n      |     ^~~\n\
    /usr/include/c++/9/utility:243:5: note:   template argument deduction/substitution\
    \ failed:\n/usr/include/c++/9/utility:248:5: note: candidate: \u2018template<class\
    \ _Tp, class _Up> constexpr const _Tp& std::get(const std::pair<_T1, _T2>&)\u2019\
    \n  248 |     get(const pair<_Tp, _Up>& __p) noexcept\n      |     ^~~\n/usr/include/c++/9/utility:248:5:\
    \ note:   template argument deduction/substitution failed:\n/usr/include/c++/9/utility:253:5:\
    \ note: candidate: \u2018template<class _Tp, class _Up> constexpr _Tp&& std::get(std::pair<_T1,\
    \ _T2>&&)\u2019\n  253 |     get(pair<_Tp, _Up>&& __p) noexcept\n      |     ^~~\n\
    /usr/include/c++/9/utility:253:5: note:   template argument deduction/substitution\
    \ failed:\n/usr/include/c++/9/utility:258:5: note: candidate: \u2018template<class\
    \ _Tp, class _Up> constexpr const _Tp&& std::get(const std::pair<_T1, _T2>&&)\u2019\
    \n  258 |     get(const pair<_Tp, _Up>&& __p) noexcept\n      |     ^~~\n/usr/include/c++/9/utility:258:5:\
    \ note:   template argument deduction/substitution failed:\n/usr/include/c++/9/utility:263:5:\
    \ note: candidate: \u2018template<class _Tp, class _Up> constexpr _Tp& std::get(std::pair<_Up,\
    \ _Tp>&)\u2019\n  263 |     get(pair<_Up, _Tp>& __p) noexcept\n      |     ^~~\n\
    /usr/include/c++/9/utility:263:5: note:   template argument deduction/substitution\
    \ failed:\n/usr/include/c++/9/utility:268:5: note: candidate: \u2018template<class\
    \ _Tp, class _Up> constexpr const _Tp& std::get(const std::pair<_Up, _Tp>&)\u2019\
    \n  268 |     get(const pair<_Up, _Tp>& __p) noexcept\n      |     ^~~\n/usr/include/c++/9/utility:268:5:\
    \ note:   template argument deduction/substitution failed:\n/usr/include/c++/9/utility:273:5:\
    \ note: candidate: \u2018template<class _Tp, class _Up> constexpr _Tp&& std::get(std::pair<_Up,\
    \ _Tp>&&)\u2019\n  273 |     get(pair<_Up, _Tp>&& __p) noexcept\n      |     ^~~\n\
    /usr/include/c++/9/utility:273:5: note:   template argument deduction/substitution\
    \ failed:\n/usr/include/c++/9/utility:278:5: note: candidate: \u2018template<class\
    \ _Tp, class _Up> constexpr const _Tp&& std::get(const std::pair<_Up, _Tp>&&)\u2019\
    \n  278 |     get(const pair<_Up, _Tp>&& __p) noexcept\n      |     ^~~\n/usr/include/c++/9/utility:278:5:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/9/tuple:39,\n                 from /usr/include/c++/9/functional:54,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmp4nzntvxj.cpp:2:\n/usr/include/c++/9/array:307:5:\
    \ note: candidate: \u2018template<long unsigned int _Int, class _Tp, long unsigned\
    \ int _Nm> constexpr _Tp& std::get(std::array<_Tp, _Nm>&)\u2019\n  307 |     get(array<_Tp,\
    \ _Nm>& __arr) noexcept\n      |     ^~~\n/usr/include/c++/9/array:307:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmp4nzntvxj.cpp:41:55:\
    \ note:   \u2018std::vector<std::tuple<long int, long int> >\u2019 is not derived\
    \ from \u2018std::array<_Tp, _Nm>\u2019\n   41 |         res.push_back(std::make_tuple(std::get<0>(temp),\
    \ std::get<1>(temp)));\n      |                                              \
    \         ^\nIn file included from /usr/include/c++/9/tuple:39,\n            \
    \     from /usr/include/c++/9/functional:54,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmp4nzntvxj.cpp:2:\n/usr/include/c++/9/array:316:5:\
    \ note: candidate: \u2018template<long unsigned int _Int, class _Tp, long unsigned\
    \ int _Nm> constexpr _Tp&& std::get(std::array<_Tp, _Nm>&&)\u2019\n  316 |   \
    \  get(array<_Tp, _Nm>&& __arr) noexcept\n      |     ^~~\n/usr/include/c++/9/array:316:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp4nzntvxj.cpp:41:55:\
    \ note:   \u2018std::vector<std::tuple<long int, long int> >\u2019 is not derived\
    \ from \u2018std::array<_Tp, _Nm>\u2019\n   41 |         res.push_back(std::make_tuple(std::get<0>(temp),\
    \ std::get<1>(temp)));\n      |                                              \
    \         ^\nIn file included from /usr/include/c++/9/tuple:39,\n            \
    \     from /usr/include/c++/9/functional:54,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmp4nzntvxj.cpp:2:\n/usr/include/c++/9/array:324:5:\
    \ note: candidate: \u2018template<long unsigned int _Int, class _Tp, long unsigned\
    \ int _Nm> constexpr const _Tp& std::get(const std::array<_Tp, _Nm>&)\u2019\n\
    \  324 |     get(const array<_Tp, _Nm>& __arr) noexcept\n      |     ^~~\n/usr/include/c++/9/array:324:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp4nzntvxj.cpp:41:55:\
    \ note:   \u2018std::vector<std::tuple<long int, long int> >\u2019 is not derived\
    \ from \u2018const std::array<_Tp, _Nm>\u2019\n   41 |         res.push_back(std::make_tuple(std::get<0>(temp),\
    \ std::get<1>(temp)));\n      |                                              \
    \         ^\nIn file included from /usr/include/c++/9/tuple:39,\n            \
    \     from /usr/include/c++/9/functional:54,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmp4nzntvxj.cpp:2:\n/usr/include/c++/9/array:333:5:\
    \ note: candidate: \u2018template<long unsigned int _Int, class _Tp, long unsigned\
    \ int _Nm> constexpr const _Tp&& std::get(const std::array<_Tp, _Nm>&&)\u2019\n\
    \  333 |     get(const array<_Tp, _Nm>&& __arr) noexcept\n      |     ^~~\n/usr/include/c++/9/array:333:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp4nzntvxj.cpp:41:55:\
    \ note:   \u2018std::vector<std::tuple<long int, long int> >\u2019 is not derived\
    \ from \u2018const std::array<_Tp, _Nm>\u2019\n   41 |         res.push_back(std::make_tuple(std::get<0>(temp),\
    \ std::get<1>(temp)));\n      |                                              \
    \         ^\nIn file included from /usr/include/c++/9/functional:54,\n       \
    \          from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n      \
    \           from /tmp/tmp4nzntvxj.cpp:2:\n/usr/include/c++/9/tuple:1320:5: note:\
    \ candidate: \u2018template<long unsigned int __i, class ... _Elements> constexpr\
    \ std::__tuple_element_t<__i, std::tuple<_Elements ...> >& std::get(std::tuple<_Elements\
    \ ...>&)\u2019\n 1320 |     get(tuple<_Elements...>& __t) noexcept\n      |  \
    \   ^~~\n/usr/include/c++/9/tuple:1320:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp4nzntvxj.cpp:41:55: note:   \u2018std::vector<std::tuple<long\
    \ int, long int> >\u2019 is not derived from \u2018std::tuple<_Elements ...>\u2019\
    \n   41 |         res.push_back(std::make_tuple(std::get<0>(temp), std::get<1>(temp)));\n\
    \      |                                                       ^\nIn file included\
    \ from /usr/include/c++/9/functional:54,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmp4nzntvxj.cpp:2:\n/usr/include/c++/9/tuple:1326:5:\
    \ note: candidate: \u2018template<long unsigned int __i, class ... _Elements>\
    \ constexpr std::__tuple_element_t<__i, std::tuple<_Elements ...> >& std::get(const\
    \ std::tuple<_Elements ...>&)\u2019\n 1326 |     get(const tuple<_Elements...>&\
    \ __t) noexcept\n      |     ^~~\n/usr/include/c++/9/tuple:1326:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmp4nzntvxj.cpp:41:55: note: \
    \  \u2018std::vector<std::tuple<long int, long int> >\u2019 is not derived from\
    \ \u2018const std::tuple<_Elements ...>\u2019\n   41 |         res.push_back(std::make_tuple(std::get<0>(temp),\
    \ std::get<1>(temp)));\n      |                                              \
    \         ^\nIn file included from /usr/include/c++/9/functional:54,\n       \
    \          from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n      \
    \           from /tmp/tmp4nzntvxj.cpp:2:\n/usr/include/c++/9/tuple:1332:5: note:\
    \ candidate: \u2018template<long unsigned int __i, class ... _Elements> constexpr\
    \ std::__tuple_element_t<__i, std::tuple<_Elements ...> >&& std::get(std::tuple<_Elements\
    \ ...>&&)\u2019\n 1332 |     get(tuple<_Elements...>&& __t) noexcept\n      |\
    \     ^~~\n/usr/include/c++/9/tuple:1332:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp4nzntvxj.cpp:41:55: note:   \u2018std::vector<std::tuple<long\
    \ int, long int> >\u2019 is not derived from \u2018std::tuple<_Elements ...>\u2019\
    \n   41 |         res.push_back(std::make_tuple(std::get<0>(temp), std::get<1>(temp)));\n\
    \      |                                                       ^\nIn file included\
    \ from /usr/include/c++/9/functional:54,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmp4nzntvxj.cpp:2:\n/usr/include/c++/9/tuple:1341:5:\
    \ note: candidate: \u2018template<long unsigned int __i, class ... _Elements>\
    \ constexpr std::__tuple_element_t<__i, std::tuple<_Elements ...> >&& std::get(const\
    \ std::tuple<_Elements ...>&&)\u2019\n 1341 |     get(const tuple<_Elements...>&&\
    \ __t) noexcept\n      |     ^~~\n/usr/include/c++/9/tuple:1341:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmp4nzntvxj.cpp:41:55: note: \
    \  \u2018std::vector<std::tuple<long int, long int> >\u2019 is not derived from\
    \ \u2018const std::tuple<_Elements ...>\u2019\n   41 |         res.push_back(std::make_tuple(std::get<0>(temp),\
    \ std::get<1>(temp)));\n      |                                              \
    \         ^\nIn file included from /usr/include/c++/9/functional:54,\n       \
    \          from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n      \
    \           from /tmp/tmp4nzntvxj.cpp:2:\n/usr/include/c++/9/tuple:1364:5: note:\
    \ candidate: \u2018template<class _Tp, class ... _Types> constexpr _Tp& std::get(std::tuple<_Elements\
    \ ...>&)\u2019\n 1364 |     get(tuple<_Types...>& __t) noexcept\n      |     ^~~\n\
    /usr/include/c++/9/tuple:1364:5: note:   template argument deduction/substitution\
    \ failed:\n/usr/include/c++/9/tuple:1370:5: note: candidate: \u2018template<class\
    \ _Tp, class ... _Types> constexpr _Tp&& std::get(std::tuple<_Elements ...>&&)\u2019\
    \n 1370 |     get(tuple<_Types...>&& __t) noexcept\n      |     ^~~\n/usr/include/c++/9/tuple:1370:5:\
    \ note:   template argument deduction/substitution failed:\n/usr/include/c++/9/tuple:1376:5:\
    \ note: candidate: \u2018template<class _Tp, class ... _Types> constexpr const\
    \ _Tp& std::get(const std::tuple<_Elements ...>&)\u2019\n 1376 |     get(const\
    \ tuple<_Types...>& __t) noexcept\n      |     ^~~\n/usr/include/c++/9/tuple:1376:5:\
    \ note:   template argument deduction/substitution failed:\n/usr/include/c++/9/tuple:1383:5:\
    \ note: candidate: \u2018template<class _Tp, class ... _Types> constexpr const\
    \ _Tp&& std::get(const std::tuple<_Elements ...>&&)\u2019\n 1383 |     get(const\
    \ tuple<_Types...>&& __t) noexcept\n      |     ^~~\n/usr/include/c++/9/tuple:1383:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp4nzntvxj.cpp:41:74:\
    \ error: no matching function for call to \u2018get<1>(std::vector<std::tuple<long\
    \ int, long int> >&)\u2019\n   41 |         res.push_back(std::make_tuple(std::get<0>(temp),\
    \ std::get<1>(temp)));\n      |                                              \
    \                            ^\nIn file included from /usr/include/c++/9/algorithm:60,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp4nzntvxj.cpp:2:\n/usr/include/c++/9/utility:219:5:\
    \ note: candidate: \u2018template<long unsigned int _Int, class _Tp1, class _Tp2>\
    \ constexpr typename std::tuple_element<_Int, std::pair<_Tp1, _Tp2> >::type& std::get(std::pair<_Tp1,\
    \ _Tp2>&)\u2019\n  219 |     get(std::pair<_Tp1, _Tp2>& __in) noexcept\n     \
    \ |     ^~~\n/usr/include/c++/9/utility:219:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp4nzntvxj.cpp:41:74: note:   \u2018std::vector<std::tuple<long\
    \ int, long int> >\u2019 is not derived from \u2018std::pair<_Tp1, _Tp2>\u2019\
    \n   41 |         res.push_back(std::make_tuple(std::get<0>(temp), std::get<1>(temp)));\n\
    \      |                                                                     \
    \     ^\nIn file included from /usr/include/c++/9/algorithm:60,\n            \
    \     from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n           \
    \      from /tmp/tmp4nzntvxj.cpp:2:\n/usr/include/c++/9/utility:224:5: note: candidate:\
    \ \u2018template<long unsigned int _Int, class _Tp1, class _Tp2> constexpr typename\
    \ std::tuple_element<_Int, std::pair<_Tp1, _Tp2> >::type&& std::get(std::pair<_Tp1,\
    \ _Tp2>&&)\u2019\n  224 |     get(std::pair<_Tp1, _Tp2>&& __in) noexcept\n   \
    \   |     ^~~\n/usr/include/c++/9/utility:224:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp4nzntvxj.cpp:41:74: note:   \u2018std::vector<std::tuple<long\
    \ int, long int> >\u2019 is not derived from \u2018std::pair<_Tp1, _Tp2>\u2019\
    \n   41 |         res.push_back(std::make_tuple(std::get<0>(temp), std::get<1>(temp)));\n\
    \      |                                                                     \
    \     ^\nIn file included from /usr/include/c++/9/algorithm:60,\n            \
    \     from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n           \
    \      from /tmp/tmp4nzntvxj.cpp:2:\n/usr/include/c++/9/utility:229:5: note: candidate:\
    \ \u2018template<long unsigned int _Int, class _Tp1, class _Tp2> constexpr const\
    \ typename std::tuple_element<_Int, std::pair<_Tp1, _Tp2> >::type& std::get(const\
    \ std::pair<_Tp1, _Tp2>&)\u2019\n  229 |     get(const std::pair<_Tp1, _Tp2>&\
    \ __in) noexcept\n      |     ^~~\n/usr/include/c++/9/utility:229:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmp4nzntvxj.cpp:41:74: note: \
    \  \u2018std::vector<std::tuple<long int, long int> >\u2019 is not derived from\
    \ \u2018const std::pair<_Tp1, _Tp2>\u2019\n   41 |         res.push_back(std::make_tuple(std::get<0>(temp),\
    \ std::get<1>(temp)));\n      |                                              \
    \                            ^\nIn file included from /usr/include/c++/9/algorithm:60,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp4nzntvxj.cpp:2:\n/usr/include/c++/9/utility:234:5:\
    \ note: candidate: \u2018template<long unsigned int _Int, class _Tp1, class _Tp2>\
    \ constexpr const typename std::tuple_element<_Int, std::pair<_Tp1, _Tp2> >::type&&\
    \ std::get(const std::pair<_Tp1, _Tp2>&&)\u2019\n  234 |     get(const std::pair<_Tp1,\
    \ _Tp2>&& __in) noexcept\n      |     ^~~\n/usr/include/c++/9/utility:234:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmp4nzntvxj.cpp:41:74:\
    \ note:   \u2018std::vector<std::tuple<long int, long int> >\u2019 is not derived\
    \ from \u2018const std::pair<_Tp1, _Tp2>\u2019\n   41 |         res.push_back(std::make_tuple(std::get<0>(temp),\
    \ std::get<1>(temp)));\n      |                                              \
    \                            ^\nIn file included from /usr/include/c++/9/algorithm:60,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp4nzntvxj.cpp:2:\n/usr/include/c++/9/utility:243:5:\
    \ note: candidate: \u2018template<class _Tp, class _Up> constexpr _Tp& std::get(std::pair<_T1,\
    \ _T2>&)\u2019\n  243 |     get(pair<_Tp, _Up>& __p) noexcept\n      |     ^~~\n\
    /usr/include/c++/9/utility:243:5: note:   template argument deduction/substitution\
    \ failed:\n/usr/include/c++/9/utility:248:5: note: candidate: \u2018template<class\
    \ _Tp, class _Up> constexpr const _Tp& std::get(const std::pair<_T1, _T2>&)\u2019\
    \n  248 |     get(const pair<_Tp, _Up>& __p) noexcept\n      |     ^~~\n/usr/include/c++/9/utility:248:5:\
    \ note:   template argument deduction/substitution failed:\n/usr/include/c++/9/utility:253:5:\
    \ note: candidate: \u2018template<class _Tp, class _Up> constexpr _Tp&& std::get(std::pair<_T1,\
    \ _T2>&&)\u2019\n  253 |     get(pair<_Tp, _Up>&& __p) noexcept\n      |     ^~~\n\
    /usr/include/c++/9/utility:253:5: note:   template argument deduction/substitution\
    \ failed:\n/usr/include/c++/9/utility:258:5: note: candidate: \u2018template<class\
    \ _Tp, class _Up> constexpr const _Tp&& std::get(const std::pair<_T1, _T2>&&)\u2019\
    \n  258 |     get(const pair<_Tp, _Up>&& __p) noexcept\n      |     ^~~\n/usr/include/c++/9/utility:258:5:\
    \ note:   template argument deduction/substitution failed:\n/usr/include/c++/9/utility:263:5:\
    \ note: candidate: \u2018template<class _Tp, class _Up> constexpr _Tp& std::get(std::pair<_Up,\
    \ _Tp>&)\u2019\n  263 |     get(pair<_Up, _Tp>& __p) noexcept\n      |     ^~~\n\
    /usr/include/c++/9/utility:263:5: note:   template argument deduction/substitution\
    \ failed:\n/usr/include/c++/9/utility:268:5: note: candidate: \u2018template<class\
    \ _Tp, class _Up> constexpr const _Tp& std::get(const std::pair<_Up, _Tp>&)\u2019\
    \n  268 |     get(const pair<_Up, _Tp>& __p) noexcept\n      |     ^~~\n/usr/include/c++/9/utility:268:5:\
    \ note:   template argument deduction/substitution failed:\n/usr/include/c++/9/utility:273:5:\
    \ note: candidate: \u2018template<class _Tp, class _Up> constexpr _Tp&& std::get(std::pair<_Up,\
    \ _Tp>&&)\u2019\n  273 |     get(pair<_Up, _Tp>&& __p) noexcept\n      |     ^~~\n\
    /usr/include/c++/9/utility:273:5: note:   template argument deduction/substitution\
    \ failed:\n/usr/include/c++/9/utility:278:5: note: candidate: \u2018template<class\
    \ _Tp, class _Up> constexpr const _Tp&& std::get(const std::pair<_Up, _Tp>&&)\u2019\
    \n  278 |     get(const pair<_Up, _Tp>&& __p) noexcept\n      |     ^~~\n/usr/include/c++/9/utility:278:5:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/9/tuple:39,\n                 from /usr/include/c++/9/functional:54,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmp4nzntvxj.cpp:2:\n/usr/include/c++/9/array:307:5:\
    \ note: candidate: \u2018template<long unsigned int _Int, class _Tp, long unsigned\
    \ int _Nm> constexpr _Tp& std::get(std::array<_Tp, _Nm>&)\u2019\n  307 |     get(array<_Tp,\
    \ _Nm>& __arr) noexcept\n      |     ^~~\n/usr/include/c++/9/array:307:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmp4nzntvxj.cpp:41:74:\
    \ note:   \u2018std::vector<std::tuple<long int, long int> >\u2019 is not derived\
    \ from \u2018std::array<_Tp, _Nm>\u2019\n   41 |         res.push_back(std::make_tuple(std::get<0>(temp),\
    \ std::get<1>(temp)));\n      |                                              \
    \                            ^\nIn file included from /usr/include/c++/9/tuple:39,\n\
    \                 from /usr/include/c++/9/functional:54,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n                 from\
    \ /tmp/tmp4nzntvxj.cpp:2:\n/usr/include/c++/9/array:316:5: note: candidate: \u2018\
    template<long unsigned int _Int, class _Tp, long unsigned int _Nm> constexpr _Tp&&\
    \ std::get(std::array<_Tp, _Nm>&&)\u2019\n  316 |     get(array<_Tp, _Nm>&& __arr)\
    \ noexcept\n      |     ^~~\n/usr/include/c++/9/array:316:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmp4nzntvxj.cpp:41:74: note: \
    \  \u2018std::vector<std::tuple<long int, long int> >\u2019 is not derived from\
    \ \u2018std::array<_Tp, _Nm>\u2019\n   41 |         res.push_back(std::make_tuple(std::get<0>(temp),\
    \ std::get<1>(temp)));\n      |                                              \
    \                            ^\nIn file included from /usr/include/c++/9/tuple:39,\n\
    \                 from /usr/include/c++/9/functional:54,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n                 from\
    \ /tmp/tmp4nzntvxj.cpp:2:\n/usr/include/c++/9/array:324:5: note: candidate: \u2018\
    template<long unsigned int _Int, class _Tp, long unsigned int _Nm> constexpr const\
    \ _Tp& std::get(const std::array<_Tp, _Nm>&)\u2019\n  324 |     get(const array<_Tp,\
    \ _Nm>& __arr) noexcept\n      |     ^~~\n/usr/include/c++/9/array:324:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmp4nzntvxj.cpp:41:74:\
    \ note:   \u2018std::vector<std::tuple<long int, long int> >\u2019 is not derived\
    \ from \u2018const std::array<_Tp, _Nm>\u2019\n   41 |         res.push_back(std::make_tuple(std::get<0>(temp),\
    \ std::get<1>(temp)));\n      |                                              \
    \                            ^\nIn file included from /usr/include/c++/9/tuple:39,\n\
    \                 from /usr/include/c++/9/functional:54,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n                 from\
    \ /tmp/tmp4nzntvxj.cpp:2:\n/usr/include/c++/9/array:333:5: note: candidate: \u2018\
    template<long unsigned int _Int, class _Tp, long unsigned int _Nm> constexpr const\
    \ _Tp&& std::get(const std::array<_Tp, _Nm>&&)\u2019\n  333 |     get(const array<_Tp,\
    \ _Nm>&& __arr) noexcept\n      |     ^~~\n/usr/include/c++/9/array:333:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmp4nzntvxj.cpp:41:74:\
    \ note:   \u2018std::vector<std::tuple<long int, long int> >\u2019 is not derived\
    \ from \u2018const std::array<_Tp, _Nm>\u2019\n   41 |         res.push_back(std::make_tuple(std::get<0>(temp),\
    \ std::get<1>(temp)));\n      |                                              \
    \                            ^\nIn file included from /usr/include/c++/9/functional:54,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmp4nzntvxj.cpp:2:\n/usr/include/c++/9/tuple:1320:5:\
    \ note: candidate: \u2018template<long unsigned int __i, class ... _Elements>\
    \ constexpr std::__tuple_element_t<__i, std::tuple<_Elements ...> >& std::get(std::tuple<_Elements\
    \ ...>&)\u2019\n 1320 |     get(tuple<_Elements...>& __t) noexcept\n      |  \
    \   ^~~\n/usr/include/c++/9/tuple:1320:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp4nzntvxj.cpp:41:74: note:   \u2018std::vector<std::tuple<long\
    \ int, long int> >\u2019 is not derived from \u2018std::tuple<_Elements ...>\u2019\
    \n   41 |         res.push_back(std::make_tuple(std::get<0>(temp), std::get<1>(temp)));\n\
    \      |                                                                     \
    \     ^\nIn file included from /usr/include/c++/9/functional:54,\n           \
    \      from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n          \
    \       from /tmp/tmp4nzntvxj.cpp:2:\n/usr/include/c++/9/tuple:1326:5: note: candidate:\
    \ \u2018template<long unsigned int __i, class ... _Elements> constexpr std::__tuple_element_t<__i,\
    \ std::tuple<_Elements ...> >& std::get(const std::tuple<_Elements ...>&)\u2019\
    \n 1326 |     get(const tuple<_Elements...>& __t) noexcept\n      |     ^~~\n\
    /usr/include/c++/9/tuple:1326:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp4nzntvxj.cpp:41:74: note:   \u2018std::vector<std::tuple<long\
    \ int, long int> >\u2019 is not derived from \u2018const std::tuple<_Elements\
    \ ...>\u2019\n   41 |         res.push_back(std::make_tuple(std::get<0>(temp),\
    \ std::get<1>(temp)));\n      |                                              \
    \                            ^\nIn file included from /usr/include/c++/9/functional:54,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmp4nzntvxj.cpp:2:\n/usr/include/c++/9/tuple:1332:5:\
    \ note: candidate: \u2018template<long unsigned int __i, class ... _Elements>\
    \ constexpr std::__tuple_element_t<__i, std::tuple<_Elements ...> >&& std::get(std::tuple<_Elements\
    \ ...>&&)\u2019\n 1332 |     get(tuple<_Elements...>&& __t) noexcept\n      |\
    \     ^~~\n/usr/include/c++/9/tuple:1332:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp4nzntvxj.cpp:41:74: note:   \u2018std::vector<std::tuple<long\
    \ int, long int> >\u2019 is not derived from \u2018std::tuple<_Elements ...>\u2019\
    \n   41 |         res.push_back(std::make_tuple(std::get<0>(temp), std::get<1>(temp)));\n\
    \      |                                                                     \
    \     ^\nIn file included from /usr/include/c++/9/functional:54,\n           \
    \      from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n          \
    \       from /tmp/tmp4nzntvxj.cpp:2:\n/usr/include/c++/9/tuple:1341:5: note: candidate:\
    \ \u2018template<long unsigned int __i, class ... _Elements> constexpr std::__tuple_element_t<__i,\
    \ std::tuple<_Elements ...> >&& std::get(const std::tuple<_Elements ...>&&)\u2019\
    \n 1341 |     get(const tuple<_Elements...>&& __t) noexcept\n      |     ^~~\n\
    /usr/include/c++/9/tuple:1341:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp4nzntvxj.cpp:41:74: note:   \u2018std::vector<std::tuple<long\
    \ int, long int> >\u2019 is not derived from \u2018const std::tuple<_Elements\
    \ ...>\u2019\n   41 |         res.push_back(std::make_tuple(std::get<0>(temp),\
    \ std::get<1>(temp)));\n      |                                              \
    \                            ^\nIn file included from /usr/include/c++/9/functional:54,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmp4nzntvxj.cpp:2:\n/usr/include/c++/9/tuple:1364:5:\
    \ note: candidate: \u2018template<class _Tp, class ... _Types> constexpr _Tp&\
    \ std::get(std::tuple<_Elements ...>&)\u2019\n 1364 |     get(tuple<_Types...>&\
    \ __t) noexcept\n      |     ^~~\n/usr/include/c++/9/tuple:1364:5: note:   template\
    \ argument deduction/substitution failed:\n/usr/include/c++/9/tuple:1370:5: note:\
    \ candidate: \u2018template<class _Tp, class ... _Types> constexpr _Tp&& std::get(std::tuple<_Elements\
    \ ...>&&)\u2019\n 1370 |     get(tuple<_Types...>&& __t) noexcept\n      |   \
    \  ^~~\n/usr/include/c++/9/tuple:1370:5: note:   template argument deduction/substitution\
    \ failed:\n/usr/include/c++/9/tuple:1376:5: note: candidate: \u2018template<class\
    \ _Tp, class ... _Types> constexpr const _Tp& std::get(const std::tuple<_Elements\
    \ ...>&)\u2019\n 1376 |     get(const tuple<_Types...>& __t) noexcept\n      |\
    \     ^~~\n/usr/include/c++/9/tuple:1376:5: note:   template argument deduction/substitution\
    \ failed:\n/usr/include/c++/9/tuple:1383:5: note: candidate: \u2018template<class\
    \ _Tp, class ... _Types> constexpr const _Tp&& std::get(const std::tuple<_Elements\
    \ ...>&&)\u2019\n 1383 |     get(const tuple<_Types...>&& __t) noexcept\n    \
    \  |     ^~~\n/usr/include/c++/9/tuple:1383:5: note:   template argument deduction/substitution\
    \ failed:\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    std::vector<std::tuple<long, long>> res;\n    res.reserve(lst.size());\n\
    \    for (auto &row : lst) {\n        std::sort(row.begin(), row.end());\n   \
    \     std::sort(row.rbegin(), row.rend());\n        res.push_back(std::make_tuple(row.front(),\
    \ row.back()));\n    }\n    std::sort(res.begin(), res.end());\n    return res;\n\
    }\nint main() {\n    auto candidate = get_row;\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "tmpw96bfc9w: /tmp/tmpw96bfc9w.cpp:32: int main(): Assertion `candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    // Your code here\n    std::vector<std::tuple<long, long>>\
    \ res;\n    for(auto &row : lst) {\n        for(auto &col : row) {\n         \
    \   if(col == x) {\n                res.push_back({row, col});\n            }\n\
    \        }\n    }\n    std::sort(res.begin(), res.end(), [](const std::tuple<long,\
    \ long> &a, const std::tuple<long, long> &b) { return std::get<0>(a) < std::get<0>(b);\
    \ });\n    std::sort(res.begin(), res.end(), [](const std::tuple<long, long> &a,\
    \ const std::tuple<long, long> &b) { return std::get<1>(a) < std::get<1>(b); });\n\
    \    return res;\n}\nint main() {\n    auto candidate = get_row;\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpb9cagome.cpp: In function \u2018std::vector<std::tuple<long int,\
    \ long int> > get_row(std::vector<std::vector<long int> >, long int)\u2019:\n\
    /tmp/tmpb9cagome.cpp:25:41: error: no matching function for call to \u2018std::vector<std::tuple<long\
    \ int, long int> >::push_back(<brace-enclosed initializer list>)\u2019\n   25\
    \ |                 res.push_back({row, col});\n      |                      \
    \                   ^\nIn file included from /usr/include/c++/9/vector:67,\n \
    \                from /usr/include/c++/9/queue:61,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:86,\n\
    \                 from /tmp/tmpb9cagome.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::tuple<long int, long int>; _Alloc = std::allocator<std::tuple<long\
    \ int, long int> >; std::vector<_Tp, _Alloc>::value_type = std::tuple<long int,\
    \ long int>]\u2019\n 1184 |       push_back(const value_type& __x)\n      |  \
    \     ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1184:35: note:   no known\
    \ conversion for argument 1 from \u2018<brace-enclosed initializer list>\u2019\
    \ to \u2018const value_type&\u2019 {aka \u2018const std::tuple<long int, long\
    \ int>&\u2019}\n 1184 |       push_back(const value_type& __x)\n      |      \
    \           ~~~~~~~~~~~~~~~~~~^~~\n/usr/include/c++/9/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = std::tuple<long int, long int>; _Alloc =\
    \ std::allocator<std::tuple<long int, long int> >; std::vector<_Tp, _Alloc>::value_type\
    \ = std::tuple<long int, long int>]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018<brace-enclosed initializer\
    \ list>\u2019 to \u2018std::vector<std::tuple<long int, long int> >::value_type&&\u2019\
    \ {aka \u2018std::tuple<long int, long int>&&\u2019}\n 1200 |       push_back(value_type&&\
    \ __x)\n      |                 ~~~~~~~~~~~~~^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    std::vector<std::tuple<long, long>> res;\n    long row =\
    \ 0;\n    long col = 0;\n    for (auto &i : lst) {\n        auto it = std::find(i.begin(),\
    \ i.end(), x);\n        if (it != i.end()) {\n            auto y = std::distance(it.base(),\
    \ i.begin());\n            auto x = std::distance(it.base(), it);\n          \
    \  res.emplace_back(row, col);\n            row += y;\n            col += x;\n\
    \        }\n    }\n    std::sort(res.begin(), res.end(), [](const std::tuple<long,\
    \ long> &a, const std::tuple<long, long> &b) {\n        return std::get<0>(a)\
    \ < std::get<0>(b);\n    });\n    std::sort(res.begin(), res.end(), [](const std::tuple<long,\
    \ long> &a, const std::tuple<long, long> &b) {\n        return std::get<1>(a)\
    \ < std::get<1>(b);\n    });\n    return res;\n}\nint main() {\n    auto candidate\
    \ = get_row;\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_yob3rup.cpp: In function \u2018std::vector<std::tuple<long int,\
    \ long int> > get_row(std::vector<std::vector<long int> >, long int)\u2019:\n\
    /tmp/tmp_yob3rup.cpp:26:56: error: no matching function for call to \u2018distance(long\
    \ int* const&, std::vector<long int>::iterator)\u2019\n   26 |             auto\
    \ y = std::distance(it.base(), i.begin());\n      |                          \
    \                              ^\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:66,\n\
    \                 from /usr/include/c++/9/bits/char_traits.h:39,\n           \
    \      from /usr/include/c++/9/ios:40,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp_yob3rup.cpp:2:\n/usr/include/c++/9/bits/stl_iterator_base_funcs.h:138:5:\
    \ note: candidate: \u2018template<class _InputIterator> typename std::iterator_traits<_Iterator>::difference_type\
    \ std::distance(_InputIterator, _InputIterator)\u2019\n  138 |     distance(_InputIterator\
    \ __first, _InputIterator __last)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator_base_funcs.h:138:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp_yob3rup.cpp:26:56:\
    \ note:   deduced conflicting types for parameter \u2018_InputIterator\u2019 (\u2018\
    long int*\u2019 and \u2018__gnu_cxx::__normal_iterator<long int*, std::vector<long\
    \ int> >\u2019)\n   26 |             auto y = std::distance(it.base(), i.begin());\n\
    \      |                                                        ^\n/tmp/tmp_yob3rup.cpp:27:49:\
    \ error: no matching function for call to \u2018distance(long int* const&, __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >&)\u2019\n   27 |             auto x = std::distance(it.base(),\
    \ it);\n      |                                                 ^\nIn file included\
    \ from /usr/include/c++/9/bits/stl_algobase.h:66,\n                 from /usr/include/c++/9/bits/char_traits.h:39,\n\
    \                 from /usr/include/c++/9/ios:40,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp_yob3rup.cpp:2:\n/usr/include/c++/9/bits/stl_iterator_base_funcs.h:138:5:\
    \ note: candidate: \u2018template<class _InputIterator> typename std::iterator_traits<_Iterator>::difference_type\
    \ std::distance(_InputIterator, _InputIterator)\u2019\n  138 |     distance(_InputIterator\
    \ __first, _InputIterator __last)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator_base_funcs.h:138:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp_yob3rup.cpp:27:49:\
    \ note:   deduced conflicting types for parameter \u2018_InputIterator\u2019 (\u2018\
    long int*\u2019 and \u2018__gnu_cxx::__normal_iterator<long int*, std::vector<long\
    \ int> >\u2019)\n   27 |             auto x = std::distance(it.base(), it);\n\
    \      |                                                 ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    std::vector<std::tuple<long, long>> res;\n    for(auto &row\
    \ : lst) {\n        for(auto &col : row) {\n            if(col == x) {\n     \
    \           res.push_back(std::make_tuple(row.size() - 1, col.size() - 1));\n\
    \            }\n        }\n    }\n    std::sort(res.begin(), res.end(), [](auto\
    \ &a, auto &b) { return std::get<0>(a) < std::get<0>(b); });\n    std::sort(res.begin(),\
    \ res.end(), [](auto &a, auto &b) { return std::get<1>(a) < std::get<1>(b); });\n\
    \    return res;\n}\nint main() {\n    auto candidate = get_row;\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5fb44v02.cpp: In function \u2018std::vector<std::tuple<long int,\
    \ long int> > get_row(std::vector<std::vector<long int> >, long int)\u2019:\n\
    /tmp/tmp5fb44v02.cpp:24:67: error: request for member \u2018size\u2019 in \u2018\
    col\u2019, which is of non-class type \u2018long int\u2019\n   24 |          \
    \       res.push_back(std::make_tuple(row.size() - 1, col.size() - 1));\n    \
    \  |                                                                   ^~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    std::vector<std::tuple<long, long>> res;\n    std::vector<long>\
    \ row;\n    std::vector<long> col;\n    long row_index = 0;\n    long col_index\
    \ = 0;\n    long row_size = lst.size();\n    long col_size = lst[0].size();\n\
    \    long row_sum = 0;\n    long col_sum = 0;\n    for (long i = 0; i < row_size;\
    \ i++) {\n        row.clear();\n        col.clear();\n        for (long j = 0;\
    \ j < col_size; j++) {\n            row.push_back(lst[i][j]);\n            col.push_back(j);\n\
    \        }\n        row_sum += row.size();\n        col_sum += col_size;\n   \
    \     if (row_sum == x) {\n            res.push_back(std::make_tuple(row_index,\
    \ col_index));\n            row_index++;\n            row_sum -= row.size();\n\
    \        } else if (col_sum == x) {\n            res.push_back(std::make_tuple(row_index,\
    \ col_index));\n            col_index--;\n            col_sum -= col_size;\n \
    \       }\n    }\n    return res;\n}\nint main() {\n    auto candidate = get_row;\n\
    \    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "tmpa42rbw9k: /tmp/tmpa42rbw9k.cpp:52: int main(): Assertion `candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    std::vector<std::tuple<long, long>> res;\n    std::vector<long>\
    \ row;\n    std::vector<long> col;\n    long row_index = 0;\n    long col_index\
    \ = 0;\n    for (auto &row : lst) {\n        row.clear();\n        col.clear();\n\
    \        for (auto &el : row) {\n            row.push_back(el);\n            col.push_back(el);\n\
    \        }\n        std::sort(row.begin(), row.end());\n        std::sort(col.begin(),\
    \ col.end());\n        if (row_index == row.size()) {\n            row_index =\
    \ 0;\n            col_index = 0;\n        }\n        if (col_index == col.size())\
    \ {\n            col_index = 0;\n        }\n        if (row_index == x && col_index\
    \ == x) {\n            res.push_back(std::make_tuple(row_index, col_index));\n\
    \        }\n        row_index++;\n        col_index++;\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = get_row;\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "tmphqffw5x0: /tmp/tmphqffw5x0.cpp:51: int main(): Assertion `candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    std::vector<std::tuple<long, long>> res;\n    long n = lst.size();\n\
    \    long m = lst[0].size();\n    long row = 0;\n    long col = 0;\n    long cnt\
    \ = 0;\n    long minRow = std::numeric_limits<long>::max();\n    long minCol =\
    \ std::numeric_limits<long>::max();\n    for (long i = 0; i < n; i++) {\n    \
    \    long row = i;\n        long col = i;\n        for (long j = 0; j < m; j++)\
    \ {\n            if (lst[i][j] == x) {\n                res.push_back(std::make_tuple(row,\
    \ col));\n                cnt++;\n            }\n            if (cnt > 1) {\n\
    \                minRow = std::min(minRow, row);\n                minCol = std::min(minCol,\
    \ col);\n            }\n        }\n    }\n    if (cnt < 2) {\n        return res;\n\
    \    }\n    for (long i = 0; i < n; i++) {\n        long row = i;\n        long\
    \ col = i;\n        for (long j = 0; j < m; j++) {\n            if (lst[i][j]\
    \ == x) {\n                res.push_back(std::make_tuple(row, col));\n       \
    \     }\n        }\n    }\n    std::sort(res.begin(), res.end(), [](std::tuple<long,\
    \ long> a, std::tuple<long, long> b) -> bool {\n        return std::get<0>(a)\
    \ < std::get<0>(b);\n    });\n    std::sort(res.begin(), res.end(), [](std::tuple<long,\
    \ long> a, std::tuple<long, long> b) -> bool {\n        return std::get<1>(a)\
    \ < std::get<1>(b);\n    });\n    return res;\n}\nint main() {\n    auto candidate\
    \ = get_row;\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "tmp2ap8061s: /tmp/tmp2ap8061s.cpp:64: int main(): Assertion `candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    std::vector<std::tuple<long, long>> res;\n    long n = lst.size();\n\
    \    long m = lst[0].size();\n    long i = 0;\n    long j = 0;\n    while (i <\
    \ n && j < m) {\n        if (lst[i][j] == x) {\n            res.push_back({i,\
    \ j});\n            i += 1;\n            j += 1;\n        } else if (lst[i][j]\
    \ > x) {\n            j += 1;\n        } else {\n            i += 1;\n       \
    \ }\n    }\n    return res;\n}\nint main() {\n    auto candidate = get_row;\n\
    \    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "tmpuz6008qy: /tmp/tmpuz6008qy.cpp:40: int main(): Assertion `candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    std::vector<std::tuple<long, long>> res;\n    std::vector<std::vector<long>>\
    \ temp;\n    long row = 0;\n    long col = 0;\n    for (auto &v : lst) {\n   \
    \     v.push_back(row);\n        temp.push_back(v);\n        row += 1;\n    }\n\
    \    for (auto &v : temp) {\n        v.push_back(col);\n        col += 1;\n  \
    \  }\n    std::sort(temp.begin(), temp.end(), [](auto &a, auto &b) { return std::get<0>(a)\
    \ < std::get<0>(b); });\n    std::sort(temp.begin(), temp.end(), [](auto &a, auto\
    \ &b) { return std::get<1>(a) < std::get<1>(b); });\n    for (auto &v : temp)\
    \ {\n        auto it = std::find(v.begin(), v.end(), x);\n        if (it != v.end())\
    \ {\n            res.push_back(std::make_tuple(std::get<0>(v), std::get<1>(v)));\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = get_row;\n\
    \    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp9nso5a8f.cpp: In function \u2018std::vector<std::tuple<long int,\
    \ long int> > get_row(std::vector<std::vector<long int> >, long int)\u2019:\n\
    /tmp/tmp9nso5a8f.cpp:38:56: error: no matching function for call to \u2018get<0>(std::vector<long\
    \ int>&)\u2019\n   38 |             res.push_back(std::make_tuple(std::get<0>(v),\
    \ std::get<1>(v)));\n      |                                                 \
    \       ^\nIn file included from /usr/include/c++/9/algorithm:60,\n          \
    \       from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n         \
    \        from /tmp/tmp9nso5a8f.cpp:2:\n/usr/include/c++/9/utility:219:5: note:\
    \ candidate: \u2018template<long unsigned int _Int, class _Tp1, class _Tp2> constexpr\
    \ typename std::tuple_element<_Int, std::pair<_Tp1, _Tp2> >::type& std::get(std::pair<_Tp1,\
    \ _Tp2>&)\u2019\n  219 |     get(std::pair<_Tp1, _Tp2>& __in) noexcept\n     \
    \ |     ^~~\n/usr/include/c++/9/utility:219:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp9nso5a8f.cpp:38:56: note:   \u2018std::vector<long int>\u2019\
    \ is not derived from \u2018std::pair<_Tp1, _Tp2>\u2019\n   38 |             res.push_back(std::make_tuple(std::get<0>(v),\
    \ std::get<1>(v)));\n      |                                                 \
    \       ^\nIn file included from /usr/include/c++/9/algorithm:60,\n          \
    \       from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n         \
    \        from /tmp/tmp9nso5a8f.cpp:2:\n/usr/include/c++/9/utility:224:5: note:\
    \ candidate: \u2018template<long unsigned int _Int, class _Tp1, class _Tp2> constexpr\
    \ typename std::tuple_element<_Int, std::pair<_Tp1, _Tp2> >::type&& std::get(std::pair<_Tp1,\
    \ _Tp2>&&)\u2019\n  224 |     get(std::pair<_Tp1, _Tp2>&& __in) noexcept\n   \
    \   |     ^~~\n/usr/include/c++/9/utility:224:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp9nso5a8f.cpp:38:56: note:   \u2018std::vector<long int>\u2019\
    \ is not derived from \u2018std::pair<_Tp1, _Tp2>\u2019\n   38 |             res.push_back(std::make_tuple(std::get<0>(v),\
    \ std::get<1>(v)));\n      |                                                 \
    \       ^\nIn file included from /usr/include/c++/9/algorithm:60,\n          \
    \       from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n         \
    \        from /tmp/tmp9nso5a8f.cpp:2:\n/usr/include/c++/9/utility:229:5: note:\
    \ candidate: \u2018template<long unsigned int _Int, class _Tp1, class _Tp2> constexpr\
    \ const typename std::tuple_element<_Int, std::pair<_Tp1, _Tp2> >::type& std::get(const\
    \ std::pair<_Tp1, _Tp2>&)\u2019\n  229 |     get(const std::pair<_Tp1, _Tp2>&\
    \ __in) noexcept\n      |     ^~~\n/usr/include/c++/9/utility:229:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmp9nso5a8f.cpp:38:56: note: \
    \  \u2018std::vector<long int>\u2019 is not derived from \u2018const std::pair<_Tp1,\
    \ _Tp2>\u2019\n   38 |             res.push_back(std::make_tuple(std::get<0>(v),\
    \ std::get<1>(v)));\n      |                                                 \
    \       ^\nIn file included from /usr/include/c++/9/algorithm:60,\n          \
    \       from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n         \
    \        from /tmp/tmp9nso5a8f.cpp:2:\n/usr/include/c++/9/utility:234:5: note:\
    \ candidate: \u2018template<long unsigned int _Int, class _Tp1, class _Tp2> constexpr\
    \ const typename std::tuple_element<_Int, std::pair<_Tp1, _Tp2> >::type&& std::get(const\
    \ std::pair<_Tp1, _Tp2>&&)\u2019\n  234 |     get(const std::pair<_Tp1, _Tp2>&&\
    \ __in) noexcept\n      |     ^~~\n/usr/include/c++/9/utility:234:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmp9nso5a8f.cpp:38:56: note: \
    \  \u2018std::vector<long int>\u2019 is not derived from \u2018const std::pair<_Tp1,\
    \ _Tp2>\u2019\n   38 |             res.push_back(std::make_tuple(std::get<0>(v),\
    \ std::get<1>(v)));\n      |                                                 \
    \       ^\nIn file included from /usr/include/c++/9/algorithm:60,\n          \
    \       from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n         \
    \        from /tmp/tmp9nso5a8f.cpp:2:\n/usr/include/c++/9/utility:243:5: note:\
    \ candidate: \u2018template<class _Tp, class _Up> constexpr _Tp& std::get(std::pair<_T1,\
    \ _T2>&)\u2019\n  243 |     get(pair<_Tp, _Up>& __p) noexcept\n      |     ^~~\n\
    /usr/include/c++/9/utility:243:5: note:   template argument deduction/substitution\
    \ failed:\n/usr/include/c++/9/utility:248:5: note: candidate: \u2018template<class\
    \ _Tp, class _Up> constexpr const _Tp& std::get(const std::pair<_T1, _T2>&)\u2019\
    \n  248 |     get(const pair<_Tp, _Up>& __p) noexcept\n      |     ^~~\n/usr/include/c++/9/utility:248:5:\
    \ note:   template argument deduction/substitution failed:\n/usr/include/c++/9/utility:253:5:\
    \ note: candidate: \u2018template<class _Tp, class _Up> constexpr _Tp&& std::get(std::pair<_T1,\
    \ _T2>&&)\u2019\n  253 |     get(pair<_Tp, _Up>&& __p) noexcept\n      |     ^~~\n\
    /usr/include/c++/9/utility:253:5: note:   template argument deduction/substitution\
    \ failed:\n/usr/include/c++/9/utility:258:5: note: candidate: \u2018template<class\
    \ _Tp, class _Up> constexpr const _Tp&& std::get(const std::pair<_T1, _T2>&&)\u2019\
    \n  258 |     get(const pair<_Tp, _Up>&& __p) noexcept\n      |     ^~~\n/usr/include/c++/9/utility:258:5:\
    \ note:   template argument deduction/substitution failed:\n/usr/include/c++/9/utility:263:5:\
    \ note: candidate: \u2018template<class _Tp, class _Up> constexpr _Tp& std::get(std::pair<_Up,\
    \ _Tp>&)\u2019\n  263 |     get(pair<_Up, _Tp>& __p) noexcept\n      |     ^~~\n\
    /usr/include/c++/9/utility:263:5: note:   template argument deduction/substitution\
    \ failed:\n/usr/include/c++/9/utility:268:5: note: candidate: \u2018template<class\
    \ _Tp, class _Up> constexpr const _Tp& std::get(const std::pair<_Up, _Tp>&)\u2019\
    \n  268 |     get(const pair<_Up, _Tp>& __p) noexcept\n      |     ^~~\n/usr/include/c++/9/utility:268:5:\
    \ note:   template argument deduction/substitution failed:\n/usr/include/c++/9/utility:273:5:\
    \ note: candidate: \u2018template<class _Tp, class _Up> constexpr _Tp&& std::get(std::pair<_Up,\
    \ _Tp>&&)\u2019\n  273 |     get(pair<_Up, _Tp>&& __p) noexcept\n      |     ^~~\n\
    /usr/include/c++/9/utility:273:5: note:   template argument deduction/substitution\
    \ failed:\n/usr/include/c++/9/utility:278:5: note: candidate: \u2018template<class\
    \ _Tp, class _Up> constexpr const _Tp&& std::get(const std::pair<_Up, _Tp>&&)\u2019\
    \n  278 |     get(const pair<_Up, _Tp>&& __p) noexcept\n      |     ^~~\n/usr/include/c++/9/utility:278:5:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/9/tuple:39,\n                 from /usr/include/c++/9/functional:54,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmp9nso5a8f.cpp:2:\n/usr/include/c++/9/array:307:5:\
    \ note: candidate: \u2018template<long unsigned int _Int, class _Tp, long unsigned\
    \ int _Nm> constexpr _Tp& std::get(std::array<_Tp, _Nm>&)\u2019\n  307 |     get(array<_Tp,\
    \ _Nm>& __arr) noexcept\n      |     ^~~\n/usr/include/c++/9/array:307:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmp9nso5a8f.cpp:38:56:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018std::array<_Tp,\
    \ _Nm>\u2019\n   38 |             res.push_back(std::make_tuple(std::get<0>(v),\
    \ std::get<1>(v)));\n      |                                                 \
    \       ^\nIn file included from /usr/include/c++/9/tuple:39,\n              \
    \   from /usr/include/c++/9/functional:54,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmp9nso5a8f.cpp:2:\n/usr/include/c++/9/array:316:5:\
    \ note: candidate: \u2018template<long unsigned int _Int, class _Tp, long unsigned\
    \ int _Nm> constexpr _Tp&& std::get(std::array<_Tp, _Nm>&&)\u2019\n  316 |   \
    \  get(array<_Tp, _Nm>&& __arr) noexcept\n      |     ^~~\n/usr/include/c++/9/array:316:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp9nso5a8f.cpp:38:56:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018std::array<_Tp,\
    \ _Nm>\u2019\n   38 |             res.push_back(std::make_tuple(std::get<0>(v),\
    \ std::get<1>(v)));\n      |                                                 \
    \       ^\nIn file included from /usr/include/c++/9/tuple:39,\n              \
    \   from /usr/include/c++/9/functional:54,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmp9nso5a8f.cpp:2:\n/usr/include/c++/9/array:324:5:\
    \ note: candidate: \u2018template<long unsigned int _Int, class _Tp, long unsigned\
    \ int _Nm> constexpr const _Tp& std::get(const std::array<_Tp, _Nm>&)\u2019\n\
    \  324 |     get(const array<_Tp, _Nm>& __arr) noexcept\n      |     ^~~\n/usr/include/c++/9/array:324:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp9nso5a8f.cpp:38:56:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::array<_Tp,\
    \ _Nm>\u2019\n   38 |             res.push_back(std::make_tuple(std::get<0>(v),\
    \ std::get<1>(v)));\n      |                                                 \
    \       ^\nIn file included from /usr/include/c++/9/tuple:39,\n              \
    \   from /usr/include/c++/9/functional:54,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmp9nso5a8f.cpp:2:\n/usr/include/c++/9/array:333:5:\
    \ note: candidate: \u2018template<long unsigned int _Int, class _Tp, long unsigned\
    \ int _Nm> constexpr const _Tp&& std::get(const std::array<_Tp, _Nm>&&)\u2019\n\
    \  333 |     get(const array<_Tp, _Nm>&& __arr) noexcept\n      |     ^~~\n/usr/include/c++/9/array:333:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp9nso5a8f.cpp:38:56:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::array<_Tp,\
    \ _Nm>\u2019\n   38 |             res.push_back(std::make_tuple(std::get<0>(v),\
    \ std::get<1>(v)));\n      |                                                 \
    \       ^\nIn file included from /usr/include/c++/9/functional:54,\n         \
    \        from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n        \
    \         from /tmp/tmp9nso5a8f.cpp:2:\n/usr/include/c++/9/tuple:1320:5: note:\
    \ candidate: \u2018template<long unsigned int __i, class ... _Elements> constexpr\
    \ std::__tuple_element_t<__i, std::tuple<_Elements ...> >& std::get(std::tuple<_Elements\
    \ ...>&)\u2019\n 1320 |     get(tuple<_Elements...>& __t) noexcept\n      |  \
    \   ^~~\n/usr/include/c++/9/tuple:1320:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp9nso5a8f.cpp:38:56: note:   \u2018std::vector<long int>\u2019\
    \ is not derived from \u2018std::tuple<_Elements ...>\u2019\n   38 |         \
    \    res.push_back(std::make_tuple(std::get<0>(v), std::get<1>(v)));\n      |\
    \                                                        ^\nIn file included from\
    \ /usr/include/c++/9/functional:54,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmp9nso5a8f.cpp:2:\n/usr/include/c++/9/tuple:1326:5:\
    \ note: candidate: \u2018template<long unsigned int __i, class ... _Elements>\
    \ constexpr std::__tuple_element_t<__i, std::tuple<_Elements ...> >& std::get(const\
    \ std::tuple<_Elements ...>&)\u2019\n 1326 |     get(const tuple<_Elements...>&\
    \ __t) noexcept\n      |     ^~~\n/usr/include/c++/9/tuple:1326:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmp9nso5a8f.cpp:38:56: note: \
    \  \u2018std::vector<long int>\u2019 is not derived from \u2018const std::tuple<_Elements\
    \ ...>\u2019\n   38 |             res.push_back(std::make_tuple(std::get<0>(v),\
    \ std::get<1>(v)));\n      |                                                 \
    \       ^\nIn file included from /usr/include/c++/9/functional:54,\n         \
    \        from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n        \
    \         from /tmp/tmp9nso5a8f.cpp:2:\n/usr/include/c++/9/tuple:1332:5: note:\
    \ candidate: \u2018template<long unsigned int __i, class ... _Elements> constexpr\
    \ std::__tuple_element_t<__i, std::tuple<_Elements ...> >&& std::get(std::tuple<_Elements\
    \ ...>&&)\u2019\n 1332 |     get(tuple<_Elements...>&& __t) noexcept\n      |\
    \     ^~~\n/usr/include/c++/9/tuple:1332:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp9nso5a8f.cpp:38:56: note:   \u2018std::vector<long int>\u2019\
    \ is not derived from \u2018std::tuple<_Elements ...>\u2019\n   38 |         \
    \    res.push_back(std::make_tuple(std::get<0>(v), std::get<1>(v)));\n      |\
    \                                                        ^\nIn file included from\
    \ /usr/include/c++/9/functional:54,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmp9nso5a8f.cpp:2:\n/usr/include/c++/9/tuple:1341:5:\
    \ note: candidate: \u2018template<long unsigned int __i, class ... _Elements>\
    \ constexpr std::__tuple_element_t<__i, std::tuple<_Elements ...> >&& std::get(const\
    \ std::tuple<_Elements ...>&&)\u2019\n 1341 |     get(const tuple<_Elements...>&&\
    \ __t) noexcept\n      |     ^~~\n/usr/include/c++/9/tuple:1341:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmp9nso5a8f.cpp:38:56: note: \
    \  \u2018std::vector<long int>\u2019 is not derived from \u2018const std::tuple<_Elements\
    \ ...>\u2019\n   38 |             res.push_back(std::make_tuple(std::get<0>(v),\
    \ std::get<1>(v)));\n      |                                                 \
    \       ^\nIn file included from /usr/include/c++/9/functional:54,\n         \
    \        from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n        \
    \         from /tmp/tmp9nso5a8f.cpp:2:\n/usr/include/c++/9/tuple:1364:5: note:\
    \ candidate: \u2018template<class _Tp, class ... _Types> constexpr _Tp& std::get(std::tuple<_Elements\
    \ ...>&)\u2019\n 1364 |     get(tuple<_Types...>& __t) noexcept\n      |     ^~~\n\
    /usr/include/c++/9/tuple:1364:5: note:   template argument deduction/substitution\
    \ failed:\n/usr/include/c++/9/tuple:1370:5: note: candidate: \u2018template<class\
    \ _Tp, class ... _Types> constexpr _Tp&& std::get(std::tuple<_Elements ...>&&)\u2019\
    \n 1370 |     get(tuple<_Types...>&& __t) noexcept\n      |     ^~~\n/usr/include/c++/9/tuple:1370:5:\
    \ note:   template argument deduction/substitution failed:\n/usr/include/c++/9/tuple:1376:5:\
    \ note: candidate: \u2018template<class _Tp, class ... _Types> constexpr const\
    \ _Tp& std::get(const std::tuple<_Elements ...>&)\u2019\n 1376 |     get(const\
    \ tuple<_Types...>& __t) noexcept\n      |     ^~~\n/usr/include/c++/9/tuple:1376:5:\
    \ note:   template argument deduction/substitution failed:\n/usr/include/c++/9/tuple:1383:5:\
    \ note: candidate: \u2018template<class _Tp, class ... _Types> constexpr const\
    \ _Tp&& std::get(const std::tuple<_Elements ...>&&)\u2019\n 1383 |     get(const\
    \ tuple<_Types...>&& __t) noexcept\n      |     ^~~\n/usr/include/c++/9/tuple:1383:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp9nso5a8f.cpp:38:72:\
    \ error: no matching function for call to \u2018get<1>(std::vector<long int>&)\u2019\
    \n   38 |             res.push_back(std::make_tuple(std::get<0>(v), std::get<1>(v)));\n\
    \      |                                                                     \
    \   ^\nIn file included from /usr/include/c++/9/algorithm:60,\n              \
    \   from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n             \
    \    from /tmp/tmp9nso5a8f.cpp:2:\n/usr/include/c++/9/utility:219:5: note: candidate:\
    \ \u2018template<long unsigned int _Int, class _Tp1, class _Tp2> constexpr typename\
    \ std::tuple_element<_Int, std::pair<_Tp1, _Tp2> >::type& std::get(std::pair<_Tp1,\
    \ _Tp2>&)\u2019\n  219 |     get(std::pair<_Tp1, _Tp2>& __in) noexcept\n     \
    \ |     ^~~\n/usr/include/c++/9/utility:219:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp9nso5a8f.cpp:38:72: note:   \u2018std::vector<long int>\u2019\
    \ is not derived from \u2018std::pair<_Tp1, _Tp2>\u2019\n   38 |             res.push_back(std::make_tuple(std::get<0>(v),\
    \ std::get<1>(v)));\n      |                                                 \
    \                       ^\nIn file included from /usr/include/c++/9/algorithm:60,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp9nso5a8f.cpp:2:\n/usr/include/c++/9/utility:224:5:\
    \ note: candidate: \u2018template<long unsigned int _Int, class _Tp1, class _Tp2>\
    \ constexpr typename std::tuple_element<_Int, std::pair<_Tp1, _Tp2> >::type&&\
    \ std::get(std::pair<_Tp1, _Tp2>&&)\u2019\n  224 |     get(std::pair<_Tp1, _Tp2>&&\
    \ __in) noexcept\n      |     ^~~\n/usr/include/c++/9/utility:224:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmp9nso5a8f.cpp:38:72: note: \
    \  \u2018std::vector<long int>\u2019 is not derived from \u2018std::pair<_Tp1,\
    \ _Tp2>\u2019\n   38 |             res.push_back(std::make_tuple(std::get<0>(v),\
    \ std::get<1>(v)));\n      |                                                 \
    \                       ^\nIn file included from /usr/include/c++/9/algorithm:60,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp9nso5a8f.cpp:2:\n/usr/include/c++/9/utility:229:5:\
    \ note: candidate: \u2018template<long unsigned int _Int, class _Tp1, class _Tp2>\
    \ constexpr const typename std::tuple_element<_Int, std::pair<_Tp1, _Tp2> >::type&\
    \ std::get(const std::pair<_Tp1, _Tp2>&)\u2019\n  229 |     get(const std::pair<_Tp1,\
    \ _Tp2>& __in) noexcept\n      |     ^~~\n/usr/include/c++/9/utility:229:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmp9nso5a8f.cpp:38:72:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::pair<_Tp1,\
    \ _Tp2>\u2019\n   38 |             res.push_back(std::make_tuple(std::get<0>(v),\
    \ std::get<1>(v)));\n      |                                                 \
    \                       ^\nIn file included from /usr/include/c++/9/algorithm:60,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp9nso5a8f.cpp:2:\n/usr/include/c++/9/utility:234:5:\
    \ note: candidate: \u2018template<long unsigned int _Int, class _Tp1, class _Tp2>\
    \ constexpr const typename std::tuple_element<_Int, std::pair<_Tp1, _Tp2> >::type&&\
    \ std::get(const std::pair<_Tp1, _Tp2>&&)\u2019\n  234 |     get(const std::pair<_Tp1,\
    \ _Tp2>&& __in) noexcept\n      |     ^~~\n/usr/include/c++/9/utility:234:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmp9nso5a8f.cpp:38:72:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::pair<_Tp1,\
    \ _Tp2>\u2019\n   38 |             res.push_back(std::make_tuple(std::get<0>(v),\
    \ std::get<1>(v)));\n      |                                                 \
    \                       ^\nIn file included from /usr/include/c++/9/algorithm:60,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp9nso5a8f.cpp:2:\n/usr/include/c++/9/utility:243:5:\
    \ note: candidate: \u2018template<class _Tp, class _Up> constexpr _Tp& std::get(std::pair<_T1,\
    \ _T2>&)\u2019\n  243 |     get(pair<_Tp, _Up>& __p) noexcept\n      |     ^~~\n\
    /usr/include/c++/9/utility:243:5: note:   template argument deduction/substitution\
    \ failed:\n/usr/include/c++/9/utility:248:5: note: candidate: \u2018template<class\
    \ _Tp, class _Up> constexpr const _Tp& std::get(const std::pair<_T1, _T2>&)\u2019\
    \n  248 |     get(const pair<_Tp, _Up>& __p) noexcept\n      |     ^~~\n/usr/include/c++/9/utility:248:5:\
    \ note:   template argument deduction/substitution failed:\n/usr/include/c++/9/utility:253:5:\
    \ note: candidate: \u2018template<class _Tp, class _Up> constexpr _Tp&& std::get(std::pair<_T1,\
    \ _T2>&&)\u2019\n  253 |     get(pair<_Tp, _Up>&& __p) noexcept\n      |     ^~~\n\
    /usr/include/c++/9/utility:253:5: note:   template argument deduction/substitution\
    \ failed:\n/usr/include/c++/9/utility:258:5: note: candidate: \u2018template<class\
    \ _Tp, class _Up> constexpr const _Tp&& std::get(const std::pair<_T1, _T2>&&)\u2019\
    \n  258 |     get(const pair<_Tp, _Up>&& __p) noexcept\n      |     ^~~\n/usr/include/c++/9/utility:258:5:\
    \ note:   template argument deduction/substitution failed:\n/usr/include/c++/9/utility:263:5:\
    \ note: candidate: \u2018template<class _Tp, class _Up> constexpr _Tp& std::get(std::pair<_Up,\
    \ _Tp>&)\u2019\n  263 |     get(pair<_Up, _Tp>& __p) noexcept\n      |     ^~~\n\
    /usr/include/c++/9/utility:263:5: note:   template argument deduction/substitution\
    \ failed:\n/usr/include/c++/9/utility:268:5: note: candidate: \u2018template<class\
    \ _Tp, class _Up> constexpr const _Tp& std::get(const std::pair<_Up, _Tp>&)\u2019\
    \n  268 |     get(const pair<_Up, _Tp>& __p) noexcept\n      |     ^~~\n/usr/include/c++/9/utility:268:5:\
    \ note:   template argument deduction/substitution failed:\n/usr/include/c++/9/utility:273:5:\
    \ note: candidate: \u2018template<class _Tp, class _Up> constexpr _Tp&& std::get(std::pair<_Up,\
    \ _Tp>&&)\u2019\n  273 |     get(pair<_Up, _Tp>&& __p) noexcept\n      |     ^~~\n\
    /usr/include/c++/9/utility:273:5: note:   template argument deduction/substitution\
    \ failed:\n/usr/include/c++/9/utility:278:5: note: candidate: \u2018template<class\
    \ _Tp, class _Up> constexpr const _Tp&& std::get(const std::pair<_Up, _Tp>&&)\u2019\
    \n  278 |     get(const pair<_Up, _Tp>&& __p) noexcept\n      |     ^~~\n/usr/include/c++/9/utility:278:5:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/9/tuple:39,\n                 from /usr/include/c++/9/functional:54,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmp9nso5a8f.cpp:2:\n/usr/include/c++/9/array:307:5:\
    \ note: candidate: \u2018template<long unsigned int _Int, class _Tp, long unsigned\
    \ int _Nm> constexpr _Tp& std::get(std::array<_Tp, _Nm>&)\u2019\n  307 |     get(array<_Tp,\
    \ _Nm>& __arr) noexcept\n      |     ^~~\n/usr/include/c++/9/array:307:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmp9nso5a8f.cpp:38:72:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018std::array<_Tp,\
    \ _Nm>\u2019\n   38 |             res.push_back(std::make_tuple(std::get<0>(v),\
    \ std::get<1>(v)));\n      |                                                 \
    \                       ^\nIn file included from /usr/include/c++/9/tuple:39,\n\
    \                 from /usr/include/c++/9/functional:54,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n                 from\
    \ /tmp/tmp9nso5a8f.cpp:2:\n/usr/include/c++/9/array:316:5: note: candidate: \u2018\
    template<long unsigned int _Int, class _Tp, long unsigned int _Nm> constexpr _Tp&&\
    \ std::get(std::array<_Tp, _Nm>&&)\u2019\n  316 |     get(array<_Tp, _Nm>&& __arr)\
    \ noexcept\n      |     ^~~\n/usr/include/c++/9/array:316:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmp9nso5a8f.cpp:38:72: note: \
    \  \u2018std::vector<long int>\u2019 is not derived from \u2018std::array<_Tp,\
    \ _Nm>\u2019\n   38 |             res.push_back(std::make_tuple(std::get<0>(v),\
    \ std::get<1>(v)));\n      |                                                 \
    \                       ^\nIn file included from /usr/include/c++/9/tuple:39,\n\
    \                 from /usr/include/c++/9/functional:54,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n                 from\
    \ /tmp/tmp9nso5a8f.cpp:2:\n/usr/include/c++/9/array:324:5: note: candidate: \u2018\
    template<long unsigned int _Int, class _Tp, long unsigned int _Nm> constexpr const\
    \ _Tp& std::get(const std::array<_Tp, _Nm>&)\u2019\n  324 |     get(const array<_Tp,\
    \ _Nm>& __arr) noexcept\n      |     ^~~\n/usr/include/c++/9/array:324:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmp9nso5a8f.cpp:38:72:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::array<_Tp,\
    \ _Nm>\u2019\n   38 |             res.push_back(std::make_tuple(std::get<0>(v),\
    \ std::get<1>(v)));\n      |                                                 \
    \                       ^\nIn file included from /usr/include/c++/9/tuple:39,\n\
    \                 from /usr/include/c++/9/functional:54,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n                 from\
    \ /tmp/tmp9nso5a8f.cpp:2:\n/usr/include/c++/9/array:333:5: note: candidate: \u2018\
    template<long unsigned int _Int, class _Tp, long unsigned int _Nm> constexpr const\
    \ _Tp&& std::get(const std::array<_Tp, _Nm>&&)\u2019\n  333 |     get(const array<_Tp,\
    \ _Nm>&& __arr) noexcept\n      |     ^~~\n/usr/include/c++/9/array:333:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmp9nso5a8f.cpp:38:72:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::array<_Tp,\
    \ _Nm>\u2019\n   38 |             res.push_back(std::make_tuple(std::get<0>(v),\
    \ std::get<1>(v)));\n      |                                                 \
    \                       ^\nIn file included from /usr/include/c++/9/functional:54,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmp9nso5a8f.cpp:2:\n/usr/include/c++/9/tuple:1320:5:\
    \ note: candidate: \u2018template<long unsigned int __i, class ... _Elements>\
    \ constexpr std::__tuple_element_t<__i, std::tuple<_Elements ...> >& std::get(std::tuple<_Elements\
    \ ...>&)\u2019\n 1320 |     get(tuple<_Elements...>& __t) noexcept\n      |  \
    \   ^~~\n/usr/include/c++/9/tuple:1320:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp9nso5a8f.cpp:38:72: note:   \u2018std::vector<long int>\u2019\
    \ is not derived from \u2018std::tuple<_Elements ...>\u2019\n   38 |         \
    \    res.push_back(std::make_tuple(std::get<0>(v), std::get<1>(v)));\n      |\
    \                                                                        ^\nIn\
    \ file included from /usr/include/c++/9/functional:54,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n                 from\
    \ /tmp/tmp9nso5a8f.cpp:2:\n/usr/include/c++/9/tuple:1326:5: note: candidate: \u2018\
    template<long unsigned int __i, class ... _Elements> constexpr std::__tuple_element_t<__i,\
    \ std::tuple<_Elements ...> >& std::get(const std::tuple<_Elements ...>&)\u2019\
    \n 1326 |     get(const tuple<_Elements...>& __t) noexcept\n      |     ^~~\n\
    /usr/include/c++/9/tuple:1326:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp9nso5a8f.cpp:38:72: note:   \u2018std::vector<long int>\u2019\
    \ is not derived from \u2018const std::tuple<_Elements ...>\u2019\n   38 |   \
    \          res.push_back(std::make_tuple(std::get<0>(v), std::get<1>(v)));\n \
    \     |                                                                      \
    \  ^\nIn file included from /usr/include/c++/9/functional:54,\n              \
    \   from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n             \
    \    from /tmp/tmp9nso5a8f.cpp:2:\n/usr/include/c++/9/tuple:1332:5: note: candidate:\
    \ \u2018template<long unsigned int __i, class ... _Elements> constexpr std::__tuple_element_t<__i,\
    \ std::tuple<_Elements ...> >&& std::get(std::tuple<_Elements ...>&&)\u2019\n\
    \ 1332 |     get(tuple<_Elements...>&& __t) noexcept\n      |     ^~~\n/usr/include/c++/9/tuple:1332:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp9nso5a8f.cpp:38:72:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018std::tuple<_Elements\
    \ ...>\u2019\n   38 |             res.push_back(std::make_tuple(std::get<0>(v),\
    \ std::get<1>(v)));\n      |                                                 \
    \                       ^\nIn file included from /usr/include/c++/9/functional:54,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmp9nso5a8f.cpp:2:\n/usr/include/c++/9/tuple:1341:5:\
    \ note: candidate: \u2018template<long unsigned int __i, class ... _Elements>\
    \ constexpr std::__tuple_element_t<__i, std::tuple<_Elements ...> >&& std::get(const\
    \ std::tuple<_Elements ...>&&)\u2019\n 1341 |     get(const tuple<_Elements...>&&\
    \ __t) noexcept\n      |     ^~~\n/usr/include/c++/9/tuple:1341:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmp9nso5a8f.cpp:38:72: note: \
    \  \u2018std::vector<long int>\u2019 is not derived from \u2018const std::tuple<_Elements\
    \ ...>\u2019\n   38 |             res.push_back(std::make_tuple(std::get<0>(v),\
    \ std::get<1>(v)));\n      |                                                 \
    \                       ^\nIn file included from /usr/include/c++/9/functional:54,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmp9nso5a8f.cpp:2:\n/usr/include/c++/9/tuple:1364:5:\
    \ note: candidate: \u2018template<class _Tp, class ... _Types> constexpr _Tp&\
    \ std::get(std::tuple<_Elements ...>&)\u2019\n 1364 |     get(tuple<_Types...>&\
    \ __t) noexcept\n      |     ^~~\n/usr/include/c++/9/tuple:1364:5: note:   template\
    \ argument deduction/substitution failed:\n/usr/include/c++/9/tuple:1370:5: note:\
    \ candidate: \u2018template<class _Tp, class ... _Types> constexpr _Tp&& std::get(std::tuple<_Elements\
    \ ...>&&)\u2019\n 1370 |     get(tuple<_Types...>&& __t) noexcept\n      |   \
    \  ^~~\n/usr/include/c++/9/tuple:1370:5: note:   template argument deduction/substitution\
    \ failed:\n/usr/include/c++/9/tuple:1376:5: note: candidate: \u2018template<class\
    \ _Tp, class ... _Types> constexpr const _Tp& std::get(const std::tuple<_Elements\
    \ ...>&)\u2019\n 1376 |     get(const tuple<_Types...>& __t) noexcept\n      |\
    \     ^~~\n/usr/include/c++/9/tuple:1376:5: note:   template argument deduction/substitution\
    \ failed:\n/usr/include/c++/9/tuple:1383:5: note: candidate: \u2018template<class\
    \ _Tp, class ... _Types> constexpr const _Tp&& std::get(const std::tuple<_Elements\
    \ ...>&&)\u2019\n 1383 |     get(const tuple<_Types...>&& __t) noexcept\n    \
    \  |     ^~~\n/usr/include/c++/9/tuple:1383:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp9nso5a8f.cpp: In instantiation of \u2018get_row(std::vector<std::vector<long\
    \ int> >, long int)::<lambda(auto:1&, auto:2&)> [with auto:1 = std::vector<long\
    \ int>; auto:2 = std::vector<long int>]\u2019:\n/usr/include/c++/9/bits/predefined_ops.h:143:18:\
    \   required from \u2018constexpr bool __gnu_cxx::__ops::_Iter_comp_iter<_Compare>::operator()(_Iterator1,\
    \ _Iterator2) [with _Iterator1 = __gnu_cxx::__normal_iterator<std::vector<long\
    \ int>*, std::vector<std::vector<long int> > >; _Iterator2 = __gnu_cxx::__normal_iterator<std::vector<long\
    \ int>*, std::vector<std::vector<long int> > >; _Compare = get_row(std::vector<std::vector<long\
    \ int> >, long int)::<lambda(auto:1&, auto:2&)>]\u2019\n/usr/include/c++/9/bits/stl_algo.h:81:17:\
    \   required from \u2018void std::__move_median_to_first(_Iterator, _Iterator,\
    \ _Iterator, _Iterator, _Compare) [with _Iterator = __gnu_cxx::__normal_iterator<std::vector<long\
    \ int>*, std::vector<std::vector<long int> > >; _Compare = __gnu_cxx::__ops::_Iter_comp_iter<get_row(std::vector<std::vector<long\
    \ int> >, long int)::<lambda(auto:1&, auto:2&)> >]\u2019\n/usr/include/c++/9/bits/stl_algo.h:1926:34:\
    \   required from \u2018_RandomAccessIterator std::__unguarded_partition_pivot(_RandomAccessIterator,\
    \ _RandomAccessIterator, _Compare) [with _RandomAccessIterator = __gnu_cxx::__normal_iterator<std::vector<long\
    \ int>*, std::vector<std::vector<long int> > >; _Compare = __gnu_cxx::__ops::_Iter_comp_iter<get_row(std::vector<std::vector<long\
    \ int> >, long int)::<lambda(auto:1&, auto:2&)> >]\u2019\n/usr/include/c++/9/bits/stl_algo.h:1958:38:\
    \   required from \u2018void std::__introsort_loop(_RandomAccessIterator, _RandomAccessIterator,\
    \ _Size, _Compare) [with _RandomAccessIterator = __gnu_cxx::__normal_iterator<std::vector<long\
    \ int>*, std::vector<std::vector<long int> > >; _Size = long int; _Compare = __gnu_cxx::__ops::_Iter_comp_iter<get_row(std::vector<std::vector<long\
    \ int> >, long int)::<lambda(auto:1&, auto:2&)> >]\u2019\n/usr/include/c++/9/bits/stl_algo.h:1973:25:\
    \   required from \u2018void std::__sort(_RandomAccessIterator, _RandomAccessIterator,\
    \ _Compare) [with _RandomAccessIterator = __gnu_cxx::__normal_iterator<std::vector<long\
    \ int>*, std::vector<std::vector<long int> > >; _Compare = __gnu_cxx::__ops::_Iter_comp_iter<get_row(std::vector<std::vector<long\
    \ int> >, long int)::<lambda(auto:1&, auto:2&)> >]\u2019\n/usr/include/c++/9/bits/stl_algo.h:4905:18:\
    \   required from \u2018void std::sort(_RAIter, _RAIter, _Compare) [with _RAIter\
    \ = __gnu_cxx::__normal_iterator<std::vector<long int>*, std::vector<std::vector<long\
    \ int> > >; _Compare = get_row(std::vector<std::vector<long int> >, long int)::<lambda(auto:1&,\
    \ auto:2&)>]\u2019\n/tmp/tmp9nso5a8f.cpp:33:105:   required from here\n/tmp/tmp9nso5a8f.cpp:33:82:\
    \ error: no matching function for call to \u2018get<0>(std::vector<long int>&)\u2019\
    \n   33 |     std::sort(temp.begin(), temp.end(), [](auto &a, auto &b) { return\
    \ std::get<0>(a) < std::get<0>(b); });\n      |                              \
    \                                         ~~~~~~~~~~~^~~\nIn file included from\
    \ /usr/include/c++/9/algorithm:60,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp9nso5a8f.cpp:2:\n/usr/include/c++/9/utility:219:5:\
    \ note: candidate: \u2018template<long unsigned int _Int, class _Tp1, class _Tp2>\
    \ constexpr typename std::tuple_element<_Int, std::pair<_Tp1, _Tp2> >::type& std::get(std::pair<_Tp1,\
    \ _Tp2>&)\u2019\n  219 |     get(std::pair<_Tp1, _Tp2>& __in) noexcept\n     \
    \ |     ^~~\n/usr/include/c++/9/utility:219:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp9nso5a8f.cpp:33:82: note:   \u2018std::vector<long int>\u2019\
    \ is not derived from \u2018std::pair<_Tp1, _Tp2>\u2019\n   33 |     std::sort(temp.begin(),\
    \ temp.end(), [](auto &a, auto &b) { return std::get<0>(a) < std::get<0>(b); });\n\
    \      |                                                                     \
    \  ~~~~~~~~~~~^~~\nIn file included from /usr/include/c++/9/algorithm:60,\n  \
    \               from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n \
    \                from /tmp/tmp9nso5a8f.cpp:2:\n/usr/include/c++/9/utility:224:5:\
    \ note: candidate: \u2018template<long unsigned int _Int, class _Tp1, class _Tp2>\
    \ constexpr typename std::tuple_element<_Int, std::pair<_Tp1, _Tp2> >::type&&\
    \ std::get(std::pair<_Tp1, _Tp2>&&)\u2019\n  224 |     get(std::pair<_Tp1, _Tp2>&&\
    \ __in) noexcept\n      |     ^~~\n/usr/include/c++/9/utility:224:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmp9nso5a8f.cpp:33:82: note: \
    \  \u2018std::vector<long int>\u2019 is not derived from \u2018std::pair<_Tp1,\
    \ _Tp2>\u2019\n   33 |     std::sort(temp.begin(), temp.end(), [](auto &a, auto\
    \ &b) { return std::get<0>(a) < std::get<0>(b); });\n      |                 \
    \                                                      ~~~~~~~~~~~^~~\nIn file\
    \ included from /usr/include/c++/9/algorithm:60,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp9nso5a8f.cpp:2:\n/usr/include/c++/9/utility:229:5:\
    \ note: candidate: \u2018template<long unsigned int _Int, class _Tp1, class _Tp2>\
    \ constexpr const typename std::tuple_element<_Int, std::pair<_Tp1, _Tp2> >::type&\
    \ std::get(const std::pair<_Tp1, _Tp2>&)\u2019\n  229 |     get(const std::pair<_Tp1,\
    \ _Tp2>& __in) noexcept\n      |     ^~~\n/usr/include/c++/9/utility:229:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmp9nso5a8f.cpp:33:82:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::pair<_Tp1,\
    \ _Tp2>\u2019\n   33 |     std::sort(temp.begin(), temp.end(), [](auto &a, auto\
    \ &b) { return std::get<0>(a) < std::get<0>(b); });\n      |                 \
    \                                                      ~~~~~~~~~~~^~~\nIn file\
    \ included from /usr/include/c++/9/algorithm:60,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp9nso5a8f.cpp:2:\n/usr/include/c++/9/utility:234:5:\
    \ note: candidate: \u2018template<long unsigned int _Int, class _Tp1, class _Tp2>\
    \ constexpr const typename std::tuple_element<_Int, std::pair<_Tp1, _Tp2> >::type&&\
    \ std::get(const std::pair<_Tp1, _Tp2>&&)\u2019\n  234 |     get(const std::pair<_Tp1,\
    \ _Tp2>&& __in) noexcept\n      |     ^~~\n/usr/include/c++/9/utility:234:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmp9nso5a8f.cpp:33:82:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::pair<_Tp1,\
    \ _Tp2>\u2019\n   33 |     std::sort(temp.begin(), temp.end(), [](auto &a, auto\
    \ &b) { return std::get<0>(a) < std::get<0>(b); });\n      |                 \
    \                                                      ~~~~~~~~~~~^~~\nIn file\
    \ included from /usr/include/c++/9/algorithm:60,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp9nso5a8f.cpp:2:\n/usr/include/c++/9/utility:243:5:\
    \ note: candidate: \u2018template<class _Tp, class _Up> constexpr _Tp& std::get(std::pair<_T1,\
    \ _T2>&)\u2019\n  243 |     get(pair<_Tp, _Up>& __p) noexcept\n      |     ^~~\n\
    /usr/include/c++/9/utility:243:5: note:   template argument deduction/substitution\
    \ failed:\n/usr/include/c++/9/utility:248:5: note: candidate: \u2018template<class\
    \ _Tp, class _Up> constexpr const _Tp& std::get(const std::pair<_T1, _T2>&)\u2019\
    \n  248 |     get(const pair<_Tp, _Up>& __p) noexcept\n      |     ^~~\n/usr/include/c++/9/utility:248:5:\
    \ note:   template argument deduction/substitution failed:\n/usr/include/c++/9/utility:253:5:\
    \ note: candidate: \u2018template<class _Tp, class _Up> constexpr _Tp&& std::get(std::pair<_T1,\
    \ _T2>&&)\u2019\n  253 |     get(pair<_Tp, _Up>&& __p) noexcept\n      |     ^~~\n\
    /usr/include/c++/9/utility:253:5: note:   template argument deduction/substitution\
    \ failed:\n/usr/include/c++/9/utility:258:5: note: candidate: \u2018template<class\
    \ _Tp, class _Up> constexpr const _Tp&& std::get(const std::pair<_T1, _T2>&&)\u2019\
    \n  258 |     get(const pair<_Tp, _Up>&& __p) noexcept\n      |     ^~~\n/usr/include/c++/9/utility:258:5:\
    \ note:   template argument deduction/substitution failed:\n/usr/include/c++/9/utility:263:5:\
    \ note: candidate: \u2018template<class _Tp, class _Up> constexpr _Tp& std::get(std::pair<_Up,\
    \ _Tp>&)\u2019\n  263 |     get(pair<_Up, _Tp>& __p) noexcept\n      |     ^~~\n\
    /usr/include/c++/9/utility:263:5: note:   template argument deduction/substitution\
    \ failed:\n/usr/include/c++/9/utility:268:5: note: candidate: \u2018template<class\
    \ _Tp, class _Up> constexpr const _Tp& std::get(const std::pair<_Up, _Tp>&)\u2019\
    \n  268 |     get(const pair<_Up, _Tp>& __p) noexcept\n      |     ^~~\n/usr/include/c++/9/utility:268:5:\
    \ note:   template argument deduction/substitution failed:\n/usr/include/c++/9/utility:273:5:\
    \ note: candidate: \u2018template<class _Tp, class _Up> constexpr _Tp&& std::get(std::pair<_Up,\
    \ _Tp>&&)\u2019\n  273 |     get(pair<_Up, _Tp>&& __p) noexcept\n      |     ^~~\n\
    /usr/include/c++/9/utility:273:5: note:   template argument deduction/substitution\
    \ failed:\n/usr/include/c++/9/utility:278:5: note: candidate: \u2018template<class\
    \ _Tp, class _Up> constexpr const _Tp&& std::get(const std::pair<_Up, _Tp>&&)\u2019\
    \n  278 |     get(const pair<_Up, _Tp>&& __p) noexcept\n      |     ^~~\n/usr/include/c++/9/utility:278:5:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/9/tuple:39,\n                 from /usr/include/c++/9/functional:54,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmp9nso5a8f.cpp:2:\n/usr/include/c++/9/array:307:5:\
    \ note: candidate: \u2018template<long unsigned int _Int, class _Tp, long unsigned\
    \ int _Nm> constexpr _Tp& std::get(std::array<_Tp, _Nm>&)\u2019\n  307 |     get(array<_Tp,\
    \ _Nm>& __arr) noexcept\n      |     ^~~\n/usr/include/c++/9/array:307:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmp9nso5a8f.cpp:33:82:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018std::array<_Tp,\
    \ _Nm>\u2019\n   33 |     std::sort(temp.begin(), temp.end(), [](auto &a, auto\
    \ &b) { return std::get<0>(a) < std::get<0>(b); });\n      |                 \
    \                                                      ~~~~~~~~~~~^~~\nIn file\
    \ included from /usr/include/c++/9/tuple:39,\n                 from /usr/include/c++/9/functional:54,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmp9nso5a8f.cpp:2:\n/usr/include/c++/9/array:316:5:\
    \ note: candidate: \u2018template<long unsigned int _Int, class _Tp, long unsigned\
    \ int _Nm> constexpr _Tp&& std::get(std::array<_Tp, _Nm>&&)\u2019\n  316 |   \
    \  get(array<_Tp, _Nm>&& __arr) noexcept\n      |     ^~~\n/usr/include/c++/9/array:316:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp9nso5a8f.cpp:33:82:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018std::array<_Tp,\
    \ _Nm>\u2019\n   33 |     std::sort(temp.begin(), temp.end(), [](auto &a, auto\
    \ &b) { return std::get<0>(a) < std::get<0>(b); });\n      |                 \
    \                                                      ~~~~~~~~~~~^~~\nIn file\
    \ included from /usr/include/c++/9/tuple:39,\n                 from /usr/include/c++/9/functional:54,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmp9nso5a8f.cpp:2:\n/usr/include/c++/9/array:324:5:\
    \ note: candidate: \u2018template<long unsigned int _Int, class _Tp, long unsigned\
    \ int _Nm> constexpr const _Tp& std::get(const std::array<_Tp, _Nm>&)\u2019\n\
    \  324 |     get(const array<_Tp, _Nm>& __arr) noexcept\n      |     ^~~\n/usr/include/c++/9/array:324:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp9nso5a8f.cpp:33:82:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::array<_Tp,\
    \ _Nm>\u2019\n   33 |     std::sort(temp.begin(), temp.end(), [](auto &a, auto\
    \ &b) { return std::get<0>(a) < std::get<0>(b); });\n      |                 \
    \                                                      ~~~~~~~~~~~^~~\nIn file\
    \ included from /usr/include/c++/9/tuple:39,\n                 from /usr/include/c++/9/functional:54,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmp9nso5a8f.cpp:2:\n/usr/include/c++/9/array:333:5:\
    \ note: candidate: \u2018template<long unsigned int _Int, class _Tp, long unsigned\
    \ int _Nm> constexpr const _Tp&& std::get(const std::array<_Tp, _Nm>&&)\u2019\n\
    \  333 |     get(const array<_Tp, _Nm>&& __arr) noexcept\n      |     ^~~\n/usr/include/c++/9/array:333:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp9nso5a8f.cpp:33:82:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::array<_Tp,\
    \ _Nm>\u2019\n   33 |     std::sort(temp.begin(), temp.end(), [](auto &a, auto\
    \ &b) { return std::get<0>(a) < std::get<0>(b); });\n      |                 \
    \                                                      ~~~~~~~~~~~^~~\nIn file\
    \ included from /usr/include/c++/9/functional:54,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmp9nso5a8f.cpp:2:\n/usr/include/c++/9/tuple:1320:5:\
    \ note: candidate: \u2018template<long unsigned int __i, class ... _Elements>\
    \ constexpr std::__tuple_element_t<__i, std::tuple<_Elements ...> >& std::get(std::tuple<_Elements\
    \ ...>&)\u2019\n 1320 |     get(tuple<_Elements...>& __t) noexcept\n      |  \
    \   ^~~\n/usr/include/c++/9/tuple:1320:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp9nso5a8f.cpp:33:82: note:   \u2018std::vector<long int>\u2019\
    \ is not derived from \u2018std::tuple<_Elements ...>\u2019\n   33 |     std::sort(temp.begin(),\
    \ temp.end(), [](auto &a, auto &b) { return std::get<0>(a) < std::get<0>(b); });\n\
    \      |                                                                     \
    \  ~~~~~~~~~~~^~~\nIn file included from /usr/include/c++/9/functional:54,\n \
    \                from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmp9nso5a8f.cpp:2:\n/usr/include/c++/9/tuple:1326:5:\
    \ note: candidate: \u2018template<long unsigned int __i, class ... _Elements>\
    \ constexpr std::__tuple_element_t<__i, std::tuple<_Elements ...> >& std::get(const\
    \ std::tuple<_Elements ...>&)\u2019\n 1326 |     get(const tuple<_Elements...>&\
    \ __t) noexcept\n      |     ^~~\n/usr/include/c++/9/tuple:1326:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmp9nso5a8f.cpp:33:82: note: \
    \  \u2018std::vector<long int>\u2019 is not derived from \u2018const std::tuple<_Elements\
    \ ...>\u2019\n   33 |     std::sort(temp.begin(), temp.end(), [](auto &a, auto\
    \ &b) { return std::get<0>(a) < std::get<0>(b); });\n      |                 \
    \                                                      ~~~~~~~~~~~^~~\nIn file\
    \ included from /usr/include/c++/9/functional:54,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmp9nso5a8f.cpp:2:\n/usr/include/c++/9/tuple:1332:5:\
    \ note: candidate: \u2018template<long unsigned int __i, class ... _Elements>\
    \ constexpr std::__tuple_element_t<__i, std::tuple<_Elements ...> >&& std::get(std::tuple<_Elements\
    \ ...>&&)\u2019\n 1332 |     get(tuple<_Elements...>&& __t) noexcept\n      |\
    \     ^~~\n/usr/include/c++/9/tuple:1332:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp9nso5a8f.cpp:33:82: note:   \u2018std::vector<long int>\u2019\
    \ is not derived from \u2018std::tuple<_Elements ...>\u2019\n   33 |     std::sort(temp.begin(),\
    \ temp.end(), [](auto &a, auto &b) { return std::get<0>(a) < std::get<0>(b); });\n\
    \      |                                                                     \
    \  ~~~~~~~~~~~^~~\nIn file included from /usr/include/c++/9/functional:54,\n \
    \                from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmp9nso5a8f.cpp:2:\n/usr/include/c++/9/tuple:1341:5:\
    \ note: candidate: \u2018template<long unsigned int __i, class ... _Elements>\
    \ constexpr std::__tuple_element_t<__i, std::tuple<_Elements ...> >&& std::get(const\
    \ std::tuple<_Elements ...>&&)\u2019\n 1341 |     get(const tuple<_Elements...>&&\
    \ __t) noexcept\n      |     ^~~\n/usr/include/c++/9/tuple:1341:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmp9nso5a8f.cpp:33:82: note: \
    \  \u2018std::vector<long int>\u2019 is not derived from \u2018const std::tuple<_Elements\
    \ ...>\u2019\n   33 |     std::sort(temp.begin(), temp.end(), [](auto &a, auto\
    \ &b) { return std::get<0>(a) < std::get<0>(b); });\n      |                 \
    \                                                      ~~~~~~~~~~~^~~\nIn file\
    \ included from /usr/include/c++/9/functional:54,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmp9nso5a8f.cpp:2:\n/usr/include/c++/9/tuple:1364:5:\
    \ note: candidate: \u2018template<class _Tp, class ... _Types> constexpr _Tp&\
    \ std::get(std::tuple<_Elements ...>&)\u2019\n 1364 |     get(tuple<_Types...>&\
    \ __t) noexcept\n      |     ^~~\n/usr/include/c++/9/tuple:1364:5: note:   template\
    \ argument deduction/substitution failed:\n/usr/include/c++/9/tuple:1370:5: note:\
    \ candidate: \u2018template<class _Tp, class ... _Types> constexpr _Tp&& std::get(std::tuple<_Elements\
    \ ...>&&)\u2019\n 1370 |     get(tuple<_Types...>&& __t) noexcept\n      |   \
    \  ^~~\n/usr/include/c++/9/tuple:1370:5: note:   template argument deduction/substitution\
    \ failed:\n/usr/include/c++/9/tuple:1376:5: note: candidate: \u2018template<class\
    \ _Tp, class ... _Types> constexpr const _Tp& std::get(const std::tuple<_Elements\
    \ ...>&)\u2019\n 1376 |     get(const tuple<_Types...>& __t) noexcept\n      |\
    \     ^~~\n/usr/include/c++/9/tuple:1376:5: note:   template argument deduction/substitution\
    \ failed:\n/usr/include/c++/9/tuple:1383:5: note: candidate: \u2018template<class\
    \ _Tp, class ... _Types> constexpr const _Tp&& std::get(const std::tuple<_Elements\
    \ ...>&&)\u2019\n 1383 |     get(const tuple<_Types...>&& __t) noexcept\n    \
    \  |     ^~~\n/usr/include/c++/9/tuple:1383:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp9nso5a8f.cpp:33:99: error: no matching function for call to\
    \ \u2018get<0>(std::vector<long int>&)\u2019\n   33 |     std::sort(temp.begin(),\
    \ temp.end(), [](auto &a, auto &b) { return std::get<0>(a) < std::get<0>(b); });\n\
    \      |                                                                     \
    \                   ~~~~~~~~~~~^~~\nIn file included from /usr/include/c++/9/algorithm:60,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp9nso5a8f.cpp:2:\n/usr/include/c++/9/utility:219:5:\
    \ note: candidate: \u2018template<long unsigned int _Int, class _Tp1, class _Tp2>\
    \ constexpr typename std::tuple_element<_Int, std::pair<_Tp1, _Tp2> >::type& std::get(std::pair<_Tp1,\
    \ _Tp2>&)\u2019\n  219 |     get(std::pair<_Tp1, _Tp2>& __in) noexcept\n     \
    \ |     ^~~\n/usr/include/c++/9/utility:219:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp9nso5a8f.cpp:33:99: note:   \u2018std::vector<long int>\u2019\
    \ is not derived from \u2018std::pair<_Tp1, _Tp2>\u2019\n   33 |     std::sort(temp.begin(),\
    \ temp.end(), [](auto &a, auto &b) { return std::get<0>(a) < std::get<0>(b); });\n\
    \      |                                                                     \
    \                   ~~~~~~~~~~~^~~\nIn file included from /usr/include/c++/9/algorithm:60,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp9nso5a8f.cpp:2:\n/usr/include/c++/9/utility:224:5:\
    \ note: candidate: \u2018template<long unsigned int _Int, class _Tp1, class _Tp2>\
    \ constexpr typename std::tuple_element<_Int, std::pair<_Tp1, _Tp2> >::type&&\
    \ std::get(std::pair<_Tp1, _Tp2>&&)\u2019\n  224 |     get(std::pair<_Tp1, _Tp2>&&\
    \ __in) noexcept\n      |     ^~~\n/usr/include/c++/9/utility:224:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmp9nso5a8f.cpp:33:99: note: \
    \  \u2018std::vector<long int>\u2019 is not derived from \u2018std::pair<_Tp1,\
    \ _Tp2>\u2019\n   33 |     std::sort(temp.begin(), temp.end(), [](auto &a, auto\
    \ &b) { return std::get<0>(a) < std::get<0>(b); });\n      |                 \
    \                                                                       ~~~~~~~~~~~^~~\n\
    In file included from /usr/include/c++/9/algorithm:60,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n                 from\
    \ /tmp/tmp9nso5a8f.cpp:2:\n/usr/include/c++/9/utility:229:5: note: candidate:\
    \ \u2018template<long unsigned int _Int, class _Tp1, class _Tp2> constexpr const\
    \ typename std::tuple_element<_Int, std::pair<_Tp1, _Tp2> >::type& std::get(const\
    \ std::pair<_Tp1, _Tp2>&)\u2019\n  229 |     get(const std::pair<_Tp1, _Tp2>&\
    \ __in) noexcept\n      |     ^~~\n/usr/include/c++/9/utility:229:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmp9nso5a8f.cpp:33:99: note: \
    \  \u2018std::vector<long int>\u2019 is not derived from \u2018const std::pair<_Tp1,\
    \ _Tp2>\u2019\n   33 |     std::sort(temp.begin(), temp.end(), [](auto &a, auto\
    \ &b) { return std::get<0>(a) < std::get<0>(b); });\n      |                 \
    \                                                                       ~~~~~~~~~~~^~~\n\
    In file included from /usr/include/c++/9/algorithm:60,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n                 from\
    \ /tmp/tmp9nso5a8f.cpp:2:\n/usr/include/c++/9/utility:234:5: note: candidate:\
    \ \u2018template<long unsigned int _Int, class _Tp1, class _Tp2> constexpr const\
    \ typename std::tuple_element<_Int, std::pair<_Tp1, _Tp2> >::type&& std::get(const\
    \ std::pair<_Tp1, _Tp2>&&)\u2019\n  234 |     get(const std::pair<_Tp1, _Tp2>&&\
    \ __in) noexcept\n      |     ^~~\n/usr/include/c++/9/utility:234:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmp9nso5a8f.cpp:33:99: note: \
    \  \u2018std::vector<long int>\u2019 is not derived from \u2018const std::pair<_Tp1,\
    \ _Tp2>\u2019\n   33 |     std::sort(temp.begin(), temp.end(), [](auto &a, auto\
    \ &b) { return std::get<0>(a) < std::get<0>(b); });\n      |                 \
    \                                                                       ~~~~~~~~~~~^~~\n\
    In file included from /usr/include/c++/9/algorithm:60,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n                 from\
    \ /tmp/tmp9nso5a8f.cpp:2:\n/usr/include/c++/9/utility:243:5: note: candidate:\
    \ \u2018template<class _Tp, class _Up> constexpr _Tp& std::get(std::pair<_T1,\
    \ _T2>&)\u2019\n  243 |     get(pair<_Tp, _Up>& __p) noexcept\n      |     ^~~\n\
    /usr/include/c++/9/utility:243:5: note:   template argument deduction/substitution\
    \ failed:\n/usr/include/c++/9/utility:248:5: note: candidate: \u2018template<class\
    \ _Tp, class _Up> constexpr const _Tp& std::get(const std::pair<_T1, _T2>&)\u2019\
    \n  248 |     get(const pair<_Tp, _Up>& __p) noexcept\n      |     ^~~\n/usr/include/c++/9/utility:248:5:\
    \ note:   template argument deduction/substitution failed:\n/usr/include/c++/9/utility:253:5:\
    \ note: candidate: \u2018template<class _Tp, class _Up> constexpr _Tp&& std::get(std::pair<_T1,\
    \ _T2>&&)\u2019\n  253 |     get(pair<_Tp, _Up>&& __p) noexcept\n      |     ^~~\n\
    /usr/include/c++/9/utility:253:5: note:   template argument deduction/substitution\
    \ failed:\n/usr/include/c++/9/utility:258:5: note: candidate: \u2018template<class\
    \ _Tp, class _Up> constexpr const _Tp&& std::get(const std::pair<_T1, _T2>&&)\u2019\
    \n  258 |     get(const pair<_Tp, _Up>&& __p) noexcept\n      |     ^~~\n/usr/include/c++/9/utility:258:5:\
    \ note:   template argument deduction/substitution failed:\n/usr/include/c++/9/utility:263:5:\
    \ note: candidate: \u2018template<class _Tp, class _Up> constexpr _Tp& std::get(std::pair<_Up,\
    \ _Tp>&)\u2019\n  263 |     get(pair<_Up, _Tp>& __p) noexcept\n      |     ^~~\n\
    /usr/include/c++/9/utility:263:5: note:   template argument deduction/substitution\
    \ failed:\n/usr/include/c++/9/utility:268:5: note: candidate: \u2018template<class\
    \ _Tp, class _Up> constexpr const _Tp& std::get(const std::pair<_Up, _Tp>&)\u2019\
    \n  268 |     get(const pair<_Up, _Tp>& __p) noexcept\n      |     ^~~\n/usr/include/c++/9/utility:268:5:\
    \ note:   template argument deduction/substitution failed:\n/usr/include/c++/9/utility:273:5:\
    \ note: candidate: \u2018template<class _Tp, class _Up> constexpr _Tp&& std::get(std::pair<_Up,\
    \ _Tp>&&)\u2019\n  273 |     get(pair<_Up, _Tp>&& __p) noexcept\n      |     ^~~\n\
    /usr/include/c++/9/utility:273:5: note:   template argument deduction/substitution\
    \ failed:\n/usr/include/c++/9/utility:278:5: note: candidate: \u2018template<class\
    \ _Tp, class _Up> constexpr const _Tp&& std::get(const std::pair<_Up, _Tp>&&)\u2019\
    \n  278 |     get(const pair<_Up, _Tp>&& __p) noexcept\n      |     ^~~\n/usr/include/c++/9/utility:278:5:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/9/tuple:39,\n                 from /usr/include/c++/9/functional:54,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmp9nso5a8f.cpp:2:\n/usr/include/c++/9/array:307:5:\
    \ note: candidate: \u2018template<long unsigned int _Int, class _Tp, long unsigned\
    \ int _Nm> constexpr _Tp& std::get(std::array<_Tp, _Nm>&)\u2019\n  307 |     get(array<_Tp,\
    \ _Nm>& __arr) noexcept\n      |     ^~~\n/usr/include/c++/9/array:307:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmp9nso5a8f.cpp:33:99:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018std::array<_Tp,\
    \ _Nm>\u2019\n   33 |     std::sort(temp.begin(), temp.end(), [](auto &a, auto\
    \ &b) { return std::get<0>(a) < std::get<0>(b); });\n      |                 \
    \                                                                       ~~~~~~~~~~~^~~\n\
    In file included from /usr/include/c++/9/tuple:39,\n                 from /usr/include/c++/9/functional:54,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmp9nso5a8f.cpp:2:\n/usr/include/c++/9/array:316:5:\
    \ note: candidate: \u2018template<long unsigned int _Int, class _Tp, long unsigned\
    \ int _Nm> constexpr _Tp&& std::get(std::array<_Tp, _Nm>&&)\u2019\n  316 |   \
    \  get(array<_Tp, _Nm>&& __arr) noexcept\n      |     ^~~\n/usr/include/c++/9/array:316:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp9nso5a8f.cpp:33:99:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018std::array<_Tp,\
    \ _Nm>\u2019\n   33 |     std::sort(temp.begin(), temp.end(), [](auto &a, auto\
    \ &b) { return std::get<0>(a) < std::get<0>(b); });\n      |                 \
    \                                                                       ~~~~~~~~~~~^~~\n\
    In file included from /usr/include/c++/9/tuple:39,\n                 from /usr/include/c++/9/functional:54,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmp9nso5a8f.cpp:2:\n/usr/include/c++/9/array:324:5:\
    \ note: candidate: \u2018template<long unsigned int _Int, class _Tp, long unsigned\
    \ int _Nm> constexpr const _Tp& std::get(const std::array<_Tp, _Nm>&)\u2019\n\
    \  324 |     get(const array<_Tp, _Nm>& __arr) noexcept\n      |     ^~~\n/usr/include/c++/9/array:324:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp9nso5a8f.cpp:33:99:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::array<_Tp,\
    \ _Nm>\u2019\n   33 |     std::sort(temp.begin(), temp.end(), [](auto &a, auto\
    \ &b) { return std::get<0>(a) < std::get<0>(b); });\n      |                 \
    \                                                                       ~~~~~~~~~~~^~~\n\
    In file included from /usr/include/c++/9/tuple:39,\n                 from /usr/include/c++/9/functional:54,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmp9nso5a8f.cpp:2:\n/usr/include/c++/9/array:333:5:\
    \ note: candidate: \u2018template<long unsigned int _Int, class _Tp, long unsigned\
    \ int _Nm> constexpr const _Tp&& std::get(const std::array<_Tp, _Nm>&&)\u2019\n\
    \  333 |     get(const array<_Tp, _Nm>&& __arr) noexcept\n      |     ^~~\n/usr/include/c++/9/array:333:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp9nso5a8f.cpp:33:99:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::array<_Tp,\
    \ _Nm>\u2019\n   33 |     std::sort(temp.begin(), temp.end(), [](auto &a, auto\
    \ &b) { return std::get<0>(a) < std::get<0>(b); });\n      |                 \
    \                                                                       ~~~~~~~~~~~^~~\n\
    In file included from /usr/include/c++/9/functional:54,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n                 from\
    \ /tmp/tmp9nso5a8f.cpp:2:\n/usr/include/c++/9/tuple:1320:5: note: candidate: \u2018\
    template<long unsigned int __i, class ... _Elements> constexpr std::__tuple_element_t<__i,\
    \ std::tuple<_Elements ...> >& std::get(std::tuple<_Elements ...>&)\u2019\n 1320\
    \ |     get(tuple<_Elements...>& __t) noexcept\n      |     ^~~\n/usr/include/c++/9/tuple:1320:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp9nso5a8f.cpp:33:99:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018std::tuple<_Elements\
    \ ...>\u2019\n   33 |     std::sort(temp.begin(), temp.end(), [](auto &a, auto\
    \ &b) { return std::get<0>(a) < std::get<0>(b); });\n      |                 \
    \                                                                       ~~~~~~~~~~~^~~\n\
    In file included from /usr/include/c++/9/functional:54,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n                 from\
    \ /tmp/tmp9nso5a8f.cpp:2:\n/usr/include/c++/9/tuple:1326:5: note: candidate: \u2018\
    template<long unsigned int __i, class ... _Elements> constexpr std::__tuple_element_t<__i,\
    \ std::tuple<_Elements ...> >& std::get(const std::tuple<_Elements ...>&)\u2019\
    \n 1326 |     get(const tuple<_Elements...>& __t) noexcept\n      |     ^~~\n\
    /usr/include/c++/9/tuple:1326:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp9nso5a8f.cpp:33:99: note:   \u2018std::vector<long int>\u2019\
    \ is not derived from \u2018const std::tuple<_Elements ...>\u2019\n   33 |   \
    \  std::sort(temp.begin(), temp.end(), [](auto &a, auto &b) { return std::get<0>(a)\
    \ < std::get<0>(b); });\n      |                                             \
    \                                           ~~~~~~~~~~~^~~\nIn file included from\
    \ /usr/include/c++/9/functional:54,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmp9nso5a8f.cpp:2:\n/usr/include/c++/9/tuple:1332:5:\
    \ note: candidate: \u2018template<long unsigned int __i, class ... _Elements>\
    \ constexpr std::__tuple_element_t<__i, std::tuple<_Elements ...> >&& std::get(std::tuple<_Elements\
    \ ...>&&)\u2019\n 1332 |     get(tuple<_Elements...>&& __t) noexcept\n      |\
    \     ^~~\n/usr/include/c++/9/tuple:1332:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp9nso5a8f.cpp:33:99: note:   \u2018std::vector<long int>\u2019\
    \ is not derived from \u2018std::tuple<_Elements ...>\u2019\n   33 |     std::sort(temp.begin(),\
    \ temp.end(), [](auto &a, auto &b) { return std::get<0>(a) < std::get<0>(b); });\n\
    \      |                                                                     \
    \                   ~~~~~~~~~~~^~~\nIn file included from /usr/include/c++/9/functional:54,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmp9nso5a8f.cpp:2:\n/usr/include/c++/9/tuple:1341:5:\
    \ note: candidate: \u2018template<long unsigned int __i, class ... _Elements>\
    \ constexpr std::__tuple_element_t<__i, std::tuple<_Elements ...> >&& std::get(const\
    \ std::tuple<_Elements ...>&&)\u2019\n 1341 |     get(const tuple<_Elements...>&&\
    \ __t) noexcept\n      |     ^~~\n/usr/include/c++/9/tuple:1341:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmp9nso5a8f.cpp:33:99: note: \
    \  \u2018std::vector<long int>\u2019 is not derived from \u2018const std::tuple<_Elements\
    \ ...>\u2019\n   33 |     std::sort(temp.begin(), temp.end(), [](auto &a, auto\
    \ &b) { return std::get<0>(a) < std::get<0>(b); });\n      |                 \
    \                                                                       ~~~~~~~~~~~^~~\n\
    In file included from /usr/include/c++/9/functional:54,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n                 from\
    \ /tmp/tmp9nso5a8f.cpp:2:\n/usr/include/c++/9/tuple:1364:5: note: candidate: \u2018\
    template<class _Tp, class ... _Types> constexpr _Tp& std::get(std::tuple<_Elements\
    \ ...>&)\u2019\n 1364 |     get(tuple<_Types...>& __t) noexcept\n      |     ^~~\n\
    /usr/include/c++/9/tuple:1364:5: note:   template argument deduction/substitution\
    \ failed:\n/usr/include/c++/9/tuple:1370:5: note: candidate: \u2018template<class\
    \ _Tp, class ... _Types> constexpr _Tp&& std::get(std::tuple<_Elements ...>&&)\u2019\
    \n 1370 |     get(tuple<_Types...>&& __t) noexcept\n      |     ^~~\n/usr/include/c++/9/tuple:1370:5:\
    \ note:   template argument deduction/substitution failed:\n/usr/include/c++/9/tuple:1376:5:\
    \ note: candidate: \u2018template<class _Tp, class ... _Types> constexpr const\
    \ _Tp& std::get(const std::tuple<_Elements ...>&)\u2019\n 1376 |     get(const\
    \ tuple<_Types...>& __t) noexcept\n      |     ^~~\n/usr/include/c++/9/tuple:1376:5:\
    \ note:   template argument deduction/substitution failed:\n/usr/include/c++/9/tuple:1383:5:\
    \ note: candidate: \u2018template<class _Tp, class ... _Types> constexpr const\
    \ _Tp&& std::get(const std::tuple<_Elements ...>&&)\u2019\n 1383 |     get(const\
    \ tuple<_Types...>&& __t) noexcept\n      |     ^~~\n/usr/include/c++/9/tuple:1383:5:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/9/bits/stl_algobase.h:71,\n                 from /usr/include/c++/9/bits/char_traits.h:39,\n\
    \                 from /usr/include/c++/9/ios:40,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp9nso5a8f.cpp:2:\n/usr/include/c++/9/bits/predefined_ops.h: In instantiation\
    \ of \u2018constexpr bool __gnu_cxx::__ops::_Iter_comp_iter<_Compare>::operator()(_Iterator1,\
    \ _Iterator2) [with _Iterator1 = __gnu_cxx::__normal_iterator<std::vector<long\
    \ int>*, std::vector<std::vector<long int> > >; _Iterator2 = __gnu_cxx::__normal_iterator<std::vector<long\
    \ int>*, std::vector<std::vector<long int> > >; _Compare = get_row(std::vector<std::vector<long\
    \ int> >, long int)::<lambda(auto:1&, auto:2&)>]\u2019:\n/usr/include/c++/9/bits/stl_algo.h:81:17:\
    \   required from \u2018void std::__move_median_to_first(_Iterator, _Iterator,\
    \ _Iterator, _Iterator, _Compare) [with _Iterator = __gnu_cxx::__normal_iterator<std::vector<long\
    \ int>*, std::vector<std::vector<long int> > >; _Compare = __gnu_cxx::__ops::_Iter_comp_iter<get_row(std::vector<std::vector<long\
    \ int> >, long int)::<lambda(auto:1&, auto:2&)> >]\u2019\n/usr/include/c++/9/bits/stl_algo.h:1926:34:\
    \   required from \u2018_RandomAccessIterator std::__unguarded_partition_pivot(_RandomAccessIterator,\
    \ _RandomAccessIterator, _Compare) [with _RandomAccessIterator = __gnu_cxx::__normal_iterator<std::vector<long\
    \ int>*, std::vector<std::vector<long int> > >; _Compare = __gnu_cxx::__ops::_Iter_comp_iter<get_row(std::vector<std::vector<long\
    \ int> >, long int)::<lambda(auto:1&, auto:2&)> >]\u2019\n/usr/include/c++/9/bits/stl_algo.h:1958:38:\
    \   required from \u2018void std::__introsort_loop(_RandomAccessIterator, _RandomAccessIterator,\
    \ _Size, _Compare) [with _RandomAccessIterator = __gnu_cxx::__normal_iterator<std::vector<long\
    \ int>*, std::vector<std::vector<long int> > >; _Size = long int; _Compare = __gnu_cxx::__ops::_Iter_comp_iter<get_row(std::vector<std::vector<long\
    \ int> >, long int)::<lambda(auto:1&, auto:2&)> >]\u2019\n/usr/include/c++/9/bits/stl_algo.h:1973:25:\
    \   required from \u2018void std::__sort(_RandomAccessIterator, _RandomAccessIterator,\
    \ _Compare) [with _RandomAccessIterator = __gnu_cxx::__normal_iterator<std::vector<long\
    \ int>*, std::vector<std::vector<long int> > >; _Compare = __gnu_cxx::__ops::_Iter_comp_iter<get_row(std::vector<std::vector<long\
    \ int> >, long int)::<lambda(auto:1&, auto:2&)> >]\u2019\n/usr/include/c++/9/bits/stl_algo.h:4905:18:\
    \   required from \u2018void std::sort(_RAIter, _RAIter, _Compare) [with _RAIter\
    \ = __gnu_cxx::__normal_iterator<std::vector<long int>*, std::vector<std::vector<long\
    \ int> > >; _Compare = get_row(std::vector<std::vector<long int> >, long int)::<lambda(auto:1&,\
    \ auto:2&)>]\u2019\n/tmp/tmp9nso5a8f.cpp:33:105:   required from here\n/usr/include/c++/9/bits/predefined_ops.h:143:18:\
    \ error: void value not ignored as it ought to be\n  143 |         { return bool(_M_comp(*__it1,\
    \ *__it2)); }\n      |                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp9nso5a8f.cpp:\
    \ In instantiation of \u2018get_row(std::vector<std::vector<long int> >, long\
    \ int)::<lambda(auto:3&, auto:4&)> [with auto:3 = std::vector<long int>; auto:4\
    \ = std::vector<long int>]\u2019:\n/usr/include/c++/9/bits/predefined_ops.h:143:18:\
    \   required from \u2018constexpr bool __gnu_cxx::__ops::_Iter_comp_iter<_Compare>::operator()(_Iterator1,\
    \ _Iterator2) [with _Iterator1 = __gnu_cxx::__normal_iterator<std::vector<long\
    \ int>*, std::vector<std::vector<long int> > >; _Iterator2 = __gnu_cxx::__normal_iterator<std::vector<long\
    \ int>*, std::vector<std::vector<long int> > >; _Compare = get_row(std::vector<std::vector<long\
    \ int> >, long int)::<lambda(auto:3&, auto:4&)>]\u2019\n/usr/include/c++/9/bits/stl_algo.h:81:17:\
    \   required from \u2018void std::__move_median_to_first(_Iterator, _Iterator,\
    \ _Iterator, _Iterator, _Compare) [with _Iterator = __gnu_cxx::__normal_iterator<std::vector<long\
    \ int>*, std::vector<std::vector<long int> > >; _Compare = __gnu_cxx::__ops::_Iter_comp_iter<get_row(std::vector<std::vector<long\
    \ int> >, long int)::<lambda(auto:3&, auto:4&)> >]\u2019\n/usr/include/c++/9/bits/stl_algo.h:1926:34:\
    \   required from \u2018_RandomAccessIterator std::__unguarded_partition_pivot(_RandomAccessIterator,\
    \ _RandomAccessIterator, _Compare) [with _RandomAccessIterator = __gnu_cxx::__normal_iterator<std::vector<long\
    \ int>*, std::vector<std::vector<long int> > >; _Compare = __gnu_cxx::__ops::_Iter_comp_iter<get_row(std::vector<std::vector<long\
    \ int> >, long int)::<lambda(auto:3&, auto:4&)> >]\u2019\n/usr/include/c++/9/bits/stl_algo.h:1958:38:\
    \   required from \u2018void std::__introsort_loop(_RandomAccessIterator, _RandomAccessIterator,\
    \ _Size, _Compare) [with _RandomAccessIterator = __gnu_cxx::__normal_iterator<std::vector<long\
    \ int>*, std::vector<std::vector<long int> > >; _Size = long int; _Compare = __gnu_cxx::__ops::_Iter_comp_iter<get_row(std::vector<std::vector<long\
    \ int> >, long int)::<lambda(auto:3&, auto:4&)> >]\u2019\n/usr/include/c++/9/bits/stl_algo.h:1973:25:\
    \   required from \u2018void std::__sort(_RandomAccessIterator, _RandomAccessIterator,\
    \ _Compare) [with _RandomAccessIterator = __gnu_cxx::__normal_iterator<std::vector<long\
    \ int>*, std::vector<std::vector<long int> > >; _Compare = __gnu_cxx::__ops::_Iter_comp_iter<get_row(std::vector<std::vector<long\
    \ int> >, long int)::<lambda(auto:3&, auto:4&)> >]\u2019\n/usr/include/c++/9/bits/stl_algo.h:4905:18:\
    \   required from \u2018void std::sort(_RAIter, _RAIter, _Compare) [with _RAIter\
    \ = __gnu_cxx::__normal_iterator<std::vector<long int>*, std::vector<std::vector<long\
    \ int> > >; _Compare = get_row(std::vector<std::vector<long int> >, long int)::<lambda(auto:3&,\
    \ auto:4&)>]\u2019\n/tmp/tmp9nso5a8f.cpp:34:105:   required from here\n/tmp/tmp9nso5a8f.cpp:34:82:\
    \ error: no matching function for call to \u2018get<1>(std::vector<long int>&)\u2019\
    \n   34 |     std::sort(temp.begin(), temp.end(), [](auto &a, auto &b) { return\
    \ std::get<1>(a) < std::get<1>(b); });\n      |                              \
    \                                         ~~~~~~~~~~~^~~\nIn file included from\
    \ /usr/include/c++/9/algorithm:60,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp9nso5a8f.cpp:2:\n/usr/include/c++/9/utility:219:5:\
    \ note: candidate: \u2018template<long unsigned int _Int, class _Tp1, class _Tp2>\
    \ constexpr typename std::tuple_element<_Int, std::pair<_Tp1, _Tp2> >::type& std::get(std::pair<_Tp1,\
    \ _Tp2>&)\u2019\n  219 |     get(std::pair<_Tp1, _Tp2>& __in) noexcept\n     \
    \ |     ^~~\n/usr/include/c++/9/utility:219:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp9nso5a8f.cpp:34:82: note:   \u2018std::vector<long int>\u2019\
    \ is not derived from \u2018std::pair<_Tp1, _Tp2>\u2019\n   34 |     std::sort(temp.begin(),\
    \ temp.end(), [](auto &a, auto &b) { return std::get<1>(a) < std::get<1>(b); });\n\
    \      |                                                                     \
    \  ~~~~~~~~~~~^~~\nIn file included from /usr/include/c++/9/algorithm:60,\n  \
    \               from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n \
    \                from /tmp/tmp9nso5a8f.cpp:2:\n/usr/include/c++/9/utility:224:5:\
    \ note: candidate: \u2018template<long unsigned int _Int, class _Tp1, class _Tp2>\
    \ constexpr typename std::tuple_element<_Int, std::pair<_Tp1, _Tp2> >::type&&\
    \ std::get(std::pair<_Tp1, _Tp2>&&)\u2019\n  224 |     get(std::pair<_Tp1, _Tp2>&&\
    \ __in) noexcept\n      |     ^~~\n/usr/include/c++/9/utility:224:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmp9nso5a8f.cpp:34:82: note: \
    \  \u2018std::vector<long int>\u2019 is not derived from \u2018std::pair<_Tp1,\
    \ _Tp2>\u2019\n   34 |     std::sort(temp.begin(), temp.end(), [](auto &a, auto\
    \ &b) { return std::get<1>(a) < std::get<1>(b); });\n      |                 \
    \                                                      ~~~~~~~~~~~^~~\nIn file\
    \ included from /usr/include/c++/9/algorithm:60,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp9nso5a8f.cpp:2:\n/usr/include/c++/9/utility:229:5:\
    \ note: candidate: \u2018template<long unsigned int _Int, class _Tp1, class _Tp2>\
    \ constexpr const typename std::tuple_element<_Int, std::pair<_Tp1, _Tp2> >::type&\
    \ std::get(const std::pair<_Tp1, _Tp2>&)\u2019\n  229 |     get(const std::pair<_Tp1,\
    \ _Tp2>& __in) noexcept\n      |     ^~~\n/usr/include/c++/9/utility:229:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmp9nso5a8f.cpp:34:82:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::pair<_Tp1,\
    \ _Tp2>\u2019\n   34 |     std::sort(temp.begin(), temp.end(), [](auto &a, auto\
    \ &b) { return std::get<1>(a) < std::get<1>(b); });\n      |                 \
    \                                                      ~~~~~~~~~~~^~~\nIn file\
    \ included from /usr/include/c++/9/algorithm:60,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp9nso5a8f.cpp:2:\n/usr/include/c++/9/utility:234:5:\
    \ note: candidate: \u2018template<long unsigned int _Int, class _Tp1, class _Tp2>\
    \ constexpr const typename std::tuple_element<_Int, std::pair<_Tp1, _Tp2> >::type&&\
    \ std::get(const std::pair<_Tp1, _Tp2>&&)\u2019\n  234 |     get(const std::pair<_Tp1,\
    \ _Tp2>&& __in) noexcept\n      |     ^~~\n/usr/include/c++/9/utility:234:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmp9nso5a8f.cpp:34:82:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::pair<_Tp1,\
    \ _Tp2>\u2019\n   34 |     std::sort(temp.begin(), temp.end(), [](auto &a, auto\
    \ &b) { return std::get<1>(a) < std::get<1>(b); });\n      |                 \
    \                                                      ~~~~~~~~~~~^~~\nIn file\
    \ included from /usr/include/c++/9/algorithm:60,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp9nso5a8f.cpp:2:\n/usr/include/c++/9/utility:243:5:\
    \ note: candidate: \u2018template<class _Tp, class _Up> constexpr _Tp& std::get(std::pair<_T1,\
    \ _T2>&)\u2019\n  243 |     get(pair<_Tp, _Up>& __p) noexcept\n      |     ^~~\n\
    /usr/include/c++/9/utility:243:5: note:   template argument deduction/substitution\
    \ failed:\n/usr/include/c++/9/utility:248:5: note: candidate: \u2018template<class\
    \ _Tp, class _Up> constexpr const _Tp& std::get(const std::pair<_T1, _T2>&)\u2019\
    \n  248 |     get(const pair<_Tp, _Up>& __p) noexcept\n      |     ^~~\n/usr/include/c++/9/utility:248:5:\
    \ note:   template argument deduction/substitution failed:\n/usr/include/c++/9/utility:253:5:\
    \ note: candidate: \u2018template<class _Tp, class _Up> constexpr _Tp&& std::get(std::pair<_T1,\
    \ _T2>&&)\u2019\n  253 |     get(pair<_Tp, _Up>&& __p) noexcept\n      |     ^~~\n\
    /usr/include/c++/9/utility:253:5: note:   template argument deduction/substitution\
    \ failed:\n/usr/include/c++/9/utility:258:5: note: candidate: \u2018template<class\
    \ _Tp, class _Up> constexpr const _Tp&& std::get(const std::pair<_T1, _T2>&&)\u2019\
    \n  258 |     get(const pair<_Tp, _Up>&& __p) noexcept\n      |     ^~~\n/usr/include/c++/9/utility:258:5:\
    \ note:   template argument deduction/substitution failed:\n/usr/include/c++/9/utility:263:5:\
    \ note: candidate: \u2018template<class _Tp, class _Up> constexpr _Tp& std::get(std::pair<_Up,\
    \ _Tp>&)\u2019\n  263 |     get(pair<_Up, _Tp>& __p) noexcept\n      |     ^~~\n\
    /usr/include/c++/9/utility:263:5: note:   template argument deduction/substitution\
    \ failed:\n/usr/include/c++/9/utility:268:5: note: candidate: \u2018template<class\
    \ _Tp, class _Up> constexpr const _Tp& std::get(const std::pair<_Up, _Tp>&)\u2019\
    \n  268 |     get(const pair<_Up, _Tp>& __p) noexcept\n      |     ^~~\n/usr/include/c++/9/utility:268:5:\
    \ note:   template argument deduction/substitution failed:\n/usr/include/c++/9/utility:273:5:\
    \ note: candidate: \u2018template<class _Tp, class _Up> constexpr _Tp&& std::get(std::pair<_Up,\
    \ _Tp>&&)\u2019\n  273 |     get(pair<_Up, _Tp>&& __p) noexcept\n      |     ^~~\n\
    /usr/include/c++/9/utility:273:5: note:   template argument deduction/substitution\
    \ failed:\n/usr/include/c++/9/utility:278:5: note: candidate: \u2018template<class\
    \ _Tp, class _Up> constexpr const _Tp&& std::get(const std::pair<_Up, _Tp>&&)\u2019\
    \n  278 |     get(const pair<_Up, _Tp>&& __p) noexcept\n      |     ^~~\n/usr/include/c++/9/utility:278:5:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/9/tuple:39,\n                 from /usr/include/c++/9/functional:54,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmp9nso5a8f.cpp:2:\n/usr/include/c++/9/array:307:5:\
    \ note: candidate: \u2018template<long unsigned int _Int, class _Tp, long unsigned\
    \ int _Nm> constexpr _Tp& std::get(std::array<_Tp, _Nm>&)\u2019\n  307 |     get(array<_Tp,\
    \ _Nm>& __arr) noexcept\n      |     ^~~\n/usr/include/c++/9/array:307:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmp9nso5a8f.cpp:34:82:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018std::array<_Tp,\
    \ _Nm>\u2019\n   34 |     std::sort(temp.begin(), temp.end(), [](auto &a, auto\
    \ &b) { return std::get<1>(a) < std::get<1>(b); });\n      |                 \
    \                                                      ~~~~~~~~~~~^~~\nIn file\
    \ included from /usr/include/c++/9/tuple:39,\n                 from /usr/include/c++/9/functional:54,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmp9nso5a8f.cpp:2:\n/usr/include/c++/9/array:316:5:\
    \ note: candidate: \u2018template<long unsigned int _Int, class _Tp, long unsigned\
    \ int _Nm> constexpr _Tp&& std::get(std::array<_Tp, _Nm>&&)\u2019\n  316 |   \
    \  get(array<_Tp, _Nm>&& __arr) noexcept\n      |     ^~~\n/usr/include/c++/9/array:316:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp9nso5a8f.cpp:34:82:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018std::array<_Tp,\
    \ _Nm>\u2019\n   34 |     std::sort(temp.begin(), temp.end(), [](auto &a, auto\
    \ &b) { return std::get<1>(a) < std::get<1>(b); });\n      |                 \
    \                                                      ~~~~~~~~~~~^~~\nIn file\
    \ included from /usr/include/c++/9/tuple:39,\n                 from /usr/include/c++/9/functional:54,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmp9nso5a8f.cpp:2:\n/usr/include/c++/9/array:324:5:\
    \ note: candidate: \u2018template<long unsigned int _Int, class _Tp, long unsigned\
    \ int _Nm> constexpr const _Tp& std::get(const std::array<_Tp, _Nm>&)\u2019\n\
    \  324 |     get(const array<_Tp, _Nm>& __arr) noexcept\n      |     ^~~\n/usr/include/c++/9/array:324:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp9nso5a8f.cpp:34:82:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::array<_Tp,\
    \ _Nm>\u2019\n   34 |     std::sort(temp.begin(), temp.end(), [](auto &a, auto\
    \ &b) { return std::get<1>(a) < std::get<1>(b); });\n      |                 \
    \                                                      ~~~~~~~~~~~^~~\nIn file\
    \ included from /usr/include/c++/9/tuple:39,\n                 from /usr/include/c++/9/functional:54,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmp9nso5a8f.cpp:2:\n/usr/include/c++/9/array:333:5:\
    \ note: candidate: \u2018template<long unsigned int _Int, class _Tp, long unsigned\
    \ int _Nm> constexpr const _Tp&& std::get(const std::array<_Tp, _Nm>&&)\u2019\n\
    \  333 |     get(const array<_Tp, _Nm>&& __arr) noexcept\n      |     ^~~\n/usr/include/c++/9/array:333:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp9nso5a8f.cpp:34:82:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::array<_Tp,\
    \ _Nm>\u2019\n   34 |     std::sort(temp.begin(), temp.end(), [](auto &a, auto\
    \ &b) { return std::get<1>(a) < std::get<1>(b); });\n      |                 \
    \                                                      ~~~~~~~~~~~^~~\nIn file\
    \ included from /usr/include/c++/9/functional:54,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmp9nso5a8f.cpp:2:\n/usr/include/c++/9/tuple:1320:5:\
    \ note: candidate: \u2018template<long unsigned int __i, class ... _Elements>\
    \ constexpr std::__tuple_element_t<__i, std::tuple<_Elements ...> >& std::get(std::tuple<_Elements\
    \ ...>&)\u2019\n 1320 |     get(tuple<_Elements...>& __t) noexcept\n      |  \
    \   ^~~\n/usr/include/c++/9/tuple:1320:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp9nso5a8f.cpp:34:82: note:   \u2018std::vector<long int>\u2019\
    \ is not derived from \u2018std::tuple<_Elements ...>\u2019\n   34 |     std::sort(temp.begin(),\
    \ temp.end(), [](auto &a, auto &b) { return std::get<1>(a) < std::get<1>(b); });\n\
    \      |                                                                     \
    \  ~~~~~~~~~~~^~~\nIn file included from /usr/include/c++/9/functional:54,\n \
    \                from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmp9nso5a8f.cpp:2:\n/usr/include/c++/9/tuple:1326:5:\
    \ note: candidate: \u2018template<long unsigned int __i, class ... _Elements>\
    \ constexpr std::__tuple_element_t<__i, std::tuple<_Elements ...> >& std::get(const\
    \ std::tuple<_Elements ...>&)\u2019\n 1326 |     get(const tuple<_Elements...>&\
    \ __t) noexcept\n      |     ^~~\n/usr/include/c++/9/tuple:1326:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmp9nso5a8f.cpp:34:82: note: \
    \  \u2018std::vector<long int>\u2019 is not derived from \u2018const std::tuple<_Elements\
    \ ...>\u2019\n   34 |     std::sort(temp.begin(), temp.end(), [](auto &a, auto\
    \ &b) { return std::get<1>(a) < std::get<1>(b); });\n      |                 \
    \                                                      ~~~~~~~~~~~^~~\nIn file\
    \ included from /usr/include/c++/9/functional:54,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmp9nso5a8f.cpp:2:\n/usr/include/c++/9/tuple:1332:5:\
    \ note: candidate: \u2018template<long unsigned int __i, class ... _Elements>\
    \ constexpr std::__tuple_element_t<__i, std::tuple<_Elements ...> >&& std::get(std::tuple<_Elements\
    \ ...>&&)\u2019\n 1332 |     get(tuple<_Elements...>&& __t) noexcept\n      |\
    \     ^~~\n/usr/include/c++/9/tuple:1332:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp9nso5a8f.cpp:34:82: note:   \u2018std::vector<long int>\u2019\
    \ is not derived from \u2018std::tuple<_Elements ...>\u2019\n   34 |     std::sort(temp.begin(),\
    \ temp.end(), [](auto &a, auto &b) { return std::get<1>(a) < std::get<1>(b); });\n\
    \      |                                                                     \
    \  ~~~~~~~~~~~^~~\nIn file included from /usr/include/c++/9/functional:54,\n \
    \                from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmp9nso5a8f.cpp:2:\n/usr/include/c++/9/tuple:1341:5:\
    \ note: candidate: \u2018template<long unsigned int __i, class ... _Elements>\
    \ constexpr std::__tuple_element_t<__i, std::tuple<_Elements ...> >&& std::get(const\
    \ std::tuple<_Elements ...>&&)\u2019\n 1341 |     get(const tuple<_Elements...>&&\
    \ __t) noexcept\n      |     ^~~\n/usr/include/c++/9/tuple:1341:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmp9nso5a8f.cpp:34:82: note: \
    \  \u2018std::vector<long int>\u2019 is not derived from \u2018const std::tuple<_Elements\
    \ ...>\u2019\n   34 |     std::sort(temp.begin(), temp.end(), [](auto &a, auto\
    \ &b) { return std::get<1>(a) < std::get<1>(b); });\n      |                 \
    \                                                      ~~~~~~~~~~~^~~\nIn file\
    \ included from /usr/include/c++/9/functional:54,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmp9nso5a8f.cpp:2:\n/usr/include/c++/9/tuple:1364:5:\
    \ note: candidate: \u2018template<class _Tp, class ... _Types> constexpr _Tp&\
    \ std::get(std::tuple<_Elements ...>&)\u2019\n 1364 |     get(tuple<_Types...>&\
    \ __t) noexcept\n      |     ^~~\n/usr/include/c++/9/tuple:1364:5: note:   template\
    \ argument deduction/substitution failed:\n/usr/include/c++/9/tuple:1370:5: note:\
    \ candidate: \u2018template<class _Tp, class ... _Types> constexpr _Tp&& std::get(std::tuple<_Elements\
    \ ...>&&)\u2019\n 1370 |     get(tuple<_Types...>&& __t) noexcept\n      |   \
    \  ^~~\n/usr/include/c++/9/tuple:1370:5: note:   template argument deduction/substitution\
    \ failed:\n/usr/include/c++/9/tuple:1376:5: note: candidate: \u2018template<class\
    \ _Tp, class ... _Types> constexpr const _Tp& std::get(const std::tuple<_Elements\
    \ ...>&)\u2019\n 1376 |     get(const tuple<_Types...>& __t) noexcept\n      |\
    \     ^~~\n/usr/include/c++/9/tuple:1376:5: note:   template argument deduction/substitution\
    \ failed:\n/usr/include/c++/9/tuple:1383:5: note: candidate: \u2018template<class\
    \ _Tp, class ... _Types> constexpr const _Tp&& std::get(const std::tuple<_Elements\
    \ ...>&&)\u2019\n 1383 |     get(const tuple<_Types...>&& __t) noexcept\n    \
    \  |     ^~~\n/usr/include/c++/9/tuple:1383:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp9nso5a8f.cpp:34:99: error: no matching function for call to\
    \ \u2018get<1>(std::vector<long int>&)\u2019\n   34 |     std::sort(temp.begin(),\
    \ temp.end(), [](auto &a, auto &b) { return std::get<1>(a) < std::get<1>(b); });\n\
    \      |                                                                     \
    \                   ~~~~~~~~~~~^~~\nIn file included from /usr/include/c++/9/algorithm:60,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp9nso5a8f.cpp:2:\n/usr/include/c++/9/utility:219:5:\
    \ note: candidate: \u2018template<long unsigned int _Int, class _Tp1, class _Tp2>\
    \ constexpr typename std::tuple_element<_Int, std::pair<_Tp1, _Tp2> >::type& std::get(std::pair<_Tp1,\
    \ _Tp2>&)\u2019\n  219 |     get(std::pair<_Tp1, _Tp2>& __in) noexcept\n     \
    \ |     ^~~\n/usr/include/c++/9/utility:219:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp9nso5a8f.cpp:34:99: note:   \u2018std::vector<long int>\u2019\
    \ is not derived from \u2018std::pair<_Tp1, _Tp2>\u2019\n   34 |     std::sort(temp.begin(),\
    \ temp.end(), [](auto &a, auto &b) { return std::get<1>(a) < std::get<1>(b); });\n\
    \      |                                                                     \
    \                   ~~~~~~~~~~~^~~\nIn file included from /usr/include/c++/9/algorithm:60,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp9nso5a8f.cpp:2:\n/usr/include/c++/9/utility:224:5:\
    \ note: candidate: \u2018template<long unsigned int _Int, class _Tp1, class _Tp2>\
    \ constexpr typename std::tuple_element<_Int, std::pair<_Tp1, _Tp2> >::type&&\
    \ std::get(std::pair<_Tp1, _Tp2>&&)\u2019\n  224 |     get(std::pair<_Tp1, _Tp2>&&\
    \ __in) noexcept\n      |     ^~~\n/usr/include/c++/9/utility:224:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmp9nso5a8f.cpp:34:99: note: \
    \  \u2018std::vector<long int>\u2019 is not derived from \u2018std::pair<_Tp1,\
    \ _Tp2>\u2019\n   34 |     std::sort(temp.begin(), temp.end(), [](auto &a, auto\
    \ &b) { return std::get<1>(a) < std::get<1>(b); });\n      |                 \
    \                                                                       ~~~~~~~~~~~^~~\n\
    In file included from /usr/include/c++/9/algorithm:60,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n                 from\
    \ /tmp/tmp9nso5a8f.cpp:2:\n/usr/include/c++/9/utility:229:5: note: candidate:\
    \ \u2018template<long unsigned int _Int, class _Tp1, class _Tp2> constexpr const\
    \ typename std::tuple_element<_Int, std::pair<_Tp1, _Tp2> >::type& std::get(const\
    \ std::pair<_Tp1, _Tp2>&)\u2019\n  229 |     get(const std::pair<_Tp1, _Tp2>&\
    \ __in) noexcept\n      |     ^~~\n/usr/include/c++/9/utility:229:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmp9nso5a8f.cpp:34:99: note: \
    \  \u2018std::vector<long int>\u2019 is not derived from \u2018const std::pair<_Tp1,\
    \ _Tp2>\u2019\n   34 |     std::sort(temp.begin(), temp.end(), [](auto &a, auto\
    \ &b) { return std::get<1>(a) < std::get<1>(b); });\n      |                 \
    \                                                                       ~~~~~~~~~~~^~~\n\
    In file included from /usr/include/c++/9/algorithm:60,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n                 from\
    \ /tmp/tmp9nso5a8f.cpp:2:\n/usr/include/c++/9/utility:234:5: note: candidate:\
    \ \u2018template<long unsigned int _Int, class _Tp1, class _Tp2> constexpr const\
    \ typename std::tuple_element<_Int, std::pair<_Tp1, _Tp2> >::type&& std::get(const\
    \ std::pair<_Tp1, _Tp2>&&)\u2019\n  234 |     get(const std::pair<_Tp1, _Tp2>&&\
    \ __in) noexcept\n      |     ^~~\n/usr/include/c++/9/utility:234:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmp9nso5a8f.cpp:34:99: note: \
    \  \u2018std::vector<long int>\u2019 is not derived from \u2018const std::pair<_Tp1,\
    \ _Tp2>\u2019\n   34 |     std::sort(temp.begin(), temp.end(), [](auto &a, auto\
    \ &b) { return std::get<1>(a) < std::get<1>(b); });\n      |                 \
    \                                                                       ~~~~~~~~~~~^~~\n\
    In file included from /usr/include/c++/9/algorithm:60,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n                 from\
    \ /tmp/tmp9nso5a8f.cpp:2:\n/usr/include/c++/9/utility:243:5: note: candidate:\
    \ \u2018template<class _Tp, class _Up> constexpr _Tp& std::get(std::pair<_T1,\
    \ _T2>&)\u2019\n  243 |     get(pair<_Tp, _Up>& __p) noexcept\n      |     ^~~\n\
    /usr/include/c++/9/utility:243:5: note:   template argument deduction/substitution\
    \ failed:\n/usr/include/c++/9/utility:248:5: note: candidate: \u2018template<class\
    \ _Tp, class _Up> constexpr const _Tp& std::get(const std::pair<_T1, _T2>&)\u2019\
    \n  248 |     get(const pair<_Tp, _Up>& __p) noexcept\n      |     ^~~\n/usr/include/c++/9/utility:248:5:\
    \ note:   template argument deduction/substitution failed:\n/usr/include/c++/9/utility:253:5:\
    \ note: candidate: \u2018template<class _Tp, class _Up> constexpr _Tp&& std::get(std::pair<_T1,\
    \ _T2>&&)\u2019\n  253 |     get(pair<_Tp, _Up>&& __p) noexcept\n      |     ^~~\n\
    /usr/include/c++/9/utility:253:5: note:   template argument deduction/substitution\
    \ failed:\n/usr/include/c++/9/utility:258:5: note: candidate: \u2018template<class\
    \ _Tp, class _Up> constexpr const _Tp&& std::get(const std::pair<_T1, _T2>&&)\u2019\
    \n  258 |     get(const pair<_Tp, _Up>&& __p) noexcept\n      |     ^~~\n/usr/include/c++/9/utility:258:5:\
    \ note:   template argument deduction/substitution failed:\n/usr/include/c++/9/utility:263:5:\
    \ note: candidate: \u2018template<class _Tp, class _Up> constexpr _Tp& std::get(std::pair<_Up,\
    \ _Tp>&)\u2019\n  263 |     get(pair<_Up, _Tp>& __p) noexcept\n      |     ^~~\n\
    /usr/include/c++/9/utility:263:5: note:   template argument deduction/substitution\
    \ failed:\n/usr/include/c++/9/utility:268:5: note: candidate: \u2018template<class\
    \ _Tp, class _Up> constexpr const _Tp& std::get(const std::pair<_Up, _Tp>&)\u2019\
    \n  268 |     get(const pair<_Up, _Tp>& __p) noexcept\n      |     ^~~\n/usr/include/c++/9/utility:268:5:\
    \ note:   template argument deduction/substitution failed:\n/usr/include/c++/9/utility:273:5:\
    \ note: candidate: \u2018template<class _Tp, class _Up> constexpr _Tp&& std::get(std::pair<_Up,\
    \ _Tp>&&)\u2019\n  273 |     get(pair<_Up, _Tp>&& __p) noexcept\n      |     ^~~\n\
    /usr/include/c++/9/utility:273:5: note:   template argument deduction/substitution\
    \ failed:\n/usr/include/c++/9/utility:278:5: note: candidate: \u2018template<class\
    \ _Tp, class _Up> constexpr const _Tp&& std::get(const std::pair<_Up, _Tp>&&)\u2019\
    \n  278 |     get(const pair<_Up, _Tp>&& __p) noexcept\n      |     ^~~\n/usr/include/c++/9/utility:278:5:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/9/tuple:39,\n                 from /usr/include/c++/9/functional:54,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmp9nso5a8f.cpp:2:\n/usr/include/c++/9/array:307:5:\
    \ note: candidate: \u2018template<long unsigned int _Int, class _Tp, long unsigned\
    \ int _Nm> constexpr _Tp& std::get(std::array<_Tp, _Nm>&)\u2019\n  307 |     get(array<_Tp,\
    \ _Nm>& __arr) noexcept\n      |     ^~~\n/usr/include/c++/9/array:307:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmp9nso5a8f.cpp:34:99:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018std::array<_Tp,\
    \ _Nm>\u2019\n   34 |     std::sort(temp.begin(), temp.end(), [](auto &a, auto\
    \ &b) { return std::get<1>(a) < std::get<1>(b); });\n      |                 \
    \                                                                       ~~~~~~~~~~~^~~\n\
    In file included from /usr/include/c++/9/tuple:39,\n                 from /usr/include/c++/9/functional:54,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmp9nso5a8f.cpp:2:\n/usr/include/c++/9/array:316:5:\
    \ note: candidate: \u2018template<long unsigned int _Int, class _Tp, long unsigned\
    \ int _Nm> constexpr _Tp&& std::get(std::array<_Tp, _Nm>&&)\u2019\n  316 |   \
    \  get(array<_Tp, _Nm>&& __arr) noexcept\n      |     ^~~\n/usr/include/c++/9/array:316:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp9nso5a8f.cpp:34:99:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018std::array<_Tp,\
    \ _Nm>\u2019\n   34 |     std::sort(temp.begin(), temp.end(), [](auto &a, auto\
    \ &b) { return std::get<1>(a) < std::get<1>(b); });\n      |                 \
    \                                                                       ~~~~~~~~~~~^~~\n\
    In file included from /usr/include/c++/9/tuple:39,\n                 from /usr/include/c++/9/functional:54,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmp9nso5a8f.cpp:2:\n/usr/include/c++/9/array:324:5:\
    \ note: candidate: \u2018template<long unsigned int _Int, class _Tp, long unsigned\
    \ int _Nm> constexpr const _Tp& std::get(const std::array<_Tp, _Nm>&)\u2019\n\
    \  324 |     get(const array<_Tp, _Nm>& __arr) noexcept\n      |     ^~~\n/usr/include/c++/9/array:324:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp9nso5a8f.cpp:34:99:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::array<_Tp,\
    \ _Nm>\u2019\n   34 |     std::sort(temp.begin(), temp.end(), [](auto &a, auto\
    \ &b) { return std::get<1>(a) < std::get<1>(b); });\n      |                 \
    \                                                                       ~~~~~~~~~~~^~~\n\
    In file included from /usr/include/c++/9/tuple:39,\n                 from /usr/include/c++/9/functional:54,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmp9nso5a8f.cpp:2:\n/usr/include/c++/9/array:333:5:\
    \ note: candidate: \u2018template<long unsigned int _Int, class _Tp, long unsigned\
    \ int _Nm> constexpr const _Tp&& std::get(const std::array<_Tp, _Nm>&&)\u2019\n\
    \  333 |     get(const array<_Tp, _Nm>&& __arr) noexcept\n      |     ^~~\n/usr/include/c++/9/array:333:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp9nso5a8f.cpp:34:99:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::array<_Tp,\
    \ _Nm>\u2019\n   34 |     std::sort(temp.begin(), temp.end(), [](auto &a, auto\
    \ &b) { return std::get<1>(a) < std::get<1>(b); });\n      |                 \
    \                                                                       ~~~~~~~~~~~^~~\n\
    In file included from /usr/include/c++/9/functional:54,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n                 from\
    \ /tmp/tmp9nso5a8f.cpp:2:\n/usr/include/c++/9/tuple:1320:5: note: candidate: \u2018\
    template<long unsigned int __i, class ... _Elements> constexpr std::__tuple_element_t<__i,\
    \ std::tuple<_Elements ...> >& std::get(std::tuple<_Elements ...>&)\u2019\n 1320\
    \ |     get(tuple<_Elements...>& __t) noexcept\n      |     ^~~\n/usr/include/c++/9/tuple:1320:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp9nso5a8f.cpp:34:99:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018std::tuple<_Elements\
    \ ...>\u2019\n   34 |     std::sort(temp.begin(), temp.end(), [](auto &a, auto\
    \ &b) { return std::get<1>(a) < std::get<1>(b); });\n      |                 \
    \                                                                       ~~~~~~~~~~~^~~\n\
    In file included from /usr/include/c++/9/functional:54,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n                 from\
    \ /tmp/tmp9nso5a8f.cpp:2:\n/usr/include/c++/9/tuple:1326:5: note: candidate: \u2018\
    template<long unsigned int __i, class ... _Elements> constexpr std::__tuple_element_t<__i,\
    \ std::tuple<_Elements ...> >& std::get(const std::tuple<_Elements ...>&)\u2019\
    \n 1326 |     get(const tuple<_Elements...>& __t) noexcept\n      |     ^~~\n\
    /usr/include/c++/9/tuple:1326:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp9nso5a8f.cpp:34:99: note:   \u2018std::vector<long int>\u2019\
    \ is not derived from \u2018const std::tuple<_Elements ...>\u2019\n   34 |   \
    \  std::sort(temp.begin(), temp.end(), [](auto &a, auto &b) { return std::get<1>(a)\
    \ < std::get<1>(b); });\n      |                                             \
    \                                           ~~~~~~~~~~~^~~\nIn file included from\
    \ /usr/include/c++/9/functional:54,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmp9nso5a8f.cpp:2:\n/usr/include/c++/9/tuple:1332:5:\
    \ note: candidate: \u2018template<long unsigned int __i, class ... _Elements>\
    \ constexpr std::__tuple_element_t<__i, std::tuple<_Elements ...> >&& std::get(std::tuple<_Elements\
    \ ...>&&)\u2019\n 1332 |     get(tuple<_Elements...>&& __t) noexcept\n      |\
    \     ^~~\n/usr/include/c++/9/tuple:1332:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp9nso5a8f.cpp:34:99: note:   \u2018std::vector<long int>\u2019\
    \ is not derived from \u2018std::tuple<_Elements ...>\u2019\n   34 |     std::sort(temp.begin(),\
    \ temp.end(), [](auto &a, auto &b) { return std::get<1>(a) < std::get<1>(b); });\n\
    \      |                                                                     \
    \                   ~~~~~~~~~~~^~~\nIn file included from /usr/include/c++/9/functional:54,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmp9nso5a8f.cpp:2:\n/usr/include/c++/9/tuple:1341:5:\
    \ note: candidate: \u2018template<long unsigned int __i, class ... _Elements>\
    \ constexpr std::__tuple_element_t<__i, std::tuple<_Elements ...> >&& std::get(const\
    \ std::tuple<_Elements ...>&&)\u2019\n 1341 |     get(const tuple<_Elements...>&&\
    \ __t) noexcept\n      |     ^~~\n/usr/include/c++/9/tuple:1341:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmp9nso5a8f.cpp:34:99: note: \
    \  \u2018std::vector<long int>\u2019 is not derived from \u2018const std::tuple<_Elements\
    \ ...>\u2019\n   34 |     std::sort(temp.begin(), temp.end(), [](auto &a, auto\
    \ &b) { return std::get<1>(a) < std::get<1>(b); });\n      |                 \
    \                                                                       ~~~~~~~~~~~^~~\n\
    In file included from /usr/include/c++/9/functional:54,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n                 from\
    \ /tmp/tmp9nso5a8f.cpp:2:\n/usr/include/c++/9/tuple:1364:5: note: candidate: \u2018\
    template<class _Tp, class ... _Types> constexpr _Tp& std::get(std::tuple<_Elements\
    \ ...>&)\u2019\n 1364 |     get(tuple<_Types...>& __t) noexcept\n      |     ^~~\n\
    /usr/include/c++/9/tuple:1364:5: note:   template argument deduction/substitution\
    \ failed:\n/usr/include/c++/9/tuple:1370:5: note: candidate: \u2018template<class\
    \ _Tp, class ... _Types> constexpr _Tp&& std::get(std::tuple<_Elements ...>&&)\u2019\
    \n 1370 |     get(tuple<_Types...>&& __t) noexcept\n      |     ^~~\n/usr/include/c++/9/tuple:1370:5:\
    \ note:   template argument deduction/substitution failed:\n/usr/include/c++/9/tuple:1376:5:\
    \ note: candidate: \u2018template<class _Tp, class ... _Types> constexpr const\
    \ _Tp& std::get(const std::tuple<_Elements ...>&)\u2019\n 1376 |     get(const\
    \ tuple<_Types...>& __t) noexcept\n      |     ^~~\n/usr/include/c++/9/tuple:1376:5:\
    \ note:   template argument deduction/substitution failed:\n/usr/include/c++/9/tuple:1383:5:\
    \ note: candidate: \u2018template<class _Tp, class ... _Types> constexpr const\
    \ _Tp&& std::get(const std::tuple<_Elements ...>&&)\u2019\n 1383 |     get(const\
    \ tuple<_Types...>&& __t) noexcept\n      |     ^~~\n/usr/include/c++/9/tuple:1383:5:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/9/bits/stl_algobase.h:71,\n                 from /usr/include/c++/9/bits/char_traits.h:39,\n\
    \                 from /usr/include/c++/9/ios:40,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp9nso5a8f.cpp:2:\n/usr/include/c++/9/bits/predefined_ops.h: In instantiation\
    \ of \u2018constexpr bool __gnu_cxx::__ops::_Iter_comp_iter<_Compare>::operator()(_Iterator1,\
    \ _Iterator2) [with _Iterator1 = __gnu_cxx::__normal_iterator<std::vector<long\
    \ int>*, std::vector<std::vector<long int> > >; _Iterator2 = __gnu_cxx::__normal_iterator<std::vector<long\
    \ int>*, std::vector<std::vector<long int> > >; _Compare = get_row(std::vector<std::vector<long\
    \ int> >, long int)::<lambda(auto:3&, auto:4&)>]\u2019:\n/usr/include/c++/9/bits/stl_algo.h:81:17:\
    \   required from \u2018void std::__move_median_to_first(_Iterator, _Iterator,\
    \ _Iterator, _Iterator, _Compare) [with _Iterator = __gnu_cxx::__normal_iterator<std::vector<long\
    \ int>*, std::vector<std::vector<long int> > >; _Compare = __gnu_cxx::__ops::_Iter_comp_iter<get_row(std::vector<std::vector<long\
    \ int> >, long int)::<lambda(auto:3&, auto:4&)> >]\u2019\n/usr/include/c++/9/bits/stl_algo.h:1926:34:\
    \   required from \u2018_RandomAccessIterator std::__unguarded_partition_pivot(_RandomAccessIterator,\
    \ _RandomAccessIterator, _Compare) [with _RandomAccessIterator = __gnu_cxx::__normal_iterator<std::vector<long\
    \ int>*, std::vector<std::vector<long int> > >; _Compare = __gnu_cxx::__ops::_Iter_comp_iter<get_row(std::vector<std::vector<long\
    \ int> >, long int)::<lambda(auto:3&, auto:4&)> >]\u2019\n/usr/include/c++/9/bits/stl_algo.h:1958:38:\
    \   required from \u2018void std::__introsort_loop(_RandomAccessIterator, _RandomAccessIterator,\
    \ _Size, _Compare) [with _RandomAccessIterator = __gnu_cxx::__normal_iterator<std::vector<long\
    \ int>*, std::vector<std::vector<long int> > >; _Size = long int; _Compare = __gnu_cxx::__ops::_Iter_comp_iter<get_row(std::vector<std::vector<long\
    \ int> >, long int)::<lambda(auto:3&, auto:4&)> >]\u2019\n/usr/include/c++/9/bits/stl_algo.h:1973:25:\
    \   required from \u2018void std::__sort(_RandomAccessIterator, _RandomAccessIterator,\
    \ _Compare) [with _RandomAccessIterator = __gnu_cxx::__normal_iterator<std::vector<long\
    \ int>*, std::vector<std::vector<long int> > >; _Compare = __gnu_cxx::__ops::_Iter_comp_iter<get_row(std::vector<std::vector<long\
    \ int> >, long int)::<lambda(auto:3&, auto:4&)> >]\u2019\n/usr/include/c++/9/bits/stl_algo.h:4905:18:\
    \   required from \u2018void std::sort(_RAIter, _RAIter, _Compare) [with _RAIter\
    \ = __gnu_cxx::__normal_iterator<std::vector<long int>*, std::vector<std::vector<long\
    \ int> > >; _Compare = get_row(std::vector<std::vector<long int> >, long int)::<lambda(auto:3&,\
    \ auto:4&)>]\u2019\n/tmp/tmp9nso5a8f.cpp:34:105:   required from here\n/usr/include/c++/9/bits/predefined_ops.h:143:18:\
    \ error: void value not ignored as it ought to be\n  143 |         { return bool(_M_comp(*__it1,\
    \ *__it2)); }\n      |                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/usr/include/c++/9/bits/predefined_ops.h:\
    \ In instantiation of \u2018bool __gnu_cxx::__ops::_Val_comp_iter<_Compare>::operator()(_Value&,\
    \ _Iterator) [with _Value = std::vector<long int>; _Iterator = __gnu_cxx::__normal_iterator<std::vector<long\
    \ int>*, std::vector<std::vector<long int> > >; _Compare = get_row(std::vector<std::vector<long\
    \ int> >, long int)::<lambda(auto:1&, auto:2&)>]\u2019:\n/usr/include/c++/9/bits/stl_algo.h:1833:20:\
    \   required from \u2018void std::__unguarded_linear_insert(_RandomAccessIterator,\
    \ _Compare) [with _RandomAccessIterator = __gnu_cxx::__normal_iterator<std::vector<long\
    \ int>*, std::vector<std::vector<long int> > >; _Compare = __gnu_cxx::__ops::_Val_comp_iter<get_row(std::vector<std::vector<long\
    \ int> >, long int)::<lambda(auto:1&, auto:2&)> >]\u2019\n/usr/include/c++/9/bits/stl_algo.h:1860:36:\
    \   required from \u2018void std::__insertion_sort(_RandomAccessIterator, _RandomAccessIterator,\
    \ _Compare) [with _RandomAccessIterator = __gnu_cxx::__normal_iterator<std::vector<long\
    \ int>*, std::vector<std::vector<long int> > >; _Compare = __gnu_cxx::__ops::_Iter_comp_iter<get_row(std::vector<std::vector<long\
    \ int> >, long int)::<lambda(auto:1&, auto:2&)> >]\u2019\n/usr/include/c++/9/bits/stl_algo.h:1890:25:\
    \   required from \u2018void std::__final_insertion_sort(_RandomAccessIterator,\
    \ _RandomAccessIterator, _Compare) [with _RandomAccessIterator = __gnu_cxx::__normal_iterator<std::vector<long\
    \ int>*, std::vector<std::vector<long int> > >; _Compare = __gnu_cxx::__ops::_Iter_comp_iter<get_row(std::vector<std::vector<long\
    \ int> >, long int)::<lambda(auto:1&, auto:2&)> >]\u2019\n/usr/include/c++/9/bits/stl_algo.h:1976:31:\
    \   required from \u2018void std::__sort(_RandomAccessIterator, _RandomAccessIterator,\
    \ _Compare) [with _RandomAccessIterator = __gnu_cxx::__normal_iterator<std::vector<long\
    \ int>*, std::vector<std::vector<long int> > >; _Compare = __gnu_cxx::__ops::_Iter_comp_iter<get_row(std::vector<std::vector<long\
    \ int> >, long int)::<lambda(auto:1&, auto:2&)> >]\u2019\n/usr/include/c++/9/bits/stl_algo.h:4905:18:\
    \   required from \u2018void std::sort(_RAIter, _RAIter, _Compare) [with _RAIter\
    \ = __gnu_cxx::__normal_iterator<std::vector<long int>*, std::vector<std::vector<long\
    \ int> > >; _Compare = get_row(std::vector<std::vector<long int> >, long int)::<lambda(auto:1&,\
    \ auto:2&)>]\u2019\n/tmp/tmp9nso5a8f.cpp:33:105:   required from here\n/usr/include/c++/9/bits/predefined_ops.h:215:11:\
    \ error: void value not ignored as it ought to be\n  215 |  { return bool(_M_comp(__val,\
    \ *__it)); }\n      |           ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/usr/include/c++/9/bits/predefined_ops.h:\
    \ In instantiation of \u2018bool __gnu_cxx::__ops::_Val_comp_iter<_Compare>::operator()(_Value&,\
    \ _Iterator) [with _Value = std::vector<long int>; _Iterator = __gnu_cxx::__normal_iterator<std::vector<long\
    \ int>*, std::vector<std::vector<long int> > >; _Compare = get_row(std::vector<std::vector<long\
    \ int> >, long int)::<lambda(auto:3&, auto:4&)>]\u2019:\n/usr/include/c++/9/bits/stl_algo.h:1833:20:\
    \   required from \u2018void std::__unguarded_linear_insert(_RandomAccessIterator,\
    \ _Compare) [with _RandomAccessIterator = __gnu_cxx::__normal_iterator<std::vector<long\
    \ int>*, std::vector<std::vector<long int> > >; _Compare = __gnu_cxx::__ops::_Val_comp_iter<get_row(std::vector<std::vector<long\
    \ int> >, long int)::<lambda(auto:3&, auto:4&)> >]\u2019\n/usr/include/c++/9/bits/stl_algo.h:1860:36:\
    \   required from \u2018void std::__insertion_sort(_RandomAccessIterator, _RandomAccessIterator,\
    \ _Compare) [with _RandomAccessIterator = __gnu_cxx::__normal_iterator<std::vector<long\
    \ int>*, std::vector<std::vector<long int> > >; _Compare = __gnu_cxx::__ops::_Iter_comp_iter<get_row(std::vector<std::vector<long\
    \ int> >, long int)::<lambda(auto:3&, auto:4&)> >]\u2019\n/usr/include/c++/9/bits/stl_algo.h:1890:25:\
    \   required from \u2018void std::__final_insertion_sort(_RandomAccessIterator,\
    \ _RandomAccessIterator, _Compare) [with _RandomAccessIterator = __gnu_cxx::__normal_iterator<std::vector<long\
    \ int>*, std::vector<std::vector<long int> > >; _Compare = __gnu_cxx::__ops::_Iter_comp_iter<get_row(std::vector<std::vector<long\
    \ int> >, long int)::<lambda(auto:3&, auto:4&)> >]\u2019\n/usr/include/c++/9/bits/stl_algo.h:1976:31:\
    \   required from \u2018void std::__sort(_RandomAccessIterator, _RandomAccessIterator,\
    \ _Compare) [with _RandomAccessIterator = __gnu_cxx::__normal_iterator<std::vector<long\
    \ int>*, std::vector<std::vector<long int> > >; _Compare = __gnu_cxx::__ops::_Iter_comp_iter<get_row(std::vector<std::vector<long\
    \ int> >, long int)::<lambda(auto:3&, auto:4&)> >]\u2019\n/usr/include/c++/9/bits/stl_algo.h:4905:18:\
    \   required from \u2018void std::sort(_RAIter, _RAIter, _Compare) [with _RAIter\
    \ = __gnu_cxx::__normal_iterator<std::vector<long int>*, std::vector<std::vector<long\
    \ int> > >; _Compare = get_row(std::vector<std::vector<long int> >, long int)::<lambda(auto:3&,\
    \ auto:4&)>]\u2019\n/tmp/tmp9nso5a8f.cpp:34:105:   required from here\n/usr/include/c++/9/bits/predefined_ops.h:215:11:\
    \ error: void value not ignored as it ought to be\n/usr/include/c++/9/bits/predefined_ops.h:\
    \ In instantiation of \u2018bool __gnu_cxx::__ops::_Iter_comp_val<_Compare>::operator()(_Iterator,\
    \ _Value&) [with _Iterator = __gnu_cxx::__normal_iterator<std::vector<long int>*,\
    \ std::vector<std::vector<long int> > >; _Value = std::vector<long int>; _Compare\
    \ = get_row(std::vector<std::vector<long int> >, long int)::<lambda(auto:1&, auto:2&)>]\u2019\
    :\n/usr/include/c++/9/bits/stl_heap.h:133:48:   required from \u2018void std::__push_heap(_RandomAccessIterator,\
    \ _Distance, _Distance, _Tp, _Compare&) [with _RandomAccessIterator = __gnu_cxx::__normal_iterator<std::vector<long\
    \ int>*, std::vector<std::vector<long int> > >; _Distance = long int; _Tp = std::vector<long\
    \ int>; _Compare = __gnu_cxx::__ops::_Iter_comp_val<get_row(std::vector<std::vector<long\
    \ int> >, long int)::<lambda(auto:1&, auto:2&)> >]\u2019\n/usr/include/c++/9/bits/stl_heap.h:237:23:\
    \   required from \u2018void std::__adjust_heap(_RandomAccessIterator, _Distance,\
    \ _Distance, _Tp, _Compare) [with _RandomAccessIterator = __gnu_cxx::__normal_iterator<std::vector<long\
    \ int>*, std::vector<std::vector<long int> > >; _Distance = long int; _Tp = std::vector<long\
    \ int>; _Compare = __gnu_cxx::__ops::_Iter_comp_iter<get_row(std::vector<std::vector<long\
    \ int> >, long int)::<lambda(auto:1&, auto:2&)> >]\u2019\n/usr/include/c++/9/bits/stl_heap.h:342:22:\
    \   required from \u2018void std::__make_heap(_RandomAccessIterator, _RandomAccessIterator,\
    \ _Compare&) [with _RandomAccessIterator = __gnu_cxx::__normal_iterator<std::vector<long\
    \ int>*, std::vector<std::vector<long int> > >; _Compare = __gnu_cxx::__ops::_Iter_comp_iter<get_row(std::vector<std::vector<long\
    \ int> >, long int)::<lambda(auto:1&, auto:2&)> >]\u2019\n/usr/include/c++/9/bits/stl_algo.h:1677:23:\
    \   required from \u2018void std::__heap_select(_RandomAccessIterator, _RandomAccessIterator,\
    \ _RandomAccessIterator, _Compare) [with _RandomAccessIterator = __gnu_cxx::__normal_iterator<std::vector<long\
    \ int>*, std::vector<std::vector<long int> > >; _Compare = __gnu_cxx::__ops::_Iter_comp_iter<get_row(std::vector<std::vector<long\
    \ int> >, long int)::<lambda(auto:1&, auto:2&)> >]\u2019\n/usr/include/c++/9/bits/stl_algo.h:1938:25:\
    \   required from \u2018void std::__partial_sort(_RandomAccessIterator, _RandomAccessIterator,\
    \ _RandomAccessIterator, _Compare) [with _RandomAccessIterator = __gnu_cxx::__normal_iterator<std::vector<long\
    \ int>*, std::vector<std::vector<long int> > >; _Compare = __gnu_cxx::__ops::_Iter_comp_iter<get_row(std::vector<std::vector<long\
    \ int> >, long int)::<lambda(auto:1&, auto:2&)> >]\u2019\n/usr/include/c++/9/bits/stl_algo.h:1953:27:\
    \   required from \u2018void std::__introsort_loop(_RandomAccessIterator, _RandomAccessIterator,\
    \ _Size, _Compare) [with _RandomAccessIterator = __gnu_cxx::__normal_iterator<std::vector<long\
    \ int>*, std::vector<std::vector<long int> > >; _Size = long int; _Compare = __gnu_cxx::__ops::_Iter_comp_iter<get_row(std::vector<std::vector<long\
    \ int> >, long int)::<lambda(auto:1&, auto:2&)> >]\u2019\n/usr/include/c++/9/bits/stl_algo.h:1973:25:\
    \   required from \u2018void std::__sort(_RandomAccessIterator, _RandomAccessIterator,\
    \ _Compare) [with _RandomAccessIterator = __gnu_cxx::__normal_iterator<std::vector<long\
    \ int>*, std::vector<std::vector<long int> > >; _Compare = __gnu_cxx::__ops::_Iter_comp_iter<get_row(std::vector<std::vector<long\
    \ int> >, long int)::<lambda(auto:1&, auto:2&)> >]\u2019\n/usr/include/c++/9/bits/stl_algo.h:4905:18:\
    \   required from \u2018void std::sort(_RAIter, _RAIter, _Compare) [with _RAIter\
    \ = __gnu_cxx::__normal_iterator<std::vector<long int>*, std::vector<std::vector<long\
    \ int> > >; _Compare = get_row(std::vector<std::vector<long int> >, long int)::<lambda(auto:1&,\
    \ auto:2&)>]\u2019\n/tmp/tmp9nso5a8f.cpp:33:105:   required from here\n/usr/include/c++/9/bits/predefined_ops.h:177:11:\
    \ error: void value not ignored as it ought to be\n  177 |  { return bool(_M_comp(*__it,\
    \ __val)); }\n      |           ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/usr/include/c++/9/bits/predefined_ops.h:\
    \ In instantiation of \u2018bool __gnu_cxx::__ops::_Iter_comp_val<_Compare>::operator()(_Iterator,\
    \ _Value&) [with _Iterator = __gnu_cxx::__normal_iterator<std::vector<long int>*,\
    \ std::vector<std::vector<long int> > >; _Value = std::vector<long int>; _Compare\
    \ = get_row(std::vector<std::vector<long int> >, long int)::<lambda(auto:3&, auto:4&)>]\u2019\
    :\n/usr/include/c++/9/bits/stl_heap.h:133:48:   required from \u2018void std::__push_heap(_RandomAccessIterator,\
    \ _Distance, _Distance, _Tp, _Compare&) [with _RandomAccessIterator = __gnu_cxx::__normal_iterator<std::vector<long\
    \ int>*, std::vector<std::vector<long int> > >; _Distance = long int; _Tp = std::vector<long\
    \ int>; _Compare = __gnu_cxx::__ops::_Iter_comp_val<get_row(std::vector<std::vector<long\
    \ int> >, long int)::<lambda(auto:3&, auto:4&)> >]\u2019\n/usr/include/c++/9/bits/stl_heap.h:237:23:\
    \   required from \u2018void std::__adjust_heap(_RandomAccessIterator, _Distance,\
    \ _Distance, _Tp, _Compare) [with _RandomAccessIterator = __gnu_cxx::__normal_iterator<std::vector<long\
    \ int>*, std::vector<std::vector<long int> > >; _Distance = long int; _Tp = std::vector<long\
    \ int>; _Compare = __gnu_cxx::__ops::_Iter_comp_iter<get_row(std::vector<std::vector<long\
    \ int> >, long int)::<lambda(auto:3&, auto:4&)> >]\u2019\n/usr/include/c++/9/bits/stl_heap.h:342:22:\
    \   required from \u2018void std::__make_heap(_RandomAccessIterator, _RandomAccessIterator,\
    \ _Compare&) [with _RandomAccessIterator = __gnu_cxx::__normal_iterator<std::vector<long\
    \ int>*, std::vector<std::vector<long int> > >; _Compare = __gnu_cxx::__ops::_Iter_comp_iter<get_row(std::vector<std::vector<long\
    \ int> >, long int)::<lambda(auto:3&, auto:4&)> >]\u2019\n/usr/include/c++/9/bits/stl_algo.h:1677:23:\
    \   required from \u2018void std::__heap_select(_RandomAccessIterator, _RandomAccessIterator,\
    \ _RandomAccessIterator, _Compare) [with _RandomAccessIterator = __gnu_cxx::__normal_iterator<std::vector<long\
    \ int>*, std::vector<std::vector<long int> > >; _Compare = __gnu_cxx::__ops::_Iter_comp_iter<get_row(std::vector<std::vector<long\
    \ int> >, long int)::<lambda(auto:3&, auto:4&)> >]\u2019\n/usr/include/c++/9/bits/stl_algo.h:1938:25:\
    \   required from \u2018void std::__partial_sort(_RandomAccessIterator, _RandomAccessIterator,\
    \ _RandomAccessIterator, _Compare) [with _RandomAccessIterator = __gnu_cxx::__normal_iterator<std::vector<long\
    \ int>*, std::vector<std::vector<long int> > >; _Compare = __gnu_cxx::__ops::_Iter_comp_iter<get_row(std::vector<std::vector<long\
    \ int> >, long int)::<lambda(auto:3&, auto:4&)> >]\u2019\n/usr/include/c++/9/bits/stl_algo.h:1953:27:\
    \   required from \u2018void std::__introsort_loop(_RandomAccessIterator, _RandomAccessIterator,\
    \ _Size, _Compare) [with _RandomAccessIterator = __gnu_cxx::__normal_iterator<std::vector<long\
    \ int>*, std::vector<std::vector<long int> > >; _Size = long int; _Compare = __gnu_cxx::__ops::_Iter_comp_iter<get_row(std::vector<std::vector<long\
    \ int> >, long int)::<lambda(auto:3&, auto:4&)> >]\u2019\n/usr/include/c++/9/bits/stl_algo.h:1973:25:\
    \   required from \u2018void std::__sort(_RandomAccessIterator, _RandomAccessIterator,\
    \ _Compare) [with _RandomAccessIterator = __gnu_cxx::__normal_iterator<std::vector<long\
    \ int>*, std::vector<std::vector<long int> > >; _Compare = __gnu_cxx::__ops::_Iter_comp_iter<get_row(std::vector<std::vector<long\
    \ int> >, long int)::<lambda(auto:3&, auto:4&)> >]\u2019\n/usr/include/c++/9/bits/stl_algo.h:4905:18:\
    \   required from \u2018void std::sort(_RAIter, _RAIter, _Compare) [with _RAIter\
    \ = __gnu_cxx::__normal_iterator<std::vector<long int>*, std::vector<std::vector<long\
    \ int> > >; _Compare = get_row(std::vector<std::vector<long int> >, long int)::<lambda(auto:3&,\
    \ auto:4&)>]\u2019\n/tmp/tmp9nso5a8f.cpp:34:105:   required from here\n/usr/include/c++/9/bits/predefined_ops.h:177:11:\
    \ error: void value not ignored as it ought to be\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    // Write your code here\n    std::vector<std::tuple<long,\
    \ long>> res;\n    for(auto &row : lst) {\n        for(auto &el : row) {\n   \
    \         if(el == x) {\n                res.emplace_back(std::make_tuple(row.size()\
    \ - 1, row.size() - 1));\n            }\n        }\n    }\n    std::sort(res.begin(),\
    \ res.end(), [](const std::tuple<long, long> &a, const std::tuple<long, long>\
    \ &b) -> bool {\n        return std::get<0>(a) < std::get<0>(b);\n    });\n  \
    \  std::sort(res.begin(), res.end(), [](const std::tuple<long, long> &a, const\
    \ std::tuple<long, long> &b) -> bool {\n        return std::get<1>(a) < std::get<1>(b);\n\
    \    });\n    return res;\n}\nint main() {\n    auto candidate = get_row;\n  \
    \  assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "tmpbchve1cv: /tmp/tmpbchve1cv.cpp:39: int main(): Assertion `candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    std::vector<std::tuple<long, long>> res;\n    res.reserve(lst.size());\n\
    \    for (auto &row : lst) {\n        std::sort(row.begin(), row.end());\n   \
    \     std::reverse(row.begin(), row.end());\n        std::vector<std::tuple<long,\
    \ long>> rowres;\n        rowres.reserve(row.size());\n        for (auto &el :\
    \ row) {\n            rowres.emplace_back(el);\n        }\n        res.emplace_back(std::make_tuple(std::distance(row.begin(),\
    \ std::find(row.begin(), row.end(), x)), std::distance(row.rbegin(), std::find(row.rbegin(),\
    \ row.rend(), x))));\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = get_row;\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "In file included from /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n\
    \                 from /usr/include/c++/9/bits/allocator.h:46,\n             \
    \    from /usr/include/c++/9/string:41,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpfn6ks9kv.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h: In instantiation\
    \ of \u2018void __gnu_cxx::new_allocator<_Tp>::construct(_Up*, _Args&& ...) [with\
    \ _Up = std::tuple<long int, long int>; _Args = {long int&}; _Tp = std::tuple<long\
    \ int, long int>]\u2019:\n/usr/include/c++/9/bits/alloc_traits.h:483:4:   required\
    \ from \u2018static void std::allocator_traits<std::allocator<_CharT> >::construct(std::allocator_traits<std::allocator<_CharT>\
    \ >::allocator_type&, _Up*, _Args&& ...) [with _Up = std::tuple<long int, long\
    \ int>; _Args = {long int&}; _Tp = std::tuple<long int, long int>; std::allocator_traits<std::allocator<_CharT>\
    \ >::allocator_type = std::allocator<std::tuple<long int, long int> >]\u2019\n\
    /usr/include/c++/9/bits/vector.tcc:115:30:   required from \u2018void std::vector<_Tp,\
    \ _Alloc>::emplace_back(_Args&& ...) [with _Args = {long int&}; _Tp = std::tuple<long\
    \ int, long int>; _Alloc = std::allocator<std::tuple<long int, long int> >]\u2019\
    \n/tmp/tmpfn6ks9kv.cpp:28:35:   required from here\n/usr/include/c++/9/ext/new_allocator.h:146:4:\
    \ error: no matching function for call to \u2018std::tuple<long int, long int>::tuple(long\
    \ int&)\u2019\n  146 |  { ::new((void *)__p) _Up(std::forward<_Args>(__args)...);\
    \ }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nIn file\
    \ included from /usr/include/c++/9/functional:54,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmpfn6ks9kv.cpp:2:\n/usr/include/c++/9/tuple:1199:18:\
    \ note: candidate: \u2018template<class _Alloc, class _U1, class _U2, typename\
    \ std::enable_if<(_MoveConstructibleTuple<_U1, _U2>() && (! _ImplicitlyMoveConvertibleTuple<_U1,\
    \ _U2>())), bool>::type <anonymous> > std::tuple<_T1, _T2>::tuple(std::allocator_arg_t,\
    \ const _Alloc&, std::pair<_U1, _U2>&&)\u2019\n 1199 |         explicit tuple(allocator_arg_t\
    \ __tag, const _Alloc& __a,\n      |                  ^~~~~\n/usr/include/c++/9/tuple:1199:18:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n              \
    \   from /usr/include/c++/9/bits/allocator.h:46,\n                 from /usr/include/c++/9/string:41,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpfn6ks9kv.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4:\
    \ note:   candidate expects 3 arguments, 1 provided\n  146 |  { ::new((void *)__p)\
    \ _Up(std::forward<_Args>(__args)...); }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    In file included from /usr/include/c++/9/functional:54,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n                 from\
    \ /tmp/tmpfn6ks9kv.cpp:2:\n/usr/include/c++/9/tuple:1189:9: note: candidate: \u2018\
    template<class _Alloc, class _U1, class _U2, typename std::enable_if<(_MoveConstructibleTuple<_U1,\
    \ _U2>() && _ImplicitlyMoveConvertibleTuple<_U1, _U2>()), bool>::type <anonymous>\
    \ > std::tuple<_T1, _T2>::tuple(std::allocator_arg_t, const _Alloc&, std::pair<_U1,\
    \ _U2>&&)\u2019\n 1189 |         tuple(allocator_arg_t __tag, const _Alloc& __a,\
    \ pair<_U1, _U2>&& __in)\n      |         ^~~~~\n/usr/include/c++/9/tuple:1189:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n              \
    \   from /usr/include/c++/9/bits/allocator.h:46,\n                 from /usr/include/c++/9/string:41,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpfn6ks9kv.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4:\
    \ note:   candidate expects 3 arguments, 1 provided\n  146 |  { ::new((void *)__p)\
    \ _Up(std::forward<_Args>(__args)...); }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    In file included from /usr/include/c++/9/functional:54,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n                 from\
    \ /tmp/tmpfn6ks9kv.cpp:2:\n/usr/include/c++/9/tuple:1179:18: note: candidate:\
    \ \u2018template<class _Alloc, class _U1, class _U2, typename std::enable_if<(_ConstructibleTuple<_U1,\
    \ _U2>() && (! _ImplicitlyConvertibleTuple<_U1, _U2>())), bool>::type <anonymous>\
    \ > std::tuple<_T1, _T2>::tuple(std::allocator_arg_t, const _Alloc&, const std::pair<_U1,\
    \ _U2>&)\u2019\n 1179 |         explicit tuple(allocator_arg_t __tag, const _Alloc&\
    \ __a,\n      |                  ^~~~~\n/usr/include/c++/9/tuple:1179:18: note:\
    \   template argument deduction/substitution failed:\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n\
    \                 from /usr/include/c++/9/bits/allocator.h:46,\n             \
    \    from /usr/include/c++/9/string:41,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpfn6ks9kv.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4: note:\
    \   candidate expects 3 arguments, 1 provided\n  146 |  { ::new((void *)__p) _Up(std::forward<_Args>(__args)...);\
    \ }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nIn file\
    \ included from /usr/include/c++/9/functional:54,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmpfn6ks9kv.cpp:2:\n/usr/include/c++/9/tuple:1169:9:\
    \ note: candidate: \u2018template<class _Alloc, class _U1, class _U2, typename\
    \ std::enable_if<(_ConstructibleTuple<_U1, _U2>() && _ImplicitlyConvertibleTuple<_U1,\
    \ _U2>()), bool>::type <anonymous> > std::tuple<_T1, _T2>::tuple(std::allocator_arg_t,\
    \ const _Alloc&, const std::pair<_U1, _U2>&)\u2019\n 1169 |         tuple(allocator_arg_t\
    \ __tag, const _Alloc& __a,\n      |         ^~~~~\n/usr/include/c++/9/tuple:1169:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n              \
    \   from /usr/include/c++/9/bits/allocator.h:46,\n                 from /usr/include/c++/9/string:41,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpfn6ks9kv.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4:\
    \ note:   candidate expects 3 arguments, 1 provided\n  146 |  { ::new((void *)__p)\
    \ _Up(std::forward<_Args>(__args)...); }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    In file included from /usr/include/c++/9/functional:54,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n                 from\
    \ /tmp/tmpfn6ks9kv.cpp:2:\n/usr/include/c++/9/tuple:1158:11: note: candidate:\
    \ \u2018template<class _Alloc, class _U1, class _U2, typename std::enable_if<(_MoveConstructibleTuple<_U1,\
    \ _U2>() && (! _ImplicitlyMoveConvertibleTuple<_U1, _U2>())), bool>::type <anonymous>\
    \ > std::tuple<_T1, _T2>::tuple(std::allocator_arg_t, const _Alloc&, std::tuple<_U1,\
    \ _U2>&&)\u2019\n 1158 |  explicit tuple(allocator_arg_t __tag, const _Alloc&\
    \ __a,\n      |           ^~~~~\n/usr/include/c++/9/tuple:1158:11: note:   template\
    \ argument deduction/substitution failed:\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n\
    \                 from /usr/include/c++/9/bits/allocator.h:46,\n             \
    \    from /usr/include/c++/9/string:41,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpfn6ks9kv.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4: note:\
    \   candidate expects 3 arguments, 1 provided\n  146 |  { ::new((void *)__p) _Up(std::forward<_Args>(__args)...);\
    \ }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nIn file\
    \ included from /usr/include/c++/9/functional:54,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmpfn6ks9kv.cpp:2:\n/usr/include/c++/9/tuple:1148:2:\
    \ note: candidate: \u2018template<class _Alloc, class _U1, class _U2, typename\
    \ std::enable_if<(_MoveConstructibleTuple<_U1, _U2>() && _ImplicitlyMoveConvertibleTuple<_U1,\
    \ _U2>()), bool>::type <anonymous> > std::tuple<_T1, _T2>::tuple(std::allocator_arg_t,\
    \ const _Alloc&, std::tuple<_U1, _U2>&&)\u2019\n 1148 |  tuple(allocator_arg_t\
    \ __tag, const _Alloc& __a, tuple<_U1, _U2>&& __in)\n      |  ^~~~~\n/usr/include/c++/9/tuple:1148:2:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n              \
    \   from /usr/include/c++/9/bits/allocator.h:46,\n                 from /usr/include/c++/9/string:41,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpfn6ks9kv.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4:\
    \ note:   candidate expects 3 arguments, 1 provided\n  146 |  { ::new((void *)__p)\
    \ _Up(std::forward<_Args>(__args)...); }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    In file included from /usr/include/c++/9/functional:54,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n                 from\
    \ /tmp/tmpfn6ks9kv.cpp:2:\n/usr/include/c++/9/tuple:1136:11: note: candidate:\
    \ \u2018template<class _Alloc, class _U1, class _U2, typename std::enable_if<(_ConstructibleTuple<_U1,\
    \ _U2>() && (! _ImplicitlyConvertibleTuple<_U1, _U2>())), bool>::type <anonymous>\
    \ > std::tuple<_T1, _T2>::tuple(std::allocator_arg_t, const _Alloc&, const std::tuple<_U1,\
    \ _U2>&)\u2019\n 1136 |  explicit tuple(allocator_arg_t __tag, const _Alloc& __a,\n\
    \      |           ^~~~~\n/usr/include/c++/9/tuple:1136:11: note:   template argument\
    \ deduction/substitution failed:\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n\
    \                 from /usr/include/c++/9/bits/allocator.h:46,\n             \
    \    from /usr/include/c++/9/string:41,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpfn6ks9kv.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4: note:\
    \   candidate expects 3 arguments, 1 provided\n  146 |  { ::new((void *)__p) _Up(std::forward<_Args>(__args)...);\
    \ }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nIn file\
    \ included from /usr/include/c++/9/functional:54,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmpfn6ks9kv.cpp:2:\n/usr/include/c++/9/tuple:1124:2:\
    \ note: candidate: \u2018template<class _Alloc, class _U1, class _U2, typename\
    \ std::enable_if<(_ConstructibleTuple<_U1, _U2>() && _ImplicitlyConvertibleTuple<_U1,\
    \ _U2>()), bool>::type <anonymous> > std::tuple<_T1, _T2>::tuple(std::allocator_arg_t,\
    \ const _Alloc&, const std::tuple<_U1, _U2>&)\u2019\n 1124 |  tuple(allocator_arg_t\
    \ __tag, const _Alloc& __a,\n      |  ^~~~~\n/usr/include/c++/9/tuple:1124:2:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n              \
    \   from /usr/include/c++/9/bits/allocator.h:46,\n                 from /usr/include/c++/9/string:41,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpfn6ks9kv.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4:\
    \ note:   candidate expects 3 arguments, 1 provided\n  146 |  { ::new((void *)__p)\
    \ _Up(std::forward<_Args>(__args)...); }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    In file included from /usr/include/c++/9/functional:54,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n                 from\
    \ /tmp/tmpfn6ks9kv.cpp:2:\n/usr/include/c++/9/tuple:1115:2: note: candidate: \u2018\
    template<class _Alloc> std::tuple<_T1, _T2>::tuple(std::allocator_arg_t, const\
    \ _Alloc&, std::tuple<_T1, _T2>&&)\u2019\n 1115 |  tuple(allocator_arg_t __tag,\
    \ const _Alloc& __a, tuple&& __in)\n      |  ^~~~~\n/usr/include/c++/9/tuple:1115:2:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n              \
    \   from /usr/include/c++/9/bits/allocator.h:46,\n                 from /usr/include/c++/9/string:41,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpfn6ks9kv.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4:\
    \ note:   candidate expects 3 arguments, 1 provided\n  146 |  { ::new((void *)__p)\
    \ _Up(std::forward<_Args>(__args)...); }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    In file included from /usr/include/c++/9/functional:54,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n                 from\
    \ /tmp/tmpfn6ks9kv.cpp:2:\n/usr/include/c++/9/tuple:1111:2: note: candidate: \u2018\
    template<class _Alloc> std::tuple<_T1, _T2>::tuple(std::allocator_arg_t, const\
    \ _Alloc&, const std::tuple<_T1, _T2>&)\u2019\n 1111 |  tuple(allocator_arg_t\
    \ __tag, const _Alloc& __a, const tuple& __in)\n      |  ^~~~~\n/usr/include/c++/9/tuple:1111:2:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n              \
    \   from /usr/include/c++/9/bits/allocator.h:46,\n                 from /usr/include/c++/9/string:41,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpfn6ks9kv.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4:\
    \ note:   candidate expects 3 arguments, 1 provided\n  146 |  { ::new((void *)__p)\
    \ _Up(std::forward<_Args>(__args)...); }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    In file included from /usr/include/c++/9/functional:54,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n                 from\
    \ /tmp/tmpfn6ks9kv.cpp:2:\n/usr/include/c++/9/tuple:1105:11: note: candidate:\
    \ \u2018template<class _Alloc, class _U1, class _U2, typename std::enable_if<(_MoveConstructibleTuple<_U1,\
    \ _U2>() && (! _ImplicitlyMoveConvertibleTuple<_U1, _U2>())), bool>::type <anonymous>\
    \ > std::tuple<_T1, _T2>::tuple(std::allocator_arg_t, const _Alloc&, _U1&&, _U2&&)\u2019\
    \n 1105 |  explicit tuple(allocator_arg_t __tag, const _Alloc& __a,\n      | \
    \          ^~~~~\n/usr/include/c++/9/tuple:1105:11: note:   template argument\
    \ deduction/substitution failed:\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n\
    \                 from /usr/include/c++/9/bits/allocator.h:46,\n             \
    \    from /usr/include/c++/9/string:41,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpfn6ks9kv.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4: note:\
    \   candidate expects 4 arguments, 1 provided\n  146 |  { ::new((void *)__p) _Up(std::forward<_Args>(__args)...);\
    \ }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nIn file\
    \ included from /usr/include/c++/9/functional:54,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmpfn6ks9kv.cpp:2:\n/usr/include/c++/9/tuple:1095:2:\
    \ note: candidate: \u2018template<class _Alloc, class _U1, class _U2, typename\
    \ std::enable_if<(_MoveConstructibleTuple<_U1, _U2>() && _ImplicitlyMoveConvertibleTuple<_U1,\
    \ _U2>()), bool>::type <anonymous> > std::tuple<_T1, _T2>::tuple(std::allocator_arg_t,\
    \ const _Alloc&, _U1&&, _U2&&)\u2019\n 1095 |  tuple(allocator_arg_t __tag, const\
    \ _Alloc& __a, _U1&& __a1, _U2&& __a2)\n      |  ^~~~~\n/usr/include/c++/9/tuple:1095:2:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n              \
    \   from /usr/include/c++/9/bits/allocator.h:46,\n                 from /usr/include/c++/9/string:41,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpfn6ks9kv.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4:\
    \ note:   candidate expects 4 arguments, 1 provided\n  146 |  { ::new((void *)__p)\
    \ _Up(std::forward<_Args>(__args)...); }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    In file included from /usr/include/c++/9/functional:54,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n                 from\
    \ /tmp/tmpfn6ks9kv.cpp:2:\n/usr/include/c++/9/tuple:1085:11: note: candidate:\
    \ \u2018template<class _Alloc, class _Dummy, typename std::enable_if<(std::_TC<std::is_same<_Dummy,\
    \ void>::value, long int, long int>::_ConstructibleTuple<long int, long int>()\
    \ && (! std::_TC<std::is_same<_Dummy, void>::value, long int, long int>::_ImplicitlyConvertibleTuple<long\
    \ int, long int>())), bool>::type <anonymous> > std::tuple<_T1, _T2>::tuple(std::allocator_arg_t,\
    \ const _Alloc&, const _T1&, const _T2&)\u2019\n 1085 |  explicit tuple(allocator_arg_t\
    \ __tag, const _Alloc& __a,\n      |           ^~~~~\n/usr/include/c++/9/tuple:1085:11:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n              \
    \   from /usr/include/c++/9/bits/allocator.h:46,\n                 from /usr/include/c++/9/string:41,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpfn6ks9kv.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4:\
    \ note:   candidate expects 4 arguments, 1 provided\n  146 |  { ::new((void *)__p)\
    \ _Up(std::forward<_Args>(__args)...); }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    In file included from /usr/include/c++/9/functional:54,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n                 from\
    \ /tmp/tmpfn6ks9kv.cpp:2:\n/usr/include/c++/9/tuple:1073:2: note: candidate: \u2018\
    template<class _Alloc, class _Dummy, typename std::enable_if<(std::_TC<std::is_same<_Dummy,\
    \ void>::value, long int, long int>::_ConstructibleTuple<long int, long int>()\
    \ && std::_TC<std::is_same<_Dummy, void>::value, long int, long int>::_ImplicitlyConvertibleTuple<long\
    \ int, long int>()), bool>::type <anonymous> > std::tuple<_T1, _T2>::tuple(std::allocator_arg_t,\
    \ const _Alloc&, const _T1&, const _T2&)\u2019\n 1073 |  tuple(allocator_arg_t\
    \ __tag, const _Alloc& __a,\n      |  ^~~~~\n/usr/include/c++/9/tuple:1073:2:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n              \
    \   from /usr/include/c++/9/bits/allocator.h:46,\n                 from /usr/include/c++/9/string:41,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpfn6ks9kv.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4:\
    \ note:   candidate expects 4 arguments, 1 provided\n  146 |  { ::new((void *)__p)\
    \ _Up(std::forward<_Args>(__args)...); }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    In file included from /usr/include/c++/9/functional:54,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n                 from\
    \ /tmp/tmpfn6ks9kv.cpp:2:\n/usr/include/c++/9/tuple:1062:2: note: candidate: \u2018\
    template<class _Alloc> std::tuple<_T1, _T2>::tuple(std::allocator_arg_t, const\
    \ _Alloc&)\u2019\n 1062 |  tuple(allocator_arg_t __tag, const _Alloc& __a)\n \
    \     |  ^~~~~\n/usr/include/c++/9/tuple:1062:2: note:   template argument deduction/substitution\
    \ failed:\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n\
    \                 from /usr/include/c++/9/bits/allocator.h:46,\n             \
    \    from /usr/include/c++/9/string:41,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpfn6ks9kv.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4: note:\
    \   candidate expects 2 arguments, 1 provided\n  146 |  { ::new((void *)__p) _Up(std::forward<_Args>(__args)...);\
    \ }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nIn file\
    \ included from /usr/include/c++/9/functional:54,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmpfn6ks9kv.cpp:2:\n/usr/include/c++/9/tuple:1055:28:\
    \ note: candidate: \u2018template<class _U1, class _U2, typename std::enable_if<(_MoveConstructibleTuple<_U1,\
    \ _U2>() && (! _ImplicitlyMoveConvertibleTuple<_U1, _U2>())), bool>::type <anonymous>\
    \ > constexpr std::tuple<_T1, _T2>::tuple(std::pair<_U1, _U2>&&)\u2019\n 1055\
    \ |         explicit constexpr tuple(pair<_U1, _U2>&& __in)\n      |         \
    \                   ^~~~~\n/usr/include/c++/9/tuple:1055:28: note:   template\
    \ argument deduction/substitution failed:\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n\
    \                 from /usr/include/c++/9/bits/allocator.h:46,\n             \
    \    from /usr/include/c++/9/string:41,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpfn6ks9kv.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4: note:\
    \   mismatched types \u2018std::pair<_T1, _T2>\u2019 and \u2018long int\u2019\n\
    \  146 |  { ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }\n      |\
    \    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nIn file included\
    \ from /usr/include/c++/9/functional:54,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmpfn6ks9kv.cpp:2:\n/usr/include/c++/9/tuple:1045:19:\
    \ note: candidate: \u2018template<class _U1, class _U2, typename std::enable_if<(_MoveConstructibleTuple<_U1,\
    \ _U2>() && _ImplicitlyMoveConvertibleTuple<_U1, _U2>()), bool>::type <anonymous>\
    \ > constexpr std::tuple<_T1, _T2>::tuple(std::pair<_U1, _U2>&&)\u2019\n 1045\
    \ |         constexpr tuple(pair<_U1, _U2>&& __in)\n      |                  \
    \ ^~~~~\n/usr/include/c++/9/tuple:1045:19: note:   template argument deduction/substitution\
    \ failed:\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n\
    \                 from /usr/include/c++/9/bits/allocator.h:46,\n             \
    \    from /usr/include/c++/9/string:41,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpfn6ks9kv.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4: note:\
    \   mismatched types \u2018std::pair<_T1, _T2>\u2019 and \u2018long int\u2019\n\
    \  146 |  { ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }\n      |\
    \    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nIn file included\
    \ from /usr/include/c++/9/functional:54,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmpfn6ks9kv.cpp:2:\n/usr/include/c++/9/tuple:1036:28:\
    \ note: candidate: \u2018template<class _U1, class _U2, typename std::enable_if<(_ConstructibleTuple<_U1,\
    \ _U2>() && (! _ImplicitlyConvertibleTuple<_U1, _U2>())), bool>::type <anonymous>\
    \ > constexpr std::tuple<_T1, _T2>::tuple(const std::pair<_U1, _U2>&)\u2019\n\
    \ 1036 |         explicit constexpr tuple(const pair<_U1, _U2>& __in)\n      |\
    \                            ^~~~~\n/usr/include/c++/9/tuple:1036:28: note:  \
    \ template argument deduction/substitution failed:\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n\
    \                 from /usr/include/c++/9/bits/allocator.h:46,\n             \
    \    from /usr/include/c++/9/string:41,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpfn6ks9kv.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4: note:\
    \   mismatched types \u2018const std::pair<_T1, _T2>\u2019 and \u2018long int\u2019\
    \n  146 |  { ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }\n     \
    \ |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nIn file included\
    \ from /usr/include/c++/9/functional:54,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmpfn6ks9kv.cpp:2:\n/usr/include/c++/9/tuple:1027:19:\
    \ note: candidate: \u2018template<class _U1, class _U2, typename std::enable_if<(_ConstructibleTuple<_U1,\
    \ _U2>() && _ImplicitlyConvertibleTuple<_U1, _U2>()), bool>::type <anonymous>\
    \ > constexpr std::tuple<_T1, _T2>::tuple(const std::pair<_U1, _U2>&)\u2019\n\
    \ 1027 |         constexpr tuple(const pair<_U1, _U2>& __in)\n      |        \
    \           ^~~~~\n/usr/include/c++/9/tuple:1027:19: note:   template argument\
    \ deduction/substitution failed:\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n\
    \                 from /usr/include/c++/9/bits/allocator.h:46,\n             \
    \    from /usr/include/c++/9/string:41,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpfn6ks9kv.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4: note:\
    \   mismatched types \u2018const std::pair<_T1, _T2>\u2019 and \u2018long int\u2019\
    \n  146 |  { ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }\n     \
    \ |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nIn file included\
    \ from /usr/include/c++/9/functional:54,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmpfn6ks9kv.cpp:2:\n/usr/include/c++/9/tuple:1018:28:\
    \ note: candidate: \u2018template<class _U1, class _U2, typename std::enable_if<(_MoveConstructibleTuple<_U1,\
    \ _U2>() && (! _ImplicitlyMoveConvertibleTuple<_U1, _U2>())), bool>::type <anonymous>\
    \ > constexpr std::tuple<_T1, _T2>::tuple(std::tuple<_U1, _U2>&&)\u2019\n 1018\
    \ |         explicit constexpr tuple(tuple<_U1, _U2>&& __in)\n      |        \
    \                    ^~~~~\n/usr/include/c++/9/tuple:1018:28: note:   template\
    \ argument deduction/substitution failed:\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n\
    \                 from /usr/include/c++/9/bits/allocator.h:46,\n             \
    \    from /usr/include/c++/9/string:41,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpfn6ks9kv.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4: note:\
    \   mismatched types \u2018std::tuple<_T1, _T2>\u2019 and \u2018long int\u2019\
    \n  146 |  { ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }\n     \
    \ |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nIn file included\
    \ from /usr/include/c++/9/functional:54,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmpfn6ks9kv.cpp:2:\n/usr/include/c++/9/tuple:1009:19:\
    \ note: candidate: \u2018template<class _U1, class _U2, typename std::enable_if<(_MoveConstructibleTuple<_U1,\
    \ _U2>() && _ImplicitlyMoveConvertibleTuple<_U1, _U2>()), bool>::type <anonymous>\
    \ > constexpr std::tuple<_T1, _T2>::tuple(std::tuple<_U1, _U2>&&)\u2019\n 1009\
    \ |         constexpr tuple(tuple<_U1, _U2>&& __in)\n      |                 \
    \  ^~~~~\n/usr/include/c++/9/tuple:1009:19: note:   template argument deduction/substitution\
    \ failed:\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n\
    \                 from /usr/include/c++/9/bits/allocator.h:46,\n             \
    \    from /usr/include/c++/9/string:41,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpfn6ks9kv.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4: note:\
    \   mismatched types \u2018std::tuple<_T1, _T2>\u2019 and \u2018long int\u2019\
    \n  146 |  { ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }\n     \
    \ |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nIn file included\
    \ from /usr/include/c++/9/functional:54,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmpfn6ks9kv.cpp:2:\n/usr/include/c++/9/tuple:1000:28:\
    \ note: candidate: \u2018template<class _U1, class _U2, typename std::enable_if<(_ConstructibleTuple<_U1,\
    \ _U2>() && (! _ImplicitlyConvertibleTuple<_U1, _U2>())), bool>::type <anonymous>\
    \ > constexpr std::tuple<_T1, _T2>::tuple(const std::tuple<_U1, _U2>&)\u2019\n\
    \ 1000 |         explicit constexpr tuple(const tuple<_U1, _U2>& __in)\n     \
    \ |                            ^~~~~\n/usr/include/c++/9/tuple:1000:28: note:\
    \   template argument deduction/substitution failed:\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n\
    \                 from /usr/include/c++/9/bits/allocator.h:46,\n             \
    \    from /usr/include/c++/9/string:41,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpfn6ks9kv.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4: note:\
    \   mismatched types \u2018const std::tuple<_T1, _T2>\u2019 and \u2018long int\u2019\
    \n  146 |  { ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }\n     \
    \ |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nIn file included\
    \ from /usr/include/c++/9/functional:54,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmpfn6ks9kv.cpp:2:\n/usr/include/c++/9/tuple:991:19:\
    \ note: candidate: \u2018template<class _U1, class _U2, typename std::enable_if<(_ConstructibleTuple<_U1,\
    \ _U2>() && _ImplicitlyConvertibleTuple<_U1, _U2>()), bool>::type <anonymous>\
    \ > constexpr std::tuple<_T1, _T2>::tuple(const std::tuple<_U1, _U2>&)\u2019\n\
    \  991 |         constexpr tuple(const tuple<_U1, _U2>& __in)\n      |       \
    \            ^~~~~\n/usr/include/c++/9/tuple:991:19: note:   template argument\
    \ deduction/substitution failed:\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n\
    \                 from /usr/include/c++/9/bits/allocator.h:46,\n             \
    \    from /usr/include/c++/9/string:41,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpfn6ks9kv.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4: note:\
    \   mismatched types \u2018const std::tuple<_T1, _T2>\u2019 and \u2018long int\u2019\
    \n  146 |  { ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }\n     \
    \ |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nIn file included\
    \ from /usr/include/c++/9/functional:54,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmpfn6ks9kv.cpp:2:\n/usr/include/c++/9/tuple:983:17:\
    \ note: candidate: \u2018constexpr std::tuple<_T1, _T2>::tuple(std::tuple<_T1,\
    \ _T2>&&) [with _T1 = long int; _T2 = long int]\u2019\n  983 |       constexpr\
    \ tuple(tuple&&) = default;\n      |                 ^~~~~\n/usr/include/c++/9/tuple:983:23:\
    \ note:   no known conversion for argument 1 from \u2018long int\u2019 to \u2018\
    std::tuple<long int, long int>&&\u2019\n  983 |       constexpr tuple(tuple&&)\
    \ = default;\n      |                       ^~~~~~~\n/usr/include/c++/9/tuple:981:17:\
    \ note: candidate: \u2018constexpr std::tuple<_T1, _T2>::tuple(const std::tuple<_T1,\
    \ _T2>&) [with _T1 = long int; _T2 = long int]\u2019\n  981 |       constexpr\
    \ tuple(const tuple&) = default;\n      |                 ^~~~~\n/usr/include/c++/9/tuple:981:23:\
    \ note:   no known conversion for argument 1 from \u2018long int\u2019 to \u2018\
    const std::tuple<long int, long int>&\u2019\n  981 |       constexpr tuple(const\
    \ tuple&) = default;\n      |                       ^~~~~~~~~~~~\n/usr/include/c++/9/tuple:978:28:\
    \ note: candidate: \u2018template<class _U1, class _U2, typename std::enable_if<((_MoveConstructibleTuple<_U1,\
    \ _U2>() && (! _ImplicitlyMoveConvertibleTuple<_U1, _U2>())) && (! std::is_same<typename\
    \ std::remove_cv<typename std::remove_reference<_Tp>::type>::type, std::allocator_arg_t>::value)),\
    \ bool>::type <anonymous> > constexpr std::tuple<_T1, _T2>::tuple(_U1&&, _U2&&)\u2019\
    \n  978 |         explicit constexpr tuple(_U1&& __a1, _U2&& __a2)\n      |  \
    \                          ^~~~~\n/usr/include/c++/9/tuple:978:28: note:   template\
    \ argument deduction/substitution failed:\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n\
    \                 from /usr/include/c++/9/bits/allocator.h:46,\n             \
    \    from /usr/include/c++/9/string:41,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpfn6ks9kv.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4: note:\
    \   candidate expects 2 arguments, 1 provided\n  146 |  { ::new((void *)__p) _Up(std::forward<_Args>(__args)...);\
    \ }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nIn file\
    \ included from /usr/include/c++/9/functional:54,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmpfn6ks9kv.cpp:2:\n/usr/include/c++/9/tuple:968:19:\
    \ note: candidate: \u2018template<class _U1, class _U2, typename std::enable_if<((_MoveConstructibleTuple<_U1,\
    \ _U2>() && _ImplicitlyMoveConvertibleTuple<_U1, _U2>()) && (! std::is_same<typename\
    \ std::remove_cv<typename std::remove_reference<_Tp>::type>::type, std::allocator_arg_t>::value)),\
    \ bool>::type <anonymous> > constexpr std::tuple<_T1, _T2>::tuple(_U1&&, _U2&&)\u2019\
    \n  968 |         constexpr tuple(_U1&& __a1, _U2&& __a2)\n      |           \
    \        ^~~~~\n/usr/include/c++/9/tuple:968:19: note:   template argument deduction/substitution\
    \ failed:\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n\
    \                 from /usr/include/c++/9/bits/allocator.h:46,\n             \
    \    from /usr/include/c++/9/string:41,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpfn6ks9kv.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4: note:\
    \   candidate expects 2 arguments, 1 provided\n  146 |  { ::new((void *)__p) _Up(std::forward<_Args>(__args)...);\
    \ }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nIn file\
    \ included from /usr/include/c++/9/functional:54,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmpfn6ks9kv.cpp:2:\n/usr/include/c++/9/tuple:954:28:\
    \ note: candidate: \u2018template<class _Dummy, typename std::enable_if<(std::_TC<std::is_same<_Dummy,\
    \ void>::value, long int, long int>::_ConstructibleTuple<long int, long int>()\
    \ && (! std::_TC<std::is_same<_Dummy, void>::value, long int, long int>::_ImplicitlyConvertibleTuple<long\
    \ int, long int>())), bool>::type <anonymous> > constexpr std::tuple<_T1, _T2>::tuple(const\
    \ _T1&, const _T2&)\u2019\n  954 |         explicit constexpr tuple(const _T1&\
    \ __a1, const _T2& __a2)\n      |                            ^~~~~\n/usr/include/c++/9/tuple:954:28:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n              \
    \   from /usr/include/c++/9/bits/allocator.h:46,\n                 from /usr/include/c++/9/string:41,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpfn6ks9kv.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4:\
    \ note:   candidate expects 2 arguments, 1 provided\n  146 |  { ::new((void *)__p)\
    \ _Up(std::forward<_Args>(__args)...); }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    In file included from /usr/include/c++/9/functional:54,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n                 from\
    \ /tmp/tmpfn6ks9kv.cpp:2:\n/usr/include/c++/9/tuple:945:19: note: candidate: \u2018\
    template<class _Dummy, typename std::enable_if<(std::_TC<std::is_same<_Dummy,\
    \ void>::value, long int, long int>::_ConstructibleTuple<long int, long int>()\
    \ && std::_TC<std::is_same<_Dummy, void>::value, long int, long int>::_ImplicitlyConvertibleTuple<long\
    \ int, long int>()), bool>::type <anonymous> > constexpr std::tuple<_T1, _T2>::tuple(const\
    \ _T1&, const _T2&)\u2019\n  945 |         constexpr tuple(const _T1& __a1, const\
    \ _T2& __a2)\n      |                   ^~~~~\n/usr/include/c++/9/tuple:945:19:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n              \
    \   from /usr/include/c++/9/bits/allocator.h:46,\n                 from /usr/include/c++/9/string:41,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpfn6ks9kv.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4:\
    \ note:   candidate expects 2 arguments, 1 provided\n  146 |  { ::new((void *)__p)\
    \ _Up(std::forward<_Args>(__args)...); }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    In file included from /usr/include/c++/9/functional:54,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n                 from\
    \ /tmp/tmpfn6ks9kv.cpp:2:\n/usr/include/c++/9/tuple:931:21: note: candidate: \u2018\
    template<class _U1, class _U2, typename std::enable_if<std::__and_<std::is_default_constructible<_Tp>,\
    \ std::is_default_constructible<_Dp>, std::__not_<std::__and_<std::__is_implicitly_default_constructible<_U1>,\
    \ std::__is_implicitly_default_constructible<_U2> > > >::value, bool>::type <anonymous>\
    \ > constexpr std::tuple<_T1, _T2>::tuple()\u2019\n  931 |  explicit constexpr\
    \ tuple()\n      |                     ^~~~~\n/usr/include/c++/9/tuple:931:21:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n              \
    \   from /usr/include/c++/9/bits/allocator.h:46,\n                 from /usr/include/c++/9/string:41,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpfn6ks9kv.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4:\
    \ note:   candidate expects 0 arguments, 1 provided\n  146 |  { ::new((void *)__p)\
    \ _Up(std::forward<_Args>(__args)...); }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    In file included from /usr/include/c++/9/functional:54,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n                 from\
    \ /tmp/tmpfn6ks9kv.cpp:2:\n/usr/include/c++/9/tuple:918:12: note: candidate: \u2018\
    template<class _U1, class _U2, typename std::enable_if<std::__and_<std::__is_implicitly_default_constructible<_U1>,\
    \ std::__is_implicitly_default_constructible<_U2> >::value, bool>::type <anonymous>\
    \ > constexpr std::tuple<_T1, _T2>::tuple()\u2019\n  918 |  constexpr tuple()\n\
    \      |            ^~~~~\n/usr/include/c++/9/tuple:918:12: note:   template argument\
    \ deduction/substitution failed:\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n\
    \                 from /usr/include/c++/9/bits/allocator.h:46,\n             \
    \    from /usr/include/c++/9/string:41,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpfn6ks9kv.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4: note:\
    \   candidate expects 0 arguments, 1 provided\n  146 |  { ::new((void *)__p) _Up(std::forward<_Args>(__args)...);\
    \ }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    std::vector<std::tuple<long, long>> res;\n    for(auto &row\
    \ : lst) {\n        for(auto &el : row) {\n            if(el == x) {\n       \
    \         res.push_back(std::make_tuple(row.size() - 1, row.size() - 1));\n  \
    \          }\n        }\n    }\n    std::sort(res.begin(), res.end(), [](const\
    \ std::tuple<long, long> &a, const std::tuple<long, long> &b) {\n        return\
    \ std::get<0>(a) < std::get<0>(b);\n    });\n    std::sort(res.begin(), res.end(),\
    \ [](const std::tuple<long, long> &a, const std::tuple<long, long> &b) {\n   \
    \     return std::get<1>(a) < std::get<1>(b);\n    });\n    return res;\n}\nint\
    \ main() {\n    auto candidate = get_row;\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "tmpb_orzw2_: /tmp/tmpb_orzw2_.cpp:38: int main(): Assertion `candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    std::vector<std::tuple<long, long>> res;\n    std::vector<long>\
    \ row;\n    std::vector<long> col;\n    long row_index = 0;\n    long col_index\
    \ = 0;\n    for (auto &row : lst) {\n        row.clear();\n        col.clear();\n\
    \        for (auto &el : row) {\n            row.push_back(el);\n            col.push_back(el);\n\
    \        }\n        if (row.size() == 0) {\n            continue;\n        }\n\
    \        col_index = 0;\n        for (auto &el : col) {\n            if (el ==\
    \ x) {\n                res.push_back(std::make_tuple(row_index, col_index));\n\
    \            }\n            if (el > x) {\n                col_index++;\n    \
    \        }\n        }\n        row_index++;\n    }\n    std::sort(res.begin(),\
    \ res.end(), [](const std::tuple<long, long> &a, const std::tuple<long, long>\
    \ &b) {\n        return std::get<0>(a) < std::get<0>(b);\n    });\n    std::sort(res.begin(),\
    \ res.end(), [](const std::tuple<long, long> &a, const std::tuple<long, long>\
    \ &b) {\n        return std::get<1>(a) < std::get<1>(b);\n    });\n    return\
    \ res;\n}\nint main() {\n    auto candidate = get_row;\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "tmpgqfd69_2: /tmp/tmpgqfd69_2.cpp:56: int main(): Assertion `candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    std::vector<std::tuple<long, long>> res;\n    std::vector<long>\
    \ row;\n    std::vector<long> col;\n    long rowId = 0;\n    long colId = 0;\n\
    \    for (auto &row : lst) {\n        row.push_back(0);\n        col.push_back(0);\n\
    \    }\n    for (auto &row : lst) {\n        for (auto &col : row) {\n       \
    \     if (col == x) {\n                res.push_back(std::make_tuple(rowId, colId));\n\
    \            }\n            col++;\n        }\n        rowId++;\n        colId\
    \ = 0;\n    }\n    std::sort(res.begin(), res.end(), [](const std::tuple<long,\
    \ long> &a, const std::tuple<long, long> &b) {\n        return std::get<0>(a)\
    \ < std::get<0>(b);\n    });\n    std::sort(res.begin(), res.end(), [](const std::tuple<long,\
    \ long> &a, const std::tuple<long, long> &b) {\n        return std::get<1>(a)\
    \ < std::get<1>(b);\n    });\n    return res;\n}\nint main() {\n    auto candidate\
    \ = get_row;\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "tmpjckyo9px: /tmp/tmpjckyo9px.cpp:49: int main(): Assertion `candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    std::vector<std::tuple<long, long>> res;\n    long row =\
    \ 0;\n    long col = 0;\n    for (auto &row : lst) {\n        auto it = std::find(row.begin(),\
    \ row.end(), x);\n        if (it != row.end()) {\n            res.push_back(std::make_tuple(row,\
    \ col));\n            row = *it;\n            col = x - row;\n        }\n    }\n\
    \    std::sort(res.begin(), res.end(), [](const std::tuple<long, long> &a, const\
    \ std::tuple<long, long> &b) {\n        return std::get<0>(a) < std::get<0>(b);\n\
    \    });\n    std::sort(res.begin(), res.end(), [](const std::tuple<long, long>\
    \ &a, const std::tuple<long, long> &b) {\n        return std::get<1>(a) < std::get<1>(b);\n\
    \    });\n    return res;\n}\nint main() {\n    auto candidate = get_row;\n  \
    \  assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpgeaw4mym.cpp: In function \u2018std::vector<std::tuple<long int,\
    \ long int> > get_row(std::vector<std::vector<long int> >, long int)\u2019:\n\
    /tmp/tmpgeaw4mym.cpp:26:52: error: no matching function for call to \u2018std::vector<std::tuple<long\
    \ int, long int> >::push_back(std::tuple<std::vector<long int, std::allocator<long\
    \ int> >, long int>)\u2019\n   26 |             res.push_back(std::make_tuple(row,\
    \ col));\n      |                                                    ^\nIn file\
    \ included from /usr/include/c++/9/vector:67,\n                 from /usr/include/c++/9/queue:61,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:86,\n\
    \                 from /tmp/tmpgeaw4mym.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::tuple<long int, long int>; _Alloc = std::allocator<std::tuple<long\
    \ int, long int> >; std::vector<_Tp, _Alloc>::value_type = std::tuple<long int,\
    \ long int>]\u2019\n 1184 |       push_back(const value_type& __x)\n      |  \
    \     ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1184:35: note:   no known\
    \ conversion for argument 1 from \u2018std::tuple<std::vector<long int, std::allocator<long\
    \ int> >, long int>\u2019 to \u2018const value_type&\u2019 {aka \u2018const std::tuple<long\
    \ int, long int>&\u2019}\n 1184 |       push_back(const value_type& __x)\n   \
    \   |                 ~~~~~~~~~~~~~~~~~~^~~\n/usr/include/c++/9/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = std::tuple<long int, long int>; _Alloc =\
    \ std::allocator<std::tuple<long int, long int> >; std::vector<_Tp, _Alloc>::value_type\
    \ = std::tuple<long int, long int>]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018std::tuple<std::vector<long\
    \ int, std::allocator<long int> >, long int>\u2019 to \u2018std::vector<std::tuple<long\
    \ int, long int> >::value_type&&\u2019 {aka \u2018std::tuple<long int, long int>&&\u2019\
    }\n 1200 |       push_back(value_type&& __x)\n      |                 ~~~~~~~~~~~~~^~~\n\
    /tmp/tmpgeaw4mym.cpp:27:20: error: no match for \u2018operator=\u2019 (operand\
    \ types are \u2018std::vector<long int>\u2019 and \u2018long int\u2019)\n   27\
    \ |             row = *it;\n      |                    ^~\nIn file included from\
    \ /usr/include/c++/9/vector:72,\n                 from /usr/include/c++/9/queue:61,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:86,\n\
    \                 from /tmp/tmpgeaw4mym.cpp:2:\n/usr/include/c++/9/bits/vector.tcc:198:5:\
    \ note: candidate: \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const\
    \ std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long\
    \ int>]\u2019\n  198 |     vector<_Tp, _Alloc>::\n      |     ^~~~~~~~~~~~~~~~~~~\n\
    /usr/include/c++/9/bits/vector.tcc:199:42: note:   no known conversion for argument\
    \ 1 from \u2018long int\u2019 to \u2018const std::vector<long int>&\u2019\n  199\
    \ |     operator=(const vector<_Tp, _Alloc>& __x)\n      |               ~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n\
    In file included from /usr/include/c++/9/vector:67,\n                 from /usr/include/c++/9/queue:61,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:86,\n\
    \                 from /tmp/tmpgeaw4mym.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:706:7:\
    \ note: candidate: \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(std::vector<_Tp,\
    \ _Alloc>&&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n\
    \  706 |       operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())\n\
    \      |       ^~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:706:26: note:  \
    \ no known conversion for argument 1 from \u2018long int\u2019 to \u2018std::vector<long\
    \ int>&&\u2019\n  706 |       operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())\n\
    \      |                 ~~~~~~~~~^~~\n/usr/include/c++/9/bits/stl_vector.h:727:7:\
    \ note: candidate: \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(std::initializer_list<_Tp>)\
    \ [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n  727 |    \
    \   operator=(initializer_list<value_type> __l)\n      |       ^~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:727:46:\
    \ note:   no known conversion for argument 1 from \u2018long int\u2019 to \u2018\
    std::initializer_list<long int>\u2019\n  727 |       operator=(initializer_list<value_type>\
    \ __l)\n      |                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n/tmp/tmpgeaw4mym.cpp:28:21:\
    \ error: no match for \u2018operator-\u2019 (operand types are \u2018long int\u2019\
    \ and \u2018std::vector<long int>\u2019)\n   28 |             col = x - row;\n\
    \      |                   ~ ^ ~~~\n      |                   |   |\n      | \
    \                  |   std::vector<long int>\n      |                   long int\n\
    In file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n           \
    \      from /usr/include/c++/9/bits/char_traits.h:39,\n                 from /usr/include/c++/9/ios:40,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpgeaw4mym.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:415:5:\
    \ note: candidate: \u2018template<class _IteratorL, class _IteratorR> decltype\
    \ ((__y.base() - __x.base())) std::operator-(const std::reverse_iterator<_Iterator>&,\
    \ const std::reverse_iterator<_IteratorR>&)\u2019\n  415 |     operator-(const\
    \ reverse_iterator<_IteratorL>& __x,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:415:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpgeaw4mym.cpp:28:23:\
    \ note:   mismatched types \u2018const std::reverse_iterator<_Iterator>\u2019\
    \ and \u2018long int\u2019\n   28 |             col = x - row;\n      |      \
    \                 ^~~\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/char_traits.h:39,\n           \
    \      from /usr/include/c++/9/ios:40,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpgeaw4mym.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:1209:5: note:\
    \ candidate: \u2018template<class _IteratorL, class _IteratorR> decltype ((__x.base()\
    \ - __y.base())) std::operator-(const std::move_iterator<_IteratorL>&, const std::move_iterator<_IteratorR>&)\u2019\
    \n 1209 |     operator-(const move_iterator<_IteratorL>& __x,\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/stl_iterator.h:1209:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpgeaw4mym.cpp:28:23: note:   mismatched types \u2018const std::move_iterator<_IteratorL>\u2019\
    \ and \u2018long int\u2019\n   28 |             col = x - row;\n      |      \
    \                 ^~~\nIn file included from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpgeaw4mym.cpp:2:\n/usr/include/c++/9/complex:361:5:\
    \ note: candidate: \u2018template<class _Tp> std::complex<_Tp> std::operator-(const\
    \ std::complex<_Tp>&, const std::complex<_Tp>&)\u2019\n  361 |     operator-(const\
    \ complex<_Tp>& __x, const complex<_Tp>& __y)\n      |     ^~~~~~~~\n/usr/include/c++/9/complex:361:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpgeaw4mym.cpp:28:23:\
    \ note:   mismatched types \u2018const std::complex<_Tp>\u2019 and \u2018long\
    \ int\u2019\n   28 |             col = x - row;\n      |                     \
    \  ^~~\nIn file included from /usr/include/c++/9/ccomplex:39,\n              \
    \   from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n             \
    \    from /tmp/tmpgeaw4mym.cpp:2:\n/usr/include/c++/9/complex:370:5: note: candidate:\
    \ \u2018template<class _Tp> std::complex<_Tp> std::operator-(const std::complex<_Tp>&,\
    \ const _Tp&)\u2019\n  370 |     operator-(const complex<_Tp>& __x, const _Tp&\
    \ __y)\n      |     ^~~~~~~~\n/usr/include/c++/9/complex:370:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmpgeaw4mym.cpp:28:23: note: \
    \  mismatched types \u2018const std::complex<_Tp>\u2019 and \u2018long int\u2019\
    \n   28 |             col = x - row;\n      |                       ^~~\nIn file\
    \ included from /usr/include/c++/9/ccomplex:39,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpgeaw4mym.cpp:2:\n/usr/include/c++/9/complex:379:5:\
    \ note: candidate: \u2018template<class _Tp> std::complex<_Tp> std::operator-(const\
    \ _Tp&, const std::complex<_Tp>&)\u2019\n  379 |     operator-(const _Tp& __x,\
    \ const complex<_Tp>& __y)\n      |     ^~~~~~~~\n/usr/include/c++/9/complex:379:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpgeaw4mym.cpp:28:23:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::complex<_Tp>\u2019\
    \n   28 |             col = x - row;\n      |                       ^~~\nIn file\
    \ included from /usr/include/c++/9/ccomplex:39,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpgeaw4mym.cpp:2:\n/usr/include/c++/9/complex:456:5:\
    \ note: candidate: \u2018template<class _Tp> std::complex<_Tp> std::operator-(const\
    \ std::complex<_Tp>&)\u2019\n  456 |     operator-(const complex<_Tp>& __x)\n\
    \      |     ^~~~~~~~\n/usr/include/c++/9/complex:456:5: note:   template argument\
    \ deduction/substitution failed:\n/tmp/tmpgeaw4mym.cpp:28:23: note:   mismatched\
    \ types \u2018const std::complex<_Tp>\u2019 and \u2018long int\u2019\n   28 |\
    \             col = x - row;\n      |                       ^~~\nIn file included\
    \ from /usr/include/c++/9/deque:67,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:68,\n\
    \                 from /tmp/tmpgeaw4mym.cpp:2:\n/usr/include/c++/9/bits/stl_deque.h:370:5:\
    \ note: candidate: \u2018template<class _Tp, class _Ref, class _Ptr> typename\
    \ std::_Deque_iterator<_Tp, _Ref, _Ptr>::difference_type std::operator-(const\
    \ std::_Deque_iterator<_Tp, _Ref, _Ptr>&, const std::_Deque_iterator<_Tp, _Ref,\
    \ _Ptr>&)\u2019\n  370 |     operator-(const _Deque_iterator<_Tp, _Ref, _Ptr>&\
    \ __x,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_deque.h:370:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpgeaw4mym.cpp:28:23:\
    \ note:   mismatched types \u2018const std::_Deque_iterator<_Tp, _Ref, _Ptr>\u2019\
    \ and \u2018long int\u2019\n   28 |             col = x - row;\n      |      \
    \                 ^~~\nIn file included from /usr/include/c++/9/deque:67,\n  \
    \               from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:68,\n \
    \                from /tmp/tmpgeaw4mym.cpp:2:\n/usr/include/c++/9/bits/stl_deque.h:382:5:\
    \ note: candidate: \u2018template<class _Tp, class _RefL, class _PtrL, class _RefR,\
    \ class _PtrR> typename std::_Deque_iterator<_Tp, _Ref, _Ptr>::difference_type\
    \ std::operator-(const std::_Deque_iterator<_Tp, _Ref, _Ptr>&, const std::_Deque_iterator<_Tp,\
    \ _RefR, _PtrR>&)\u2019\n  382 |     operator-(const _Deque_iterator<_Tp, _RefL,\
    \ _PtrL>& __x,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_deque.h:382:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpgeaw4mym.cpp:28:23:\
    \ note:   mismatched types \u2018const std::_Deque_iterator<_Tp, _Ref, _Ptr>\u2019\
    \ and \u2018long int\u2019\n   28 |             col = x - row;\n      |      \
    \                 ^~~\nIn file included from /usr/include/c++/9/vector:68,\n \
    \                from /usr/include/c++/9/queue:61,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:86,\n\
    \                 from /tmp/tmpgeaw4mym.cpp:2:\n/usr/include/c++/9/bits/stl_bvector.h:214:3:\
    \ note: candidate: \u2018std::ptrdiff_t std::operator-(const std::_Bit_iterator_base&,\
    \ const std::_Bit_iterator_base&)\u2019\n  214 |   operator-(const _Bit_iterator_base&\
    \ __x, const _Bit_iterator_base& __y)\n      |   ^~~~~~~~\n/usr/include/c++/9/bits/stl_bvector.h:214:39:\
    \ note:   no known conversion for argument 1 from \u2018long int\u2019 to \u2018\
    const std::_Bit_iterator_base&\u2019\n  214 |   operator-(const _Bit_iterator_base&\
    \ __x, const _Bit_iterator_base& __y)\n      |             ~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n\
    In file included from /usr/include/c++/9/valarray:603,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n                 from\
    \ /tmp/tmpgeaw4mym.cpp:2:\n/usr/include/c++/9/bits/valarray_after.h:406:5: note:\
    \ candidate: \u2018template<class _Dom1, class _Dom2> std::_Expr<std::__detail::_BinClos<std::__minus,\
    \ std::_Expr, std::_Expr, _Dom1, _Dom2>, typename std::__fun<std::__minus, typename\
    \ _Dom1::value_type>::result_type> std::operator-(const std::_Expr<_Dom1, typename\
    \ _Dom1::value_type>&, const std::_Expr<_Dom2, typename _Dom2::value_type>&)\u2019\
    \n  406 |     _DEFINE_EXPR_BINARY_OPERATOR(-, __minus)\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /usr/include/c++/9/bits/valarray_after.h:406:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpgeaw4mym.cpp:28:23: note:   mismatched types \u2018const std::_Expr<_Dom1,\
    \ typename _Dom1::value_type>\u2019 and \u2018long int\u2019\n   28 |        \
    \     col = x - row;\n      |                       ^~~\nIn file included from\
    \ /usr/include/c++/9/valarray:603,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n\
    \                 from /tmp/tmpgeaw4mym.cpp:2:\n/usr/include/c++/9/bits/valarray_after.h:406:5:\
    \ note: candidate: \u2018template<class _Dom> std::_Expr<std::__detail::_BinClos<std::__minus,\
    \ std::_Expr, std::_Constant, _Dom, typename _Dom::value_type>, typename std::__fun<std::__minus,\
    \ typename _Dom1::value_type>::result_type> std::operator-(const std::_Expr<_Dom1,\
    \ typename _Dom1::value_type>&, const typename _Dom::value_type&)\u2019\n  406\
    \ |     _DEFINE_EXPR_BINARY_OPERATOR(-, __minus)\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /usr/include/c++/9/bits/valarray_after.h:406:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpgeaw4mym.cpp:28:23: note:   mismatched types \u2018const std::_Expr<_Dom1,\
    \ typename _Dom1::value_type>\u2019 and \u2018long int\u2019\n   28 |        \
    \     col = x - row;\n      |                       ^~~\nIn file included from\
    \ /usr/include/c++/9/valarray:603,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n\
    \                 from /tmp/tmpgeaw4mym.cpp:2:\n/usr/include/c++/9/bits/valarray_after.h:406:5:\
    \ note: candidate: \u2018template<class _Dom> std::_Expr<std::__detail::_BinClos<std::__minus,\
    \ std::_Constant, std::_Expr, typename _Dom::value_type, _Dom>, typename std::__fun<std::__minus,\
    \ typename _Dom1::value_type>::result_type> std::operator-(const typename _Dom::value_type&,\
    \ const std::_Expr<_Dom1, typename _Dom1::value_type>&)\u2019\n  406 |     _DEFINE_EXPR_BINARY_OPERATOR(-,\
    \ __minus)\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/usr/include/c++/9/bits/valarray_after.h:406:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpgeaw4mym.cpp:28:23:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::_Expr<_Dom1,\
    \ typename _Dom1::value_type>\u2019\n   28 |             col = x - row;\n    \
    \  |                       ^~~\nIn file included from /usr/include/c++/9/valarray:603,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n\
    \                 from /tmp/tmpgeaw4mym.cpp:2:\n/usr/include/c++/9/bits/valarray_after.h:406:5:\
    \ note: candidate: \u2018template<class _Dom> std::_Expr<std::__detail::_BinClos<std::__minus,\
    \ std::_Expr, std::_ValArray, _Dom, typename _Dom::value_type>, typename std::__fun<std::__minus,\
    \ typename _Dom1::value_type>::result_type> std::operator-(const std::_Expr<_Dom1,\
    \ typename _Dom1::value_type>&, const std::valarray<typename _Dom::value_type>&)\u2019\
    \n  406 |     _DEFINE_EXPR_BINARY_OPERATOR(-, __minus)\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /usr/include/c++/9/bits/valarray_after.h:406:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpgeaw4mym.cpp:28:23: note:   mismatched types \u2018const std::_Expr<_Dom1,\
    \ typename _Dom1::value_type>\u2019 and \u2018long int\u2019\n   28 |        \
    \     col = x - row;\n      |                       ^~~\nIn file included from\
    \ /usr/include/c++/9/valarray:603,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n\
    \                 from /tmp/tmpgeaw4mym.cpp:2:\n/usr/include/c++/9/bits/valarray_after.h:406:5:\
    \ note: candidate: \u2018template<class _Dom> std::_Expr<std::__detail::_BinClos<std::__minus,\
    \ std::_ValArray, std::_Expr, typename _Dom::value_type, _Dom>, typename std::__fun<std::__minus,\
    \ typename _Dom1::value_type>::result_type> std::operator-(const std::valarray<typename\
    \ _Dom::value_type>&, const std::_Expr<_Dom1, typename _Dom1::value_type>&)\u2019\
    \n  406 |     _DEFINE_EXPR_BINARY_OPERATOR(-, __minus)\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /usr/include/c++/9/bits/valarray_after.h:406:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpgeaw4mym.cpp:28:23: note:   \u2018std::vector<long int>\u2019\
    \ is not derived from \u2018const std::_Expr<_Dom1, typename _Dom1::value_type>\u2019\
    \n   28 |             col = x - row;\n      |                       ^~~\nIn file\
    \ included from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n      \
    \           from /tmp/tmpgeaw4mym.cpp:2:\n/usr/include/c++/9/valarray:1186:1:\
    \ note: candidate: \u2018template<class _Tp> std::_Expr<std::__detail::_BinClos<std::__minus,\
    \ std::_ValArray, std::_ValArray, _Tp, _Tp>, typename std::__fun<std::__minus,\
    \ _Tp>::result_type> std::operator-(const std::valarray<_Tp>&, const std::valarray<_Tp>&)\u2019\
    \n 1186 | _DEFINE_BINARY_OPERATOR(-, __minus)\n      | ^~~~~~~~~~~~~~~~~~~~~~~\n\
    /usr/include/c++/9/valarray:1186:1: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpgeaw4mym.cpp:28:23: note:   mismatched types \u2018const std::valarray<_Tp>\u2019\
    \ and \u2018long int\u2019\n   28 |             col = x - row;\n      |      \
    \                 ^~~\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n\
    \                 from /tmp/tmpgeaw4mym.cpp:2:\n/usr/include/c++/9/valarray:1186:1:\
    \ note: candidate: \u2018template<class _Tp> std::_Expr<std::__detail::_BinClos<std::__minus,\
    \ std::_ValArray, std::_Constant, _Tp, _Tp>, typename std::__fun<std::__minus,\
    \ _Tp>::result_type> std::operator-(const std::valarray<_Tp>&, const typename\
    \ std::valarray<_Tp>::value_type&)\u2019\n 1186 | _DEFINE_BINARY_OPERATOR(-, __minus)\n\
    \      | ^~~~~~~~~~~~~~~~~~~~~~~\n/usr/include/c++/9/valarray:1186:1: note:  \
    \ template argument deduction/substitution failed:\n/tmp/tmpgeaw4mym.cpp:28:23:\
    \ note:   mismatched types \u2018const std::valarray<_Tp>\u2019 and \u2018long\
    \ int\u2019\n   28 |             col = x - row;\n      |                     \
    \  ^~~\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n\
    \                 from /tmp/tmpgeaw4mym.cpp:2:\n/usr/include/c++/9/valarray:1186:1:\
    \ note: candidate: \u2018template<class _Tp> std::_Expr<std::__detail::_BinClos<std::__minus,\
    \ std::_Constant, std::_ValArray, _Tp, _Tp>, typename std::__fun<std::__minus,\
    \ _Tp>::result_type> std::operator-(const typename std::valarray<_Tp>::value_type&,\
    \ const std::valarray<_Tp>&)\u2019\n 1186 | _DEFINE_BINARY_OPERATOR(-, __minus)\n\
    \      | ^~~~~~~~~~~~~~~~~~~~~~~\n/usr/include/c++/9/valarray:1186:1: note:  \
    \ template argument deduction/substitution failed:\n/tmp/tmpgeaw4mym.cpp:28:23:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::valarray<_Tp>\u2019\
    \n   28 |             col = x - row;\n      |                       ^~~\nIn file\
    \ included from /usr/include/c++/9/bits/stl_algobase.h:67,\n                 from\
    \ /usr/include/c++/9/bits/char_traits.h:39,\n                 from /usr/include/c++/9/ios:40,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpgeaw4mym.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:974:5:\
    \ note: candidate: \u2018template<class _IteratorL, class _IteratorR, class _Container>\
    \ decltype ((__lhs.base() - __rhs.base())) __gnu_cxx::operator-(const __gnu_cxx::__normal_iterator<_IteratorL,\
    \ _Container>&, const __gnu_cxx::__normal_iterator<_IteratorR, _Container>&)\u2019\
    \n  974 |     operator-(const __normal_iterator<_IteratorL, _Container>& __lhs,\n\
    \      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:974:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmpgeaw4mym.cpp:28:23: note: \
    \  mismatched types \u2018const __gnu_cxx::__normal_iterator<_IteratorL, _Container>\u2019\
    \ and \u2018long int\u2019\n   28 |             col = x - row;\n      |      \
    \                 ^~~\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/char_traits.h:39,\n           \
    \      from /usr/include/c++/9/ios:40,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpgeaw4mym.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:986:5: note:\
    \ candidate: \u2018template<class _Iterator, class _Container> typename __gnu_cxx::__normal_iterator<_Iterator,\
    \ _Container>::difference_type __gnu_cxx::operator-(const __gnu_cxx::__normal_iterator<_Iterator,\
    \ _Container>&, const __gnu_cxx::__normal_iterator<_Iterator, _Container>&)\u2019\
    \n  986 |     operator-(const __normal_iterator<_Iterator, _Container>& __lhs,\n\
    \      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:986:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmpgeaw4mym.cpp:28:23: note: \
    \  mismatched types \u2018const __gnu_cxx::__normal_iterator<_Iterator, _Container>\u2019\
    \ and \u2018long int\u2019\n   28 |             col = x - row;\n      |      \
    \                 ^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    std::vector<std::tuple<long, long>> res;\n    for(auto &row\
    \ : lst) {\n        for(auto &el : row) {\n            if(el == x) {\n       \
    \         res.push_back(std::make_tuple(row.size() - 1, row.size() - 1));\n  \
    \          }\n        }\n    }\n    std::sort(res.begin(), res.end(), [](const\
    \ std::tuple<long, long> &a, const std::tuple<long, long> &b) {\n        return\
    \ std::get<0>(a) < std::get<0>(b);\n    });\n    std::sort(res.begin(), res.end(),\
    \ [](const std::tuple<long, long> &a, const std::tuple<long, long> &b) {\n   \
    \     return std::get<1>(a) < std::get<1>(b);\n    });\n    return res;\n}\nint\
    \ main() {\n    auto candidate = get_row;\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "tmpzr4jqodo: /tmp/tmpzr4jqodo.cpp:38: int main(): Assertion `candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    std::vector<std::tuple<long, long>> res;\n    long row =\
    \ 0;\n    long col = 0;\n    for (auto &v : lst) {\n        long n = v.size();\n\
    \        if (n == 0) {\n            res.push_back(std::make_tuple(row, col));\n\
    \        }\n        else if (n == 1) {\n            if (v[0] == x) {\n       \
    \         res.push_back(std::make_tuple(row, col));\n            }\n        }\n\
    \        else {\n            long mid = n / 2;\n            long mid1 = mid -\
    \ 1;\n            long mid2 = mid + 1;\n            long mid3 = mid2 - 1;\n  \
    \          long mid4 = mid2 + 1;\n            long mid5 = mid3 - 1;\n        \
    \    long mid6 = mid3 + 1;\n            long mid7 = mid4 - 1;\n            long\
    \ mid8 = mid4 + 1;\n            long mid9 = mid5 - 1;\n            long mid10\
    \ = mid5 + 1;\n            long mid11 = mid6 - 1;\n            long mid12 = mid6\
    \ + 1;\n            long mid13 = mid7 - 1;\n            long mid14 = mid7 + 1;\n\
    \            long mid15 = mid8 - 1;\n            long mid16 = mid8 + 1;\n    \
    \        long mid17 = mid9 - 1;\n            long mid18 = mid9 + 1;\n        \
    \    long mid19 = mid10 - 1;\n            long mid20 = mid10 + 1;\n          \
    \  long mid21 = mid11 - 1;\n            long mid22 = mid11 + 1;\n            long\
    \ mid23 = mid12 - 1;\n            long mid24 = mid12 + 1;\n            long mid25\
    \ = mid13 - 1;\n            long mid26 = mid13 + 1;\n            long mid27 =\
    \ mid14 - 1;\n            long mid28 = mid14 + 1;\n            long mid29 = mid15\
    \ - 1;\n            long mid30 = mid15 + 1;\n            long mid31 = mid16 -\
    \ 1;\n            long mid32 = mid16 + 1;\n            long mid33 = mid17 - 1;\n\
    \            long mid34 = mid17 + 1;\n            long mid35 = mid18 - 1;\n  \
    \          long mid36 = mid18 + 1;\n            long mid37 = mid19 - 1;\n    \
    \        long mid38 = mid19 + 1;\n            long mid39 = mid20 - 1;\n      \
    \      long mid40 = mid20 + 1;\n            long mid41 = mid21 - 1;\n        \
    \    long mid42 = mid21 + 1;\n            long mid43 = mid22 - 1;\n          \
    \  long mid44 = mid22 + 1;\n            long mid45 = mid23 - 1;\n            long\
    \ mid46 = mid23 + 1;\n            long mid\n}\nint main() {\n    auto candidate\
    \ = get_row;\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8rpuqxdn.cpp: In function \u2018std::vector<std::tuple<long int,\
    \ long int> > get_row(std::vector<std::vector<long int> >, long int)\u2019:\n\
    /tmp/tmp8rpuqxdn.cpp:82:1: error: expected initializer before \u2018}\u2019 token\n\
    \   82 | }\n      | ^\n/tmp/tmp8rpuqxdn.cpp:83:12: error: a function-definition\
    \ is not allowed here before \u2018{\u2019 token\n   83 | int main() {\n     \
    \ |            ^\n/tmp/tmp8rpuqxdn.cpp:91:1: error: expected \u2018}\u2019 at\
    \ end of input\n   91 | }\n      | ^\n/tmp/tmp8rpuqxdn.cpp:23:25: note: to match\
    \ this \u2018{\u2019\n   23 |     for (auto &v : lst) {\n      |             \
    \            ^\n/tmp/tmp8rpuqxdn.cpp:91:1: error: expected \u2018}\u2019 at end\
    \ of input\n   91 | }\n      | ^\n/tmp/tmp8rpuqxdn.cpp:19:89: note: to match this\
    \ \u2018{\u2019\n   19 | std::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n      |                                                    \
    \                                     ^\n/tmp/tmp8rpuqxdn.cpp:91:1: warning: no\
    \ return statement in function returning non-void [-Wreturn-type]\n   91 | }\n\
    \      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    std::vector<std::tuple<long, long>> res;\n    std::vector<long>\
    \ row;\n    std::vector<long> col;\n    long row_index = 0;\n    long col_index\
    \ = 0;\n    for (auto &row : lst) {\n        row.clear();\n        col.clear();\n\
    \        for (auto &elem : row) {\n            row.push_back(elem);\n        \
    \    col.push_back(elem);\n        }\n        if (row.size() == 0) {\n       \
    \     continue;\n        }\n        std::sort(row.begin(), row.end());\n     \
    \   std::sort(col.begin(), col.end());\n        if (row_index == 0 && col_index\
    \ == 0) {\n            res.push_back(std::make_tuple(0, 0));\n        }\n    \
    \    if (row_index == 0 && col_index == row.size() - 1) {\n            res.push_back(std::make_tuple(0,\
    \ row.size() - 1));\n        }\n        if (row_index == row.size() - 1 && col_index\
    \ == 0) {\n            res.push_back(std::make_tuple(row.size() - 1, 0));\n  \
    \      }\n        if (row_index == row.size() - 1 && col_index == row.size() -\
    \ 1) {\n            res.push_back(std::make_tuple(row.size() - 1, row.size() -\
    \ 1));\n        }\n        for (long i = 0; i < row.size(); i++) {\n         \
    \   if (row_index == i) {\n                res.push_back(std::make_tuple(row_index,\
    \ col_index));\n            }\n            if (col_index == i) {\n           \
    \     res.push_back(std::make_tuple(row_index, col_index));\n            }\n \
    \           if (row_index == i && col_index == row.size() - 1) {\n           \
    \     res.push_back(std::make_tuple(row_index, col_index));\n            }\n \
    \           if (row_index == i && col_index == row.size() - 1) {\n           \
    \     res.push_back(std::make_tuple(row_index, col_index));\n            }\n \
    \       }\n        row_index++;\n        col_index++;\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = get_row;\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "tmphzyyew_t: /tmp/tmphzyyew_t.cpp:70: int main(): Assertion `candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    std::vector<std::tuple<long, long>> res;\n    std::vector<long>\
    \ row;\n    std::vector<long> col;\n    long row_index = 0;\n    long col_index\
    \ = 0;\n    for (auto &row : lst) {\n        row.clear();\n        col.clear();\n\
    \        for (auto &col : row) {\n            if (col == x) {\n              \
    \  row.push_back(row_index);\n                col.push_back(col_index);\n    \
    \        }\n        }\n        row_index++;\n        col_index = 0;\n    }\n \
    \   std::sort(row.begin(), row.end());\n    std::sort(col.begin(), col.end());\n\
    \    for (auto &row : row) {\n        for (auto &col : col) {\n            res.push_back(std::make_tuple(row,\
    \ col));\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = get_row;\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpv5lwxw8r.cpp: In function \u2018std::vector<std::tuple<long int,\
    \ long int> > get_row(std::vector<std::vector<long int> >, long int)\u2019:\n\
    /tmp/tmpv5lwxw8r.cpp:31:21: error: request for member \u2018push_back\u2019 in\
    \ \u2018col\u2019, which is of non-class type \u2018long int\u2019\n   31 |  \
    \               col.push_back(col_index);\n      |                     ^~~~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    std::vector<std::tuple<long, long>> res;\n    for(auto &row\
    \ : lst) {\n        for(auto &col : row) {\n            if(col == x) {\n     \
    \           res.emplace_back(std::make_tuple(row.size() - 1, col.size() - 1));\n\
    \            }\n        }\n    }\n    std::sort(res.begin(), res.end(), [](auto\
    \ &a, auto &b) { return std::get<0>(a) < std::get<0>(b); });\n    std::sort(res.begin(),\
    \ res.end(), [](auto &a, auto &b) { return std::get<1>(a) < std::get<1>(b); });\n\
    \    return res;\n}\nint main() {\n    auto candidate = get_row;\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpwginhe7l.cpp: In function \u2018std::vector<std::tuple<long int,\
    \ long int> > get_row(std::vector<std::vector<long int> >, long int)\u2019:\n\
    /tmp/tmpwginhe7l.cpp:24:70: error: request for member \u2018size\u2019 in \u2018\
    col\u2019, which is of non-class type \u2018long int\u2019\n   24 |          \
    \       res.emplace_back(std::make_tuple(row.size() - 1, col.size() - 1));\n \
    \     |                                                                      ^~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    std::vector<std::tuple<long, long>> res;\n    std::vector<long>\
    \ row;\n    std::vector<long> col;\n    for (auto &v : lst) {\n        row.push_back(v[0]);\n\
    \        col.push_back(v[1]);\n    }\n    std::sort(row.begin(), row.end());\n\
    \    std::sort(col.begin(), col.end());\n    for (long i = 0; i < row.size();\
    \ i++) {\n        for (long j = 0; j < col.size(); j++) {\n            if (row[i]\
    \ == x && col[j] == x) {\n                res.push_back(std::make_tuple(i, j));\n\
    \            }\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = get_row;\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "tmp8nnprowu: /tmp/tmp8nnprowu.cpp:40: int main(): Assertion `candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    std::vector<std::tuple<long, long>> res;\n    for(auto &row\
    \ : lst) {\n        for(auto &val : row) {\n            if(val == x) {\n     \
    \           res.emplace_back(row.size() - 1, row.size() - 1);\n            }\n\
    \        }\n    }\n    std::sort(res.begin(), res.end(), [](const std::tuple<long,\
    \ long> &a, const std::tuple<long, long> &b) {\n        return std::get<0>(a)\
    \ < std::get<0>(b);\n    });\n    std::sort(res.begin(), res.end(), [](const std::tuple<long,\
    \ long> &a, const std::tuple<long, long> &b) {\n        return std::get<1>(a)\
    \ < std::get<1>(b);\n    });\n    return res;\n}\nint main() {\n    auto candidate\
    \ = get_row;\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "tmpgl28w32j: /tmp/tmpgl28w32j.cpp:38: int main(): Assertion `candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    std::vector<std::tuple<long, long>> res;\n    long row =\
    \ 0;\n    long col = 0;\n    long cnt = 0;\n    for(auto &row : lst) {\n     \
    \   for(auto &col : row) {\n            if(col == x) {\n                res.emplace_back(std::make_tuple(row,\
    \ col));\n                cnt++;\n            }\n        }\n    }\n    if(cnt\
    \ != 1) {\n        std::cerr << \"Invalid input\" << std::endl;\n    }\n    std::sort(res.begin(),\
    \ res.end(), [](const std::tuple<long, long> &a, const std::tuple<long, long>\
    \ &b) {\n        return std::get<0>(a) < std::get<0>(b);\n    });\n    std::sort(res.begin(),\
    \ res.end(), [](const std::tuple<long, long> &a, const std::tuple<long, long>\
    \ &b) {\n        return std::get<1>(a) < std::get<1>(b);\n    });\n    return\
    \ res;\n}\nint main() {\n    auto candidate = get_row;\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "In file included from /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n\
    \                 from /usr/include/c++/9/bits/allocator.h:46,\n             \
    \    from /usr/include/c++/9/string:41,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp1yywro48.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h: In instantiation\
    \ of \u2018void __gnu_cxx::new_allocator<_Tp>::construct(_Up*, _Args&& ...) [with\
    \ _Up = std::tuple<long int, long int>; _Args = {std::tuple<std::vector<long int,\
    \ std::allocator<long int> >, long int>}; _Tp = std::tuple<long int, long int>]\u2019\
    :\n/usr/include/c++/9/bits/alloc_traits.h:483:4:   required from \u2018static\
    \ void std::allocator_traits<std::allocator<_CharT> >::construct(std::allocator_traits<std::allocator<_CharT>\
    \ >::allocator_type&, _Up*, _Args&& ...) [with _Up = std::tuple<long int, long\
    \ int>; _Args = {std::tuple<std::vector<long int, std::allocator<long int> >,\
    \ long int>}; _Tp = std::tuple<long int, long int>; std::allocator_traits<std::allocator<_CharT>\
    \ >::allocator_type = std::allocator<std::tuple<long int, long int> >]\u2019\n\
    /usr/include/c++/9/bits/vector.tcc:115:30:   required from \u2018void std::vector<_Tp,\
    \ _Alloc>::emplace_back(_Args&& ...) [with _Args = {std::tuple<std::vector<long\
    \ int, std::allocator<long int> >, long int>}; _Tp = std::tuple<long int, long\
    \ int>; _Alloc = std::allocator<std::tuple<long int, long int> >]\u2019\n/tmp/tmp1yywro48.cpp:27:59:\
    \   required from here\n/usr/include/c++/9/ext/new_allocator.h:146:4: error: no\
    \ matching function for call to \u2018std::tuple<long int, long int>::tuple(std::tuple<std::vector<long\
    \ int, std::allocator<long int> >, long int>)\u2019\n  146 |  { ::new((void *)__p)\
    \ _Up(std::forward<_Args>(__args)...); }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    In file included from /usr/include/c++/9/functional:54,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n                 from\
    \ /tmp/tmp1yywro48.cpp:2:\n/usr/include/c++/9/tuple:1199:18: note: candidate:\
    \ \u2018template<class _Alloc, class _U1, class _U2, typename std::enable_if<(_MoveConstructibleTuple<_U1,\
    \ _U2>() && (! _ImplicitlyMoveConvertibleTuple<_U1, _U2>())), bool>::type <anonymous>\
    \ > std::tuple<_T1, _T2>::tuple(std::allocator_arg_t, const _Alloc&, std::pair<_U1,\
    \ _U2>&&)\u2019\n 1199 |         explicit tuple(allocator_arg_t __tag, const _Alloc&\
    \ __a,\n      |                  ^~~~~\n/usr/include/c++/9/tuple:1199:18: note:\
    \   template argument deduction/substitution failed:\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n\
    \                 from /usr/include/c++/9/bits/allocator.h:46,\n             \
    \    from /usr/include/c++/9/string:41,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp1yywro48.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4: note:\
    \   candidate expects 3 arguments, 1 provided\n  146 |  { ::new((void *)__p) _Up(std::forward<_Args>(__args)...);\
    \ }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nIn file\
    \ included from /usr/include/c++/9/functional:54,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmp1yywro48.cpp:2:\n/usr/include/c++/9/tuple:1189:9:\
    \ note: candidate: \u2018template<class _Alloc, class _U1, class _U2, typename\
    \ std::enable_if<(_MoveConstructibleTuple<_U1, _U2>() && _ImplicitlyMoveConvertibleTuple<_U1,\
    \ _U2>()), bool>::type <anonymous> > std::tuple<_T1, _T2>::tuple(std::allocator_arg_t,\
    \ const _Alloc&, std::pair<_U1, _U2>&&)\u2019\n 1189 |         tuple(allocator_arg_t\
    \ __tag, const _Alloc& __a, pair<_U1, _U2>&& __in)\n      |         ^~~~~\n/usr/include/c++/9/tuple:1189:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n              \
    \   from /usr/include/c++/9/bits/allocator.h:46,\n                 from /usr/include/c++/9/string:41,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp1yywro48.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4:\
    \ note:   candidate expects 3 arguments, 1 provided\n  146 |  { ::new((void *)__p)\
    \ _Up(std::forward<_Args>(__args)...); }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    In file included from /usr/include/c++/9/functional:54,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n                 from\
    \ /tmp/tmp1yywro48.cpp:2:\n/usr/include/c++/9/tuple:1179:18: note: candidate:\
    \ \u2018template<class _Alloc, class _U1, class _U2, typename std::enable_if<(_ConstructibleTuple<_U1,\
    \ _U2>() && (! _ImplicitlyConvertibleTuple<_U1, _U2>())), bool>::type <anonymous>\
    \ > std::tuple<_T1, _T2>::tuple(std::allocator_arg_t, const _Alloc&, const std::pair<_U1,\
    \ _U2>&)\u2019\n 1179 |         explicit tuple(allocator_arg_t __tag, const _Alloc&\
    \ __a,\n      |                  ^~~~~\n/usr/include/c++/9/tuple:1179:18: note:\
    \   template argument deduction/substitution failed:\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n\
    \                 from /usr/include/c++/9/bits/allocator.h:46,\n             \
    \    from /usr/include/c++/9/string:41,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp1yywro48.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4: note:\
    \   candidate expects 3 arguments, 1 provided\n  146 |  { ::new((void *)__p) _Up(std::forward<_Args>(__args)...);\
    \ }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nIn file\
    \ included from /usr/include/c++/9/functional:54,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmp1yywro48.cpp:2:\n/usr/include/c++/9/tuple:1169:9:\
    \ note: candidate: \u2018template<class _Alloc, class _U1, class _U2, typename\
    \ std::enable_if<(_ConstructibleTuple<_U1, _U2>() && _ImplicitlyConvertibleTuple<_U1,\
    \ _U2>()), bool>::type <anonymous> > std::tuple<_T1, _T2>::tuple(std::allocator_arg_t,\
    \ const _Alloc&, const std::pair<_U1, _U2>&)\u2019\n 1169 |         tuple(allocator_arg_t\
    \ __tag, const _Alloc& __a,\n      |         ^~~~~\n/usr/include/c++/9/tuple:1169:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n              \
    \   from /usr/include/c++/9/bits/allocator.h:46,\n                 from /usr/include/c++/9/string:41,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp1yywro48.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4:\
    \ note:   candidate expects 3 arguments, 1 provided\n  146 |  { ::new((void *)__p)\
    \ _Up(std::forward<_Args>(__args)...); }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    In file included from /usr/include/c++/9/functional:54,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n                 from\
    \ /tmp/tmp1yywro48.cpp:2:\n/usr/include/c++/9/tuple:1158:11: note: candidate:\
    \ \u2018template<class _Alloc, class _U1, class _U2, typename std::enable_if<(_MoveConstructibleTuple<_U1,\
    \ _U2>() && (! _ImplicitlyMoveConvertibleTuple<_U1, _U2>())), bool>::type <anonymous>\
    \ > std::tuple<_T1, _T2>::tuple(std::allocator_arg_t, const _Alloc&, std::tuple<_U1,\
    \ _U2>&&)\u2019\n 1158 |  explicit tuple(allocator_arg_t __tag, const _Alloc&\
    \ __a,\n      |           ^~~~~\n/usr/include/c++/9/tuple:1158:11: note:   template\
    \ argument deduction/substitution failed:\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n\
    \                 from /usr/include/c++/9/bits/allocator.h:46,\n             \
    \    from /usr/include/c++/9/string:41,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp1yywro48.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4: note:\
    \   candidate expects 3 arguments, 1 provided\n  146 |  { ::new((void *)__p) _Up(std::forward<_Args>(__args)...);\
    \ }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nIn file\
    \ included from /usr/include/c++/9/functional:54,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmp1yywro48.cpp:2:\n/usr/include/c++/9/tuple:1148:2:\
    \ note: candidate: \u2018template<class _Alloc, class _U1, class _U2, typename\
    \ std::enable_if<(_MoveConstructibleTuple<_U1, _U2>() && _ImplicitlyMoveConvertibleTuple<_U1,\
    \ _U2>()), bool>::type <anonymous> > std::tuple<_T1, _T2>::tuple(std::allocator_arg_t,\
    \ const _Alloc&, std::tuple<_U1, _U2>&&)\u2019\n 1148 |  tuple(allocator_arg_t\
    \ __tag, const _Alloc& __a, tuple<_U1, _U2>&& __in)\n      |  ^~~~~\n/usr/include/c++/9/tuple:1148:2:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n              \
    \   from /usr/include/c++/9/bits/allocator.h:46,\n                 from /usr/include/c++/9/string:41,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp1yywro48.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4:\
    \ note:   candidate expects 3 arguments, 1 provided\n  146 |  { ::new((void *)__p)\
    \ _Up(std::forward<_Args>(__args)...); }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    In file included from /usr/include/c++/9/functional:54,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n                 from\
    \ /tmp/tmp1yywro48.cpp:2:\n/usr/include/c++/9/tuple:1136:11: note: candidate:\
    \ \u2018template<class _Alloc, class _U1, class _U2, typename std::enable_if<(_ConstructibleTuple<_U1,\
    \ _U2>() && (! _ImplicitlyConvertibleTuple<_U1, _U2>())), bool>::type <anonymous>\
    \ > std::tuple<_T1, _T2>::tuple(std::allocator_arg_t, const _Alloc&, const std::tuple<_U1,\
    \ _U2>&)\u2019\n 1136 |  explicit tuple(allocator_arg_t __tag, const _Alloc& __a,\n\
    \      |           ^~~~~\n/usr/include/c++/9/tuple:1136:11: note:   template argument\
    \ deduction/substitution failed:\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n\
    \                 from /usr/include/c++/9/bits/allocator.h:46,\n             \
    \    from /usr/include/c++/9/string:41,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp1yywro48.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4: note:\
    \   candidate expects 3 arguments, 1 provided\n  146 |  { ::new((void *)__p) _Up(std::forward<_Args>(__args)...);\
    \ }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nIn file\
    \ included from /usr/include/c++/9/functional:54,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmp1yywro48.cpp:2:\n/usr/include/c++/9/tuple:1124:2:\
    \ note: candidate: \u2018template<class _Alloc, class _U1, class _U2, typename\
    \ std::enable_if<(_ConstructibleTuple<_U1, _U2>() && _ImplicitlyConvertibleTuple<_U1,\
    \ _U2>()), bool>::type <anonymous> > std::tuple<_T1, _T2>::tuple(std::allocator_arg_t,\
    \ const _Alloc&, const std::tuple<_U1, _U2>&)\u2019\n 1124 |  tuple(allocator_arg_t\
    \ __tag, const _Alloc& __a,\n      |  ^~~~~\n/usr/include/c++/9/tuple:1124:2:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n              \
    \   from /usr/include/c++/9/bits/allocator.h:46,\n                 from /usr/include/c++/9/string:41,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp1yywro48.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4:\
    \ note:   candidate expects 3 arguments, 1 provided\n  146 |  { ::new((void *)__p)\
    \ _Up(std::forward<_Args>(__args)...); }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    In file included from /usr/include/c++/9/functional:54,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n                 from\
    \ /tmp/tmp1yywro48.cpp:2:\n/usr/include/c++/9/tuple:1115:2: note: candidate: \u2018\
    template<class _Alloc> std::tuple<_T1, _T2>::tuple(std::allocator_arg_t, const\
    \ _Alloc&, std::tuple<_T1, _T2>&&)\u2019\n 1115 |  tuple(allocator_arg_t __tag,\
    \ const _Alloc& __a, tuple&& __in)\n      |  ^~~~~\n/usr/include/c++/9/tuple:1115:2:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n              \
    \   from /usr/include/c++/9/bits/allocator.h:46,\n                 from /usr/include/c++/9/string:41,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp1yywro48.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4:\
    \ note:   candidate expects 3 arguments, 1 provided\n  146 |  { ::new((void *)__p)\
    \ _Up(std::forward<_Args>(__args)...); }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    In file included from /usr/include/c++/9/functional:54,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n                 from\
    \ /tmp/tmp1yywro48.cpp:2:\n/usr/include/c++/9/tuple:1111:2: note: candidate: \u2018\
    template<class _Alloc> std::tuple<_T1, _T2>::tuple(std::allocator_arg_t, const\
    \ _Alloc&, const std::tuple<_T1, _T2>&)\u2019\n 1111 |  tuple(allocator_arg_t\
    \ __tag, const _Alloc& __a, const tuple& __in)\n      |  ^~~~~\n/usr/include/c++/9/tuple:1111:2:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n              \
    \   from /usr/include/c++/9/bits/allocator.h:46,\n                 from /usr/include/c++/9/string:41,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp1yywro48.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4:\
    \ note:   candidate expects 3 arguments, 1 provided\n  146 |  { ::new((void *)__p)\
    \ _Up(std::forward<_Args>(__args)...); }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    In file included from /usr/include/c++/9/functional:54,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n                 from\
    \ /tmp/tmp1yywro48.cpp:2:\n/usr/include/c++/9/tuple:1105:11: note: candidate:\
    \ \u2018template<class _Alloc, class _U1, class _U2, typename std::enable_if<(_MoveConstructibleTuple<_U1,\
    \ _U2>() && (! _ImplicitlyMoveConvertibleTuple<_U1, _U2>())), bool>::type <anonymous>\
    \ > std::tuple<_T1, _T2>::tuple(std::allocator_arg_t, const _Alloc&, _U1&&, _U2&&)\u2019\
    \n 1105 |  explicit tuple(allocator_arg_t __tag, const _Alloc& __a,\n      | \
    \          ^~~~~\n/usr/include/c++/9/tuple:1105:11: note:   template argument\
    \ deduction/substitution failed:\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n\
    \                 from /usr/include/c++/9/bits/allocator.h:46,\n             \
    \    from /usr/include/c++/9/string:41,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp1yywro48.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4: note:\
    \   candidate expects 4 arguments, 1 provided\n  146 |  { ::new((void *)__p) _Up(std::forward<_Args>(__args)...);\
    \ }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nIn file\
    \ included from /usr/include/c++/9/functional:54,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmp1yywro48.cpp:2:\n/usr/include/c++/9/tuple:1095:2:\
    \ note: candidate: \u2018template<class _Alloc, class _U1, class _U2, typename\
    \ std::enable_if<(_MoveConstructibleTuple<_U1, _U2>() && _ImplicitlyMoveConvertibleTuple<_U1,\
    \ _U2>()), bool>::type <anonymous> > std::tuple<_T1, _T2>::tuple(std::allocator_arg_t,\
    \ const _Alloc&, _U1&&, _U2&&)\u2019\n 1095 |  tuple(allocator_arg_t __tag, const\
    \ _Alloc& __a, _U1&& __a1, _U2&& __a2)\n      |  ^~~~~\n/usr/include/c++/9/tuple:1095:2:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n              \
    \   from /usr/include/c++/9/bits/allocator.h:46,\n                 from /usr/include/c++/9/string:41,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp1yywro48.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4:\
    \ note:   candidate expects 4 arguments, 1 provided\n  146 |  { ::new((void *)__p)\
    \ _Up(std::forward<_Args>(__args)...); }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    In file included from /usr/include/c++/9/functional:54,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n                 from\
    \ /tmp/tmp1yywro48.cpp:2:\n/usr/include/c++/9/tuple:1085:11: note: candidate:\
    \ \u2018template<class _Alloc, class _Dummy, typename std::enable_if<(std::_TC<std::is_same<_Dummy,\
    \ void>::value, long int, long int>::_ConstructibleTuple<long int, long int>()\
    \ && (! std::_TC<std::is_same<_Dummy, void>::value, long int, long int>::_ImplicitlyConvertibleTuple<long\
    \ int, long int>())), bool>::type <anonymous> > std::tuple<_T1, _T2>::tuple(std::allocator_arg_t,\
    \ const _Alloc&, const _T1&, const _T2&)\u2019\n 1085 |  explicit tuple(allocator_arg_t\
    \ __tag, const _Alloc& __a,\n      |           ^~~~~\n/usr/include/c++/9/tuple:1085:11:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n              \
    \   from /usr/include/c++/9/bits/allocator.h:46,\n                 from /usr/include/c++/9/string:41,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp1yywro48.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4:\
    \ note:   candidate expects 4 arguments, 1 provided\n  146 |  { ::new((void *)__p)\
    \ _Up(std::forward<_Args>(__args)...); }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    In file included from /usr/include/c++/9/functional:54,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n                 from\
    \ /tmp/tmp1yywro48.cpp:2:\n/usr/include/c++/9/tuple:1073:2: note: candidate: \u2018\
    template<class _Alloc, class _Dummy, typename std::enable_if<(std::_TC<std::is_same<_Dummy,\
    \ void>::value, long int, long int>::_ConstructibleTuple<long int, long int>()\
    \ && std::_TC<std::is_same<_Dummy, void>::value, long int, long int>::_ImplicitlyConvertibleTuple<long\
    \ int, long int>()), bool>::type <anonymous> > std::tuple<_T1, _T2>::tuple(std::allocator_arg_t,\
    \ const _Alloc&, const _T1&, const _T2&)\u2019\n 1073 |  tuple(allocator_arg_t\
    \ __tag, const _Alloc& __a,\n      |  ^~~~~\n/usr/include/c++/9/tuple:1073:2:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n              \
    \   from /usr/include/c++/9/bits/allocator.h:46,\n                 from /usr/include/c++/9/string:41,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp1yywro48.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4:\
    \ note:   candidate expects 4 arguments, 1 provided\n  146 |  { ::new((void *)__p)\
    \ _Up(std::forward<_Args>(__args)...); }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    In file included from /usr/include/c++/9/functional:54,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n                 from\
    \ /tmp/tmp1yywro48.cpp:2:\n/usr/include/c++/9/tuple:1062:2: note: candidate: \u2018\
    template<class _Alloc> std::tuple<_T1, _T2>::tuple(std::allocator_arg_t, const\
    \ _Alloc&)\u2019\n 1062 |  tuple(allocator_arg_t __tag, const _Alloc& __a)\n \
    \     |  ^~~~~\n/usr/include/c++/9/tuple:1062:2: note:   template argument deduction/substitution\
    \ failed:\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n\
    \                 from /usr/include/c++/9/bits/allocator.h:46,\n             \
    \    from /usr/include/c++/9/string:41,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp1yywro48.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4: note:\
    \   candidate expects 2 arguments, 1 provided\n  146 |  { ::new((void *)__p) _Up(std::forward<_Args>(__args)...);\
    \ }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nIn file\
    \ included from /usr/include/c++/9/functional:54,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmp1yywro48.cpp:2:\n/usr/include/c++/9/tuple:1055:28:\
    \ note: candidate: \u2018template<class _U1, class _U2, typename std::enable_if<(_MoveConstructibleTuple<_U1,\
    \ _U2>() && (! _ImplicitlyMoveConvertibleTuple<_U1, _U2>())), bool>::type <anonymous>\
    \ > constexpr std::tuple<_T1, _T2>::tuple(std::pair<_U1, _U2>&&)\u2019\n 1055\
    \ |         explicit constexpr tuple(pair<_U1, _U2>&& __in)\n      |         \
    \                   ^~~~~\n/usr/include/c++/9/tuple:1055:28: note:   template\
    \ argument deduction/substitution failed:\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n\
    \                 from /usr/include/c++/9/bits/allocator.h:46,\n             \
    \    from /usr/include/c++/9/string:41,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp1yywro48.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4: note:\
    \   \u2018std::tuple<std::vector<long int, std::allocator<long int> >, long int>\u2019\
    \ is not derived from \u2018std::pair<_T1, _T2>\u2019\n  146 |  { ::new((void\
    \ *)__p) _Up(std::forward<_Args>(__args)...); }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    In file included from /usr/include/c++/9/functional:54,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n                 from\
    \ /tmp/tmp1yywro48.cpp:2:\n/usr/include/c++/9/tuple:1045:19: note: candidate:\
    \ \u2018template<class _U1, class _U2, typename std::enable_if<(_MoveConstructibleTuple<_U1,\
    \ _U2>() && _ImplicitlyMoveConvertibleTuple<_U1, _U2>()), bool>::type <anonymous>\
    \ > constexpr std::tuple<_T1, _T2>::tuple(std::pair<_U1, _U2>&&)\u2019\n 1045\
    \ |         constexpr tuple(pair<_U1, _U2>&& __in)\n      |                  \
    \ ^~~~~\n/usr/include/c++/9/tuple:1045:19: note:   template argument deduction/substitution\
    \ failed:\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n\
    \                 from /usr/include/c++/9/bits/allocator.h:46,\n             \
    \    from /usr/include/c++/9/string:41,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp1yywro48.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4: note:\
    \   \u2018std::tuple<std::vector<long int, std::allocator<long int> >, long int>\u2019\
    \ is not derived from \u2018std::pair<_T1, _T2>\u2019\n  146 |  { ::new((void\
    \ *)__p) _Up(std::forward<_Args>(__args)...); }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    In file included from /usr/include/c++/9/functional:54,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n                 from\
    \ /tmp/tmp1yywro48.cpp:2:\n/usr/include/c++/9/tuple:1036:28: note: candidate:\
    \ \u2018template<class _U1, class _U2, typename std::enable_if<(_ConstructibleTuple<_U1,\
    \ _U2>() && (! _ImplicitlyConvertibleTuple<_U1, _U2>())), bool>::type <anonymous>\
    \ > constexpr std::tuple<_T1, _T2>::tuple(const std::pair<_U1, _U2>&)\u2019\n\
    \ 1036 |         explicit constexpr tuple(const pair<_U1, _U2>& __in)\n      |\
    \                            ^~~~~\n/usr/include/c++/9/tuple:1036:28: note:  \
    \ template argument deduction/substitution failed:\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n\
    \                 from /usr/include/c++/9/bits/allocator.h:46,\n             \
    \    from /usr/include/c++/9/string:41,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp1yywro48.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4: note:\
    \   \u2018std::tuple<std::vector<long int, std::allocator<long int> >, long int>\u2019\
    \ is not derived from \u2018const std::pair<_T1, _T2>\u2019\n  146 |  { ::new((void\
    \ *)__p) _Up(std::forward<_Args>(__args)...); }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    In file included from /usr/include/c++/9/functional:54,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n                 from\
    \ /tmp/tmp1yywro48.cpp:2:\n/usr/include/c++/9/tuple:1027:19: note: candidate:\
    \ \u2018template<class _U1, class _U2, typename std::enable_if<(_ConstructibleTuple<_U1,\
    \ _U2>() && _ImplicitlyConvertibleTuple<_U1, _U2>()), bool>::type <anonymous>\
    \ > constexpr std::tuple<_T1, _T2>::tuple(const std::pair<_U1, _U2>&)\u2019\n\
    \ 1027 |         constexpr tuple(const pair<_U1, _U2>& __in)\n      |        \
    \           ^~~~~\n/usr/include/c++/9/tuple:1027:19: note:   template argument\
    \ deduction/substitution failed:\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n\
    \                 from /usr/include/c++/9/bits/allocator.h:46,\n             \
    \    from /usr/include/c++/9/string:41,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp1yywro48.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4: note:\
    \   \u2018std::tuple<std::vector<long int, std::allocator<long int> >, long int>\u2019\
    \ is not derived from \u2018const std::pair<_T1, _T2>\u2019\n  146 |  { ::new((void\
    \ *)__p) _Up(std::forward<_Args>(__args)...); }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    In file included from /usr/include/c++/9/functional:54,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n                 from\
    \ /tmp/tmp1yywro48.cpp:2:\n/usr/include/c++/9/tuple:1018:28: note: candidate:\
    \ \u2018template<class _U1, class _U2, typename std::enable_if<(_MoveConstructibleTuple<_U1,\
    \ _U2>() && (! _ImplicitlyMoveConvertibleTuple<_U1, _U2>())), bool>::type <anonymous>\
    \ > constexpr std::tuple<_T1, _T2>::tuple(std::tuple<_U1, _U2>&&)\u2019\n 1018\
    \ |         explicit constexpr tuple(tuple<_U1, _U2>&& __in)\n      |        \
    \                    ^~~~~\n/usr/include/c++/9/tuple:1018:28: note:   template\
    \ argument deduction/substitution failed:\n/usr/include/c++/9/tuple:1017:16: error:\
    \ no type named \u2018type\u2019 in \u2018struct std::enable_if<false, bool>\u2019\
    \n 1017 |  bool>::type = false>\n      |                ^~~~~\n/usr/include/c++/9/tuple:1009:19:\
    \ note: candidate: \u2018template<class _U1, class _U2, typename std::enable_if<(_MoveConstructibleTuple<_U1,\
    \ _U2>() && _ImplicitlyMoveConvertibleTuple<_U1, _U2>()), bool>::type <anonymous>\
    \ > constexpr std::tuple<_T1, _T2>::tuple(std::tuple<_U1, _U2>&&)\u2019\n 1009\
    \ |         constexpr tuple(tuple<_U1, _U2>&& __in)\n      |                 \
    \  ^~~~~\n/usr/include/c++/9/tuple:1009:19: note:   template argument deduction/substitution\
    \ failed:\n/usr/include/c++/9/tuple:1008:16: error: no type named \u2018type\u2019\
    \ in \u2018struct std::enable_if<false, bool>\u2019\n 1008 |  bool>::type = true>\n\
    \      |                ^~~~\n/usr/include/c++/9/tuple:1000:28: note: candidate:\
    \ \u2018template<class _U1, class _U2, typename std::enable_if<(_ConstructibleTuple<_U1,\
    \ _U2>() && (! _ImplicitlyConvertibleTuple<_U1, _U2>())), bool>::type <anonymous>\
    \ > constexpr std::tuple<_T1, _T2>::tuple(const std::tuple<_U1, _U2>&)\u2019\n\
    \ 1000 |         explicit constexpr tuple(const tuple<_U1, _U2>& __in)\n     \
    \ |                            ^~~~~\n/usr/include/c++/9/tuple:1000:28: note:\
    \   template argument deduction/substitution failed:\n/usr/include/c++/9/tuple:999:16:\
    \ error: no type named \u2018type\u2019 in \u2018struct std::enable_if<false,\
    \ bool>\u2019\n  999 |  bool>::type = false>\n      |                ^~~~~\n/usr/include/c++/9/tuple:991:19:\
    \ note: candidate: \u2018template<class _U1, class _U2, typename std::enable_if<(_ConstructibleTuple<_U1,\
    \ _U2>() && _ImplicitlyConvertibleTuple<_U1, _U2>()), bool>::type <anonymous>\
    \ > constexpr std::tuple<_T1, _T2>::tuple(const std::tuple<_U1, _U2>&)\u2019\n\
    \  991 |         constexpr tuple(const tuple<_U1, _U2>& __in)\n      |       \
    \            ^~~~~\n/usr/include/c++/9/tuple:991:19: note:   template argument\
    \ deduction/substitution failed:\n/usr/include/c++/9/tuple:990:16: error: no type\
    \ named \u2018type\u2019 in \u2018struct std::enable_if<false, bool>\u2019\n \
    \ 990 |  bool>::type = true>\n      |                ^~~~\n/usr/include/c++/9/tuple:983:17:\
    \ note: candidate: \u2018constexpr std::tuple<_T1, _T2>::tuple(std::tuple<_T1,\
    \ _T2>&&) [with _T1 = long int; _T2 = long int]\u2019\n  983 |       constexpr\
    \ tuple(tuple&&) = default;\n      |                 ^~~~~\n/usr/include/c++/9/tuple:983:23:\
    \ note:   no known conversion for argument 1 from \u2018std::tuple<std::vector<long\
    \ int, std::allocator<long int> >, long int>\u2019 to \u2018std::tuple<long int,\
    \ long int>&&\u2019\n  983 |       constexpr tuple(tuple&&) = default;\n     \
    \ |                       ^~~~~~~\n/usr/include/c++/9/tuple:981:17: note: candidate:\
    \ \u2018constexpr std::tuple<_T1, _T2>::tuple(const std::tuple<_T1, _T2>&) [with\
    \ _T1 = long int; _T2 = long int]\u2019\n  981 |       constexpr tuple(const tuple&)\
    \ = default;\n      |                 ^~~~~\n/usr/include/c++/9/tuple:981:23:\
    \ note:   no known conversion for argument 1 from \u2018std::tuple<std::vector<long\
    \ int, std::allocator<long int> >, long int>\u2019 to \u2018const std::tuple<long\
    \ int, long int>&\u2019\n  981 |       constexpr tuple(const tuple&) = default;\n\
    \      |                       ^~~~~~~~~~~~\n/usr/include/c++/9/tuple:978:28:\
    \ note: candidate: \u2018template<class _U1, class _U2, typename std::enable_if<((_MoveConstructibleTuple<_U1,\
    \ _U2>() && (! _ImplicitlyMoveConvertibleTuple<_U1, _U2>())) && (! std::is_same<typename\
    \ std::remove_cv<typename std::remove_reference<_Tp>::type>::type, std::allocator_arg_t>::value)),\
    \ bool>::type <anonymous> > constexpr std::tuple<_T1, _T2>::tuple(_U1&&, _U2&&)\u2019\
    \n  978 |         explicit constexpr tuple(_U1&& __a1, _U2&& __a2)\n      |  \
    \                          ^~~~~\n/usr/include/c++/9/tuple:978:28: note:   template\
    \ argument deduction/substitution failed:\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n\
    \                 from /usr/include/c++/9/bits/allocator.h:46,\n             \
    \    from /usr/include/c++/9/string:41,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp1yywro48.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4: note:\
    \   candidate expects 2 arguments, 1 provided\n  146 |  { ::new((void *)__p) _Up(std::forward<_Args>(__args)...);\
    \ }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nIn file\
    \ included from /usr/include/c++/9/functional:54,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmp1yywro48.cpp:2:\n/usr/include/c++/9/tuple:968:19:\
    \ note: candidate: \u2018template<class _U1, class _U2, typename std::enable_if<((_MoveConstructibleTuple<_U1,\
    \ _U2>() && _ImplicitlyMoveConvertibleTuple<_U1, _U2>()) && (! std::is_same<typename\
    \ std::remove_cv<typename std::remove_reference<_Tp>::type>::type, std::allocator_arg_t>::value)),\
    \ bool>::type <anonymous> > constexpr std::tuple<_T1, _T2>::tuple(_U1&&, _U2&&)\u2019\
    \n  968 |         constexpr tuple(_U1&& __a1, _U2&& __a2)\n      |           \
    \        ^~~~~\n/usr/include/c++/9/tuple:968:19: note:   template argument deduction/substitution\
    \ failed:\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n\
    \                 from /usr/include/c++/9/bits/allocator.h:46,\n             \
    \    from /usr/include/c++/9/string:41,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp1yywro48.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4: note:\
    \   candidate expects 2 arguments, 1 provided\n  146 |  { ::new((void *)__p) _Up(std::forward<_Args>(__args)...);\
    \ }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nIn file\
    \ included from /usr/include/c++/9/functional:54,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmp1yywro48.cpp:2:\n/usr/include/c++/9/tuple:954:28:\
    \ note: candidate: \u2018template<class _Dummy, typename std::enable_if<(std::_TC<std::is_same<_Dummy,\
    \ void>::value, long int, long int>::_ConstructibleTuple<long int, long int>()\
    \ && (! std::_TC<std::is_same<_Dummy, void>::value, long int, long int>::_ImplicitlyConvertibleTuple<long\
    \ int, long int>())), bool>::type <anonymous> > constexpr std::tuple<_T1, _T2>::tuple(const\
    \ _T1&, const _T2&)\u2019\n  954 |         explicit constexpr tuple(const _T1&\
    \ __a1, const _T2& __a2)\n      |                            ^~~~~\n/usr/include/c++/9/tuple:954:28:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n              \
    \   from /usr/include/c++/9/bits/allocator.h:46,\n                 from /usr/include/c++/9/string:41,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp1yywro48.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4:\
    \ note:   candidate expects 2 arguments, 1 provided\n  146 |  { ::new((void *)__p)\
    \ _Up(std::forward<_Args>(__args)...); }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    In file included from /usr/include/c++/9/functional:54,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n                 from\
    \ /tmp/tmp1yywro48.cpp:2:\n/usr/include/c++/9/tuple:945:19: note: candidate: \u2018\
    template<class _Dummy, typename std::enable_if<(std::_TC<std::is_same<_Dummy,\
    \ void>::value, long int, long int>::_ConstructibleTuple<long int, long int>()\
    \ && std::_TC<std::is_same<_Dummy, void>::value, long int, long int>::_ImplicitlyConvertibleTuple<long\
    \ int, long int>()), bool>::type <anonymous> > constexpr std::tuple<_T1, _T2>::tuple(const\
    \ _T1&, const _T2&)\u2019\n  945 |         constexpr tuple(const _T1& __a1, const\
    \ _T2& __a2)\n      |                   ^~~~~\n/usr/include/c++/9/tuple:945:19:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n              \
    \   from /usr/include/c++/9/bits/allocator.h:46,\n                 from /usr/include/c++/9/string:41,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp1yywro48.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4:\
    \ note:   candidate expects 2 arguments, 1 provided\n  146 |  { ::new((void *)__p)\
    \ _Up(std::forward<_Args>(__args)...); }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    In file included from /usr/include/c++/9/functional:54,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n                 from\
    \ /tmp/tmp1yywro48.cpp:2:\n/usr/include/c++/9/tuple:931:21: note: candidate: \u2018\
    template<class _U1, class _U2, typename std::enable_if<std::__and_<std::is_default_constructible<_Tp>,\
    \ std::is_default_constructible<_Dp>, std::__not_<std::__and_<std::__is_implicitly_default_constructible<_U1>,\
    \ std::__is_implicitly_default_constructible<_U2> > > >::value, bool>::type <anonymous>\
    \ > constexpr std::tuple<_T1, _T2>::tuple()\u2019\n  931 |  explicit constexpr\
    \ tuple()\n      |                     ^~~~~\n/usr/include/c++/9/tuple:931:21:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n              \
    \   from /usr/include/c++/9/bits/allocator.h:46,\n                 from /usr/include/c++/9/string:41,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp1yywro48.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4:\
    \ note:   candidate expects 0 arguments, 1 provided\n  146 |  { ::new((void *)__p)\
    \ _Up(std::forward<_Args>(__args)...); }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    In file included from /usr/include/c++/9/functional:54,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n                 from\
    \ /tmp/tmp1yywro48.cpp:2:\n/usr/include/c++/9/tuple:918:12: note: candidate: \u2018\
    template<class _U1, class _U2, typename std::enable_if<std::__and_<std::__is_implicitly_default_constructible<_U1>,\
    \ std::__is_implicitly_default_constructible<_U2> >::value, bool>::type <anonymous>\
    \ > constexpr std::tuple<_T1, _T2>::tuple()\u2019\n  918 |  constexpr tuple()\n\
    \      |            ^~~~~\n/usr/include/c++/9/tuple:918:12: note:   template argument\
    \ deduction/substitution failed:\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n\
    \                 from /usr/include/c++/9/bits/allocator.h:46,\n             \
    \    from /usr/include/c++/9/string:41,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp1yywro48.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4: note:\
    \   candidate expects 0 arguments, 1 provided\n  146 |  { ::new((void *)__p) _Up(std::forward<_Args>(__args)...);\
    \ }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    // Write your code here\n    std::vector<std::tuple<long,\
    \ long>> res;\n    for(auto &row : lst){\n        for(auto &el : row){\n     \
    \       if(el == x){\n                res.push_back(std::make_tuple(row.size()\
    \ - 1, row.size() - 1));\n            }\n        }\n    }\n    std::sort(res.begin(),\
    \ res.end(), [](auto &a, auto &b){return std::get<0>(a) < std::get<0>(b);});\n\
    \    std::sort(res.begin(), res.end(), [](auto &a, auto &b){return std::get<1>(a)\
    \ > std::get<1>(b);});\n    return res;\n}\nint main() {\n    auto candidate =\
    \ get_row;\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "tmpw7a_z2af: /tmp/tmpw7a_z2af.cpp:35: int main(): Assertion `candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    std::vector<std::tuple<long, long>> res;\n    for(auto &row\
    \ : lst) {\n        for(auto &val : row) {\n            if(val == x) {\n     \
    \           res.emplace_back(std::make_tuple(row.size() - 1, row.size() - 1));\n\
    \            }\n        }\n    }\n    std::sort(res.begin(), res.end(), [](const\
    \ std::tuple<long, long> &a, const std::tuple<long, long> &b) {\n        return\
    \ std::get<0>(a) < std::get<0>(b);\n    });\n    std::sort(res.begin(), res.end(),\
    \ [](const std::tuple<long, long> &a, const std::tuple<long, long> &b) {\n   \
    \     return std::get<1>(a) < std::get<1>(b);\n    });\n    return res;\n}\nint\
    \ main() {\n    auto candidate = get_row;\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "tmpaz4r27_a: /tmp/tmpaz4r27_a.cpp:38: int main(): Assertion `candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    std::vector<std::tuple<long, long>> res;\n    std::vector<std::tuple<long,\
    \ long>> row;\n    std::vector<std::tuple<long, long>> col;\n    std::vector<std::tuple<long,\
    \ long>> temp;\n    long row_index = 0;\n    long col_index = 0;\n    long row_size\
    \ = lst.size();\n    long col_size = lst[0].size();\n    long row_start = 0;\n\
    \    long col_start = 0;\n    for (long i = 0; i < row_size; i++) {\n        row.clear();\n\
    \        temp.clear();\n        for (long j = 0; j < col_size; j++) {\n      \
    \      if (lst[i][j] == x) {\n                row.push_back(std::make_tuple(i,\
    \ j));\n                temp.push_back(std::make_tuple(i, j));\n            }\n\
    \        }\n        std::sort(row.begin(), row.end(), [](std::tuple<long, long>\
    \ a, std::tuple<long, long> b) {\n            return std::get<0>(a) < std::get<0>(b);\n\
    \        });\n        std::sort(temp.begin(), temp.end(), [](std::tuple<long,\
    \ long> a, std::tuple<long, long> b) {\n            return std::get<1>(a) < std::get<1>(b);\n\
    \        });\n        for (long j = 0; j < col_size; j++) {\n            if (std::get<1>(temp[j])\
    \ == j) {\n                col.push_back(std::make_tuple(i, j));\n           \
    \ }\n        }\n        std::sort(col.begin(), col.end(), [](std::tuple<long,\
    \ long> a, std::tuple<long, long> b) {\n            return std::get<0>(a) < std::get<0>(b);\n\
    \        });\n        for (long j = 0; j < col_size; j++) {\n            if (std::get<0>(col[j])\
    \ == i) {\n                res.push_back(std::make_tuple(i, j));\n           \
    \ }\n        }\n        row_start = i;\n        col_start = j;\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = get_row;\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpcrwxk5ys.cpp: In function \u2018std::vector<std::tuple<long int,\
    \ long int> > get_row(std::vector<std::vector<long int> >, long int)\u2019:\n\
    /tmp/tmpcrwxk5ys.cpp:59:21: error: \u2018j\u2019 was not declared in this scope\n\
    \   59 |         col_start = j;\n      |                     ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    std::vector<std::tuple<long, long>> res;\n    long n = lst.size();\n\
    \    long m = lst[0].size();\n    long cnt = 0;\n    for (long i = 0; i < n; i++)\
    \ {\n        long cnt2 = 0;\n        for (long j = 0; j < m; j++) {\n        \
    \    if (lst[i][j] == x) {\n                res.push_back({i, j});\n         \
    \       cnt2++;\n            }\n        }\n        if (cnt2 == m) {\n        \
    \    cnt++;\n        }\n    }\n    if (cnt == 0) {\n        res.clear();\n   \
    \ }\n    std::sort(res.begin(), res.end(), [](std::tuple<long, long> a, std::tuple<long,\
    \ long> b) {\n        return std::get<0>(a) < std::get<0>(b);\n    });\n    for\
    \ (long i = 0; i < n; i++) {\n        std::sort(res.begin() + i, res.end(), [](std::tuple<long,\
    \ long> a, std::tuple<long, long> b) {\n            return std::get<1>(a) > std::get<1>(b);\n\
    \        });\n    }\n    return res;\n}\nint main() {\n    auto candidate = get_row;\n\
    \    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    std::vector<std::tuple<long, long>> res;\n    res.reserve(lst.size());\n\
    \    for (auto &row : lst) {\n        auto it = std::find(row.begin(), row.end(),\
    \ x);\n        if (it != row.end()) {\n            std::sort(row.begin(), row.end());\n\
    \            std::sort(row.rbegin(), row.rend());\n            res.emplace_back(std::make_tuple(std::distance(row.begin(),\
    \ it), std::distance(row.rbegin(), it)));\n        }\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = get_row;\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmphhi612gk.cpp: In function \u2018std::vector<std::tuple<long int,\
    \ long int> > get_row(std::vector<std::vector<long int> >, long int)\u2019:\n\
    /tmp/tmphhi612gk.cpp:27:108: error: no matching function for call to \u2018distance(std::vector<long\
    \ int>::reverse_iterator, __gnu_cxx::__normal_iterator<long int*, std::vector<long\
    \ int> >&)\u2019\n   27 |             res.emplace_back(std::make_tuple(std::distance(row.begin(),\
    \ it), std::distance(row.rbegin(), it)));\n      |                           \
    \                                                                            \
    \     ^\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:66,\n  \
    \               from /usr/include/c++/9/bits/char_traits.h:39,\n             \
    \    from /usr/include/c++/9/ios:40,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmphhi612gk.cpp:2:\n/usr/include/c++/9/bits/stl_iterator_base_funcs.h:138:5:\
    \ note: candidate: \u2018template<class _InputIterator> typename std::iterator_traits<_Iterator>::difference_type\
    \ std::distance(_InputIterator, _InputIterator)\u2019\n  138 |     distance(_InputIterator\
    \ __first, _InputIterator __last)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator_base_funcs.h:138:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmphhi612gk.cpp:27:108:\
    \ note:   deduced conflicting types for parameter \u2018_InputIterator\u2019 (\u2018\
    std::reverse_iterator<__gnu_cxx::__normal_iterator<long int*, std::vector<long\
    \ int> > >\u2019 and \u2018__gnu_cxx::__normal_iterator<long int*, std::vector<long\
    \ int> >\u2019)\n   27 |             res.emplace_back(std::make_tuple(std::distance(row.begin(),\
    \ it), std::distance(row.rbegin(), it)));\n      |                           \
    \                                                                            \
    \     ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    std::vector<std::tuple<long, long>> res;\n    std::vector<long>\
    \ row;\n    std::vector<long> col;\n    for (auto &row : lst) {\n        row.clear();\n\
    \        col.clear();\n        for (auto &el : row) {\n            row.push_back(el);\n\
    \            col.push_back(el);\n        }\n        std::sort(row.begin(), row.end());\n\
    \        std::sort(col.begin(), col.end());\n        res.emplace_back(std::make_tuple(row.back(),\
    \ col.back()));\n    }\n    std::sort(res.begin(), res.end(), [](const std::tuple<long,\
    \ long> &a, const std::tuple<long, long> &b) {\n        return std::get<0>(a)\
    \ < std::get<0>(b);\n    });\n    for (auto &el : res) {\n        if (std::get<0>(el)\
    \ == x) {\n            return res;\n        }\n    }\n    return res;\n}\nint\
    \ main() {\n    auto candidate = get_row;\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    std::vector<std::tuple<long, long>> res;\n    std::vector<long>\
    \ row;\n    std::vector<long> col;\n    for (auto &v : lst) {\n        row.push_back(v[0]);\n\
    \        col.push_back(v[1]);\n    }\n    std::sort(row.begin(), row.end());\n\
    \    std::sort(col.begin(), col.end());\n    for (long i = 0; i < row.size();\
    \ i++) {\n        if (row[i] == x) {\n            std::tuple<long, long> t = std::make_tuple(i,\
    \ col[i]);\n            res.push_back(t);\n        }\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = get_row;\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "tmpcw9na8vy: /tmp/tmpcw9na8vy.cpp:39: int main(): Assertion `candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    // Your code here\n    std::vector<std::tuple<long, long>>\
    \ res;\n    for(auto &row : lst) {\n        for(auto &el : row) {\n          \
    \  if(el == x) {\n                res.push_back(std::make_tuple(row.size() - 1,\
    \ row.size() - 1));\n            }\n        }\n    }\n    std::sort(res.begin(),\
    \ res.end(), [](const std::tuple<long, long> &a, const std::tuple<long, long>\
    \ &b) { return std::get<0>(a) > std::get<0>(b); });\n    std::sort(res.begin(),\
    \ res.end(), [](const std::tuple<long, long> &a, const std::tuple<long, long>\
    \ &b) { return std::get<1>(a) > std::get<1>(b); });\n    return res;\n}\nint main()\
    \ {\n    auto candidate = get_row;\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "tmpu0kjn3rc: /tmp/tmpu0kjn3rc.cpp:35: int main(): Assertion `candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    // Your code here\n    std::vector<std::tuple<long, long>>\
    \ res;\n    for(auto &row : lst) {\n        for(auto &col : row) {\n         \
    \   if(col == x) {\n                res.emplace_back(std::make_tuple(row.size()\
    \ - 1, col.size() - 1));\n            }\n        }\n    }\n    std::sort(res.begin(),\
    \ res.end(), [](const std::tuple<long, long> &a, const std::tuple<long, long>\
    \ &b) {\n        return std::get<0>(a) < std::get<0>(b);\n    });\n    std::sort(res.begin(),\
    \ res.end(), [](const std::tuple<long, long> &a, const std::tuple<long, long>\
    \ &b) {\n        return std::get<1>(a) < std::get<1>(b);\n    });\n    return\
    \ res;\n}\nint main() {\n    auto candidate = get_row;\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp16nhbzyp.cpp: In function \u2018std::vector<std::tuple<long int,\
    \ long int> > get_row(std::vector<std::vector<long int> >, long int)\u2019:\n\
    /tmp/tmp16nhbzyp.cpp:25:70: error: request for member \u2018size\u2019 in \u2018\
    col\u2019, which is of non-class type \u2018long int\u2019\n   25 |          \
    \       res.emplace_back(std::make_tuple(row.size() - 1, col.size() - 1));\n \
    \     |                                                                      ^~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    // Your code here\n    std::vector<std::tuple<long, long>>\
    \ res;\n    for(auto &row : lst) {\n        for(auto &col : row) {\n         \
    \   if(col == x) {\n                res.push_back(std::make_tuple(row.size(),\
    \ col.size()));\n            }\n        }\n    }\n    std::sort(res.begin(), res.end(),\
    \ [](const std::tuple<long, long> &a, const std::tuple<long, long> &b) -> bool\
    \ {\n        return std::get<0>(a) < std::get<0>(b);\n    });\n    std::sort(res.begin(),\
    \ res.end(), [](const std::tuple<long, long> &a, const std::tuple<long, long>\
    \ &b) -> bool {\n        return std::get<1>(a) < std::get<1>(b);\n    });\n  \
    \  return res;\n}\nint main() {\n    auto candidate = get_row;\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpglw79ooq.cpp: In function \u2018std::vector<std::tuple<long int,\
    \ long int> > get_row(std::vector<std::vector<long int> >, long int)\u2019:\n\
    /tmp/tmpglw79ooq.cpp:25:63: error: request for member \u2018size\u2019 in \u2018\
    col\u2019, which is of non-class type \u2018long int\u2019\n   25 |          \
    \       res.push_back(std::make_tuple(row.size(), col.size()));\n      |     \
    \                                                          ^~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    // Write your code here\n    std::vector<std::tuple<long,\
    \ long>> res;\n    for(auto &row : lst){\n        for(auto &el : row){\n     \
    \       if(el == x){\n                res.push_back(std::make_tuple(row.size()\
    \ - 1, row.size() - 1));\n            }\n        }\n    }\n    std::sort(res.begin(),\
    \ res.end(), [](auto &a, auto &b){\n        return std::get<0>(a) < std::get<0>(b);\n\
    \    });\n    std::sort(res.begin(), res.end(), [](auto &a, auto &b){\n      \
    \  return std::get<1>(a) > std::get<1>(b);\n    });\n    return res;\n}\nint main()\
    \ {\n    auto candidate = get_row;\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "tmp3ohg94ad: /tmp/tmp3ohg94ad.cpp:39: int main(): Assertion `candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    std::vector<std::tuple<long, long>> res;\n    long row =\
    \ 0;\n    long col = 0;\n    long cnt = 0;\n    long cnt2 = 0;\n    long cnt3\
    \ = 0;\n    for (auto &row : lst) {\n        cnt = 0;\n        cnt2 = 0;\n   \
    \     cnt3 = 0;\n        for (auto &col : row) {\n            if (col == x) {\n\
    \                res.emplace_back(std::make_tuple(row, col));\n              \
    \  cnt++;\n            }\n            if (col == x - 1) {\n                res.emplace_back(std::make_tuple(row,\
    \ col));\n                cnt2++;\n            }\n            if (col == x - 2)\
    \ {\n                res.emplace_back(std::make_tuple(row, col));\n          \
    \      cnt3++;\n            }\n        }\n        if (cnt != 0) {\n          \
    \  std::sort(res.begin(), res.end(), [](std::tuple<long, long> a, std::tuple<long,\
    \ long> b) {\n                return std::get<0>(a) < std::get<0>(b);\n      \
    \      });\n            std::sort(res.begin(), res.end(), [](std::tuple<long,\
    \ long> a, std::tuple<long, long> b) {\n                return std::get<1>(a)\
    \ < std::get<1>(b);\n            });\n        }\n        if (cnt2 != 0) {\n  \
    \          std::sort(res.begin(), res.end(), [](std::tuple<long, long> a, std::tuple<long,\
    \ long> b) {\n                return std::get<0>(a) < std::get<0>(b);\n      \
    \      });\n            std::sort(res.begin(), res.end(), [](std::tuple<long,\
    \ long> a, std::tuple<long, long> b) {\n                return std::get<1>(a)\
    \ < std::get<1>(b);\n            });\n        }\n        if (cnt3 != 0) {\n  \
    \          std::sort(res.begin(), res.end(), [](std::tuple<long, long> a, std::tuple<long,\
    \ long> b) {\n                return std::get<0>(a) < std::get<0>(b);\n      \
    \      });\n            std::sort(res.begin(), res.end(), [](std::tuple<long,\
    \ long> a, std::tuple<long, long> b) {\n                return std::get<1>(a)\
    \ < std::get<1>(b);\n            });\n        }\n    }\n    return res;\n}\nint\
    \ main() {\n    auto candidate = get_row;\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "In file included from /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n\
    \                 from /usr/include/c++/9/bits/allocator.h:46,\n             \
    \    from /usr/include/c++/9/string:41,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpajigv3g1.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h: In instantiation\
    \ of \u2018void __gnu_cxx::new_allocator<_Tp>::construct(_Up*, _Args&& ...) [with\
    \ _Up = std::tuple<long int, long int>; _Args = {std::tuple<std::vector<long int,\
    \ std::allocator<long int> >, long int>}; _Tp = std::tuple<long int, long int>]\u2019\
    :\n/usr/include/c++/9/bits/alloc_traits.h:483:4:   required from \u2018static\
    \ void std::allocator_traits<std::allocator<_CharT> >::construct(std::allocator_traits<std::allocator<_CharT>\
    \ >::allocator_type&, _Up*, _Args&& ...) [with _Up = std::tuple<long int, long\
    \ int>; _Args = {std::tuple<std::vector<long int, std::allocator<long int> >,\
    \ long int>}; _Tp = std::tuple<long int, long int>; std::allocator_traits<std::allocator<_CharT>\
    \ >::allocator_type = std::allocator<std::tuple<long int, long int> >]\u2019\n\
    /usr/include/c++/9/bits/vector.tcc:115:30:   required from \u2018void std::vector<_Tp,\
    \ _Alloc>::emplace_back(_Args&& ...) [with _Args = {std::tuple<std::vector<long\
    \ int, std::allocator<long int> >, long int>}; _Tp = std::tuple<long int, long\
    \ int>; _Alloc = std::allocator<std::tuple<long int, long int> >]\u2019\n/tmp/tmpajigv3g1.cpp:32:59:\
    \   required from here\n/usr/include/c++/9/ext/new_allocator.h:146:4: error: no\
    \ matching function for call to \u2018std::tuple<long int, long int>::tuple(std::tuple<std::vector<long\
    \ int, std::allocator<long int> >, long int>)\u2019\n  146 |  { ::new((void *)__p)\
    \ _Up(std::forward<_Args>(__args)...); }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    In file included from /usr/include/c++/9/functional:54,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n                 from\
    \ /tmp/tmpajigv3g1.cpp:2:\n/usr/include/c++/9/tuple:1199:18: note: candidate:\
    \ \u2018template<class _Alloc, class _U1, class _U2, typename std::enable_if<(_MoveConstructibleTuple<_U1,\
    \ _U2>() && (! _ImplicitlyMoveConvertibleTuple<_U1, _U2>())), bool>::type <anonymous>\
    \ > std::tuple<_T1, _T2>::tuple(std::allocator_arg_t, const _Alloc&, std::pair<_U1,\
    \ _U2>&&)\u2019\n 1199 |         explicit tuple(allocator_arg_t __tag, const _Alloc&\
    \ __a,\n      |                  ^~~~~\n/usr/include/c++/9/tuple:1199:18: note:\
    \   template argument deduction/substitution failed:\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n\
    \                 from /usr/include/c++/9/bits/allocator.h:46,\n             \
    \    from /usr/include/c++/9/string:41,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpajigv3g1.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4: note:\
    \   candidate expects 3 arguments, 1 provided\n  146 |  { ::new((void *)__p) _Up(std::forward<_Args>(__args)...);\
    \ }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nIn file\
    \ included from /usr/include/c++/9/functional:54,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmpajigv3g1.cpp:2:\n/usr/include/c++/9/tuple:1189:9:\
    \ note: candidate: \u2018template<class _Alloc, class _U1, class _U2, typename\
    \ std::enable_if<(_MoveConstructibleTuple<_U1, _U2>() && _ImplicitlyMoveConvertibleTuple<_U1,\
    \ _U2>()), bool>::type <anonymous> > std::tuple<_T1, _T2>::tuple(std::allocator_arg_t,\
    \ const _Alloc&, std::pair<_U1, _U2>&&)\u2019\n 1189 |         tuple(allocator_arg_t\
    \ __tag, const _Alloc& __a, pair<_U1, _U2>&& __in)\n      |         ^~~~~\n/usr/include/c++/9/tuple:1189:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n              \
    \   from /usr/include/c++/9/bits/allocator.h:46,\n                 from /usr/include/c++/9/string:41,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpajigv3g1.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4:\
    \ note:   candidate expects 3 arguments, 1 provided\n  146 |  { ::new((void *)__p)\
    \ _Up(std::forward<_Args>(__args)...); }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    In file included from /usr/include/c++/9/functional:54,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n                 from\
    \ /tmp/tmpajigv3g1.cpp:2:\n/usr/include/c++/9/tuple:1179:18: note: candidate:\
    \ \u2018template<class _Alloc, class _U1, class _U2, typename std::enable_if<(_ConstructibleTuple<_U1,\
    \ _U2>() && (! _ImplicitlyConvertibleTuple<_U1, _U2>())), bool>::type <anonymous>\
    \ > std::tuple<_T1, _T2>::tuple(std::allocator_arg_t, const _Alloc&, const std::pair<_U1,\
    \ _U2>&)\u2019\n 1179 |         explicit tuple(allocator_arg_t __tag, const _Alloc&\
    \ __a,\n      |                  ^~~~~\n/usr/include/c++/9/tuple:1179:18: note:\
    \   template argument deduction/substitution failed:\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n\
    \                 from /usr/include/c++/9/bits/allocator.h:46,\n             \
    \    from /usr/include/c++/9/string:41,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpajigv3g1.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4: note:\
    \   candidate expects 3 arguments, 1 provided\n  146 |  { ::new((void *)__p) _Up(std::forward<_Args>(__args)...);\
    \ }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nIn file\
    \ included from /usr/include/c++/9/functional:54,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmpajigv3g1.cpp:2:\n/usr/include/c++/9/tuple:1169:9:\
    \ note: candidate: \u2018template<class _Alloc, class _U1, class _U2, typename\
    \ std::enable_if<(_ConstructibleTuple<_U1, _U2>() && _ImplicitlyConvertibleTuple<_U1,\
    \ _U2>()), bool>::type <anonymous> > std::tuple<_T1, _T2>::tuple(std::allocator_arg_t,\
    \ const _Alloc&, const std::pair<_U1, _U2>&)\u2019\n 1169 |         tuple(allocator_arg_t\
    \ __tag, const _Alloc& __a,\n      |         ^~~~~\n/usr/include/c++/9/tuple:1169:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n              \
    \   from /usr/include/c++/9/bits/allocator.h:46,\n                 from /usr/include/c++/9/string:41,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpajigv3g1.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4:\
    \ note:   candidate expects 3 arguments, 1 provided\n  146 |  { ::new((void *)__p)\
    \ _Up(std::forward<_Args>(__args)...); }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    In file included from /usr/include/c++/9/functional:54,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n                 from\
    \ /tmp/tmpajigv3g1.cpp:2:\n/usr/include/c++/9/tuple:1158:11: note: candidate:\
    \ \u2018template<class _Alloc, class _U1, class _U2, typename std::enable_if<(_MoveConstructibleTuple<_U1,\
    \ _U2>() && (! _ImplicitlyMoveConvertibleTuple<_U1, _U2>())), bool>::type <anonymous>\
    \ > std::tuple<_T1, _T2>::tuple(std::allocator_arg_t, const _Alloc&, std::tuple<_U1,\
    \ _U2>&&)\u2019\n 1158 |  explicit tuple(allocator_arg_t __tag, const _Alloc&\
    \ __a,\n      |           ^~~~~\n/usr/include/c++/9/tuple:1158:11: note:   template\
    \ argument deduction/substitution failed:\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n\
    \                 from /usr/include/c++/9/bits/allocator.h:46,\n             \
    \    from /usr/include/c++/9/string:41,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpajigv3g1.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4: note:\
    \   candidate expects 3 arguments, 1 provided\n  146 |  { ::new((void *)__p) _Up(std::forward<_Args>(__args)...);\
    \ }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nIn file\
    \ included from /usr/include/c++/9/functional:54,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmpajigv3g1.cpp:2:\n/usr/include/c++/9/tuple:1148:2:\
    \ note: candidate: \u2018template<class _Alloc, class _U1, class _U2, typename\
    \ std::enable_if<(_MoveConstructibleTuple<_U1, _U2>() && _ImplicitlyMoveConvertibleTuple<_U1,\
    \ _U2>()), bool>::type <anonymous> > std::tuple<_T1, _T2>::tuple(std::allocator_arg_t,\
    \ const _Alloc&, std::tuple<_U1, _U2>&&)\u2019\n 1148 |  tuple(allocator_arg_t\
    \ __tag, const _Alloc& __a, tuple<_U1, _U2>&& __in)\n      |  ^~~~~\n/usr/include/c++/9/tuple:1148:2:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n              \
    \   from /usr/include/c++/9/bits/allocator.h:46,\n                 from /usr/include/c++/9/string:41,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpajigv3g1.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4:\
    \ note:   candidate expects 3 arguments, 1 provided\n  146 |  { ::new((void *)__p)\
    \ _Up(std::forward<_Args>(__args)...); }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    In file included from /usr/include/c++/9/functional:54,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n                 from\
    \ /tmp/tmpajigv3g1.cpp:2:\n/usr/include/c++/9/tuple:1136:11: note: candidate:\
    \ \u2018template<class _Alloc, class _U1, class _U2, typename std::enable_if<(_ConstructibleTuple<_U1,\
    \ _U2>() && (! _ImplicitlyConvertibleTuple<_U1, _U2>())), bool>::type <anonymous>\
    \ > std::tuple<_T1, _T2>::tuple(std::allocator_arg_t, const _Alloc&, const std::tuple<_U1,\
    \ _U2>&)\u2019\n 1136 |  explicit tuple(allocator_arg_t __tag, const _Alloc& __a,\n\
    \      |           ^~~~~\n/usr/include/c++/9/tuple:1136:11: note:   template argument\
    \ deduction/substitution failed:\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n\
    \                 from /usr/include/c++/9/bits/allocator.h:46,\n             \
    \    from /usr/include/c++/9/string:41,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpajigv3g1.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4: note:\
    \   candidate expects 3 arguments, 1 provided\n  146 |  { ::new((void *)__p) _Up(std::forward<_Args>(__args)...);\
    \ }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nIn file\
    \ included from /usr/include/c++/9/functional:54,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmpajigv3g1.cpp:2:\n/usr/include/c++/9/tuple:1124:2:\
    \ note: candidate: \u2018template<class _Alloc, class _U1, class _U2, typename\
    \ std::enable_if<(_ConstructibleTuple<_U1, _U2>() && _ImplicitlyConvertibleTuple<_U1,\
    \ _U2>()), bool>::type <anonymous> > std::tuple<_T1, _T2>::tuple(std::allocator_arg_t,\
    \ const _Alloc&, const std::tuple<_U1, _U2>&)\u2019\n 1124 |  tuple(allocator_arg_t\
    \ __tag, const _Alloc& __a,\n      |  ^~~~~\n/usr/include/c++/9/tuple:1124:2:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n              \
    \   from /usr/include/c++/9/bits/allocator.h:46,\n                 from /usr/include/c++/9/string:41,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpajigv3g1.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4:\
    \ note:   candidate expects 3 arguments, 1 provided\n  146 |  { ::new((void *)__p)\
    \ _Up(std::forward<_Args>(__args)...); }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    In file included from /usr/include/c++/9/functional:54,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n                 from\
    \ /tmp/tmpajigv3g1.cpp:2:\n/usr/include/c++/9/tuple:1115:2: note: candidate: \u2018\
    template<class _Alloc> std::tuple<_T1, _T2>::tuple(std::allocator_arg_t, const\
    \ _Alloc&, std::tuple<_T1, _T2>&&)\u2019\n 1115 |  tuple(allocator_arg_t __tag,\
    \ const _Alloc& __a, tuple&& __in)\n      |  ^~~~~\n/usr/include/c++/9/tuple:1115:2:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n              \
    \   from /usr/include/c++/9/bits/allocator.h:46,\n                 from /usr/include/c++/9/string:41,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpajigv3g1.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4:\
    \ note:   candidate expects 3 arguments, 1 provided\n  146 |  { ::new((void *)__p)\
    \ _Up(std::forward<_Args>(__args)...); }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    In file included from /usr/include/c++/9/functional:54,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n                 from\
    \ /tmp/tmpajigv3g1.cpp:2:\n/usr/include/c++/9/tuple:1111:2: note: candidate: \u2018\
    template<class _Alloc> std::tuple<_T1, _T2>::tuple(std::allocator_arg_t, const\
    \ _Alloc&, const std::tuple<_T1, _T2>&)\u2019\n 1111 |  tuple(allocator_arg_t\
    \ __tag, const _Alloc& __a, const tuple& __in)\n      |  ^~~~~\n/usr/include/c++/9/tuple:1111:2:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n              \
    \   from /usr/include/c++/9/bits/allocator.h:46,\n                 from /usr/include/c++/9/string:41,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpajigv3g1.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4:\
    \ note:   candidate expects 3 arguments, 1 provided\n  146 |  { ::new((void *)__p)\
    \ _Up(std::forward<_Args>(__args)...); }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    In file included from /usr/include/c++/9/functional:54,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n                 from\
    \ /tmp/tmpajigv3g1.cpp:2:\n/usr/include/c++/9/tuple:1105:11: note: candidate:\
    \ \u2018template<class _Alloc, class _U1, class _U2, typename std::enable_if<(_MoveConstructibleTuple<_U1,\
    \ _U2>() && (! _ImplicitlyMoveConvertibleTuple<_U1, _U2>())), bool>::type <anonymous>\
    \ > std::tuple<_T1, _T2>::tuple(std::allocator_arg_t, const _Alloc&, _U1&&, _U2&&)\u2019\
    \n 1105 |  explicit tuple(allocator_arg_t __tag, const _Alloc& __a,\n      | \
    \          ^~~~~\n/usr/include/c++/9/tuple:1105:11: note:   template argument\
    \ deduction/substitution failed:\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n\
    \                 from /usr/include/c++/9/bits/allocator.h:46,\n             \
    \    from /usr/include/c++/9/string:41,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpajigv3g1.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4: note:\
    \   candidate expects 4 arguments, 1 provided\n  146 |  { ::new((void *)__p) _Up(std::forward<_Args>(__args)...);\
    \ }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nIn file\
    \ included from /usr/include/c++/9/functional:54,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmpajigv3g1.cpp:2:\n/usr/include/c++/9/tuple:1095:2:\
    \ note: candidate: \u2018template<class _Alloc, class _U1, class _U2, typename\
    \ std::enable_if<(_MoveConstructibleTuple<_U1, _U2>() && _ImplicitlyMoveConvertibleTuple<_U1,\
    \ _U2>()), bool>::type <anonymous> > std::tuple<_T1, _T2>::tuple(std::allocator_arg_t,\
    \ const _Alloc&, _U1&&, _U2&&)\u2019\n 1095 |  tuple(allocator_arg_t __tag, const\
    \ _Alloc& __a, _U1&& __a1, _U2&& __a2)\n      |  ^~~~~\n/usr/include/c++/9/tuple:1095:2:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n              \
    \   from /usr/include/c++/9/bits/allocator.h:46,\n                 from /usr/include/c++/9/string:41,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpajigv3g1.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4:\
    \ note:   candidate expects 4 arguments, 1 provided\n  146 |  { ::new((void *)__p)\
    \ _Up(std::forward<_Args>(__args)...); }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    In file included from /usr/include/c++/9/functional:54,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n                 from\
    \ /tmp/tmpajigv3g1.cpp:2:\n/usr/include/c++/9/tuple:1085:11: note: candidate:\
    \ \u2018template<class _Alloc, class _Dummy, typename std::enable_if<(std::_TC<std::is_same<_Dummy,\
    \ void>::value, long int, long int>::_ConstructibleTuple<long int, long int>()\
    \ && (! std::_TC<std::is_same<_Dummy, void>::value, long int, long int>::_ImplicitlyConvertibleTuple<long\
    \ int, long int>())), bool>::type <anonymous> > std::tuple<_T1, _T2>::tuple(std::allocator_arg_t,\
    \ const _Alloc&, const _T1&, const _T2&)\u2019\n 1085 |  explicit tuple(allocator_arg_t\
    \ __tag, const _Alloc& __a,\n      |           ^~~~~\n/usr/include/c++/9/tuple:1085:11:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n              \
    \   from /usr/include/c++/9/bits/allocator.h:46,\n                 from /usr/include/c++/9/string:41,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpajigv3g1.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4:\
    \ note:   candidate expects 4 arguments, 1 provided\n  146 |  { ::new((void *)__p)\
    \ _Up(std::forward<_Args>(__args)...); }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    In file included from /usr/include/c++/9/functional:54,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n                 from\
    \ /tmp/tmpajigv3g1.cpp:2:\n/usr/include/c++/9/tuple:1073:2: note: candidate: \u2018\
    template<class _Alloc, class _Dummy, typename std::enable_if<(std::_TC<std::is_same<_Dummy,\
    \ void>::value, long int, long int>::_ConstructibleTuple<long int, long int>()\
    \ && std::_TC<std::is_same<_Dummy, void>::value, long int, long int>::_ImplicitlyConvertibleTuple<long\
    \ int, long int>()), bool>::type <anonymous> > std::tuple<_T1, _T2>::tuple(std::allocator_arg_t,\
    \ const _Alloc&, const _T1&, const _T2&)\u2019\n 1073 |  tuple(allocator_arg_t\
    \ __tag, const _Alloc& __a,\n      |  ^~~~~\n/usr/include/c++/9/tuple:1073:2:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n              \
    \   from /usr/include/c++/9/bits/allocator.h:46,\n                 from /usr/include/c++/9/string:41,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpajigv3g1.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4:\
    \ note:   candidate expects 4 arguments, 1 provided\n  146 |  { ::new((void *)__p)\
    \ _Up(std::forward<_Args>(__args)...); }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    In file included from /usr/include/c++/9/functional:54,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n                 from\
    \ /tmp/tmpajigv3g1.cpp:2:\n/usr/include/c++/9/tuple:1062:2: note: candidate: \u2018\
    template<class _Alloc> std::tuple<_T1, _T2>::tuple(std::allocator_arg_t, const\
    \ _Alloc&)\u2019\n 1062 |  tuple(allocator_arg_t __tag, const _Alloc& __a)\n \
    \     |  ^~~~~\n/usr/include/c++/9/tuple:1062:2: note:   template argument deduction/substitution\
    \ failed:\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n\
    \                 from /usr/include/c++/9/bits/allocator.h:46,\n             \
    \    from /usr/include/c++/9/string:41,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpajigv3g1.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4: note:\
    \   candidate expects 2 arguments, 1 provided\n  146 |  { ::new((void *)__p) _Up(std::forward<_Args>(__args)...);\
    \ }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nIn file\
    \ included from /usr/include/c++/9/functional:54,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmpajigv3g1.cpp:2:\n/usr/include/c++/9/tuple:1055:28:\
    \ note: candidate: \u2018template<class _U1, class _U2, typename std::enable_if<(_MoveConstructibleTuple<_U1,\
    \ _U2>() && (! _ImplicitlyMoveConvertibleTuple<_U1, _U2>())), bool>::type <anonymous>\
    \ > constexpr std::tuple<_T1, _T2>::tuple(std::pair<_U1, _U2>&&)\u2019\n 1055\
    \ |         explicit constexpr tuple(pair<_U1, _U2>&& __in)\n      |         \
    \                   ^~~~~\n/usr/include/c++/9/tuple:1055:28: note:   template\
    \ argument deduction/substitution failed:\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n\
    \                 from /usr/include/c++/9/bits/allocator.h:46,\n             \
    \    from /usr/include/c++/9/string:41,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpajigv3g1.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4: note:\
    \   \u2018std::tuple<std::vector<long int, std::allocator<long int> >, long int>\u2019\
    \ is not derived from \u2018std::pair<_T1, _T2>\u2019\n  146 |  { ::new((void\
    \ *)__p) _Up(std::forward<_Args>(__args)...); }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    In file included from /usr/include/c++/9/functional:54,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n                 from\
    \ /tmp/tmpajigv3g1.cpp:2:\n/usr/include/c++/9/tuple:1045:19: note: candidate:\
    \ \u2018template<class _U1, class _U2, typename std::enable_if<(_MoveConstructibleTuple<_U1,\
    \ _U2>() && _ImplicitlyMoveConvertibleTuple<_U1, _U2>()), bool>::type <anonymous>\
    \ > constexpr std::tuple<_T1, _T2>::tuple(std::pair<_U1, _U2>&&)\u2019\n 1045\
    \ |         constexpr tuple(pair<_U1, _U2>&& __in)\n      |                  \
    \ ^~~~~\n/usr/include/c++/9/tuple:1045:19: note:   template argument deduction/substitution\
    \ failed:\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n\
    \                 from /usr/include/c++/9/bits/allocator.h:46,\n             \
    \    from /usr/include/c++/9/string:41,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpajigv3g1.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4: note:\
    \   \u2018std::tuple<std::vector<long int, std::allocator<long int> >, long int>\u2019\
    \ is not derived from \u2018std::pair<_T1, _T2>\u2019\n  146 |  { ::new((void\
    \ *)__p) _Up(std::forward<_Args>(__args)...); }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    In file included from /usr/include/c++/9/functional:54,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n                 from\
    \ /tmp/tmpajigv3g1.cpp:2:\n/usr/include/c++/9/tuple:1036:28: note: candidate:\
    \ \u2018template<class _U1, class _U2, typename std::enable_if<(_ConstructibleTuple<_U1,\
    \ _U2>() && (! _ImplicitlyConvertibleTuple<_U1, _U2>())), bool>::type <anonymous>\
    \ > constexpr std::tuple<_T1, _T2>::tuple(const std::pair<_U1, _U2>&)\u2019\n\
    \ 1036 |         explicit constexpr tuple(const pair<_U1, _U2>& __in)\n      |\
    \                            ^~~~~\n/usr/include/c++/9/tuple:1036:28: note:  \
    \ template argument deduction/substitution failed:\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n\
    \                 from /usr/include/c++/9/bits/allocator.h:46,\n             \
    \    from /usr/include/c++/9/string:41,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpajigv3g1.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4: note:\
    \   \u2018std::tuple<std::vector<long int, std::allocator<long int> >, long int>\u2019\
    \ is not derived from \u2018const std::pair<_T1, _T2>\u2019\n  146 |  { ::new((void\
    \ *)__p) _Up(std::forward<_Args>(__args)...); }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    In file included from /usr/include/c++/9/functional:54,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n                 from\
    \ /tmp/tmpajigv3g1.cpp:2:\n/usr/include/c++/9/tuple:1027:19: note: candidate:\
    \ \u2018template<class _U1, class _U2, typename std::enable_if<(_ConstructibleTuple<_U1,\
    \ _U2>() && _ImplicitlyConvertibleTuple<_U1, _U2>()), bool>::type <anonymous>\
    \ > constexpr std::tuple<_T1, _T2>::tuple(const std::pair<_U1, _U2>&)\u2019\n\
    \ 1027 |         constexpr tuple(const pair<_U1, _U2>& __in)\n      |        \
    \           ^~~~~\n/usr/include/c++/9/tuple:1027:19: note:   template argument\
    \ deduction/substitution failed:\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n\
    \                 from /usr/include/c++/9/bits/allocator.h:46,\n             \
    \    from /usr/include/c++/9/string:41,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpajigv3g1.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4: note:\
    \   \u2018std::tuple<std::vector<long int, std::allocator<long int> >, long int>\u2019\
    \ is not derived from \u2018const std::pair<_T1, _T2>\u2019\n  146 |  { ::new((void\
    \ *)__p) _Up(std::forward<_Args>(__args)...); }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    In file included from /usr/include/c++/9/functional:54,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n                 from\
    \ /tmp/tmpajigv3g1.cpp:2:\n/usr/include/c++/9/tuple:1018:28: note: candidate:\
    \ \u2018template<class _U1, class _U2, typename std::enable_if<(_MoveConstructibleTuple<_U1,\
    \ _U2>() && (! _ImplicitlyMoveConvertibleTuple<_U1, _U2>())), bool>::type <anonymous>\
    \ > constexpr std::tuple<_T1, _T2>::tuple(std::tuple<_U1, _U2>&&)\u2019\n 1018\
    \ |         explicit constexpr tuple(tuple<_U1, _U2>&& __in)\n      |        \
    \                    ^~~~~\n/usr/include/c++/9/tuple:1018:28: note:   template\
    \ argument deduction/substitution failed:\n/usr/include/c++/9/tuple:1017:16: error:\
    \ no type named \u2018type\u2019 in \u2018struct std::enable_if<false, bool>\u2019\
    \n 1017 |  bool>::type = false>\n      |                ^~~~~\n/usr/include/c++/9/tuple:1009:19:\
    \ note: candidate: \u2018template<class _U1, class _U2, typename std::enable_if<(_MoveConstructibleTuple<_U1,\
    \ _U2>() && _ImplicitlyMoveConvertibleTuple<_U1, _U2>()), bool>::type <anonymous>\
    \ > constexpr std::tuple<_T1, _T2>::tuple(std::tuple<_U1, _U2>&&)\u2019\n 1009\
    \ |         constexpr tuple(tuple<_U1, _U2>&& __in)\n      |                 \
    \  ^~~~~\n/usr/include/c++/9/tuple:1009:19: note:   template argument deduction/substitution\
    \ failed:\n/usr/include/c++/9/tuple:1008:16: error: no type named \u2018type\u2019\
    \ in \u2018struct std::enable_if<false, bool>\u2019\n 1008 |  bool>::type = true>\n\
    \      |                ^~~~\n/usr/include/c++/9/tuple:1000:28: note: candidate:\
    \ \u2018template<class _U1, class _U2, typename std::enable_if<(_ConstructibleTuple<_U1,\
    \ _U2>() && (! _ImplicitlyConvertibleTuple<_U1, _U2>())), bool>::type <anonymous>\
    \ > constexpr std::tuple<_T1, _T2>::tuple(const std::tuple<_U1, _U2>&)\u2019\n\
    \ 1000 |         explicit constexpr tuple(const tuple<_U1, _U2>& __in)\n     \
    \ |                            ^~~~~\n/usr/include/c++/9/tuple:1000:28: note:\
    \   template argument deduction/substitution failed:\n/usr/include/c++/9/tuple:999:16:\
    \ error: no type named \u2018type\u2019 in \u2018struct std::enable_if<false,\
    \ bool>\u2019\n  999 |  bool>::type = false>\n      |                ^~~~~\n/usr/include/c++/9/tuple:991:19:\
    \ note: candidate: \u2018template<class _U1, class _U2, typename std::enable_if<(_ConstructibleTuple<_U1,\
    \ _U2>() && _ImplicitlyConvertibleTuple<_U1, _U2>()), bool>::type <anonymous>\
    \ > constexpr std::tuple<_T1, _T2>::tuple(const std::tuple<_U1, _U2>&)\u2019\n\
    \  991 |         constexpr tuple(const tuple<_U1, _U2>& __in)\n      |       \
    \            ^~~~~\n/usr/include/c++/9/tuple:991:19: note:   template argument\
    \ deduction/substitution failed:\n/usr/include/c++/9/tuple:990:16: error: no type\
    \ named \u2018type\u2019 in \u2018struct std::enable_if<false, bool>\u2019\n \
    \ 990 |  bool>::type = true>\n      |                ^~~~\n/usr/include/c++/9/tuple:983:17:\
    \ note: candidate: \u2018constexpr std::tuple<_T1, _T2>::tuple(std::tuple<_T1,\
    \ _T2>&&) [with _T1 = long int; _T2 = long int]\u2019\n  983 |       constexpr\
    \ tuple(tuple&&) = default;\n      |                 ^~~~~\n/usr/include/c++/9/tuple:983:23:\
    \ note:   no known conversion for argument 1 from \u2018std::tuple<std::vector<long\
    \ int, std::allocator<long int> >, long int>\u2019 to \u2018std::tuple<long int,\
    \ long int>&&\u2019\n  983 |       constexpr tuple(tuple&&) = default;\n     \
    \ |                       ^~~~~~~\n/usr/include/c++/9/tuple:981:17: note: candidate:\
    \ \u2018constexpr std::tuple<_T1, _T2>::tuple(const std::tuple<_T1, _T2>&) [with\
    \ _T1 = long int; _T2 = long int]\u2019\n  981 |       constexpr tuple(const tuple&)\
    \ = default;\n      |                 ^~~~~\n/usr/include/c++/9/tuple:981:23:\
    \ note:   no known conversion for argument 1 from \u2018std::tuple<std::vector<long\
    \ int, std::allocator<long int> >, long int>\u2019 to \u2018const std::tuple<long\
    \ int, long int>&\u2019\n  981 |       constexpr tuple(const tuple&) = default;\n\
    \      |                       ^~~~~~~~~~~~\n/usr/include/c++/9/tuple:978:28:\
    \ note: candidate: \u2018template<class _U1, class _U2, typename std::enable_if<((_MoveConstructibleTuple<_U1,\
    \ _U2>() && (! _ImplicitlyMoveConvertibleTuple<_U1, _U2>())) && (! std::is_same<typename\
    \ std::remove_cv<typename std::remove_reference<_Tp>::type>::type, std::allocator_arg_t>::value)),\
    \ bool>::type <anonymous> > constexpr std::tuple<_T1, _T2>::tuple(_U1&&, _U2&&)\u2019\
    \n  978 |         explicit constexpr tuple(_U1&& __a1, _U2&& __a2)\n      |  \
    \                          ^~~~~\n/usr/include/c++/9/tuple:978:28: note:   template\
    \ argument deduction/substitution failed:\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n\
    \                 from /usr/include/c++/9/bits/allocator.h:46,\n             \
    \    from /usr/include/c++/9/string:41,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpajigv3g1.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4: note:\
    \   candidate expects 2 arguments, 1 provided\n  146 |  { ::new((void *)__p) _Up(std::forward<_Args>(__args)...);\
    \ }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nIn file\
    \ included from /usr/include/c++/9/functional:54,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmpajigv3g1.cpp:2:\n/usr/include/c++/9/tuple:968:19:\
    \ note: candidate: \u2018template<class _U1, class _U2, typename std::enable_if<((_MoveConstructibleTuple<_U1,\
    \ _U2>() && _ImplicitlyMoveConvertibleTuple<_U1, _U2>()) && (! std::is_same<typename\
    \ std::remove_cv<typename std::remove_reference<_Tp>::type>::type, std::allocator_arg_t>::value)),\
    \ bool>::type <anonymous> > constexpr std::tuple<_T1, _T2>::tuple(_U1&&, _U2&&)\u2019\
    \n  968 |         constexpr tuple(_U1&& __a1, _U2&& __a2)\n      |           \
    \        ^~~~~\n/usr/include/c++/9/tuple:968:19: note:   template argument deduction/substitution\
    \ failed:\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n\
    \                 from /usr/include/c++/9/bits/allocator.h:46,\n             \
    \    from /usr/include/c++/9/string:41,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpajigv3g1.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4: note:\
    \   candidate expects 2 arguments, 1 provided\n  146 |  { ::new((void *)__p) _Up(std::forward<_Args>(__args)...);\
    \ }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nIn file\
    \ included from /usr/include/c++/9/functional:54,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmpajigv3g1.cpp:2:\n/usr/include/c++/9/tuple:954:28:\
    \ note: candidate: \u2018template<class _Dummy, typename std::enable_if<(std::_TC<std::is_same<_Dummy,\
    \ void>::value, long int, long int>::_ConstructibleTuple<long int, long int>()\
    \ && (! std::_TC<std::is_same<_Dummy, void>::value, long int, long int>::_ImplicitlyConvertibleTuple<long\
    \ int, long int>())), bool>::type <anonymous> > constexpr std::tuple<_T1, _T2>::tuple(const\
    \ _T1&, const _T2&)\u2019\n  954 |         explicit constexpr tuple(const _T1&\
    \ __a1, const _T2& __a2)\n      |                            ^~~~~\n/usr/include/c++/9/tuple:954:28:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n              \
    \   from /usr/include/c++/9/bits/allocator.h:46,\n                 from /usr/include/c++/9/string:41,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpajigv3g1.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4:\
    \ note:   candidate expects 2 arguments, 1 provided\n  146 |  { ::new((void *)__p)\
    \ _Up(std::forward<_Args>(__args)...); }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    In file included from /usr/include/c++/9/functional:54,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n                 from\
    \ /tmp/tmpajigv3g1.cpp:2:\n/usr/include/c++/9/tuple:945:19: note: candidate: \u2018\
    template<class _Dummy, typename std::enable_if<(std::_TC<std::is_same<_Dummy,\
    \ void>::value, long int, long int>::_ConstructibleTuple<long int, long int>()\
    \ && std::_TC<std::is_same<_Dummy, void>::value, long int, long int>::_ImplicitlyConvertibleTuple<long\
    \ int, long int>()), bool>::type <anonymous> > constexpr std::tuple<_T1, _T2>::tuple(const\
    \ _T1&, const _T2&)\u2019\n  945 |         constexpr tuple(const _T1& __a1, const\
    \ _T2& __a2)\n      |                   ^~~~~\n/usr/include/c++/9/tuple:945:19:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n              \
    \   from /usr/include/c++/9/bits/allocator.h:46,\n                 from /usr/include/c++/9/string:41,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpajigv3g1.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4:\
    \ note:   candidate expects 2 arguments, 1 provided\n  146 |  { ::new((void *)__p)\
    \ _Up(std::forward<_Args>(__args)...); }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    In file included from /usr/include/c++/9/functional:54,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n                 from\
    \ /tmp/tmpajigv3g1.cpp:2:\n/usr/include/c++/9/tuple:931:21: note: candidate: \u2018\
    template<class _U1, class _U2, typename std::enable_if<std::__and_<std::is_default_constructible<_Tp>,\
    \ std::is_default_constructible<_Dp>, std::__not_<std::__and_<std::__is_implicitly_default_constructible<_U1>,\
    \ std::__is_implicitly_default_constructible<_U2> > > >::value, bool>::type <anonymous>\
    \ > constexpr std::tuple<_T1, _T2>::tuple()\u2019\n  931 |  explicit constexpr\
    \ tuple()\n      |                     ^~~~~\n/usr/include/c++/9/tuple:931:21:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n              \
    \   from /usr/include/c++/9/bits/allocator.h:46,\n                 from /usr/include/c++/9/string:41,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpajigv3g1.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4:\
    \ note:   candidate expects 0 arguments, 1 provided\n  146 |  { ::new((void *)__p)\
    \ _Up(std::forward<_Args>(__args)...); }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    In file included from /usr/include/c++/9/functional:54,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n                 from\
    \ /tmp/tmpajigv3g1.cpp:2:\n/usr/include/c++/9/tuple:918:12: note: candidate: \u2018\
    template<class _U1, class _U2, typename std::enable_if<std::__and_<std::__is_implicitly_default_constructible<_U1>,\
    \ std::__is_implicitly_default_constructible<_U2> >::value, bool>::type <anonymous>\
    \ > constexpr std::tuple<_T1, _T2>::tuple()\u2019\n  918 |  constexpr tuple()\n\
    \      |            ^~~~~\n/usr/include/c++/9/tuple:918:12: note:   template argument\
    \ deduction/substitution failed:\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n\
    \                 from /usr/include/c++/9/bits/allocator.h:46,\n             \
    \    from /usr/include/c++/9/string:41,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpajigv3g1.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4: note:\
    \   candidate expects 0 arguments, 1 provided\n  146 |  { ::new((void *)__p) _Up(std::forward<_Args>(__args)...);\
    \ }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    std::vector<std::tuple<long, long>> res;\n    std::vector<long>\
    \ row;\n    std::vector<long> col;\n    for (auto &i : lst) {\n        row.push_back(i.size());\n\
    \        col.push_back(0);\n    }\n    std::sort(row.begin(), row.end(), [](long\
    \ a, long b) { return a > b; });\n    std::sort(col.begin(), col.end(), [](long\
    \ a, long b) { return a > b; });\n    for (long i = 0; i < row.size(); i++) {\n\
    \        for (long j = 0; j < col[i]; j++) {\n            if (row[i] == x && col[j]\
    \ == x) {\n                res.push_back(std::make_tuple(i, j));\n           \
    \ }\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate =\
    \ get_row;\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "tmpjrq7cebj: /tmp/tmpjrq7cebj.cpp:40: int main(): Assertion `candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    std::vector<std::tuple<long, long>> res;\n    std::vector<long>\
    \ row;\n    std::vector<long> col;\n    long cnt = 0;\n    for (auto &v : lst)\
    \ {\n        row.push_back(v[0]);\n        col.push_back(v[1]);\n        cnt +=\
    \ v[0];\n    }\n    long maxcnt = cnt;\n    for (long i = 0; i < row.size(); i++)\
    \ {\n        long cnt = 0;\n        for (auto &v : lst) {\n            if (v[0]\
    \ == row[i] && v[1] == col[i]) {\n                cnt += v[0];\n            }\n\
    \        }\n        if (cnt > maxcnt) {\n            maxcnt = cnt;\n        }\n\
    \    }\n    for (long i = 0; i < row.size(); i++) {\n        long cnt = 0;\n \
    \       for (auto &v : lst) {\n            if (v[0] == row[i] && v[1] == col[i])\
    \ {\n                cnt += v[0];\n            }\n        }\n        if (cnt ==\
    \ maxcnt) {\n            res.push_back(std::make_tuple(i, cnt));\n        }\n\
    \    }\n    std::sort(res.begin(), res.end(), [](auto &a, auto &b) { return a[1]\
    \ < b[1]; });\n    std::sort(res.begin(), res.end(), [](auto &a, auto &b) { return\
    \ a[0] > b[0]; });\n    return res;\n}\nint main() {\n    auto candidate = get_row;\n\
    \    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxu7t9bq6.cpp: In instantiation of \u2018get_row(std::vector<std::vector<long\
    \ int> >, long int)::<lambda(auto:1&, auto:2&)> [with auto:1 = std::tuple<long\
    \ int, long int>; auto:2 = std::tuple<long int, long int>]\u2019:\n/usr/include/c++/9/bits/predefined_ops.h:143:18:\
    \   required from \u2018constexpr bool __gnu_cxx::__ops::_Iter_comp_iter<_Compare>::operator()(_Iterator1,\
    \ _Iterator2) [with _Iterator1 = __gnu_cxx::__normal_iterator<std::tuple<long\
    \ int, long int>*, std::vector<std::tuple<long int, long int> > >; _Iterator2\
    \ = __gnu_cxx::__normal_iterator<std::tuple<long int, long int>*, std::vector<std::tuple<long\
    \ int, long int> > >; _Compare = get_row(std::vector<std::vector<long int> >,\
    \ long int)::<lambda(auto:1&, auto:2&)>]\u2019\n/usr/include/c++/9/bits/stl_algo.h:81:17:\
    \   required from \u2018void std::__move_median_to_first(_Iterator, _Iterator,\
    \ _Iterator, _Iterator, _Compare) [with _Iterator = __gnu_cxx::__normal_iterator<std::tuple<long\
    \ int, long int>*, std::vector<std::tuple<long int, long int> > >; _Compare =\
    \ __gnu_cxx::__ops::_Iter_comp_iter<get_row(std::vector<std::vector<long int>\
    \ >, long int)::<lambda(auto:1&, auto:2&)> >]\u2019\n/usr/include/c++/9/bits/stl_algo.h:1926:34:\
    \   required from \u2018_RandomAccessIterator std::__unguarded_partition_pivot(_RandomAccessIterator,\
    \ _RandomAccessIterator, _Compare) [with _RandomAccessIterator = __gnu_cxx::__normal_iterator<std::tuple<long\
    \ int, long int>*, std::vector<std::tuple<long int, long int> > >; _Compare =\
    \ __gnu_cxx::__ops::_Iter_comp_iter<get_row(std::vector<std::vector<long int>\
    \ >, long int)::<lambda(auto:1&, auto:2&)> >]\u2019\n/usr/include/c++/9/bits/stl_algo.h:1958:38:\
    \   required from \u2018void std::__introsort_loop(_RandomAccessIterator, _RandomAccessIterator,\
    \ _Size, _Compare) [with _RandomAccessIterator = __gnu_cxx::__normal_iterator<std::tuple<long\
    \ int, long int>*, std::vector<std::tuple<long int, long int> > >; _Size = long\
    \ int; _Compare = __gnu_cxx::__ops::_Iter_comp_iter<get_row(std::vector<std::vector<long\
    \ int> >, long int)::<lambda(auto:1&, auto:2&)> >]\u2019\n/usr/include/c++/9/bits/stl_algo.h:1973:25:\
    \   required from \u2018void std::__sort(_RandomAccessIterator, _RandomAccessIterator,\
    \ _Compare) [with _RandomAccessIterator = __gnu_cxx::__normal_iterator<std::tuple<long\
    \ int, long int>*, std::vector<std::tuple<long int, long int> > >; _Compare =\
    \ __gnu_cxx::__ops::_Iter_comp_iter<get_row(std::vector<std::vector<long int>\
    \ >, long int)::<lambda(auto:1&, auto:2&)> >]\u2019\n/usr/include/c++/9/bits/stl_algo.h:4905:18:\
    \   required from \u2018void std::sort(_RAIter, _RAIter, _Compare) [with _RAIter\
    \ = __gnu_cxx::__normal_iterator<std::tuple<long int, long int>*, std::vector<std::tuple<long\
    \ int, long int> > >; _Compare = get_row(std::vector<std::vector<long int> >,\
    \ long int)::<lambda(auto:1&, auto:2&)>]\u2019\n/tmp/tmpxu7t9bq6.cpp:52:83:  \
    \ required from here\n/tmp/tmpxu7t9bq6.cpp:52:70: error: no match for \u2018operator[]\u2019\
    \ (operand types are \u2018std::tuple<long int, long int>\u2019 and \u2018int\u2019\
    )\n   52 |     std::sort(res.begin(), res.end(), [](auto &a, auto &b) { return\
    \ a[1] < b[1]; });\n      |                                                  \
    \                   ~^\n/tmp/tmpxu7t9bq6.cpp:52:77: error: no match for \u2018\
    operator[]\u2019 (operand types are \u2018std::tuple<long int, long int>\u2019\
    \ and \u2018int\u2019)\n   52 |     std::sort(res.begin(), res.end(), [](auto\
    \ &a, auto &b) { return a[1] < b[1]; });\n      |                            \
    \                                                ~^\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:71,\n\
    \                 from /usr/include/c++/9/bits/char_traits.h:39,\n           \
    \      from /usr/include/c++/9/ios:40,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpxu7t9bq6.cpp:2:\n/usr/include/c++/9/bits/predefined_ops.h: In instantiation\
    \ of \u2018constexpr bool __gnu_cxx::__ops::_Iter_comp_iter<_Compare>::operator()(_Iterator1,\
    \ _Iterator2) [with _Iterator1 = __gnu_cxx::__normal_iterator<std::tuple<long\
    \ int, long int>*, std::vector<std::tuple<long int, long int> > >; _Iterator2\
    \ = __gnu_cxx::__normal_iterator<std::tuple<long int, long int>*, std::vector<std::tuple<long\
    \ int, long int> > >; _Compare = get_row(std::vector<std::vector<long int> >,\
    \ long int)::<lambda(auto:1&, auto:2&)>]\u2019:\n/usr/include/c++/9/bits/stl_algo.h:81:17:\
    \   required from \u2018void std::__move_median_to_first(_Iterator, _Iterator,\
    \ _Iterator, _Iterator, _Compare) [with _Iterator = __gnu_cxx::__normal_iterator<std::tuple<long\
    \ int, long int>*, std::vector<std::tuple<long int, long int> > >; _Compare =\
    \ __gnu_cxx::__ops::_Iter_comp_iter<get_row(std::vector<std::vector<long int>\
    \ >, long int)::<lambda(auto:1&, auto:2&)> >]\u2019\n/usr/include/c++/9/bits/stl_algo.h:1926:34:\
    \   required from \u2018_RandomAccessIterator std::__unguarded_partition_pivot(_RandomAccessIterator,\
    \ _RandomAccessIterator, _Compare) [with _RandomAccessIterator = __gnu_cxx::__normal_iterator<std::tuple<long\
    \ int, long int>*, std::vector<std::tuple<long int, long int> > >; _Compare =\
    \ __gnu_cxx::__ops::_Iter_comp_iter<get_row(std::vector<std::vector<long int>\
    \ >, long int)::<lambda(auto:1&, auto:2&)> >]\u2019\n/usr/include/c++/9/bits/stl_algo.h:1958:38:\
    \   required from \u2018void std::__introsort_loop(_RandomAccessIterator, _RandomAccessIterator,\
    \ _Size, _Compare) [with _RandomAccessIterator = __gnu_cxx::__normal_iterator<std::tuple<long\
    \ int, long int>*, std::vector<std::tuple<long int, long int> > >; _Size = long\
    \ int; _Compare = __gnu_cxx::__ops::_Iter_comp_iter<get_row(std::vector<std::vector<long\
    \ int> >, long int)::<lambda(auto:1&, auto:2&)> >]\u2019\n/usr/include/c++/9/bits/stl_algo.h:1973:25:\
    \   required from \u2018void std::__sort(_RandomAccessIterator, _RandomAccessIterator,\
    \ _Compare) [with _RandomAccessIterator = __gnu_cxx::__normal_iterator<std::tuple<long\
    \ int, long int>*, std::vector<std::tuple<long int, long int> > >; _Compare =\
    \ __gnu_cxx::__ops::_Iter_comp_iter<get_row(std::vector<std::vector<long int>\
    \ >, long int)::<lambda(auto:1&, auto:2&)> >]\u2019\n/usr/include/c++/9/bits/stl_algo.h:4905:18:\
    \   required from \u2018void std::sort(_RAIter, _RAIter, _Compare) [with _RAIter\
    \ = __gnu_cxx::__normal_iterator<std::tuple<long int, long int>*, std::vector<std::tuple<long\
    \ int, long int> > >; _Compare = get_row(std::vector<std::vector<long int> >,\
    \ long int)::<lambda(auto:1&, auto:2&)>]\u2019\n/tmp/tmpxu7t9bq6.cpp:52:83:  \
    \ required from here\n/usr/include/c++/9/bits/predefined_ops.h:143:18: error:\
    \ void value not ignored as it ought to be\n  143 |         { return bool(_M_comp(*__it1,\
    \ *__it2)); }\n      |                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpxu7t9bq6.cpp:\
    \ In instantiation of \u2018get_row(std::vector<std::vector<long int> >, long\
    \ int)::<lambda(auto:3&, auto:4&)> [with auto:3 = std::tuple<long int, long int>;\
    \ auto:4 = std::tuple<long int, long int>]\u2019:\n/usr/include/c++/9/bits/predefined_ops.h:143:18:\
    \   required from \u2018constexpr bool __gnu_cxx::__ops::_Iter_comp_iter<_Compare>::operator()(_Iterator1,\
    \ _Iterator2) [with _Iterator1 = __gnu_cxx::__normal_iterator<std::tuple<long\
    \ int, long int>*, std::vector<std::tuple<long int, long int> > >; _Iterator2\
    \ = __gnu_cxx::__normal_iterator<std::tuple<long int, long int>*, std::vector<std::tuple<long\
    \ int, long int> > >; _Compare = get_row(std::vector<std::vector<long int> >,\
    \ long int)::<lambda(auto:3&, auto:4&)>]\u2019\n/usr/include/c++/9/bits/stl_algo.h:81:17:\
    \   required from \u2018void std::__move_median_to_first(_Iterator, _Iterator,\
    \ _Iterator, _Iterator, _Compare) [with _Iterator = __gnu_cxx::__normal_iterator<std::tuple<long\
    \ int, long int>*, std::vector<std::tuple<long int, long int> > >; _Compare =\
    \ __gnu_cxx::__ops::_Iter_comp_iter<get_row(std::vector<std::vector<long int>\
    \ >, long int)::<lambda(auto:3&, auto:4&)> >]\u2019\n/usr/include/c++/9/bits/stl_algo.h:1926:34:\
    \   required from \u2018_RandomAccessIterator std::__unguarded_partition_pivot(_RandomAccessIterator,\
    \ _RandomAccessIterator, _Compare) [with _RandomAccessIterator = __gnu_cxx::__normal_iterator<std::tuple<long\
    \ int, long int>*, std::vector<std::tuple<long int, long int> > >; _Compare =\
    \ __gnu_cxx::__ops::_Iter_comp_iter<get_row(std::vector<std::vector<long int>\
    \ >, long int)::<lambda(auto:3&, auto:4&)> >]\u2019\n/usr/include/c++/9/bits/stl_algo.h:1958:38:\
    \   required from \u2018void std::__introsort_loop(_RandomAccessIterator, _RandomAccessIterator,\
    \ _Size, _Compare) [with _RandomAccessIterator = __gnu_cxx::__normal_iterator<std::tuple<long\
    \ int, long int>*, std::vector<std::tuple<long int, long int> > >; _Size = long\
    \ int; _Compare = __gnu_cxx::__ops::_Iter_comp_iter<get_row(std::vector<std::vector<long\
    \ int> >, long int)::<lambda(auto:3&, auto:4&)> >]\u2019\n/usr/include/c++/9/bits/stl_algo.h:1973:25:\
    \   required from \u2018void std::__sort(_RandomAccessIterator, _RandomAccessIterator,\
    \ _Compare) [with _RandomAccessIterator = __gnu_cxx::__normal_iterator<std::tuple<long\
    \ int, long int>*, std::vector<std::tuple<long int, long int> > >; _Compare =\
    \ __gnu_cxx::__ops::_Iter_comp_iter<get_row(std::vector<std::vector<long int>\
    \ >, long int)::<lambda(auto:3&, auto:4&)> >]\u2019\n/usr/include/c++/9/bits/stl_algo.h:4905:18:\
    \   required from \u2018void std::sort(_RAIter, _RAIter, _Compare) [with _RAIter\
    \ = __gnu_cxx::__normal_iterator<std::tuple<long int, long int>*, std::vector<std::tuple<long\
    \ int, long int> > >; _Compare = get_row(std::vector<std::vector<long int> >,\
    \ long int)::<lambda(auto:3&, auto:4&)>]\u2019\n/tmp/tmpxu7t9bq6.cpp:53:83:  \
    \ required from here\n/tmp/tmpxu7t9bq6.cpp:53:70: error: no match for \u2018operator[]\u2019\
    \ (operand types are \u2018std::tuple<long int, long int>\u2019 and \u2018int\u2019\
    )\n   53 |     std::sort(res.begin(), res.end(), [](auto &a, auto &b) { return\
    \ a[0] > b[0]; });\n      |                                                  \
    \                   ~^\n/tmp/tmpxu7t9bq6.cpp:53:77: error: no match for \u2018\
    operator[]\u2019 (operand types are \u2018std::tuple<long int, long int>\u2019\
    \ and \u2018int\u2019)\n   53 |     std::sort(res.begin(), res.end(), [](auto\
    \ &a, auto &b) { return a[0] > b[0]; });\n      |                            \
    \                                                ~^\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:71,\n\
    \                 from /usr/include/c++/9/bits/char_traits.h:39,\n           \
    \      from /usr/include/c++/9/ios:40,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpxu7t9bq6.cpp:2:\n/usr/include/c++/9/bits/predefined_ops.h: In instantiation\
    \ of \u2018constexpr bool __gnu_cxx::__ops::_Iter_comp_iter<_Compare>::operator()(_Iterator1,\
    \ _Iterator2) [with _Iterator1 = __gnu_cxx::__normal_iterator<std::tuple<long\
    \ int, long int>*, std::vector<std::tuple<long int, long int> > >; _Iterator2\
    \ = __gnu_cxx::__normal_iterator<std::tuple<long int, long int>*, std::vector<std::tuple<long\
    \ int, long int> > >; _Compare = get_row(std::vector<std::vector<long int> >,\
    \ long int)::<lambda(auto:3&, auto:4&)>]\u2019:\n/usr/include/c++/9/bits/stl_algo.h:81:17:\
    \   required from \u2018void std::__move_median_to_first(_Iterator, _Iterator,\
    \ _Iterator, _Iterator, _Compare) [with _Iterator = __gnu_cxx::__normal_iterator<std::tuple<long\
    \ int, long int>*, std::vector<std::tuple<long int, long int> > >; _Compare =\
    \ __gnu_cxx::__ops::_Iter_comp_iter<get_row(std::vector<std::vector<long int>\
    \ >, long int)::<lambda(auto:3&, auto:4&)> >]\u2019\n/usr/include/c++/9/bits/stl_algo.h:1926:34:\
    \   required from \u2018_RandomAccessIterator std::__unguarded_partition_pivot(_RandomAccessIterator,\
    \ _RandomAccessIterator, _Compare) [with _RandomAccessIterator = __gnu_cxx::__normal_iterator<std::tuple<long\
    \ int, long int>*, std::vector<std::tuple<long int, long int> > >; _Compare =\
    \ __gnu_cxx::__ops::_Iter_comp_iter<get_row(std::vector<std::vector<long int>\
    \ >, long int)::<lambda(auto:3&, auto:4&)> >]\u2019\n/usr/include/c++/9/bits/stl_algo.h:1958:38:\
    \   required from \u2018void std::__introsort_loop(_RandomAccessIterator, _RandomAccessIterator,\
    \ _Size, _Compare) [with _RandomAccessIterator = __gnu_cxx::__normal_iterator<std::tuple<long\
    \ int, long int>*, std::vector<std::tuple<long int, long int> > >; _Size = long\
    \ int; _Compare = __gnu_cxx::__ops::_Iter_comp_iter<get_row(std::vector<std::vector<long\
    \ int> >, long int)::<lambda(auto:3&, auto:4&)> >]\u2019\n/usr/include/c++/9/bits/stl_algo.h:1973:25:\
    \   required from \u2018void std::__sort(_RandomAccessIterator, _RandomAccessIterator,\
    \ _Compare) [with _RandomAccessIterator = __gnu_cxx::__normal_iterator<std::tuple<long\
    \ int, long int>*, std::vector<std::tuple<long int, long int> > >; _Compare =\
    \ __gnu_cxx::__ops::_Iter_comp_iter<get_row(std::vector<std::vector<long int>\
    \ >, long int)::<lambda(auto:3&, auto:4&)> >]\u2019\n/usr/include/c++/9/bits/stl_algo.h:4905:18:\
    \   required from \u2018void std::sort(_RAIter, _RAIter, _Compare) [with _RAIter\
    \ = __gnu_cxx::__normal_iterator<std::tuple<long int, long int>*, std::vector<std::tuple<long\
    \ int, long int> > >; _Compare = get_row(std::vector<std::vector<long int> >,\
    \ long int)::<lambda(auto:3&, auto:4&)>]\u2019\n/tmp/tmpxu7t9bq6.cpp:53:83:  \
    \ required from here\n/usr/include/c++/9/bits/predefined_ops.h:143:18: error:\
    \ void value not ignored as it ought to be\n  143 |         { return bool(_M_comp(*__it1,\
    \ *__it2)); }\n      |                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/usr/include/c++/9/bits/predefined_ops.h:\
    \ In instantiation of \u2018bool __gnu_cxx::__ops::_Val_comp_iter<_Compare>::operator()(_Value&,\
    \ _Iterator) [with _Value = std::tuple<long int, long int>; _Iterator = __gnu_cxx::__normal_iterator<std::tuple<long\
    \ int, long int>*, std::vector<std::tuple<long int, long int> > >; _Compare =\
    \ get_row(std::vector<std::vector<long int> >, long int)::<lambda(auto:1&, auto:2&)>]\u2019\
    :\n/usr/include/c++/9/bits/stl_algo.h:1833:20:   required from \u2018void std::__unguarded_linear_insert(_RandomAccessIterator,\
    \ _Compare) [with _RandomAccessIterator = __gnu_cxx::__normal_iterator<std::tuple<long\
    \ int, long int>*, std::vector<std::tuple<long int, long int> > >; _Compare =\
    \ __gnu_cxx::__ops::_Val_comp_iter<get_row(std::vector<std::vector<long int> >,\
    \ long int)::<lambda(auto:1&, auto:2&)> >]\u2019\n/usr/include/c++/9/bits/stl_algo.h:1860:36:\
    \   required from \u2018void std::__insertion_sort(_RandomAccessIterator, _RandomAccessIterator,\
    \ _Compare) [with _RandomAccessIterator = __gnu_cxx::__normal_iterator<std::tuple<long\
    \ int, long int>*, std::vector<std::tuple<long int, long int> > >; _Compare =\
    \ __gnu_cxx::__ops::_Iter_comp_iter<get_row(std::vector<std::vector<long int>\
    \ >, long int)::<lambda(auto:1&, auto:2&)> >]\u2019\n/usr/include/c++/9/bits/stl_algo.h:1890:25:\
    \   required from \u2018void std::__final_insertion_sort(_RandomAccessIterator,\
    \ _RandomAccessIterator, _Compare) [with _RandomAccessIterator = __gnu_cxx::__normal_iterator<std::tuple<long\
    \ int, long int>*, std::vector<std::tuple<long int, long int> > >; _Compare =\
    \ __gnu_cxx::__ops::_Iter_comp_iter<get_row(std::vector<std::vector<long int>\
    \ >, long int)::<lambda(auto:1&, auto:2&)> >]\u2019\n/usr/include/c++/9/bits/stl_algo.h:1976:31:\
    \   required from \u2018void std::__sort(_RandomAccessIterator, _RandomAccessIterator,\
    \ _Compare) [with _RandomAccessIterator = __gnu_cxx::__normal_iterator<std::tuple<long\
    \ int, long int>*, std::vector<std::tuple<long int, long int> > >; _Compare =\
    \ __gnu_cxx::__ops::_Iter_comp_iter<get_row(std::vector<std::vector<long int>\
    \ >, long int)::<lambda(auto:1&, auto:2&)> >]\u2019\n/usr/include/c++/9/bits/stl_algo.h:4905:18:\
    \   required from \u2018void std::sort(_RAIter, _RAIter, _Compare) [with _RAIter\
    \ = __gnu_cxx::__normal_iterator<std::tuple<long int, long int>*, std::vector<std::tuple<long\
    \ int, long int> > >; _Compare = get_row(std::vector<std::vector<long int> >,\
    \ long int)::<lambda(auto:1&, auto:2&)>]\u2019\n/tmp/tmpxu7t9bq6.cpp:52:83:  \
    \ required from here\n/usr/include/c++/9/bits/predefined_ops.h:215:11: error:\
    \ void value not ignored as it ought to be\n  215 |  { return bool(_M_comp(__val,\
    \ *__it)); }\n      |           ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/usr/include/c++/9/bits/predefined_ops.h:\
    \ In instantiation of \u2018bool __gnu_cxx::__ops::_Val_comp_iter<_Compare>::operator()(_Value&,\
    \ _Iterator) [with _Value = std::tuple<long int, long int>; _Iterator = __gnu_cxx::__normal_iterator<std::tuple<long\
    \ int, long int>*, std::vector<std::tuple<long int, long int> > >; _Compare =\
    \ get_row(std::vector<std::vector<long int> >, long int)::<lambda(auto:3&, auto:4&)>]\u2019\
    :\n/usr/include/c++/9/bits/stl_algo.h:1833:20:   required from \u2018void std::__unguarded_linear_insert(_RandomAccessIterator,\
    \ _Compare) [with _RandomAccessIterator = __gnu_cxx::__normal_iterator<std::tuple<long\
    \ int, long int>*, std::vector<std::tuple<long int, long int> > >; _Compare =\
    \ __gnu_cxx::__ops::_Val_comp_iter<get_row(std::vector<std::vector<long int> >,\
    \ long int)::<lambda(auto:3&, auto:4&)> >]\u2019\n/usr/include/c++/9/bits/stl_algo.h:1860:36:\
    \   required from \u2018void std::__insertion_sort(_RandomAccessIterator, _RandomAccessIterator,\
    \ _Compare) [with _RandomAccessIterator = __gnu_cxx::__normal_iterator<std::tuple<long\
    \ int, long int>*, std::vector<std::tuple<long int, long int> > >; _Compare =\
    \ __gnu_cxx::__ops::_Iter_comp_iter<get_row(std::vector<std::vector<long int>\
    \ >, long int)::<lambda(auto:3&, auto:4&)> >]\u2019\n/usr/include/c++/9/bits/stl_algo.h:1890:25:\
    \   required from \u2018void std::__final_insertion_sort(_RandomAccessIterator,\
    \ _RandomAccessIterator, _Compare) [with _RandomAccessIterator = __gnu_cxx::__normal_iterator<std::tuple<long\
    \ int, long int>*, std::vector<std::tuple<long int, long int> > >; _Compare =\
    \ __gnu_cxx::__ops::_Iter_comp_iter<get_row(std::vector<std::vector<long int>\
    \ >, long int)::<lambda(auto:3&, auto:4&)> >]\u2019\n/usr/include/c++/9/bits/stl_algo.h:1976:31:\
    \   required from \u2018void std::__sort(_RandomAccessIterator, _RandomAccessIterator,\
    \ _Compare) [with _RandomAccessIterator = __gnu_cxx::__normal_iterator<std::tuple<long\
    \ int, long int>*, std::vector<std::tuple<long int, long int> > >; _Compare =\
    \ __gnu_cxx::__ops::_Iter_comp_iter<get_row(std::vector<std::vector<long int>\
    \ >, long int)::<lambda(auto:3&, auto:4&)> >]\u2019\n/usr/include/c++/9/bits/stl_algo.h:4905:18:\
    \   required from \u2018void std::sort(_RAIter, _RAIter, _Compare) [with _RAIter\
    \ = __gnu_cxx::__normal_iterator<std::tuple<long int, long int>*, std::vector<std::tuple<long\
    \ int, long int> > >; _Compare = get_row(std::vector<std::vector<long int> >,\
    \ long int)::<lambda(auto:3&, auto:4&)>]\u2019\n/tmp/tmpxu7t9bq6.cpp:53:83:  \
    \ required from here\n/usr/include/c++/9/bits/predefined_ops.h:215:11: error:\
    \ void value not ignored as it ought to be\n/usr/include/c++/9/bits/predefined_ops.h:\
    \ In instantiation of \u2018bool __gnu_cxx::__ops::_Iter_comp_val<_Compare>::operator()(_Iterator,\
    \ _Value&) [with _Iterator = __gnu_cxx::__normal_iterator<std::tuple<long int,\
    \ long int>*, std::vector<std::tuple<long int, long int> > >; _Value = std::tuple<long\
    \ int, long int>; _Compare = get_row(std::vector<std::vector<long int> >, long\
    \ int)::<lambda(auto:1&, auto:2&)>]\u2019:\n/usr/include/c++/9/bits/stl_heap.h:133:48:\
    \   required from \u2018void std::__push_heap(_RandomAccessIterator, _Distance,\
    \ _Distance, _Tp, _Compare&) [with _RandomAccessIterator = __gnu_cxx::__normal_iterator<std::tuple<long\
    \ int, long int>*, std::vector<std::tuple<long int, long int> > >; _Distance =\
    \ long int; _Tp = std::tuple<long int, long int>; _Compare = __gnu_cxx::__ops::_Iter_comp_val<get_row(std::vector<std::vector<long\
    \ int> >, long int)::<lambda(auto:1&, auto:2&)> >]\u2019\n/usr/include/c++/9/bits/stl_heap.h:237:23:\
    \   required from \u2018void std::__adjust_heap(_RandomAccessIterator, _Distance,\
    \ _Distance, _Tp, _Compare) [with _RandomAccessIterator = __gnu_cxx::__normal_iterator<std::tuple<long\
    \ int, long int>*, std::vector<std::tuple<long int, long int> > >; _Distance =\
    \ long int; _Tp = std::tuple<long int, long int>; _Compare = __gnu_cxx::__ops::_Iter_comp_iter<get_row(std::vector<std::vector<long\
    \ int> >, long int)::<lambda(auto:1&, auto:2&)> >]\u2019\n/usr/include/c++/9/bits/stl_heap.h:342:22:\
    \   required from \u2018void std::__make_heap(_RandomAccessIterator, _RandomAccessIterator,\
    \ _Compare&) [with _RandomAccessIterator = __gnu_cxx::__normal_iterator<std::tuple<long\
    \ int, long int>*, std::vector<std::tuple<long int, long int> > >; _Compare =\
    \ __gnu_cxx::__ops::_Iter_comp_iter<get_row(std::vector<std::vector<long int>\
    \ >, long int)::<lambda(auto:1&, auto:2&)> >]\u2019\n/usr/include/c++/9/bits/stl_algo.h:1677:23:\
    \   required from \u2018void std::__heap_select(_RandomAccessIterator, _RandomAccessIterator,\
    \ _RandomAccessIterator, _Compare) [with _RandomAccessIterator = __gnu_cxx::__normal_iterator<std::tuple<long\
    \ int, long int>*, std::vector<std::tuple<long int, long int> > >; _Compare =\
    \ __gnu_cxx::__ops::_Iter_comp_iter<get_row(std::vector<std::vector<long int>\
    \ >, long int)::<lambda(auto:1&, auto:2&)> >]\u2019\n/usr/include/c++/9/bits/stl_algo.h:1938:25:\
    \   required from \u2018void std::__partial_sort(_RandomAccessIterator, _RandomAccessIterator,\
    \ _RandomAccessIterator, _Compare) [with _RandomAccessIterator = __gnu_cxx::__normal_iterator<std::tuple<long\
    \ int, long int>*, std::vector<std::tuple<long int, long int> > >; _Compare =\
    \ __gnu_cxx::__ops::_Iter_comp_iter<get_row(std::vector<std::vector<long int>\
    \ >, long int)::<lambda(auto:1&, auto:2&)> >]\u2019\n/usr/include/c++/9/bits/stl_algo.h:1953:27:\
    \   required from \u2018void std::__introsort_loop(_RandomAccessIterator, _RandomAccessIterator,\
    \ _Size, _Compare) [with _RandomAccessIterator = __gnu_cxx::__normal_iterator<std::tuple<long\
    \ int, long int>*, std::vector<std::tuple<long int, long int> > >; _Size = long\
    \ int; _Compare = __gnu_cxx::__ops::_Iter_comp_iter<get_row(std::vector<std::vector<long\
    \ int> >, long int)::<lambda(auto:1&, auto:2&)> >]\u2019\n/usr/include/c++/9/bits/stl_algo.h:1973:25:\
    \   required from \u2018void std::__sort(_RandomAccessIterator, _RandomAccessIterator,\
    \ _Compare) [with _RandomAccessIterator = __gnu_cxx::__normal_iterator<std::tuple<long\
    \ int, long int>*, std::vector<std::tuple<long int, long int> > >; _Compare =\
    \ __gnu_cxx::__ops::_Iter_comp_iter<get_row(std::vector<std::vector<long int>\
    \ >, long int)::<lambda(auto:1&, auto:2&)> >]\u2019\n/usr/include/c++/9/bits/stl_algo.h:4905:18:\
    \   required from \u2018void std::sort(_RAIter, _RAIter, _Compare) [with _RAIter\
    \ = __gnu_cxx::__normal_iterator<std::tuple<long int, long int>*, std::vector<std::tuple<long\
    \ int, long int> > >; _Compare = get_row(std::vector<std::vector<long int> >,\
    \ long int)::<lambda(auto:1&, auto:2&)>]\u2019\n/tmp/tmpxu7t9bq6.cpp:52:83:  \
    \ required from here\n/usr/include/c++/9/bits/predefined_ops.h:177:11: error:\
    \ void value not ignored as it ought to be\n  177 |  { return bool(_M_comp(*__it,\
    \ __val)); }\n      |           ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/usr/include/c++/9/bits/predefined_ops.h:\
    \ In instantiation of \u2018bool __gnu_cxx::__ops::_Iter_comp_val<_Compare>::operator()(_Iterator,\
    \ _Value&) [with _Iterator = __gnu_cxx::__normal_iterator<std::tuple<long int,\
    \ long int>*, std::vector<std::tuple<long int, long int> > >; _Value = std::tuple<long\
    \ int, long int>; _Compare = get_row(std::vector<std::vector<long int> >, long\
    \ int)::<lambda(auto:3&, auto:4&)>]\u2019:\n/usr/include/c++/9/bits/stl_heap.h:133:48:\
    \   required from \u2018void std::__push_heap(_RandomAccessIterator, _Distance,\
    \ _Distance, _Tp, _Compare&) [with _RandomAccessIterator = __gnu_cxx::__normal_iterator<std::tuple<long\
    \ int, long int>*, std::vector<std::tuple<long int, long int> > >; _Distance =\
    \ long int; _Tp = std::tuple<long int, long int>; _Compare = __gnu_cxx::__ops::_Iter_comp_val<get_row(std::vector<std::vector<long\
    \ int> >, long int)::<lambda(auto:3&, auto:4&)> >]\u2019\n/usr/include/c++/9/bits/stl_heap.h:237:23:\
    \   required from \u2018void std::__adjust_heap(_RandomAccessIterator, _Distance,\
    \ _Distance, _Tp, _Compare) [with _RandomAccessIterator = __gnu_cxx::__normal_iterator<std::tuple<long\
    \ int, long int>*, std::vector<std::tuple<long int, long int> > >; _Distance =\
    \ long int; _Tp = std::tuple<long int, long int>; _Compare = __gnu_cxx::__ops::_Iter_comp_iter<get_row(std::vector<std::vector<long\
    \ int> >, long int)::<lambda(auto:3&, auto:4&)> >]\u2019\n/usr/include/c++/9/bits/stl_heap.h:342:22:\
    \   required from \u2018void std::__make_heap(_RandomAccessIterator, _RandomAccessIterator,\
    \ _Compare&) [with _RandomAccessIterator = __gnu_cxx::__normal_iterator<std::tuple<long\
    \ int, long int>*, std::vector<std::tuple<long int, long int> > >; _Compare =\
    \ __gnu_cxx::__ops::_Iter_comp_iter<get_row(std::vector<std::vector<long int>\
    \ >, long int)::<lambda(auto:3&, auto:4&)> >]\u2019\n/usr/include/c++/9/bits/stl_algo.h:1677:23:\
    \   required from \u2018void std::__heap_select(_RandomAccessIterator, _RandomAccessIterator,\
    \ _RandomAccessIterator, _Compare) [with _RandomAccessIterator = __gnu_cxx::__normal_iterator<std::tuple<long\
    \ int, long int>*, std::vector<std::tuple<long int, long int> > >; _Compare =\
    \ __gnu_cxx::__ops::_Iter_comp_iter<get_row(std::vector<std::vector<long int>\
    \ >, long int)::<lambda(auto:3&, auto:4&)> >]\u2019\n/usr/include/c++/9/bits/stl_algo.h:1938:25:\
    \   required from \u2018void std::__partial_sort(_RandomAccessIterator, _RandomAccessIterator,\
    \ _RandomAccessIterator, _Compare) [with _RandomAccessIterator = __gnu_cxx::__normal_iterator<std::tuple<long\
    \ int, long int>*, std::vector<std::tuple<long int, long int> > >; _Compare =\
    \ __gnu_cxx::__ops::_Iter_comp_iter<get_row(std::vector<std::vector<long int>\
    \ >, long int)::<lambda(auto:3&, auto:4&)> >]\u2019\n/usr/include/c++/9/bits/stl_algo.h:1953:27:\
    \   required from \u2018void std::__introsort_loop(_RandomAccessIterator, _RandomAccessIterator,\
    \ _Size, _Compare) [with _RandomAccessIterator = __gnu_cxx::__normal_iterator<std::tuple<long\
    \ int, long int>*, std::vector<std::tuple<long int, long int> > >; _Size = long\
    \ int; _Compare = __gnu_cxx::__ops::_Iter_comp_iter<get_row(std::vector<std::vector<long\
    \ int> >, long int)::<lambda(auto:3&, auto:4&)> >]\u2019\n/usr/include/c++/9/bits/stl_algo.h:1973:25:\
    \   required from \u2018void std::__sort(_RandomAccessIterator, _RandomAccessIterator,\
    \ _Compare) [with _RandomAccessIterator = __gnu_cxx::__normal_iterator<std::tuple<long\
    \ int, long int>*, std::vector<std::tuple<long int, long int> > >; _Compare =\
    \ __gnu_cxx::__ops::_Iter_comp_iter<get_row(std::vector<std::vector<long int>\
    \ >, long int)::<lambda(auto:3&, auto:4&)> >]\u2019\n/usr/include/c++/9/bits/stl_algo.h:4905:18:\
    \   required from \u2018void std::sort(_RAIter, _RAIter, _Compare) [with _RAIter\
    \ = __gnu_cxx::__normal_iterator<std::tuple<long int, long int>*, std::vector<std::tuple<long\
    \ int, long int> > >; _Compare = get_row(std::vector<std::vector<long int> >,\
    \ long int)::<lambda(auto:3&, auto:4&)>]\u2019\n/tmp/tmpxu7t9bq6.cpp:53:83:  \
    \ required from here\n/usr/include/c++/9/bits/predefined_ops.h:177:11: error:\
    \ void value not ignored as it ought to be\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    std::vector<std::tuple<long, long>> res;\n    res.reserve(lst.size());\n\
    \    for (auto &row : lst) {\n        std::tuple<long, long> coord;\n        coord.first\
    \ = row[0];\n        coord.second = row[lst.size() - 1];\n        res.push_back(coord);\n\
    \    }\n    std::sort(res.begin(), res.end(), [](const std::tuple<long, long>\
    \ &a, const std::tuple<long, long> &b) {\n        return std::get<0>(a) < std::get<0>(b);\n\
    \    });\n    std::sort(res.begin(), res.end(), [](const std::tuple<long, long>\
    \ &a, const std::tuple<long, long> &b) {\n        return std::get<1>(a) < std::get<1>(b);\n\
    \    });\n    for (auto &row : res) {\n        if (std::get<0>(row) == x) {\n\
    \            return res;\n        }\n    }\n    return res;\n}\nint main() {\n\
    \    auto candidate = get_row;\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpg17dm_o8.cpp: In function \u2018std::vector<std::tuple<long int,\
    \ long int> > get_row(std::vector<std::vector<long int> >, long int)\u2019:\n\
    /tmp/tmpg17dm_o8.cpp:24:15: error: \u2018class std::tuple<long int, long int>\u2019\
    \ has no member named \u2018first\u2019\n   24 |         coord.first = row[0];\n\
    \      |               ^~~~~\n/tmp/tmpg17dm_o8.cpp:25:15: error: \u2018class std::tuple<long\
    \ int, long int>\u2019 has no member named \u2018second\u2019\n   25 |       \
    \  coord.second = row[lst.size() - 1];\n      |               ^~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    std::vector<std::tuple<long, long>> res;\n    long row =\
    \ 0;\n    long col = 0;\n    for (auto &row : lst) {\n        col = std::distance(row.begin(),\
    \ std::find(row.begin(), row.end(), x));\n        res.emplace_back(std::make_tuple(row,\
    \ col));\n    }\n    std::sort(res.begin(), res.end(), [](const std::tuple<long,\
    \ long> &a, const std::tuple<long, long> &b) { return std::get<0>(a) < std::get<0>(b);\
    \ });\n    std::sort(res.begin(), res.end(), [](const std::tuple<long, long> &a,\
    \ const std::tuple<long, long> &b) { return std::get<1>(a) > std::get<1>(b); });\n\
    \    return res;\n}\nint main() {\n    auto candidate = get_row;\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "In file included from /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n\
    \                 from /usr/include/c++/9/bits/allocator.h:46,\n             \
    \    from /usr/include/c++/9/string:41,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmphew_t793.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h: In instantiation\
    \ of \u2018void __gnu_cxx::new_allocator<_Tp>::construct(_Up*, _Args&& ...) [with\
    \ _Up = std::tuple<long int, long int>; _Args = {std::tuple<std::vector<long int,\
    \ std::allocator<long int> >, long int>}; _Tp = std::tuple<long int, long int>]\u2019\
    :\n/usr/include/c++/9/bits/alloc_traits.h:483:4:   required from \u2018static\
    \ void std::allocator_traits<std::allocator<_CharT> >::construct(std::allocator_traits<std::allocator<_CharT>\
    \ >::allocator_type&, _Up*, _Args&& ...) [with _Up = std::tuple<long int, long\
    \ int>; _Args = {std::tuple<std::vector<long int, std::allocator<long int> >,\
    \ long int>}; _Tp = std::tuple<long int, long int>; std::allocator_traits<std::allocator<_CharT>\
    \ >::allocator_type = std::allocator<std::tuple<long int, long int> >]\u2019\n\
    /usr/include/c++/9/bits/vector.tcc:115:30:   required from \u2018void std::vector<_Tp,\
    \ _Alloc>::emplace_back(_Args&& ...) [with _Args = {std::tuple<std::vector<long\
    \ int, std::allocator<long int> >, long int>}; _Tp = std::tuple<long int, long\
    \ int>; _Alloc = std::allocator<std::tuple<long int, long int> >]\u2019\n/tmp/tmphew_t793.cpp:25:51:\
    \   required from here\n/usr/include/c++/9/ext/new_allocator.h:146:4: error: no\
    \ matching function for call to \u2018std::tuple<long int, long int>::tuple(std::tuple<std::vector<long\
    \ int, std::allocator<long int> >, long int>)\u2019\n  146 |  { ::new((void *)__p)\
    \ _Up(std::forward<_Args>(__args)...); }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    In file included from /usr/include/c++/9/functional:54,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n                 from\
    \ /tmp/tmphew_t793.cpp:2:\n/usr/include/c++/9/tuple:1199:18: note: candidate:\
    \ \u2018template<class _Alloc, class _U1, class _U2, typename std::enable_if<(_MoveConstructibleTuple<_U1,\
    \ _U2>() && (! _ImplicitlyMoveConvertibleTuple<_U1, _U2>())), bool>::type <anonymous>\
    \ > std::tuple<_T1, _T2>::tuple(std::allocator_arg_t, const _Alloc&, std::pair<_U1,\
    \ _U2>&&)\u2019\n 1199 |         explicit tuple(allocator_arg_t __tag, const _Alloc&\
    \ __a,\n      |                  ^~~~~\n/usr/include/c++/9/tuple:1199:18: note:\
    \   template argument deduction/substitution failed:\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n\
    \                 from /usr/include/c++/9/bits/allocator.h:46,\n             \
    \    from /usr/include/c++/9/string:41,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmphew_t793.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4: note:\
    \   candidate expects 3 arguments, 1 provided\n  146 |  { ::new((void *)__p) _Up(std::forward<_Args>(__args)...);\
    \ }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nIn file\
    \ included from /usr/include/c++/9/functional:54,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmphew_t793.cpp:2:\n/usr/include/c++/9/tuple:1189:9:\
    \ note: candidate: \u2018template<class _Alloc, class _U1, class _U2, typename\
    \ std::enable_if<(_MoveConstructibleTuple<_U1, _U2>() && _ImplicitlyMoveConvertibleTuple<_U1,\
    \ _U2>()), bool>::type <anonymous> > std::tuple<_T1, _T2>::tuple(std::allocator_arg_t,\
    \ const _Alloc&, std::pair<_U1, _U2>&&)\u2019\n 1189 |         tuple(allocator_arg_t\
    \ __tag, const _Alloc& __a, pair<_U1, _U2>&& __in)\n      |         ^~~~~\n/usr/include/c++/9/tuple:1189:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n              \
    \   from /usr/include/c++/9/bits/allocator.h:46,\n                 from /usr/include/c++/9/string:41,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmphew_t793.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4:\
    \ note:   candidate expects 3 arguments, 1 provided\n  146 |  { ::new((void *)__p)\
    \ _Up(std::forward<_Args>(__args)...); }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    In file included from /usr/include/c++/9/functional:54,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n                 from\
    \ /tmp/tmphew_t793.cpp:2:\n/usr/include/c++/9/tuple:1179:18: note: candidate:\
    \ \u2018template<class _Alloc, class _U1, class _U2, typename std::enable_if<(_ConstructibleTuple<_U1,\
    \ _U2>() && (! _ImplicitlyConvertibleTuple<_U1, _U2>())), bool>::type <anonymous>\
    \ > std::tuple<_T1, _T2>::tuple(std::allocator_arg_t, const _Alloc&, const std::pair<_U1,\
    \ _U2>&)\u2019\n 1179 |         explicit tuple(allocator_arg_t __tag, const _Alloc&\
    \ __a,\n      |                  ^~~~~\n/usr/include/c++/9/tuple:1179:18: note:\
    \   template argument deduction/substitution failed:\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n\
    \                 from /usr/include/c++/9/bits/allocator.h:46,\n             \
    \    from /usr/include/c++/9/string:41,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmphew_t793.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4: note:\
    \   candidate expects 3 arguments, 1 provided\n  146 |  { ::new((void *)__p) _Up(std::forward<_Args>(__args)...);\
    \ }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nIn file\
    \ included from /usr/include/c++/9/functional:54,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmphew_t793.cpp:2:\n/usr/include/c++/9/tuple:1169:9:\
    \ note: candidate: \u2018template<class _Alloc, class _U1, class _U2, typename\
    \ std::enable_if<(_ConstructibleTuple<_U1, _U2>() && _ImplicitlyConvertibleTuple<_U1,\
    \ _U2>()), bool>::type <anonymous> > std::tuple<_T1, _T2>::tuple(std::allocator_arg_t,\
    \ const _Alloc&, const std::pair<_U1, _U2>&)\u2019\n 1169 |         tuple(allocator_arg_t\
    \ __tag, const _Alloc& __a,\n      |         ^~~~~\n/usr/include/c++/9/tuple:1169:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n              \
    \   from /usr/include/c++/9/bits/allocator.h:46,\n                 from /usr/include/c++/9/string:41,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmphew_t793.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4:\
    \ note:   candidate expects 3 arguments, 1 provided\n  146 |  { ::new((void *)__p)\
    \ _Up(std::forward<_Args>(__args)...); }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    In file included from /usr/include/c++/9/functional:54,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n                 from\
    \ /tmp/tmphew_t793.cpp:2:\n/usr/include/c++/9/tuple:1158:11: note: candidate:\
    \ \u2018template<class _Alloc, class _U1, class _U2, typename std::enable_if<(_MoveConstructibleTuple<_U1,\
    \ _U2>() && (! _ImplicitlyMoveConvertibleTuple<_U1, _U2>())), bool>::type <anonymous>\
    \ > std::tuple<_T1, _T2>::tuple(std::allocator_arg_t, const _Alloc&, std::tuple<_U1,\
    \ _U2>&&)\u2019\n 1158 |  explicit tuple(allocator_arg_t __tag, const _Alloc&\
    \ __a,\n      |           ^~~~~\n/usr/include/c++/9/tuple:1158:11: note:   template\
    \ argument deduction/substitution failed:\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n\
    \                 from /usr/include/c++/9/bits/allocator.h:46,\n             \
    \    from /usr/include/c++/9/string:41,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmphew_t793.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4: note:\
    \   candidate expects 3 arguments, 1 provided\n  146 |  { ::new((void *)__p) _Up(std::forward<_Args>(__args)...);\
    \ }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nIn file\
    \ included from /usr/include/c++/9/functional:54,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmphew_t793.cpp:2:\n/usr/include/c++/9/tuple:1148:2:\
    \ note: candidate: \u2018template<class _Alloc, class _U1, class _U2, typename\
    \ std::enable_if<(_MoveConstructibleTuple<_U1, _U2>() && _ImplicitlyMoveConvertibleTuple<_U1,\
    \ _U2>()), bool>::type <anonymous> > std::tuple<_T1, _T2>::tuple(std::allocator_arg_t,\
    \ const _Alloc&, std::tuple<_U1, _U2>&&)\u2019\n 1148 |  tuple(allocator_arg_t\
    \ __tag, const _Alloc& __a, tuple<_U1, _U2>&& __in)\n      |  ^~~~~\n/usr/include/c++/9/tuple:1148:2:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n              \
    \   from /usr/include/c++/9/bits/allocator.h:46,\n                 from /usr/include/c++/9/string:41,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmphew_t793.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4:\
    \ note:   candidate expects 3 arguments, 1 provided\n  146 |  { ::new((void *)__p)\
    \ _Up(std::forward<_Args>(__args)...); }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    In file included from /usr/include/c++/9/functional:54,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n                 from\
    \ /tmp/tmphew_t793.cpp:2:\n/usr/include/c++/9/tuple:1136:11: note: candidate:\
    \ \u2018template<class _Alloc, class _U1, class _U2, typename std::enable_if<(_ConstructibleTuple<_U1,\
    \ _U2>() && (! _ImplicitlyConvertibleTuple<_U1, _U2>())), bool>::type <anonymous>\
    \ > std::tuple<_T1, _T2>::tuple(std::allocator_arg_t, const _Alloc&, const std::tuple<_U1,\
    \ _U2>&)\u2019\n 1136 |  explicit tuple(allocator_arg_t __tag, const _Alloc& __a,\n\
    \      |           ^~~~~\n/usr/include/c++/9/tuple:1136:11: note:   template argument\
    \ deduction/substitution failed:\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n\
    \                 from /usr/include/c++/9/bits/allocator.h:46,\n             \
    \    from /usr/include/c++/9/string:41,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmphew_t793.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4: note:\
    \   candidate expects 3 arguments, 1 provided\n  146 |  { ::new((void *)__p) _Up(std::forward<_Args>(__args)...);\
    \ }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nIn file\
    \ included from /usr/include/c++/9/functional:54,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmphew_t793.cpp:2:\n/usr/include/c++/9/tuple:1124:2:\
    \ note: candidate: \u2018template<class _Alloc, class _U1, class _U2, typename\
    \ std::enable_if<(_ConstructibleTuple<_U1, _U2>() && _ImplicitlyConvertibleTuple<_U1,\
    \ _U2>()), bool>::type <anonymous> > std::tuple<_T1, _T2>::tuple(std::allocator_arg_t,\
    \ const _Alloc&, const std::tuple<_U1, _U2>&)\u2019\n 1124 |  tuple(allocator_arg_t\
    \ __tag, const _Alloc& __a,\n      |  ^~~~~\n/usr/include/c++/9/tuple:1124:2:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n              \
    \   from /usr/include/c++/9/bits/allocator.h:46,\n                 from /usr/include/c++/9/string:41,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmphew_t793.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4:\
    \ note:   candidate expects 3 arguments, 1 provided\n  146 |  { ::new((void *)__p)\
    \ _Up(std::forward<_Args>(__args)...); }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    In file included from /usr/include/c++/9/functional:54,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n                 from\
    \ /tmp/tmphew_t793.cpp:2:\n/usr/include/c++/9/tuple:1115:2: note: candidate: \u2018\
    template<class _Alloc> std::tuple<_T1, _T2>::tuple(std::allocator_arg_t, const\
    \ _Alloc&, std::tuple<_T1, _T2>&&)\u2019\n 1115 |  tuple(allocator_arg_t __tag,\
    \ const _Alloc& __a, tuple&& __in)\n      |  ^~~~~\n/usr/include/c++/9/tuple:1115:2:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n              \
    \   from /usr/include/c++/9/bits/allocator.h:46,\n                 from /usr/include/c++/9/string:41,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmphew_t793.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4:\
    \ note:   candidate expects 3 arguments, 1 provided\n  146 |  { ::new((void *)__p)\
    \ _Up(std::forward<_Args>(__args)...); }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    In file included from /usr/include/c++/9/functional:54,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n                 from\
    \ /tmp/tmphew_t793.cpp:2:\n/usr/include/c++/9/tuple:1111:2: note: candidate: \u2018\
    template<class _Alloc> std::tuple<_T1, _T2>::tuple(std::allocator_arg_t, const\
    \ _Alloc&, const std::tuple<_T1, _T2>&)\u2019\n 1111 |  tuple(allocator_arg_t\
    \ __tag, const _Alloc& __a, const tuple& __in)\n      |  ^~~~~\n/usr/include/c++/9/tuple:1111:2:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n              \
    \   from /usr/include/c++/9/bits/allocator.h:46,\n                 from /usr/include/c++/9/string:41,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmphew_t793.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4:\
    \ note:   candidate expects 3 arguments, 1 provided\n  146 |  { ::new((void *)__p)\
    \ _Up(std::forward<_Args>(__args)...); }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    In file included from /usr/include/c++/9/functional:54,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n                 from\
    \ /tmp/tmphew_t793.cpp:2:\n/usr/include/c++/9/tuple:1105:11: note: candidate:\
    \ \u2018template<class _Alloc, class _U1, class _U2, typename std::enable_if<(_MoveConstructibleTuple<_U1,\
    \ _U2>() && (! _ImplicitlyMoveConvertibleTuple<_U1, _U2>())), bool>::type <anonymous>\
    \ > std::tuple<_T1, _T2>::tuple(std::allocator_arg_t, const _Alloc&, _U1&&, _U2&&)\u2019\
    \n 1105 |  explicit tuple(allocator_arg_t __tag, const _Alloc& __a,\n      | \
    \          ^~~~~\n/usr/include/c++/9/tuple:1105:11: note:   template argument\
    \ deduction/substitution failed:\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n\
    \                 from /usr/include/c++/9/bits/allocator.h:46,\n             \
    \    from /usr/include/c++/9/string:41,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmphew_t793.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4: note:\
    \   candidate expects 4 arguments, 1 provided\n  146 |  { ::new((void *)__p) _Up(std::forward<_Args>(__args)...);\
    \ }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nIn file\
    \ included from /usr/include/c++/9/functional:54,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmphew_t793.cpp:2:\n/usr/include/c++/9/tuple:1095:2:\
    \ note: candidate: \u2018template<class _Alloc, class _U1, class _U2, typename\
    \ std::enable_if<(_MoveConstructibleTuple<_U1, _U2>() && _ImplicitlyMoveConvertibleTuple<_U1,\
    \ _U2>()), bool>::type <anonymous> > std::tuple<_T1, _T2>::tuple(std::allocator_arg_t,\
    \ const _Alloc&, _U1&&, _U2&&)\u2019\n 1095 |  tuple(allocator_arg_t __tag, const\
    \ _Alloc& __a, _U1&& __a1, _U2&& __a2)\n      |  ^~~~~\n/usr/include/c++/9/tuple:1095:2:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n              \
    \   from /usr/include/c++/9/bits/allocator.h:46,\n                 from /usr/include/c++/9/string:41,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmphew_t793.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4:\
    \ note:   candidate expects 4 arguments, 1 provided\n  146 |  { ::new((void *)__p)\
    \ _Up(std::forward<_Args>(__args)...); }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    In file included from /usr/include/c++/9/functional:54,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n                 from\
    \ /tmp/tmphew_t793.cpp:2:\n/usr/include/c++/9/tuple:1085:11: note: candidate:\
    \ \u2018template<class _Alloc, class _Dummy, typename std::enable_if<(std::_TC<std::is_same<_Dummy,\
    \ void>::value, long int, long int>::_ConstructibleTuple<long int, long int>()\
    \ && (! std::_TC<std::is_same<_Dummy, void>::value, long int, long int>::_ImplicitlyConvertibleTuple<long\
    \ int, long int>())), bool>::type <anonymous> > std::tuple<_T1, _T2>::tuple(std::allocator_arg_t,\
    \ const _Alloc&, const _T1&, const _T2&)\u2019\n 1085 |  explicit tuple(allocator_arg_t\
    \ __tag, const _Alloc& __a,\n      |           ^~~~~\n/usr/include/c++/9/tuple:1085:11:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n              \
    \   from /usr/include/c++/9/bits/allocator.h:46,\n                 from /usr/include/c++/9/string:41,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmphew_t793.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4:\
    \ note:   candidate expects 4 arguments, 1 provided\n  146 |  { ::new((void *)__p)\
    \ _Up(std::forward<_Args>(__args)...); }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    In file included from /usr/include/c++/9/functional:54,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n                 from\
    \ /tmp/tmphew_t793.cpp:2:\n/usr/include/c++/9/tuple:1073:2: note: candidate: \u2018\
    template<class _Alloc, class _Dummy, typename std::enable_if<(std::_TC<std::is_same<_Dummy,\
    \ void>::value, long int, long int>::_ConstructibleTuple<long int, long int>()\
    \ && std::_TC<std::is_same<_Dummy, void>::value, long int, long int>::_ImplicitlyConvertibleTuple<long\
    \ int, long int>()), bool>::type <anonymous> > std::tuple<_T1, _T2>::tuple(std::allocator_arg_t,\
    \ const _Alloc&, const _T1&, const _T2&)\u2019\n 1073 |  tuple(allocator_arg_t\
    \ __tag, const _Alloc& __a,\n      |  ^~~~~\n/usr/include/c++/9/tuple:1073:2:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n              \
    \   from /usr/include/c++/9/bits/allocator.h:46,\n                 from /usr/include/c++/9/string:41,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmphew_t793.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4:\
    \ note:   candidate expects 4 arguments, 1 provided\n  146 |  { ::new((void *)__p)\
    \ _Up(std::forward<_Args>(__args)...); }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    In file included from /usr/include/c++/9/functional:54,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n                 from\
    \ /tmp/tmphew_t793.cpp:2:\n/usr/include/c++/9/tuple:1062:2: note: candidate: \u2018\
    template<class _Alloc> std::tuple<_T1, _T2>::tuple(std::allocator_arg_t, const\
    \ _Alloc&)\u2019\n 1062 |  tuple(allocator_arg_t __tag, const _Alloc& __a)\n \
    \     |  ^~~~~\n/usr/include/c++/9/tuple:1062:2: note:   template argument deduction/substitution\
    \ failed:\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n\
    \                 from /usr/include/c++/9/bits/allocator.h:46,\n             \
    \    from /usr/include/c++/9/string:41,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmphew_t793.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4: note:\
    \   candidate expects 2 arguments, 1 provided\n  146 |  { ::new((void *)__p) _Up(std::forward<_Args>(__args)...);\
    \ }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nIn file\
    \ included from /usr/include/c++/9/functional:54,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmphew_t793.cpp:2:\n/usr/include/c++/9/tuple:1055:28:\
    \ note: candidate: \u2018template<class _U1, class _U2, typename std::enable_if<(_MoveConstructibleTuple<_U1,\
    \ _U2>() && (! _ImplicitlyMoveConvertibleTuple<_U1, _U2>())), bool>::type <anonymous>\
    \ > constexpr std::tuple<_T1, _T2>::tuple(std::pair<_U1, _U2>&&)\u2019\n 1055\
    \ |         explicit constexpr tuple(pair<_U1, _U2>&& __in)\n      |         \
    \                   ^~~~~\n/usr/include/c++/9/tuple:1055:28: note:   template\
    \ argument deduction/substitution failed:\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n\
    \                 from /usr/include/c++/9/bits/allocator.h:46,\n             \
    \    from /usr/include/c++/9/string:41,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmphew_t793.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4: note:\
    \   \u2018std::tuple<std::vector<long int, std::allocator<long int> >, long int>\u2019\
    \ is not derived from \u2018std::pair<_T1, _T2>\u2019\n  146 |  { ::new((void\
    \ *)__p) _Up(std::forward<_Args>(__args)...); }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    In file included from /usr/include/c++/9/functional:54,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n                 from\
    \ /tmp/tmphew_t793.cpp:2:\n/usr/include/c++/9/tuple:1045:19: note: candidate:\
    \ \u2018template<class _U1, class _U2, typename std::enable_if<(_MoveConstructibleTuple<_U1,\
    \ _U2>() && _ImplicitlyMoveConvertibleTuple<_U1, _U2>()), bool>::type <anonymous>\
    \ > constexpr std::tuple<_T1, _T2>::tuple(std::pair<_U1, _U2>&&)\u2019\n 1045\
    \ |         constexpr tuple(pair<_U1, _U2>&& __in)\n      |                  \
    \ ^~~~~\n/usr/include/c++/9/tuple:1045:19: note:   template argument deduction/substitution\
    \ failed:\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n\
    \                 from /usr/include/c++/9/bits/allocator.h:46,\n             \
    \    from /usr/include/c++/9/string:41,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmphew_t793.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4: note:\
    \   \u2018std::tuple<std::vector<long int, std::allocator<long int> >, long int>\u2019\
    \ is not derived from \u2018std::pair<_T1, _T2>\u2019\n  146 |  { ::new((void\
    \ *)__p) _Up(std::forward<_Args>(__args)...); }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    In file included from /usr/include/c++/9/functional:54,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n                 from\
    \ /tmp/tmphew_t793.cpp:2:\n/usr/include/c++/9/tuple:1036:28: note: candidate:\
    \ \u2018template<class _U1, class _U2, typename std::enable_if<(_ConstructibleTuple<_U1,\
    \ _U2>() && (! _ImplicitlyConvertibleTuple<_U1, _U2>())), bool>::type <anonymous>\
    \ > constexpr std::tuple<_T1, _T2>::tuple(const std::pair<_U1, _U2>&)\u2019\n\
    \ 1036 |         explicit constexpr tuple(const pair<_U1, _U2>& __in)\n      |\
    \                            ^~~~~\n/usr/include/c++/9/tuple:1036:28: note:  \
    \ template argument deduction/substitution failed:\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n\
    \                 from /usr/include/c++/9/bits/allocator.h:46,\n             \
    \    from /usr/include/c++/9/string:41,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmphew_t793.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4: note:\
    \   \u2018std::tuple<std::vector<long int, std::allocator<long int> >, long int>\u2019\
    \ is not derived from \u2018const std::pair<_T1, _T2>\u2019\n  146 |  { ::new((void\
    \ *)__p) _Up(std::forward<_Args>(__args)...); }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    In file included from /usr/include/c++/9/functional:54,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n                 from\
    \ /tmp/tmphew_t793.cpp:2:\n/usr/include/c++/9/tuple:1027:19: note: candidate:\
    \ \u2018template<class _U1, class _U2, typename std::enable_if<(_ConstructibleTuple<_U1,\
    \ _U2>() && _ImplicitlyConvertibleTuple<_U1, _U2>()), bool>::type <anonymous>\
    \ > constexpr std::tuple<_T1, _T2>::tuple(const std::pair<_U1, _U2>&)\u2019\n\
    \ 1027 |         constexpr tuple(const pair<_U1, _U2>& __in)\n      |        \
    \           ^~~~~\n/usr/include/c++/9/tuple:1027:19: note:   template argument\
    \ deduction/substitution failed:\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n\
    \                 from /usr/include/c++/9/bits/allocator.h:46,\n             \
    \    from /usr/include/c++/9/string:41,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmphew_t793.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4: note:\
    \   \u2018std::tuple<std::vector<long int, std::allocator<long int> >, long int>\u2019\
    \ is not derived from \u2018const std::pair<_T1, _T2>\u2019\n  146 |  { ::new((void\
    \ *)__p) _Up(std::forward<_Args>(__args)...); }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    In file included from /usr/include/c++/9/functional:54,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n                 from\
    \ /tmp/tmphew_t793.cpp:2:\n/usr/include/c++/9/tuple:1018:28: note: candidate:\
    \ \u2018template<class _U1, class _U2, typename std::enable_if<(_MoveConstructibleTuple<_U1,\
    \ _U2>() && (! _ImplicitlyMoveConvertibleTuple<_U1, _U2>())), bool>::type <anonymous>\
    \ > constexpr std::tuple<_T1, _T2>::tuple(std::tuple<_U1, _U2>&&)\u2019\n 1018\
    \ |         explicit constexpr tuple(tuple<_U1, _U2>&& __in)\n      |        \
    \                    ^~~~~\n/usr/include/c++/9/tuple:1018:28: note:   template\
    \ argument deduction/substitution failed:\n/usr/include/c++/9/tuple:1017:16: error:\
    \ no type named \u2018type\u2019 in \u2018struct std::enable_if<false, bool>\u2019\
    \n 1017 |  bool>::type = false>\n      |                ^~~~~\n/usr/include/c++/9/tuple:1009:19:\
    \ note: candidate: \u2018template<class _U1, class _U2, typename std::enable_if<(_MoveConstructibleTuple<_U1,\
    \ _U2>() && _ImplicitlyMoveConvertibleTuple<_U1, _U2>()), bool>::type <anonymous>\
    \ > constexpr std::tuple<_T1, _T2>::tuple(std::tuple<_U1, _U2>&&)\u2019\n 1009\
    \ |         constexpr tuple(tuple<_U1, _U2>&& __in)\n      |                 \
    \  ^~~~~\n/usr/include/c++/9/tuple:1009:19: note:   template argument deduction/substitution\
    \ failed:\n/usr/include/c++/9/tuple:1008:16: error: no type named \u2018type\u2019\
    \ in \u2018struct std::enable_if<false, bool>\u2019\n 1008 |  bool>::type = true>\n\
    \      |                ^~~~\n/usr/include/c++/9/tuple:1000:28: note: candidate:\
    \ \u2018template<class _U1, class _U2, typename std::enable_if<(_ConstructibleTuple<_U1,\
    \ _U2>() && (! _ImplicitlyConvertibleTuple<_U1, _U2>())), bool>::type <anonymous>\
    \ > constexpr std::tuple<_T1, _T2>::tuple(const std::tuple<_U1, _U2>&)\u2019\n\
    \ 1000 |         explicit constexpr tuple(const tuple<_U1, _U2>& __in)\n     \
    \ |                            ^~~~~\n/usr/include/c++/9/tuple:1000:28: note:\
    \   template argument deduction/substitution failed:\n/usr/include/c++/9/tuple:999:16:\
    \ error: no type named \u2018type\u2019 in \u2018struct std::enable_if<false,\
    \ bool>\u2019\n  999 |  bool>::type = false>\n      |                ^~~~~\n/usr/include/c++/9/tuple:991:19:\
    \ note: candidate: \u2018template<class _U1, class _U2, typename std::enable_if<(_ConstructibleTuple<_U1,\
    \ _U2>() && _ImplicitlyConvertibleTuple<_U1, _U2>()), bool>::type <anonymous>\
    \ > constexpr std::tuple<_T1, _T2>::tuple(const std::tuple<_U1, _U2>&)\u2019\n\
    \  991 |         constexpr tuple(const tuple<_U1, _U2>& __in)\n      |       \
    \            ^~~~~\n/usr/include/c++/9/tuple:991:19: note:   template argument\
    \ deduction/substitution failed:\n/usr/include/c++/9/tuple:990:16: error: no type\
    \ named \u2018type\u2019 in \u2018struct std::enable_if<false, bool>\u2019\n \
    \ 990 |  bool>::type = true>\n      |                ^~~~\n/usr/include/c++/9/tuple:983:17:\
    \ note: candidate: \u2018constexpr std::tuple<_T1, _T2>::tuple(std::tuple<_T1,\
    \ _T2>&&) [with _T1 = long int; _T2 = long int]\u2019\n  983 |       constexpr\
    \ tuple(tuple&&) = default;\n      |                 ^~~~~\n/usr/include/c++/9/tuple:983:23:\
    \ note:   no known conversion for argument 1 from \u2018std::tuple<std::vector<long\
    \ int, std::allocator<long int> >, long int>\u2019 to \u2018std::tuple<long int,\
    \ long int>&&\u2019\n  983 |       constexpr tuple(tuple&&) = default;\n     \
    \ |                       ^~~~~~~\n/usr/include/c++/9/tuple:981:17: note: candidate:\
    \ \u2018constexpr std::tuple<_T1, _T2>::tuple(const std::tuple<_T1, _T2>&) [with\
    \ _T1 = long int; _T2 = long int]\u2019\n  981 |       constexpr tuple(const tuple&)\
    \ = default;\n      |                 ^~~~~\n/usr/include/c++/9/tuple:981:23:\
    \ note:   no known conversion for argument 1 from \u2018std::tuple<std::vector<long\
    \ int, std::allocator<long int> >, long int>\u2019 to \u2018const std::tuple<long\
    \ int, long int>&\u2019\n  981 |       constexpr tuple(const tuple&) = default;\n\
    \      |                       ^~~~~~~~~~~~\n/usr/include/c++/9/tuple:978:28:\
    \ note: candidate: \u2018template<class _U1, class _U2, typename std::enable_if<((_MoveConstructibleTuple<_U1,\
    \ _U2>() && (! _ImplicitlyMoveConvertibleTuple<_U1, _U2>())) && (! std::is_same<typename\
    \ std::remove_cv<typename std::remove_reference<_Tp>::type>::type, std::allocator_arg_t>::value)),\
    \ bool>::type <anonymous> > constexpr std::tuple<_T1, _T2>::tuple(_U1&&, _U2&&)\u2019\
    \n  978 |         explicit constexpr tuple(_U1&& __a1, _U2&& __a2)\n      |  \
    \                          ^~~~~\n/usr/include/c++/9/tuple:978:28: note:   template\
    \ argument deduction/substitution failed:\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n\
    \                 from /usr/include/c++/9/bits/allocator.h:46,\n             \
    \    from /usr/include/c++/9/string:41,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmphew_t793.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4: note:\
    \   candidate expects 2 arguments, 1 provided\n  146 |  { ::new((void *)__p) _Up(std::forward<_Args>(__args)...);\
    \ }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nIn file\
    \ included from /usr/include/c++/9/functional:54,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmphew_t793.cpp:2:\n/usr/include/c++/9/tuple:968:19:\
    \ note: candidate: \u2018template<class _U1, class _U2, typename std::enable_if<((_MoveConstructibleTuple<_U1,\
    \ _U2>() && _ImplicitlyMoveConvertibleTuple<_U1, _U2>()) && (! std::is_same<typename\
    \ std::remove_cv<typename std::remove_reference<_Tp>::type>::type, std::allocator_arg_t>::value)),\
    \ bool>::type <anonymous> > constexpr std::tuple<_T1, _T2>::tuple(_U1&&, _U2&&)\u2019\
    \n  968 |         constexpr tuple(_U1&& __a1, _U2&& __a2)\n      |           \
    \        ^~~~~\n/usr/include/c++/9/tuple:968:19: note:   template argument deduction/substitution\
    \ failed:\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n\
    \                 from /usr/include/c++/9/bits/allocator.h:46,\n             \
    \    from /usr/include/c++/9/string:41,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmphew_t793.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4: note:\
    \   candidate expects 2 arguments, 1 provided\n  146 |  { ::new((void *)__p) _Up(std::forward<_Args>(__args)...);\
    \ }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nIn file\
    \ included from /usr/include/c++/9/functional:54,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmphew_t793.cpp:2:\n/usr/include/c++/9/tuple:954:28:\
    \ note: candidate: \u2018template<class _Dummy, typename std::enable_if<(std::_TC<std::is_same<_Dummy,\
    \ void>::value, long int, long int>::_ConstructibleTuple<long int, long int>()\
    \ && (! std::_TC<std::is_same<_Dummy, void>::value, long int, long int>::_ImplicitlyConvertibleTuple<long\
    \ int, long int>())), bool>::type <anonymous> > constexpr std::tuple<_T1, _T2>::tuple(const\
    \ _T1&, const _T2&)\u2019\n  954 |         explicit constexpr tuple(const _T1&\
    \ __a1, const _T2& __a2)\n      |                            ^~~~~\n/usr/include/c++/9/tuple:954:28:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n              \
    \   from /usr/include/c++/9/bits/allocator.h:46,\n                 from /usr/include/c++/9/string:41,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmphew_t793.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4:\
    \ note:   candidate expects 2 arguments, 1 provided\n  146 |  { ::new((void *)__p)\
    \ _Up(std::forward<_Args>(__args)...); }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    In file included from /usr/include/c++/9/functional:54,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n                 from\
    \ /tmp/tmphew_t793.cpp:2:\n/usr/include/c++/9/tuple:945:19: note: candidate: \u2018\
    template<class _Dummy, typename std::enable_if<(std::_TC<std::is_same<_Dummy,\
    \ void>::value, long int, long int>::_ConstructibleTuple<long int, long int>()\
    \ && std::_TC<std::is_same<_Dummy, void>::value, long int, long int>::_ImplicitlyConvertibleTuple<long\
    \ int, long int>()), bool>::type <anonymous> > constexpr std::tuple<_T1, _T2>::tuple(const\
    \ _T1&, const _T2&)\u2019\n  945 |         constexpr tuple(const _T1& __a1, const\
    \ _T2& __a2)\n      |                   ^~~~~\n/usr/include/c++/9/tuple:945:19:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n              \
    \   from /usr/include/c++/9/bits/allocator.h:46,\n                 from /usr/include/c++/9/string:41,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmphew_t793.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4:\
    \ note:   candidate expects 2 arguments, 1 provided\n  146 |  { ::new((void *)__p)\
    \ _Up(std::forward<_Args>(__args)...); }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    In file included from /usr/include/c++/9/functional:54,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n                 from\
    \ /tmp/tmphew_t793.cpp:2:\n/usr/include/c++/9/tuple:931:21: note: candidate: \u2018\
    template<class _U1, class _U2, typename std::enable_if<std::__and_<std::is_default_constructible<_Tp>,\
    \ std::is_default_constructible<_Dp>, std::__not_<std::__and_<std::__is_implicitly_default_constructible<_U1>,\
    \ std::__is_implicitly_default_constructible<_U2> > > >::value, bool>::type <anonymous>\
    \ > constexpr std::tuple<_T1, _T2>::tuple()\u2019\n  931 |  explicit constexpr\
    \ tuple()\n      |                     ^~~~~\n/usr/include/c++/9/tuple:931:21:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n              \
    \   from /usr/include/c++/9/bits/allocator.h:46,\n                 from /usr/include/c++/9/string:41,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmphew_t793.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4:\
    \ note:   candidate expects 0 arguments, 1 provided\n  146 |  { ::new((void *)__p)\
    \ _Up(std::forward<_Args>(__args)...); }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    In file included from /usr/include/c++/9/functional:54,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n                 from\
    \ /tmp/tmphew_t793.cpp:2:\n/usr/include/c++/9/tuple:918:12: note: candidate: \u2018\
    template<class _U1, class _U2, typename std::enable_if<std::__and_<std::__is_implicitly_default_constructible<_U1>,\
    \ std::__is_implicitly_default_constructible<_U2> >::value, bool>::type <anonymous>\
    \ > constexpr std::tuple<_T1, _T2>::tuple()\u2019\n  918 |  constexpr tuple()\n\
    \      |            ^~~~~\n/usr/include/c++/9/tuple:918:12: note:   template argument\
    \ deduction/substitution failed:\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n\
    \                 from /usr/include/c++/9/bits/allocator.h:46,\n             \
    \    from /usr/include/c++/9/string:41,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmphew_t793.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4: note:\
    \   candidate expects 0 arguments, 1 provided\n  146 |  { ::new((void *)__p) _Up(std::forward<_Args>(__args)...);\
    \ }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    std::vector<std::tuple<long, long>> res;\n    res.reserve(lst.size());\n\
    \    for (auto &row : lst) {\n        std::vector<std::tuple<long, long>> rowres;\n\
    \        rowres.reserve(row.size());\n        for (auto &el : row) {\n       \
    \     if (el == x) {\n                rowres.emplace_back(std::make_tuple(row.size()\
    \ - 1, row.size() - 1));\n            } else {\n                rowres.emplace_back(std::make_tuple(row.size()\
    \ - 1, el));\n            }\n        }\n        res.emplace_back(std::move(rowres));\n\
    \    }\n    std::sort(res.begin(), res.end(), [](const std::tuple<long, long>\
    \ &a, const std::tuple<long, long> &b) -> bool {\n        return std::get<0>(a)\
    \ < std::get<0>(b);\n    });\n    std::sort(res.begin(), res.end(), [](const std::tuple<long,\
    \ long> &a, const std::tuple<long, long> &b) -> bool {\n        return std::get<1>(a)\
    \ < std::get<1>(b);\n    });\n    return res;\n}\nint main() {\n    auto candidate\
    \ = get_row;\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "In file included from /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n\
    \                 from /usr/include/c++/9/bits/allocator.h:46,\n             \
    \    from /usr/include/c++/9/string:41,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpil13r10e.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h: In instantiation\
    \ of \u2018void __gnu_cxx::new_allocator<_Tp>::construct(_Up*, _Args&& ...) [with\
    \ _Up = std::tuple<long int, long int>; _Args = {std::vector<std::tuple<long int,\
    \ long int>, std::allocator<std::tuple<long int, long int> > >}; _Tp = std::tuple<long\
    \ int, long int>]\u2019:\n/usr/include/c++/9/bits/alloc_traits.h:483:4:   required\
    \ from \u2018static void std::allocator_traits<std::allocator<_CharT> >::construct(std::allocator_traits<std::allocator<_CharT>\
    \ >::allocator_type&, _Up*, _Args&& ...) [with _Up = std::tuple<long int, long\
    \ int>; _Args = {std::vector<std::tuple<long int, long int>, std::allocator<std::tuple<long\
    \ int, long int> > >}; _Tp = std::tuple<long int, long int>; std::allocator_traits<std::allocator<_CharT>\
    \ >::allocator_type = std::allocator<std::tuple<long int, long int> >]\u2019\n\
    /usr/include/c++/9/bits/vector.tcc:115:30:   required from \u2018void std::vector<_Tp,\
    \ _Alloc>::emplace_back(_Args&& ...) [with _Args = {std::vector<std::tuple<long\
    \ int, long int>, std::allocator<std::tuple<long int, long int> > >}; _Tp = std::tuple<long\
    \ int, long int>; _Alloc = std::allocator<std::tuple<long int, long int> >]\u2019\
    \n/tmp/tmpil13r10e.cpp:32:43:   required from here\n/usr/include/c++/9/ext/new_allocator.h:146:4:\
    \ error: no matching function for call to \u2018std::tuple<long int, long int>::tuple(std::vector<std::tuple<long\
    \ int, long int> >)\u2019\n  146 |  { ::new((void *)__p) _Up(std::forward<_Args>(__args)...);\
    \ }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nIn file\
    \ included from /usr/include/c++/9/functional:54,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmpil13r10e.cpp:2:\n/usr/include/c++/9/tuple:1199:18:\
    \ note: candidate: \u2018template<class _Alloc, class _U1, class _U2, typename\
    \ std::enable_if<(_MoveConstructibleTuple<_U1, _U2>() && (! _ImplicitlyMoveConvertibleTuple<_U1,\
    \ _U2>())), bool>::type <anonymous> > std::tuple<_T1, _T2>::tuple(std::allocator_arg_t,\
    \ const _Alloc&, std::pair<_U1, _U2>&&)\u2019\n 1199 |         explicit tuple(allocator_arg_t\
    \ __tag, const _Alloc& __a,\n      |                  ^~~~~\n/usr/include/c++/9/tuple:1199:18:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n              \
    \   from /usr/include/c++/9/bits/allocator.h:46,\n                 from /usr/include/c++/9/string:41,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpil13r10e.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4:\
    \ note:   candidate expects 3 arguments, 1 provided\n  146 |  { ::new((void *)__p)\
    \ _Up(std::forward<_Args>(__args)...); }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    In file included from /usr/include/c++/9/functional:54,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n                 from\
    \ /tmp/tmpil13r10e.cpp:2:\n/usr/include/c++/9/tuple:1189:9: note: candidate: \u2018\
    template<class _Alloc, class _U1, class _U2, typename std::enable_if<(_MoveConstructibleTuple<_U1,\
    \ _U2>() && _ImplicitlyMoveConvertibleTuple<_U1, _U2>()), bool>::type <anonymous>\
    \ > std::tuple<_T1, _T2>::tuple(std::allocator_arg_t, const _Alloc&, std::pair<_U1,\
    \ _U2>&&)\u2019\n 1189 |         tuple(allocator_arg_t __tag, const _Alloc& __a,\
    \ pair<_U1, _U2>&& __in)\n      |         ^~~~~\n/usr/include/c++/9/tuple:1189:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n              \
    \   from /usr/include/c++/9/bits/allocator.h:46,\n                 from /usr/include/c++/9/string:41,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpil13r10e.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4:\
    \ note:   candidate expects 3 arguments, 1 provided\n  146 |  { ::new((void *)__p)\
    \ _Up(std::forward<_Args>(__args)...); }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    In file included from /usr/include/c++/9/functional:54,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n                 from\
    \ /tmp/tmpil13r10e.cpp:2:\n/usr/include/c++/9/tuple:1179:18: note: candidate:\
    \ \u2018template<class _Alloc, class _U1, class _U2, typename std::enable_if<(_ConstructibleTuple<_U1,\
    \ _U2>() && (! _ImplicitlyConvertibleTuple<_U1, _U2>())), bool>::type <anonymous>\
    \ > std::tuple<_T1, _T2>::tuple(std::allocator_arg_t, const _Alloc&, const std::pair<_U1,\
    \ _U2>&)\u2019\n 1179 |         explicit tuple(allocator_arg_t __tag, const _Alloc&\
    \ __a,\n      |                  ^~~~~\n/usr/include/c++/9/tuple:1179:18: note:\
    \   template argument deduction/substitution failed:\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n\
    \                 from /usr/include/c++/9/bits/allocator.h:46,\n             \
    \    from /usr/include/c++/9/string:41,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpil13r10e.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4: note:\
    \   candidate expects 3 arguments, 1 provided\n  146 |  { ::new((void *)__p) _Up(std::forward<_Args>(__args)...);\
    \ }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nIn file\
    \ included from /usr/include/c++/9/functional:54,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmpil13r10e.cpp:2:\n/usr/include/c++/9/tuple:1169:9:\
    \ note: candidate: \u2018template<class _Alloc, class _U1, class _U2, typename\
    \ std::enable_if<(_ConstructibleTuple<_U1, _U2>() && _ImplicitlyConvertibleTuple<_U1,\
    \ _U2>()), bool>::type <anonymous> > std::tuple<_T1, _T2>::tuple(std::allocator_arg_t,\
    \ const _Alloc&, const std::pair<_U1, _U2>&)\u2019\n 1169 |         tuple(allocator_arg_t\
    \ __tag, const _Alloc& __a,\n      |         ^~~~~\n/usr/include/c++/9/tuple:1169:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n              \
    \   from /usr/include/c++/9/bits/allocator.h:46,\n                 from /usr/include/c++/9/string:41,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpil13r10e.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4:\
    \ note:   candidate expects 3 arguments, 1 provided\n  146 |  { ::new((void *)__p)\
    \ _Up(std::forward<_Args>(__args)...); }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    In file included from /usr/include/c++/9/functional:54,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n                 from\
    \ /tmp/tmpil13r10e.cpp:2:\n/usr/include/c++/9/tuple:1158:11: note: candidate:\
    \ \u2018template<class _Alloc, class _U1, class _U2, typename std::enable_if<(_MoveConstructibleTuple<_U1,\
    \ _U2>() && (! _ImplicitlyMoveConvertibleTuple<_U1, _U2>())), bool>::type <anonymous>\
    \ > std::tuple<_T1, _T2>::tuple(std::allocator_arg_t, const _Alloc&, std::tuple<_U1,\
    \ _U2>&&)\u2019\n 1158 |  explicit tuple(allocator_arg_t __tag, const _Alloc&\
    \ __a,\n      |           ^~~~~\n/usr/include/c++/9/tuple:1158:11: note:   template\
    \ argument deduction/substitution failed:\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n\
    \                 from /usr/include/c++/9/bits/allocator.h:46,\n             \
    \    from /usr/include/c++/9/string:41,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpil13r10e.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4: note:\
    \   candidate expects 3 arguments, 1 provided\n  146 |  { ::new((void *)__p) _Up(std::forward<_Args>(__args)...);\
    \ }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nIn file\
    \ included from /usr/include/c++/9/functional:54,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmpil13r10e.cpp:2:\n/usr/include/c++/9/tuple:1148:2:\
    \ note: candidate: \u2018template<class _Alloc, class _U1, class _U2, typename\
    \ std::enable_if<(_MoveConstructibleTuple<_U1, _U2>() && _ImplicitlyMoveConvertibleTuple<_U1,\
    \ _U2>()), bool>::type <anonymous> > std::tuple<_T1, _T2>::tuple(std::allocator_arg_t,\
    \ const _Alloc&, std::tuple<_U1, _U2>&&)\u2019\n 1148 |  tuple(allocator_arg_t\
    \ __tag, const _Alloc& __a, tuple<_U1, _U2>&& __in)\n      |  ^~~~~\n/usr/include/c++/9/tuple:1148:2:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n              \
    \   from /usr/include/c++/9/bits/allocator.h:46,\n                 from /usr/include/c++/9/string:41,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpil13r10e.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4:\
    \ note:   candidate expects 3 arguments, 1 provided\n  146 |  { ::new((void *)__p)\
    \ _Up(std::forward<_Args>(__args)...); }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    In file included from /usr/include/c++/9/functional:54,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n                 from\
    \ /tmp/tmpil13r10e.cpp:2:\n/usr/include/c++/9/tuple:1136:11: note: candidate:\
    \ \u2018template<class _Alloc, class _U1, class _U2, typename std::enable_if<(_ConstructibleTuple<_U1,\
    \ _U2>() && (! _ImplicitlyConvertibleTuple<_U1, _U2>())), bool>::type <anonymous>\
    \ > std::tuple<_T1, _T2>::tuple(std::allocator_arg_t, const _Alloc&, const std::tuple<_U1,\
    \ _U2>&)\u2019\n 1136 |  explicit tuple(allocator_arg_t __tag, const _Alloc& __a,\n\
    \      |           ^~~~~\n/usr/include/c++/9/tuple:1136:11: note:   template argument\
    \ deduction/substitution failed:\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n\
    \                 from /usr/include/c++/9/bits/allocator.h:46,\n             \
    \    from /usr/include/c++/9/string:41,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpil13r10e.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4: note:\
    \   candidate expects 3 arguments, 1 provided\n  146 |  { ::new((void *)__p) _Up(std::forward<_Args>(__args)...);\
    \ }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nIn file\
    \ included from /usr/include/c++/9/functional:54,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmpil13r10e.cpp:2:\n/usr/include/c++/9/tuple:1124:2:\
    \ note: candidate: \u2018template<class _Alloc, class _U1, class _U2, typename\
    \ std::enable_if<(_ConstructibleTuple<_U1, _U2>() && _ImplicitlyConvertibleTuple<_U1,\
    \ _U2>()), bool>::type <anonymous> > std::tuple<_T1, _T2>::tuple(std::allocator_arg_t,\
    \ const _Alloc&, const std::tuple<_U1, _U2>&)\u2019\n 1124 |  tuple(allocator_arg_t\
    \ __tag, const _Alloc& __a,\n      |  ^~~~~\n/usr/include/c++/9/tuple:1124:2:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n              \
    \   from /usr/include/c++/9/bits/allocator.h:46,\n                 from /usr/include/c++/9/string:41,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpil13r10e.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4:\
    \ note:   candidate expects 3 arguments, 1 provided\n  146 |  { ::new((void *)__p)\
    \ _Up(std::forward<_Args>(__args)...); }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    In file included from /usr/include/c++/9/functional:54,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n                 from\
    \ /tmp/tmpil13r10e.cpp:2:\n/usr/include/c++/9/tuple:1115:2: note: candidate: \u2018\
    template<class _Alloc> std::tuple<_T1, _T2>::tuple(std::allocator_arg_t, const\
    \ _Alloc&, std::tuple<_T1, _T2>&&)\u2019\n 1115 |  tuple(allocator_arg_t __tag,\
    \ const _Alloc& __a, tuple&& __in)\n      |  ^~~~~\n/usr/include/c++/9/tuple:1115:2:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n              \
    \   from /usr/include/c++/9/bits/allocator.h:46,\n                 from /usr/include/c++/9/string:41,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpil13r10e.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4:\
    \ note:   candidate expects 3 arguments, 1 provided\n  146 |  { ::new((void *)__p)\
    \ _Up(std::forward<_Args>(__args)...); }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    In file included from /usr/include/c++/9/functional:54,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n                 from\
    \ /tmp/tmpil13r10e.cpp:2:\n/usr/include/c++/9/tuple:1111:2: note: candidate: \u2018\
    template<class _Alloc> std::tuple<_T1, _T2>::tuple(std::allocator_arg_t, const\
    \ _Alloc&, const std::tuple<_T1, _T2>&)\u2019\n 1111 |  tuple(allocator_arg_t\
    \ __tag, const _Alloc& __a, const tuple& __in)\n      |  ^~~~~\n/usr/include/c++/9/tuple:1111:2:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n              \
    \   from /usr/include/c++/9/bits/allocator.h:46,\n                 from /usr/include/c++/9/string:41,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpil13r10e.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4:\
    \ note:   candidate expects 3 arguments, 1 provided\n  146 |  { ::new((void *)__p)\
    \ _Up(std::forward<_Args>(__args)...); }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    In file included from /usr/include/c++/9/functional:54,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n                 from\
    \ /tmp/tmpil13r10e.cpp:2:\n/usr/include/c++/9/tuple:1105:11: note: candidate:\
    \ \u2018template<class _Alloc, class _U1, class _U2, typename std::enable_if<(_MoveConstructibleTuple<_U1,\
    \ _U2>() && (! _ImplicitlyMoveConvertibleTuple<_U1, _U2>())), bool>::type <anonymous>\
    \ > std::tuple<_T1, _T2>::tuple(std::allocator_arg_t, const _Alloc&, _U1&&, _U2&&)\u2019\
    \n 1105 |  explicit tuple(allocator_arg_t __tag, const _Alloc& __a,\n      | \
    \          ^~~~~\n/usr/include/c++/9/tuple:1105:11: note:   template argument\
    \ deduction/substitution failed:\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n\
    \                 from /usr/include/c++/9/bits/allocator.h:46,\n             \
    \    from /usr/include/c++/9/string:41,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpil13r10e.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4: note:\
    \   candidate expects 4 arguments, 1 provided\n  146 |  { ::new((void *)__p) _Up(std::forward<_Args>(__args)...);\
    \ }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nIn file\
    \ included from /usr/include/c++/9/functional:54,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmpil13r10e.cpp:2:\n/usr/include/c++/9/tuple:1095:2:\
    \ note: candidate: \u2018template<class _Alloc, class _U1, class _U2, typename\
    \ std::enable_if<(_MoveConstructibleTuple<_U1, _U2>() && _ImplicitlyMoveConvertibleTuple<_U1,\
    \ _U2>()), bool>::type <anonymous> > std::tuple<_T1, _T2>::tuple(std::allocator_arg_t,\
    \ const _Alloc&, _U1&&, _U2&&)\u2019\n 1095 |  tuple(allocator_arg_t __tag, const\
    \ _Alloc& __a, _U1&& __a1, _U2&& __a2)\n      |  ^~~~~\n/usr/include/c++/9/tuple:1095:2:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n              \
    \   from /usr/include/c++/9/bits/allocator.h:46,\n                 from /usr/include/c++/9/string:41,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpil13r10e.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4:\
    \ note:   candidate expects 4 arguments, 1 provided\n  146 |  { ::new((void *)__p)\
    \ _Up(std::forward<_Args>(__args)...); }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    In file included from /usr/include/c++/9/functional:54,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n                 from\
    \ /tmp/tmpil13r10e.cpp:2:\n/usr/include/c++/9/tuple:1085:11: note: candidate:\
    \ \u2018template<class _Alloc, class _Dummy, typename std::enable_if<(std::_TC<std::is_same<_Dummy,\
    \ void>::value, long int, long int>::_ConstructibleTuple<long int, long int>()\
    \ && (! std::_TC<std::is_same<_Dummy, void>::value, long int, long int>::_ImplicitlyConvertibleTuple<long\
    \ int, long int>())), bool>::type <anonymous> > std::tuple<_T1, _T2>::tuple(std::allocator_arg_t,\
    \ const _Alloc&, const _T1&, const _T2&)\u2019\n 1085 |  explicit tuple(allocator_arg_t\
    \ __tag, const _Alloc& __a,\n      |           ^~~~~\n/usr/include/c++/9/tuple:1085:11:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n              \
    \   from /usr/include/c++/9/bits/allocator.h:46,\n                 from /usr/include/c++/9/string:41,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpil13r10e.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4:\
    \ note:   candidate expects 4 arguments, 1 provided\n  146 |  { ::new((void *)__p)\
    \ _Up(std::forward<_Args>(__args)...); }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    In file included from /usr/include/c++/9/functional:54,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n                 from\
    \ /tmp/tmpil13r10e.cpp:2:\n/usr/include/c++/9/tuple:1073:2: note: candidate: \u2018\
    template<class _Alloc, class _Dummy, typename std::enable_if<(std::_TC<std::is_same<_Dummy,\
    \ void>::value, long int, long int>::_ConstructibleTuple<long int, long int>()\
    \ && std::_TC<std::is_same<_Dummy, void>::value, long int, long int>::_ImplicitlyConvertibleTuple<long\
    \ int, long int>()), bool>::type <anonymous> > std::tuple<_T1, _T2>::tuple(std::allocator_arg_t,\
    \ const _Alloc&, const _T1&, const _T2&)\u2019\n 1073 |  tuple(allocator_arg_t\
    \ __tag, const _Alloc& __a,\n      |  ^~~~~\n/usr/include/c++/9/tuple:1073:2:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n              \
    \   from /usr/include/c++/9/bits/allocator.h:46,\n                 from /usr/include/c++/9/string:41,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpil13r10e.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4:\
    \ note:   candidate expects 4 arguments, 1 provided\n  146 |  { ::new((void *)__p)\
    \ _Up(std::forward<_Args>(__args)...); }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    In file included from /usr/include/c++/9/functional:54,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n                 from\
    \ /tmp/tmpil13r10e.cpp:2:\n/usr/include/c++/9/tuple:1062:2: note: candidate: \u2018\
    template<class _Alloc> std::tuple<_T1, _T2>::tuple(std::allocator_arg_t, const\
    \ _Alloc&)\u2019\n 1062 |  tuple(allocator_arg_t __tag, const _Alloc& __a)\n \
    \     |  ^~~~~\n/usr/include/c++/9/tuple:1062:2: note:   template argument deduction/substitution\
    \ failed:\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n\
    \                 from /usr/include/c++/9/bits/allocator.h:46,\n             \
    \    from /usr/include/c++/9/string:41,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpil13r10e.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4: note:\
    \   candidate expects 2 arguments, 1 provided\n  146 |  { ::new((void *)__p) _Up(std::forward<_Args>(__args)...);\
    \ }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nIn file\
    \ included from /usr/include/c++/9/functional:54,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmpil13r10e.cpp:2:\n/usr/include/c++/9/tuple:1055:28:\
    \ note: candidate: \u2018template<class _U1, class _U2, typename std::enable_if<(_MoveConstructibleTuple<_U1,\
    \ _U2>() && (! _ImplicitlyMoveConvertibleTuple<_U1, _U2>())), bool>::type <anonymous>\
    \ > constexpr std::tuple<_T1, _T2>::tuple(std::pair<_U1, _U2>&&)\u2019\n 1055\
    \ |         explicit constexpr tuple(pair<_U1, _U2>&& __in)\n      |         \
    \                   ^~~~~\n/usr/include/c++/9/tuple:1055:28: note:   template\
    \ argument deduction/substitution failed:\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n\
    \                 from /usr/include/c++/9/bits/allocator.h:46,\n             \
    \    from /usr/include/c++/9/string:41,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpil13r10e.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4: note:\
    \   \u2018std::vector<std::tuple<long int, long int> >\u2019 is not derived from\
    \ \u2018std::pair<_T1, _T2>\u2019\n  146 |  { ::new((void *)__p) _Up(std::forward<_Args>(__args)...);\
    \ }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nIn file\
    \ included from /usr/include/c++/9/functional:54,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmpil13r10e.cpp:2:\n/usr/include/c++/9/tuple:1045:19:\
    \ note: candidate: \u2018template<class _U1, class _U2, typename std::enable_if<(_MoveConstructibleTuple<_U1,\
    \ _U2>() && _ImplicitlyMoveConvertibleTuple<_U1, _U2>()), bool>::type <anonymous>\
    \ > constexpr std::tuple<_T1, _T2>::tuple(std::pair<_U1, _U2>&&)\u2019\n 1045\
    \ |         constexpr tuple(pair<_U1, _U2>&& __in)\n      |                  \
    \ ^~~~~\n/usr/include/c++/9/tuple:1045:19: note:   template argument deduction/substitution\
    \ failed:\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n\
    \                 from /usr/include/c++/9/bits/allocator.h:46,\n             \
    \    from /usr/include/c++/9/string:41,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpil13r10e.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4: note:\
    \   \u2018std::vector<std::tuple<long int, long int> >\u2019 is not derived from\
    \ \u2018std::pair<_T1, _T2>\u2019\n  146 |  { ::new((void *)__p) _Up(std::forward<_Args>(__args)...);\
    \ }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nIn file\
    \ included from /usr/include/c++/9/functional:54,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmpil13r10e.cpp:2:\n/usr/include/c++/9/tuple:1036:28:\
    \ note: candidate: \u2018template<class _U1, class _U2, typename std::enable_if<(_ConstructibleTuple<_U1,\
    \ _U2>() && (! _ImplicitlyConvertibleTuple<_U1, _U2>())), bool>::type <anonymous>\
    \ > constexpr std::tuple<_T1, _T2>::tuple(const std::pair<_U1, _U2>&)\u2019\n\
    \ 1036 |         explicit constexpr tuple(const pair<_U1, _U2>& __in)\n      |\
    \                            ^~~~~\n/usr/include/c++/9/tuple:1036:28: note:  \
    \ template argument deduction/substitution failed:\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n\
    \                 from /usr/include/c++/9/bits/allocator.h:46,\n             \
    \    from /usr/include/c++/9/string:41,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpil13r10e.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4: note:\
    \   \u2018std::vector<std::tuple<long int, long int> >\u2019 is not derived from\
    \ \u2018const std::pair<_T1, _T2>\u2019\n  146 |  { ::new((void *)__p) _Up(std::forward<_Args>(__args)...);\
    \ }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nIn file\
    \ included from /usr/include/c++/9/functional:54,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmpil13r10e.cpp:2:\n/usr/include/c++/9/tuple:1027:19:\
    \ note: candidate: \u2018template<class _U1, class _U2, typename std::enable_if<(_ConstructibleTuple<_U1,\
    \ _U2>() && _ImplicitlyConvertibleTuple<_U1, _U2>()), bool>::type <anonymous>\
    \ > constexpr std::tuple<_T1, _T2>::tuple(const std::pair<_U1, _U2>&)\u2019\n\
    \ 1027 |         constexpr tuple(const pair<_U1, _U2>& __in)\n      |        \
    \           ^~~~~\n/usr/include/c++/9/tuple:1027:19: note:   template argument\
    \ deduction/substitution failed:\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n\
    \                 from /usr/include/c++/9/bits/allocator.h:46,\n             \
    \    from /usr/include/c++/9/string:41,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpil13r10e.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4: note:\
    \   \u2018std::vector<std::tuple<long int, long int> >\u2019 is not derived from\
    \ \u2018const std::pair<_T1, _T2>\u2019\n  146 |  { ::new((void *)__p) _Up(std::forward<_Args>(__args)...);\
    \ }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nIn file\
    \ included from /usr/include/c++/9/functional:54,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmpil13r10e.cpp:2:\n/usr/include/c++/9/tuple:1018:28:\
    \ note: candidate: \u2018template<class _U1, class _U2, typename std::enable_if<(_MoveConstructibleTuple<_U1,\
    \ _U2>() && (! _ImplicitlyMoveConvertibleTuple<_U1, _U2>())), bool>::type <anonymous>\
    \ > constexpr std::tuple<_T1, _T2>::tuple(std::tuple<_U1, _U2>&&)\u2019\n 1018\
    \ |         explicit constexpr tuple(tuple<_U1, _U2>&& __in)\n      |        \
    \                    ^~~~~\n/usr/include/c++/9/tuple:1018:28: note:   template\
    \ argument deduction/substitution failed:\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n\
    \                 from /usr/include/c++/9/bits/allocator.h:46,\n             \
    \    from /usr/include/c++/9/string:41,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpil13r10e.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4: note:\
    \   \u2018std::vector<std::tuple<long int, long int> >\u2019 is not derived from\
    \ \u2018std::tuple<_T1, _T2>\u2019\n  146 |  { ::new((void *)__p) _Up(std::forward<_Args>(__args)...);\
    \ }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nIn file\
    \ included from /usr/include/c++/9/functional:54,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmpil13r10e.cpp:2:\n/usr/include/c++/9/tuple:1009:19:\
    \ note: candidate: \u2018template<class _U1, class _U2, typename std::enable_if<(_MoveConstructibleTuple<_U1,\
    \ _U2>() && _ImplicitlyMoveConvertibleTuple<_U1, _U2>()), bool>::type <anonymous>\
    \ > constexpr std::tuple<_T1, _T2>::tuple(std::tuple<_U1, _U2>&&)\u2019\n 1009\
    \ |         constexpr tuple(tuple<_U1, _U2>&& __in)\n      |                 \
    \  ^~~~~\n/usr/include/c++/9/tuple:1009:19: note:   template argument deduction/substitution\
    \ failed:\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n\
    \                 from /usr/include/c++/9/bits/allocator.h:46,\n             \
    \    from /usr/include/c++/9/string:41,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpil13r10e.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4: note:\
    \   \u2018std::vector<std::tuple<long int, long int> >\u2019 is not derived from\
    \ \u2018std::tuple<_T1, _T2>\u2019\n  146 |  { ::new((void *)__p) _Up(std::forward<_Args>(__args)...);\
    \ }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nIn file\
    \ included from /usr/include/c++/9/functional:54,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmpil13r10e.cpp:2:\n/usr/include/c++/9/tuple:1000:28:\
    \ note: candidate: \u2018template<class _U1, class _U2, typename std::enable_if<(_ConstructibleTuple<_U1,\
    \ _U2>() && (! _ImplicitlyConvertibleTuple<_U1, _U2>())), bool>::type <anonymous>\
    \ > constexpr std::tuple<_T1, _T2>::tuple(const std::tuple<_U1, _U2>&)\u2019\n\
    \ 1000 |         explicit constexpr tuple(const tuple<_U1, _U2>& __in)\n     \
    \ |                            ^~~~~\n/usr/include/c++/9/tuple:1000:28: note:\
    \   template argument deduction/substitution failed:\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n\
    \                 from /usr/include/c++/9/bits/allocator.h:46,\n             \
    \    from /usr/include/c++/9/string:41,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpil13r10e.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4: note:\
    \   \u2018std::vector<std::tuple<long int, long int> >\u2019 is not derived from\
    \ \u2018const std::tuple<_T1, _T2>\u2019\n  146 |  { ::new((void *)__p) _Up(std::forward<_Args>(__args)...);\
    \ }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nIn file\
    \ included from /usr/include/c++/9/functional:54,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmpil13r10e.cpp:2:\n/usr/include/c++/9/tuple:991:19:\
    \ note: candidate: \u2018template<class _U1, class _U2, typename std::enable_if<(_ConstructibleTuple<_U1,\
    \ _U2>() && _ImplicitlyConvertibleTuple<_U1, _U2>()), bool>::type <anonymous>\
    \ > constexpr std::tuple<_T1, _T2>::tuple(const std::tuple<_U1, _U2>&)\u2019\n\
    \  991 |         constexpr tuple(const tuple<_U1, _U2>& __in)\n      |       \
    \            ^~~~~\n/usr/include/c++/9/tuple:991:19: note:   template argument\
    \ deduction/substitution failed:\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n\
    \                 from /usr/include/c++/9/bits/allocator.h:46,\n             \
    \    from /usr/include/c++/9/string:41,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpil13r10e.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4: note:\
    \   \u2018std::vector<std::tuple<long int, long int> >\u2019 is not derived from\
    \ \u2018const std::tuple<_T1, _T2>\u2019\n  146 |  { ::new((void *)__p) _Up(std::forward<_Args>(__args)...);\
    \ }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nIn file\
    \ included from /usr/include/c++/9/functional:54,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmpil13r10e.cpp:2:\n/usr/include/c++/9/tuple:983:17:\
    \ note: candidate: \u2018constexpr std::tuple<_T1, _T2>::tuple(std::tuple<_T1,\
    \ _T2>&&) [with _T1 = long int; _T2 = long int]\u2019\n  983 |       constexpr\
    \ tuple(tuple&&) = default;\n      |                 ^~~~~\n/usr/include/c++/9/tuple:983:23:\
    \ note:   no known conversion for argument 1 from \u2018std::vector<std::tuple<long\
    \ int, long int> >\u2019 to \u2018std::tuple<long int, long int>&&\u2019\n  983\
    \ |       constexpr tuple(tuple&&) = default;\n      |                       ^~~~~~~\n\
    /usr/include/c++/9/tuple:981:17: note: candidate: \u2018constexpr std::tuple<_T1,\
    \ _T2>::tuple(const std::tuple<_T1, _T2>&) [with _T1 = long int; _T2 = long int]\u2019\
    \n  981 |       constexpr tuple(const tuple&) = default;\n      |            \
    \     ^~~~~\n/usr/include/c++/9/tuple:981:23: note:   no known conversion for\
    \ argument 1 from \u2018std::vector<std::tuple<long int, long int> >\u2019 to\
    \ \u2018const std::tuple<long int, long int>&\u2019\n  981 |       constexpr tuple(const\
    \ tuple&) = default;\n      |                       ^~~~~~~~~~~~\n/usr/include/c++/9/tuple:978:28:\
    \ note: candidate: \u2018template<class _U1, class _U2, typename std::enable_if<((_MoveConstructibleTuple<_U1,\
    \ _U2>() && (! _ImplicitlyMoveConvertibleTuple<_U1, _U2>())) && (! std::is_same<typename\
    \ std::remove_cv<typename std::remove_reference<_Tp>::type>::type, std::allocator_arg_t>::value)),\
    \ bool>::type <anonymous> > constexpr std::tuple<_T1, _T2>::tuple(_U1&&, _U2&&)\u2019\
    \n  978 |         explicit constexpr tuple(_U1&& __a1, _U2&& __a2)\n      |  \
    \                          ^~~~~\n/usr/include/c++/9/tuple:978:28: note:   template\
    \ argument deduction/substitution failed:\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n\
    \                 from /usr/include/c++/9/bits/allocator.h:46,\n             \
    \    from /usr/include/c++/9/string:41,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpil13r10e.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4: note:\
    \   candidate expects 2 arguments, 1 provided\n  146 |  { ::new((void *)__p) _Up(std::forward<_Args>(__args)...);\
    \ }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nIn file\
    \ included from /usr/include/c++/9/functional:54,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmpil13r10e.cpp:2:\n/usr/include/c++/9/tuple:968:19:\
    \ note: candidate: \u2018template<class _U1, class _U2, typename std::enable_if<((_MoveConstructibleTuple<_U1,\
    \ _U2>() && _ImplicitlyMoveConvertibleTuple<_U1, _U2>()) && (! std::is_same<typename\
    \ std::remove_cv<typename std::remove_reference<_Tp>::type>::type, std::allocator_arg_t>::value)),\
    \ bool>::type <anonymous> > constexpr std::tuple<_T1, _T2>::tuple(_U1&&, _U2&&)\u2019\
    \n  968 |         constexpr tuple(_U1&& __a1, _U2&& __a2)\n      |           \
    \        ^~~~~\n/usr/include/c++/9/tuple:968:19: note:   template argument deduction/substitution\
    \ failed:\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n\
    \                 from /usr/include/c++/9/bits/allocator.h:46,\n             \
    \    from /usr/include/c++/9/string:41,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpil13r10e.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4: note:\
    \   candidate expects 2 arguments, 1 provided\n  146 |  { ::new((void *)__p) _Up(std::forward<_Args>(__args)...);\
    \ }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nIn file\
    \ included from /usr/include/c++/9/functional:54,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmpil13r10e.cpp:2:\n/usr/include/c++/9/tuple:954:28:\
    \ note: candidate: \u2018template<class _Dummy, typename std::enable_if<(std::_TC<std::is_same<_Dummy,\
    \ void>::value, long int, long int>::_ConstructibleTuple<long int, long int>()\
    \ && (! std::_TC<std::is_same<_Dummy, void>::value, long int, long int>::_ImplicitlyConvertibleTuple<long\
    \ int, long int>())), bool>::type <anonymous> > constexpr std::tuple<_T1, _T2>::tuple(const\
    \ _T1&, const _T2&)\u2019\n  954 |         explicit constexpr tuple(const _T1&\
    \ __a1, const _T2& __a2)\n      |                            ^~~~~\n/usr/include/c++/9/tuple:954:28:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n              \
    \   from /usr/include/c++/9/bits/allocator.h:46,\n                 from /usr/include/c++/9/string:41,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpil13r10e.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4:\
    \ note:   candidate expects 2 arguments, 1 provided\n  146 |  { ::new((void *)__p)\
    \ _Up(std::forward<_Args>(__args)...); }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    In file included from /usr/include/c++/9/functional:54,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n                 from\
    \ /tmp/tmpil13r10e.cpp:2:\n/usr/include/c++/9/tuple:945:19: note: candidate: \u2018\
    template<class _Dummy, typename std::enable_if<(std::_TC<std::is_same<_Dummy,\
    \ void>::value, long int, long int>::_ConstructibleTuple<long int, long int>()\
    \ && std::_TC<std::is_same<_Dummy, void>::value, long int, long int>::_ImplicitlyConvertibleTuple<long\
    \ int, long int>()), bool>::type <anonymous> > constexpr std::tuple<_T1, _T2>::tuple(const\
    \ _T1&, const _T2&)\u2019\n  945 |         constexpr tuple(const _T1& __a1, const\
    \ _T2& __a2)\n      |                   ^~~~~\n/usr/include/c++/9/tuple:945:19:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n              \
    \   from /usr/include/c++/9/bits/allocator.h:46,\n                 from /usr/include/c++/9/string:41,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpil13r10e.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4:\
    \ note:   candidate expects 2 arguments, 1 provided\n  146 |  { ::new((void *)__p)\
    \ _Up(std::forward<_Args>(__args)...); }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    In file included from /usr/include/c++/9/functional:54,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n                 from\
    \ /tmp/tmpil13r10e.cpp:2:\n/usr/include/c++/9/tuple:931:21: note: candidate: \u2018\
    template<class _U1, class _U2, typename std::enable_if<std::__and_<std::is_default_constructible<_Tp>,\
    \ std::is_default_constructible<_Dp>, std::__not_<std::__and_<std::__is_implicitly_default_constructible<_U1>,\
    \ std::__is_implicitly_default_constructible<_U2> > > >::value, bool>::type <anonymous>\
    \ > constexpr std::tuple<_T1, _T2>::tuple()\u2019\n  931 |  explicit constexpr\
    \ tuple()\n      |                     ^~~~~\n/usr/include/c++/9/tuple:931:21:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n              \
    \   from /usr/include/c++/9/bits/allocator.h:46,\n                 from /usr/include/c++/9/string:41,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpil13r10e.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4:\
    \ note:   candidate expects 0 arguments, 1 provided\n  146 |  { ::new((void *)__p)\
    \ _Up(std::forward<_Args>(__args)...); }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    In file included from /usr/include/c++/9/functional:54,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n                 from\
    \ /tmp/tmpil13r10e.cpp:2:\n/usr/include/c++/9/tuple:918:12: note: candidate: \u2018\
    template<class _U1, class _U2, typename std::enable_if<std::__and_<std::__is_implicitly_default_constructible<_U1>,\
    \ std::__is_implicitly_default_constructible<_U2> >::value, bool>::type <anonymous>\
    \ > constexpr std::tuple<_T1, _T2>::tuple()\u2019\n  918 |  constexpr tuple()\n\
    \      |            ^~~~~\n/usr/include/c++/9/tuple:918:12: note:   template argument\
    \ deduction/substitution failed:\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n\
    \                 from /usr/include/c++/9/bits/allocator.h:46,\n             \
    \    from /usr/include/c++/9/string:41,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpil13r10e.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:146:4: note:\
    \   candidate expects 0 arguments, 1 provided\n  146 |  { ::new((void *)__p) _Up(std::forward<_Args>(__args)...);\
    \ }\n      |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    // Write your code here\n    std::vector<std::tuple<long,\
    \ long>> res;\n    for(auto &row:lst){\n        for(auto &val:row){\n        \
    \    if(val == x){\n                res.push_back(std::make_tuple(row.size(),row.size()-1));\n\
    \            }\n        }\n    }\n    std::sort(res.begin(),res.end(),[](std::tuple<long,\
    \ long> a, std::tuple<long, long> b){\n        return std::get<0>(a) < std::get<0>(b);\n\
    \    });\n    std::sort(res.begin(),res.end(),[](std::tuple<long, long> a, std::tuple<long,\
    \ long> b){\n        return std::get<1>(a) > std::get<1>(b);\n    });\n    return\
    \ res;\n}\nint main() {\n    auto candidate = get_row;\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "tmpaxpfvid3: /tmp/tmpaxpfvid3.cpp:39: int main(): Assertion `candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    // Your code here\n    std::vector<std::tuple<long, long>>\
    \ res;\n    for(auto &row : lst){\n        for(auto &col : row){\n           \
    \ if(col == x){\n                res.push_back(std::make_tuple(row.size() - 1,\
    \ col.size() - 1));\n            }\n        }\n    }\n    std::sort(res.begin(),\
    \ res.end(), [](const std::tuple<long, long> &a, const std::tuple<long, long>\
    \ &b){\n        return std::get<0>(a) < std::get<0>(b);\n    });\n    std::sort(res.begin(),\
    \ res.end(), [](const std::tuple<long, long> &a, const std::tuple<long, long>\
    \ &b){\n        return std::get<1>(a) > std::get<1>(b);\n    });\n    return res;\n\
    }\nint main() {\n    auto candidate = get_row;\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2f32qto8.cpp: In function \u2018std::vector<std::tuple<long int,\
    \ long int> > get_row(std::vector<std::vector<long int> >, long int)\u2019:\n\
    /tmp/tmp2f32qto8.cpp:25:67: error: request for member \u2018size\u2019 in \u2018\
    col\u2019, which is of non-class type \u2018long int\u2019\n   25 |          \
    \       res.push_back(std::make_tuple(row.size() - 1, col.size() - 1));\n    \
    \  |                                                                   ^~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    std::vector<std::tuple<long, long>> res;\n    if (lst.empty())\
    \ {\n        return res;\n    }\n    std::vector<std::tuple<long, long>> row;\n\
    \    std::vector<std::tuple<long, long>> row2;\n    for (auto &i : lst) {\n  \
    \      row.push_back(i);\n    }\n    for (auto &i : row) {\n        std::sort(i.begin(),\
    \ i.end());\n    }\n    for (auto &i : row) {\n        std::sort(i.begin(), i.end(),\
    \ [](long a, long b) { return b < a; });\n    }\n    for (auto &i : row) {\n \
    \       std::reverse(i.begin(), i.end());\n    }\n    for (auto &i : row) {\n\
    \        std::sort(i.begin(), i.end(), [](long a, long b) { return b < a; });\n\
    \    }\n    for (auto &i : row) {\n        std::reverse(i.begin(), i.end());\n\
    \    }\n    for (auto &i : row) {\n        std::sort(i.begin(), i.end(), [](long\
    \ a, long b) { return b < a; });\n    }\n    for (auto &i : row) {\n        std::reverse(i.begin(),\
    \ i.end());\n    }\n    for (auto &i : row) {\n        std::sort(i.begin(), i.end(),\
    \ [](long a, long b) { return b < a; });\n    }\n    for (auto &i : row) {\n \
    \       std::reverse(i.begin(), i.end());\n    }\n    for (auto &i : row) {\n\
    \        std::sort(i.begin(), i.end(), [](long a, long b) { return b < a; });\n\
    \    }\n    for (auto &i : row) {\n        std::reverse(i.begin(), i.end());\n\
    \    }\n    for (auto &i : row) {\n        std::sort(i.begin(), i.end(), [](long\
    \ a, long b) { return b < a; });\n    }\n    for (auto &i : row) {\n        std::reverse(i.begin(),\
    \ i.end());\n    }\n    for (auto &i : row) {\n        std::sort(i.begin(), i.end(),\
    \ [](long a, long b) { return b < a; });\n    }\n    for (auto &i : row) {\n \
    \       std::reverse(i.begin(), i.end());\n    }\n    for (auto &i : row) {\n\
    \        std::sort(i.begin(), i.end(), [](long a, long b) { return b < a; });\n\
    \    }\n    for (auto &i : row) {\n        std::reverse(i.begin(), i.end());\n\
    \    }\n    for (auto &i : row) {\n        std::sort(i.begin(), i.end(), [](long\
    \ a, long b) { return b < a; });\n    }\n    for (auto &i \n}\nint main() {\n\
    \    auto candidate = get_row;\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3nn57pfl.cpp: In function \u2018std::vector<std::tuple<long int,\
    \ long int> > get_row(std::vector<std::vector<long int> >, long int)\u2019:\n\
    /tmp/tmp3nn57pfl.cpp:27:24: error: no matching function for call to \u2018std::vector<std::tuple<long\
    \ int, long int> >::push_back(std::vector<long int>&)\u2019\n   27 |         row.push_back(i);\n\
    \      |                        ^\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/queue:61,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:86,\n\
    \                 from /tmp/tmp3nn57pfl.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::tuple<long int, long int>; _Alloc = std::allocator<std::tuple<long\
    \ int, long int> >; std::vector<_Tp, _Alloc>::value_type = std::tuple<long int,\
    \ long int>]\u2019\n 1184 |       push_back(const value_type& __x)\n      |  \
    \     ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1184:35: note:   no known\
    \ conversion for argument 1 from \u2018std::vector<long int>\u2019 to \u2018const\
    \ value_type&\u2019 {aka \u2018const std::tuple<long int, long int>&\u2019}\n\
    \ 1184 |       push_back(const value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n\
    /usr/include/c++/9/bits/stl_vector.h:1200:7: note: candidate: \u2018void std::vector<_Tp,\
    \ _Alloc>::push_back(std::vector<_Tp, _Alloc>::value_type&&) [with _Tp = std::tuple<long\
    \ int, long int>; _Alloc = std::allocator<std::tuple<long int, long int> >; std::vector<_Tp,\
    \ _Alloc>::value_type = std::tuple<long int, long int>]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018std::vector<long int>\u2019\
    \ to \u2018std::vector<std::tuple<long int, long int> >::value_type&&\u2019 {aka\
    \ \u2018std::tuple<long int, long int>&&\u2019}\n 1200 |       push_back(value_type&&\
    \ __x)\n      |                 ~~~~~~~~~~~~~^~~\n/tmp/tmp3nn57pfl.cpp:30:21:\
    \ error: \u2018class std::tuple<long int, long int>\u2019 has no member named\
    \ \u2018begin\u2019\n   30 |         std::sort(i.begin(), i.end());\n      | \
    \                    ^~~~~\n/tmp/tmp3nn57pfl.cpp:30:32: error: \u2018class std::tuple<long\
    \ int, long int>\u2019 has no member named \u2018end\u2019\n   30 |         std::sort(i.begin(),\
    \ i.end());\n      |                                ^~~\n/tmp/tmp3nn57pfl.cpp:33:21:\
    \ error: \u2018class std::tuple<long int, long int>\u2019 has no member named\
    \ \u2018begin\u2019\n   33 |         std::sort(i.begin(), i.end(), [](long a,\
    \ long b) { return b < a; });\n      |                     ^~~~~\n/tmp/tmp3nn57pfl.cpp:33:32:\
    \ error: \u2018class std::tuple<long int, long int>\u2019 has no member named\
    \ \u2018end\u2019\n   33 |         std::sort(i.begin(), i.end(), [](long a, long\
    \ b) { return b < a; });\n      |                                ^~~\n/tmp/tmp3nn57pfl.cpp:36:24:\
    \ error: \u2018class std::tuple<long int, long int>\u2019 has no member named\
    \ \u2018begin\u2019\n   36 |         std::reverse(i.begin(), i.end());\n     \
    \ |                        ^~~~~\n/tmp/tmp3nn57pfl.cpp:36:35: error: \u2018class\
    \ std::tuple<long int, long int>\u2019 has no member named \u2018end\u2019\n \
    \  36 |         std::reverse(i.begin(), i.end());\n      |                   \
    \                ^~~\n/tmp/tmp3nn57pfl.cpp:39:21: error: \u2018class std::tuple<long\
    \ int, long int>\u2019 has no member named \u2018begin\u2019\n   39 |        \
    \ std::sort(i.begin(), i.end(), [](long a, long b) { return b < a; });\n     \
    \ |                     ^~~~~\n/tmp/tmp3nn57pfl.cpp:39:32: error: \u2018class\
    \ std::tuple<long int, long int>\u2019 has no member named \u2018end\u2019\n \
    \  39 |         std::sort(i.begin(), i.end(), [](long a, long b) { return b <\
    \ a; });\n      |                                ^~~\n/tmp/tmp3nn57pfl.cpp:42:24:\
    \ error: \u2018class std::tuple<long int, long int>\u2019 has no member named\
    \ \u2018begin\u2019\n   42 |         std::reverse(i.begin(), i.end());\n     \
    \ |                        ^~~~~\n/tmp/tmp3nn57pfl.cpp:42:35: error: \u2018class\
    \ std::tuple<long int, long int>\u2019 has no member named \u2018end\u2019\n \
    \  42 |         std::reverse(i.begin(), i.end());\n      |                   \
    \                ^~~\n/tmp/tmp3nn57pfl.cpp:45:21: error: \u2018class std::tuple<long\
    \ int, long int>\u2019 has no member named \u2018begin\u2019\n   45 |        \
    \ std::sort(i.begin(), i.end(), [](long a, long b) { return b < a; });\n     \
    \ |                     ^~~~~\n/tmp/tmp3nn57pfl.cpp:45:32: error: \u2018class\
    \ std::tuple<long int, long int>\u2019 has no member named \u2018end\u2019\n \
    \  45 |         std::sort(i.begin(), i.end(), [](long a, long b) { return b <\
    \ a; });\n      |                                ^~~\n/tmp/tmp3nn57pfl.cpp:48:24:\
    \ error: \u2018class std::tuple<long int, long int>\u2019 has no member named\
    \ \u2018begin\u2019\n   48 |         std::reverse(i.begin(), i.end());\n     \
    \ |                        ^~~~~\n/tmp/tmp3nn57pfl.cpp:48:35: error: \u2018class\
    \ std::tuple<long int, long int>\u2019 has no member named \u2018end\u2019\n \
    \  48 |         std::reverse(i.begin(), i.end());\n      |                   \
    \                ^~~\n/tmp/tmp3nn57pfl.cpp:51:21: error: \u2018class std::tuple<long\
    \ int, long int>\u2019 has no member named \u2018begin\u2019\n   51 |        \
    \ std::sort(i.begin(), i.end(), [](long a, long b) { return b < a; });\n     \
    \ |                     ^~~~~\n/tmp/tmp3nn57pfl.cpp:51:32: error: \u2018class\
    \ std::tuple<long int, long int>\u2019 has no member named \u2018end\u2019\n \
    \  51 |         std::sort(i.begin(), i.end(), [](long a, long b) { return b <\
    \ a; });\n      |                                ^~~\n/tmp/tmp3nn57pfl.cpp:54:24:\
    \ error: \u2018class std::tuple<long int, long int>\u2019 has no member named\
    \ \u2018begin\u2019\n   54 |         std::reverse(i.begin(), i.end());\n     \
    \ |                        ^~~~~\n/tmp/tmp3nn57pfl.cpp:54:35: error: \u2018class\
    \ std::tuple<long int, long int>\u2019 has no member named \u2018end\u2019\n \
    \  54 |         std::reverse(i.begin(), i.end());\n      |                   \
    \                ^~~\n/tmp/tmp3nn57pfl.cpp:57:21: error: \u2018class std::tuple<long\
    \ int, long int>\u2019 has no member named \u2018begin\u2019\n   57 |        \
    \ std::sort(i.begin(), i.end(), [](long a, long b) { return b < a; });\n     \
    \ |                     ^~~~~\n/tmp/tmp3nn57pfl.cpp:57:32: error: \u2018class\
    \ std::tuple<long int, long int>\u2019 has no member named \u2018end\u2019\n \
    \  57 |         std::sort(i.begin(), i.end(), [](long a, long b) { return b <\
    \ a; });\n      |                                ^~~\n/tmp/tmp3nn57pfl.cpp:60:24:\
    \ error: \u2018class std::tuple<long int, long int>\u2019 has no member named\
    \ \u2018begin\u2019\n   60 |         std::reverse(i.begin(), i.end());\n     \
    \ |                        ^~~~~\n/tmp/tmp3nn57pfl.cpp:60:35: error: \u2018class\
    \ std::tuple<long int, long int>\u2019 has no member named \u2018end\u2019\n \
    \  60 |         std::reverse(i.begin(), i.end());\n      |                   \
    \                ^~~\n/tmp/tmp3nn57pfl.cpp:63:21: error: \u2018class std::tuple<long\
    \ int, long int>\u2019 has no member named \u2018begin\u2019\n   63 |        \
    \ std::sort(i.begin(), i.end(), [](long a, long b) { return b < a; });\n     \
    \ |                     ^~~~~\n/tmp/tmp3nn57pfl.cpp:63:32: error: \u2018class\
    \ std::tuple<long int, long int>\u2019 has no member named \u2018end\u2019\n \
    \  63 |         std::sort(i.begin(), i.end(), [](long a, long b) { return b <\
    \ a; });\n      |                                ^~~\n/tmp/tmp3nn57pfl.cpp:66:24:\
    \ error: \u2018class std::tuple<long int, long int>\u2019 has no member named\
    \ \u2018begin\u2019\n   66 |         std::reverse(i.begin(), i.end());\n     \
    \ |                        ^~~~~\n/tmp/tmp3nn57pfl.cpp:66:35: error: \u2018class\
    \ std::tuple<long int, long int>\u2019 has no member named \u2018end\u2019\n \
    \  66 |         std::reverse(i.begin(), i.end());\n      |                   \
    \                ^~~\n/tmp/tmp3nn57pfl.cpp:69:21: error: \u2018class std::tuple<long\
    \ int, long int>\u2019 has no member named \u2018begin\u2019\n   69 |        \
    \ std::sort(i.begin(), i.end(), [](long a, long b) { return b < a; });\n     \
    \ |                     ^~~~~\n/tmp/tmp3nn57pfl.cpp:69:32: error: \u2018class\
    \ std::tuple<long int, long int>\u2019 has no member named \u2018end\u2019\n \
    \  69 |         std::sort(i.begin(), i.end(), [](long a, long b) { return b <\
    \ a; });\n      |                                ^~~\n/tmp/tmp3nn57pfl.cpp:72:24:\
    \ error: \u2018class std::tuple<long int, long int>\u2019 has no member named\
    \ \u2018begin\u2019\n   72 |         std::reverse(i.begin(), i.end());\n     \
    \ |                        ^~~~~\n/tmp/tmp3nn57pfl.cpp:72:35: error: \u2018class\
    \ std::tuple<long int, long int>\u2019 has no member named \u2018end\u2019\n \
    \  72 |         std::reverse(i.begin(), i.end());\n      |                   \
    \                ^~~\n/tmp/tmp3nn57pfl.cpp:75:21: error: \u2018class std::tuple<long\
    \ int, long int>\u2019 has no member named \u2018begin\u2019\n   75 |        \
    \ std::sort(i.begin(), i.end(), [](long a, long b) { return b < a; });\n     \
    \ |                     ^~~~~\n/tmp/tmp3nn57pfl.cpp:75:32: error: \u2018class\
    \ std::tuple<long int, long int>\u2019 has no member named \u2018end\u2019\n \
    \  75 |         std::sort(i.begin(), i.end(), [](long a, long b) { return b <\
    \ a; });\n      |                                ^~~\n/tmp/tmp3nn57pfl.cpp:78:24:\
    \ error: \u2018class std::tuple<long int, long int>\u2019 has no member named\
    \ \u2018begin\u2019\n   78 |         std::reverse(i.begin(), i.end());\n     \
    \ |                        ^~~~~\n/tmp/tmp3nn57pfl.cpp:78:35: error: \u2018class\
    \ std::tuple<long int, long int>\u2019 has no member named \u2018end\u2019\n \
    \  78 |         std::reverse(i.begin(), i.end());\n      |                   \
    \                ^~~\n/tmp/tmp3nn57pfl.cpp:81:21: error: \u2018class std::tuple<long\
    \ int, long int>\u2019 has no member named \u2018begin\u2019\n   81 |        \
    \ std::sort(i.begin(), i.end(), [](long a, long b) { return b < a; });\n     \
    \ |                     ^~~~~\n/tmp/tmp3nn57pfl.cpp:81:32: error: \u2018class\
    \ std::tuple<long int, long int>\u2019 has no member named \u2018end\u2019\n \
    \  81 |         std::sort(i.begin(), i.end(), [](long a, long b) { return b <\
    \ a; });\n      |                                ^~~\n/tmp/tmp3nn57pfl.cpp:83:17:\
    \ error: expected \u2018;\u2019 before \u2018}\u2019 token\n   83 |     for (auto\
    \ &i\n      |                 ^\n      |                 ;\n   84 | }\n      |\
    \ ~                \n/tmp/tmp3nn57pfl.cpp:84:1: error: expected primary-expression\
    \ before \u2018}\u2019 token\n   84 | }\n      | ^\n/tmp/tmp3nn57pfl.cpp:83:17:\
    \ error: expected \u2018;\u2019 before \u2018}\u2019 token\n   83 |     for (auto\
    \ &i\n      |                 ^\n      |                 ;\n   84 | }\n      |\
    \ ~                \n/tmp/tmp3nn57pfl.cpp:84:1: error: expected primary-expression\
    \ before \u2018}\u2019 token\n   84 | }\n      | ^\n/tmp/tmp3nn57pfl.cpp:83:17:\
    \ error: expected \u2018)\u2019 before \u2018}\u2019 token\n   83 |     for (auto\
    \ &i\n      |         ~       ^\n      |                 )\n   84 | }\n      |\
    \ ~                \n/tmp/tmp3nn57pfl.cpp:84:1: error: expected primary-expression\
    \ before \u2018}\u2019 token\n   84 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    std::vector<std::tuple<long, long>> res;\n    long n = lst.size();\n\
    \    long m = lst[0].size();\n    long cnt = 0;\n    for (long i = 0; i < n; i++)\
    \ {\n        cnt += lst[i][0] == x;\n        if (cnt >= m) {\n            std::sort(res.begin(),\
    \ res.end(), [](auto a, auto b) { return std::get<0>(a) > std::get<0>(b); });\n\
    \            std::sort(res.begin(), res.end(), [](auto a, auto b) { return std::get<1>(a)\
    \ > std::get<1>(b); });\n            break;\n        }\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = get_row;\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "tmpbmjuv666: /tmp/tmpbmjuv666.cpp:36: int main(): Assertion `candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    std::vector<std::tuple<long, long>> res;\n    std::vector<long>\
    \ row;\n    std::vector<long> col;\n    long rowId = 0;\n    long colId = 0;\n\
    \    for (auto &row : lst) {\n        row.clear();\n        col.clear();\n   \
    \     for (auto &col : row) {\n            if (col == x) {\n                res.emplace_back(rowId,\
    \ colId);\n            }\n            row.push_back(col);\n            col.push_back(colId);\n\
    \            colId++;\n        }\n        rowId++;\n    }\n    std::sort(res.begin(),\
    \ res.end(), [](const std::tuple<long, long> &a, const std::tuple<long, long>\
    \ &b) -> bool {\n        return std::get<0>(a) < std::get<0>(b);\n    });\n  \
    \  std::sort(res.begin(), res.end(), [](const std::tuple<long, long> &a, const\
    \ std::tuple<long, long> &b) -> bool {\n        return std::get<1>(a) < std::get<1>(b);\n\
    \    });\n    return res;\n}\nint main() {\n    auto candidate = get_row;\n  \
    \  assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1w6r2l11.cpp: In function \u2018std::vector<std::tuple<long int,\
    \ long int> > get_row(std::vector<std::vector<long int> >, long int)\u2019:\n\
    /tmp/tmp1w6r2l11.cpp:33:17: error: request for member \u2018push_back\u2019 in\
    \ \u2018col\u2019, which is of non-class type \u2018long int\u2019\n   33 |  \
    \           col.push_back(colId);\n      |                 ^~~~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    // Write your code here\n    std::vector<std::tuple<long,\
    \ long>> res;\n    for(auto &row : lst){\n        for(auto &el : row){\n     \
    \       if(el == x){\n                res.emplace_back(row.size() - 1, row.size()\
    \ - 1);\n            }\n        }\n    }\n    std::sort(res.begin(), res.end(),\
    \ [](const std::tuple<long, long> &a, const std::tuple<long, long> &b){\n    \
    \    return std::get<0>(a) < std::get<0>(b);\n    });\n    std::sort(res.begin(),\
    \ res.end(), [](const std::tuple<long, long> &a, const std::tuple<long, long>\
    \ &b){\n        return std::get<1>(a) < std::get<1>(b);\n    });\n    return res;\n\
    }\nint main() {\n    auto candidate = get_row;\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "tmpg5zzlg8y: /tmp/tmpg5zzlg8y.cpp:39: int main(): Assertion `candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    std::vector<std::tuple<long, long>> res;\n    res.reserve(lst.size());\n\
    \    for (auto &row : lst) {\n        std::sort(row.begin(), row.end());\n   \
    \     std::reverse(row.begin(), row.end());\n        std::sort(row.begin(), row.end());\n\
    \        std::reverse(row.begin(), row.end());\n        std::sort(row.begin(),\
    \ row.end());\n        std::reverse(row.begin(), row.end());\n        std::sort(row.begin(),\
    \ row.end());\n        std::reverse(row.begin(), row.end());\n        std::sort(row.begin(),\
    \ row.end());\n        std::reverse(row.begin(), row.end());\n        std::sort(row.begin(),\
    \ row.end());\n        std::reverse(row.begin(), row.end());\n        std::sort(row.begin(),\
    \ row.end());\n        std::reverse(row.begin(), row.end());\n        std::sort(row.begin(),\
    \ row.end());\n        std::reverse(row.begin(), row.end());\n        std::sort(row.begin(),\
    \ row.end());\n        std::reverse(row.begin(), row.end());\n        std::sort(row.begin(),\
    \ row.end());\n        std::reverse(row.begin(), row.end());\n        std::sort(row.begin(),\
    \ row.end());\n        std::reverse(row.begin(), row.end());\n        std::sort(row.begin(),\
    \ row.end());\n        std::reverse(row.begin(), row.end());\n        std::sort(row.begin(),\
    \ row.end());\n        std::reverse(row.begin(), row.end());\n        std::sort(row.begin(),\
    \ row.end());\n        std::reverse(row.begin(), row.end());\n        std::sort(row.begin(),\
    \ row.end());\n        std::reverse(row.begin(), row.end());\n        std::sort(row.begin(),\
    \ row.end());\n        std::reverse(row.begin(), row.end());\n        std::sort(row.begin(),\
    \ row.end());\n        std::reverse(row.begin(), row.end());\n        std::sort(row.begin(),\
    \ row.end());\n        std::reverse(row.begin(), row.end());\n        std::sort(row.begin(),\
    \ row.end());\n        std::reverse(row.begin(), row.end());\n        std::sort(row.begin(),\
    \ row.end());\n        std::reverse(row.begin(), row.end());\n        std::sort(row.begin(),\
    \ row.end());\n        std::reverse(row.begin(), row.end());\n        std::sort(row.begin(),\
    \ row.end());\n        std::reverse(row.begin(), row.end());\n        std::sort(row.begin(),\
    \ row.end());\n        std::reverse(row.begin(), row.end());\n        std::sort(row.begin(),\
    \ row.end());\n        std::reverse(row.begin(), row.end());\n        std::sort(row.begin(),\
    \ \n}\nint main() {\n    auto candidate = get_row;\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp24ic7hoy.cpp: In function \u2018std::vector<std::tuple<long int,\
    \ long int> > get_row(std::vector<std::vector<long int> >, long int)\u2019:\n\
    /tmp/tmp24ic7hoy.cpp:72:1: error: expected primary-expression before \u2018}\u2019\
    \ token\n   72 | }\n      | ^\n/tmp/tmp24ic7hoy.cpp:73:12: error: a function-definition\
    \ is not allowed here before \u2018{\u2019 token\n   73 | int main() {\n     \
    \ |            ^\n/tmp/tmp24ic7hoy.cpp:81:1: error: expected \u2018}\u2019 at\
    \ end of input\n   81 | }\n      | ^\n/tmp/tmp24ic7hoy.cpp:19:89: note: to match\
    \ this \u2018{\u2019\n   19 | std::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n      |                                                    \
    \                                     ^\n/tmp/tmp24ic7hoy.cpp:81:1: warning: no\
    \ return statement in function returning non-void [-Wreturn-type]\n   81 | }\n\
    \      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    // Write your code here\n    std::vector<std::tuple<long,\
    \ long>> res;\n    for(auto &row : lst) {\n        for(auto &el : row) {\n   \
    \         if(el == x) {\n                res.push_back(std::make_tuple(row.size()\
    \ - 1, row.size() - 1));\n            }\n        }\n    }\n    std::sort(res.begin(),\
    \ res.end(), [](std::tuple<long, long> a, std::tuple<long, long> b){\n       \
    \ return std::get<0>(a) < std::get<0>(b);\n    });\n    std::sort(res.begin(),\
    \ res.end(), [](std::tuple<long, long> a, std::tuple<long, long> b){\n       \
    \ return std::get<1>(a) > std::get<1>(b);\n    });\n    return res;\n}\nint main()\
    \ {\n    auto candidate = get_row;\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "tmprkq7fq36: /tmp/tmprkq7fq36.cpp:39: int main(): Assertion `candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    // Your code here\n    std::vector<std::tuple<long, long>>\
    \ res;\n    for(auto &row : lst) {\n        for(auto &val : row) {\n         \
    \   if(val == x) {\n                res.push_back({row.size(), row.size() - 1});\n\
    \            }\n        }\n    }\n    std::sort(res.begin(), res.end(), [](const\
    \ std::tuple<long, long> &a, const std::tuple<long, long> &b) -> bool {\n    \
    \    return std::get<0>(a) < std::get<0>(b);\n    });\n    std::sort(res.begin(),\
    \ res.end(), [](const std::tuple<long, long> &a, const std::tuple<long, long>\
    \ &b) -> bool {\n        return std::get<1>(a) < std::get<1>(b);\n    });\n  \
    \  return res;\n}\nint main() {\n    auto candidate = get_row;\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "tmpxipwi7pk: /tmp/tmpxipwi7pk.cpp:39: int main(): Assertion `candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    // Your code here\n    std::vector<std::tuple<long, long>>\
    \ res;\n    for(auto &row : lst) {\n        for(auto &val : row) {\n         \
    \   if(val == x) {\n                res.emplace_back(row.size() - 1, row.size()\
    \ - 1);\n            }\n        }\n    }\n    std::sort(res.begin(), res.end(),\
    \ [](auto &a, auto &b){\n        return std::get<0>(a) < std::get<0>(b);\n   \
    \ });\n    std::sort(res.begin(), res.end(), [](auto &a, auto &b){\n        return\
    \ std::get<1>(a) < std::get<1>(b);\n    });\n    return res;\n}\nint main() {\n\
    \    auto candidate = get_row;\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "tmpet55zy_3: /tmp/tmpet55zy_3.cpp:39: int main(): Assertion `candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    std::vector<std::tuple<long, long>> res;\n    long n = lst.size();\n\
    \    long m = lst[0].size();\n    long i = 0;\n    long j = 0;\n    long k = 0;\n\
    \    long l = 0;\n    long m1 = m;\n    long n1 = n;\n    long xx = x;\n    long\
    \ yy = 1;\n    long zz = 1;\n    long aa = 1;\n    long bb = 1;\n    long cc =\
    \ 1;\n    long dd = 1;\n    long ee = 1;\n    long ff = 1;\n    long gg = 1;\n\
    \    long hh = 1;\n    long ii = 0;\n    long jj = 0;\n    long kk = 0;\n    long\
    \ ll = 0;\n    long mm = 1;\n    long nn = 0;\n    long oo = 1;\n    long pp =\
    \ 1;\n    long qq = 1;\n    long rr = 0;\n    long ss;\n    long tt;\n    long\
    \ uu;\n    long vv;\n    long ww;\n    long xx;\n    long yy;\n    long zz;\n\
    \    long aa;\n    long bb;\n    long cc;\n    long dd;\n    long ee;\n    long\
    \ ff;\n    long gg;\n    long hh;\n    long ii;\n    long jj;\n    long kk;\n\
    \    long ll;\n    long mm;\n    long nn;\n    long oo;\n    long pp;\n    long\
    \ qq;\n    long rr;\n    long ss;\n    long tt;\n    long uu;\n    long vv;\n\
    \    long ww;\n    long xx;\n    long yy;\n    long zz;\n    long aa;\n    long\
    \ bb;\n    long cc;\n    long dd;\n    long ee;\n    long ff;\n    long gg;\n\
    \    long hh;\n    long ii;\n    long jj;\n    long kk;\n    long ll;\n    long\
    \ mm;\n    long nn;\n    long oo;\n    long pp;\n    long qq;\n    long rr;\n\
    \    long ss;\n    long tt;\n    long uu;\n    long vv;\n    long ww;\n    long\
    \ xx;\n    long yy;\n    long zz;\n    long aa;\n    long bb;\n    long cc;\n\
    \    long dd;\n    long ee;\n    long ff;\n    long gg;\n    long hh;\n    long\
    \ ii;\n    long \n}\nint main() {\n    auto candidate = get_row;\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpa7jhraqv.cpp: In function \u2018std::vector<std::tuple<long int,\
    \ long int> > get_row(std::vector<std::vector<long int> >, long int)\u2019:\n\
    /tmp/tmpa7jhraqv.cpp:55:10: error: redeclaration of \u2018long int xx\u2019\n\
    \   55 |     long xx;\n      |          ^~\n/tmp/tmpa7jhraqv.cpp:29:10: note:\
    \ \u2018long int xx\u2019 previously declared here\n   29 |     long xx = x;\n\
    \      |          ^~\n/tmp/tmpa7jhraqv.cpp:56:10: error: redeclaration of \u2018\
    long int yy\u2019\n   56 |     long yy;\n      |          ^~\n/tmp/tmpa7jhraqv.cpp:30:10:\
    \ note: \u2018long int yy\u2019 previously declared here\n   30 |     long yy\
    \ = 1;\n      |          ^~\n/tmp/tmpa7jhraqv.cpp:57:10: error: redeclaration\
    \ of \u2018long int zz\u2019\n   57 |     long zz;\n      |          ^~\n/tmp/tmpa7jhraqv.cpp:31:10:\
    \ note: \u2018long int zz\u2019 previously declared here\n   31 |     long zz\
    \ = 1;\n      |          ^~\n/tmp/tmpa7jhraqv.cpp:58:10: error: redeclaration\
    \ of \u2018long int aa\u2019\n   58 |     long aa;\n      |          ^~\n/tmp/tmpa7jhraqv.cpp:32:10:\
    \ note: \u2018long int aa\u2019 previously declared here\n   32 |     long aa\
    \ = 1;\n      |          ^~\n/tmp/tmpa7jhraqv.cpp:59:10: error: redeclaration\
    \ of \u2018long int bb\u2019\n   59 |     long bb;\n      |          ^~\n/tmp/tmpa7jhraqv.cpp:33:10:\
    \ note: \u2018long int bb\u2019 previously declared here\n   33 |     long bb\
    \ = 1;\n      |          ^~\n/tmp/tmpa7jhraqv.cpp:60:10: error: redeclaration\
    \ of \u2018long int cc\u2019\n   60 |     long cc;\n      |          ^~\n/tmp/tmpa7jhraqv.cpp:34:10:\
    \ note: \u2018long int cc\u2019 previously declared here\n   34 |     long cc\
    \ = 1;\n      |          ^~\n/tmp/tmpa7jhraqv.cpp:61:10: error: redeclaration\
    \ of \u2018long int dd\u2019\n   61 |     long dd;\n      |          ^~\n/tmp/tmpa7jhraqv.cpp:35:10:\
    \ note: \u2018long int dd\u2019 previously declared here\n   35 |     long dd\
    \ = 1;\n      |          ^~\n/tmp/tmpa7jhraqv.cpp:62:10: error: redeclaration\
    \ of \u2018long int ee\u2019\n   62 |     long ee;\n      |          ^~\n/tmp/tmpa7jhraqv.cpp:36:10:\
    \ note: \u2018long int ee\u2019 previously declared here\n   36 |     long ee\
    \ = 1;\n      |          ^~\n/tmp/tmpa7jhraqv.cpp:63:10: error: redeclaration\
    \ of \u2018long int ff\u2019\n   63 |     long ff;\n      |          ^~\n/tmp/tmpa7jhraqv.cpp:37:10:\
    \ note: \u2018long int ff\u2019 previously declared here\n   37 |     long ff\
    \ = 1;\n      |          ^~\n/tmp/tmpa7jhraqv.cpp:64:10: error: redeclaration\
    \ of \u2018long int gg\u2019\n   64 |     long gg;\n      |          ^~\n/tmp/tmpa7jhraqv.cpp:38:10:\
    \ note: \u2018long int gg\u2019 previously declared here\n   38 |     long gg\
    \ = 1;\n      |          ^~\n/tmp/tmpa7jhraqv.cpp:65:10: error: redeclaration\
    \ of \u2018long int hh\u2019\n   65 |     long hh;\n      |          ^~\n/tmp/tmpa7jhraqv.cpp:39:10:\
    \ note: \u2018long int hh\u2019 previously declared here\n   39 |     long hh\
    \ = 1;\n      |          ^~\n/tmp/tmpa7jhraqv.cpp:66:10: error: redeclaration\
    \ of \u2018long int ii\u2019\n   66 |     long ii;\n      |          ^~\n/tmp/tmpa7jhraqv.cpp:40:10:\
    \ note: \u2018long int ii\u2019 previously declared here\n   40 |     long ii\
    \ = 0;\n      |          ^~\n/tmp/tmpa7jhraqv.cpp:67:10: error: redeclaration\
    \ of \u2018long int jj\u2019\n   67 |     long jj;\n      |          ^~\n/tmp/tmpa7jhraqv.cpp:41:10:\
    \ note: \u2018long int jj\u2019 previously declared here\n   41 |     long jj\
    \ = 0;\n      |          ^~\n/tmp/tmpa7jhraqv.cpp:68:10: error: redeclaration\
    \ of \u2018long int kk\u2019\n   68 |     long kk;\n      |          ^~\n/tmp/tmpa7jhraqv.cpp:42:10:\
    \ note: \u2018long int kk\u2019 previously declared here\n   42 |     long kk\
    \ = 0;\n      |          ^~\n/tmp/tmpa7jhraqv.cpp:69:10: error: redeclaration\
    \ of \u2018long int ll\u2019\n   69 |     long ll;\n      |          ^~\n/tmp/tmpa7jhraqv.cpp:43:10:\
    \ note: \u2018long int ll\u2019 previously declared here\n   43 |     long ll\
    \ = 0;\n      |          ^~\n/tmp/tmpa7jhraqv.cpp:70:10: error: redeclaration\
    \ of \u2018long int mm\u2019\n   70 |     long mm;\n      |          ^~\n/tmp/tmpa7jhraqv.cpp:44:10:\
    \ note: \u2018long int mm\u2019 previously declared here\n   44 |     long mm\
    \ = 1;\n      |          ^~\n/tmp/tmpa7jhraqv.cpp:71:10: error: redeclaration\
    \ of \u2018long int nn\u2019\n   71 |     long nn;\n      |          ^~\n/tmp/tmpa7jhraqv.cpp:45:10:\
    \ note: \u2018long int nn\u2019 previously declared here\n   45 |     long nn\
    \ = 0;\n      |          ^~\n/tmp/tmpa7jhraqv.cpp:72:10: error: redeclaration\
    \ of \u2018long int oo\u2019\n   72 |     long oo;\n      |          ^~\n/tmp/tmpa7jhraqv.cpp:46:10:\
    \ note: \u2018long int oo\u2019 previously declared here\n   46 |     long oo\
    \ = 1;\n      |          ^~\n/tmp/tmpa7jhraqv.cpp:73:10: error: redeclaration\
    \ of \u2018long int pp\u2019\n   73 |     long pp;\n      |          ^~\n/tmp/tmpa7jhraqv.cpp:47:10:\
    \ note: \u2018long int pp\u2019 previously declared here\n   47 |     long pp\
    \ = 1;\n      |          ^~\n/tmp/tmpa7jhraqv.cpp:74:10: error: redeclaration\
    \ of \u2018long int qq\u2019\n   74 |     long qq;\n      |          ^~\n/tmp/tmpa7jhraqv.cpp:48:10:\
    \ note: \u2018long int qq\u2019 previously declared here\n   48 |     long qq\
    \ = 1;\n      |          ^~\n/tmp/tmpa7jhraqv.cpp:75:10: error: redeclaration\
    \ of \u2018long int rr\u2019\n   75 |     long rr;\n      |          ^~\n/tmp/tmpa7jhraqv.cpp:49:10:\
    \ note: \u2018long int rr\u2019 previously declared here\n   49 |     long rr\
    \ = 0;\n      |          ^~\n/tmp/tmpa7jhraqv.cpp:76:10: error: redeclaration\
    \ of \u2018long int ss\u2019\n   76 |     long ss;\n      |          ^~\n/tmp/tmpa7jhraqv.cpp:50:10:\
    \ note: \u2018long int ss\u2019 previously declared here\n   50 |     long ss;\n\
    \      |          ^~\n/tmp/tmpa7jhraqv.cpp:77:10: error: redeclaration of \u2018\
    long int tt\u2019\n   77 |     long tt;\n      |          ^~\n/tmp/tmpa7jhraqv.cpp:51:10:\
    \ note: \u2018long int tt\u2019 previously declared here\n   51 |     long tt;\n\
    \      |          ^~\n/tmp/tmpa7jhraqv.cpp:78:10: error: redeclaration of \u2018\
    long int uu\u2019\n   78 |     long uu;\n      |          ^~\n/tmp/tmpa7jhraqv.cpp:52:10:\
    \ note: \u2018long int uu\u2019 previously declared here\n   52 |     long uu;\n\
    \      |          ^~\n/tmp/tmpa7jhraqv.cpp:79:10: error: redeclaration of \u2018\
    long int vv\u2019\n   79 |     long vv;\n      |          ^~\n/tmp/tmpa7jhraqv.cpp:53:10:\
    \ note: \u2018long int vv\u2019 previously declared here\n   53 |     long vv;\n\
    \      |          ^~\n/tmp/tmpa7jhraqv.cpp:80:10: error: redeclaration of \u2018\
    long int ww\u2019\n   80 |     long ww;\n      |          ^~\n/tmp/tmpa7jhraqv.cpp:54:10:\
    \ note: \u2018long int ww\u2019 previously declared here\n   54 |     long ww;\n\
    \      |          ^~\n/tmp/tmpa7jhraqv.cpp:81:10: error: redeclaration of \u2018\
    long int xx\u2019\n   81 |     long xx;\n      |          ^~\n/tmp/tmpa7jhraqv.cpp:29:10:\
    \ note: \u2018long int xx\u2019 previously declared here\n   29 |     long xx\
    \ = x;\n      |          ^~\n/tmp/tmpa7jhraqv.cpp:82:10: error: redeclaration\
    \ of \u2018long int yy\u2019\n   82 |     long yy;\n      |          ^~\n/tmp/tmpa7jhraqv.cpp:30:10:\
    \ note: \u2018long int yy\u2019 previously declared here\n   30 |     long yy\
    \ = 1;\n      |          ^~\n/tmp/tmpa7jhraqv.cpp:83:10: error: redeclaration\
    \ of \u2018long int zz\u2019\n   83 |     long zz;\n      |          ^~\n/tmp/tmpa7jhraqv.cpp:31:10:\
    \ note: \u2018long int zz\u2019 previously declared here\n   31 |     long zz\
    \ = 1;\n      |          ^~\n/tmp/tmpa7jhraqv.cpp:84:10: error: redeclaration\
    \ of \u2018long int aa\u2019\n   84 |     long aa;\n      |          ^~\n/tmp/tmpa7jhraqv.cpp:32:10:\
    \ note: \u2018long int aa\u2019 previously declared here\n   32 |     long aa\
    \ = 1;\n      |          ^~\n/tmp/tmpa7jhraqv.cpp:85:10: error: redeclaration\
    \ of \u2018long int bb\u2019\n   85 |     long bb;\n      |          ^~\n/tmp/tmpa7jhraqv.cpp:33:10:\
    \ note: \u2018long int bb\u2019 previously declared here\n   33 |     long bb\
    \ = 1;\n      |          ^~\n/tmp/tmpa7jhraqv.cpp:86:10: error: redeclaration\
    \ of \u2018long int cc\u2019\n   86 |     long cc;\n      |          ^~\n/tmp/tmpa7jhraqv.cpp:34:10:\
    \ note: \u2018long int cc\u2019 previously declared here\n   34 |     long cc\
    \ = 1;\n      |          ^~\n/tmp/tmpa7jhraqv.cpp:87:10: error: redeclaration\
    \ of \u2018long int dd\u2019\n   87 |     long dd;\n      |          ^~\n/tmp/tmpa7jhraqv.cpp:35:10:\
    \ note: \u2018long int dd\u2019 previously declared here\n   35 |     long dd\
    \ = 1;\n      |          ^~\n/tmp/tmpa7jhraqv.cpp:88:10: error: redeclaration\
    \ of \u2018long int ee\u2019\n   88 |     long ee;\n      |          ^~\n/tmp/tmpa7jhraqv.cpp:36:10:\
    \ note: \u2018long int ee\u2019 previously declared here\n   36 |     long ee\
    \ = 1;\n      |          ^~\n/tmp/tmpa7jhraqv.cpp:89:10: error: redeclaration\
    \ of \u2018long int ff\u2019\n   89 |     long ff;\n      |          ^~\n/tmp/tmpa7jhraqv.cpp:37:10:\
    \ note: \u2018long int ff\u2019 previously declared here\n   37 |     long ff\
    \ = 1;\n      |          ^~\n/tmp/tmpa7jhraqv.cpp:90:10: error: redeclaration\
    \ of \u2018long int gg\u2019\n   90 |     long gg;\n      |          ^~\n/tmp/tmpa7jhraqv.cpp:38:10:\
    \ note: \u2018long int gg\u2019 previously declared here\n   38 |     long gg\
    \ = 1;\n      |          ^~\n/tmp/tmpa7jhraqv.cpp:91:10: error: redeclaration\
    \ of \u2018long int hh\u2019\n   91 |     long hh;\n      |          ^~\n/tmp/tmpa7jhraqv.cpp:39:10:\
    \ note: \u2018long int hh\u2019 previously declared here\n   39 |     long hh\
    \ = 1;\n      |          ^~\n/tmp/tmpa7jhraqv.cpp:92:10: error: redeclaration\
    \ of \u2018long int ii\u2019\n   92 |     long ii;\n      |          ^~\n/tmp/tmpa7jhraqv.cpp:40:10:\
    \ note: \u2018long int ii\u2019 previously declared here\n   40 |     long ii\
    \ = 0;\n      |          ^~\n/tmp/tmpa7jhraqv.cpp:93:10: error: redeclaration\
    \ of \u2018long int jj\u2019\n   93 |     long jj;\n      |          ^~\n/tmp/tmpa7jhraqv.cpp:41:10:\
    \ note: \u2018long int jj\u2019 previously declared here\n   41 |     long jj\
    \ = 0;\n      |          ^~\n/tmp/tmpa7jhraqv.cpp:94:10: error: redeclaration\
    \ of \u2018long int kk\u2019\n   94 |     long kk;\n      |          ^~\n/tmp/tmpa7jhraqv.cpp:42:10:\
    \ note: \u2018long int kk\u2019 previously declared here\n   42 |     long kk\
    \ = 0;\n      |          ^~\n/tmp/tmpa7jhraqv.cpp:95:10: error: redeclaration\
    \ of \u2018long int ll\u2019\n   95 |     long ll;\n      |          ^~\n/tmp/tmpa7jhraqv.cpp:43:10:\
    \ note: \u2018long int ll\u2019 previously declared here\n   43 |     long ll\
    \ = 0;\n      |          ^~\n/tmp/tmpa7jhraqv.cpp:96:10: error: redeclaration\
    \ of \u2018long int mm\u2019\n   96 |     long mm;\n      |          ^~\n/tmp/tmpa7jhraqv.cpp:44:10:\
    \ note: \u2018long int mm\u2019 previously declared here\n   44 |     long mm\
    \ = 1;\n      |          ^~\n/tmp/tmpa7jhraqv.cpp:97:10: error: redeclaration\
    \ of \u2018long int nn\u2019\n   97 |     long nn;\n      |          ^~\n/tmp/tmpa7jhraqv.cpp:45:10:\
    \ note: \u2018long int nn\u2019 previously declared here\n   45 |     long nn\
    \ = 0;\n      |          ^~\n/tmp/tmpa7jhraqv.cpp:98:10: error: redeclaration\
    \ of \u2018long int oo\u2019\n   98 |     long oo;\n      |          ^~\n/tmp/tmpa7jhraqv.cpp:46:10:\
    \ note: \u2018long int oo\u2019 previously declared here\n   46 |     long oo\
    \ = 1;\n      |          ^~\n/tmp/tmpa7jhraqv.cpp:99:10: error: redeclaration\
    \ of \u2018long int pp\u2019\n   99 |     long pp;\n      |          ^~\n/tmp/tmpa7jhraqv.cpp:47:10:\
    \ note: \u2018long int pp\u2019 previously declared here\n   47 |     long pp\
    \ = 1;\n      |          ^~\n/tmp/tmpa7jhraqv.cpp:100:10: error: redeclaration\
    \ of \u2018long int qq\u2019\n  100 |     long qq;\n      |          ^~\n/tmp/tmpa7jhraqv.cpp:48:10:\
    \ note: \u2018long int qq\u2019 previously declared here\n   48 |     long qq\
    \ = 1;\n      |          ^~\n/tmp/tmpa7jhraqv.cpp:101:10: error: redeclaration\
    \ of \u2018long int rr\u2019\n  101 |     long rr;\n      |          ^~\n/tmp/tmpa7jhraqv.cpp:49:10:\
    \ note: \u2018long int rr\u2019 previously declared here\n   49 |     long rr\
    \ = 0;\n      |          ^~\n/tmp/tmpa7jhraqv.cpp:102:10: error: redeclaration\
    \ of \u2018long int ss\u2019\n  102 |     long ss;\n      |          ^~\n/tmp/tmpa7jhraqv.cpp:50:10:\
    \ note: \u2018long int ss\u2019 previously declared here\n   50 |     long ss;\n\
    \      |          ^~\n/tmp/tmpa7jhraqv.cpp:103:10: error: redeclaration of \u2018\
    long int tt\u2019\n  103 |     long tt;\n      |          ^~\n/tmp/tmpa7jhraqv.cpp:51:10:\
    \ note: \u2018long int tt\u2019 previously declared here\n   51 |     long tt;\n\
    \      |          ^~\n/tmp/tmpa7jhraqv.cpp:104:10: error: redeclaration of \u2018\
    long int uu\u2019\n  104 |     long uu;\n      |          ^~\n/tmp/tmpa7jhraqv.cpp:52:10:\
    \ note: \u2018long int uu\u2019 previously declared here\n   52 |     long uu;\n\
    \      |          ^~\n/tmp/tmpa7jhraqv.cpp:105:10: error: redeclaration of \u2018\
    long int vv\u2019\n  105 |     long vv;\n      |          ^~\n/tmp/tmpa7jhraqv.cpp:53:10:\
    \ note: \u2018long int vv\u2019 previously declared here\n   53 |     long vv;\n\
    \      |          ^~\n/tmp/tmpa7jhraqv.cpp:106:10: error: redeclaration of \u2018\
    long int ww\u2019\n  106 |     long ww;\n      |          ^~\n/tmp/tmpa7jhraqv.cpp:54:10:\
    \ note: \u2018long int ww\u2019 previously declared here\n   54 |     long ww;\n\
    \      |          ^~\n/tmp/tmpa7jhraqv.cpp:107:10: error: redeclaration of \u2018\
    long int xx\u2019\n  107 |     long xx;\n      |          ^~\n/tmp/tmpa7jhraqv.cpp:29:10:\
    \ note: \u2018long int xx\u2019 previously declared here\n   29 |     long xx\
    \ = x;\n      |          ^~\n/tmp/tmpa7jhraqv.cpp:108:10: error: redeclaration\
    \ of \u2018long int yy\u2019\n  108 |     long yy;\n      |          ^~\n/tmp/tmpa7jhraqv.cpp:30:10:\
    \ note: \u2018long int yy\u2019 previously declared here\n   30 |     long yy\
    \ = 1;\n      |          ^~\n/tmp/tmpa7jhraqv.cpp:109:10: error: redeclaration\
    \ of \u2018long int zz\u2019\n  109 |     long zz;\n      |          ^~\n/tmp/tmpa7jhraqv.cpp:31:10:\
    \ note: \u2018long int zz\u2019 previously declared here\n   31 |     long zz\
    \ = 1;\n      |          ^~\n/tmp/tmpa7jhraqv.cpp:110:10: error: redeclaration\
    \ of \u2018long int aa\u2019\n  110 |     long aa;\n      |          ^~\n/tmp/tmpa7jhraqv.cpp:32:10:\
    \ note: \u2018long int aa\u2019 previously declared here\n   32 |     long aa\
    \ = 1;\n      |          ^~\n/tmp/tmpa7jhraqv.cpp:111:10: error: redeclaration\
    \ of \u2018long int bb\u2019\n  111 |     long bb;\n      |          ^~\n/tmp/tmpa7jhraqv.cpp:33:10:\
    \ note: \u2018long int bb\u2019 previously declared here\n   33 |     long bb\
    \ = 1;\n      |          ^~\n/tmp/tmpa7jhraqv.cpp:112:10: error: redeclaration\
    \ of \u2018long int cc\u2019\n  112 |     long cc;\n      |          ^~\n/tmp/tmpa7jhraqv.cpp:34:10:\
    \ note: \u2018long int cc\u2019 previously declared here\n   34 |     long cc\
    \ = 1;\n      |          ^~\n/tmp/tmpa7jhraqv.cpp:113:10: error: redeclaration\
    \ of \u2018long int dd\u2019\n  113 |     long dd;\n      |          ^~\n/tmp/tmpa7jhraqv.cpp:35:10:\
    \ note: \u2018long int dd\u2019 previously declared here\n   35 |     long dd\
    \ = 1;\n      |          ^~\n/tmp/tmpa7jhraqv.cpp:114:10: error: redeclaration\
    \ of \u2018long int ee\u2019\n  114 |     long ee;\n      |          ^~\n/tmp/tmpa7jhraqv.cpp:36:10:\
    \ note: \u2018long int ee\u2019 previously declared here\n   36 |     long ee\
    \ = 1;\n      |          ^~\n/tmp/tmpa7jhraqv.cpp:115:10: error: redeclaration\
    \ of \u2018long int ff\u2019\n  115 |     long ff;\n      |          ^~\n/tmp/tmpa7jhraqv.cpp:37:10:\
    \ note: \u2018long int ff\u2019 previously declared here\n   37 |     long ff\
    \ = 1;\n      |          ^~\n/tmp/tmpa7jhraqv.cpp:116:10: error: redeclaration\
    \ of \u2018long int gg\u2019\n  116 |     long gg;\n      |          ^~\n/tmp/tmpa7jhraqv.cpp:38:10:\
    \ note: \u2018long int gg\u2019 previously declared here\n   38 |     long gg\
    \ = 1;\n      |          ^~\n/tmp/tmpa7jhraqv.cpp:117:10: error: redeclaration\
    \ of \u2018long int hh\u2019\n  117 |     long hh;\n      |          ^~\n/tmp/tmpa7jhraqv.cpp:39:10:\
    \ note: \u2018long int hh\u2019 previously declared here\n   39 |     long hh\
    \ = 1;\n      |          ^~\n/tmp/tmpa7jhraqv.cpp:118:10: error: redeclaration\
    \ of \u2018long int ii\u2019\n  118 |     long ii;\n      |          ^~\n/tmp/tmpa7jhraqv.cpp:40:10:\
    \ note: \u2018long int ii\u2019 previously declared here\n   40 |     long ii\
    \ = 0;\n      |          ^~\n/tmp/tmpa7jhraqv.cpp:120:1: error: expected unqualified-id\
    \ before \u2018}\u2019 token\n  120 | }\n      | ^\n/tmp/tmpa7jhraqv.cpp:120:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    std::vector<std::tuple<long, long>> res;\n    std::vector<long>\
    \ row;\n    std::vector<long> col;\n    for (auto &row : lst) {\n        row.clear();\n\
    \        col.clear();\n        for (auto &elem : row) {\n            row.push_back(elem);\n\
    \            col.push_back(elem);\n        }\n    }\n    for (auto &row : lst)\
    \ {\n        std::sort(row.begin(), row.end());\n        std::sort(col.begin(),\
    \ col.end());\n        for (auto &elem : row) {\n            if (elem == x) {\n\
    \                res.push_back(std::make_tuple(row.size() - 1, col.size() - 1));\n\
    \                break;\n            }\n        }\n    }\n    return res;\n}\n\
    int main() {\n    auto candidate = get_row;\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "tmphvhtdfv7: /tmp/tmphvhtdfv7.cpp:45: int main(): Assertion `candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    std::vector<std::tuple<long, long>> res;\n    std::vector<long>\
    \ row;\n    std::vector<long> col;\n    long cnt = 0;\n    for (auto &row : lst)\
    \ {\n        row.clear();\n        col.clear();\n        cnt = 0;\n        for\
    \ (auto &el : row) {\n            row.push_back(el);\n            col.push_back(el);\n\
    \            cnt++;\n        }\n        if (cnt > x) {\n            std::sort(row.begin(),\
    \ row.end());\n            std::sort(col.begin(), col.end());\n            res.push_back(std::make_tuple(row.back(),\
    \ col.back()));\n        }\n    }\n    return res;\n}\nint main() {\n    auto\
    \ candidate = get_row;\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "tmp31n8ya3j: /tmp/tmp31n8ya3j.cpp:43: int main(): Assertion `candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    std::vector<std::tuple<long, long>> res;\n    std::vector<long>\
    \ row;\n    std::vector<long> col;\n    long row_index = 0;\n    long col_index\
    \ = 0;\n    long row_max = std::accumulate(lst.begin(), lst.end(), 0);\n    long\
    \ col_max = std::accumulate(lst[0].begin(), lst[0].end(), 0);\n    for (auto &row\
    \ : lst) {\n        row.clear();\n        col.clear();\n        for (auto &col\
    \ : row) {\n            col.clear();\n            col.push_back(0);\n        \
    \    col.push_back(col_index);\n            col_index++;\n        }\n        row.push_back(row_index);\n\
    \        row.push_back(col_index);\n        row_index++;\n    }\n    for (auto\
    \ &row : lst) {\n        row.clear();\n        col.clear();\n        for (auto\
    \ &col : row) {\n            col.clear();\n            col.push_back(col_index);\n\
    \            col_index++;\n        }\n        row.push_back(row_index);\n    \
    \    row.push_back(col_index);\n        row_index++;\n    }\n    for (auto &row\
    \ : lst) {\n        row.clear();\n        col.clear();\n        for (auto &col\
    \ : row) {\n            col.clear();\n            col.push_back(col_index);\n\
    \            col_index++;\n        }\n        row.push_back(row_index);\n    \
    \    row.push_back(col_index);\n        row_index++;\n    }\n    for (auto &row\
    \ : lst) {\n        row.clear();\n        col.clear();\n        for (auto &col\
    \ : row) {\n            col.clear();\n            col.push_back(col_index);\n\
    \            col_index++;\n        }\n        row.push_back(row_index);\n    \
    \    row.push_back(col_index);\n        row_index++;\n    }\n    for (auto &row\
    \ : lst) {\n        row.clear();\n        col.clear();\n        for (auto &col\
    \ : row) {\n            col.clear();\n            col.push_back(col_index);\n\
    \            col_index++;\n        }\n        row.push_back(row_index);\n    \
    \    row.push_back(col_index);\n        row_index++;\n    }\n    for (auto &row\
    \ : lst) {\n        row.clear();\n        col.clear();\n        for (auto &col\
    \ : row) {\n            col.clear();\n            col.push_back(col_index);\n\
    \            col_index++;\n        }\n        row.push_back(row_index);\n    \
    \    row.push_back(col_index);\n        row_index++;\n    }\n    for (auto &row\
    \ : lst) {\n        row.clear();\n        col.clear();\n        for (auto &col\
    \ : row) {\n            col.clear();\n            col.push_back(col_index);\n\
    \            col_index++;\n        }\n        row.push_back(row_index);\n    \
    \    row.push_back(col_index);\n        row_index++;\n    }\n    for (auto &row\
    \ : lst) {\n        row.\n}\nint main() {\n    auto candidate = get_row;\n   \
    \ assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2, 3,\
    \ 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2, 3,\
    \ 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp01vc3p5t.cpp: In function \u2018std::vector<std::tuple<long int,\
    \ long int> > get_row(std::vector<std::vector<long int> >, long int)\u2019:\n\
    /tmp/tmp01vc3p5t.cpp:31:17: error: request for member \u2018clear\u2019 in \u2018\
    col\u2019, which is of non-class type \u2018long int\u2019\n   31 |          \
    \   col.clear();\n      |                 ^~~~~\n/tmp/tmp01vc3p5t.cpp:32:17: error:\
    \ request for member \u2018push_back\u2019 in \u2018col\u2019, which is of non-class\
    \ type \u2018long int\u2019\n   32 |             col.push_back(0);\n      |  \
    \               ^~~~~~~~~\n/tmp/tmp01vc3p5t.cpp:33:17: error: request for member\
    \ \u2018push_back\u2019 in \u2018col\u2019, which is of non-class type \u2018\
    long int\u2019\n   33 |             col.push_back(col_index);\n      |       \
    \          ^~~~~~~~~\n/tmp/tmp01vc3p5t.cpp:44:17: error: request for member \u2018\
    clear\u2019 in \u2018col\u2019, which is of non-class type \u2018long int\u2019\
    \n   44 |             col.clear();\n      |                 ^~~~~\n/tmp/tmp01vc3p5t.cpp:45:17:\
    \ error: request for member \u2018push_back\u2019 in \u2018col\u2019, which is\
    \ of non-class type \u2018long int\u2019\n   45 |             col.push_back(col_index);\n\
    \      |                 ^~~~~~~~~\n/tmp/tmp01vc3p5t.cpp:56:17: error: request\
    \ for member \u2018clear\u2019 in \u2018col\u2019, which is of non-class type\
    \ \u2018long int\u2019\n   56 |             col.clear();\n      |            \
    \     ^~~~~\n/tmp/tmp01vc3p5t.cpp:57:17: error: request for member \u2018push_back\u2019\
    \ in \u2018col\u2019, which is of non-class type \u2018long int\u2019\n   57 |\
    \             col.push_back(col_index);\n      |                 ^~~~~~~~~\n/tmp/tmp01vc3p5t.cpp:68:17:\
    \ error: request for member \u2018clear\u2019 in \u2018col\u2019, which is of\
    \ non-class type \u2018long int\u2019\n   68 |             col.clear();\n    \
    \  |                 ^~~~~\n/tmp/tmp01vc3p5t.cpp:69:17: error: request for member\
    \ \u2018push_back\u2019 in \u2018col\u2019, which is of non-class type \u2018\
    long int\u2019\n   69 |             col.push_back(col_index);\n      |       \
    \          ^~~~~~~~~\n/tmp/tmp01vc3p5t.cpp:80:17: error: request for member \u2018\
    clear\u2019 in \u2018col\u2019, which is of non-class type \u2018long int\u2019\
    \n   80 |             col.clear();\n      |                 ^~~~~\n/tmp/tmp01vc3p5t.cpp:81:17:\
    \ error: request for member \u2018push_back\u2019 in \u2018col\u2019, which is\
    \ of non-class type \u2018long int\u2019\n   81 |             col.push_back(col_index);\n\
    \      |                 ^~~~~~~~~\n/tmp/tmp01vc3p5t.cpp:92:17: error: request\
    \ for member \u2018clear\u2019 in \u2018col\u2019, which is of non-class type\
    \ \u2018long int\u2019\n   92 |             col.clear();\n      |            \
    \     ^~~~~\n/tmp/tmp01vc3p5t.cpp:93:17: error: request for member \u2018push_back\u2019\
    \ in \u2018col\u2019, which is of non-class type \u2018long int\u2019\n   93 |\
    \             col.push_back(col_index);\n      |                 ^~~~~~~~~\n/tmp/tmp01vc3p5t.cpp:104:17:\
    \ error: request for member \u2018clear\u2019 in \u2018col\u2019, which is of\
    \ non-class type \u2018long int\u2019\n  104 |             col.clear();\n    \
    \  |                 ^~~~~\n/tmp/tmp01vc3p5t.cpp:105:17: error: request for member\
    \ \u2018push_back\u2019 in \u2018col\u2019, which is of non-class type \u2018\
    long int\u2019\n  105 |             col.push_back(col_index);\n      |       \
    \          ^~~~~~~~~\n/tmp/tmp01vc3p5t.cpp:114:1: error: expected unqualified-id\
    \ before \u2018}\u2019 token\n  114 | }\n      | ^\n/tmp/tmp01vc3p5t.cpp:115:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \  115 | int main() {\n      |            ^\n/tmp/tmp01vc3p5t.cpp:123:1: error:\
    \ expected \u2018}\u2019 at end of input\n  123 | }\n      | ^\n/tmp/tmp01vc3p5t.cpp:19:89:\
    \ note: to match this \u2018{\u2019\n   19 | std::vector<std::tuple<long, long>>\
    \ get_row(std::vector<std::vector<long>> lst, long x) {\n      |             \
    \                                                                            ^\n\
    /tmp/tmp01vc3p5t.cpp:123:1: warning: no return statement in function returning\
    \ non-void [-Wreturn-type]\n  123 | }\n      | ^\nIn file included from /usr/include/c++/9/numeric:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:84,\n\
    \                 from /tmp/tmp01vc3p5t.cpp:2:\n/usr/include/c++/9/bits/stl_numeric.h:\
    \ In instantiation of \u2018_Tp std::accumulate(_InputIterator, _InputIterator,\
    \ _Tp) [with _InputIterator = __gnu_cxx::__normal_iterator<std::vector<long int>*,\
    \ std::vector<std::vector<long int> > >; _Tp = int]\u2019:\n/tmp/tmp01vc3p5t.cpp:25:61:\
    \   required from here\n/usr/include/c++/9/bits/stl_numeric.h:139:39: error: no\
    \ match for \u2018operator+\u2019 (operand types are \u2018int\u2019 and \u2018\
    std::vector<long int>\u2019)\n  139 |  __init = _GLIBCXX_MOVE_IF_20(__init) +\
    \ *__first;\n      |                                       ^\nIn file included\
    \ from /usr/include/c++/9/bits/stl_algobase.h:67,\n                 from /usr/include/c++/9/bits/char_traits.h:39,\n\
    \                 from /usr/include/c++/9/ios:40,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp01vc3p5t.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:423:5: note:\
    \ candidate: \u2018template<class _Iterator> std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:423:5: note:\
    \   template argument deduction/substitution failed:\nIn file included from /usr/include/c++/9/numeric:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:84,\n\
    \                 from /tmp/tmp01vc3p5t.cpp:2:\n/usr/include/c++/9/bits/stl_numeric.h:139:39:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n  139 |  __init = _GLIBCXX_MOVE_IF_20(__init) + *__first;\n      |         \
    \                              ^\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/char_traits.h:39,\n           \
    \      from /usr/include/c++/9/ios:40,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp01vc3p5t.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:1216:5: note:\
    \ candidate: \u2018template<class _Iterator> std::move_iterator<_IteratorL> std::operator+(typename\
    \ std::move_iterator<_IteratorL>::difference_type, const std::move_iterator<_IteratorL>&)\u2019\
    \n 1216 |     operator+(typename move_iterator<_Iterator>::difference_type __n,\n\
    \      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:1216:5: note:  \
    \ template argument deduction/substitution failed:\nIn file included from /usr/include/c++/9/numeric:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:84,\n\
    \                 from /tmp/tmp01vc3p5t.cpp:2:\n/usr/include/c++/9/bits/stl_numeric.h:139:39:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::move_iterator<_IteratorL>\u2019\
    \n  139 |  __init = _GLIBCXX_MOVE_IF_20(__init) + *__first;\n      |         \
    \                              ^\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp01vc3p5t.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6023:5:\
    \ note: candidate: \u2018template<class _CharT, class _Traits, class _Alloc> std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc> std::operator+(const std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>&, const std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&)\u2019\n\
    \ 6023 |     operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,\n \
    \     |     ^~~~~~~~\n/usr/include/c++/9/bits/basic_string.h:6023:5: note:   template\
    \ argument deduction/substitution failed:\nIn file included from /usr/include/c++/9/numeric:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:84,\n\
    \                 from /tmp/tmp01vc3p5t.cpp:2:\n/usr/include/c++/9/bits/stl_numeric.h:139:39:\
    \ note:   mismatched types \u2018const std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>\u2019 and \u2018int\u2019\n  139 |  __init = _GLIBCXX_MOVE_IF_20(__init)\
    \ + *__first;\n      |                                       ^\nIn file included\
    \ from /usr/include/c++/9/string:56,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp01vc3p5t.cpp:2:\n/usr/include/c++/9/bits/basic_string.tcc:1158:5: note:\
    \ candidate: \u2018template<class _CharT, class _Traits, class _Alloc> std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc> std::operator+(const _CharT*, const std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>&)\u2019\n 1158 |     operator+(const _CharT* __lhs,\n     \
    \ |     ^~~~~~~~\n/usr/include/c++/9/bits/basic_string.tcc:1158:5: note:   template\
    \ argument deduction/substitution failed:\nIn file included from /usr/include/c++/9/numeric:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:84,\n\
    \                 from /tmp/tmp01vc3p5t.cpp:2:\n/usr/include/c++/9/bits/stl_numeric.h:139:39:\
    \ note:   mismatched types \u2018const _CharT*\u2019 and \u2018int\u2019\n  139\
    \ |  __init = _GLIBCXX_MOVE_IF_20(__init) + *__first;\n      |               \
    \                        ^\nIn file included from /usr/include/c++/9/string:56,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp01vc3p5t.cpp:2:\n/usr/include/c++/9/bits/basic_string.tcc:1174:5:\
    \ note: candidate: \u2018template<class _CharT, class _Traits, class _Alloc> std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc> std::operator+(_CharT, const std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>&)\u2019\n 1174 |     operator+(_CharT __lhs, const basic_string<_CharT,\
    \ _Traits, _Alloc>& __rhs)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/basic_string.tcc:1174:5:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/9/numeric:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:84,\n\
    \                 from /tmp/tmp01vc3p5t.cpp:2:\n/usr/include/c++/9/bits/stl_numeric.h:139:39:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>\u2019\n  139 |  __init = _GLIBCXX_MOVE_IF_20(__init) + *__first;\n\
    \      |                                       ^\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp01vc3p5t.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6060:5:\
    \ note: candidate: \u2018template<class _CharT, class _Traits, class _Alloc> std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc> std::operator+(const std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>&, const _CharT*)\u2019\n 6060 |     operator+(const basic_string<_CharT,\
    \ _Traits, _Alloc>& __lhs,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/basic_string.h:6060:5:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/9/numeric:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:84,\n\
    \                 from /tmp/tmp01vc3p5t.cpp:2:\n/usr/include/c++/9/bits/stl_numeric.h:139:39:\
    \ note:   mismatched types \u2018const std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>\u2019 and \u2018int\u2019\n  139 |  __init = _GLIBCXX_MOVE_IF_20(__init)\
    \ + *__first;\n      |                                       ^\nIn file included\
    \ from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp01vc3p5t.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6076:5: note:\
    \ candidate: \u2018template<class _CharT, class _Traits, class _Alloc> std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc> std::operator+(const std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>&, _CharT)\u2019\n 6076 |     operator+(const basic_string<_CharT, _Traits,\
    \ _Alloc>& __lhs, _CharT __rhs)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/basic_string.h:6076:5:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/9/numeric:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:84,\n\
    \                 from /tmp/tmp01vc3p5t.cpp:2:\n/usr/include/c++/9/bits/stl_numeric.h:139:39:\
    \ note:   mismatched types \u2018const std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>\u2019 and \u2018int\u2019\n  139 |  __init = _GLIBCXX_MOVE_IF_20(__init)\
    \ + *__first;\n      |                                       ^\nIn file included\
    \ from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp01vc3p5t.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6088:5: note:\
    \ candidate: \u2018template<class _CharT, class _Traits, class _Alloc> std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc> std::operator+(std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>&&, const std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&)\u2019\
    \n 6088 |     operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,\n     \
    \ |     ^~~~~~~~\n/usr/include/c++/9/bits/basic_string.h:6088:5: note:   template\
    \ argument deduction/substitution failed:\nIn file included from /usr/include/c++/9/numeric:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:84,\n\
    \                 from /tmp/tmp01vc3p5t.cpp:2:\n/usr/include/c++/9/bits/stl_numeric.h:139:39:\
    \ note:   mismatched types \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>\u2019\
    \ and \u2018int\u2019\n  139 |  __init = _GLIBCXX_MOVE_IF_20(__init) + *__first;\n\
    \      |                                       ^\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp01vc3p5t.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6094:5:\
    \ note: candidate: \u2018template<class _CharT, class _Traits, class _Alloc> std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc> std::operator+(const std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>&, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&&)\u2019\n 6094\
    \ |     operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,\n      |\
    \     ^~~~~~~~\n/usr/include/c++/9/bits/basic_string.h:6094:5: note:   template\
    \ argument deduction/substitution failed:\nIn file included from /usr/include/c++/9/numeric:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:84,\n\
    \                 from /tmp/tmp01vc3p5t.cpp:2:\n/usr/include/c++/9/bits/stl_numeric.h:139:39:\
    \ note:   mismatched types \u2018const std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>\u2019 and \u2018int\u2019\n  139 |  __init = _GLIBCXX_MOVE_IF_20(__init)\
    \ + *__first;\n      |                                       ^\nIn file included\
    \ from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp01vc3p5t.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6100:5: note:\
    \ candidate: \u2018template<class _CharT, class _Traits, class _Alloc> std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc> std::operator+(std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>&&, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&&)\u2019\n 6100\
    \ |     operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,\n      |    \
    \ ^~~~~~~~\n/usr/include/c++/9/bits/basic_string.h:6100:5: note:   template argument\
    \ deduction/substitution failed:\nIn file included from /usr/include/c++/9/numeric:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:84,\n\
    \                 from /tmp/tmp01vc3p5t.cpp:2:\n/usr/include/c++/9/bits/stl_numeric.h:139:39:\
    \ note:   mismatched types \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>\u2019\
    \ and \u2018int\u2019\n  139 |  __init = _GLIBCXX_MOVE_IF_20(__init) + *__first;\n\
    \      |                                       ^\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp01vc3p5t.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6112:5:\
    \ note: candidate: \u2018template<class _CharT, class _Traits, class _Alloc> std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc> std::operator+(const _CharT*, std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>&&)\u2019\n 6112 |     operator+(const _CharT* __lhs,\n    \
    \  |     ^~~~~~~~\n/usr/include/c++/9/bits/basic_string.h:6112:5: note:   template\
    \ argument deduction/substitution failed:\nIn file included from /usr/include/c++/9/numeric:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:84,\n\
    \                 from /tmp/tmp01vc3p5t.cpp:2:\n/usr/include/c++/9/bits/stl_numeric.h:139:39:\
    \ note:   mismatched types \u2018const _CharT*\u2019 and \u2018int\u2019\n  139\
    \ |  __init = _GLIBCXX_MOVE_IF_20(__init) + *__first;\n      |               \
    \                        ^\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp01vc3p5t.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6118:5:\
    \ note: candidate: \u2018template<class _CharT, class _Traits, class _Alloc> std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc> std::operator+(_CharT, std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>&&)\u2019\n 6118 |     operator+(_CharT __lhs,\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/basic_string.h:6118:5: note:   template argument deduction/substitution\
    \ failed:\nIn file included from /usr/include/c++/9/numeric:62,\n            \
    \     from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:84,\n           \
    \      from /tmp/tmp01vc3p5t.cpp:2:\n/usr/include/c++/9/bits/stl_numeric.h:139:39:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>\u2019\n  139 |  __init = _GLIBCXX_MOVE_IF_20(__init) + *__first;\n\
    \      |                                       ^\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp01vc3p5t.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6124:5:\
    \ note: candidate: \u2018template<class _CharT, class _Traits, class _Alloc> std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc> std::operator+(std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>&&, const _CharT*)\u2019\n 6124 |     operator+(basic_string<_CharT,\
    \ _Traits, _Alloc>&& __lhs,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/basic_string.h:6124:5:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/9/numeric:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:84,\n\
    \                 from /tmp/tmp01vc3p5t.cpp:2:\n/usr/include/c++/9/bits/stl_numeric.h:139:39:\
    \ note:   mismatched types \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>\u2019\
    \ and \u2018int\u2019\n  139 |  __init = _GLIBCXX_MOVE_IF_20(__init) + *__first;\n\
    \      |                                       ^\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp01vc3p5t.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6130:5:\
    \ note: candidate: \u2018template<class _CharT, class _Traits, class _Alloc> std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc> std::operator+(std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>&&, _CharT)\u2019\n 6130 |     operator+(basic_string<_CharT, _Traits,\
    \ _Alloc>&& __lhs,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/basic_string.h:6130:5:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/9/numeric:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:84,\n\
    \                 from /tmp/tmp01vc3p5t.cpp:2:\n/usr/include/c++/9/bits/stl_numeric.h:139:39:\
    \ note:   mismatched types \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>\u2019\
    \ and \u2018int\u2019\n  139 |  __init = _GLIBCXX_MOVE_IF_20(__init) + *__first;\n\
    \      |                                       ^\nIn file included from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp01vc3p5t.cpp:2:\n/usr/include/c++/9/complex:331:5:\
    \ note: candidate: \u2018template<class _Tp> std::complex<_Tp> std::operator+(const\
    \ std::complex<_Tp>&, const std::complex<_Tp>&)\u2019\n  331 |     operator+(const\
    \ complex<_Tp>& __x, const complex<_Tp>& __y)\n      |     ^~~~~~~~\n/usr/include/c++/9/complex:331:5:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/9/numeric:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:84,\n\
    \                 from /tmp/tmp01vc3p5t.cpp:2:\n/usr/include/c++/9/bits/stl_numeric.h:139:39:\
    \ note:   mismatched types \u2018const std::complex<_Tp>\u2019 and \u2018int\u2019\
    \n  139 |  __init = _GLIBCXX_MOVE_IF_20(__init) + *__first;\n      |         \
    \                              ^\nIn file included from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp01vc3p5t.cpp:2:\n/usr/include/c++/9/complex:340:5:\
    \ note: candidate: \u2018template<class _Tp> std::complex<_Tp> std::operator+(const\
    \ std::complex<_Tp>&, const _Tp&)\u2019\n  340 |     operator+(const complex<_Tp>&\
    \ __x, const _Tp& __y)\n      |     ^~~~~~~~\n/usr/include/c++/9/complex:340:5:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/9/numeric:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:84,\n\
    \                 from /tmp/tmp01vc3p5t.cpp:2:\n/usr/include/c++/9/bits/stl_numeric.h:139:39:\
    \ note:   mismatched types \u2018const std::complex<_Tp>\u2019 and \u2018int\u2019\
    \n  139 |  __init = _GLIBCXX_MOVE_IF_20(__init) + *__first;\n      |         \
    \                              ^\nIn file included from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp01vc3p5t.cpp:2:\n/usr/include/c++/9/complex:349:5:\
    \ note: candidate: \u2018template<class _Tp> std::complex<_Tp> std::operator+(const\
    \ _Tp&, const std::complex<_Tp>&)\u2019\n  349 |     operator+(const _Tp& __x,\
    \ const complex<_Tp>& __y)\n      |     ^~~~~~~~\n/usr/include/c++/9/complex:349:5:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/9/numeric:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:84,\n\
    \                 from /tmp/tmp01vc3p5t.cpp:2:\n/usr/include/c++/9/bits/stl_numeric.h:139:39:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::complex<_Tp>\u2019\
    \n  139 |  __init = _GLIBCXX_MOVE_IF_20(__init) + *__first;\n      |         \
    \                              ^\nIn file included from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp01vc3p5t.cpp:2:\n/usr/include/c++/9/complex:450:5:\
    \ note: candidate: \u2018template<class _Tp> std::complex<_Tp> std::operator+(const\
    \ std::complex<_Tp>&)\u2019\n  450 |     operator+(const complex<_Tp>& __x)\n\
    \      |     ^~~~~~~~\n/usr/include/c++/9/complex:450:5: note:   template argument\
    \ deduction/substitution failed:\nIn file included from /usr/include/c++/9/numeric:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:84,\n\
    \                 from /tmp/tmp01vc3p5t.cpp:2:\n/usr/include/c++/9/bits/stl_numeric.h:139:39:\
    \ note:   mismatched types \u2018const std::complex<_Tp>\u2019 and \u2018int\u2019\
    \n  139 |  __init = _GLIBCXX_MOVE_IF_20(__init) + *__first;\n      |         \
    \                              ^\nIn file included from /usr/include/c++/9/deque:67,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:68,\n\
    \                 from /tmp/tmp01vc3p5t.cpp:2:\n/usr/include/c++/9/bits/stl_deque.h:393:5:\
    \ note: candidate: \u2018template<class _Tp, class _Ref, class _Ptr> std::_Deque_iterator<_Tp,\
    \ _Ref, _Ptr> std::operator+(std::ptrdiff_t, const std::_Deque_iterator<_Tp, _Ref,\
    \ _Ptr>&)\u2019\n  393 |     operator+(ptrdiff_t __n, const _Deque_iterator<_Tp,\
    \ _Ref, _Ptr>& __x)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_deque.h:393:5:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/9/numeric:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:84,\n\
    \                 from /tmp/tmp01vc3p5t.cpp:2:\n/usr/include/c++/9/bits/stl_numeric.h:139:39:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::_Deque_iterator<_Tp,\
    \ _Ref, _Ptr>\u2019\n  139 |  __init = _GLIBCXX_MOVE_IF_20(__init) + *__first;\n\
    \      |                                       ^\nIn file included from /usr/include/c++/9/vector:68,\n\
    \                 from /usr/include/c++/9/queue:61,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:86,\n\
    \                 from /tmp/tmp01vc3p5t.cpp:2:\n/usr/include/c++/9/bits/stl_bvector.h:303:3:\
    \ note: candidate: \u2018std::_Bit_iterator std::operator+(std::ptrdiff_t, const\
    \ std::_Bit_iterator&)\u2019\n  303 |   operator+(ptrdiff_t __n, const _Bit_iterator&\
    \ __x)\n      |   ^~~~~~~~\n/usr/include/c++/9/bits/stl_bvector.h:303:49: note:\
    \   no known conversion for argument 2 from \u2018std::vector<long int>\u2019\
    \ to \u2018const std::_Bit_iterator&\u2019\n  303 |   operator+(ptrdiff_t __n,\
    \ const _Bit_iterator& __x)\n      |                            ~~~~~~~~~~~~~~~~~~~~~^~~\n\
    /usr/include/c++/9/bits/stl_bvector.h:393:3: note: candidate: \u2018std::_Bit_const_iterator\
    \ std::operator+(std::ptrdiff_t, const std::_Bit_const_iterator&)\u2019\n  393\
    \ |   operator+(ptrdiff_t __n, const _Bit_const_iterator& __x)\n      |   ^~~~~~~~\n\
    /usr/include/c++/9/bits/stl_bvector.h:393:55: note:   no known conversion for\
    \ argument 2 from \u2018std::vector<long int>\u2019 to \u2018const std::_Bit_const_iterator&\u2019\
    \n  393 |   operator+(ptrdiff_t __n, const _Bit_const_iterator& __x)\n      |\
    \                            ~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\nIn file included\
    \ from /usr/include/c++/9/valarray:603,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n\
    \                 from /tmp/tmp01vc3p5t.cpp:2:\n/usr/include/c++/9/bits/valarray_after.h:405:5:\
    \ note: candidate: \u2018template<class _Dom1, class _Dom2> std::_Expr<std::__detail::_BinClos<std::__plus,\
    \ std::_Expr, std::_Expr, _Dom1, _Dom2>, typename std::__fun<std::__plus, typename\
    \ _Dom1::value_type>::result_type> std::operator+(const std::_Expr<_Dom1, typename\
    \ _Dom1::value_type>&, const std::_Expr<_Dom2, typename _Dom2::value_type>&)\u2019\
    \n  405 |     _DEFINE_EXPR_BINARY_OPERATOR(+, __plus)\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /usr/include/c++/9/bits/valarray_after.h:405:5: note:   template argument deduction/substitution\
    \ failed:\nIn file included from /usr/include/c++/9/numeric:62,\n            \
    \     from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:84,\n           \
    \      from /tmp/tmp01vc3p5t.cpp:2:\n/usr/include/c++/9/bits/stl_numeric.h:139:39:\
    \ note:   mismatched types \u2018const std::_Expr<_Dom1, typename _Dom1::value_type>\u2019\
    \ and \u2018int\u2019\n  139 |  __init = _GLIBCXX_MOVE_IF_20(__init) + *__first;\n\
    \      |                                       ^\nIn file included from /usr/include/c++/9/valarray:603,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n\
    \                 from /tmp/tmp01vc3p5t.cpp:2:\n/usr/include/c++/9/bits/valarray_after.h:405:5:\
    \ note: candidate: \u2018template<class _Dom> std::_Expr<std::__detail::_BinClos<std::__plus,\
    \ std::_Expr, std::_Constant, _Dom, typename _Dom::value_type>, typename std::__fun<std::__plus,\
    \ typename _Dom1::value_type>::result_type> std::operator+(const std::_Expr<_Dom1,\
    \ typename _Dom1::value_type>&, const typename _Dom::value_type&)\u2019\n  405\
    \ |     _DEFINE_EXPR_BINARY_OPERATOR(+, __plus)\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /usr/include/c++/9/bits/valarray_after.h:405:5: note:   template argument deduction/substitution\
    \ failed:\nIn file included from /usr/include/c++/9/numeric:62,\n            \
    \     from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:84,\n           \
    \      from /tmp/tmp01vc3p5t.cpp:2:\n/usr/include/c++/9/bits/stl_numeric.h:139:39:\
    \ note:   mismatched types \u2018const std::_Expr<_Dom1, typename _Dom1::value_type>\u2019\
    \ and \u2018int\u2019\n  139 |  __init = _GLIBCXX_MOVE_IF_20(__init) + *__first;\n\
    \      |                                       ^\nIn file included from /usr/include/c++/9/valarray:603,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n\
    \                 from /tmp/tmp01vc3p5t.cpp:2:\n/usr/include/c++/9/bits/valarray_after.h:405:5:\
    \ note: candidate: \u2018template<class _Dom> std::_Expr<std::__detail::_BinClos<std::__plus,\
    \ std::_Constant, std::_Expr, typename _Dom::value_type, _Dom>, typename std::__fun<std::__plus,\
    \ typename _Dom1::value_type>::result_type> std::operator+(const typename _Dom::value_type&,\
    \ const std::_Expr<_Dom1, typename _Dom1::value_type>&)\u2019\n  405 |     _DEFINE_EXPR_BINARY_OPERATOR(+,\
    \ __plus)\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/usr/include/c++/9/bits/valarray_after.h:405:5:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/9/numeric:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:84,\n\
    \                 from /tmp/tmp01vc3p5t.cpp:2:\n/usr/include/c++/9/bits/stl_numeric.h:139:39:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::_Expr<_Dom1,\
    \ typename _Dom1::value_type>\u2019\n  139 |  __init = _GLIBCXX_MOVE_IF_20(__init)\
    \ + *__first;\n      |                                       ^\nIn file included\
    \ from /usr/include/c++/9/valarray:603,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n\
    \                 from /tmp/tmp01vc3p5t.cpp:2:\n/usr/include/c++/9/bits/valarray_after.h:405:5:\
    \ note: candidate: \u2018template<class _Dom> std::_Expr<std::__detail::_BinClos<std::__plus,\
    \ std::_Expr, std::_ValArray, _Dom, typename _Dom::value_type>, typename std::__fun<std::__plus,\
    \ typename _Dom1::value_type>::result_type> std::operator+(const std::_Expr<_Dom1,\
    \ typename _Dom1::value_type>&, const std::valarray<typename _Dom::value_type>&)\u2019\
    \n  405 |     _DEFINE_EXPR_BINARY_OPERATOR(+, __plus)\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /usr/include/c++/9/bits/valarray_after.h:405:5: note:   template argument deduction/substitution\
    \ failed:\nIn file included from /usr/include/c++/9/numeric:62,\n            \
    \     from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:84,\n           \
    \      from /tmp/tmp01vc3p5t.cpp:2:\n/usr/include/c++/9/bits/stl_numeric.h:139:39:\
    \ note:   mismatched types \u2018const std::_Expr<_Dom1, typename _Dom1::value_type>\u2019\
    \ and \u2018int\u2019\n  139 |  __init = _GLIBCXX_MOVE_IF_20(__init) + *__first;\n\
    \      |                                       ^\nIn file included from /usr/include/c++/9/valarray:603,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n\
    \                 from /tmp/tmp01vc3p5t.cpp:2:\n/usr/include/c++/9/bits/valarray_after.h:405:5:\
    \ note: candidate: \u2018template<class _Dom> std::_Expr<std::__detail::_BinClos<std::__plus,\
    \ std::_ValArray, std::_Expr, typename _Dom::value_type, _Dom>, typename std::__fun<std::__plus,\
    \ typename _Dom1::value_type>::result_type> std::operator+(const std::valarray<typename\
    \ _Dom::value_type>&, const std::_Expr<_Dom1, typename _Dom1::value_type>&)\u2019\
    \n  405 |     _DEFINE_EXPR_BINARY_OPERATOR(+, __plus)\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /usr/include/c++/9/bits/valarray_after.h:405:5: note:   template argument deduction/substitution\
    \ failed:\nIn file included from /usr/include/c++/9/numeric:62,\n            \
    \     from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:84,\n           \
    \      from /tmp/tmp01vc3p5t.cpp:2:\n/usr/include/c++/9/bits/stl_numeric.h:139:39:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::_Expr<_Dom1,\
    \ typename _Dom1::value_type>\u2019\n  139 |  __init = _GLIBCXX_MOVE_IF_20(__init)\
    \ + *__first;\n      |                                       ^\nIn file included\
    \ from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n               \
    \  from /tmp/tmp01vc3p5t.cpp:2:\n/usr/include/c++/9/valarray:1185:1: note: candidate:\
    \ \u2018template<class _Tp> std::_Expr<std::__detail::_BinClos<std::__plus, std::_ValArray,\
    \ std::_ValArray, _Tp, _Tp>, typename std::__fun<std::__plus, _Tp>::result_type>\
    \ std::operator+(const std::valarray<_Tp>&, const std::valarray<_Tp>&)\u2019\n\
    \ 1185 | _DEFINE_BINARY_OPERATOR(+, __plus)\n      | ^~~~~~~~~~~~~~~~~~~~~~~\n\
    /usr/include/c++/9/valarray:1185:1: note:   template argument deduction/substitution\
    \ failed:\nIn file included from /usr/include/c++/9/numeric:62,\n            \
    \     from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:84,\n           \
    \      from /tmp/tmp01vc3p5t.cpp:2:\n/usr/include/c++/9/bits/stl_numeric.h:139:39:\
    \ note:   mismatched types \u2018const std::valarray<_Tp>\u2019 and \u2018int\u2019\
    \n  139 |  __init = _GLIBCXX_MOVE_IF_20(__init) + *__first;\n      |         \
    \                              ^\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n\
    \                 from /tmp/tmp01vc3p5t.cpp:2:\n/usr/include/c++/9/valarray:1185:1:\
    \ note: candidate: \u2018template<class _Tp> std::_Expr<std::__detail::_BinClos<std::__plus,\
    \ std::_ValArray, std::_Constant, _Tp, _Tp>, typename std::__fun<std::__plus,\
    \ _Tp>::result_type> std::operator+(const std::valarray<_Tp>&, const typename\
    \ std::valarray<_Tp>::value_type&)\u2019\n 1185 | _DEFINE_BINARY_OPERATOR(+, __plus)\n\
    \      | ^~~~~~~~~~~~~~~~~~~~~~~\n/usr/include/c++/9/valarray:1185:1: note:  \
    \ template argument deduction/substitution failed:\nIn file included from /usr/include/c++/9/numeric:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:84,\n\
    \                 from /tmp/tmp01vc3p5t.cpp:2:\n/usr/include/c++/9/bits/stl_numeric.h:139:39:\
    \ note:   mismatched types \u2018const std::valarray<_Tp>\u2019 and \u2018int\u2019\
    \n  139 |  __init = _GLIBCXX_MOVE_IF_20(__init) + *__first;\n      |         \
    \                              ^\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n\
    \                 from /tmp/tmp01vc3p5t.cpp:2:\n/usr/include/c++/9/valarray:1185:1:\
    \ note: candidate: \u2018template<class _Tp> std::_Expr<std::__detail::_BinClos<std::__plus,\
    \ std::_Constant, std::_ValArray, _Tp, _Tp>, typename std::__fun<std::__plus,\
    \ _Tp>::result_type> std::operator+(const typename std::valarray<_Tp>::value_type&,\
    \ const std::valarray<_Tp>&)\u2019\n 1185 | _DEFINE_BINARY_OPERATOR(+, __plus)\n\
    \      | ^~~~~~~~~~~~~~~~~~~~~~~\n/usr/include/c++/9/valarray:1185:1: note:  \
    \ template argument deduction/substitution failed:\nIn file included from /usr/include/c++/9/numeric:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:84,\n\
    \                 from /tmp/tmp01vc3p5t.cpp:2:\n/usr/include/c++/9/bits/stl_numeric.h:139:39:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::valarray<_Tp>\u2019\
    \n  139 |  __init = _GLIBCXX_MOVE_IF_20(__init) + *__first;\n      |         \
    \                              ^\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/char_traits.h:39,\n           \
    \      from /usr/include/c++/9/ios:40,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp01vc3p5t.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:993:5: note:\
    \ candidate: \u2018template<class _Iterator, class _Container> __gnu_cxx::__normal_iterator<_Iterator,\
    \ _Container> __gnu_cxx::operator+(typename __gnu_cxx::__normal_iterator<_Iterator,\
    \ _Container>::difference_type, const __gnu_cxx::__normal_iterator<_Iterator,\
    \ _Container>&)\u2019\n  993 |     operator+(typename __normal_iterator<_Iterator,\
    \ _Container>::difference_type\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:993:5:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/9/numeric:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:84,\n\
    \                 from /tmp/tmp01vc3p5t.cpp:2:\n/usr/include/c++/9/bits/stl_numeric.h:139:39:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const __gnu_cxx::__normal_iterator<_Iterator,\
    \ _Container>\u2019\n  139 |  __init = _GLIBCXX_MOVE_IF_20(__init) + *__first;\n\
    \      |                                       ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    std::vector<std::tuple<long, long>> res;\n    std::vector<long>\
    \ row;\n    std::vector<long> col;\n    long row_index = 0;\n    long col_index\
    \ = 0;\n    long row_size = lst.size();\n    long col_size = lst[0].size();\n\
    \    long row_max = std::max(row_size, col_size);\n    long col_max = std::max(row_size,\
    \ col_size);\n    for (long i = 0; i < row_size; i++) {\n        row.push_back(0);\n\
    \    }\n    for (long i = 0; i < col_size; i++) {\n        col.push_back(0);\n\
    \    }\n    for (long i = 0; i < row_size; i++) {\n        for (long j = 0; j\
    \ < col_size; j++) {\n            if (lst[i][j] == x) {\n                row.push_back(j);\n\
    \                col.push_back(i);\n            }\n        }\n    }\n    std::sort(row.begin(),\
    \ row.end());\n    std::sort(col.begin(), col.end());\n    for (long i = 0; i\
    \ < row_size; i++) {\n        for (long j = 0; j < col_size; j++) {\n        \
    \    if (row[i] == j) {\n                res.push_back(std::make_tuple(i, col[j]));\n\
    \            }\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = get_row;\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "tmpurvjl3pl: /tmp/tmpurvjl3pl.cpp:56: int main(): Assertion `candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    std::vector<std::tuple<long, long>> res;\n    long n = lst.size();\n\
    \    long m = lst[0].size();\n    long cnt = 0;\n    for (long i = 0; i < n; i++)\
    \ {\n        for (long j = 0; j < m; j++) {\n            if (lst[i][j] == x) {\n\
    \                res.push_back({i, j});\n                cnt++;\n            }\n\
    \        }\n    }\n    if (cnt == 0) {\n        res.push_back(std::make_tuple(0,\
    \ 0));\n    }\n    std::sort(res.begin(), res.end(), [](const std::tuple<long,\
    \ long> &a, const std::tuple<long, long> &b) {\n        return std::get<0>(a)\
    \ < std::get<0>(b);\n    });\n    std::sort(res.begin(), res.end(), [](const std::tuple<long,\
    \ long> &a, const std::tuple<long, long> &b) {\n        return std::get<1>(a)\
    \ < std::get<1>(b);\n    });\n    return res;\n}\nint main() {\n    auto candidate\
    \ = get_row;\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "tmplf5yqdvc: /tmp/tmplf5yqdvc.cpp:45: int main(): Assertion `candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    std::vector<std::tuple<long, long>> res;\n    for(auto &row\
    \ : lst) {\n        for(auto &el : row) {\n            if(el == x) {\n       \
    \         res.push_back(std::make_tuple(row.size() - 1, row.size() - 1));\n  \
    \          }\n        }\n    }\n    std::sort(res.begin(), res.end(), [](auto\
    \ &a, auto &b) { return std::get<0>(a) < std::get<0>(b); });\n    std::sort(res.begin(),\
    \ res.end(), [](auto &a, auto &b) { return std::get<1>(a) < std::get<1>(b); });\n\
    \    return res;\n}\nint main() {\n    auto candidate = get_row;\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "tmp_0gfzhwr: /tmp/tmp_0gfzhwr.cpp:34: int main(): Assertion `candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    std::vector<std::tuple<long, long>> res;\n    long n = lst.size();\n\
    \    long m = lst[0].size();\n    long i, j, k;\n    long row = 0;\n    long col\
    \ = 0;\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < m; j++) {\n   \
    \         if (lst[i][j] == x) {\n                res.push_back(std::make_tuple(i,\
    \ j));\n                row = i;\n                col = j;\n                break;\n\
    \            }\n        }\n    }\n    std::sort(res.begin(), res.end(), [](const\
    \ std::tuple<long, long>& a, const std::tuple<long, long>& b) {\n        return\
    \ std::get<0>(a) < std::get<0>(b);\n    });\n    std::sort(res.begin(), res.end(),\
    \ [](const std::tuple<long, long>& a, const std::tuple<long, long>& b) {\n   \
    \     return std::get<1>(a) < std::get<1>(b);\n    });\n    for (i = 0; i < n;\
    \ i++) {\n        for (j = 0; j < m; j++) {\n            if (std::get<0>(res.at(i))\
    \ == row) {\n                res.at(i) = std::make_tuple(i, j);\n            \
    \    break;\n            }\n        }\n    }\n    return res;\n}\nint main() {\n\
    \    auto candidate = get_row;\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "tmpj87klyjw: /tmp/tmpj87klyjw.cpp:54: int main(): Assertion `candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    std::vector<std::tuple<long, long>> res;\n    long n = lst.size();\n\
    \    long m = lst[0].size();\n    long cnt = 0;\n    for (long i = 0; i < n; i++)\
    \ {\n        cnt += lst[i][i];\n        if (cnt > x) {\n            break;\n \
    \       }\n    }\n    for (long i = 0; i < m; i++) {\n        cnt += lst[0][i];\n\
    \        if (cnt > x) {\n            break;\n        }\n    }\n    for (long i\
    \ = 0; i < n; i++) {\n        for (long j = 0; j < m; j++) {\n            cnt\
    \ += lst[i][j];\n            if (cnt > x) {\n                break;\n        \
    \    }\n        }\n        if (cnt > x) {\n            break;\n        }\n   \
    \     res.push_back(std::make_tuple(i, j));\n    }\n    std::sort(res.begin(),\
    \ res.end(), [](const std::tuple<long, long>& a, const std::tuple<long, long>&\
    \ b) {\n        return std::get<0>(a) < std::get<0>(b);\n    });\n    std::sort(res.begin(),\
    \ res.end(), [](const std::tuple<long, long>& a, const std::tuple<long, long>&\
    \ b) {\n        return std::get<1>(a) < std::get<1>(b);\n    });\n    return res;\n\
    }\nint main() {\n    auto candidate = get_row;\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpjchy0yv2.cpp: In function \u2018std::vector<std::tuple<long int,\
    \ long int> > get_row(std::vector<std::vector<long int> >, long int)\u2019:\n\
    /tmp/tmpjchy0yv2.cpp:46:42: error: \u2018j\u2019 was not declared in this scope\n\
    \   46 |         res.push_back(std::make_tuple(i, j));\n      |              \
    \                            ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    std::vector<std::tuple<long, long>> res;\n    std::vector<std::vector<long>>\
    \ row;\n    std::vector<long> col;\n    long rowId = 0;\n    long colId = 0;\n\
    \    for (auto &v : lst) {\n        row.push_back(v);\n        colId = col.size();\n\
    \        for (auto &v2 : v) {\n            if (v2 != x) {\n                col.push_back(v2);\n\
    \            }\n        }\n        if (col.size() == rowId) {\n            res.push_back(std::make_tuple(rowId,\
    \ colId));\n            rowId++;\n            colId = 0;\n        }\n    }\n \
    \   return res;\n}\nint main() {\n    auto candidate = get_row;\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "tmphv6cbve9: /tmp/tmphv6cbve9.cpp:43: int main(): Assertion `candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    std::vector<std::tuple<long, long>> res;\n    std::vector<std::vector<long>>\
    \ temp;\n    std::vector<long> row;\n    std::vector<long> col;\n    long cnt\
    \ = 0;\n    for(auto &i : lst) {\n        row.push_back(i[0]);\n        col.push_back(i.size()\
    \ - 1);\n        temp.push_back(i);\n    }\n    for(auto &i : temp) {\n      \
    \  for(auto &j : i) {\n            if(j == x) {\n                res.push_back({cnt++,\
    \ col.back()});\n            }\n        }\n    }\n    std::sort(res.begin(), res.end(),\
    \ [](std::tuple<long, long> a, std::tuple<long, long> b) {\n        return std::get<0>(a)\
    \ < std::get<0>(b);\n    });\n    std::sort(res.begin(), res.end(), [](std::tuple<long,\
    \ long> a, std::tuple<long, long> b) {\n        return std::get<1>(a) < std::get<1>(b);\n\
    \    });\n    return res;\n}\nint main() {\n    auto candidate = get_row;\n  \
    \  assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "tmpbkbz_ole: /tmp/tmpbkbz_ole.cpp:47: int main(): Assertion `candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    // Write your code here\n    std::vector<std::tuple<long,\
    \ long>> res;\n    for(auto &row : lst){\n        for(auto &col : row){\n    \
    \        if(col == x){\n                res.push_back({row.size() - 1, col.size()\
    \ - 1});\n            }\n        }\n    }\n    std::sort(res.begin(), res.end(),\
    \ [](std::tuple<long, long> a, std::tuple<long, long> b){\n        return std::get<0>(a)\
    \ < std::get<0>(b);\n    });\n    std::sort(res.begin(), res.end(), [](std::tuple<long,\
    \ long> a, std::tuple<long, long> b){\n        return std::get<1>(a) < std::get<1>(b);\n\
    \    });\n    return res;\n}\nint main() {\n    auto candidate = get_row;\n  \
    \  assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmppmx543_m.cpp: In function \u2018std::vector<std::tuple<long int,\
    \ long int> > get_row(std::vector<std::vector<long int> >, long int)\u2019:\n\
    /tmp/tmppmx543_m.cpp:25:52: error: request for member \u2018size\u2019 in \u2018\
    col\u2019, which is of non-class type \u2018long int\u2019\n   25 |          \
    \       res.push_back({row.size() - 1, col.size() - 1});\n      |            \
    \                                        ^~~~\n/tmp/tmppmx543_m.cpp:25:63: error:\
    \ no matching function for call to \u2018std::vector<std::tuple<long int, long\
    \ int> >::push_back(<brace-enclosed initializer list>)\u2019\n   25 |        \
    \         res.push_back({row.size() - 1, col.size() - 1});\n      |          \
    \                                                     ^\nIn file included from\
    \ /usr/include/c++/9/vector:67,\n                 from /usr/include/c++/9/queue:61,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:86,\n\
    \                 from /tmp/tmppmx543_m.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::tuple<long int, long int>; _Alloc = std::allocator<std::tuple<long\
    \ int, long int> >; std::vector<_Tp, _Alloc>::value_type = std::tuple<long int,\
    \ long int>]\u2019\n 1184 |       push_back(const value_type& __x)\n      |  \
    \     ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1184:35: note:   no known\
    \ conversion for argument 1 from \u2018<brace-enclosed initializer list>\u2019\
    \ to \u2018const value_type&\u2019 {aka \u2018const std::tuple<long int, long\
    \ int>&\u2019}\n 1184 |       push_back(const value_type& __x)\n      |      \
    \           ~~~~~~~~~~~~~~~~~~^~~\n/usr/include/c++/9/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = std::tuple<long int, long int>; _Alloc =\
    \ std::allocator<std::tuple<long int, long int> >; std::vector<_Tp, _Alloc>::value_type\
    \ = std::tuple<long int, long int>]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018<brace-enclosed initializer\
    \ list>\u2019 to \u2018std::vector<std::tuple<long int, long int> >::value_type&&\u2019\
    \ {aka \u2018std::tuple<long int, long int>&&\u2019}\n 1200 |       push_back(value_type&&\
    \ __x)\n      |                 ~~~~~~~~~~~~~^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    // Your code here\n    std::vector<std::tuple<long, long>>\
    \ res;\n    for(auto &row : lst) {\n        for(auto &el : row) {\n          \
    \  if(el == x) {\n                res.emplace_back(std::make_tuple(row.size()\
    \ - 1, row.size() - 1));\n            }\n        }\n    }\n    std::sort(res.begin(),\
    \ res.end(), [](const std::tuple<long, long> &a, const std::tuple<long, long>\
    \ &b) {\n        return std::get<0>(a) < std::get<0>(b);\n    });\n    std::sort(res.begin(),\
    \ res.end(), [](const std::tuple<long, long> &a, const std::tuple<long, long>\
    \ &b) {\n        return std::get<1>(a) < std::get<1>(b);\n    });\n    return\
    \ res;\n}\nint main() {\n    auto candidate = get_row;\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "tmprp__fmre: /tmp/tmprp__fmre.cpp:39: int main(): Assertion `candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    std::vector<std::tuple<long, long>> res;\n    std::vector<long>\
    \ row;\n    std::vector<long> col;\n    long row_index = 0;\n    long col_index\
    \ = 0;\n    long row_size = lst.size();\n    long col_size = lst[0].size();\n\
    \    long row_sum = 0;\n    long col_sum = 0;\n    for (long i = 0; i < row_size;\
    \ i++) {\n        row.push_back(lst[i][i]);\n        row_sum += lst[i][i];\n \
    \   }\n    for (long i = 0; i < col_size; i++) {\n        col.push_back(lst[0][i]);\n\
    \        col_sum += lst[0][i];\n    }\n    for (long i = 0; i < row_size; i++)\
    \ {\n        for (long j = 0; j < col_size; j++) {\n            if (lst[i][j]\
    \ == x) {\n                res.push_back(std::make_tuple(i, j));\n           \
    \ }\n        }\n    }\n    std::sort(res.begin(), res.end(), [](const std::tuple<long,\
    \ long> &a, const std::tuple<long, long> &b) {\n        return std::get<0>(a)\
    \ < std::get<0>(b);\n    });\n    std::sort(res.begin(), res.end(), [](const std::tuple<long,\
    \ long> &a, const std::tuple<long, long> &b) {\n        return std::get<1>(a)\
    \ > std::get<1>(b);\n    });\n    for (auto &it : res) {\n        long row = std::get<0>(it);\n\
    \        long col = std::get<1>(it);\n        row_index += row;\n        col_index\
    \ += col;\n    }\n    row_index -= row_sum;\n    col_index -= col_sum;\n    return\
    \ res;\n}\nint main() {\n    auto candidate = get_row;\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "tmplse_d_mp: /tmp/tmplse_d_mp.cpp:62: int main(): Assertion `candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    std::vector<std::tuple<long, long>> res;\n    std::vector<long>\
    \ row;\n    std::vector<long> col;\n    long cnt = 0;\n    for (auto &v : lst)\
    \ {\n        row.push_back(v[0]);\n        col.push_back(v[1]);\n        cnt +=\
    \ v[0];\n    }\n    long cnt2 = 0;\n    for (auto &v : row) {\n        cnt2 +=\
    \ v;\n    }\n    if (cnt2 == 0) {\n        return res;\n    }\n    long cnt3 =\
    \ 0;\n    for (auto &v : col) {\n        cnt3 += v;\n    }\n    if (cnt3 == 0)\
    \ {\n        return res;\n    }\n    std::vector<std::tuple<long, long>> temp;\n\
    \    for (auto &v : lst) {\n        if (v[0] == x) {\n            temp.emplace_back(v[0],\
    \ v[1]);\n        }\n    }\n    std::sort(temp.begin(), temp.end(), [](const std::tuple<long,\
    \ long> &a, const std::tuple<long, long> &b) -> bool {\n        return std::get<0>(a)\
    \ < std::get<0>(b);\n    });\n    for (auto &v : temp) {\n        res.emplace_back(std::get<0>(v),\
    \ std::get<1>(v));\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = get_row;\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "tmp3vbidb03: /tmp/tmp3vbidb03.cpp:59: int main(): Assertion `candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    std::vector<std::tuple<long, long>> res;\n    std::vector<long>\
    \ row;\n    std::vector<long> col;\n    long row_index = 0;\n    long col_index\
    \ = 0;\n    for (auto &row : lst) {\n        row.clear();\n        col.clear();\n\
    \        for (auto &col : row) {\n            if (col == x) {\n              \
    \  res.emplace_back(row_index, col_index);\n                row_index++;\n   \
    \             col_index++;\n            }\n            col.push_back(0);\n   \
    \     }\n    }\n    return res;\n}\nint main() {\n    auto candidate = get_row;\n\
    \    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpddqgly4y.cpp: In function \u2018std::vector<std::tuple<long int,\
    \ long int> > get_row(std::vector<std::vector<long int> >, long int)\u2019:\n\
    /tmp/tmpddqgly4y.cpp:34:17: error: request for member \u2018push_back\u2019 in\
    \ \u2018col\u2019, which is of non-class type \u2018long int\u2019\n   34 |  \
    \           col.push_back(0);\n      |                 ^~~~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    std::vector<std::tuple<long, long>> res;\n    std::vector<std::vector<long>>\
    \ row;\n    std::vector<std::vector<long>> col;\n    std::vector<std::vector<long>>\
    \ res;\n    long row = 0;\n    long col = 0;\n    long cnt = 0;\n    for (auto\
    \ &it : lst) {\n        row.push_back(it);\n        col.push_back(it);\n     \
    \   cnt++;\n    }\n    for (long i = 0; i < cnt; i++) {\n        long cnt2 = 0;\n\
    \        for (long j = 0; j < row.size(); j++) {\n            if (row[j] == i)\
    \ {\n                cnt2++;\n            }\n        }\n        if (cnt2 == col.size())\
    \ {\n            res.push_back(std::make_tuple(i, j));\n        }\n    }\n   \
    \ std::sort(res.begin(), res.end(), [](std::tuple<long, long> a, std::tuple<long,\
    \ long> b) {\n        return std::get<0>(a) < std::get<0>(b);\n    });\n    for\
    \ (auto &it : res) {\n        long row = std::get<0>(it);\n        long col =\
    \ std::get<1>(it);\n        long cnt = 0;\n        for (long i = 0; i < row.size();\
    \ i++) {\n            if (row[i] == col) {\n                cnt++;\n         \
    \   }\n        }\n        if (cnt == row.size()) {\n            col.push_back(col);\n\
    \            row.push_back(row);\n            col.push_back(col);\n          \
    \  row.push_back(row);\n            res.push_back(std::make_tuple(row, col));\n\
    \        }\n    }\n    std::sort(res.begin(), res.end(), [](std::tuple<long, long>\
    \ a, std::tuple<long, long> b) {\n        return std::get<1>(a) < std::get<1>(b);\n\
    \    });\n    return res;\n}\nint main() {\n    auto candidate = get_row;\n  \
    \  assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp43do9kny.cpp: In function \u2018std::vector<std::tuple<long int,\
    \ long int> > get_row(std::vector<std::vector<long int> >, long int)\u2019:\n\
    /tmp/tmp43do9kny.cpp:23:36: error: conflicting declaration \u2018std::vector<std::vector<long\
    \ int> > res\u2019\n   23 |     std::vector<std::vector<long>> res;\n      | \
    \                                   ^~~\n/tmp/tmp43do9kny.cpp:20:41: note: previous\
    \ declaration as \u2018std::vector<std::tuple<long int, long int> > res\u2019\n\
    \   20 |     std::vector<std::tuple<long, long>> res;\n      |               \
    \                          ^~~\n/tmp/tmp43do9kny.cpp:24:10: error: conflicting\
    \ declaration \u2018long int row\u2019\n   24 |     long row = 0;\n      |   \
    \       ^~~\n/tmp/tmp43do9kny.cpp:21:36: note: previous declaration as \u2018\
    std::vector<std::vector<long int> > row\u2019\n   21 |     std::vector<std::vector<long>>\
    \ row;\n      |                                    ^~~\n/tmp/tmp43do9kny.cpp:25:10:\
    \ error: conflicting declaration \u2018long int col\u2019\n   25 |     long col\
    \ = 0;\n      |          ^~~\n/tmp/tmp43do9kny.cpp:22:36: note: previous declaration\
    \ as \u2018std::vector<std::vector<long int> > col\u2019\n   22 |     std::vector<std::vector<long>>\
    \ col;\n      |                                    ^~~\n/tmp/tmp43do9kny.cpp:35:24:\
    \ error: no match for \u2018operator==\u2019 (operand types are \u2018__gnu_cxx::__alloc_traits<std::allocator<std::vector<long\
    \ int> >, std::vector<long int> >::value_type\u2019 {aka \u2018std::vector<long\
    \ int>\u2019} and \u2018long int\u2019)\n   35 |             if (row[j] == i)\
    \ {\nIn file included from /usr/include/c++/9/regex:62,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n                 from\
    \ /tmp/tmp43do9kny.cpp:2:\n/usr/include/c++/9/bits/regex.h:1026:5: note: candidate:\
    \ \u2018template<class _BiIter> bool std::__cxx11::operator==(const std::__cxx11::sub_match<_BiIter>&,\
    \ const std::__cxx11::sub_match<_BiIter>&)\u2019\n 1026 |     operator==(const\
    \ sub_match<_BiIter>& __lhs, const sub_match<_BiIter>& __rhs)\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/regex.h:1026:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp43do9kny.cpp:35:27: note:   \u2018__gnu_cxx::__alloc_traits<std::allocator<std::vector<long\
    \ int> >, std::vector<long int> >::value_type\u2019 {aka \u2018std::vector<long\
    \ int>\u2019} is not derived from \u2018const std::__cxx11::sub_match<_BiIter>\u2019\
    \n   35 |             if (row[j] == i) {\n      |                           ^\n\
    In file included from /usr/include/c++/9/regex:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmp43do9kny.cpp:2:\n/usr/include/c++/9/bits/regex.h:1099:5:\
    \ note: candidate: \u2018template<class _Bi_iter, class _Ch_traits, class _Ch_alloc>\
    \ bool std::__cxx11::operator==(std::__cxx11::__sub_match_string<_Bi_iter, _Ch_traits,\
    \ _Ch_alloc>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\n 1099 |     operator==(const\
    \ __sub_match_string<_Bi_iter, _Ch_traits, _Ch_alloc>& __lhs,\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/regex.h:1099:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp43do9kny.cpp:35:27: note:   \u2018__gnu_cxx::__alloc_traits<std::allocator<std::vector<long\
    \ int> >, std::vector<long int> >::value_type\u2019 {aka \u2018std::vector<long\
    \ int>\u2019} is not derived from \u2018std::__cxx11::__sub_match_string<_Bi_iter,\
    \ _Ch_traits, _Ch_alloc>\u2019\n   35 |             if (row[j] == i) {\n     \
    \ |                           ^\nIn file included from /usr/include/c++/9/regex:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmp43do9kny.cpp:2:\n/usr/include/c++/9/bits/regex.h:1173:5:\
    \ note: candidate: \u2018template<class _Bi_iter, class _Ch_traits, class _Ch_alloc>\
    \ bool std::__cxx11::operator==(const std::__cxx11::sub_match<_BiIter>&, std::__cxx11::__sub_match_string<_Bi_iter,\
    \ _Ch_traits, _Ch_alloc>&)\u2019\n 1173 |     operator==(const sub_match<_Bi_iter>&\
    \ __lhs,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/regex.h:1173:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmp43do9kny.cpp:35:27:\
    \ note:   \u2018__gnu_cxx::__alloc_traits<std::allocator<std::vector<long int>\
    \ >, std::vector<long int> >::value_type\u2019 {aka \u2018std::vector<long int>\u2019\
    } is not derived from \u2018const std::__cxx11::sub_match<_BiIter>\u2019\n   35\
    \ |             if (row[j] == i) {\n      |                           ^\nIn file\
    \ included from /usr/include/c++/9/regex:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmp43do9kny.cpp:2:\n/usr/include/c++/9/bits/regex.h:1247:5:\
    \ note: candidate: \u2018template<class _Bi_iter> bool std::__cxx11::operator==(const\
    \ typename std::iterator_traits<_Iter>::value_type*, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1247 |     operator==(typename iterator_traits<_Bi_iter>::value_type const*\
    \ __lhs,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/regex.h:1247:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmp43do9kny.cpp:35:27:\
    \ note:   mismatched types \u2018const std::__cxx11::sub_match<_BiIter>\u2019\
    \ and \u2018long int\u2019\n   35 |             if (row[j] == i) {\n      |  \
    \                         ^\nIn file included from /usr/include/c++/9/regex:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmp43do9kny.cpp:2:\n/usr/include/c++/9/bits/regex.h:1321:5:\
    \ note: candidate: \u2018template<class _Bi_iter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, const typename std::iterator_traits<_Iter>::value_type*)\u2019\
    \n 1321 |     operator==(const sub_match<_Bi_iter>& __lhs,\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/regex.h:1321:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp43do9kny.cpp:35:27: note:   \u2018__gnu_cxx::__alloc_traits<std::allocator<std::vector<long\
    \ int> >, std::vector<long int> >::value_type\u2019 {aka \u2018std::vector<long\
    \ int>\u2019} is not derived from \u2018const std::__cxx11::sub_match<_BiIter>\u2019\
    \n   35 |             if (row[j] == i) {\n      |                           ^\n\
    In file included from /usr/include/c++/9/regex:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmp43do9kny.cpp:2:\n/usr/include/c++/9/bits/regex.h:1395:5:\
    \ note: candidate: \u2018template<class _Bi_iter> bool std::__cxx11::operator==(const\
    \ typename std::iterator_traits<_Iter>::value_type&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1395 |     operator==(typename iterator_traits<_Bi_iter>::value_type const&\
    \ __lhs,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/regex.h:1395:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmp43do9kny.cpp:35:27:\
    \ note:   mismatched types \u2018const std::__cxx11::sub_match<_BiIter>\u2019\
    \ and \u2018long int\u2019\n   35 |             if (row[j] == i) {\n      |  \
    \                         ^\nIn file included from /usr/include/c++/9/regex:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmp43do9kny.cpp:2:\n/usr/include/c++/9/bits/regex.h:1473:5:\
    \ note: candidate: \u2018template<class _Bi_iter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, const typename std::iterator_traits<_Iter>::value_type&)\u2019\
    \n 1473 |     operator==(const sub_match<_Bi_iter>& __lhs,\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/regex.h:1473:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp43do9kny.cpp:35:27: note:   \u2018__gnu_cxx::__alloc_traits<std::allocator<std::vector<long\
    \ int> >, std::vector<long int> >::value_type\u2019 {aka \u2018std::vector<long\
    \ int>\u2019} is not derived from \u2018const std::__cxx11::sub_match<_BiIter>\u2019\
    \n   35 |             if (row[j] == i) {\n      |                           ^\n\
    In file included from /usr/include/c++/9/regex:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmp43do9kny.cpp:2:\n/usr/include/c++/9/bits/regex.h:1991:5:\
    \ note: candidate: \u2018template<class _Bi_iter, class _Alloc> bool std::__cxx11::operator==(const\
    \ std::__cxx11::match_results<_BiIter, _Alloc>&, const std::__cxx11::match_results<_BiIter,\
    \ _Alloc>&)\u2019\n 1991 |     operator==(const match_results<_Bi_iter, _Alloc>&\
    \ __m1,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/regex.h:1991:5: note: \
    \  template argument deduction/substitution failed:\n/tmp/tmp43do9kny.cpp:35:27:\
    \ note:   \u2018__gnu_cxx::__alloc_traits<std::allocator<std::vector<long int>\
    \ >, std::vector<long int> >::value_type\u2019 {aka \u2018std::vector<long int>\u2019\
    } is not derived from \u2018const std::__cxx11::match_results<_BiIter, _Alloc>\u2019\
    \n   35 |             if (row[j] == i) {\n      |                           ^\n\
    In file included from /usr/include/c++/9/iosfwd:40,\n                 from /usr/include/c++/9/ios:38,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp43do9kny.cpp:2:\n/usr/include/c++/9/bits/postypes.h:222:5:\
    \ note: candidate: \u2018template<class _StateT> bool std::operator==(const std::fpos<_StateT>&,\
    \ const std::fpos<_StateT>&)\u2019\n  222 |     operator==(const fpos<_StateT>&\
    \ __lhs, const fpos<_StateT>& __rhs)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/postypes.h:222:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp43do9kny.cpp:35:27:\
    \ note:   \u2018__gnu_cxx::__alloc_traits<std::allocator<std::vector<long int>\
    \ >, std::vector<long int> >::value_type\u2019 {aka \u2018std::vector<long int>\u2019\
    } is not derived from \u2018const std::fpos<_StateT>\u2019\n   35 |          \
    \   if (row[j] == i) {\n      |                           ^\nIn file included\
    \ from /usr/include/c++/9/bits/stl_algobase.h:64,\n                 from /usr/include/c++/9/bits/char_traits.h:39,\n\
    \                 from /usr/include/c++/9/ios:40,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp43do9kny.cpp:2:\n/usr/include/c++/9/bits/stl_pair.h:448:5: note: candidate:\
    \ \u2018template<class _T1, class _T2> constexpr bool std::operator==(const std::pair<_T1,\
    \ _T2>&, const std::pair<_T1, _T2>&)\u2019\n  448 |     operator==(const pair<_T1,\
    \ _T2>& __x, const pair<_T1, _T2>& __y)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_pair.h:448:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp43do9kny.cpp:35:27:\
    \ note:   \u2018__gnu_cxx::__alloc_traits<std::allocator<std::vector<long int>\
    \ >, std::vector<long int> >::value_type\u2019 {aka \u2018std::vector<long int>\u2019\
    } is not derived from \u2018const std::pair<_T1, _T2>\u2019\n   35 |         \
    \    if (row[j] == i) {\n      |                           ^\nIn file included\
    \ from /usr/include/c++/9/bits/stl_algobase.h:67,\n                 from /usr/include/c++/9/bits/char_traits.h:39,\n\
    \                 from /usr/include/c++/9/ios:40,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp43do9kny.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:325:5: note:\
    \ candidate: \u2018template<class _Iterator> bool std::operator==(const std::reverse_iterator<_Iterator>&,\
    \ const std::reverse_iterator<_Iterator>&)\u2019\n  325 |     operator==(const\
    \ reverse_iterator<_Iterator>& __x,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:325:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp43do9kny.cpp:35:27:\
    \ note:   \u2018__gnu_cxx::__alloc_traits<std::allocator<std::vector<long int>\
    \ >, std::vector<long int> >::value_type\u2019 {aka \u2018std::vector<long int>\u2019\
    } is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\n   35\
    \ |             if (row[j] == i) {\n      |                           ^\nIn file\
    \ included from /usr/include/c++/9/bits/stl_algobase.h:67,\n                 from\
    \ /usr/include/c++/9/bits/char_traits.h:39,\n                 from /usr/include/c++/9/ios:40,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp43do9kny.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:363:5:\
    \ note: candidate: \u2018template<class _IteratorL, class _IteratorR> bool std::operator==(const\
    \ std::reverse_iterator<_Iterator>&, const std::reverse_iterator<_IteratorR>&)\u2019\
    \n  363 |     operator==(const reverse_iterator<_IteratorL>& __x,\n      |   \
    \  ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:363:5: note:   template argument\
    \ deduction/substitution failed:\n/tmp/tmp43do9kny.cpp:35:27: note:   \u2018__gnu_cxx::__alloc_traits<std::allocator<std::vector<long\
    \ int> >, std::vector<long int> >::value_type\u2019 {aka \u2018std::vector<long\
    \ int>\u2019} is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   35 |             if (row[j] == i) {\n      |                           ^\n\
    In file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n           \
    \      from /usr/include/c++/9/bits/char_traits.h:39,\n                 from /usr/include/c++/9/ios:40,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp43do9kny.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:1136:5:\
    \ note: candidate: \u2018template<class _IteratorL, class _IteratorR> bool std::operator==(const\
    \ std::move_iterator<_IteratorL>&, const std::move_iterator<_IteratorR>&)\u2019\
    \n 1136 |     operator==(const move_iterator<_IteratorL>& __x,\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/stl_iterator.h:1136:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp43do9kny.cpp:35:27: note:   \u2018__gnu_cxx::__alloc_traits<std::allocator<std::vector<long\
    \ int> >, std::vector<long int> >::value_type\u2019 {aka \u2018std::vector<long\
    \ int>\u2019} is not derived from \u2018const std::move_iterator<_IteratorL>\u2019\
    \n   35 |             if (row[j] == i) {\n      |                           ^\n\
    In file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n           \
    \      from /usr/include/c++/9/bits/char_traits.h:39,\n                 from /usr/include/c++/9/ios:40,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp43do9kny.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:1142:5:\
    \ note: candidate: \u2018template<class _Iterator> bool std::operator==(const\
    \ std::move_iterator<_IteratorL>&, const std::move_iterator<_IteratorL>&)\u2019\
    \n 1142 |     operator==(const move_iterator<_Iterator>& __x,\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/stl_iterator.h:1142:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp43do9kny.cpp:35:27: note:   \u2018__gnu_cxx::__alloc_traits<std::allocator<std::vector<long\
    \ int> >, std::vector<long int> >::value_type\u2019 {aka \u2018std::vector<long\
    \ int>\u2019} is not derived from \u2018const std::move_iterator<_IteratorL>\u2019\
    \n   35 |             if (row[j] == i) {\n      |                           ^\n\
    In file included from /usr/include/c++/9/string:41,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp43do9kny.cpp:2:\n/usr/include/c++/9/bits/allocator.h:167:5: note: candidate:\
    \ \u2018template<class _T1, class _T2> bool std::operator==(const std::allocator<_CharT>&,\
    \ const std::allocator<_T2>&)\u2019\n  167 |     operator==(const allocator<_T1>&,\
    \ const allocator<_T2>&)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/allocator.h:167:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp43do9kny.cpp:35:27:\
    \ note:   \u2018__gnu_cxx::__alloc_traits<std::allocator<std::vector<long int>\
    \ >, std::vector<long int> >::value_type\u2019 {aka \u2018std::vector<long int>\u2019\
    } is not derived from \u2018const std::allocator<_CharT>\u2019\n   35 |      \
    \       if (row[j] == i) {\n      |                           ^\nIn file included\
    \ from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp43do9kny.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6144:5: note:\
    \ candidate: \u2018template<class _CharT, class _Traits, class _Alloc> bool std::operator==(const\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&, const std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>&)\u2019\n 6144 |     operator==(const basic_string<_CharT,\
    \ _Traits, _Alloc>& __lhs,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/basic_string.h:6144:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp43do9kny.cpp:35:27:\
    \ note:   \u2018__gnu_cxx::__alloc_traits<std::allocator<std::vector<long int>\
    \ >, std::vector<long int> >::value_type\u2019 {aka \u2018std::vector<long int>\u2019\
    } is not derived from \u2018const std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>\u2019\n   35 |             if (row[j] == i) {\n      |             \
    \              ^\nIn file included from /usr/include/c++/9/string:55,\n      \
    \           from /usr/include/c++/9/bits/locale_classes.h:40,\n              \
    \   from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp43do9kny.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6152:5:\
    \ note: candidate: \u2018template<class _CharT> typename __gnu_cxx::__enable_if<std::__is_char<_Tp>::__value,\
    \ bool>::__type std::operator==(const std::__cxx11::basic_string<_CharT>&, const\
    \ std::__cxx11::basic_string<_CharT>&)\u2019\n 6152 |     operator==(const basic_string<_CharT>&\
    \ __lhs,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/basic_string.h:6152:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp43do9kny.cpp:35:27:\
    \ note:   \u2018__gnu_cxx::__alloc_traits<std::allocator<std::vector<long int>\
    \ >, std::vector<long int> >::value_type\u2019 {aka \u2018std::vector<long int>\u2019\
    } is not derived from \u2018const std::__cxx11::basic_string<_CharT>\u2019\n \
    \  35 |             if (row[j] == i) {\n      |                           ^\n\
    In file included from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp43do9kny.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6166:5: note:\
    \ candidate: \u2018template<class _CharT, class _Traits, class _Alloc> bool std::operator==(const\
    \ _CharT*, const std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&)\u2019\n\
    \ 6166 |     operator==(const _CharT* __lhs,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/basic_string.h:6166:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp43do9kny.cpp:35:27:\
    \ note:   mismatched types \u2018const _CharT*\u2019 and \u2018std::vector<long\
    \ int>\u2019\n   35 |             if (row[j] == i) {\n      |                \
    \           ^\nIn file included from /usr/include/c++/9/string:55,\n         \
    \        from /usr/include/c++/9/bits/locale_classes.h:40,\n                 from\
    \ /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp43do9kny.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6178:5:\
    \ note: candidate: \u2018template<class _CharT, class _Traits, class _Alloc> bool\
    \ std::operator==(const std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&,\
    \ const _CharT*)\u2019\n 6178 |     operator==(const basic_string<_CharT, _Traits,\
    \ _Alloc>& __lhs,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/basic_string.h:6178:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp43do9kny.cpp:35:27:\
    \ note:   \u2018__gnu_cxx::__alloc_traits<std::allocator<std::vector<long int>\
    \ >, std::vector<long int> >::value_type\u2019 {aka \u2018std::vector<long int>\u2019\
    } is not derived from \u2018const std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>\u2019\n   35 |             if (row[j] == i) {\n      |             \
    \              ^\nIn file included from /usr/include/c++/9/bits/ios_base.h:46,\n\
    \                 from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp43do9kny.cpp:2:\n/usr/include/c++/9/system_error:292:3: note: candidate:\
    \ \u2018bool std::operator==(const std::error_code&, const std::error_code&)\u2019\
    \n  292 |   operator==(const error_code& __lhs, const error_code& __rhs) noexcept\n\
    \      |   ^~~~~~~~\n/usr/include/c++/9/system_error:292:32: note:   no known\
    \ conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<std::vector<long\
    \ int> >, std::vector<long int> >::value_type\u2019 {aka \u2018std::vector<long\
    \ int>\u2019} to \u2018const std::error_code&\u2019\n  292 |   operator==(const\
    \ error_code& __lhs, const error_code& __rhs) noexcept\n      |              ~~~~~~~~~~~~~~~~~~^~~~~\n\
    /usr/include/c++/9/system_error:297:3: note: candidate: \u2018bool std::operator==(const\
    \ std::error_code&, const std::error_condition&)\u2019\n  297 |   operator==(const\
    \ error_code& __lhs, const error_condition& __rhs) noexcept\n      |   ^~~~~~~~\n\
    /usr/include/c++/9/system_error:297:32: note:   no known conversion for argument\
    \ 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<std::vector<long int>\
    \ >, std::vector<long int> >::value_type\u2019 {aka \u2018std::vector<long int>\u2019\
    } to \u2018const std::error_code&\u2019\n  297 |   operator==(const error_code&\
    \ __lhs, const error_condition& __rhs) noexcept\n      |              ~~~~~~~~~~~~~~~~~~^~~~~\n\
    /usr/include/c++/9/system_error:304:3: note: candidate: \u2018bool std::operator==(const\
    \ std::error_condition&, const std::error_code&)\u2019\n  304 |   operator==(const\
    \ error_condition& __lhs, const error_code& __rhs) noexcept\n      |   ^~~~~~~~\n\
    /usr/include/c++/9/system_error:304:37: note:   no known conversion for argument\
    \ 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<std::vector<long int>\
    \ >, std::vector<long int> >::value_type\u2019 {aka \u2018std::vector<long int>\u2019\
    } to \u2018const std::error_condition&\u2019\n  304 |   operator==(const error_condition&\
    \ __lhs, const error_code& __rhs) noexcept\n      |              ~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n\
    /usr/include/c++/9/system_error:311:3: note: candidate: \u2018bool std::operator==(const\
    \ std::error_condition&, const std::error_condition&)\u2019\n  311 |   operator==(const\
    \ error_condition& __lhs,\n      |   ^~~~~~~~\n/usr/include/c++/9/system_error:311:37:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<std::vector<long\
    \ int> >, std::vector<long int> >::value_type\u2019 {aka \u2018std::vector<long\
    \ int>\u2019} to \u2018const std::error_condition&\u2019\n  311 |   operator==(const\
    \ error_condition& __lhs,\n      |              ~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n\
    In file included from /usr/include/c++/9/bits/locale_facets.h:48,\n          \
    \       from /usr/include/c++/9/bits/basic_ios.h:37,\n                 from /usr/include/c++/9/ios:44,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp43do9kny.cpp:2:\n/usr/include/c++/9/bits/streambuf_iterator.h:208:5:\
    \ note: candidate: \u2018template<class _CharT, class _Traits> bool std::operator==(const\
    \ std::istreambuf_iterator<_CharT, _Traits>&, const std::istreambuf_iterator<_CharT,\
    \ _Traits>&)\u2019\n  208 |     operator==(const istreambuf_iterator<_CharT, _Traits>&\
    \ __a,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/streambuf_iterator.h:208:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp43do9kny.cpp:35:27:\
    \ note:   \u2018__gnu_cxx::__alloc_traits<std::allocator<std::vector<long int>\
    \ >, std::vector<long int> >::value_type\u2019 {aka \u2018std::vector<long int>\u2019\
    } is not derived from \u2018const std::istreambuf_iterator<_CharT, _Traits>\u2019\
    \n   35 |             if (row[j] == i) {\n      |                           ^\n\
    In file included from /usr/include/c++/9/ccomplex:39,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp43do9kny.cpp:2:\n/usr/include/c++/9/complex:463:5:\
    \ note: candidate: \u2018template<class _Tp> constexpr bool std::operator==(const\
    \ std::complex<_Tp>&, const std::complex<_Tp>&)\u2019\n  463 |     operator==(const\
    \ complex<_Tp>& __x, const complex<_Tp>& __y)\n      |     ^~~~~~~~\n/usr/include/c++/9/complex:463:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp43do9kny.cpp:35:27:\
    \ note:   \u2018__gnu_cxx::__alloc_traits<std::allocator<std::vector<long int>\
    \ >, std::vector<long int> >::value_type\u2019 {aka \u2018std::vector<long int>\u2019\
    } is not derived from \u2018const std::complex<_Tp>\u2019\n   35 |           \
    \  if (row[j] == i) {\n      |                           ^\nIn file included from\
    \ /usr/include/c++/9/ccomplex:39,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp43do9kny.cpp:2:\n/usr/include/c++/9/complex:468:5:\
    \ note: candidate: \u2018template<class _Tp> constexpr bool std::operator==(const\
    \ std::complex<_Tp>&, const _Tp&)\u2019\n  468 |     operator==(const complex<_Tp>&\
    \ __x, const _Tp& __y)\n      |     ^~~~~~~~\n/usr/include/c++/9/complex:468:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp43do9kny.cpp:35:27:\
    \ note:   \u2018__gnu_cxx::__alloc_traits<std::allocator<std::vector<long int>\
    \ >, std::vector<long int> >::value_type\u2019 {aka \u2018std::vector<long int>\u2019\
    } is not derived from \u2018const std::complex<_Tp>\u2019\n   35 |           \
    \  if (row[j] == i) {\n      |                           ^\nIn file included from\
    \ /usr/include/c++/9/ccomplex:39,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp43do9kny.cpp:2:\n/usr/include/c++/9/complex:473:5:\
    \ note: candidate: \u2018template<class _Tp> constexpr bool std::operator==(const\
    \ _Tp&, const std::complex<_Tp>&)\u2019\n  473 |     operator==(const _Tp& __x,\
    \ const complex<_Tp>& __y)\n      |     ^~~~~~~~\n/usr/include/c++/9/complex:473:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp43do9kny.cpp:35:27:\
    \ note:   mismatched types \u2018const std::complex<_Tp>\u2019 and \u2018long\
    \ int\u2019\n   35 |             if (row[j] == i) {\n      |                 \
    \          ^\nIn file included from /usr/include/c++/9/deque:67,\n           \
    \      from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:68,\n          \
    \       from /tmp/tmp43do9kny.cpp:2:\n/usr/include/c++/9/bits/stl_deque.h:286:5:\
    \ note: candidate: \u2018template<class _Tp, class _Ref, class _Ptr> bool std::operator==(const\
    \ std::_Deque_iterator<_Tp, _Ref, _Ptr>&, const std::_Deque_iterator<_Tp, _Ref,\
    \ _Ptr>&)\u2019\n  286 |     operator==(const _Deque_iterator<_Tp, _Ref, _Ptr>&\
    \ __x,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_deque.h:286:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmp43do9kny.cpp:35:27:\
    \ note:   \u2018__gnu_cxx::__alloc_traits<std::allocator<std::vector<long int>\
    \ >, std::vector<long int> >::value_type\u2019 {aka \u2018std::vector<long int>\u2019\
    } is not derived from \u2018const std::_Deque_iterator<_Tp, _Ref, _Ptr>\u2019\n\
    \   35 |             if (row[j] == i) {\n      |                           ^\n\
    In file included from /usr/include/c++/9/deque:67,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:68,\n\
    \                 from /tmp/tmp43do9kny.cpp:2:\n/usr/include/c++/9/bits/stl_deque.h:293:5:\
    \ note: candidate: \u2018template<class _Tp, class _RefL, class _PtrL, class _RefR,\
    \ class _PtrR> bool std::operator==(const std::_Deque_iterator<_Tp, _Ref, _Ptr>&,\
    \ const std::_Deque_iterator<_Tp, _RefR, _PtrR>&)\u2019\n  293 |     operator==(const\
    \ _Deque_iterator<_Tp, _RefL, _PtrL>& __x,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_deque.h:293:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp43do9kny.cpp:35:27:\
    \ note:   \u2018__gnu_cxx::__alloc_traits<std::allocator<std::vector<long int>\
    \ >, std::vector<long int> >::value_type\u2019 {aka \u2018std::vector<long int>\u2019\
    } is not derived from \u2018const std::_Deque_iterator<_Tp, _Ref, _Ptr>\u2019\n\
    \   35 |             if (row[j] == i) {\n      |                           ^\n\
    In file included from /usr/include/c++/9/deque:67,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:68,\n\
    \                 from /tmp/tmp43do9kny.cpp:2:\n/usr/include/c++/9/bits/stl_deque.h:2312:5:\
    \ note: candidate: \u2018template<class _Tp, class _Alloc> bool std::operator==(const\
    \ std::deque<_Tp, _Alloc>&, const std::deque<_Tp, _Alloc>&)\u2019\n 2312 |   \
    \  operator==(const deque<_Tp, _Alloc>& __x,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_deque.h:2312:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp43do9kny.cpp:35:27:\
    \ note:   \u2018__gnu_cxx::__alloc_traits<std::allocator<std::vector<long int>\
    \ >, std::vector<long int> >::value_type\u2019 {aka \u2018std::vector<long int>\u2019\
    } is not derived from \u2018const std::deque<_Tp, _Alloc>\u2019\n   35 |     \
    \        if (row[j] == i) {\n      |                           ^\nIn file included\
    \ from /usr/include/c++/9/tuple:39,\n                 from /usr/include/c++/9/functional:54,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmp43do9kny.cpp:2:\n/usr/include/c++/9/array:252:5:\
    \ note: candidate: \u2018template<class _Tp, long unsigned int _Nm> bool std::operator==(const\
    \ std::array<_Tp, _Nm>&, const std::array<_Tp, _Nm>&)\u2019\n  252 |     operator==(const\
    \ array<_Tp, _Nm>& __one, const array<_Tp, _Nm>& __two)\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/array:252:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp43do9kny.cpp:35:27: note:   \u2018__gnu_cxx::__alloc_traits<std::allocator<std::vector<long\
    \ int> >, std::vector<long int> >::value_type\u2019 {aka \u2018std::vector<long\
    \ int>\u2019} is not derived from \u2018const std::array<_Tp, _Nm>\u2019\n   35\
    \ |             if (row[j] == i) {\n      |                           ^\nIn file\
    \ included from /usr/include/c++/9/functional:54,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmp43do9kny.cpp:2:\n/usr/include/c++/9/tuple:1419:5:\
    \ note: candidate: \u2018template<class ... _TElements, class ... _UElements>\
    \ constexpr bool std::operator==(const std::tuple<_Tps ...>&, const std::tuple<_Elements\
    \ ...>&)\u2019\n 1419 |     operator==(const tuple<_TElements...>& __t,\n    \
    \  |     ^~~~~~~~\n/usr/include/c++/9/tuple:1419:5: note:   template argument\
    \ deduction/substitution failed:\n/tmp/tmp43do9kny.cpp:35:27: note:   \u2018__gnu_cxx::__alloc_traits<std::allocator<std::vector<long\
    \ int> >, std::vector<long int> >::value_type\u2019 {aka \u2018std::vector<long\
    \ int>\u2019} is not derived from \u2018const std::tuple<_Tps ...>\u2019\n   35\
    \ |             if (row[j] == i) {\n      |                           ^\nIn file\
    \ included from /usr/include/c++/9/functional:59,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmp43do9kny.cpp:2:\n/usr/include/c++/9/bits/std_function.h:746:5:\
    \ note: candidate: \u2018template<class _Res, class ... _Args> bool std::operator==(const\
    \ std::function<_Res(_ArgTypes ...)>&, std::nullptr_t)\u2019\n  746 |     operator==(const\
    \ function<_Res(_Args...)>& __f, nullptr_t) noexcept\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/std_function.h:746:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp43do9kny.cpp:35:27:\
    \ note:   \u2018__gnu_cxx::__alloc_traits<std::allocator<std::vector<long int>\
    \ >, std::vector<long int> >::value_type\u2019 {aka \u2018std::vector<long int>\u2019\
    } is not derived from \u2018const std::function<_Res(_ArgTypes ...)>\u2019\n \
    \  35 |             if (row[j] == i) {\n      |                           ^\n\
    In file included from /usr/include/c++/9/functional:59,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n                 from\
    \ /tmp/tmp43do9kny.cpp:2:\n/usr/include/c++/9/bits/std_function.h:752:5: note:\
    \ candidate: \u2018template<class _Res, class ... _Args> bool std::operator==(std::nullptr_t,\
    \ const std::function<_Res(_ArgTypes ...)>&)\u2019\n  752 |     operator==(nullptr_t,\
    \ const function<_Res(_Args...)>& __f) noexcept\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/std_function.h:752:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp43do9kny.cpp:35:27:\
    \ note:   mismatched types \u2018const std::function<_Res(_ArgTypes ...)>\u2019\
    \ and \u2018long int\u2019\n   35 |             if (row[j] == i) {\n      |  \
    \                         ^\nIn file included from /usr/include/c++/9/bits/locale_conv.h:41,\n\
    \                 from /usr/include/c++/9/locale:43,\n                 from /usr/include/c++/9/iomanip:43,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:72,\n\
    \                 from /tmp/tmp43do9kny.cpp:2:\n/usr/include/c++/9/bits/unique_ptr.h:715:5:\
    \ note: candidate: \u2018template<class _Tp, class _Dp, class _Up, class _Ep>\
    \ bool std::operator==(const std::unique_ptr<_Tp, _Dp>&, const std::unique_ptr<_Up,\
    \ _Ep>&)\u2019\n  715 |     operator==(const unique_ptr<_Tp, _Dp>& __x,\n    \
    \  |     ^~~~~~~~\n/usr/include/c++/9/bits/unique_ptr.h:715:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmp43do9kny.cpp:35:27: note: \
    \  \u2018__gnu_cxx::__alloc_traits<std::allocator<std::vector<long int> >, std::vector<long\
    \ int> >::value_type\u2019 {aka \u2018std::vector<long int>\u2019} is not derived\
    \ from \u2018const std::unique_ptr<_Tp, _Dp>\u2019\n   35 |             if (row[j]\
    \ == i) {\n      |                           ^\nIn file included from /usr/include/c++/9/bits/locale_conv.h:41,\n\
    \                 from /usr/include/c++/9/locale:43,\n                 from /usr/include/c++/9/iomanip:43,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:72,\n\
    \                 from /tmp/tmp43do9kny.cpp:2:\n/usr/include/c++/9/bits/unique_ptr.h:721:5:\
    \ note: candidate: \u2018template<class _Tp, class _Dp> bool std::operator==(const\
    \ std::unique_ptr<_Tp, _Dp>&, std::nullptr_t)\u2019\n  721 |     operator==(const\
    \ unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/unique_ptr.h:721:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp43do9kny.cpp:35:27:\
    \ note:   \u2018__gnu_cxx::__alloc_traits<std::allocator<std::vector<long int>\
    \ >, std::vector<long int> >::value_type\u2019 {aka \u2018std::vector<long int>\u2019\
    } is not derived from \u2018const std::unique_ptr<_Tp, _Dp>\u2019\n   35 |   \
    \          if (row[j] == i) {\n      |                           ^\nIn file included\
    \ from /usr/include/c++/9/bits/locale_conv.h:41,\n                 from /usr/include/c++/9/locale:43,\n\
    \                 from /usr/include/c++/9/iomanip:43,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:72,\n\
    \                 from /tmp/tmp43do9kny.cpp:2:\n/usr/include/c++/9/bits/unique_ptr.h:726:5:\
    \ note: candidate: \u2018template<class _Tp, class _Dp> bool std::operator==(std::nullptr_t,\
    \ const std::unique_ptr<_Tp, _Dp>&)\u2019\n  726 |     operator==(nullptr_t, const\
    \ unique_ptr<_Tp, _Dp>& __x) noexcept\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/unique_ptr.h:726:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp43do9kny.cpp:35:27:\
    \ note:   mismatched types \u2018const std::unique_ptr<_Tp, _Dp>\u2019 and \u2018\
    long int\u2019\n   35 |             if (row[j] == i) {\n      |              \
    \             ^\nIn file included from /usr/include/c++/9/iterator:66,\n     \
    \            from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:77,\n    \
    \             from /tmp/tmp43do9kny.cpp:2:\n/usr/include/c++/9/bits/stream_iterator.h:134:5:\
    \ note: candidate: \u2018template<class _Tp, class _CharT, class _Traits, class\
    \ _Dist> bool std::operator==(const std::istream_iterator<_Tp, _CharT, _Traits,\
    \ _Dist>&, const std::istream_iterator<_Tp, _CharT, _Traits, _Dist>&)\u2019\n\
    \  134 |     operator==(const istream_iterator<_Tp, _CharT, _Traits, _Dist>& __x,\n\
    \      |     ^~~~~~~~\n/usr/include/c++/9/bits/stream_iterator.h:134:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmp43do9kny.cpp:35:27:\
    \ note:   \u2018__gnu_cxx::__alloc_traits<std::allocator<std::vector<long int>\
    \ >, std::vector<long int> >::value_type\u2019 {aka \u2018std::vector<long int>\u2019\
    } is not derived from \u2018const std::istream_iterator<_Tp, _CharT, _Traits,\
    \ _Dist>\u2019\n   35 |             if (row[j] == i) {\n      |              \
    \             ^\nIn file included from /usr/include/c++/9/list:63,\n         \
    \        from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:79,\n        \
    \         from /tmp/tmp43do9kny.cpp:2:\n/usr/include/c++/9/bits/stl_list.h:1991:5:\
    \ note: candidate: \u2018template<class _Tp, class _Alloc> bool std::operator==(const\
    \ std::__cxx11::list<_Tp, _Alloc>&, const std::__cxx11::list<_Tp, _Alloc>&)\u2019\
    \n 1991 |     operator==(const list<_Tp, _Alloc>& __x, const list<_Tp, _Alloc>&\
    \ __y)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_list.h:1991:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmp43do9kny.cpp:35:27:\
    \ note:   \u2018__gnu_cxx::__alloc_traits<std::allocator<std::vector<long int>\
    \ >, std::vector<long int> >::value_type\u2019 {aka \u2018std::vector<long int>\u2019\
    } is not derived from \u2018const std::__cxx11::list<_Tp, _Alloc>\u2019\n   35\
    \ |             if (row[j] == i) {\n      |                           ^\nIn file\
    \ included from /usr/include/c++/9/map:61,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:81,\n\
    \                 from /tmp/tmp43do9kny.cpp:2:\n/usr/include/c++/9/bits/stl_map.h:1455:5:\
    \ note: candidate: \u2018template<class _Key, class _Tp, class _Compare, class\
    \ _Alloc> bool std::operator==(const std::map<_Key, _Tp, _Compare, _Alloc>&, const\
    \ std::map<_Key, _Tp, _Compare, _Alloc>&)\u2019\n 1455 |     operator==(const\
    \ map<_Key, _Tp, _Compare, _Alloc>& __x,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_map.h:1455:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp43do9kny.cpp:35:27:\
    \ note:   \u2018__gnu_cxx::__alloc_traits<std::allocator<std::vector<long int>\
    \ >, std::vector<long int> >::value_type\u2019 {aka \u2018std::vector<long int>\u2019\
    } is not derived from \u2018const std::map<_Key, _Tp, _Compare, _Alloc>\u2019\n\
    \   35 |             if (row[j] == i) {\n      |                           ^\n\
    In file included from /usr/include/c++/9/map:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:81,\n\
    \                 from /tmp/tmp43do9kny.cpp:2:\n/usr/include/c++/9/bits/stl_multimap.h:1119:5:\
    \ note: candidate: \u2018template<class _Key, class _Tp, class _Compare, class\
    \ _Alloc> bool std::operator==(const std::multimap<_Key, _Tp, _Compare, _Alloc>&,\
    \ const std::multimap<_Key, _Tp, _Compare, _Alloc>&)\u2019\n 1119 |     operator==(const\
    \ multimap<_Key, _Tp, _Compare, _Alloc>& __x,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_multimap.h:1119:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp43do9kny.cpp:35:27:\
    \ note:   \u2018__gnu_cxx::__alloc_traits<std::allocator<std::vector<long int>\
    \ >, std::vector<long int> >::value_type\u2019 {aka \u2018std::vector<long int>\u2019\
    } is not derived from \u2018const std::multimap<_Key, _Tp, _Compare, _Alloc>\u2019\
    \n   35 |             if (row[j] == i) {\n      |                           ^\n\
    In file included from /usr/include/c++/9/bits/shared_ptr.h:52,\n             \
    \    from /usr/include/c++/9/memory:81,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:82,\n\
    \                 from /tmp/tmp43do9kny.cpp:2:\n/usr/include/c++/9/bits/shared_ptr_base.h:1412:5:\
    \ note: candidate: \u2018template<class _Tp1, class _Tp2, __gnu_cxx::_Lock_policy\
    \ _Lp> bool std::operator==(const std::__shared_ptr<_Tp1, _Lp>&, const std::__shared_ptr<_Tp2,\
    \ _Lp>&)\u2019\n 1412 |     operator==(const __shared_ptr<_Tp1, _Lp>& __a,\n \
    \     |     ^~~~~~~~\n/usr/include/c++/9/bits/shared_ptr_base.h:1412:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmp43do9kny.cpp:35:27:\
    \ note:   \u2018__gnu_cxx::__alloc_traits<std::allocator<std::vector<long int>\
    \ >, std::vector<long int> >::value_type\u2019 {aka \u2018std::vector<long int>\u2019\
    } is not derived from \u2018const std::__shared_ptr<_Tp1, _Lp>\u2019\n   35 |\
    \             if (row[j] == i) {\n      |                           ^\nIn file\
    \ included from /usr/include/c++/9/bits/shared_ptr.h:52,\n                 from\
    \ /usr/include/c++/9/memory:81,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:82,\n\
    \                 from /tmp/tmp43do9kny.cpp:2:\n/usr/include/c++/9/bits/shared_ptr_base.h:1418:5:\
    \ note: candidate: \u2018template<class _Tp, __gnu_cxx::_Lock_policy _Lp> bool\
    \ std::operator==(const std::__shared_ptr<_Tp, _Lp>&, std::nullptr_t)\u2019\n\
    \ 1418 |     operator==(const __shared_ptr<_Tp, _Lp>& __a, nullptr_t) noexcept\n\
    \      |     ^~~~~~~~\n/usr/include/c++/9/bits/shared_ptr_base.h:1418:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmp43do9kny.cpp:35:27:\
    \ note:   \u2018__gnu_cxx::__alloc_traits<std::allocator<std::vector<long int>\
    \ >, std::vector<long int> >::value_type\u2019 {aka \u2018std::vector<long int>\u2019\
    } is not derived from \u2018const std::__shared_ptr<_Tp, _Lp>\u2019\n   35 | \
    \            if (row[j] == i) {\n      |                           ^\nIn file\
    \ included from /usr/include/c++/9/bits/shared_ptr.h:52,\n                 from\
    \ /usr/include/c++/9/memory:81,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:82,\n\
    \                 from /tmp/tmp43do9kny.cpp:2:\n/usr/include/c++/9/bits/shared_ptr_base.h:1423:5:\
    \ note: candidate: \u2018template<class _Tp, __gnu_cxx::_Lock_policy _Lp> bool\
    \ std::operator==(std::nullptr_t, const std::__shared_ptr<_Tp, _Lp>&)\u2019\n\
    \ 1423 |     operator==(nullptr_t, const __shared_ptr<_Tp, _Lp>& __a) noexcept\n\
    \      |     ^~~~~~~~\n/usr/include/c++/9/bits/shared_ptr_base.h:1423:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmp43do9kny.cpp:35:27:\
    \ note:   mismatched types \u2018const std::__shared_ptr<_Tp, _Lp>\u2019 and \u2018\
    long int\u2019\n   35 |             if (row[j] == i) {\n      |              \
    \             ^\nIn file included from /usr/include/c++/9/memory:81,\n       \
    \          from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:82,\n      \
    \           from /tmp/tmp43do9kny.cpp:2:\n/usr/include/c++/9/bits/shared_ptr.h:383:5:\
    \ note: candidate: \u2018template<class _Tp, class _Up> bool std::operator==(const\
    \ std::shared_ptr<_Tp>&, const std::shared_ptr<_Tp>&)\u2019\n  383 |     operator==(const\
    \ shared_ptr<_Tp>& __a, const shared_ptr<_Up>& __b) noexcept\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/shared_ptr.h:383:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp43do9kny.cpp:35:27: note:   \u2018__gnu_cxx::__alloc_traits<std::allocator<std::vector<long\
    \ int> >, std::vector<long int> >::value_type\u2019 {aka \u2018std::vector<long\
    \ int>\u2019} is not derived from \u2018const std::shared_ptr<_Tp>\u2019\n   35\
    \ |             if (row[j] == i) {\n      |                           ^\nIn file\
    \ included from /usr/include/c++/9/memory:81,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:82,\n\
    \                 from /tmp/tmp43do9kny.cpp:2:\n/usr/include/c++/9/bits/shared_ptr.h:388:5:\
    \ note: candidate: \u2018template<class _Tp> bool std::operator==(const std::shared_ptr<_Tp>&,\
    \ std::nullptr_t)\u2019\n  388 |     operator==(const shared_ptr<_Tp>& __a, nullptr_t)\
    \ noexcept\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/shared_ptr.h:388:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp43do9kny.cpp:35:27:\
    \ note:   \u2018__gnu_cxx::__alloc_traits<std::allocator<std::vector<long int>\
    \ >, std::vector<long int> >::value_type\u2019 {aka \u2018std::vector<long int>\u2019\
    } is not derived from \u2018const std::shared_ptr<_Tp>\u2019\n   35 |        \
    \     if (row[j] == i) {\n      |                           ^\nIn file included\
    \ from /usr/include/c++/9/memory:81,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:82,\n\
    \                 from /tmp/tmp43do9kny.cpp:2:\n/usr/include/c++/9/bits/shared_ptr.h:393:5:\
    \ note: candidate: \u2018template<class _Tp> bool std::operator==(std::nullptr_t,\
    \ const std::shared_ptr<_Tp>&)\u2019\n  393 |     operator==(nullptr_t, const\
    \ shared_ptr<_Tp>& __a) noexcept\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/shared_ptr.h:393:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp43do9kny.cpp:35:27:\
    \ note:   mismatched types \u2018const std::shared_ptr<_Tp>\u2019 and \u2018long\
    \ int\u2019\n   35 |             if (row[j] == i) {\n      |                 \
    \          ^\nIn file included from /usr/include/c++/9/vector:67,\n          \
    \       from /usr/include/c++/9/queue:61,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:86,\n\
    \                 from /tmp/tmp43do9kny.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1888:5:\
    \ note: candidate: \u2018template<class _Tp, class _Alloc> bool std::operator==(const\
    \ std::vector<_Tp, _Alloc>&, const std::vector<_Tp, _Alloc>&)\u2019\n 1888 | \
    \    operator==(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)\n\
    \      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1888:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmp43do9kny.cpp:35:27: note: \
    \  mismatched types \u2018const std::vector<_Tp, _Alloc>\u2019 and \u2018long\
    \ int\u2019\n   35 |             if (row[j] == i) {\n      |                 \
    \          ^\nIn file included from /usr/include/c++/9/queue:64,\n           \
    \      from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:86,\n          \
    \       from /tmp/tmp43do9kny.cpp:2:\n/usr/include/c++/9/bits/stl_queue.h:338:5:\
    \ note: candidate: \u2018template<class _Tp, class _Seq> bool std::operator==(const\
    \ std::queue<_Tp, _Seq>&, const std::queue<_Tp, _Seq>&)\u2019\n  338 |     operator==(const\
    \ queue<_Tp, _Seq>& __x, const queue<_Tp, _Seq>& __y)\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/stl_queue.h:338:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp43do9kny.cpp:35:27: note:   \u2018__gnu_cxx::__alloc_traits<std::allocator<std::vector<long\
    \ int> >, std::vector<long int> >::value_type\u2019 {aka \u2018std::vector<long\
    \ int>\u2019} is not derived from \u2018const std::queue<_Tp, _Seq>\u2019\n  \
    \ 35 |             if (row[j] == i) {\n      |                           ^\nIn\
    \ file included from /usr/include/c++/9/set:61,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:87,\n\
    \                 from /tmp/tmp43do9kny.cpp:2:\n/usr/include/c++/9/bits/stl_set.h:979:5:\
    \ note: candidate: \u2018template<class _Key, class _Compare, class _Alloc> bool\
    \ std::operator==(const std::set<_Key, _Compare, _Alloc>&, const std::set<_Key,\
    \ _Compare, _Alloc>&)\u2019\n  979 |     operator==(const set<_Key, _Compare,\
    \ _Alloc>& __x,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_set.h:979:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp43do9kny.cpp:35:27:\
    \ note:   \u2018__gnu_cxx::__alloc_traits<std::allocator<std::vector<long int>\
    \ >, std::vector<long int> >::value_type\u2019 {aka \u2018std::vector<long int>\u2019\
    } is not derived from \u2018const std::set<_Key, _Compare, _Alloc>\u2019\n   35\
    \ |             if (row[j] == i) {\n      |                           ^\nIn file\
    \ included from /usr/include/c++/9/set:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:87,\n\
    \                 from /tmp/tmp43do9kny.cpp:2:\n/usr/include/c++/9/bits/stl_multiset.h:964:5:\
    \ note: candidate: \u2018template<class _Key, class _Compare, class _Alloc> bool\
    \ std::operator==(const std::multiset<_Key, _Compare, _Alloc>&, const std::multiset<_Key,\
    \ _Compare, _Alloc>&)\u2019\n  964 |     operator==(const multiset<_Key, _Compare,\
    \ _Alloc>& __x,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_multiset.h:964:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp43do9kny.cpp:35:27:\
    \ note:   \u2018__gnu_cxx::__alloc_traits<std::allocator<std::vector<long int>\
    \ >, std::vector<long int> >::value_type\u2019 {aka \u2018std::vector<long int>\u2019\
    } is not derived from \u2018const std::multiset<_Key, _Compare, _Alloc>\u2019\n\
    \   35 |             if (row[j] == i) {\n      |                           ^\n\
    In file included from /usr/include/c++/9/stack:61,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:89,\n\
    \                 from /tmp/tmp43do9kny.cpp:2:\n/usr/include/c++/9/bits/stl_stack.h:313:5:\
    \ note: candidate: \u2018template<class _Tp, class _Seq> bool std::operator==(const\
    \ std::stack<_Tp, _Seq>&, const std::stack<_Tp, _Seq>&)\u2019\n  313 |     operator==(const\
    \ stack<_Tp, _Seq>& __x, const stack<_Tp, _Seq>& __y)\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/stl_stack.h:313:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp43do9kny.cpp:35:27: note:   \u2018__gnu_cxx::__alloc_traits<std::allocator<std::vector<long\
    \ int> >, std::vector<long int> >::value_type\u2019 {aka \u2018std::vector<long\
    \ int>\u2019} is not derived from \u2018const std::stack<_Tp, _Seq>\u2019\n  \
    \ 35 |             if (row[j] == i) {\n      |                           ^\nIn\
    \ file included from /usr/include/c++/9/valarray:603,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n\
    \                 from /tmp/tmp43do9kny.cpp:2:\n/usr/include/c++/9/bits/valarray_after.h:417:5:\
    \ note: candidate: \u2018template<class _Dom1, class _Dom2> std::_Expr<std::__detail::_BinClos<std::__equal_to,\
    \ std::_Expr, std::_Expr, _Dom1, _Dom2>, typename std::__fun<std::__equal_to,\
    \ typename _Dom1::value_type>::result_type> std::operator==(const std::_Expr<_Dom1,\
    \ typename _Dom1::value_type>&, const std::_Expr<_Dom2, typename _Dom2::value_type>&)\u2019\
    \n  417 |     _DEFINE_EXPR_BINARY_OPERATOR(==, __equal_to)\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /usr/include/c++/9/bits/valarray_after.h:417:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp43do9kny.cpp:35:27: note:   \u2018__gnu_cxx::__alloc_traits<std::allocator<std::vector<long\
    \ int> >, std::vector<long int> >::value_type\u2019 {aka \u2018std::vector<long\
    \ int>\u2019} is not derived from \u2018const std::_Expr<_Dom1, typename _Dom1::value_type>\u2019\
    \n   35 |             if (row[j] == i) {\n      |                           ^\n\
    In file included from /usr/include/c++/9/valarray:603,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n                 from\
    \ /tmp/tmp43do9kny.cpp:2:\n/usr/include/c++/9/bits/valarray_after.h:417:5: note:\
    \ candidate: \u2018template<class _Dom> std::_Expr<std::__detail::_BinClos<std::__equal_to,\
    \ std::_Expr, std::_Constant, _Dom, typename _Dom::value_type>, typename std::__fun<std::__equal_to,\
    \ typename _Dom1::value_type>::result_type> std::operator==(const std::_Expr<_Dom1,\
    \ typename _Dom1::value_type>&, const typename _Dom::value_type&)\u2019\n  417\
    \ |     _DEFINE_EXPR_BINARY_OPERATOR(==, __equal_to)\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /usr/include/c++/9/bits/valarray_after.h:417:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp43do9kny.cpp:35:27: note:   \u2018__gnu_cxx::__alloc_traits<std::allocator<std::vector<long\
    \ int> >, std::vector<long int> >::value_type\u2019 {aka \u2018std::vector<long\
    \ int>\u2019} is not derived from \u2018const std::_Expr<_Dom1, typename _Dom1::value_type>\u2019\
    \n   35 |             if (row[j] == i) {\n      |                           ^\n\
    In file included from /usr/include/c++/9/valarray:603,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n                 from\
    \ /tmp/tmp43do9kny.cpp:2:\n/usr/include/c++/9/bits/valarray_after.h:417:5: note:\
    \ candidate: \u2018template<class _Dom> std::_Expr<std::__detail::_BinClos<std::__equal_to,\
    \ std::_Constant, std::_Expr, typename _Dom::value_type, _Dom>, typename std::__fun<std::__equal_to,\
    \ typename _Dom1::value_type>::result_type> std::operator==(const typename _Dom::value_type&,\
    \ const std::_Expr<_Dom1, typename _Dom1::value_type>&)\u2019\n  417 |     _DEFINE_EXPR_BINARY_OPERATOR(==,\
    \ __equal_to)\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/usr/include/c++/9/bits/valarray_after.h:417:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp43do9kny.cpp:35:27:\
    \ note:   mismatched types \u2018const std::_Expr<_Dom1, typename _Dom1::value_type>\u2019\
    \ and \u2018long int\u2019\n   35 |             if (row[j] == i) {\n      |  \
    \                         ^\nIn file included from /usr/include/c++/9/valarray:603,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n\
    \                 from /tmp/tmp43do9kny.cpp:2:\n/usr/include/c++/9/bits/valarray_after.h:417:5:\
    \ note: candidate: \u2018template<class _Dom> std::_Expr<std::__detail::_BinClos<std::__equal_to,\
    \ std::_Expr, std::_ValArray, _Dom, typename _Dom::value_type>, typename std::__fun<std::__equal_to,\
    \ typename _Dom1::value_type>::result_type> std::operator==(const std::_Expr<_Dom1,\
    \ typename _Dom1::value_type>&, const std::valarray<typename _Dom::value_type>&)\u2019\
    \n  417 |     _DEFINE_EXPR_BINARY_OPERATOR(==, __equal_to)\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /usr/include/c++/9/bits/valarray_after.h:417:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp43do9kny.cpp:35:27: note:   \u2018__gnu_cxx::__alloc_traits<std::allocator<std::vector<long\
    \ int> >, std::vector<long int> >::value_type\u2019 {aka \u2018std::vector<long\
    \ int>\u2019} is not derived from \u2018const std::_Expr<_Dom1, typename _Dom1::value_type>\u2019\
    \n   35 |             if (row[j] == i) {\n      |                           ^\n\
    In file included from /usr/include/c++/9/valarray:603,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n                 from\
    \ /tmp/tmp43do9kny.cpp:2:\n/usr/include/c++/9/bits/valarray_after.h:417:5: note:\
    \ candidate: \u2018template<class _Dom> std::_Expr<std::__detail::_BinClos<std::__equal_to,\
    \ std::_ValArray, std::_Expr, typename _Dom::value_type, _Dom>, typename std::__fun<std::__equal_to,\
    \ typename _Dom1::value_type>::result_type> std::operator==(const std::valarray<typename\
    \ _Dom::value_type>&, const std::_Expr<_Dom1, typename _Dom1::value_type>&)\u2019\
    \n  417 |     _DEFINE_EXPR_BINARY_OPERATOR(==, __equal_to)\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /usr/include/c++/9/bits/valarray_after.h:417:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp43do9kny.cpp:35:27: note:   mismatched types \u2018const std::_Expr<_Dom1,\
    \ typename _Dom1::value_type>\u2019 and \u2018long int\u2019\n   35 |        \
    \     if (row[j] == i) {\n      |                           ^\nIn file included\
    \ from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n               \
    \  from /tmp/tmp43do9kny.cpp:2:\n/usr/include/c++/9/valarray:1197:1: note: candidate:\
    \ \u2018template<class _Tp> std::_Expr<std::__detail::_BinClos<std::__equal_to,\
    \ std::_ValArray, std::_ValArray, _Tp, _Tp>, typename std::__fun<std::__equal_to,\
    \ _Tp>::result_type> std::operator==(const std::valarray<_Tp>&, const std::valarray<_Tp>&)\u2019\
    \n 1197 | _DEFINE_BINARY_OPERATOR(==, __equal_to)\n      | ^~~~~~~~~~~~~~~~~~~~~~~\n\
    /usr/include/c++/9/valarray:1197:1: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp43do9kny.cpp:35:27: note:   \u2018__gnu_cxx::__alloc_traits<std::allocator<std::vector<long\
    \ int> >, std::vector<long int> >::value_type\u2019 {aka \u2018std::vector<long\
    \ int>\u2019} is not derived from \u2018const std::valarray<_Tp>\u2019\n   35\
    \ |             if (row[j] == i) {\n      |                           ^\nIn file\
    \ included from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n      \
    \           from /tmp/tmp43do9kny.cpp:2:\n/usr/include/c++/9/valarray:1197:1:\
    \ note: candidate: \u2018template<class _Tp> std::_Expr<std::__detail::_BinClos<std::__equal_to,\
    \ std::_ValArray, std::_Constant, _Tp, _Tp>, typename std::__fun<std::__equal_to,\
    \ _Tp>::result_type> std::operator==(const std::valarray<_Tp>&, const typename\
    \ std::valarray<_Tp>::value_type&)\u2019\n 1197 | _DEFINE_BINARY_OPERATOR(==,\
    \ __equal_to)\n      | ^~~~~~~~~~~~~~~~~~~~~~~\n/usr/include/c++/9/valarray:1197:1:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp43do9kny.cpp:35:27:\
    \ note:   \u2018__gnu_cxx::__alloc_traits<std::allocator<std::vector<long int>\
    \ >, std::vector<long int> >::value_type\u2019 {aka \u2018std::vector<long int>\u2019\
    } is not derived from \u2018const std::valarray<_Tp>\u2019\n   35 |          \
    \   if (row[j] == i) {\n      |                           ^\nIn file included\
    \ from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n               \
    \  from /tmp/tmp43do9kny.cpp:2:\n/usr/include/c++/9/valarray:1197:1: note: candidate:\
    \ \u2018template<class _Tp> std::_Expr<std::__detail::_BinClos<std::__equal_to,\
    \ std::_Constant, std::_ValArray, _Tp, _Tp>, typename std::__fun<std::__equal_to,\
    \ _Tp>::result_type> std::operator==(const typename std::valarray<_Tp>::value_type&,\
    \ const std::valarray<_Tp>&)\u2019\n 1197 | _DEFINE_BINARY_OPERATOR(==, __equal_to)\n\
    \      | ^~~~~~~~~~~~~~~~~~~~~~~\n/usr/include/c++/9/valarray:1197:1: note:  \
    \ template argument deduction/substitution failed:\n/tmp/tmp43do9kny.cpp:35:27:\
    \ note:   mismatched types \u2018const std::valarray<_Tp>\u2019 and \u2018long\
    \ int\u2019\n   35 |             if (row[j] == i) {\n      |                 \
    \          ^\nIn file included from /usr/include/c++/9/forward_list:40,\n    \
    \             from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:104,\n  \
    \               from /tmp/tmp43do9kny.cpp:2:\n/usr/include/c++/9/bits/forward_list.tcc:393:5:\
    \ note: candidate: \u2018template<class _Tp, class _Alloc> bool std::operator==(const\
    \ std::forward_list<_Tp, _Alloc>&, const std::forward_list<_Tp, _Alloc>&)\u2019\
    \n  393 |     operator==(const forward_list<_Tp, _Alloc>& __lx,\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/forward_list.tcc:393:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp43do9kny.cpp:35:27: note:   \u2018__gnu_cxx::__alloc_traits<std::allocator<std::vector<long\
    \ int> >, std::vector<long int> >::value_type\u2019 {aka \u2018std::vector<long\
    \ int>\u2019} is not derived from \u2018const std::forward_list<_Tp, _Alloc>\u2019\
    \n   35 |             if (row[j] == i) {\n      |                           ^\n\
    In file included from /usr/include/c++/9/future:39,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:105,\n\
    \                 from /tmp/tmp43do9kny.cpp:2:\n/usr/include/c++/9/thread:276:3:\
    \ note: candidate: \u2018bool std::operator==(std::thread::id, std::thread::id)\u2019\
    \n  276 |   operator==(thread::id __x, thread::id __y) noexcept\n      |   ^~~~~~~~\n\
    /usr/include/c++/9/thread:276:25: note:   no known conversion for argument 1 from\
    \ \u2018__gnu_cxx::__alloc_traits<std::allocator<std::vector<long int> >, std::vector<long\
    \ int> >::value_type\u2019 {aka \u2018std::vector<long int>\u2019} to \u2018std::thread::id\u2019\
    \n  276 |   operator==(thread::id __x, thread::id __y) noexcept\n      |     \
    \         ~~~~~~~~~~~^~~\nIn file included from /usr/include/c++/9/random:51,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:108,\n\
    \                 from /tmp/tmp43do9kny.cpp:2:\n/usr/include/c++/9/bits/random.tcc:1884:5:\
    \ note: candidate: \u2018template<class _RealType1> bool std::operator==(const\
    \ std::normal_distribution<_RealType>&, const std::normal_distribution<_RealType>&)\u2019\
    \n 1884 |     operator==(const std::normal_distribution<_RealType>& __d1,\n  \
    \    |     ^~~~~~~~\n/usr/include/c++/9/bits/random.tcc:1884:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmp43do9kny.cpp:35:27: note: \
    \  \u2018__gnu_cxx::__alloc_traits<std::allocator<std::vector<long int> >, std::vector<long\
    \ int> >::value_type\u2019 {aka \u2018std::vector<long int>\u2019} is not derived\
    \ from \u2018const std::normal_distribution<_RealType>\u2019\n   35 |        \
    \     if (row[j] == i) {\n      |                           ^\nIn file included\
    \ from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:111,\n              \
    \   from /tmp/tmp43do9kny.cpp:2:\n/usr/include/c++/9/scoped_allocator:489:5: note:\
    \ candidate: \u2018template<class _OutA1, class _OutA2, class ... _InA> bool std::operator==(const\
    \ std::scoped_allocator_adaptor<_OutA1, _InA ...>&, const std::scoped_allocator_adaptor<_InnerHead,\
    \ _InnerTail ...>&)\u2019\n  489 |     operator==(const scoped_allocator_adaptor<_OutA1,\
    \ _InA...>& __a,\n      |     ^~~~~~~~\n/usr/include/c++/9/scoped_allocator:489:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp43do9kny.cpp:35:27:\
    \ note:   \u2018__gnu_cxx::__alloc_traits<std::allocator<std::vector<long int>\
    \ >, std::vector<long int> >::value_type\u2019 {aka \u2018std::vector<long int>\u2019\
    } is not derived from \u2018const std::scoped_allocator_adaptor<_OutA1, _InA ...>\u2019\
    \n   35 |             if (row[j] == i) {\n      |                           ^\n\
    In file included from /usr/include/c++/9/unordered_map:47,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:117,\n                 from\
    \ /tmp/tmp43do9kny.cpp:2:\n/usr/include/c++/9/bits/unordered_map.h:2093:5: note:\
    \ candidate: \u2018template<class _Key, class _Tp, class _Hash, class _Pred, class\
    \ _Alloc> bool std::operator==(const std::unordered_map<_Key, _Tp, _Hash, _Pred,\
    \ _Alloc>&, const std::unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>&)\u2019\n\
    \ 2093 |     operator==(const unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>&\
    \ __x,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/unordered_map.h:2093:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp43do9kny.cpp:35:27:\
    \ note:   \u2018__gnu_cxx::__alloc_traits<std::allocator<std::vector<long int>\
    \ >, std::vector<long int> >::value_type\u2019 {aka \u2018std::vector<long int>\u2019\
    } is not derived from \u2018const std::unordered_map<_Key, _Tp, _Hash, _Pred,\
    \ _Alloc>\u2019\n   35 |             if (row[j] == i) {\n      |             \
    \              ^\nIn file included from /usr/include/c++/9/unordered_map:47,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:117,\n\
    \                 from /tmp/tmp43do9kny.cpp:2:\n/usr/include/c++/9/bits/unordered_map.h:2105:5:\
    \ note: candidate: \u2018template<class _Key, class _Tp, class _Hash, class _Pred,\
    \ class _Alloc> bool std::operator==(const std::unordered_multimap<_Key, _Tp,\
    \ _Hash, _Pred, _Alloc>&, const std::unordered_multimap<_Key, _Tp, _Hash, _Pred,\
    \ _Alloc>&)\u2019\n 2105 |     operator==(const unordered_multimap<_Key, _Tp,\
    \ _Hash, _Pred, _Alloc>& __x,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/unordered_map.h:2105:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp43do9kny.cpp:35:27:\
    \ note:   \u2018__gnu_cxx::__alloc_traits<std::allocator<std::vector<long int>\
    \ >, std::vector<long int> >::value_type\u2019 {aka \u2018std::vector<long int>\u2019\
    } is not derived from \u2018const std::unordered_multimap<_Key, _Tp, _Hash, _Pred,\
    \ _Alloc>\u2019\n   35 |             if (row[j] == i) {\n      |             \
    \              ^\nIn file included from /usr/include/c++/9/unordered_set:47,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:118,\n\
    \                 from /tmp/tmp43do9kny.cpp:2:\n/usr/include/c++/9/bits/unordered_set.h:1705:5:\
    \ note: candidate: \u2018template<class _Value, class _Hash, class _Pred, class\
    \ _Alloc> bool std::operator==(const std::unordered_set<_Value, _Hash, _Pred,\
    \ _Alloc>&, const std::unordered_set<_Value, _Hash, _Pred, _Alloc>&)\u2019\n 1705\
    \ |     operator==(const unordered_set<_Value, _Hash, _Pred, _Alloc>& __x,\n \
    \     |     ^~~~~~~~\n/usr/include/c++/9/bits/unordered_set.h:1705:5: note:  \
    \ template argument deduction/substitution failed:\n/tmp/tmp43do9kny.cpp:35:27:\
    \ note:   \u2018__gnu_cxx::__alloc_traits<std::allocator<std::vector<long int>\
    \ >, std::vector<long int> >::value_type\u2019 {aka \u2018std::vector<long int>\u2019\
    } is not derived from \u2018const std::unordered_set<_Value, _Hash, _Pred, _Alloc>\u2019\
    \n   35 |             if (row[j] == i) {\n      |                           ^\n\
    In file included from /usr/include/c++/9/unordered_set:47,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:118,\n                 from\
    \ /tmp/tmp43do9kny.cpp:2:\n/usr/include/c++/9/bits/unordered_set.h:1717:5: note:\
    \ candidate: \u2018template<class _Value, class _Hash, class _Pred, class _Alloc>\
    \ bool std::operator==(const std::unordered_multiset<_Value, _Hash, _Pred, _Alloc>&,\
    \ const std::unordered_multiset<_Value, _Hash, _Pred, _Alloc>&)\u2019\n 1717 |\
    \     operator==(const unordered_multiset<_Value, _Hash, _Pred, _Alloc>& __x,\n\
    \      |     ^~~~~~~~\n/usr/include/c++/9/bits/unordered_set.h:1717:5: note: \
    \  template argument deduction/substitution failed:\n/tmp/tmp43do9kny.cpp:35:27:\
    \ note:   \u2018__gnu_cxx::__alloc_traits<std::allocator<std::vector<long int>\
    \ >, std::vector<long int> >::value_type\u2019 {aka \u2018std::vector<long int>\u2019\
    } is not derived from \u2018const std::unordered_multiset<_Value, _Hash, _Pred,\
    \ _Alloc>\u2019\n   35 |             if (row[j] == i) {\n      |             \
    \              ^\nIn file included from /usr/include/c++/9/string:41,\n      \
    \           from /usr/include/c++/9/bits/locale_classes.h:40,\n              \
    \   from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp43do9kny.cpp:2:\n/usr/include/c++/9/bits/allocator.h:155:7:\
    \ note: candidate: \u2018bool std::operator==(const std::allocator<long int>&,\
    \ const std::allocator<long int>&)\u2019\n  155 |       operator==(const allocator&,\
    \ const allocator&) _GLIBCXX_NOTHROW\n      |       ^~~~~~~~\n/usr/include/c++/9/bits/allocator.h:155:18:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<std::vector<long\
    \ int> >, std::vector<long int> >::value_type\u2019 {aka \u2018std::vector<long\
    \ int>\u2019} to \u2018const std::allocator<long int>&\u2019\n  155 |       operator==(const\
    \ allocator&, const allocator&) _GLIBCXX_NOTHROW\n      |                  ^~~~~~~~~~~~~~~~\n\
    In file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n           \
    \      from /usr/include/c++/9/bits/char_traits.h:39,\n                 from /usr/include/c++/9/ios:40,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp43do9kny.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:883:5:\
    \ note: candidate: \u2018template<class _IteratorL, class _IteratorR, class _Container>\
    \ bool __gnu_cxx::operator==(const __gnu_cxx::__normal_iterator<_IteratorL, _Container>&,\
    \ const __gnu_cxx::__normal_iterator<_IteratorR, _Container>&)\u2019\n  883 |\
    \     operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,\n   \
    \   |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:883:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmp43do9kny.cpp:35:27: note: \
    \  \u2018__gnu_cxx::__alloc_traits<std::allocator<std::vector<long int> >, std::vector<long\
    \ int> >::value_type\u2019 {aka \u2018std::vector<long int>\u2019} is not derived\
    \ from \u2018const __gnu_cxx::__normal_iterator<_IteratorL, _Container>\u2019\n\
    \   35 |             if (row[j] == i) {\n      |                           ^\n\
    In file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n           \
    \      from /usr/include/c++/9/bits/char_traits.h:39,\n                 from /usr/include/c++/9/ios:40,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp43do9kny.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:890:5:\
    \ note: candidate: \u2018template<class _Iterator, class _Container> bool __gnu_cxx::operator==(const\
    \ __gnu_cxx::__normal_iterator<_Iterator, _Container>&, const __gnu_cxx::__normal_iterator<_Iterator,\
    \ _Container>&)\u2019\n  890 |     operator==(const __normal_iterator<_Iterator,\
    \ _Container>& __lhs,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:890:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp43do9kny.cpp:35:27:\
    \ note:   \u2018__gnu_cxx::__alloc_traits<std::allocator<std::vector<long int>\
    \ >, std::vector<long int> >::value_type\u2019 {aka \u2018std::vector<long int>\u2019\
    } is not derived from \u2018const __gnu_cxx::__normal_iterator<_Iterator, _Container>\u2019\
    \n   35 |             if (row[j] == i) {\n      |                           ^\n\
    In file included from /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n\
    \                 from /usr/include/c++/9/bits/allocator.h:46,\n             \
    \    from /usr/include/c++/9/string:41,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp43do9kny.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h:166:2: note:\
    \ candidate: \u2018template<class _Up> bool __gnu_cxx::operator==(const __gnu_cxx::new_allocator<long\
    \ int>&, const __gnu_cxx::new_allocator<_Tp>&)\u2019\n  166 |  operator==(const\
    \ new_allocator&, const new_allocator<_Up>&)\n      |  ^~~~~~~~\n/usr/include/c++/9/ext/new_allocator.h:166:2:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp43do9kny.cpp:35:27:\
    \ note:   mismatched types \u2018const __gnu_cxx::new_allocator<_Tp>\u2019 and\
    \ \u2018long int\u2019\n   35 |             if (row[j] == i) {\n      |      \
    \                     ^\n/tmp/tmp43do9kny.cpp:40:46: error: \u2018j\u2019 was\
    \ not declared in this scope\n   40 |             res.push_back(std::make_tuple(i,\
    \ j));\n      |                                              ^\n/tmp/tmp43do9kny.cpp:50:34:\
    \ error: request for member \u2018size\u2019 in \u2018row\u2019, which is of non-class\
    \ type \u2018long int\u2019\n   50 |         for (long i = 0; i < row.size();\
    \ i++) {\n      |                                  ^~~~\n/tmp/tmp43do9kny.cpp:51:22:\
    \ error: invalid types \u2018long int[long int]\u2019 for array subscript\n  \
    \ 51 |             if (row[i] == col) {\n      |                      ^\n/tmp/tmp43do9kny.cpp:55:24:\
    \ error: request for member \u2018size\u2019 in \u2018row\u2019, which is of non-class\
    \ type \u2018long int\u2019\n   55 |         if (cnt == row.size()) {\n      |\
    \                        ^~~~\n/tmp/tmp43do9kny.cpp:56:17: error: request for\
    \ member \u2018push_back\u2019 in \u2018col\u2019, which is of non-class type\
    \ \u2018long int\u2019\n   56 |             col.push_back(col);\n      |     \
    \            ^~~~~~~~~\n/tmp/tmp43do9kny.cpp:57:17: error: request for member\
    \ \u2018push_back\u2019 in \u2018row\u2019, which is of non-class type \u2018\
    long int\u2019\n   57 |             row.push_back(row);\n      |             \
    \    ^~~~~~~~~\n/tmp/tmp43do9kny.cpp:58:17: error: request for member \u2018push_back\u2019\
    \ in \u2018col\u2019, which is of non-class type \u2018long int\u2019\n   58 |\
    \             col.push_back(col);\n      |                 ^~~~~~~~~\n/tmp/tmp43do9kny.cpp:59:17:\
    \ error: request for member \u2018push_back\u2019 in \u2018row\u2019, which is\
    \ of non-class type \u2018long int\u2019\n   59 |             row.push_back(row);\n\
    \      |                 ^~~~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    std::vector<std::tuple<long, long>> res;\n    std::vector<long>\
    \ row;\n    std::vector<long> col;\n    long row_index = 0;\n    long col_index\
    \ = 0;\n    for (auto &row : lst) {\n        row.clear();\n        col.clear();\n\
    \        for (auto &elem : row) {\n            row.push_back(elem);\n        \
    \    col.push_back(elem);\n        }\n        std::sort(row.begin(), row.end());\n\
    \        std::sort(col.begin(), col.end());\n        if (row_index == 0)\n   \
    \         std::sort(row.begin(), row.end());\n        if (col_index == 0)\n  \
    \          std::sort(col.begin(), col.end());\n        if (row_index == col.size()\
    \ - 1) {\n            if (row_index == 0)\n                res.emplace_back(0,\
    \ row_index);\n            else\n                res.emplace_back(row_index, 0);\n\
    \            row_index++;\n            col_index++;\n        }\n        else if\
    \ (col_index == row.size() - 1) {\n            if (col_index == 0)\n         \
    \       res.emplace_back(row_index, 0);\n            else\n                res.emplace_back(row_index,\
    \ col_index);\n            row_index++;\n            col_index++;\n        }\n\
    \        else if (row_index == 0 && col_index == row.size() - 1) {\n         \
    \   if (row_index == 0 && col_index == 0)\n                res.emplace_back(0,\
    \ 0);\n            else\n                res.emplace_back(row_index, col_index);\n\
    \            row_index++;\n            col_index++;\n        }\n        else if\
    \ (row_index == 0 && col_index != row.size() - 1) {\n            if (row_index\
    \ == 0 && col_index == 0)\n                res.emplace_back(0, col_index);\n \
    \           else\n                res.emplace_back(row_index, col_index);\n  \
    \          row_index++;\n            col_index++;\n        }\n        else if\
    \ (row_index != 0 && col_index == row.size() - 1) {\n            if (row_index\
    \ == 0 && col_index == 0)\n                res.emplace_back(row_index, 0);\n \
    \           else\n                res.emplace_back(row_index, col_index);\n  \
    \          row_index++;\n            col_index++;\n        }\n        else if\
    \ (row_index != 0 && col_index != row.size() - 1) {\n            if (row_index\
    \ == 0 && col_index == 0)\n                res.emplace_back(row_index, col_index);\n\
    \            else\n                res.emplace_back(row_index, col_index);\n \
    \           row_index++;\n            col_index++;\n        }\n        else if\
    \ (row_index != 0 && col_index == row.size() - 1) {\n            if (row_index\
    \ == 0 && col_index == 0)\n                res.emplace_back(row_index, 0);\n \
    \           else\n                res.emplace_back(\n}\nint main() {\n    auto\
    \ candidate = get_row;\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpexknwt1d.cpp: In function \u2018std::vector<std::tuple<long int,\
    \ long int> > get_row(std::vector<std::vector<long int> >, long int)\u2019:\n\
    /tmp/tmpexknwt1d.cpp:91:1: error: expected primary-expression before \u2018}\u2019\
    \ token\n   91 | }\n      | ^\n/tmp/tmpexknwt1d.cpp:92:12: error: a function-definition\
    \ is not allowed here before \u2018{\u2019 token\n   92 | int main() {\n     \
    \ |            ^\n/tmp/tmpexknwt1d.cpp:100:1: error: expected \u2018}\u2019 at\
    \ end of input\n  100 | }\n      | ^\n/tmp/tmpexknwt1d.cpp:25:27: note: to match\
    \ this \u2018{\u2019\n   25 |     for (auto &row : lst) {\n      |           \
    \                ^\n/tmp/tmpexknwt1d.cpp:100:1: error: expected \u2018}\u2019\
    \ at end of input\n  100 | }\n      | ^\n/tmp/tmpexknwt1d.cpp:19:89: note: to\
    \ match this \u2018{\u2019\n   19 | std::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n      |                                                    \
    \                                     ^\n/tmp/tmpexknwt1d.cpp:100:1: warning:\
    \ no return statement in function returning non-void [-Wreturn-type]\n  100 |\
    \ }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    std::vector<std::tuple<long, long>> res;\n    for(auto &row\
    \ : lst) {\n        for(auto &el : row) {\n            if(el == x) {\n       \
    \         res.emplace_back(std::make_tuple(row.size() - 1, row.size() - 1));\n\
    \            }\n        }\n    }\n    std::sort(res.begin(), res.end(), [](const\
    \ std::tuple<long, long> &a, const std::tuple<long, long> &b) { return std::get<0>(a)\
    \ < std::get<0>(b); });\n    std::sort(res.begin(), res.end(), [](const std::tuple<long,\
    \ long> &a, const std::tuple<long, long> &b) { return std::get<1>(a) > std::get<1>(b);\
    \ });\n    return res;\n}\nint main() {\n    auto candidate = get_row;\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "tmpniuzrdd4: /tmp/tmpniuzrdd4.cpp:34: int main(): Assertion `candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    std::vector<std::tuple<long, long>> res;\n    for(auto &row\
    \ : lst) {\n        for(auto &el : row) {\n            if(el == x) {\n       \
    \         res.push_back(std::make_tuple(row.size() - 1, row.size() - 1));\n  \
    \          }\n        }\n    }\n    std::sort(res.begin(), res.end(), [](const\
    \ std::tuple<long, long> &a, const std::tuple<long, long> &b) { return std::get<0>(a)\
    \ < std::get<0>(b); });\n    std::sort(res.begin(), res.end(), [](const std::tuple<long,\
    \ long> &a, const std::tuple<long, long> &b) { return std::get<1>(a) < std::get<1>(b);\
    \ });\n    return res;\n}\nint main() {\n    auto candidate = get_row;\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "tmpd1o2um_e: /tmp/tmpd1o2um_e.cpp:34: int main(): Assertion `candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    std::vector<std::tuple<long, long>> res;\n    std::vector<long>\
    \ row;\n    std::vector<long> col;\n    for (auto &i : lst) {\n        row.push_back(i[0]);\n\
    \        col.push_back(i.size() - 1);\n    }\n    std::sort(row.begin(), row.end(),\
    \ std::greater<long>());\n    std::sort(col.begin(), col.end(), std::greater<long>());\n\
    \    for (long i = 0; i < row.size(); i++) {\n        for (long j = 0; j < col.size();\
    \ j++) {\n            if (row[i] == x && col[j] == i) {\n                res.push_back(std::make_tuple(i,\
    \ j));\n            }\n        }\n    }\n    return res;\n}\nint main() {\n  \
    \  auto candidate = get_row;\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "tmpk3dgzxjc: /tmp/tmpk3dgzxjc.cpp:40: int main(): Assertion `candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1)\
    \ == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n// get_row([[],\
    \ [1], [1, 2, 3]], 3) == [(2, 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    std::vector<std::tuple<long, long>> res;\n    long n = lst.size();\n\
    \    long m = lst[0].size();\n    long cnt = 0;\n    for (long i = 0; i < n; i++)\
    \ {\n        long cnt = 0;\n        for (long j = 0; j < m; j++) {\n         \
    \   if (lst[i][j] == x) {\n                res.push_back({i, j});\n          \
    \      cnt++;\n            }\n        }\n        if (cnt == m) {\n           \
    \ break;\n        }\n    }\n    std::sort(res.begin(), res.end(), [](std::tuple<long,\
    \ long> a, std::tuple<long, long> b) {\n        return std::get<0>(a) < std::get<0>(b);\n\
    \    });\n    for (auto &i : res) {\n        std::sort(i.begin(), i.end(), [](std::tuple<long,\
    \ long> a, std::tuple<long, long> b) {\n            return std::get<1>(a) > std::get<1>(b);\n\
    \        });\n    }\n    return res;\n}\nint main() {\n    auto candidate = get_row;\n\
    \    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
    \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1),\
    \ std::make_tuple(3, 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n \
    \   assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1, 2,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1, 1,\
    \ 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1, 2,\
    \ 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1, 2,\
    \ 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
    \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
    \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
    \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
    \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
    \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
    \ long>>({std::make_tuple(2, 2)})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6v5t16ph.cpp: In function \u2018std::vector<std::tuple<long int,\
    \ long int> > get_row(std::vector<std::vector<long int> >, long int)\u2019:\n\
    /tmp/tmp6v5t16ph.cpp:40:21: error: \u2018class std::tuple<long int, long int>\u2019\
    \ has no member named \u2018begin\u2019\n   40 |         std::sort(i.begin(),\
    \ i.end(), [](std::tuple<long, long> a, std::tuple<long, long> b) {\n      | \
    \                    ^~~~~\n/tmp/tmp6v5t16ph.cpp:40:32: error: \u2018class std::tuple<long\
    \ int, long int>\u2019 has no member named \u2018end\u2019\n   40 |         std::sort(i.begin(),\
    \ i.end(), [](std::tuple<long, long> a, std::tuple<long, long> b) {\n      | \
    \                               ^~~\n"
  exit_code: 1
  status: SyntaxError
