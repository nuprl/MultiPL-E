name: HumanEval_15_string_sequence
language: cpp
results:
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    for(long i=0;i<n;i++)\n        s += std::to_string(i);\n\
    \    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0))\
    \ == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpggpdau29: /tmp/tmpggpdau29.cpp:16: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    for(long i = 0; i < n; i++) {\n        s += std::to_string(i);\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmp7w5gmzrd: /tmp/tmp7w5gmzrd.cpp:17: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    for(int i = 0; i <= n; i++) {\n        s += std::to_string(i);\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpfroz6kuo: /tmp/tmpfroz6kuo.cpp:18: int main(): Assertion `candidate((3))\
    \ == (\"0 1 2 3\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    for(int i=0;i<n;++i)\n        s+=std::to_string(i);\n\
    \    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0))\
    \ == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmp5_oi_lxx: /tmp/tmp5_oi_lxx.cpp:16: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    for(long i=0;i<n;++i)\n        s+=std::to_string(i);\n\
    \    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0))\
    \ == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmp691i9eic: /tmp/tmp691i9eic.cpp:16: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s = \"\";\n    for(long i = 0; i <= n; i++) {\n      \
    \  s += std::to_string(i);\n    }\n    return s;\n}\nint main() {\n    auto candidate\
    \ = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3))\
    \ == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmp6jay_ck_: /tmp/tmp6jay_ck_.cpp:18: int main(): Assertion `candidate((3))\
    \ == (\"0 1 2 3\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s = \"\";\n    long i = 1;\n    while (i <= n) {\n   \
    \     s += std::to_string(i);\n        i++;\n    }\n    return s;\n}\nint main()\
    \ {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"\
    ));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmp9t4j8jz9: /tmp/tmp9t4j8jz9.cpp:19: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    for(int i = 0; i <= n; i++){\n        s += std::to_string(i);\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpv6g2qr4p: /tmp/tmpv6g2qr4p.cpp:18: int main(): Assertion `candidate((3))\
    \ == (\"0 1 2 3\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s = \"\";\n    long i = n;\n    while (i > 0)\n    {\n\
    \        s += std::to_string(i);\n        i /= 10;\n    }\n    return s;\n}\n\
    int main() {\n    auto candidate = string_sequence;\n    assert(candidate((0))\
    \ == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpehsaz4lj: /tmp/tmpehsaz4lj.cpp:20: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    for(int i=0;i<n;i++) {\n        s += std::to_string(i);\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpe4sjaamp: /tmp/tmpe4sjaamp.cpp:17: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    for(int i=0;i<n;i++)\n        s += std::to_string(i);\n\
    \    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0))\
    \ == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpvljy5gam: /tmp/tmpvljy5gam.cpp:16: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n  std::string s;\n  for (long i = 0; i < n; i++) {\n    s += std::to_string(i);\n\
    \  }\n  return s;\n}\nint main() {\n    auto candidate = string_sequence;\n  \
    \  assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"\
    ));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmph6_o0rwh: /tmp/tmph6_o0rwh.cpp:17: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    for(int i = 0; i <= n; i++) {\n        s += std::to_string(i);\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmp4fv5qibi: /tmp/tmp4fv5qibi.cpp:18: int main(): Assertion `candidate((3))\
    \ == (\"0 1 2 3\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    for(int i = 0; i < n; i++) {\n        s += std::to_string(i);\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmp56vx89i2: /tmp/tmp56vx89i2.cpp:17: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    for(long i=0;i<n;i++)\n        s+=std::to_string(i);\n\
    \    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0))\
    \ == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmp4vlr0ylr: /tmp/tmp4vlr0ylr.cpp:16: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n  std::string s;\n  s.reserve(2 * n);\n  for (long i = 0; i < n; i++)\
    \ {\n    s += std::to_string(i);\n  }\n  return s;\n}\nint main() {\n    auto\
    \ candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3))\
    \ == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmpxhhjgdwc: /tmp/tmpxhhjgdwc.cpp:18: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n  std::string s;\n  for (long i = 0; i < n; i++) {\n    s += std::to_string(i);\n\
    \  }\n  return s;\n}\nint main() {\n    auto candidate = string_sequence;\n  \
    \  assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"\
    ));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpwejpwegh: /tmp/tmpwejpwegh.cpp:17: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    for(long i = 0; i < n; i++) {\n        s += std::to_string(i);\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmp73iwy0uh: /tmp/tmp73iwy0uh.cpp:17: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s = \"\";\n    for(int i = 0; i <= n; i++) {\n       \
    \ s += std::to_string(i);\n    }\n    return s;\n}\nint main() {\n    auto candidate\
    \ = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3))\
    \ == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmp97yojeo1: /tmp/tmp97yojeo1.cpp:18: int main(): Assertion `candidate((3))\
    \ == (\"0 1 2 3\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    for(long i=0;i<n;i++) {\n        s += std::to_string(i);\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpgkv1x79l: /tmp/tmpgkv1x79l.cpp:17: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    for(int i = 0; i<n; i++) {\n        s += std::to_string(i);\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpjeho7n95: /tmp/tmpjeho7n95.cpp:17: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    for(long i=0;i<n;i++)\n        s += std::to_string(i);\n\
    \    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0))\
    \ == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmp_9msus91: /tmp/tmp_9msus91.cpp:16: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    for(int i=0;i<n;i++) {\n        s += std::to_string(i);\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpkjhgb492: /tmp/tmpkjhgb492.cpp:17: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    for(int i = 0; i <= n; i++) {\n        s += std::to_string(i);\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmp_30ljroc: /tmp/tmp_30ljroc.cpp:18: int main(): Assertion `candidate((3))\
    \ == (\"0 1 2 3\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    for(int i = 0; i <= n; i++) {\n        s += std::to_string(i);\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpexsha4m8: /tmp/tmpexsha4m8.cpp:18: int main(): Assertion `candidate((3))\
    \ == (\"0 1 2 3\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    for(long i=0;i<n;i++) {\n        s += std::to_string(i);\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpmhx01o6q: /tmp/tmpmhx01o6q.cpp:17: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    for(long i=0;i<n;i++)\n        s += std::to_string(i);\n\
    \    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0))\
    \ == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpaa64dtmk: /tmp/tmpaa64dtmk.cpp:16: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    for(long i=0;i<n;++i)\n        s += std::to_string(i);\n\
    \    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0))\
    \ == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpgilgj7wa: /tmp/tmpgilgj7wa.cpp:16: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    for(long i=0;i<n;i++) {\n        s += std::to_string(i);\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpsmytf9wd: /tmp/tmpsmytf9wd.cpp:17: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    for(int i=0;i<n;++i)\n        s+=std::to_string(i);\n\
    \    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0))\
    \ == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpjzs0qx6i: /tmp/tmpjzs0qx6i.cpp:16: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n  std::string s;\n  s.reserve(n);\n  for (long i = 0; i < n; i++) {\n\
    \    s += std::to_string(i);\n  }\n  return s;\n}\nint main() {\n    auto candidate\
    \ = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3))\
    \ == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmpz79me1zm: /tmp/tmpz79me1zm.cpp:18: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    for(long i=0;i<n;i++)\n        s += std::to_string(i);\n\
    \    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0))\
    \ == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpq20d6yp5: /tmp/tmpq20d6yp5.cpp:16: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    for(long i = 0; i < n; i++) {\n        s += std::to_string(i);\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpso6bvomb: /tmp/tmpso6bvomb.cpp:17: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    for(long i=0;i<n;i++)\n        s += std::to_string(i);\n\
    \    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0))\
    \ == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmp80jv4vnr: /tmp/tmp80jv4vnr.cpp:16: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    for(int i = 0; i <= n; i++) {\n        s += std::to_string(i);\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpfv7n4bpk: /tmp/tmpfv7n4bpk.cpp:18: int main(): Assertion `candidate((3))\
    \ == (\"0 1 2 3\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    for(int i = 0; i <= n; i++) {\n        s += std::to_string(i);\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpbopa8eyn: /tmp/tmpbopa8eyn.cpp:18: int main(): Assertion `candidate((3))\
    \ == (\"0 1 2 3\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    for(int i=0;i<n;++i)\n        s += std::to_string(i);\n\
    \    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0))\
    \ == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmp9itmf1u0: /tmp/tmp9itmf1u0.cpp:16: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    for(long i = 0; i < n; i++) {\n        s += std::to_string(i);\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmphyycehxh: /tmp/tmphyycehxh.cpp:17: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n  std::string s;\n  for (long i = 0; i < n; i++) {\n    s += std::to_string(i);\n\
    \  }\n  return s;\n}\nint main() {\n    auto candidate = string_sequence;\n  \
    \  assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"\
    ));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpz3xv6o__: /tmp/tmpz3xv6o__.cpp:17: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    for(long i=0;i<n;i++) {\n        s += std::to_string(i);\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmp3iv6yir2: /tmp/tmp3iv6yir2.cpp:17: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    for(int i=0;i<n;++i)\n        s += std::to_string(i);\n\
    \    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0))\
    \ == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmp0x31jhs4: /tmp/tmp0x31jhs4.cpp:16: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    for(int i = 0; i <= n; i++) {\n        s += std::to_string(i);\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmp_q2aoqbf: /tmp/tmp_q2aoqbf.cpp:18: int main(): Assertion `candidate((3))\
    \ == (\"0 1 2 3\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    for(int i = 0; i <= n; i++) {\n        s += std::to_string(i);\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmp00exljyl: /tmp/tmp00exljyl.cpp:18: int main(): Assertion `candidate((3))\
    \ == (\"0 1 2 3\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    for(int i=0;i<n;i++)\n        s += std::to_string(i);\n\
    \    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0))\
    \ == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpofm8ru6i: /tmp/tmpofm8ru6i.cpp:16: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s = \"\";\n    for(long i = 0; i <= n; i++) {\n      \
    \  s += std::to_string(i);\n    }\n    return s;\n}\nint main() {\n    auto candidate\
    \ = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3))\
    \ == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmpnfl5s8p0: /tmp/tmpnfl5s8p0.cpp:18: int main(): Assertion `candidate((3))\
    \ == (\"0 1 2 3\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    for(int i = 0; i <= n; i++) {\n        s += std::to_string(i);\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmplc8o91zc: /tmp/tmplc8o91zc.cpp:18: int main(): Assertion `candidate((3))\
    \ == (\"0 1 2 3\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    for(long i=0;i<n;++i)\n        s += std::to_string(i);\n\
    \    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0))\
    \ == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmp1qwikrye: /tmp/tmp1qwikrye.cpp:16: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    for(long i=0;i<n;i++)\n        s += std::to_string(i);\n\
    \    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0))\
    \ == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmph255b58v: /tmp/tmph255b58v.cpp:16: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    for(long i=0;i<n;i++)\n        s+=std::to_string(i);\n\
    \    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0))\
    \ == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpf649di00: /tmp/tmpf649di00.cpp:16: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s = \"\";\n    for(int i = 0; i <= n; i++) {\n       \
    \ s += std::to_string(i);\n    }\n    return s;\n}\nint main() {\n    auto candidate\
    \ = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3))\
    \ == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmp26nq6qqk: /tmp/tmp26nq6qqk.cpp:18: int main(): Assertion `candidate((3))\
    \ == (\"0 1 2 3\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n  std::string s;\n  while (n) {\n    s.push_back(n%10 + '0');\n    n /=\
    \ 10;\n  }\n  return s;\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmps5ciw59b: /tmp/tmps5ciw59b.cpp:18: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    for(int i=0;i<n;++i)\n        s+=std::to_string(i);\n\
    \    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0))\
    \ == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpo0yqrcgr: /tmp/tmpo0yqrcgr.cpp:16: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    for(long i=0;i<n;i++) {\n        s += std::to_string(i);\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpu19e8i9y: /tmp/tmpu19e8i9y.cpp:17: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n  std::string s;\n  s.reserve(n);\n  for (long i = 0; i < n; ++i) {\n\
    \    s += std::to_string(i);\n  }\n  return s;\n}\nint main() {\n    auto candidate\
    \ = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3))\
    \ == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmpsevk0d92: /tmp/tmpsevk0d92.cpp:18: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    for(int i = 0; i <= n; i++) {\n        s += std::to_string(i);\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpm5vcrw3m: /tmp/tmpm5vcrw3m.cpp:18: int main(): Assertion `candidate((3))\
    \ == (\"0 1 2 3\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    for(int i=0;i<n;i++) s += std::to_string(i);\n\
    \    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0))\
    \ == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpeo81z_mq: /tmp/tmpeo81z_mq.cpp:15: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    for(int i=0;i<n;i++)\n        s += std::to_string(i);\n\
    \    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0))\
    \ == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmp40cawnyy: /tmp/tmp40cawnyy.cpp:16: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    for(long i=0;i<n;i++)\n        s += std::to_string(i);\n\
    \    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0))\
    \ == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpxogw17ai: /tmp/tmpxogw17ai.cpp:16: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s = \"\";\n    for(long i = 0; i <= n; i++) {\n      \
    \  s += std::to_string(i);\n    }\n    return s;\n}\nint main() {\n    auto candidate\
    \ = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3))\
    \ == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmp_tdp1ij8: /tmp/tmp_tdp1ij8.cpp:18: int main(): Assertion `candidate((3))\
    \ == (\"0 1 2 3\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    for(int i=0;i<n;i++)\n        s += std::to_string(i);\n\
    \    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0))\
    \ == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmprkaho1_4: /tmp/tmprkaho1_4.cpp:16: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    for(int i = 0; i <= n; i++){\n        s += std::to_string(i);\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpiul5s32q: /tmp/tmpiul5s32q.cpp:18: int main(): Assertion `candidate((3))\
    \ == (\"0 1 2 3\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n  std::string s;\n  for (long i = 0; i < n; i++) {\n    s += std::to_string(i);\n\
    \  }\n  return s;\n}\nint main() {\n    auto candidate = string_sequence;\n  \
    \  assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"\
    ));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpum38qpfp: /tmp/tmpum38qpfp.cpp:17: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    for(long i=0;i<n;i++) {\n        s += std::to_string(i);\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpxrogev6w: /tmp/tmpxrogev6w.cpp:17: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    for(long i = 0; i < n; ++i)\n        s += std::to_string(i);\n\
    \    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0))\
    \ == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpar1q4v6f: /tmp/tmpar1q4v6f.cpp:16: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    for(int i = 0; i <= n; i++) {\n        s += std::to_string(i);\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpp48mkfhe: /tmp/tmpp48mkfhe.cpp:18: int main(): Assertion `candidate((3))\
    \ == (\"0 1 2 3\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    for(int i = 0; i <= n; i++) {\n        s += std::to_string(i);\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmp0pcsxt3r: /tmp/tmp0pcsxt3r.cpp:18: int main(): Assertion `candidate((3))\
    \ == (\"0 1 2 3\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    for(long i=0;i<n;i++) {\n        s+=std::to_string(i);\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpvy5bvm8f: /tmp/tmpvy5bvm8f.cpp:17: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    for(int i=0;i<n;i++) {\n        s += std::to_string(i);\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmp8hol1tj9: /tmp/tmp8hol1tj9.cpp:17: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    for(int i = 0; i <= n; i++) {\n        s += std::to_string(i);\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmp7tz4lvr6: /tmp/tmp7tz4lvr6.cpp:18: int main(): Assertion `candidate((3))\
    \ == (\"0 1 2 3\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    for(long i=0;i<n;i++)\n        s+=std::to_string(i);\n\
    \    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0))\
    \ == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpfpqfipq_: /tmp/tmpfpqfipq_.cpp:16: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n  std::string s;\n  s.reserve(n);\n  for (long i = 0; i < n; i++) {\n\
    \    s += std::to_string(i);\n  }\n  return s;\n}\nint main() {\n    auto candidate\
    \ = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3))\
    \ == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmpll6frwa6: /tmp/tmpll6frwa6.cpp:18: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    for(long i = 0; i < n; ++i)\n        s += std::to_string(i);\n\
    \    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0))\
    \ == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmp88bq5amz: /tmp/tmp88bq5amz.cpp:16: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    for(int i=0;i<n;i++)\n        s += std::to_string(i);\n\
    \    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0))\
    \ == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpybhchgmx: /tmp/tmpybhchgmx.cpp:16: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    for(int i=0;i<n;i++)\n        s += std::to_string(i);\n\
    \    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0))\
    \ == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpxb7zbpj8: /tmp/tmpxb7zbpj8.cpp:16: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s = \"\";\n    for(int i=0;i<n;i++) {\n        s += std::to_string(i);\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpnoevq1v0: /tmp/tmpnoevq1v0.cpp:17: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    for(int i=0;i<n;i++) {\n        s += std::to_string(i);\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpxyqbqac7: /tmp/tmpxyqbqac7.cpp:17: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    for(int i=0;i<n;i++) {\n        s += std::to_string(i);\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmp78h76zhg: /tmp/tmp78h76zhg.cpp:17: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    for(int i = 0; i <= n; i++) {\n        s += std::to_string(i);\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpfy6usf61: /tmp/tmpfy6usf61.cpp:18: int main(): Assertion `candidate((3))\
    \ == (\"0 1 2 3\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    for(long i=0;i<n;i++)\n        s += std::to_string(i);\n\
    \    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0))\
    \ == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmp1d9cwpma: /tmp/tmp1d9cwpma.cpp:16: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s = \"\";\n    for(int i = 0; i <= n; i++) {\n       \
    \ s += std::to_string(i);\n    }\n    return s;\n}\nint main() {\n    auto candidate\
    \ = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3))\
    \ == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmpp9rz9y4a: /tmp/tmpp9rz9y4a.cpp:18: int main(): Assertion `candidate((3))\
    \ == (\"0 1 2 3\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    for(int i=0;i<n;i++) {\n        s+=std::to_string(i);\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpe8mq58i2: /tmp/tmpe8mq58i2.cpp:17: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    for(long i=0;i<n;++i)\n        s += std::to_string(i);\n\
    \    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0))\
    \ == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpasctf2fk: /tmp/tmpasctf2fk.cpp:16: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    for(int i = 0; i <= n; i++) {\n        s += std::to_string(i);\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpp1m836w3: /tmp/tmpp1m836w3.cpp:18: int main(): Assertion `candidate((3))\
    \ == (\"0 1 2 3\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    for(long i=0;i<n;i++)\n        s += std::to_string(i);\n\
    \    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0))\
    \ == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmp28p8u92w: /tmp/tmp28p8u92w.cpp:16: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    for(long i=0;i<n;i++) {\n        s += std::to_string(i);\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpnrb2lp2x: /tmp/tmpnrb2lp2x.cpp:17: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    for(long i=0;i<n;i++)\n        s+=to_string(i);\n\
    \    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0))\
    \ == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpcgp5p886.cpp: In function \u2018std::string string_sequence(long\
    \ int)\u2019:\n/tmp/tmpcgp5p886.cpp:11:12: error: \u2018to_string\u2019 was not\
    \ declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019?\n\
    \   11 |         s+=to_string(i);\n      |            ^~~~~~~~~\n      |     \
    \       std::__cxx11::to_string\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpcgp5p886.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:6598:3:\
    \ note: \u2018std::__cxx11::to_string\u2019 declared here\n 6598 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    for(int i = 0; i <= n; i++) {\n        s += std::to_string(i);\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpjcf6q2si: /tmp/tmpjcf6q2si.cpp:18: int main(): Assertion `candidate((3))\
    \ == (\"0 1 2 3\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    for(long i=0;i<n;i++)\n        s += std::to_string(i);\n\
    \    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0))\
    \ == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmps0xas0bg: /tmp/tmps0xas0bg.cpp:16: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    for(int i=0;i<n;i++) {\n        s+=std::to_string(i);\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpa2cjp4w7: /tmp/tmpa2cjp4w7.cpp:17: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    for(long i = 0; i < n; ++i)\n        s += std::to_string(i);\n\
    \    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0))\
    \ == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpnj8dkbri: /tmp/tmpnj8dkbri.cpp:16: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    for(int i = 0; i < n; i++) {\n        s += std::to_string(i);\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpxuhh48c4: /tmp/tmpxuhh48c4.cpp:17: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    for(int i = 0; i <= n; i++) {\n        s += std::to_string(i);\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpodey4lmk: /tmp/tmpodey4lmk.cpp:18: int main(): Assertion `candidate((3))\
    \ == (\"0 1 2 3\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    for(long i=0;i<n;i++) {\n        s += std::to_string(i);\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpgc09b6ct: /tmp/tmpgc09b6ct.cpp:17: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    for(int i = 0; i < n; i++) {\n        s += std::to_string(i);\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpcg0jagj6: /tmp/tmpcg0jagj6.cpp:17: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    for(int i = 0; i <= n; i++) {\n        s += std::to_string(i);\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpdp2pvzew: /tmp/tmpdp2pvzew.cpp:18: int main(): Assertion `candidate((3))\
    \ == (\"0 1 2 3\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    for(int i=0;i<n;i++) {\n        s += std::to_string(i);\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpem0_miub: /tmp/tmpem0_miub.cpp:17: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    for(int i = 0; i <= n; i++) {\n        s += std::to_string(i);\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpgvjoeo7q: /tmp/tmpgvjoeo7q.cpp:18: int main(): Assertion `candidate((3))\
    \ == (\"0 1 2 3\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n  std::string s;\n  s.reserve(n);\n  for (long i = 0; i < n; ++i)\n  \
    \  s += std::to_string(i);\n  return s;\n}\nint main() {\n    auto candidate =\
    \ string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3))\
    \ == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmpcrk5fpow: /tmp/tmpcrk5fpow.cpp:17: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    for(long i=0;i<n;i++) {\n        s += std::to_string(i);\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmp75bmtey3: /tmp/tmp75bmtey3.cpp:17: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    for(int i=0;i<n;i++){\n        s += std::to_string(i);\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmp_9zrgsbo: /tmp/tmp_9zrgsbo.cpp:17: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    for(long i=0;i<n;i++) {\n        s += std::to_string(i);\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpz5rj8x72: /tmp/tmpz5rj8x72.cpp:17: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    for(long i = 0; i < n; i++) {\n        s += std::to_string(i);\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpqkix8di2: /tmp/tmpqkix8di2.cpp:17: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    for(long i = 0; i <= n; i++) {\n        s += std::to_string(i);\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmptglpvnyb: /tmp/tmptglpvnyb.cpp:18: int main(): Assertion `candidate((3))\
    \ == (\"0 1 2 3\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    for(long i=0;i<n;i++) {\n        s += std::to_string(i);\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpfqir71jq: /tmp/tmpfqir71jq.cpp:17: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s = \"\";\n    for(int i = 0; i <= n; i++) {\n       \
    \ s += std::to_string(i);\n    }\n    return s;\n}\nint main() {\n    auto candidate\
    \ = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3))\
    \ == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmp6u7aq6kz: /tmp/tmp6u7aq6kz.cpp:18: int main(): Assertion `candidate((3))\
    \ == (\"0 1 2 3\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    for(int i = 0; i <= n; i++) {\n        s += std::to_string(i);\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpsal7vc_v: /tmp/tmpsal7vc_v.cpp:18: int main(): Assertion `candidate((3))\
    \ == (\"0 1 2 3\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n  std::string s;\n  s.reserve(n);\n  for (long i = 0; i < n; ++i)\n  \
    \  s += std::to_string(i);\n  return s;\n}\nint main() {\n    auto candidate =\
    \ string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3))\
    \ == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmp2taw2fc5: /tmp/tmp2taw2fc5.cpp:17: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    for(int i=0;i<n;i++)\n        s += std::to_string(i);\n\
    \    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0))\
    \ == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpfqanmnic: /tmp/tmpfqanmnic.cpp:16: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    for(int i=0;i<n;i++)\n        s += std::to_string(i);\n\
    \    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0))\
    \ == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpmmqp2og1: /tmp/tmpmmqp2og1.cpp:16: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    for(long i=0;i<n;i++)\n        s += std::to_string(i);\n\
    \    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0))\
    \ == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmphol1gsma: /tmp/tmphol1gsma.cpp:16: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    for(long i=0;i<n;i++) {\n        s += std::to_string(i);\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpou05ctha: /tmp/tmpou05ctha.cpp:17: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    for(long i = 0; i < n; ++i)\n        s += std::to_string(i);\n\
    \    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0))\
    \ == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmp59h9h8gw: /tmp/tmp59h9h8gw.cpp:16: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    for(int i=0;i<n;i++) {\n        s+=std::to_string(i);\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmp6whbcvk5: /tmp/tmp6whbcvk5.cpp:17: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s = \"\";\n    for(long i = 0; i < n; i++) {\n       \
    \ s += std::to_string(i);\n    }\n    return s;\n}\nint main() {\n    auto candidate\
    \ = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3))\
    \ == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmpxy1qk7s8: /tmp/tmpxy1qk7s8.cpp:17: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    for(int i = 0; i <= n; i++) {\n        s += std::to_string(i);\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmp9wrlbhwk: /tmp/tmp9wrlbhwk.cpp:18: int main(): Assertion `candidate((3))\
    \ == (\"0 1 2 3\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    for(long i=0;i<n;i++)\n        s += std::to_string(i);\n\
    \    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0))\
    \ == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmps221wxyu: /tmp/tmps221wxyu.cpp:16: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    for(int i = 0; i <= n; i++) {\n        s += std::to_string(i);\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpuo_i2shp: /tmp/tmpuo_i2shp.cpp:18: int main(): Assertion `candidate((3))\
    \ == (\"0 1 2 3\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s = \"\";\n    for(long i = 0; i < n; i++) {\n       \
    \ s += std::to_string(i);\n    }\n    return s;\n}\nint main() {\n    auto candidate\
    \ = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3))\
    \ == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmp44n6xozc: /tmp/tmp44n6xozc.cpp:17: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n  std::string s;\n  while (n--) {\n    s += std::to_string(n);\n  }\n\
    \  return s;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0))\
    \ == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmp20vekbad: /tmp/tmp20vekbad.cpp:17: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    for(int i=0;i<n;i++) {\n        s += std::to_string(i);\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpgnyahryr: /tmp/tmpgnyahryr.cpp:17: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    for(int i = 0; i <= n; i++) {\n        s += std::to_string(i);\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmp0r2fu_5r: /tmp/tmp0r2fu_5r.cpp:18: int main(): Assertion `candidate((3))\
    \ == (\"0 1 2 3\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    for(long i=0;i<n;i++) {\n        s += std::to_string(i);\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpudjc8bqj: /tmp/tmpudjc8bqj.cpp:17: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    for(int i=0;i<n;i++)\n        s+=std::to_string(i);\n\
    \    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0))\
    \ == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmp81xgjrrq: /tmp/tmp81xgjrrq.cpp:16: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    for(int i = 0; i <= n; i++) {\n        s += std::to_string(i);\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmp6hsom6om: /tmp/tmp6hsom6om.cpp:18: int main(): Assertion `candidate((3))\
    \ == (\"0 1 2 3\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    for(long i=0;i<n;i++) {\n        s += std::to_string(i);\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpsep97dek: /tmp/tmpsep97dek.cpp:17: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    for(int i=0;i<n;i++) {\n        s+=std::to_string(i);\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpescjounk: /tmp/tmpescjounk.cpp:17: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    for(long i=0;i<n;i++)\n        s+=std::to_string(i);\n\
    \    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0))\
    \ == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpla59a1w_: /tmp/tmpla59a1w_.cpp:16: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    for(long i=0;i<n;i++)\n        s += std::to_string(i);\n\
    \    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0))\
    \ == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpipwj1mlv: /tmp/tmpipwj1mlv.cpp:16: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s = \"\";\n    for(long i = 0; i < n; i++) {\n       \
    \ s += std::to_string(i);\n    }\n    return s;\n}\nint main() {\n    auto candidate\
    \ = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3))\
    \ == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmpzyxvi6su: /tmp/tmpzyxvi6su.cpp:17: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    for(long i=0;i<n;i++) {\n        s += std::to_string(i);\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmp83_phr0s: /tmp/tmp83_phr0s.cpp:17: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    for(int i = 0; i <= n; i++) {\n        s += std::to_string(i);\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmp_c9sej3k: /tmp/tmp_c9sej3k.cpp:18: int main(): Assertion `candidate((3))\
    \ == (\"0 1 2 3\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    for(int i=0;i<n;++i)\n        s += std::to_string(i);\n\
    \    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0))\
    \ == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmp0gyuczha: /tmp/tmp0gyuczha.cpp:16: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    for(long i = 0; i <= n; i++) s += std::to_string(i);\n\
    \    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0))\
    \ == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmp9rns0k2d: /tmp/tmp9rns0k2d.cpp:16: int main(): Assertion `candidate((3))\
    \ == (\"0 1 2 3\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    for(int i = 0; i <= n; i++) {\n        s += std::to_string(i);\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpyd43d5dh: /tmp/tmpyd43d5dh.cpp:18: int main(): Assertion `candidate((3))\
    \ == (\"0 1 2 3\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    for(int i = 0; i <= n; i++) {\n        s += std::to_string(i);\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpa9zlm_7r: /tmp/tmpa9zlm_7r.cpp:18: int main(): Assertion `candidate((3))\
    \ == (\"0 1 2 3\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    for(long i=0;i<n;i++)\n        s+=std::to_string(i);\n\
    \    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0))\
    \ == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpbdao7s26: /tmp/tmpbdao7s26.cpp:16: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s = \"\";\n    for(int i = 0; i <= n; i++) {\n       \
    \ s += std::to_string(i);\n    }\n    return s;\n}\nint main() {\n    auto candidate\
    \ = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3))\
    \ == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmpc0ou4cyj: /tmp/tmpc0ou4cyj.cpp:18: int main(): Assertion `candidate((3))\
    \ == (\"0 1 2 3\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    for(long i=0;i<n;i++)\n        s += std::to_string(i);\n\
    \    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0))\
    \ == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpy9b7uxx0: /tmp/tmpy9b7uxx0.cpp:16: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n  std::string s;\n  for(int i = 0; i <= n; i++) {\n    s += std::to_string(i);\n\
    \  }\n  return s;\n}\nint main() {\n    auto candidate = string_sequence;\n  \
    \  assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"\
    ));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmprzahficf: /tmp/tmprzahficf.cpp:18: int main(): Assertion `candidate((3))\
    \ == (\"0 1 2 3\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n  std::string s;\n  for (long i = 0; i < n; i++) {\n    s += std::to_string(i);\n\
    \  }\n  return s;\n}\nint main() {\n    auto candidate = string_sequence;\n  \
    \  assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"\
    ));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpxwl6rvbm: /tmp/tmpxwl6rvbm.cpp:17: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n  std::string s;\n  for(int i=0;i<n;++i)\n    s += std::to_string(i);\n\
    \  return s;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0))\
    \ == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmprjj_xj6l: /tmp/tmprjj_xj6l.cpp:16: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s = \"\";\n    for(long i = 0; i < n; i++) {\n       \
    \ s += std::to_string(i);\n    }\n    return s;\n}\nint main() {\n    auto candidate\
    \ = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3))\
    \ == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmpzrzgo6i0: /tmp/tmpzrzgo6i0.cpp:17: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    for(long i=0;i<n;++i)\n        s += std::to_string(i);\n\
    \    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0))\
    \ == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpoj5fwyqu: /tmp/tmpoj5fwyqu.cpp:16: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    for(long i=0;i<n;i++) {\n        s += std::to_string(i);\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpj_emfdbl: /tmp/tmpj_emfdbl.cpp:17: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    for(long i=0;i<n;++i)\n        s += std::to_string(i);\n\
    \    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0))\
    \ == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmp4jq748k3: /tmp/tmp4jq748k3.cpp:16: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    for(long i=0;i<n;i++)\n        s += std::to_string(i);\n\
    \    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0))\
    \ == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmp_ul8sxdl: /tmp/tmp_ul8sxdl.cpp:16: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    for(int i=0;i<n;i++)\n        s += std::to_string(i);\n\
    \    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0))\
    \ == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpags2dzkz: /tmp/tmpags2dzkz.cpp:16: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s = \"\";\n    long i = 1;\n    while (i <= n) {\n   \
    \     s += std::to_string(i);\n        i++;\n    }\n    return s;\n}\nint main()\
    \ {\n    auto candidate = string_sequence;\n    assert(candidate((0)) == (\"0\"\
    ));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpchf55ms3: /tmp/tmpchf55ms3.cpp:19: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    for(int i = 0; i <= n; i++){\n        s += std::to_string(i);\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpan7kl5cw: /tmp/tmpan7kl5cw.cpp:18: int main(): Assertion `candidate((3))\
    \ == (\"0 1 2 3\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s = \"\";\n    for(long i = 0; i < n; i++) {\n       \
    \ s += std::to_string(i);\n    }\n    return s;\n}\nint main() {\n    auto candidate\
    \ = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3))\
    \ == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmp09qsdy60: /tmp/tmp09qsdy60.cpp:17: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    for(long i=0;i<n;i++)\n        s += std::to_string(i);\n\
    \    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0))\
    \ == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpcus6bt29: /tmp/tmpcus6bt29.cpp:16: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    for(int i = 0; i <= n; i++) {\n        s += std::to_string(i);\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpkh65xwe6: /tmp/tmpkh65xwe6.cpp:18: int main(): Assertion `candidate((3))\
    \ == (\"0 1 2 3\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    for(int i=0;i<n;i++) {\n        s+=std::to_string(i);\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpo248bauf: /tmp/tmpo248bauf.cpp:17: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    for(int i = 0; i <= n; i++) {\n        s += std::to_string(i);\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpgroc82j0: /tmp/tmpgroc82j0.cpp:18: int main(): Assertion `candidate((3))\
    \ == (\"0 1 2 3\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    for(int i = 0; i <= n; i++) {\n        s += std::to_string(i);\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpjout5umx: /tmp/tmpjout5umx.cpp:18: int main(): Assertion `candidate((3))\
    \ == (\"0 1 2 3\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    for(int i = 0; i < n; i++) {\n        s += std::to_string(i);\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpi0948mpy: /tmp/tmpi0948mpy.cpp:17: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    for(int i=0;i<n;i++)\n        s += std::to_string(i);\n\
    \    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0))\
    \ == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpk9fw5j62: /tmp/tmpk9fw5j62.cpp:16: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    for(long i=0;i<n;i++) {\n        s += std::to_string(i);\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmp7z13etmk: /tmp/tmp7z13etmk.cpp:17: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n  std::string s;\n  s.reserve(n);\n  for (long i = 0; i < n; i++) {\n\
    \    s += std::to_string(i);\n  }\n  return s;\n}\nint main() {\n    auto candidate\
    \ = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3))\
    \ == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmpoywn7s71: /tmp/tmpoywn7s71.cpp:18: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    for(long i = 0; i <= n; i++) {\n        s += std::to_string(i);\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpy3iu65z2: /tmp/tmpy3iu65z2.cpp:18: int main(): Assertion `candidate((3))\
    \ == (\"0 1 2 3\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    for(long i=0;i<n;i++)\n        s += std::to_string(i);\n\
    \    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0))\
    \ == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmp_rtvq2nd: /tmp/tmp_rtvq2nd.cpp:16: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    for(int i=0;i<n;i++) {\n        s+=std::to_string(i);\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpvmi_vlly: /tmp/tmpvmi_vlly.cpp:17: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    for(int i = 0; i < n; i++) {\n        s += std::to_string(i);\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpebvkuz0e: /tmp/tmpebvkuz0e.cpp:17: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    for(int i=0;i<n;i++) {\n        s += std::to_string(i);\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpx2ep9kdm: /tmp/tmpx2ep9kdm.cpp:17: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    for(long i=0;i<n;++i)\n        s += std::to_string(i);\n\
    \    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0))\
    \ == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmp2rwwdwgm: /tmp/tmp2rwwdwgm.cpp:16: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    for(long i=0;i<n;i++) {\n        s+=std::to_string(i);\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmp4pif2ml6: /tmp/tmp4pif2ml6.cpp:17: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    for(long i = 0; i <= n; i++) {\n        s += std::to_string(i);\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpzd5e1abe: /tmp/tmpzd5e1abe.cpp:18: int main(): Assertion `candidate((3))\
    \ == (\"0 1 2 3\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    for(long i = 0; i <= n; i++) {\n        s += std::to_string(i);\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmprflxrdin: /tmp/tmprflxrdin.cpp:18: int main(): Assertion `candidate((3))\
    \ == (\"0 1 2 3\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    for(long i=0;i<n;i++) {\n        s += std::to_string(i);\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpp3ydkhmu: /tmp/tmpp3ydkhmu.cpp:17: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    for(long i=0;i<n;i++)\n        s += std::to_string(i);\n\
    \    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0))\
    \ == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpsfsfshg6: /tmp/tmpsfsfshg6.cpp:16: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    for(int i=0;i<n;i++){\n        s+=std::to_string(i);\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpwf1j_5qh: /tmp/tmpwf1j_5qh.cpp:17: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n  std::string s;\n  while (n--) {\n    s += std::to_string(n);\n  }\n\
    \  return s;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0))\
    \ == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpeo5o9d6a: /tmp/tmpeo5o9d6a.cpp:17: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    for(long i=0;i<n;++i)\n        s+=std::to_string(i);\n\
    \    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0))\
    \ == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpohx8s4he: /tmp/tmpohx8s4he.cpp:16: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    for(int i=0;i<n;i++) {\n        s+=std::to_string(i);\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmp2d6jitp9: /tmp/tmp2d6jitp9.cpp:17: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    for(int i=0;i<n;i++)\n        s+=std::to_string(i);\n\
    \    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0))\
    \ == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpjoo7zyqy: /tmp/tmpjoo7zyqy.cpp:16: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    for(int i = 0; i <= n; i++) {\n        s += std::to_string(i);\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpispffxdf: /tmp/tmpispffxdf.cpp:18: int main(): Assertion `candidate((3))\
    \ == (\"0 1 2 3\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    for(int i=0;i<n;i++) {\n        s += to_string(i);\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmps0ywsmc5.cpp: In function \u2018std::string string_sequence(long\
    \ int)\u2019:\n/tmp/tmps0ywsmc5.cpp:11:14: error: \u2018to_string\u2019 was not\
    \ declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019?\n\
    \   11 |         s += to_string(i);\n      |              ^~~~~~~~~\n      | \
    \             std::__cxx11::to_string\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmps0ywsmc5.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:6598:3:\
    \ note: \u2018std::__cxx11::to_string\u2019 declared here\n 6598 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    for(long i=0;i<n;i++) {\n        s += std::to_string(i);\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpcy7cvjpt: /tmp/tmpcy7cvjpt.cpp:17: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    for(int i = 0; i < n; i++) {\n        s += std::to_string(i);\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpth7b7rd1: /tmp/tmpth7b7rd1.cpp:17: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    for(int i = 0; i < n; ++i) {\n        s += std::to_string(i);\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpahh664z6: /tmp/tmpahh664z6.cpp:17: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    for(int i = 0; i <= n; i++) {\n        s += std::to_string(i);\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmppx2jbaul: /tmp/tmppx2jbaul.cpp:18: int main(): Assertion `candidate((3))\
    \ == (\"0 1 2 3\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n  std::string s;\n  while (n--) {\n    s += std::to_string(n);\n  }\n\
    \  return s;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0))\
    \ == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpzj0p6l8l: /tmp/tmpzj0p6l8l.cpp:17: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    for(long i=0;i<n;i++)\n        s+=std::to_string(i);\n\
    \    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0))\
    \ == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmp_e7p1etc: /tmp/tmp_e7p1etc.cpp:16: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n  std::string s;\n  s.reserve(n);\n  for (long i = 0; i < n; i++) {\n\
    \    s += std::to_string(i);\n  }\n  return s;\n}\nint main() {\n    auto candidate\
    \ = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3))\
    \ == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmpkera4l1l: /tmp/tmpkera4l1l.cpp:18: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n  std::string s;\n  while (n-- > 0) {\n    s += std::to_string(n);\n \
    \ }\n  return s;\n}\nint main() {\n    auto candidate = string_sequence;\n   \
    \ assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"\
    ));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpipkdv2wn: /tmp/tmpipkdv2wn.cpp:17: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    for(int i = 0; i < n; i++) {\n        s += std::to_string(i);\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpb86odr2a: /tmp/tmpb86odr2a.cpp:17: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    for(int i = 0; i <= n; i++) {\n        s += std::to_string(i);\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpu4qvsbeq: /tmp/tmpu4qvsbeq.cpp:18: int main(): Assertion `candidate((3))\
    \ == (\"0 1 2 3\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    for(int i=0;i<n;i++) {\n        s += std::to_string(i);\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpn_n7je_k: /tmp/tmpn_n7je_k.cpp:17: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    for(int i = 0; i <= n; i++) {\n        s += std::to_string(i);\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpy94nt5t1: /tmp/tmpy94nt5t1.cpp:18: int main(): Assertion `candidate((3))\
    \ == (\"0 1 2 3\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    for(int i = 0; i < n; i++) {\n        s += std::to_string(i);\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmphmazu9zr: /tmp/tmphmazu9zr.cpp:17: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    for(long i=0;i<n;i++)\n        s+=std::to_string(i);\n\
    \    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0))\
    \ == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmp885g31dj: /tmp/tmp885g31dj.cpp:16: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    for(long i=0;i<n;i++) {\n        s += std::to_string(i);\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpxu2qgbs8: /tmp/tmpxu2qgbs8.cpp:17: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    for(int i=0;i<n;i++) {\n        s += std::to_string(i);\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpb3j_du_e: /tmp/tmpb3j_du_e.cpp:17: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    for(int i = 0; i <= n; i++) {\n        s += std::to_string(i);\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmp_axlaq8n: /tmp/tmp_axlaq8n.cpp:18: int main(): Assertion `candidate((3))\
    \ == (\"0 1 2 3\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    for(long i=0;i<n;i++) {\n        s += std::to_string(i);\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpvbt_zjjj: /tmp/tmpvbt_zjjj.cpp:17: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n  std::string s;\n  s.reserve(n);\n  for (long i = 0; i < n; ++i) {\n\
    \    s += std::to_string(i);\n  }\n  return s;\n}\nint main() {\n    auto candidate\
    \ = string_sequence;\n    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3))\
    \ == (\"0 1 2 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"\
    ));\n}\n"
  stdout: ''
  stderr: "tmp_gbj6unu: /tmp/tmp_gbj6unu.cpp:18: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    for(int i = 0; i <= n; i++) {\n        s += std::to_string(i);\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n\
    \    assert(candidate((0)) == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2\
    \ 3\"));\n    assert(candidate((10)) == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpmhk0q45q: /tmp/tmpmhk0q45q.cpp:18: int main(): Assertion `candidate((3))\
    \ == (\"0 1 2 3\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    for(long i=0;i<n;i++)\n        s+=std::to_string(i);\n\
    \    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0))\
    \ == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpk6ag_lkt: /tmp/tmpk6ag_lkt.cpp:16: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    for(long i=0;i<n;i++)\n        s += std::to_string(i);\n\
    \    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0))\
    \ == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpha1f8b3u: /tmp/tmpha1f8b3u.cpp:16: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n\
    // '0'\n// >>> string_sequence(5)\n// '0 1 2 3 4 5'\nstd::string string_sequence(long\
    \ n) {\n    std::string s;\n    for(long i=0;i<n;++i)\n        s+=std::to_string(i);\n\
    \    return s;\n}\nint main() {\n    auto candidate = string_sequence;\n    assert(candidate((0))\
    \ == (\"0\"));\n    assert(candidate((3)) == (\"0 1 2 3\"));\n    assert(candidate((10))\
    \ == (\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  stdout: ''
  stderr: "tmpbuimm72g: /tmp/tmpbuimm72g.cpp:16: int main(): Assertion `candidate((0))\
    \ == (\"0\")' failed.\n"
  exit_code: -6
  status: Exception
