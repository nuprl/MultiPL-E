name: HumanEval_157_right_angle_triangle
language: cpp
results:
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    if (a == 0 || b == 0 || c == 0)\n        return false;\n\
    \    long d = b * b - 4 * a * c;\n    if (d < 0)\n        return false;\n    long\
    \ x = (b + c) / 2;\n    long y = (-b - c) / 2;\n    long m = (a + b) / 2;\n  \
    \  long n = (a + c) / 2;\n    long o = (b + a) / 2;\n    long p = (b + c) / 2;\n\
    \    long q = (c + a) / 2;\n    long r = (c + b) / 2;\n    long s = (a + b + c)\
    \ / 2;\n    long t = (a * b + b * c + c * a) / 4;\n    long u = (b * b - a * b\
    \ * c + b * a * c) / 4;\n    long v = (c * a - a * c + a * b) / 4;\n    long w\
    \ = (b * b - a * b * c + b * a * c) / 4;\n    long x = (b + c) / 2;\n    long\
    \ y = (-b - c) / 2;\n    long m = (a + b) / 2;\n    long n = (a + c) / 2;\n  \
    \  long o = (b + a) / 2;\n    long p = (b + c) / 2;\n    long q = (c + a) / 2;\n\
    \    long r = (c + b) / 2;\n    long s = (a + b + c) / 2;\n    long t = (a * b\
    \ + b * c + c * a) / 4;\n    long u = (b * b - a * b * c + b * a * c) / 4;\n \
    \   long v = (c * a - a * c + a * b) / 4;\n    long w = (b * b - a * b * c + b\
    \ * a * c) / 4;\n    long x = (b + c) / 2;\n    long y = (-b - c) / 2;\n    long\
    \ m = (a + b) / 2;\n    long n = (a + c) / 2;\n    long o = (b + a) / 2;\n   \
    \ long p = (b + c) / 2;\n    long q = (c + a) / 2;\n    long r = (c + b) / 2;\n\
    \    long s = (a + b + c) / 2;\n    long t = (a * b + b * c + c * a) / 4;\n  \
    \  long u = (b * b - a * b * c + b * a * c) / 4;\n    long v = (c * a - a * c\
    \ + a * b) / 4;\n    long w = (b * b - a * b * c + b * a * c) / 4;\n    long x\
    \ = (b + c) / 2;\n    long y = (-b - c) / 2;\n    long m = (a + b) / 2;\n    long\
    \ n = (a + c) / 2;\n    long o = (b + a) / 2;\n}\nint main() {\n    auto candidate\
    \ = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n \
    \   assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10), (6),\
    \ (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7),\
    \ (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n\
    \    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmphj9l82bn.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmphj9l82bn.cpp:29:10: error: redeclaration\
    \ of \u2018long int x\u2019\n   29 |     long x = (b + c) / 2;\n      |      \
    \    ^\n/tmp/tmphj9l82bn.cpp:16:10: note: \u2018long int x\u2019 previously declared\
    \ here\n   16 |     long x = (b + c) / 2;\n      |          ^\n/tmp/tmphj9l82bn.cpp:30:10:\
    \ error: redeclaration of \u2018long int y\u2019\n   30 |     long y = (-b - c)\
    \ / 2;\n      |          ^\n/tmp/tmphj9l82bn.cpp:17:10: note: \u2018long int y\u2019\
    \ previously declared here\n   17 |     long y = (-b - c) / 2;\n      |      \
    \    ^\n/tmp/tmphj9l82bn.cpp:31:10: error: redeclaration of \u2018long int m\u2019\
    \n   31 |     long m = (a + b) / 2;\n      |          ^\n/tmp/tmphj9l82bn.cpp:18:10:\
    \ note: \u2018long int m\u2019 previously declared here\n   18 |     long m =\
    \ (a + b) / 2;\n      |          ^\n/tmp/tmphj9l82bn.cpp:32:10: error: redeclaration\
    \ of \u2018long int n\u2019\n   32 |     long n = (a + c) / 2;\n      |      \
    \    ^\n/tmp/tmphj9l82bn.cpp:19:10: note: \u2018long int n\u2019 previously declared\
    \ here\n   19 |     long n = (a + c) / 2;\n      |          ^\n/tmp/tmphj9l82bn.cpp:33:10:\
    \ error: redeclaration of \u2018long int o\u2019\n   33 |     long o = (b + a)\
    \ / 2;\n      |          ^\n/tmp/tmphj9l82bn.cpp:20:10: note: \u2018long int o\u2019\
    \ previously declared here\n   20 |     long o = (b + a) / 2;\n      |       \
    \   ^\n/tmp/tmphj9l82bn.cpp:34:10: error: redeclaration of \u2018long int p\u2019\
    \n   34 |     long p = (b + c) / 2;\n      |          ^\n/tmp/tmphj9l82bn.cpp:21:10:\
    \ note: \u2018long int p\u2019 previously declared here\n   21 |     long p =\
    \ (b + c) / 2;\n      |          ^\n/tmp/tmphj9l82bn.cpp:35:10: error: redeclaration\
    \ of \u2018long int q\u2019\n   35 |     long q = (c + a) / 2;\n      |      \
    \    ^\n/tmp/tmphj9l82bn.cpp:22:10: note: \u2018long int q\u2019 previously declared\
    \ here\n   22 |     long q = (c + a) / 2;\n      |          ^\n/tmp/tmphj9l82bn.cpp:36:10:\
    \ error: redeclaration of \u2018long int r\u2019\n   36 |     long r = (c + b)\
    \ / 2;\n      |          ^\n/tmp/tmphj9l82bn.cpp:23:10: note: \u2018long int r\u2019\
    \ previously declared here\n   23 |     long r = (c + b) / 2;\n      |       \
    \   ^\n/tmp/tmph"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    // Write your code here\n    long long int a1 = abs(a),\
    \ b1 = abs(b), c1 = abs(c);\n    long long int a2 = a1 + b1, c2 = a1 + c1, b2\
    \ = b1 + c1;\n    long long int a3 = a2 + b2, b3 = b2 + c2, c3 = c2 + a2;\n  \
    \  long long int a4 = a3 + b3, b4 = b3 + c3, c4 = c3 + a3;\n    long long int\
    \ a5 = a4 + b4, b5 = b5 + c4, c5 = c4 + a4;\n    long long int a6 = a5 + b5, b6\
    \ = b6 + c5, c6 = c5 + a5;\n    long long int a7 = a6 + b6, b7 = b7 + c6, c7 =\
    \ c6 + a6;\n    long long int a8 = a7 + b7, b8 = b7 + c7, c8 = c7 + a7;\n    long\
    \ long int a9 = a8 + b8, b9 = b8 + c8, c9 = c8 + a8;\n    long long int a10 =\
    \ a9 + b9, b10 = b9 + c9, c10 = c9 + a9;\n    long long int a11 = a10 + b10, b11\
    \ = b10 + c10, c11 = c10 + a10;\n    long long int a12 = a11 + b11, b12 = b11\
    \ + c11, c12 = c11 + a11;\n    long long int a13 = a12 + b12, b13 = b12 + c12,\
    \ c13 = c12 + a12;\n    long long int a14 = a13 + b13, b14 = b13 + c13, c14 =\
    \ c13 + a13;\n    long long int a15 = a14 + b14, b15 = b14 + c14, c15 = c14 +\
    \ a14;\n    long long int a16 = a15 + b15, b16 = b15 + c15, c16 = c15 + a15;\n\
    \    long long int a17 = a16 + b16, b17 = b16 + c16, c17 = c16 + a16;\n    long\
    \ long int a18 = a17 + b17, b18 = b17 + c17, c18 = c17 + a17;\n    long long int\
    \ a19 = a18 + b18, b19 = b18 + c18, c19 = c18 + a18;\n    long long int a20 =\
    \ a19 + b19, b20 = b19 + c19, c20 = c19 + a19;\n    long long int a21 = a20 +\
    \ b20, b21 = b20 + c20, \n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmp4jbqrh39.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmp4jbqrh39.cpp:33:1: error: expected\
    \ unqualified-id before \u2018}\u2019 token\n   33 | }\n      | ^\n/tmp/tmp4jbqrh39.cpp:33:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    if (a > b && a > c && b > c) {\n        return true;\n\
    \    }\n    return false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpdj6uoom_: /tmp/tmpdj6uoom_.cpp:18: int main(): Assertion `candidate((3),\
    \ (4), (5)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    // Write your code here\n    long d = b * b - 4 *\
    \ a * c;\n    if (d < 0) {\n        return false;\n    }\n    long e = std::sqrt(d);\n\
    \    long f = (b + e) / (2 * a);\n    long g = (c + e) / (2 * a);\n    if (f >\
    \ g) {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n\
    \    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpfvhmwe37: /tmp/tmpfvhmwe37.cpp:26: int main(): Assertion `candidate((3),\
    \ (4), (5)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    if (a == 0 || b == 0 || c == 0)\n        return false;\n\
    \    long d = b * b - 4 * a * c;\n    if (d < 0)\n        return false;\n    long\
    \ x = (b + d) / (2 * a);\n    long y = (-b - d) / (2 * a);\n    return x == y;\n\
    }\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpv5a5v_jq: /tmp/tmpv5a5v_jq.cpp:22: int main(): Assertion `candidate((3),\
    \ (4), (5)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    // Write your code here\n    if(a>b+c) return false;\n\
    \    if(a>c+b) return false;\n    if(b>c+a) return false;\n    return true;\n\
    }\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  stdout: ''
  stderr: "tmplbbtpeor: /tmp/tmplbbtpeor.cpp:20: int main(): Assertion `candidate((1),\
    \ (2), (3)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    // Write your code here\n    long d = b - a;\n   \
    \ long e = c - a;\n    long f = d - e;\n    long g = e - b;\n    long h = f -\
    \ g;\n    long i = g - c;\n    long j = h - i;\n    long k = i - f;\n    long\
    \ l = j - k;\n    long m = k - d;\n    long n = l - m;\n    long o = m - e;\n\
    \    long p = n - o;\n    long q = o - b;\n    long r = p - q;\n    long s = q\
    \ - c;\n    long t = r - s;\n    long u = s - d;\n    long v = t - u;\n    long\
    \ w = u - e;\n    long x = v - w;\n    long y = w - f;\n    long z = x - y;\n\
    \    long a = z - x;\n    long b = y - z;\n    long c = x - y;\n    long d = b\
    \ - a;\n    long e = c - a;\n    long f = d - e;\n    long g = e - b;\n    long\
    \ h = f - g;\n    long i = g - c;\n    long j = h - i;\n    long k = i - f;\n\
    \    long l = j - k;\n    long m = k - d;\n    long n = l - m;\n    long o = m\
    \ - e;\n    long p = n - o;\n    long q = o - b;\n    long r = p - q;\n    long\
    \ s = q - c;\n    long t = r - s;\n    long u = s - d;\n    long v = t - u;\n\
    \    long w = u - e;\n    long x = v - w;\n    long y = w - f;\n    long z = x\
    \ - y;\n    long a = z - x;\n    long b = y - z;\n    long c = x - y;\n    long\
    \ d = b - a;\n    long e = c - a;\n    long f = d - e;\n    long g = e - b;\n\
    \    long h = f - g;\n    long i = g - c;\n    long j = h - i;\n    long k = i\
    \ - f;\n    long l = j - k;\n    long m = k - d;\n    long n = l - m;\n    long\
    \ o = m - e;\n    long p = n - o;\n    long q = o - b;\n    long r = p - q;\n\
    \    long s = q - c;\n    long t = r - s;\n    long u = s - d;\n    long v = t\
    \ - u;\n    long w = u - e;\n    long x = v - w;\n    long y = w - f;\n    long\
    \ z = x - y;\n    long a = z - x;\n\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmps6bb_jk6.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmps6bb_jk6.cpp:35:10: error: declaration\
    \ of \u2018long int a\u2019 shadows a parameter\n   35 |     long a = z - x;\n\
    \      |          ^\n/tmp/tmps6bb_jk6.cpp:36:10: error: declaration of \u2018\
    long int b\u2019 shadows a parameter\n   36 |     long b = y - z;\n      |   \
    \       ^\n/tmp/tmps6bb_jk6.cpp:37:10: error: declaration of \u2018long int c\u2019\
    \ shadows a parameter\n   37 |     long c = x - y;\n      |          ^\n/tmp/tmps6bb_jk6.cpp:38:10:\
    \ error: redeclaration of \u2018long int d\u2019\n   38 |     long d = b - a;\n\
    \      |          ^\n/tmp/tmps6bb_jk6.cpp:12:10: note: \u2018long int d\u2019\
    \ previously declared here\n   12 |     long d = b - a;\n      |          ^\n\
    /tmp/tmps6bb_jk6.cpp:39:10: error: redeclaration of \u2018long int e\u2019\n \
    \  39 |     long e = c - a;\n      |          ^\n/tmp/tmps6bb_jk6.cpp:13:10: note:\
    \ \u2018long int e\u2019 previously declared here\n   13 |     long e = c - a;\n\
    \      |          ^\n/tmp/tmps6bb_jk6.cpp:40:10: error: redeclaration of \u2018\
    long int f\u2019\n   40 |     long f = d - e;\n      |          ^\n/tmp/tmps6bb_jk6.cpp:14:10:\
    \ note: \u2018long int f\u2019 previously declared here\n   14 |     long f =\
    \ d - e;\n      |          ^\n/tmp/tmps6bb_jk6.cpp:41:10: error: redeclaration\
    \ of \u2018long int g\u2019\n   41 |     long g = e - b;\n      |          ^\n\
    /tmp/tmps6bb_jk6.cpp:15:10: note: \u2018long int g\u2019 previously declared here\n\
    \   15 |     long g = e - b;\n      |          ^\n/tmp/tmps6bb_jk6.cpp:42:10:\
    \ error: redeclaration of \u2018long int h\u2019\n   42 |     long h = f - g;\n\
    \      |          ^\n/tmp/tmps6bb_jk6.cpp:16:10: note: \u2018long int h\u2019\
    \ previously declared here\n   16 |     long h = f - g;\n      |          ^\n\
    /tmp/tmps6bb_jk6.cpp:43:10: error: redeclaration of \u2018long int i\u2019\n \
    \  43 |     long i = g - c;\n      |          ^\n/tmp/tmps6bb_jk6.cpp:17:10: note:\
    \ \u2018long int i\u2019 previously declared here\n   17 |     long i = g - c;\n\
    \      |          ^\n/tmp/tmps6bb_jk6.cpp:44:10: error: redeclaration of \u2018\
    long int j\u2019\n   44 |     long j = h - i;\n      |          ^\n/tmp/tmps6bb_jk6.cpp:18:10:\
    \ note: \u2018long int j\u2019 previously declared "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    long long a1 = (a + b + c) / 2;\n    long long b1\
    \ = (a + b) / 2;\n    long long c1 = (a + b) / 2;\n    long long a2 = (a1 + b1\
    \ + c1) / 2;\n    long long b2 = (a1 + b1) / 2;\n    long long c2 = (a1 + b1)\
    \ / 2;\n    long long a3 = (a2 + b2 + c2) / 2;\n    long long b3 = (a2 + b2) /\
    \ 2;\n    long long c3 = (a2 + b2) / 2;\n    long long a4 = (a3 + b3 + c3) / 2;\n\
    \    long long b4 = (a3 + b3) / 2;\n    long long c4 = (a3 + b3) / 2;\n    long\
    \ long a5 = (a4 + b4 + c4) / 2;\n    long long b5 = (a4 + b4) / 2;\n    long long\
    \ c5 = (a4 + b4) / 2;\n    long long a6 = (a5 + b5 + c5) / 2;\n    long long b6\
    \ = (a5 + b5) / 2;\n    long long c6 = (a5 + b5) / 2;\n    long long a7 = (a6\
    \ + b6 + c6) / 2;\n    long long b7 = (a6 + b6) / 2;\n    long long c7 = (a6 +\
    \ b6) / 2;\n    long long a8 = (a7 + b7 + c7) / 2;\n    long long b8 = (a7 + b7)\
    \ / 2;\n    long long c8 = (a7 + b7) / 2;\n    long long a9 = (a8 + b8 + c8) /\
    \ 2;\n    long long b9 = (a8 + b8) / 2;\n    long long c9 = (a8 + b8) / 2;\n \
    \   long long a10 = (a9 + b9 + c9) / 2;\n    long long b10 = (a9 + b9) / 2;\n\
    \    long long c10 = (a9 + b9) / 2;\n    long long a11 = (a10 + b10 + c10) / 2;\n\
    \    long long b11 = (a10 + b10) / 2;\n    long long c11 = (a10 + b10) / 2;\n\
    \    long long a12 = (a11 + b11 + c11) / 2;\n    long long b12 = (a11 + b11) /\
    \ 2;\n    long long c12 = (a11 + b11) / 2;\n    long long a13 = (a12 + b12 + c12)\
    \ / 2;\n    long long b13 = (a12 + b12) / 2;\n    long long c13 = (a12 + b12)\
    \ / 2;\n    long long a14 = (a13 + b13 + c13) / 2;\n    long long b14 = (a13 +\
    \ b13) / 2;\n    long long c14 = (a13 + b13\n}\nint main() {\n    auto candidate\
    \ = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n \
    \   assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10), (6),\
    \ (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7),\
    \ (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n\
    \    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfhsikmnd.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmpfhsikmnd.cpp:52:31: error: expected\
    \ \u2018)\u2019 before \u2018}\u2019 token\n   52 |     long long c14 = (a13 +\
    \ b13\n      |                     ~         ^\n      |                      \
    \         )\n   53 | }\n      | ~                              \n/tmp/tmpfhsikmnd.cpp:53:1:\
    \ error: expected \u2018,\u2019 or \u2018;\u2019 before \u2018}\u2019 token\n\
    \   53 | }\n      | ^\n/tmp/tmpfhsikmnd.cpp:53:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    if (a == 0 && b == 0 && c == 0)\n        return true;\n\
    \    long d = b * b - 4 * a * c;\n    if (d == 0)\n        return false;\n   \
    \ long x = (b + c) / 2;\n    long y = (-b + c) / 2;\n    long m = (a + b) / 2;\n\
    \    long n = (-a + b) / 2;\n    long o = (a + m) / 2;\n    long p = (-a + m)\
    \ / 2;\n    long q = (a + n) / 2;\n    long r = (-a + n) / 2;\n    long s = (b\
    \ + o) / 2;\n    long t = (-b + o) / 2;\n    long u = (b + p) / 2;\n    long v\
    \ = (-b + p) / 2;\n    long w = (b + q) / 2;\n    long x = (-b + q) / 2;\n   \
    \ long y = (b + r) / 2;\n    long z = (-b + r) / 2;\n    long a = (a + s) / 2;\n\
    \    long b = (-a + s) / 2;\n    long c = (a + t) / 2;\n    long d = (-a + t)\
    \ / 2;\n    long e = (a + u) / 2;\n    long f = (-a + u) / 2;\n    long g = (a\
    \ + v) / 2;\n    long h = (-a + v) / 2;\n    long i = (a + w) / 2;\n    long j\
    \ = (-a + w) / 2;\n    long k = (a + x) / 2;\n    long l = (-a + x) / 2;\n   \
    \ long m = (a + y) / 2;\n    long n = (-a + y) / 2;\n    long o = (a + z) / 2;\n\
    \    long p = (-a + z) / 2;\n    long q = (a + a) / 2;\n    long r = (-a + a)\
    \ / 2;\n    long s = (a + b) / 2;\n    long t = (-a + b) / 2;\n    long u = (a\
    \ + c) / 2;\n    long v = (-a + c) / 2;\n    long w = (a + d) / 2;\n    long x\
    \ = (-a + d) / 2;\n    long y = (a + e) / 2;\n    long z = (-a + e) / 2;\n   \
    \ long a = (a + f) / 2;\n    long b = (-a + f) / 2;\n    long c = (a + g) / 2;\n\
    \    long d = (-a + g) / 2;\n    long e = (a + h) / 2;\n    long f = (-a + h)\
    \ / 2;\n    long g = (a + i) / 2;\n    long h = (-a + i) / 2;\n    long i = (a\
    \ + j) / 2;\n    long j = (\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmp_4uo0p4l.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmp_4uo0p4l.cpp:29:10: error: redeclaration\
    \ of \u2018long int x\u2019\n   29 |     long x = (-b + q) / 2;\n      |     \
    \     ^\n/tmp/tmp_4uo0p4l.cpp:16:10: note: \u2018long int x\u2019 previously declared\
    \ here\n   16 |     long x = (b + c) / 2;\n      |          ^\n/tmp/tmp_4uo0p4l.cpp:30:10:\
    \ error: redeclaration of \u2018long int y\u2019\n   30 |     long y = (b + r)\
    \ / 2;\n      |          ^\n/tmp/tmp_4uo0p4l.cpp:17:10: note: \u2018long int y\u2019\
    \ previously declared here\n   17 |     long y = (-b + c) / 2;\n      |      \
    \    ^\n/tmp/tmp_4uo0p4l.cpp:32:10: error: declaration of \u2018long int a\u2019\
    \ shadows a parameter\n   32 |     long a = (a + s) / 2;\n      |          ^\n\
    /tmp/tmp_4uo0p4l.cpp:33:10: error: declaration of \u2018long int b\u2019 shadows\
    \ a parameter\n   33 |     long b = (-a + s) / 2;\n      |          ^\n/tmp/tmp_4uo0p4l.cpp:34:10:\
    \ error: declaration of \u2018long int c\u2019 shadows a parameter\n   34 |  \
    \   long c = (a + t) / 2;\n      |          ^\n/tmp/tmp_4uo0p4l.cpp:35:10: error:\
    \ redeclaration of \u2018long int d\u2019\n   35 |     long d = (-a + t) / 2;\n\
    \      |          ^\n/tmp/tmp_4uo0p4l.cpp:13:10: note: \u2018long int d\u2019\
    \ previously declared here\n   13 |     long d = b * b - 4 * a * c;\n      | \
    \         ^\n/tmp/tmp_4uo0p4l.cpp:44:10: error: redeclaration of \u2018long int\
    \ m\u2019\n   44 |     long m = (a + y) / 2;\n      |          ^\n/tmp/tmp_4uo0p4l.cpp:18:10:\
    \ note: \u2018long int m\u2019 previously declared here\n   18 |     long m =\
    \ (a + b) / 2;\n      |          ^\n/tmp/tmp_4uo0p4l.cpp:45:10: error: redeclaration\
    \ of \u2018long int n\u2019\n   45 |     long n = (-a + y) / 2;\n      |     \
    \     ^\n/tmp/tmp_4uo0p4l.cpp:19:10: note: \u2018long int n\u2019 previously declared\
    \ here\n   19 |     long n = (-a + b) / 2;\n      |          ^\n/tmp/tmp_4uo0p4l.cpp:46:10:\
    \ error: redeclaration of \u2018long int o\u2019\n   46 |     long o = (a + z)\
    \ / 2;\n      |          ^\n/tmp/tmp_4uo0p4l.cpp:20:10: note: \u2018long int o\u2019\
    \ previously declared here\n   20 |     long o = (a + m) / 2;\n      |       \
    \   ^\n/tmp/tmp_4uo0p4l.cpp:47:10: error: redeclaration of \u2018long int p\u2019\
    \n   47 |     "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    if (a == 0 || b == 0 || c == 0)\n        return false;\n\
    \    long d = b * b - 4 * a * c;\n    if (d < 0)\n        return false;\n    long\
    \ x = (-b + sqrt(d)) / (2 * a);\n    long y = (-b - sqrt(d)) / (2 * a);\n    if\
    \ (x == y && x != 0)\n        return true;\n    return false;\n}\nint main() {\n\
    \    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5))\
    \ == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpqu6d033w: /tmp/tmpqu6d033w.cpp:24: int main(): Assertion `candidate((3),\
    \ (4), (5)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    if (a > b + c || b > a + c || c > a + b) {\n     \
    \   return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n \
    \   assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10), (6),\
    \ (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7),\
    \ (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n\
    \    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpzzdz5abv: /tmp/tmpzzdz5abv.cpp:19: int main(): Assertion `candidate((1),\
    \ (2), (3)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    // Write your code here\n    if(a==b||a==c||b==c){\n\
    \        return false;\n    }\n    if(a>b&&a>c&&b>c){\n        return true;\n\
    \    }\n    if(a>b&&a>c&&b>c){\n        return false;\n    }\n    if(a>b&&a>c&&b>c){\n\
    \        return true;\n    }\n    if(a>b&&a>c&&b>c){\n        return false;\n\
    \    }\n    if(a>b&&a>c&&b>c){\n        return true;\n    }\n    if(a>b&&a>c&&b>c){\n\
    \        return false;\n    }\n    if(a>b&&a>c&&b>c){\n        return true;\n\
    \    }\n    if(a>b&&a>c&&b>c){\n        return false;\n    }\n    if(a>b&&a>c&&b>c){\n\
    \        return true;\n    }\n    if(a>b&&a>c&&b>c){\n        return false;\n\
    \    }\n    if(a>b&&a>c&&b>c){\n        return true;\n    }\n    if(a>b&&a>c&&b>c){\n\
    \        return false;\n    }\n    if(a>b&&a>c&&b>c){\n        return true;\n\
    \    }\n    if(a>b&&a>c&&b>c){\n        return false;\n    }\n    if(a>b&&a>c&&b>c){\n\
    \        return true;\n    }\n    if(a>b&&a>c&&b>c){\n        return false;\n\
    \    }\n    if(a>b&&a>c&&b>c){\n        return true;\n    }\n    if(a>b&&a>c&&b>c){\n\
    \        return false;\n    }\n    if(a>b&&a>c&&b>c){\n        return true;\n\
    \    }\n    if(a>b&&a>c&&b>c){\n        return false;\n    }\n    if(a>b&&a>c&&b>c){\n\
    \        return true;\n    }\n    if(a>b&&a>c&&b>c){\n        return false;\n\
    \    }\n    if(a>b&&a>c&&b>c){\n        return true;\n    }\n    if(a>b&&a>c&&b>c){\n\
    \        return false;\n    }\n    if(a>b&&a>c&&b>c){\n        return true;\n\
    \    }\n    if(a>b&&a>c&&b>c){\n        return false;\n    }\n    if(a>b&&a>c&&b>c){\n\
    \        return true;\n    }\n    if(a>b&&a>c&&b>c){\n        return false;\n\
    \    }\n    if(a>b&&a>c&&b>c){\n\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmp4pd2l8z3.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmp4pd2l8z3.cpp:102:12: error: a function-definition\
    \ is not allowed here before \u2018{\u2019 token\n  102 | int main() {\n     \
    \ |            ^\n/tmp/tmp4pd2l8z3.cpp:115:1: error: expected \u2018}\u2019 at\
    \ end of input\n  115 | }\n      | ^\n/tmp/tmp4pd2l8z3.cpp:10:51: note: to match\
    \ this \u2018{\u2019\n   10 | bool right_angle_triangle(long a, long b, long c)\
    \ {\n      |                                                   ^\n/tmp/tmp4pd2l8z3.cpp:115:1:\
    \ warning: control reaches end of non-void function [-Wreturn-type]\n  115 | }\n\
    \      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    long d = b * b - 4 * a * c;\n    if (d < 0) {\n  \
    \      return false;\n    }\n    long root = (long) sqrt(d);\n    long s = (-b\
    \ + root) / (2 * a);\n    long t = (-b - root) / (2 * a);\n    return (s == 0\
    \ && t == 0) || (s == t && b == 0);\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpk7a0fp4d: /tmp/tmpk7a0fp4d.cpp:22: int main(): Assertion `candidate((3),\
    \ (4), (5)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    if (a == 0 && b == 0 && c == 0) return true;\n   \
    \ if (a == 0 || b == 0 || c == 0) return false;\n    long d = b * b - 4 * a *\
    \ c;\n    if (d < 0) return false;\n    long x = (b + b - d) / (2 * a);\n    long\
    \ y = (-b - d) / (2 * a);\n    return ((x * x) + (y * y)) < 0;\n}\nint main()\
    \ {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4),\
    \ (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  stdout: ''
  stderr: "tmp1bx7hltq: /tmp/tmp1bx7hltq.cpp:21: int main(): Assertion `candidate((3),\
    \ (4), (5)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    long ab = abs(b - a);\n    long ac = abs(c - a);\n\
    \    long bc = abs(b - c);\n    long cb = abs(c - b);\n    long abc = ab + ac\
    \ + bc;\n    long abc_ab = ab * ab;\n    long abc_ac = ab * ac;\n    long abc_bc\
    \ = ab * bc;\n    long abc_cb = ab * cb;\n    long acb_ab = ac * ab;\n    long\
    \ acb_ac = ac * ac;\n    long acb_abc = ac * abc;\n    long acb_acb = ac * acb;\n\
    \    long acb_abc_ab = ac * abc_ab;\n    long acb_abc_ac = ac * abc_ac;\n    long\
    \ acb_abc_bc = ac * abc_bc;\n    long acb_abc_cb = ac * abc_cb;\n    long bcb_abc\
    \ = bc * abc;\n    long bcb_acb = bc * acb;\n    long bcb_abc_ab = bc * abc_ab;\n\
    \    long bcb_abc_ac = bc * abc_ac;\n    long bcb_abc_bc = bc * abc_bc;\n    long\
    \ bcb_abc_cb = bc * abc_cb;\n    long abc_acb_ab = abc_ac * ab;\n    long abc_acb_ac\
    \ = abc_ac * ac;\n    long abc_acb_abc = abc_ac * abc;\n    long abc_acb_acb =\
    \ abc_ac * acb;\n    long abc_acb_abc_ab = abc_ac * abc_ab;\n    long abc_acb_abc_ac\
    \ = abc_ac * abc_ac;\n    long abc_acb_abc_bc = abc_ac * abc_bc;\n    long abc_acb_abc_cb\
    \ = abc_ac * abc_cb;\n    long abc_bcb_abc = abc_bc * abc;\n    long abc_bcb_acb\
    \ = abc_bc * acb;\n    long abc_bcb_abc_ab = abc_bc * abc_ab;\n    long abc_bcb_abc_ac\
    \ = abc_bc * abc_ac;\n    long abc_bcb_abc_bc = abc_bc * abc_bc;\n    long abc_bcb_abc_cb\
    \ = abc_bc * \n}\nint main() {\n    auto candidate = right_angle_triangle;\n \
    \   assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmp2uejc1o6.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmp2uejc1o6.cpp:23:25: error: \u2018acb\u2019\
    \ was not declared in this scope; did you mean \u2018abc\u2019?\n   23 |     long\
    \ acb_acb = ac * acb;\n      |                         ^~~\n      |          \
    \               abc\n/tmp/tmp2uejc1o6.cpp:48:1: error: expected primary-expression\
    \ before \u2018}\u2019 token\n   48 | }\n      | ^\n/tmp/tmp2uejc1o6.cpp:48:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    long long int ab = abs(b - a);\n    long long int\
    \ ac = abs(c - a);\n    long long int bc = abs(b - c);\n    long long int bd =\
    \ abs(d - b);\n    long long int cd = abs(c - d);\n    long long int ad = abs(d\
    \ - a);\n    long long int abc = ab + ac;\n    long long int bcd = bc + bd;\n\
    \    long long int acd = ac + cd;\n    long long int bcad = bc + ad;\n    long\
    \ long int bcac = bc + ac;\n    long long int bcab = bc + ab;\n    long long int\
    \ bcaab = bc + aa + ab;\n    long long int bcabc = bc + ab + ac;\n    long long\
    \ int bcabd = bc + ab + bd;\n    long long int bcabcd = bc + ab + cd + bd;\n \
    \   long long int bcabcda = bc + ab + cd + ad + a;\n    long long int bcabcdb\
    \ = bc + ab + cd + bd + b;\n    long long int bcabcdc = bc + ab + cd + cd + c;\n\
    \    long long int bcabcdbc = bc + ab + cd + bd + b + c;\n    long long int bcabcdbcd\
    \ = bc + ab + cd + bd + b + c + d;\n    long long int bcabcdbcda = bc + ab + cd\
    \ + bd + b + c + da + a;\n    long long int bcabcdbcdb = bc + ab + cd + bd + b\
    \ + c + db + b;\n    long long int bcabcdbcdc = bc + ab + cd + bd + b + c + dc\
    \ + c;\n    long long int bcabcdbcdbc = bc + ab + cd + bd + b + c + db + b + c;\n\
    \    long long int bcabcdbcdbcd = bc + ab + cd + bd + b + c + db + b + c + d;\n\
    \    long long int bcabcdbcdbcda = bc + ab + cd + bd + b + c + db + b + c + da\
    \ + a;\n    long long int bcabcdbcdbcdb = bc + ab + cd + bd + b + c + db + b +\
    \ c + db + b;\n    long long int bcabcdbcdbcdc = bc + ab + cd + bd + b + c + db\
    \ + b + c + dc + \n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmp_al3s0on.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmp_al3s0on.cpp:14:28: error: \u2018d\u2019\
    \ was not declared in this scope; did you mean \u2018bd\u2019?\n   14 |     long\
    \ long int bd = abs(d - b);\n      |                            ^\n      |   \
    \                         bd\n/tmp/tmp_al3s0on.cpp:23:32: error: \u2018aa\u2019\
    \ was not declared in this scope; did you mean \u2018ad\u2019?\n   23 |     long\
    \ long int bcaab = bc + aa + ab;\n      |                                ^~\n\
    \      |                                ad\n/tmp/tmp_al3s0on.cpp:32:60: error:\
    \ \u2018da\u2019 was not declared in this scope; did you mean \u2018ad\u2019?\n\
    \   32 |     long long int bcabcdbcda = bc + ab + cd + bd + b + c + da + a;\n\
    \      |                                                            ^~\n     \
    \ |                                                            ad\n/tmp/tmp_al3s0on.cpp:33:60:\
    \ error: \u2018db\u2019 was not declared in this scope; did you mean \u2018bd\u2019\
    ?\n   33 |     long long int bcabcdbcdb = bc + ab + cd + bd + b + c + db + b;\n\
    \      |                                                            ^~\n     \
    \ |                                                            bd\n/tmp/tmp_al3s0on.cpp:34:60:\
    \ error: \u2018dc\u2019 was not declared in this scope; did you mean \u2018cd\u2019\
    ?\n   34 |     long long int bcabcdbcdc = bc + ab + cd + bd + b + c + dc + c;\n\
    \      |                                                            ^~\n     \
    \ |                                                            cd\n/tmp/tmp_al3s0on.cpp:40:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n   40 | }\n \
    \     | ^\n/tmp/tmp_al3s0on.cpp:40:1: warning: no return statement in function\
    \ returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    long long ans = (a * b * c) - (a * c * b) - (b * c\
    \ * a);\n    if (ans == 0) return true;\n    else return false;\n}\nint main()\
    \ {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4),\
    \ (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpugd_8di7: /tmp/tmpugd_8di7.cpp:17: int main(): Assertion `candidate((3),\
    \ (4), (5)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    // Write your code here\n    long long int ans = (a*a\
    \ + b*b - c*c)/2;\n    if (ans < 0)\n        return false;\n    long long int\
    \ sq = ans*ans;\n    long long int sq1 = b*b - a*a;\n    long long int sq2 = c*c\
    \ - a*a;\n    long long int sq3 = sq*sq;\n    long long int sq4 = sq1*sq1;\n \
    \   long long int sq5 = sq2*sq2;\n    long long int sq6 = sq3*sq3;\n    long long\
    \ int sq7 = sq4*sq4;\n    long long int sq8 = sq5*sq5;\n    long long int sq9\
    \ = sq6*sq6;\n    long long int sq10 = sq7*sq7;\n    long long int sq11 = sq8*sq8;\n\
    \    long long int sq12 = sq9*sq9;\n    long long int sq13 = sq10*sq10;\n    long\
    \ long int sq14 = sq11*sq11;\n    long long int sq15 = sq12*sq12;\n    long long\
    \ int sq16 = sq13*sq13;\n    long long int sq17 = sq14*sq14;\n    long long int\
    \ sq18 = sq15*sq15;\n    long long int sq19 = sq16*sq16;\n    long long int sq20\
    \ = sq17*sq17;\n    long long int sq21 = sq18*sq18;\n    long long int sq22 =\
    \ sq19*sq19;\n    long long int sq23 = sq20*sq20;\n    long long int sq24 = sq21*sq21;\n\
    \    long long int sq25 = sq22*sq22;\n    long long int sq26 = sq23*sq23;\n  \
    \  long long int sq27 = sq24*sq24;\n    long long int sq28 = sq25*sq25;\n    long\
    \ long int sq29 = sq26*sq26;\n    long long int sq30 = sq27*sq27;\n    long long\
    \ int sq31 = sq28*sq28;\n    long long int sq32 = sq29*sq29;\n    long long int\
    \ sq33 = sq30*sq30;\n    long long int sq34 = sq31*sq31;\n    long long int sq35\
    \ = sq32*sq32;\n    long long int sq36 = sq33*sq33;\n    long long int sq37 =\
    \ \n}\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3ab3m3m9.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmp3ab3m3m9.cpp:53:1: error: expected\
    \ primary-expression before \u2018}\u2019 token\n   53 | }\n      | ^\n/tmp/tmp3ab3m3m9.cpp:53:1:\
    \ warning: control reaches end of non-void function [-Wreturn-type]\n   53 | }\n\
    \      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    if (a > b + c || b > a + c || c > a + b) {\n     \
    \   return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n \
    \   assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10), (6),\
    \ (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7),\
    \ (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n\
    \    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  stdout: ''
  stderr: "tmp0ds8wwie: /tmp/tmp0ds8wwie.cpp:19: int main(): Assertion `candidate((1),\
    \ (2), (3)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    if (a < 0 || b < 0 || c < 0)\n        return false;\n\
    \    long d = b * b - 4 * a * c;\n    if (d < 0)\n        return false;\n    long\
    \ x = (b + d) / (2 * a);\n    long y = (-b - d) / (2 * a);\n    return x == y;\n\
    }\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  stdout: ''
  stderr: "tmp0yphy9pr: /tmp/tmp0yphy9pr.cpp:22: int main(): Assertion `candidate((3),\
    \ (4), (5)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    if(a==b&&b==c) return true;\n    if(a==c&&b==c) return\
    \ true;\n    if(a==b&&c==b) return true;\n    if(a==c&&c==b) return true;\n  \
    \  if(a==b&&b==c) return true;\n    if(a==c&&c==b) return true;\n    return false;\n\
    }\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpqj48dqt2: /tmp/tmpqj48dqt2.cpp:21: int main(): Assertion `candidate((3),\
    \ (4), (5)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    // Write your code here\n    long d = b - a;\n   \
    \ long e = c - a;\n    long f = d - e;\n    long g = e + d;\n    long h = f -\
    \ g;\n    long i = g + e;\n    long j = h + f;\n    long k = i + j;\n    long\
    \ l = k + h;\n    long m = l + i;\n    long n = m + k;\n    long o = n + l;\n\
    \    long p = o + m;\n    long q = p + n;\n    long r = q + o;\n    long s = r\
    \ + p;\n    long t = s + q;\n    long u = t + s;\n    long v = u + t;\n    long\
    \ w = v + u;\n    long x = w + v;\n    long y = x + w;\n    long z = y + x;\n\
    \    long a = z + y;\n    long b = a + z;\n    long c = b + a;\n    long d = c\
    \ + b;\n    long e = d + c;\n    long f = e + d;\n    long g = f + e;\n    long\
    \ h = g + f;\n    long i = h + g;\n    long j = i + h;\n    long k = j + i;\n\
    \    long l = k + j;\n    long m = l + k;\n    long n = m + l;\n    long o = n\
    \ + m;\n    long p = o + n;\n    long q = p + o;\n    long r = q + p;\n    long\
    \ s = r + q;\n    long t = s + r;\n    long u = t + s;\n    long v = u + t;\n\
    \    long w = v + u;\n    long x = w + v;\n    long y = x + w;\n    long z = y\
    \ + x;\n    long a = z + y;\n    long b = a + z;\n    long c = b + a;\n    long\
    \ d = c + b;\n    long e = d + c;\n    long f = e + d;\n    long g = f + e;\n\
    \    long h = g + f;\n    long i = h + g;\n    long j = i + h;\n    long k = j\
    \ + i;\n    long l = k + j;\n    long m = l + k;\n    long n = m + l;\n    long\
    \ o = n + m;\n    long p = o + n;\n    long q = p + o;\n    long r = q + p;\n\
    \    long s = r + q;\n    long t = s + r;\n    long u = t + s;\n    long v = u\
    \ + t;\n    long w = v + u;\n    long x = w + v;\n    long y = x + w;\n    long\
    \ z = y + x;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n  \
    \  assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpcgvi936r.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmpcgvi936r.cpp:35:10: error: declaration\
    \ of \u2018long int a\u2019 shadows a parameter\n   35 |     long a = z + y;\n\
    \      |          ^\n/tmp/tmpcgvi936r.cpp:36:10: error: declaration of \u2018\
    long int b\u2019 shadows a parameter\n   36 |     long b = a + z;\n      |   \
    \       ^\n/tmp/tmpcgvi936r.cpp:37:10: error: declaration of \u2018long int c\u2019\
    \ shadows a parameter\n   37 |     long c = b + a;\n      |          ^\n/tmp/tmpcgvi936r.cpp:38:10:\
    \ error: redeclaration of \u2018long int d\u2019\n   38 |     long d = c + b;\n\
    \      |          ^\n/tmp/tmpcgvi936r.cpp:12:10: note: \u2018long int d\u2019\
    \ previously declared here\n   12 |     long d = b - a;\n      |          ^\n\
    /tmp/tmpcgvi936r.cpp:39:10: error: redeclaration of \u2018long int e\u2019\n \
    \  39 |     long e = d + c;\n      |          ^\n/tmp/tmpcgvi936r.cpp:13:10: note:\
    \ \u2018long int e\u2019 previously declared here\n   13 |     long e = c - a;\n\
    \      |          ^\n/tmp/tmpcgvi936r.cpp:40:10: error: redeclaration of \u2018\
    long int f\u2019\n   40 |     long f = e + d;\n      |          ^\n/tmp/tmpcgvi936r.cpp:14:10:\
    \ note: \u2018long int f\u2019 previously declared here\n   14 |     long f =\
    \ d - e;\n      |          ^\n/tmp/tmpcgvi936r.cpp:41:10: error: redeclaration\
    \ of \u2018long int g\u2019\n   41 |     long g = f + e;\n      |          ^\n\
    /tmp/tmpcgvi936r.cpp:15:10: note: \u2018long int g\u2019 previously declared here\n\
    \   15 |     long g = e + d;\n      |          ^\n/tmp/tmpcgvi936r.cpp:42:10:\
    \ error: redeclaration of \u2018long int h\u2019\n   42 |     long h = g + f;\n\
    \      |          ^\n/tmp/tmpcgvi936r.cpp:16:10: note: \u2018long int h\u2019\
    \ previously declared here\n   16 |     long h = f - g;\n      |          ^\n\
    /tmp/tmpcgvi936r.cpp:43:10: error: redeclaration of \u2018long int i\u2019\n \
    \  43 |     long i = h + g;\n      |          ^\n/tmp/tmpcgvi936r.cpp:17:10: note:\
    \ \u2018long int i\u2019 previously declared here\n   17 |     long i = g + e;\n\
    \      |          ^\n/tmp/tmpcgvi936r.cpp:44:10: error: redeclaration of \u2018\
    long int j\u2019\n   44 |     long j = i + h;\n      |          ^\n/tmp/tmpcgvi936r.cpp:18:10:\
    \ note: \u2018long int j\u2019 previously declared "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    if(a==b){\n        if(a==c){\n            return true;\n\
    \        }\n        return false;\n    }\n    if(b==c){\n        return false;\n\
    \    }\n    if(a>b){\n        if(a>c){\n            return true;\n        }\n\
    \        return false;\n    }\n    if(b>c){\n        return false;\n    }\n  \
    \  if(a<b){\n        if(a<c){\n            return true;\n        }\n        return\
    \ false;\n    }\n    if(b<c){\n        return false;\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpc6i7txj3: /tmp/tmpc6i7txj3.cpp:43: int main(): Assertion `candidate((1),\
    \ (2), (3)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    long long int ans = (a * b * c) / 2;\n    long long\
    \ int bsq = b * b; // square\n    long long int csq = c * c; // square\n    long\
    \ long int a2 = a * a; // square\n    long long int b2 = b * b; // square\n  \
    \  long long int c2 = c * c; // square\n    long long int ac = a * c; // square\n\
    \    long long int bc = (b * c); // square\n    long long int ab = a * b; // square\n\
    \    long long int ac2 = ac * c; // square\n    long long int bc2 = bc * c; //\
    \ square\n    long long int ab2 = ab * c; // square\n    long long int ac3 = ac\
    \ * c; // square\n    long long int bc3 = bc * c; // square\n    long long int\
    \ ab3 = ab * c; // square\n    long long int ac4 = ac * c; // square\n    long\
    \ long int bc4 = bc * c; // square\n    long long int ab4 = ab * c; // square\n\
    \    long long int ac5 = ac * c; // square\n    long long int bc5 = bc * c; //\
    \ square\n    long long int ab5 = ab * c; // square\n    long long int ac6 = ac\
    \ * c; // square\n    long long int bc6 = bc * c; // square\n    long long int\
    \ ab6 = ab * c; // square\n    long long int ac7 = ac * c; // square\n    long\
    \ long int bc7 = bc * c; // square\n    long long int ab7 = ab * c; // square\n\
    \    long long int ac8 = ac * c; // square\n    long long int bc8 = bc * c; //\
    \ square\n    long long int ab8 = ab * c; // square\n    long long int ac9 = ac\
    \ * c; // square\n    long long int bc9 = bc * c; // square\n    long long int\
    \ ab9 = ab * c; // square\n    long long int ac10 = ac * c; // square\n    long\
    \ long int bc10 = bc * c; // square\n    long long int ab10 = ab * c; // square\n\
    \    long long int ac11 = ac * c; // square\n    long long int bc11 = bc * c;\
    \ // square\n    long long int ab11 = ab * c; // square\n    long long int ac12\
    \ = ac * c; // square\n    long long int bc12 = bc * c; // square\n    long long\
    \ int ab12 = ab * c; // square\n    long long int ac13 = ac * c; // square\n\n\
    }\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  stdout: ''
  stderr: "tmppjbn3jp4: /tmp/tmppjbn3jp4.cpp:58: int main(): Assertion `candidate((3),\
    \ (4), (5)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    if (a == 0 || b == 0 || c == 0)\n        return false;\n\
    \    long d = b * b - 4 * a * c;\n    if (d < 0)\n        return false;\n    long\
    \ x = (b + c) / 2;\n    long y = (-b + c) / 2;\n    long m = (a + b) / 2;\n  \
    \  long n = (-a + b) / 2;\n    long o = (a + m) / 2;\n    long p = (-a + m) /\
    \ 2;\n    long q = (a + n) / 2;\n    long r = (-a + n) / 2;\n    long s = (a +\
    \ o) / 2;\n    long t = (-a + o) / 2;\n    long u = (a + p) / 2;\n    long v =\
    \ (-a + p) / 2;\n    long w = (a + q) / 2;\n    long x = (-a + q) / 2;\n    long\
    \ y = (a + r) / 2;\n    long z = (-a + r) / 2;\n    long A = (x * x + y * y) -\
    \ z * z;\n    long B = (x * y + z * z);\n    long C = (x * z - y * z);\n    long\
    \ D = (y * z + x * z);\n    long E = (x * y - z * x);\n    long F = (y * z - x\
    \ * x);\n    long G = (z * z + x * y);\n    long H = (z * x - y * y);\n    long\
    \ I = (x * x + y * z);\n    long J = (x * z - y * z);\n    long K = (y * z + x\
    \ * z);\n    long L = (x * y - z * x);\n    long M = (y * z - x * x);\n    long\
    \ N = (z * z + x * y);\n    long O = (z * x - y * y);\n    long P = (x * x + y\
    \ * z);\n    long Q = (x * z - y * z);\n    long R = (y * z + x * z);\n    long\
    \ S = (z * z + x * y);\n    long T = (z * x - y * y);\n    long U = (x * y - z\
    \ * x);\n    long V = (y * z - x * x);\n    long W = (z * z + x * y);\n    long\
    \ X = (x * x + y * y);\n    long Y = (x * z - y * z);\n    long Z = (y * z + x\
    \ * z);\n    long aa = (A * A + B * B + C * C + D * D + E * E + F * F + G * G\
    \ + H * H + I * I + J * J + K * K + L * L + M * M + N * N + \n}\nint main() {\n\
    \    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5))\
    \ == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp76swmdbo.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmp76swmdbo.cpp:29:10: error: redeclaration\
    \ of \u2018long int x\u2019\n   29 |     long x = (-a + q) / 2;\n      |     \
    \     ^\n/tmp/tmp76swmdbo.cpp:16:10: note: \u2018long int x\u2019 previously declared\
    \ here\n   16 |     long x = (b + c) / 2;\n      |          ^\n/tmp/tmp76swmdbo.cpp:30:10:\
    \ error: redeclaration of \u2018long int y\u2019\n   30 |     long y = (a + r)\
    \ / 2;\n      |          ^\n/tmp/tmp76swmdbo.cpp:17:10: note: \u2018long int y\u2019\
    \ previously declared here\n   17 |     long y = (-b + c) / 2;\n      |      \
    \    ^\n/tmp/tmp76swmdbo.cpp:59:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   59 | }\n      | ^\n/tmp/tmp76swmdbo.cpp:58:127: error: expected\
    \ \u2018)\u2019 before \u2018}\u2019 token\n   58 |     long aa = (A * A + B *\
    \ B + C * C + D * D + E * E + F * F + G * G + H * H + I * I + J * J + K * K +\
    \ L * L + M * M + N * N +\n      |               ~                           \
    \                                                                            \
    \        ^\n      |                                                          \
    \                                                                     )\n   59\
    \ | }\n      | ~                                                             \
    \                                                                 \n/tmp/tmp76swmdbo.cpp:59:1:\
    \ warning: control reaches end of non-void function [-Wreturn-type]\n   59 | }\n\
    \      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    // Write your code here\n    if(a==b&&b==c){\n   \
    \     return true;\n    }\n    if(a==b||a==c||b==c){\n        return false;\n\
    \    }\n    if(a>b&&b>c&&c>a){\n        return true;\n    }\n    if(a>b||b>c||c>a){\n\
    \        return false;\n    }\n    if(a<b&&b>c&&c<a){\n        return true;\n\
    \    }\n    if(a<b||b>c||c<a){\n        return false;\n    }\n}\nint main() {\n\
    \    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5))\
    \ == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpw9mz1e08: /tmp/tmpw9mz1e08.cpp:33: int main(): Assertion `candidate((3),\
    \ (4), (5)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    if (a == 0 || b == 0 || c == 0)\n        return false;\n\
    \    long d = b * b - 4 * a * c;\n    if (d < 0)\n        return false;\n    long\
    \ e = ((b * b) - 4 * a * c) / d;\n    if (e < 0)\n        return false;\n    long\
    \ f = ((b * b) - 4 * a * c) / d;\n    if (f < 0)\n        return false;\n    long\
    \ g = a * a * c / b - b * b / a;\n    if (g < 0)\n        return false;\n    long\
    \ h = a * a * c / b - b * b / a;\n    if (h < 0)\n        return false;\n    long\
    \ i = a * a * c / b - b * b / a;\n    if (i < 0)\n        return false;\n    long\
    \ j = a * a * c / b - b * b / a;\n    if (j < 0)\n        return false;\n    long\
    \ k = a * a * c / b - b * b / a;\n    if (k < 0)\n        return false;\n    long\
    \ l = a * a * c / b - b * b / a;\n    if (l < 0)\n        return false;\n    long\
    \ m = a * a * c / b - b * b / a;\n    if (m < 0)\n        return false;\n    long\
    \ n = a * a * c / b - b * b / a;\n    if (n < 0)\n        return false;\n    long\
    \ o = a * a * c / b - b * b / a;\n    if (o < 0)\n        return false;\n    long\
    \ p = a * a * c / b - b * b / a;\n    if (p < 0)\n        return false;\n    long\
    \ q = a * a * c / b - b * b / a;\n    if (q < 0)\n        return false;\n    long\
    \ r = a * a * c / b - b * b / a;\n    if (r < 0)\n        return false;\n    long\
    \ s = a * a * c / b - b * b / a;\n    if (s < 0)\n        return false;\n    long\
    \ t = a * a * c / b - b * b / a;\n    if (t < 0)\n        return false;\n    long\
    \ u = a * a * c / b - b * b / a;\n    if (u < 0)\n        return false;\n    long\
    \ v = a * a * c / b - b * b / a;\n    if (v < 0)\n        return false;\n    long\
    \ w = a * a * c / b - b * b / a;\n    if (w < 0)\n        return false;\n    long\
    \ x = a * a * c / b - b * b / a;\n    if (x < 0)\n        return false;\n    long\
    \ y = a * a * c / b - b * b / a;\n    if (y < 0)\n        return false;\n    long\
    \ z = a * a * c / b - b * b / a;\n    if (z < 0)\n        return false;\n    return\
    \ true;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpmkszkq77: /tmp/tmpmkszkq77.cpp:86: int main(): Assertion `candidate((3),\
    \ (4), (5)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    // Write your code here\n    long side1 = abs(a) +\
    \ abs(b) + abs(c);\n    long side2 = abs(a) + abs(b) - abs(c);\n    long side3\
    \ = abs(a) - abs(b) - abs(c);\n    long side4 = abs(a) - abs(b) + abs(c);\n  \
    \  long side5 = abs(a) + abs(b) + abs(c) - 1;\n    long side6 = abs(a) + abs(b)\
    \ - abs(c) - 1;\n    long side7 = abs(a) - abs(b) - abs(c) - 1;\n    long side8\
    \ = abs(a) - abs(b) + abs(c) - 1;\n    long side9 = abs(a) + abs(b) + abs(c) +\
    \ 1;\n    long side10 = abs(a) + abs(b) - abs(c) + 1;\n    long side11 = abs(a)\
    \ - abs(b) - abs(c) + 1;\n    long side12 = abs(a) - abs(b) + abs(c) + 1;\n  \
    \  long side13 = abs(a) + abs(b) + abs(c) - 1;\n    long side14 = abs(a) + abs(b)\
    \ - abs(c) - 1;\n    long side15 = abs(a) - abs(b) - abs(c) - 1;\n    long side16\
    \ = abs(a) - abs(b) + abs(c) - 1;\n    long side17 = abs(a) + abs(b) + abs(c)\
    \ + 1;\n    long side18 = abs(a) + abs(b) - abs(c) + 1;\n    long side19 = abs(a)\
    \ - abs(b) - abs(c) + 1;\n    long side20 = abs(a) - abs(b) + abs(c) + 1;\n  \
    \  long side21 = abs(a) + abs(b) + abs(c) - 1;\n    long side22 = abs(a) + abs(b)\
    \ - abs(c) - 1;\n    long side23 = abs(a) - abs(b) - abs(c) - 1;\n    long side24\
    \ = abs(a) - abs(b) + abs(c) - 1;\n    long side25 = abs(a) + abs(b) + abs(c)\
    \ + 1;\n    long side26 = abs(a) + abs(b) - abs(c) + 1;\n    long side27 = abs(a)\
    \ - abs(b) - abs(c) + 1;\n    long side28 = abs(a) - abs(b) + abs(c) + 1;\n  \
    \  long side29 = abs(a) + abs(b) + abs(c) - 1;\n    long side30 = abs(a) + abs(b)\
    \ - abs(c) - 1;\n    long side31 = abs(a) - abs(b) - abs(c) - 1;\n    long side32\
    \ = abs(a) - abs(b) + abs(c) - 1;\n    long side33 = abs(a) + abs(b) + abs(c)\
    \ + 1;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  stdout: ''
  stderr: "tmp8514pqgb: /tmp/tmp8514pqgb.cpp:48: int main(): Assertion `candidate((3),\
    \ (4), (5)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    long ab = abs(b - a);\n    long ac = abs(c - a);\n\
    \    long bc = abs(b - c);\n    long cb = abs(c - b);\n    long abc = ab + ac\
    \ + bc;\n    long abc_ab = ab * ab;\n    long abc_ac = ab * ac;\n    long abc_bc\
    \ = ab * bc;\n    long abc_cb = ab * cb;\n    long acb = ac * bc;\n    long acb_ac\
    \ = ac * ac;\n    long acb_ab = ac * ab;\n    long acb_abc = ac * abc;\n    long\
    \ acb_abc_ab = ac * abc_ab;\n    long acb_abc_ac = ac * abc_ac;\n    long acb_abc_bc\
    \ = ac * abc_bc;\n    long acb_abc_cb = ac * abc_cb;\n    long bcb = bc * bc;\n\
    \    long bcb_ac = bc * ac;\n    long bcb_ab = bc * ab;\n    long bcb_abc = bc\
    \ * abc;\n    long bcb_abc_ab = bc * abc_ab;\n    long bcb_abc_ac = bc * abc_ac;\n\
    \    long bcb_abc_bc = bc * abc_bc;\n    long bcb_abc_cb = bc * abc_cb;\n    long\
    \ abc_acb = abc * acb;\n    long abc_acb_ac = abc * acb_ac;\n    long abc_acb_ab\
    \ = abc * acb_ab;\n    long abc_acb_abc = abc * acb_abc;\n    long abc_acb_abc_ab\
    \ = abc * acb_abc_ab;\n    long abc_acb_abc_ac = abc * acb_abc_ac;\n    long abc_acb_abc_bc\
    \ = abc * acb_abc_bc;\n    long abc_acb_abc_cb = abc * acb_abc_cb;\n    long abc_bcb\
    \ = abc * bcb;\n    long abc_bcb_ac = abc * bcb_ac;\n    long abc_bcb_ab = abc\
    \ * bcb_ab;\n    long abc_bcb_abc = abc * bcb_abc;\n    long abc_bcb_abc_ab =\
    \ abc * bcb_abc_ab;\n    long abc_bcb_abc_ac = abc\n}\nint main() {\n    auto\
    \ candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n\
    \    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpnpi18vvl.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmpnpi18vvl.cpp:50:1: error: expected\
    \ \u2018,\u2019 or \u2018;\u2019 before \u2018}\u2019 token\n   50 | }\n     \
    \ | ^\n/tmp/tmpnpi18vvl.cpp:50:1: warning: no return statement in function returning\
    \ non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    if (a > b && a > c) {\n        return false;\n   \
    \ }\n    if (b > c && b > a) {\n        return false;\n    }\n    if (c > a &&\
    \ c > b) {\n        return false;\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5))\
    \ == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  stdout: ''
  stderr: "tmp_huqb8vp: /tmp/tmp_huqb8vp.cpp:24: int main(): Assertion `candidate((3),\
    \ (4), (5)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    if (a > b + c || b > a + c || c > a + b) {\n     \
    \   return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n \
    \   assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10), (6),\
    \ (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7),\
    \ (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n\
    \    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  stdout: ''
  stderr: "tmp8g7ea5rz: /tmp/tmp8g7ea5rz.cpp:19: int main(): Assertion `candidate((1),\
    \ (2), (3)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    if (a == 0 || b == 0 || c == 0)\n        return false;\n\
    \    long d = (b * b) - (4 * a * c);\n    if (d < 0)\n        return false;\n\
    \    long x = (b * b) - (4 * a * d);\n    if (x < 0)\n        return false;\n\
    \    long y = (b * b) - (4 * a * d);\n    if (y < 0)\n        return false;\n\
    \    long z = (b * b) - (4 * a * d);\n    if (z < 0)\n        return false;\n\
    \    if (x == 0 && y == 0 && z == 0)\n        return true;\n    if (x == 0)\n\
    \        return false;\n    if (y == 0)\n        return false;\n    if (z == 0)\n\
    \        return false;\n    long x1 = (-b + sqrt(x * x + 4 * a * z)) / (2 * a);\n\
    \    long y1 = (-b - sqrt(x * x + 4 * a * z)) / (2 * a);\n    long z1 = (-b +\
    \ sqrt(x * x + 4 * a * y)) / (2 * a);\n    long x2 = (-b + sqrt(x * x + 4 * a\
    \ * y)) / (2 * a);\n    long y2 = (-b - sqrt(x * x + 4 * a * y)) / (2 * a);\n\
    \    long z2 = (-b + sqrt(x * x + 4 * a * x)) / (2 * a);\n    if (x1 == x2 &&\
    \ y1 == y2 && z1 == z2)\n        return true;\n    return false;\n}\nint main()\
    \ {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4),\
    \ (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  stdout: ''
  stderr: "tmp2kxd1_hb: /tmp/tmp2kxd1_hb.cpp:45: int main(): Assertion `candidate((3),\
    \ (4), (5)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    long long a1 = (a + b + c) / 2;\n    long long b1\
    \ = (a + b) / 2;\n    long long c1 = (a + b) / 2;\n    long long a2 = (a + c)\
    \ / 2;\n    long long b2 = (a + b) / 2;\n    long long c2 = (a + c) / 2;\n   \
    \ long long a3 = (b + c) / 2;\n    long long b3 = (b + c) / 2;\n    long long\
    \ c3 = (b + c) / 2;\n    long long a4 = (a + c) / 2;\n    long long b4 = (a +\
    \ b) / 2;\n    long long c4 = (a + c) / 2;\n    long long a5 = (a + b) / 2;\n\
    \    long long b5 = (a + b) / 2;\n    long long c5 = (a + b) / 2;\n    long long\
    \ a6 = (a + c) / 2;\n    long long b6 = (a + b) / 2;\n    long long c6 = (a +\
    \ c) / 2;\n    long long a7 = (b + c) / 2;\n    long long b7 = (b + c) / 2;\n\
    \    long long c7 = (b + c) / 2;\n    long long a8 = (a + c) / 2;\n    long long\
    \ b8 = (a + b) / 2;\n    long long c8 = (a + c) / 2;\n    long long a9 = (b +\
    \ c) / 2;\n    long long b9 = (b + c) / 2;\n    long long c9 = (b + c) / 2;\n\
    \    long long a10 = (a + b) / 2;\n    long long b10 = (a + b) / 2;\n    long\
    \ long c10 = (a + b) / 2;\n    long long a11 = (a + c) / 2;\n    long long b11\
    \ = (a + b) / 2;\n    long long c11 = (a + c) / 2;\n    long long a12 = (a + b)\
    \ / 2;\n    long long b12 = (a + b) / 2;\n    long long c12 = (a + b) / 2;\n \
    \   long long a13 = (a + c) / 2;\n    long long b13 = (a + b) / 2;\n    long long\
    \ c13 = (a + c) / 2;\n    long long a14 = (a + b) / 2;\n    long long b14 = (a\
    \ + b) / 2;\n    long long c14 = (a + b) / 2;\n    long long a15 = (a + c) / 2;\n\
    \    long long b15 = (a + b) / 2;\n    long long c15 = (a + c) / 2;\n    long\
    \ long a16 = (a + b) / 2;\n    long long b16 = (a + b) / 2;\n    long long c16\
    \ = (a + b\n}\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpk_zr08b5.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmpk_zr08b5.cpp:58:27: error: expected\
    \ \u2018)\u2019 before \u2018}\u2019 token\n   58 |     long long c16 = (a + b\n\
    \      |                     ~     ^\n      |                           )\n  \
    \ 59 | }\n      | ~                          \n/tmp/tmpk_zr08b5.cpp:59:1: error:\
    \ expected \u2018,\u2019 or \u2018;\u2019 before \u2018}\u2019 token\n   59 |\
    \ }\n      | ^\n/tmp/tmpk_zr08b5.cpp:59:1: warning: no return statement in function\
    \ returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    long long a1 = abs(a), b1 = abs(b), c1 = abs(c);\n\
    \    long long a2 = a1 + b1, b2 = b1 + c1, c2 = a1 + c1;\n    long long a3 = a2\
    \ + b2, b3 = b2 + c2, c3 = a2 + c2;\n    long long a4 = a3 + b3, b4 = b3 + c3,\
    \ c4 = a3 + c3;\n    long long a5 = a4 + b4, b5 = b4 + c4, c5 = a4 + c4;\n   \
    \ long long a6 = a5 + b5, b6 = b5 + c5, c6 = a5 + c5;\n    long long a7 = a6 +\
    \ b6, b7 = b6 + c6, c7 = a6 + c6;\n    long long a8 = a7 + b7, b8 = b7 + c7, c8\
    \ = a7 + c7;\n    long long a9 = a8 + b8, b9 = b8 + c8, c9 = a8 + c8;\n    long\
    \ long a10 = a9 + b9, b10 = b9 + c9, c10 = a9 + c9;\n    long long a11 = a10 +\
    \ b10, b11 = b10 + c10, c11 = a10 + c10;\n    long long a12 = a11 + b11, b12 =\
    \ b11 + c11, c12 = a11 + c11;\n    long long a13 = a12 + b12, b13 = b12 + c12,\
    \ c13 = a12 + c12;\n    long long a14 = a13 + b13, b14 = b13 + c13, c14 = a13\
    \ + c13;\n    long long a15 = a14 + b14, b15 = b14 + c14, c15 = a14 + c14;\n \
    \   long long a16 = a15 + b15, b16 = b15 + c15, c16 = a15 + c15;\n    long long\
    \ a17 = a16 + b16, b17 = b16 + c16, c17 = a16 + c16;\n    long long a18 = a17\
    \ + b17, b18 = b17 + c17, c18 = a17 + c17;\n    long long a19 = a18 + b18, b19\
    \ = b18 + c18, c19 = a18 + c18;\n    long long a20 = a19 + b19, b20 = b19 + c19,\
    \ c20 = a19 + c19;\n    long long a21 = a20 + b20, b21 = b20 + c20, c21 = a20\
    \ + c20;\n    long long a22 = a21 + b21, b22 = b21 + c21, \n}\nint main() {\n\
    \    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5))\
    \ == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpypwywdri.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmpypwywdri.cpp:33:1: error: expected\
    \ unqualified-id before \u2018}\u2019 token\n   33 | }\n      | ^\n/tmp/tmpypwywdri.cpp:33:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    if (a == 0 && b == 0 && c == 0)\n        return true;\n\
    \    if (a == 0 || b == 0 || c == 0)\n        return false;\n    long d = b *\
    \ b - 4 * a * c;\n    if (d < 0)\n        return false;\n    long x = (b + c)\
    \ / 2;\n    long y = (-b - c) / 2;\n    long m = (a + b + c) / 2;\n    long n\
    \ = (a + b) - (a + b + c) / 2;\n    long o = (a + b) - (a + b + c);\n    long\
    \ p = a + b + c;\n    long q = a + b - c;\n    long r = a - b - c;\n    long s\
    \ = a + b + c;\n    long t = a + b - c;\n    long u = (a + b) - (a + b + c);\n\
    \    long v = (a + b + c) - (a + b - c);\n    long w = (a + b) - (a + b - c);\n\
    \    long x = (a + b + c) - (a + b - c);\n    long y = (a + b + c) - (a + b -\
    \ c);\n    long z = (a + b + c) - (a + b - c);\n    long x1 = (a + b + c) - (a\
    \ + b - c);\n    long y1 = (a + b + c) - (a + b - c);\n    long z1 = (a + b +\
    \ c) - (a + b - c);\n    long x2 = (a + b + c) - (a + b - c);\n    long y2 = (a\
    \ + b + c) - (a + b - c);\n    long z2 = (a + b + c) - (a + b - c);\n    long\
    \ x3 = (a + b + c) - (a + b - c);\n    long y3 = (a + b + c) - (a + b - c);\n\
    \    long z3 = (a + b + c) - (a + b - c);\n    long x4 = (a + b + c) - (a + b\
    \ - c);\n    long y4 = (a + b + c) - (a + b - c);\n    long z4 = (a + b + c) -\
    \ (a + b - c);\n    long x5 = (a + b + c) - (a + b - c);\n    long y5 = (a + b\
    \ + c) - (a + b - c);\n    long z5 = (a + b + c) - (a + b - c);\n    long x6 =\
    \ (a + b + c) - (a + b - c);\n    long y6 = (a + b + c) - (a + b - c);\n    long\
    \ z6 = (a + b + c) - (a + b - c);\n    long x7 = (a + b + c) - (a + b - c);\n\
    \    long y7 = (a + b + c) - (a + b - c);\n    long z7\n}\nint main() {\n    auto\
    \ candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n\
    \    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpbkamz8_v.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmpbkamz8_v.cpp:31:10: error: redeclaration\
    \ of \u2018long int x\u2019\n   31 |     long x = (a + b + c) - (a + b - c);\n\
    \      |          ^\n/tmp/tmpbkamz8_v.cpp:18:10: note: \u2018long int x\u2019\
    \ previously declared here\n   18 |     long x = (b + c) / 2;\n      |       \
    \   ^\n/tmp/tmpbkamz8_v.cpp:32:10: error: redeclaration of \u2018long int y\u2019\
    \n   32 |     long y = (a + b + c) - (a + b - c);\n      |          ^\n/tmp/tmpbkamz8_v.cpp:19:10:\
    \ note: \u2018long int y\u2019 previously declared here\n   19 |     long y =\
    \ (-b - c) / 2;\n      |          ^\n/tmp/tmpbkamz8_v.cpp:55:1: error: expected\
    \ initializer before \u2018}\u2019 token\n   55 | }\n      | ^\n/tmp/tmpbkamz8_v.cpp:55:1:\
    \ warning: control reaches end of non-void function [-Wreturn-type]\n   55 | }\n\
    \      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    if (a > b && a > c && b > c) {\n        return true;\n\
    \    }\n    return false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpwa1wlj8c: /tmp/tmpwa1wlj8c.cpp:18: int main(): Assertion `candidate((3),\
    \ (4), (5)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    long ab = abs(b - a);\n    long ac = abs(c - a);\n\
    \    long bc = abs(b - c);\n    long acb = abs(ac - bc);\n    long abc = abs(ab\
    \ - bc);\n    long abbc = abs(ab - bc);\n    long abac = abs(ab - ac);\n    long\
    \ abcab = abs(ab - ac);\n    long abcabc = abs(ab - ac);\n    long abcabcb = abs(ab\
    \ - ac);\n    long abcabcba = abs(ab - ac);\n    long abcabcbb = abs(ab - ac);\n\
    \    long abcabcbbc = abs(ab - ac);\n    long abcabcbbca = abs(ab - ac);\n   \
    \ long abcabcbbcba = abs(ab - ac);\n    long abcabcbbcbac = abs(ab - ac);\n  \
    \  long abcabcbbcbaca = abs(ab - ac);\n    long abcabcbbcbacab = abs(ab - ac);\n\
    \    long abcabcbbcbacabc = abs(ab - ac);\n    long abcabcbbcbacabcb = abs(ab\
    \ - ac);\n    long abcabcbbcbacabcbc = abs(ab - ac);\n    long abcabcbbcbacabcbca\
    \ = abs(ab - ac);\n    long abcabcbbcbacabcbcba = abs(ab - ac);\n    long abcabcbbcbacabcbcbac\
    \ = abs(ab - ac);\n    long abcabcbbcbacabcbcbaca = abs(ab - ac);\n    long abcabcbbcbacabcbcbacab\
    \ = abs(ab - ac);\n    long abcabcbbcbacabcbcbacabc = abs(ab - ac);\n    long\
    \ abcabcbbcbacabcbcbacabcb = abs(ab - ac);\n    long abcabcbbcbacabcbcbacabcbc\
    \ = abs(ab - ac);\n    long abcabcbbcbacabcbcbacabcbca = abs(ab - ac);\n    long\
    \ abcabcbbcbacabcbcbacabcbcba = abs(ab - ac);\n    long abcabcbbcbacabcbcbacabcbcbac\
    \ = abs(ab - ac);\n    long abcabcbbcbacabcbcbacabcbcbaca = abs(\n}\nint main()\
    \ {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4),\
    \ (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpd2xkchrw.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmpd2xkchrw.cpp:44:1: error: expected\
    \ primary-expression before \u2018}\u2019 token\n   44 | }\n      | ^\n/tmp/tmpd2xkchrw.cpp:44:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    // Write your code here\n    long side1 = abs(a) +\
    \ abs(b) + abs(c);\n    long side2 = abs(a) + abs(b) - abs(c);\n    long side3\
    \ = abs(a) - abs(b) - abs(c);\n    if (side1 == side2 && side2 == side3) {\n \
    \       return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n \
    \   assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10), (6),\
    \ (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7),\
    \ (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n\
    \    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpygt8vkf8: /tmp/tmpygt8vkf8.cpp:22: int main(): Assertion `candidate((3),\
    \ (4), (5)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    long long int a1 = (a + b + c) / 2;\n    long long\
    \ int b1 = (a + b) / 2;\n    long long int c1 = (a + b) / 2;\n    long long int\
    \ a2 = (a1 + b1 + c1) / 2;\n    long long int b2 = (a1 + b1) / 2;\n    long long\
    \ int c2 = (a1 + b1) / 2;\n    long long int a3 = (b1 + c1 + a2) / 2;\n    long\
    \ long int b3 = (b1 + c1) / 2;\n    long long int c3 = (b1 + c1) / 2;\n    long\
    \ long int a4 = (c1 + a2 + a3) / 2;\n    long long int b4 = (c1 + a2) / 2;\n \
    \   long long int c5 = (c1 + a2) / 2;\n    long long int a5 = (a2 + b2 + c5) /\
    \ 2;\n    long long int b5 = (a2 + b2) / 2;\n    long long int c5 = (a2 + b2)\
    \ / 2;\n    long long int a6 = (a3 + b3 + c6) / 2;\n    long long int b6 = (a3\
    \ + b3) / 2;\n    long long int c6 = (a3 + b3) / 2;\n    long long int a7 = (b3\
    \ + c3 + a7) / 2;\n    long long int b7 = (b3 + c3) / 2;\n    long long int c7\
    \ = (b3 + c3) / 2;\n    long long int a8 = (c4 + a4 + a8) / 2;\n    long long\
    \ int b8 = (c4 + a4) / 2;\n    long long int c8 = (c4 + a4) / 2;\n    long long\
    \ int a9 = (c5 + b5 + c9) / 2;\n    long long int b9 = (c5 + b5) / 2;\n    long\
    \ long int c9 = (c5 + b5) / 2;\n    long long int a10 = (a6 + b6 + c10) / 2;\n\
    \    long long int b10 = (a6 + b6) / 2;\n    long long int c10 = (a6 + b6) / 2;\n\
    \    long long int a11 = (a7 + b7 + c11) / 2;\n    long long int b11 = (a7 + b7)\
    \ / 2;\n    long long int c11 = (a7 + b7) / 2;\n    long long int a12 = (a8 +\
    \ b8 + c12) / 2;\n    long long int b12 = (a8 + b8) / 2;\n    long long int c12\
    \ = (a8 + b8) / 2;\n    long long int a13 = (a9 + b9 + c13) / 2;\n    long long\
    \ int b13 = (a9 + b9) / 2;\n    long long int c13 = (a9 + b9) / 2;\n    long long\
    \ int \n}\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpibq6k4mq.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmpibq6k4mq.cpp:25:19: error: redeclaration\
    \ of \u2018long long int c5\u2019\n   25 |     long long int c5 = (a2 + b2) /\
    \ 2;\n      |                   ^~\n/tmp/tmpibq6k4mq.cpp:22:19: note: \u2018long\
    \ long int c5\u2019 previously declared here\n   22 |     long long int c5 = (c1\
    \ + a2) / 2;\n      |                   ^~\n/tmp/tmpibq6k4mq.cpp:26:35: error:\
    \ \u2018c6\u2019 was not declared in this scope; did you mean \u2018a6\u2019?\n\
    \   26 |     long long int a6 = (a3 + b3 + c6) / 2;\n      |                 \
    \                  ^~\n      |                                   a6\n/tmp/tmpibq6k4mq.cpp:32:25:\
    \ error: \u2018c4\u2019 was not declared in this scope; did you mean \u2018c7\u2019\
    ?\n   32 |     long long int a8 = (c4 + a4 + a8) / 2;\n      |               \
    \          ^~\n      |                         c7\n/tmp/tmpibq6k4mq.cpp:35:35:\
    \ error: \u2018c9\u2019 was not declared in this scope; did you mean \u2018a9\u2019\
    ?\n   35 |     long long int a9 = (c5 + b5 + c9) / 2;\n      |               \
    \                    ^~\n      |                                   a9\n/tmp/tmpibq6k4mq.cpp:38:36:\
    \ error: \u2018c10\u2019 was not declared in this scope; did you mean \u2018a10\u2019\
    ?\n   38 |     long long int a10 = (a6 + b6 + c10) / 2;\n      |             \
    \                       ^~~\n      |                                    a10\n\
    /tmp/tmpibq6k4mq.cpp:41:36: error: \u2018c11\u2019 was not declared in this scope;\
    \ did you mean \u2018a11\u2019?\n   41 |     long long int a11 = (a7 + b7 + c11)\
    \ / 2;\n      |                                    ^~~\n      |              \
    \                      a11\n/tmp/tmpibq6k4mq.cpp:44:36: error: \u2018c12\u2019\
    \ was not declared in this scope; did you mean \u2018a12\u2019?\n   44 |     long\
    \ long int a12 = (a8 + b8 + c12) / 2;\n      |                               \
    \     ^~~\n      |                                    a12\n/tmp/tmpibq6k4mq.cpp:47:36:\
    \ error: \u2018c13\u2019 was not declared in this scope; did you mean \u2018a13\u2019\
    ?\n   47 |     long long int a13 = (a9 + b9 + c13) / 2;\n      |             \
    \                       ^~~\n      |                                    a13\n\
    /tmp/tmpibq6k4mq.cpp"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    // Write your code here\n    if(a>b+c){\n        return\
    \ false;\n    }\n    if(a>c+b){\n        return false;\n    }\n    if(a>b+c){\n\
    \        return false;\n    }\n    if(a>c+b){\n        return false;\n    }\n\
    \    if(a>b+c){\n        return false;\n    }\n    if(a>c+b){\n        return\
    \ false;\n    }\n    if(a>b+c){\n        return false;\n    }\n    if(a>c+b){\n\
    \        return false;\n    }\n    if(a>b+c){\n        return false;\n    }\n\
    \    if(a>c+b){\n        return false;\n    }\n    if(a>b+c){\n        return\
    \ false;\n    }\n    if(a>c+b){\n        return false;\n    }\n    if(a>b+c){\n\
    \        return false;\n    }\n    if(a>c+b){\n        return false;\n    }\n\
    \    if(a>b+c){\n        return false;\n    }\n    if(a>c+b){\n        return\
    \ false;\n    }\n    if(a>b+c){\n        return false;\n    }\n    if(a>c+b){\n\
    \        return false;\n    }\n    if(a>b+c){\n        return false;\n    }\n\
    \    if(a>c+b){\n        return false;\n    }\n    if(a>b+c){\n        return\
    \ false;\n    }\n    if(a>c+b){\n        return false;\n    }\n    if(a>b+c){\n\
    \        return false;\n    }\n    if(a>c+b){\n        return false;\n    }\n\
    \    if(a>b+c){\n        return false;\n    }\n    if(a>c+b){\n        return\
    \ false;\n    }\n    if(a>b+c){\n        return false;\n    }\n    if(a>c+b){\n\
    \        return false;\n    }\n    if(a>b+c){\n        return false;\n    }\n\
    \    if(a>c+b){\n        return false;\n    }\n    if(a>b+c){\n        return\
    \ false;\n    }\n    if(a>c+b){\n        return false;\n    }\n    if(a>b+c){\n\
    \        return false;\n    }\n    if(a>c+b){\n        return false;\n    }\n\
    \    if(a>b+c){\n        return false;\n    }\n    if(a>c+b){\n        return\
    \ false;\n    }\n    if(a>b+c){\n        return false;\n    }\n    if(a>c+b){\n\
    \        return false;\n    }\n    if(a>b+c){\n        return false;\n    }\n\
    \    if(a>c+b){\n        return false;\n    }\n    if(a>b+c){\n        return\
    \ false;\n    }\n    if(a>c+b){\n        return false;\n    }\n    if(a>\n}\n\
    int main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1qne012_.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmp1qne012_.cpp:139:1: error: expected\
    \ primary-expression before \u2018}\u2019 token\n  139 | }\n      | ^\n/tmp/tmp1qne012_.cpp:138:10:\
    \ error: expected \u2018)\u2019 before \u2018}\u2019 token\n  138 |     if(a>\n\
    \      |       ~  ^\n      |          )\n  139 | }\n      | ~         \n/tmp/tmp1qne012_.cpp:139:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n  139 | }\n \
    \     | ^\n/tmp/tmp1qne012_.cpp:139:1: warning: control reaches end of non-void\
    \ function [-Wreturn-type]\n  139 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    if(a>b+c) return false;\n    if(a>c+b) return false;\n\
    \    if(b>c+a) return false;\n    if(a==b==c) return true;\n    if(a==c) return\
    \ true;\n    if(b==c) return true;\n    if(a>b) std::swap(a,b);\n    if(a>c) std::swap(a,c);\n\
    \    if(b>c) std::swap(b,c);\n    long long ans = (a+b+c)/2;\n    if(a>b) std::swap(a,b);\n\
    \    if(a>c) std::swap(a,c);\n    if(b>c) std::swap(b,c);\n    ans = (a+b+c)/2;\n\
    \    if(a>b) std::swap(a,b);\n    if(a>c) std::swap(a,c);\n    if(b>c) std::swap(b,c);\n\
    \    ans = (a+b+c)/2;\n    if(a>b) std::swap(a,b);\n    if(a>c) std::swap(a,c);\n\
    \    if(b>c) std::swap(b,c);\n    ans = (a+b+c)/2;\n    if(a>b) std::swap(a,b);\n\
    \    if(a>c) std::swap(a,c);\n    if(b>c) std::swap(b,c);\n    ans = (a+b+c)/2;\n\
    \    if(a>b) std::swap(a,b);\n    if(a>c) std::swap(a,c);\n    if(b>c) std::swap(b,c);\n\
    \    ans = (a+b+c)/2;\n    if(a>b) std::swap(a,b);\n    if(a>c) std::swap(a,c);\n\
    \    if(b>c) std::swap(b,c);\n    ans = (a+b+c)/2;\n    if(a>b) std::swap(a,b);\n\
    \    if(a>c) std::swap(a,c);\n    if(b>c) std::swap(b,c);\n    ans = (a+b+c)/2;\n\
    \    if(a>b) std::swap(a,b);\n    if(a>c) std::swap(a,c);\n    if(b>c) std::swap(b,c);\n\
    \    ans = (a+b+c)/2;\n    if(a>b) std::swap(a,b);\n    if(a>c) std::swap(a,c);\n\
    \    if(b>c) std::swap(b,c);\n    ans = (a+b+c)/2;\n    if(a>b) std::swap(a,b);\n\
    \    if(a>c) std::swap(a,c);\n    if(b>c) std::swap(b,c);\n    ans = (a+b+c)/2;\n\
    \    if\n}\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3blu9yon.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmp3blu9yon.cpp:62:1: error: expected\
    \ \u2018(\u2019 before \u2018}\u2019 token\n   62 | }\n      | ^\n      | (\n\
    /tmp/tmp3blu9yon.cpp:62:1: warning: control reaches end of non-void function [-Wreturn-type]\n\
    \   62 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    long long ans = (a * b * c) / 2;\n    long long sum\
    \ = a * b + c;\n    long long sq = sum * sum;\n    long long sq1 = sq - ans;\n\
    \    long long sq2 = sq + ans;\n    long long sq3 = sq + sq;\n    long long sq4\
    \ = sq3 - ans;\n    long long sq5 = sq3 + ans;\n    long long sq6 = sq3 + sq;\n\
    \    long long sq7 = sq5 - ans;\n    long long sq8 = sq5 + ans;\n    long long\
    \ sq9 = sq5 + sq;\n    long long sq10 = sq9 - ans;\n    long long sq11 = sq9 +\
    \ ans;\n    long long sq12 = sq9 + sq;\n    long long sq13 = sq11 - ans;\n   \
    \ long long sq14 = sq11 + ans;\n    long long sq15 = sq11 + sq;\n    long long\
    \ sq16 = sq13 - ans;\n    long long sq17 = sq13 + ans;\n    long long sq18 = sq13\
    \ + sq;\n    long long sq19 = sq16 - ans;\n    long long sq20 = sq16 + ans;\n\
    \    long long sq21 = sq16 + sq;\n    long long sq22 = sq20 - ans;\n    long long\
    \ sq23 = sq20 + ans;\n    long long sq24 = sq20 + sq;\n    long long sq25 = sq22\
    \ - ans;\n    long long sq26 = sq22 + ans;\n    long long sq27 = sq22 + sq;\n\
    \    long long sq28 = sq24 - ans;\n    long long sq29 = sq24 + ans;\n    long\
    \ long sq30 = sq24 + sq;\n    long long sq31 = sq25 - ans;\n    long long sq32\
    \ = sq25 + ans;\n    long long sq33 = sq25 + sq;\n    long long sq34 = sq26 -\
    \ ans;\n    long long sq35 = sq26 + ans;\n    long long sq36 = sq26 + sq;\n  \
    \  long long sq37 = sq28 - ans;\n    long long sq38 = sq28 + ans;\n    long long\
    \ sq39 = sq28 + sq;\n    long long sq40 = sq29 - ans;\n    long long sq41 = sq29\
    \ + ans;\n    long long sq42 = sq\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpzuxaqo9v.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmpzuxaqo9v.cpp:56:1: error: expected\
    \ \u2018,\u2019 or \u2018;\u2019 before \u2018}\u2019 token\n   56 | }\n     \
    \ | ^\n/tmp/tmpzuxaqo9v.cpp:56:1: warning: no return statement in function returning\
    \ non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    // Write your code here\n    if(a==b&&b==c){\n   \
    \     return true;\n    }\n    if(a==b||a==c||b==c){\n        return false;\n\
    \    }\n    long d=(a+b+c)/2;\n    if(a==d){\n        return true;\n    }\n  \
    \  if(b==d){\n        return true;\n    }\n    if(c==d){\n        return true;\n\
    \    }\n    return false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpk_z7ljr_: /tmp/tmpk_z7ljr_.cpp:32: int main(): Assertion `candidate((3),\
    \ (4), (5)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    long d = b * b - 4 * a * c;\n    if (d < 0) {\n  \
    \      return false;\n    }\n    long x = (b + d) / (2 * a);\n    long y = (-b\
    \ - d) / (2 * a);\n    return ((x * (x * x + 1)) == ((y * (y * y + 1)) + 1));\n\
    }\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  stdout: ''
  stderr: "tmprw7jd7fg: /tmp/tmprw7jd7fg.cpp:21: int main(): Assertion `candidate((3),\
    \ (4), (5)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    long long ans = (a * b * c) / 2;\n    long long sum\
    \ = (a + b + c) / 2;\n    long long sq = sum * sum;\n    long long sq1 = sq;\n\
    \    long long sq2 = sq;\n    long long sq3 = sq;\n    long long sq4 = sq;\n \
    \   long long sq5 = sq;\n    long long sq6 = sq;\n    long long sq7 = sq;\n  \
    \  long long sq8 = sq;\n    long long sq9 = sq;\n    long long sq10 = sq;\n  \
    \  long long sq11 = sq;\n    long long sq12 = sq;\n    long long sq13 = sq;\n\
    \    long long sq14 = sq;\n    long long sq15 = sq;\n    long long sq16 = sq;\n\
    \    long long sq17 = sq;\n    long long sq18 = sq;\n    long long sq19 = sq;\n\
    \    long long sq20 = sq;\n    long long sq21 = sq;\n    long long sq22 = sq;\n\
    \    long long sq23 = sq;\n    long long sq24 = sq;\n    long long sq25 = sq;\n\
    \    long long sq26 = sq;\n    long long sq27 = sq;\n    long long sq28 = sq;\n\
    \    long long sq29 = sq;\n    long long sq30 = sq;\n    long long sq31 = sq;\n\
    \    long long sq32 = sq;\n    long long sq33 = sq;\n    long long sq34 = sq;\n\
    \    long long sq35 = sq;\n    long long sq36 = sq;\n    long long sq37 = sq;\n\
    \    long long sq38 = sq;\n    long long sq39 = sq;\n    long long sq40 = sq;\n\
    \    long long sq41 = sq;\n    long long sq42 = sq;\n    long long sq43 = sq;\n\
    \    long long sq44 = sq;\n    long long sq45 = sq;\n    long long sq46 = sq;\n\
    \    long long sq47 = sq;\n    long long sq48 = sq;\n    long long sq49 = sq;\n\
    \    long long sq50 = sq;\n    long long sq51 = sq;\n    long long sq52 = sq;\n\
    \    long long sq53 = sq;\n    long long sq54 = sq;\n    long long sq\n}\nint\
    \ main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp39syih3w.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmp39syih3w.cpp:69:1: error: expected\
    \ initializer before \u2018}\u2019 token\n   69 | }\n      | ^\n/tmp/tmp39syih3w.cpp:69:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    long ab = abs(b - a);\n    long ac = abs(c - a);\n\
    \    long bc = abs(b - c);\n    long cb = abs(c - b);\n    if (ab > ac && ab >\
    \ bc) {\n        return true;\n    }\n    return false;\n}\nint main() {\n   \
    \ auto candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5))\
    \ == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpmt6wp32r: /tmp/tmpmt6wp32r.cpp:22: int main(): Assertion `candidate((3),\
    \ (4), (5)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    // Write your code here\n    long long ans = (a *\
    \ b * c) - (a * c * b) - (b * a * c);\n    return ans == 0;\n}\nint main() {\n\
    \    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5))\
    \ == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpq3d51ccx: /tmp/tmpq3d51ccx.cpp:17: int main(): Assertion `candidate((3),\
    \ (4), (5)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    long d = b * b - 4 * a * c;\n    if (d < 0) {\n  \
    \      return false;\n    }\n    long e = std::sqrt(d);\n    long f = std::sqrt(b\
    \ * b - 4 * a * c);\n    long g = std::sqrt(b * b + 4 * a * c);\n    long h =\
    \ std::sqrt(b * b + 4 * a * c);\n    long i = (b * b + 4 * a * c) / 2;\n    long\
    \ j = (b * b - 4 * a * c) / 2;\n    long k = ((b * b + 4 * a * c) / 2) - 1;\n\
    \    long l = ((b * b - 4 * a * c) / 2) - 1;\n    long m = ((b * b + 4 * a * c)\
    \ / 2) + 1;\n    long n = ((b * b - 4 * a * c) / 2) + 1;\n    long o = ((b * b\
    \ + 4 * a * c) / 2) - 1;\n    long p = ((b * b - 4 * a * c) / 2) - 1;\n    long\
    \ q = ((b * b + 4 * a * c) / 2) + 1;\n    long r = ((b * b - 4 * a * c) / 2) +\
    \ 1;\n    long s = b * b + 4 * a * c;\n    long t = b * b - 4 * a * c;\n    long\
    \ u = a * a + 4 * a * c;\n    long v = a * a - 4 * a * c;\n    long w = a * a\
    \ + 4 * a * c;\n    long x = a * a - 4 * a * c;\n    long y = a * a + 4 * a *\
    \ c;\n    long z = a * a - 4 * a * c;\n    long A = a * a + 4 * a * c;\n    long\
    \ B = a * a + 4 * a * c;\n    long C = a * a - 4 * a * c;\n    long D = a * a\
    \ - 4 * a * c;\n    long E = a * a + 4 * a * c;\n    long F = a * a - 4 * a *\
    \ c;\n    long G = a * a - 4 * a * c;\n    long H = a * a + 4 * a * c;\n    long\
    \ I = a * a - 4 * a * c;\n    long J = a * a + 4 * a * c;\n    long K = a * a\
    \ - 4 * a * c;\n    long L = a * a - 4 * a * c;\n    long M = a * a + 4 * a *\
    \ c;\n    long N = a * a - 4 * a * c;\n    long O = a * a + 4 * a * c;\n    long\
    \ P = a * a - 4 * a * c;\n    long Q = a * a + 4 * a * c;\n    long R = a * a\
    \ - 4 * a * c;\n    long S = a * a + 4 * a * c;\n    long \n}\nint main() {\n\
    \    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5))\
    \ == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpg4mx3mgf.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmpg4mx3mgf.cpp:57:1: error: expected\
    \ unqualified-id before \u2018}\u2019 token\n   57 | }\n      | ^\n/tmp/tmpg4mx3mgf.cpp:57:1:\
    \ warning: control reaches end of non-void function [-Wreturn-type]\n   57 | }\n\
    \      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    // Write your code here\n    long long int ans = (a*a\
    \ + b*b - c*c)/2;\n    return ans == 0;\n}\nint main() {\n    auto candidate =\
    \ right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n   \
    \ assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10), (6),\
    \ (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7),\
    \ (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n\
    \    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpkeige2t9: /tmp/tmpkeige2t9.cpp:19: int main(): Assertion `candidate((10),\
    \ (6), (8)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    long d = b * b - 4 * a * c;\n    if (d < 0) {\n  \
    \      return false;\n    }\n    long e = std::sqrt(d);\n    long f = (b + e *\
    \ 0.5) / a;\n    long g = (b - e * 0.5) / a;\n    return ((f < 0 && g > 0) ||\
    \ (f > 0 && g < 0));\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpgvmbc_ws: /tmp/tmpgvmbc_ws.cpp:22: int main(): Assertion `candidate((3),\
    \ (4), (5)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    // Write your code here\n    long long ans = (a *\
    \ b * c) - (a * c * b) - (b * a * c);\n    ans = ans % 10;\n    return ans ==\
    \ 0;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpmmaxq9jd: /tmp/tmpmmaxq9jd.cpp:23: int main(): Assertion `candidate((10),\
    \ (5), (7)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    if (a == 0 && b == 0 && c == 0) return true;\n   \
    \ if (a == 0 || b == 0 || c == 0) return false;\n    if (a + b > c || a + c >\
    \ b || b + c > a) return false; // Triangle is NOT right-angled.\n    long d =\
    \ b * b - 4 * a * c;\n    if (d < 0) return false;\n    long x = (b * b + 4 *\
    \ a * c) / d;\n    long y = (-b + sqrt(d)) / (2 * a);\n    if (x == y) return\
    \ true;\n    return false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpf4r3r7o_: /tmp/tmpf4r3r7o_.cpp:23: int main(): Assertion `candidate((3),\
    \ (4), (5)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    if (a < 0 || b < 0 || c < 0) {\n        return false;\n\
    \    }\n    if (a + b > c || a + c > b || b + c > a) {\n        return false;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpujv_449e: /tmp/tmpujv_449e.cpp:21: int main(): Assertion `candidate((3),\
    \ (4), (5)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    // Write your code here\n    long long ans = (a*a\
    \ + b*b - c*c)/2;\n    if (ans == 0)\n        return false;\n    long long sq1\
    \ = ((b*b) - (a*a));\n    long long sq2 = ((c*c) - (a*a));\n    long long sq3\
    \ = ((b*b) - (c*c));\n    long long sq4 = ((c*c) - (b*b));\n    long long sq5\
    \ = ((b*b) - (c*c));\n    long long sq6 = ((c*c) - (a*a));\n    long long sq7\
    \ = ((c*c) - (b*b));\n    long long sq8 = ((b*b) - (a*a));\n    long long sq9\
    \ = ((c*c) - (a*a));\n    long long sq10 = ((c*c) - (b*b));\n    long long sq11\
    \ = ((b*b) - (c*c));\n    long long sq12 = ((c*c) - (a*a));\n    long long sq13\
    \ = ((c*c) - (b*b));\n    long long sq14 = ((b*b) - (c*c));\n    long long sq15\
    \ = ((c*c) - (a*a));\n    long long sq16 = ((c*c) - (b*b));\n    long long sq17\
    \ = ((b*b) - (c*c));\n    long long sq18 = ((c*c) - (a*a));\n    long long sq19\
    \ = ((c*c) - (b*b));\n    long long sq20 = ((b*b) - (c*c));\n    long long sq21\
    \ = ((c*c) - (a*a));\n    long long sq22 = ((c*c) - (b*b));\n    long long sq23\
    \ = ((b*b) - (c*c));\n    long long sq24 = ((c*c) - (a*a));\n    long long sq25\
    \ = ((c*c) - (b*b));\n    long long sq26 = ((b*b) - (c*c));\n    long long sq27\
    \ = ((c*c) - (a*a));\n    long long sq28 = ((c*c) - (b*b));\n    long long sq29\
    \ = ((b*b) - (c*c));\n    long long sq30 = ((c*c) - (a*a));\n    long long sq31\
    \ = ((c*c) - (b*b));\n    long long sq32 = ((b*b) - (c*c));\n    long long sq33\
    \ = ((c*c) - (a*a));\n    long long sq34 = ((c*c) - (b*b));\n    long long sq35\
    \ = ((b*\n}\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6_7ygbwa.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmp6_7ygbwa.cpp:50:1: error: expected\
    \ primary-expression before \u2018}\u2019 token\n   50 | }\n      | ^\n/tmp/tmp6_7ygbwa.cpp:49:26:\
    \ error: expected \u2018)\u2019 before \u2018}\u2019 token\n   49 |     long long\
    \ sq35 = ((b*\n      |                       ~  ^\n      |                   \
    \       )\n   50 | }\n      | ~                         \n/tmp/tmp6_7ygbwa.cpp:49:26:\
    \ error: expected \u2018)\u2019 before \u2018}\u2019 token\n   49 |     long long\
    \ sq35 = ((b*\n      |                      ~   ^\n      |                   \
    \       )\n   50 | }\n      | ~                         \n/tmp/tmp6_7ygbwa.cpp:50:1:\
    \ warning: control reaches end of non-void function [-Wreturn-type]\n   50 | }\n\
    \      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    long long int a1 = abs(a), b1 = abs(b), c1 = abs(c);\n\
    \    long long int a2 = a1 + b1, c2 = a1 + c1, b2 = b1 + c1;\n    long long int\
    \ a3 = a1 + b2, b3 = a1 + c2, c3 = b1 + c2;\n    long long int a4 = a2 + b2, b4\
    \ = a2 + c2, c4 = b2 + c2;\n    long long int a5 = a2 + b3, b5 = a2 + c3, c5 =\
    \ b2 + c3;\n    long long int a6 = a3 + b3, b6 = a3 + c3, c6 = b3 + c3;\n    long\
    \ long int a7 = a3 + b4, b7 = a3 + c4, c7 = b3 + c4;\n    long long int a8 = a4\
    \ + b4, b8 = a4 + c4, c8 = b4 + c4;\n    long long int a9 = a4 + b5, b9 = a4 +\
    \ c5, c9 = b5 + c5;\n    long long int a10 = a5 + b5, b10 = a5 + c5, c10 = b5\
    \ + c5;\n    long long int a11 = a5 + b6, b11 = a5 + c6, c11 = b6 + c6;\n    long\
    \ long int a12 = a6 + b6, b12 = a6 + c6, c12 = b6 + c6;\n    long long int a13\
    \ = a6 + b7, b13 = a6 + c7, c13 = b7 + c7;\n    long long int a14 = a7 + b7, b14\
    \ = a7 + c7, c14 = b7 + c7;\n    long long int a15 = a7 + b8, b15 = a7 + c8, c15\
    \ = b8 + c8;\n    long long int a16 = a8 + b8, b16 = a8 + c8, c16 = b8 + c8;\n\
    \    long long int a17 = a8 + b9, b17 = a8 + c9, c17 = b9 + c9;\n    long long\
    \ int a18 = a9 + b9, b18 = a9 + c9, c18 = b9 + c9;\n    long long int a19 = a9\
    \ + b10, b19 = a9 + c10, c19 = b10 + c10;\n    long long int a20 = a10 + b10,\
    \ b20 = a10 + c10, c20 = b10 + c10;\n    long long int a21 = a10 + b11, b21 =\
    \ a10 + c11, c21 = b11 + c11;\n    long long int \n}\nint main() {\n    auto candidate\
    \ = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n \
    \   assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10), (6),\
    \ (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7),\
    \ (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n\
    \    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpmxleih02.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmpmxleih02.cpp:33:1: error: expected\
    \ unqualified-id before \u2018}\u2019 token\n   33 | }\n      | ^\n/tmp/tmpmxleih02.cpp:33:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    if (a == 0 || b == 0 || c == 0)\n        return false;\n\
    \    long d = b * b - 4 * a * c;\n    if (d < 0)\n        return false;\n    long\
    \ x = (long) sqrt(d);\n    long y = (long) (-b + x) / (2 * a);\n    if (x == y)\n\
    \        return true;\n    return false;\n}\nint main() {\n    auto candidate\
    \ = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n \
    \   assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10), (6),\
    \ (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7),\
    \ (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n\
    \    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  stdout: ''
  stderr: "tmp010qg8oi: /tmp/tmp010qg8oi.cpp:24: int main(): Assertion `candidate((3),\
    \ (4), (5)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    // Write your code here\n    long long int a1 = (a\
    \ + b + c) / 2;\n    long long int b1 = (a + b) / 2;\n    long long int c1 = (a\
    \ + b) / 2;\n    long long int a2 = (a1 + b1 + c1) / 2;\n    long long int b2\
    \ = (a1 + b1) / 2;\n    long long int c2 = (a1 + b1) / 2;\n    long long int a3\
    \ = (b1 + c1 + a2) / 2;\n    long long int b3 = (b1 + c1) / 2;\n    long long\
    \ int c3 = (b1 + c1) / 2;\n    long long int a4 = (c1 + a2 + a3) / 2;\n    long\
    \ long int b4 = (c1 + a2) / 2;\n    long long int c4 = (c1 + a2) / 2;\n    long\
    \ long int a5 = (b2 + c3 + a4) / 2;\n    long long int b5 = (b2 + c3) / 2;\n \
    \   long long int c5 = (b2 + c3) / 2;\n    long long int a6 = (c2 + a4 + a5) /\
    \ 2;\n    long long int b6 = (c2 + a4) / 2;\n    long long int c6 = (c2 + a4)\
    \ / 2;\n    long long int a7 = (b3 + c5 + a6) / 2;\n    long long int b7 = (b3\
    \ + c5) / 2;\n    long long int c7 = (b3 + c5) / 2;\n    long long int a8 = (c4\
    \ + a6 + a7) / 2;\n    long long int b8 = (c4 + a6) / 2;\n    long long int c8\
    \ = (c4 + a6) / 2;\n    long long int a9 = (b5 + c7 + a8) / 2;\n    long long\
    \ int b9 = (b5 + c7) / 2;\n    long long int c9 = (b5 + c7) / 2;\n    long long\
    \ int a10 = (b6 + c8 + a9) / 2;\n    long long int b10 = (b6 + c8) / 2;\n    long\
    \ long int c10 = (b6 + c8) / 2;\n    long long int a11 = (b7 + c9 + a10) / 2;\n\
    \    long long int b11 = (b7 + c9) / 2;\n    long long int c11 = (b7 + c9) / 2;\n\
    \    long long int a12 = (b8 + c10 + a11) / 2;\n    long long int b12 = (b8 +\
    \ c10) / 2;\n    long long int c12 = (b8 + c10) / 2;\n    long long int a13 =\
    \ (b9 + c11 + a12) / 2;\n    long long int b13 = (b9 + c11) / 2;\n    long long\
    \ int c13 = (b9 + \n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmp4vf9tqpg.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmp4vf9tqpg.cpp:51:1: error: expected\
    \ primary-expression before \u2018}\u2019 token\n   51 | }\n      | ^\n/tmp/tmp4vf9tqpg.cpp:50:30:\
    \ error: expected \u2018)\u2019 before \u2018}\u2019 token\n   50 |     long long\
    \ int c13 = (b9 +\n      |                         ~    ^\n      |           \
    \                   )\n   51 | }\n      | ~                             \n/tmp/tmp4vf9tqpg.cpp:51:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   51 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    // Write your code here\n    long sum = a+b+c;\n \
    \   long sq = sum*sum;\n    long sq1 = sq*sq;\n    long sq2 = sq*sq1;\n    long\
    \ sq3 = sq*sq2;\n    long sq4 = sq*sq3;\n    long sq5 = sq*sq4;\n    long sq6\
    \ = sq*sq5;\n    long sq7 = sq*sq6;\n    long sq8 = sq*sq7;\n    long sq9 = sq*sq8;\n\
    \    long sq10 = sq*sq9;\n    long sq11 = sq*sq10;\n    long sq12 = sq*sq11;\n\
    \    long sq13 = sq*sq12;\n    long sq14 = sq*sq13;\n    long sq15 = sq*sq14;\n\
    \    long sq16 = sq*sq15;\n    long sq17 = sq*sq16;\n    long sq18 = sq*sq17;\n\
    \    long sq19 = sq*sq18;\n    long sq20 = sq*sq19;\n    long sq21 = sq*sq20;\n\
    \    long sq22 = sq*sq21;\n    long sq23 = sq*sq22;\n    long sq24 = sq*sq23;\n\
    \    long sq25 = sq*sq24;\n    long sq26 = sq*sq25;\n    long sq27 = sq*sq26;\n\
    \    long sq28 = sq*sq27;\n    long sq29 = sq*sq28;\n    long sq30 = sq*sq29;\n\
    \    long sq31 = sq*sq30;\n    long sq32 = sq*sq31;\n    long sq33 = sq*sq32;\n\
    \    long sq34 = sq*sq33;\n    long sq35 = sq*sq34;\n    long sq36 = sq*sq35;\n\
    \    long sq37 = sq*sq36;\n    long sq38 = sq*sq37;\n    long sq39 = sq*sq38;\n\
    \    long sq40 = sq*sq39;\n    long sq41 = sq*sq40;\n    long sq42 = sq*sq41;\n\
    \    long sq43 = sq*sq42;\n    long sq44 = sq*sq43;\n    long sq45 = sq*sq44;\n\
    \    long sq46 = sq*sq45;\n    long sq47 = sq*sq46;\n    long sq48\n}\nint main()\
    \ {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4),\
    \ (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpy8dutiw0.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmpy8dutiw0.cpp:62:1: error: expected\
    \ initializer before \u2018}\u2019 token\n   62 | }\n      | ^\n/tmp/tmpy8dutiw0.cpp:62:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    long long a1 = (a + b + c) / 2;\n    long long b1\
    \ = (a + b) / 2;\n    long long c1 = (a + b) / 2;\n    long long a2 = (a1 + b1\
    \ + c1) / 2;\n    long long b2 = (a1 + b1) / 2;\n    long long c2 = (a1 + b1)\
    \ / 2;\n    long long a3 = (b1 + c1 + a2) / 2;\n    long long b3 = (b1 + c1) /\
    \ 2;\n    long long c3 = (b1 + c1) / 2;\n    long long a4 = (b2 + c2 + a3) / 2;\n\
    \    long long b4 = (b2 + c2) / 2;\n    long long c4 = (b2 + c2) / 2;\n    long\
    \ long a5 = (c2 + a3 + a4) / 2;\n    long long b5 = (c2 + a3) / 2;\n    long long\
    \ c5 = (c2 + a3) / 2;\n    long long a6 = (c3 + a4 + a5) / 2;\n    long long b6\
    \ = (c3 + a4) / 2;\n    long long c6 = (c3 + a4) / 2;\n    long long a7 = (c4\
    \ + a5 + a6) / 2;\n    long long b7 = (c4 + a5) / 2;\n    long long c7 = (c4 +\
    \ a5) / 2;\n    long long a8 = (c5 + a6 + a7) / 2;\n    long long b8 = (c5 + a6)\
    \ / 2;\n    long long c8 = (c5 + a6) / 2;\n    long long a9 = (c6 + a7 + a8) /\
    \ 2;\n    long long b9 = (c6 + a7) / 2;\n    long long c9 = (c6 + a7) / 2;\n \
    \   long long a10 = (c7 + a8 + a9) / 2;\n    long long b10 = (c7 + a8) / 2;\n\
    \    long long c10 = (c7 + a8) / 2;\n    long long a11 = (c8 + a9 + a10) / 2;\n\
    \    long long b11 = (c8 + a9) / 2;\n    long long c11 = (c8 + a9) / 2;\n    long\
    \ long a12 = (c9 + a10 + a11) / 2;\n    long long b12 = (c9 + a10) / 2;\n    long\
    \ long c12 = (c9 + a10) / 2;\n    long long a13 = (c10 + a11 + a12) / 2;\n   \
    \ long long b13 = (c10 + a11) / 2;\n    long long c13 = (c10 + a11) / 2;\n   \
    \ long long a14 = (c11 + a12 + a13) / 2;\n    long long b14 = (c11 + a12) / 2;\n\
    \    long long c14 = (c11 + a12) / 2;\n    long long a\n}\nint main() {\n    auto\
    \ candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n\
    \    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpc8cqnecl.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmpc8cqnecl.cpp:54:1: error: expected\
    \ initializer before \u2018}\u2019 token\n   54 | }\n      | ^\n/tmp/tmpc8cqnecl.cpp:54:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    long long int ab = abs(b - a);\n    long long int\
    \ ac = abs(c - a);\n    long long int bc = abs(b - c);\n    long long int bd =\
    \ abs(d - b);\n    long long int cd = abs(d - c);\n    long long int abc = ab\
    \ + ac;\n    long long int bcd = bc + bd;\n    long long int bcda = bcd + ac;\n\
    \    long long int bcdc = bcda + cd;\n    long long int bcdab = bcda * cd;\n \
    \   long long int bcdcd = bcdc * cd;\n    long long int bcdabc = bcdab * cd;\n\
    \    long long int bcdabcd = bcdabc * cd;\n    long long int bcdabcc = bcdabcd\
    \ * cd;\n    long long int bcdabccd = bcdabcc * cd;\n    long long int bcdabccdd\
    \ = bcdabccd * cd;\n    long long int bcdabccdde = bcdabccdd * cd;\n    long long\
    \ int bcdabccddee = bcdabccdde * cd;\n    long long int bcdabccddeee = bcdabccddee\
    \ * cd;\n    long long int bcdabccddeeee = bcdabccddeeee * cd;\n    long long\
    \ int bcdabccddeeeee = bcdabccddeeeee * cd;\n    long long int bcdabccddeeeeee\
    \ = bcdabccddeeeeee * cd;\n    long long int bcdabccddeeeeeee = bcdabccddeeeeeee\
    \ * cd;\n    long long int bcdabccddeeeeeeee = bcdabccddeeeeeeee * cd;\n    long\
    \ long int bcdabccddeeeeeeeee = bcdabccddeeeeeeeee * cd;\n    long long int bcdabccddeeeeeeeeee\
    \ = bcdabccddeeeeeeeeee * cd;\n    long long int bcdabccddeeeeeeeeeee = bcdabccddeeeeeeeeeee\
    \ * cd;\n    long long int bcdabccddeeeeeeeeeeee = bcdabccddeeeeeeeeeee * cd;\n\
    \    long long int bcdabccddeeeeeeeee\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpss9i74tg.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmpss9i74tg.cpp:14:28: error: \u2018d\u2019\
    \ was not declared in this scope; did you mean \u2018bd\u2019?\n   14 |     long\
    \ long int bd = abs(d - b);\n      |                            ^\n      |   \
    \                         bd\n/tmp/tmpss9i74tg.cpp:40:1: error: expected initializer\
    \ before \u2018}\u2019 token\n   40 | }\n      | ^\n/tmp/tmpss9i74tg.cpp:40:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    if (a < 0 || b < 0 || c < 0)\n        return false;\n\
    \    if (a + b > c || a + c > b || b + c > a)\n        return false;\n    long\
    \ long ans = 1;\n    long long sum = 0;\n    long long mid = (a + b + c) / 2;\n\
    \    long long sum1 = 0, sum2 = 0, sum3 = 0;\n    while (sum < mid) {\n      \
    \  sum1 += mid;\n        sum2 += mid * mid;\n        sum3 += mid * mid * mid;\n\
    \        sum += mid;\n        mid = (a + b + c) / 2;\n    }\n    if (sum == mid)\n\
    \        ans = sum1;\n    else if (sum == mid * mid)\n        ans = sum2;\n  \
    \  else\n        ans = sum3;\n    if (ans == 0)\n        return false;\n    long\
    \ long sum4 = 0, sum5 = 0, sum6 = 0, sum7 = 0;\n    long long mid1 = (a + b +\
    \ c) / 2;\n    while (sum < mid1) {\n        sum4 += mid1;\n        sum5 += mid1\
    \ * mid1;\n        sum6 += mid1 * mid * mid;\n        sum7 += mid1 * mid * mid\
    \ * mid;\n        sum += mid1;\n        mid1 = (a + b + c) / 2;\n    }\n    if\
    \ (sum == mid1)\n        ans = sum4;\n    else if (sum == mid1 * mid1)\n     \
    \   ans = sum5;\n    else\n        ans = sum6;\n    if (ans == 0)\n        return\
    \ false;\n    long long sum8 = 0, sum9 = 0, sum10 = 0, sum11 = 0;\n    long long\
    \ mid2 = (a + b + c) / 2;\n    while (sum < mid2) {\n        sum8 += mid2;\n \
    \       sum9 += mid2 * mid2;\n        sum10 += mid2 * mid * mid;\n        sum11\
    \ += mid2 * mid * mid * mid;\n        sum += mid2;\n        mid2 = (a + b + c)\
    \ / 2;\n    }\n    if (sum == mid2)\n        ans = sum8;\n    else if (sum ==\
    \ mid2 * mid2)\n        ans = sum9;\n    else\n        ans = sum10;\n    if (ans\
    \ == 0)\n        return false;\n    long long sum12 = 0, sum13 = 0, sum14 = 0,\
    \ sum15 = 0;\n    long long mid3 = (a + b + c) / 2;\n    while (sum < mid3) {\n\
    \        sum12 += mid3;\n        sum13 += mid3 * mid3;\n        sum14 += mid3\
    \ * mid * mid;\n        sum15 += mid3 * mid * mid * \n}\nint main() {\n    auto\
    \ candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n\
    \    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpj8inf_3g.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmpj8inf_3g.cpp:77:1: error: expected\
    \ primary-expression before \u2018}\u2019 token\n   77 | }\n      | ^\n/tmp/tmpj8inf_3g.cpp:78:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   78 | int main() {\n      |            ^\n/tmp/tmpj8inf_3g.cpp:91:1: error:\
    \ expected \u2018}\u2019 at end of input\n   91 | }\n      | ^\n/tmp/tmpj8inf_3g.cpp:10:51:\
    \ note: to match this \u2018{\u2019\n   10 | bool right_angle_triangle(long a,\
    \ long b, long c) {\n      |                                                 \
    \  ^\n/tmp/tmpj8inf_3g.cpp:91:1: warning: control reaches end of non-void function\
    \ [-Wreturn-type]\n   91 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    long long int a1 = abs(a), b1 = abs(b), c1 = abs(c);\n\
    \    long long int a2 = a1 + b1, c2 = b1 + c1, b2 = a1 + c1;\n    long long int\
    \ a3 = a2 + b2, b3 = b2 + c2, c3 = c2 + a2;\n    long long int a4 = a3 + b3, b4\
    \ = b3 + c3, c4 = c3 + a3;\n    long long int a5 = a4 + b4, b5 = b5 + c4, c5 =\
    \ c4 + a4;\n    long long int a6 = a5 + b5, b6 = b6 + c5, c6 = c5 + a5;\n    long\
    \ long int a7 = a6 + b6, b7 = b7 + c6, c7 = c6 + a6;\n    long long int a8 = a7\
    \ + b7, b8 = b7 + c7, c9 = c7 + a7;\n    long long int a9 = a8 + b8, b9 = b8 +\
    \ c9, c10 = c8 + a8;\n    long long int a10 = a9 + b9, b10 = b9 + c10, c11 = c9\
    \ + a9;\n    long long int a11 = a10 + b10, b11 = b10 + c11, c12 = c10 + a10;\n\
    \    long long int a12 = a11 + b11, b12 = b11 + c12, c13 = c11 + a11;\n    long\
    \ long int a13 = a12 + b12, b13 = b12 + c13, c14 = c12 + a12;\n    long long int\
    \ a14 = a13 + b13, b14 = b13 + c14, c15 = c13 + a13;\n    long long int a15 =\
    \ a14 + b14, b15 = b14 + c15, c16 = c14 + a14;\n    long long int a16 = a15 +\
    \ b15, b16 = b15 + c16, c17 = c15 + a15;\n    long long int a17 = a16 + b16, b17\
    \ = b16 + c17, c18 = c16 + a16;\n    long long int a18 = a17 + b17, b18 = b17\
    \ + c18, c19 = c17 + a17;\n    long long int a19 = a18 + b18, b19 = b18 + c19,\
    \ c20 = c18 + a18;\n    long long int a20 = a19 + b19, b20 = b19 + c20, c21 =\
    \ c19 + a19;\n    long long int a21 = a20 + b20, b21 = b20 + c21, c22 = c\n}\n\
    int main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp64fagiwf.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmp64fagiwf.cpp:19:53: error: \u2018c8\u2019\
    \ was not declared in this scope; did you mean \u2018c9\u2019?\n   19 |     long\
    \ long int a9 = a8 + b8, b9 = b8 + c9, c10 = c8 + a8;\n      |               \
    \                                      ^~\n      |                           \
    \                          c9\n/tmp/tmp64fagiwf.cpp:32:1: error: expected \u2018\
    ,\u2019 or \u2018;\u2019 before \u2018}\u2019 token\n   32 | }\n      | ^\n/tmp/tmp64fagiwf.cpp:32:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    if(a==b){\n        if(a==c){\n            return true;\n\
    \        }\n        return false;\n    }\n    if(b==c){\n        return false;\n\
    \    }\n    if(a>b){\n        if(a>c){\n            return false;\n        }\n\
    \        return true;\n    }\n    if(b>c){\n        return false;\n    }\n   \
    \ if(a<b){\n        if(a<c){\n            return false;\n        }\n        return\
    \ true;\n    }\n    if(b<c){\n        return false;\n    }\n}\nint main() {\n\
    \    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5))\
    \ == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  stdout: ''
  stderr: "tmp0ntlw3zn: /tmp/tmp0ntlw3zn.cpp:41: int main(): Assertion `candidate((3),\
    \ (4), (5)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    // Write your code here\n    long long int a1 = abs(a),\
    \ b1 = abs(b), c1 = abs(c);\n    long long int a2 = a1 - (a1 * b1 / c1);\n   \
    \ long long int b2 = b1 - (b1 * a1 / c1);\n    long long int c2 = c1 - (c1 * a1\
    \ / b1);\n    long long int a3 = a1 - (a1 * c1 / b1);\n    long long int b3 =\
    \ b1 - (b1 * c1 / a1);\n    long long int c3 = c1 - (c1 * b1 / a1);\n    long\
    \ long int a4 = a1 - (a1 * c2 / b1);\n    long long int b4 = b1 - (b1 * c2 / a1);\n\
    \    long long int c4 = c1 - (c1 * b2 / a1);\n    long long int a5 = a1 - (a1\
    \ * c3 / b1);\n    long long int b5 = b1 - (b1 * c3 / a1);\n    long long int\
    \ c5 = c1 - (c1 * b3 / a1);\n    long long int a6 = a1 - (a1 * c4 / b1);\n   \
    \ long long int b6 = b1 - (b1 * c4 / a1);\n    long long int c6 = c1 - (c1 * b4\
    \ / a1);\n    long long int a7 = a1 - (a1 * c5 / b1);\n    long long int b7 =\
    \ b1 - (b1 * c5 / a1);\n    long long int c7 = c1 - (c1 * b5 / a1);\n    long\
    \ long int a8 = a1 - (a1 * c6 / b1);\n    long long int b8 = b1 - (b1 * c6 / a1);\n\
    \    long long int c8 = c1 - (c1 * b6 / a1);\n    long long int a9 = a1 - (a1\
    \ * c7 / b1);\n    long long int b9 = b1 - (b1 * c7 / a1);\n    long long int\
    \ c9 = c1 - (c1 * b7 / a1);\n    long long int a10 = a1 - (a1 * c8 / b1);\n  \
    \  long long int b10 = b1 - (b1 * c8 / a1);\n    long long int c10 = c1 - (c1\
    \ * b8 / a1);\n    long long int a11 = a1 - (a1 * c9 / b1);\n    long long int\
    \ b11 = b1 - (b1 * c9 / a1);\n    long long int c11 = c1 - (c1 * b9 / a1);\n \
    \   long long int a12 = a1 - (\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmppegyvt91.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmppegyvt91.cpp:44:1: error: expected\
    \ primary-expression before \u2018}\u2019 token\n   44 | }\n      | ^\n/tmp/tmppegyvt91.cpp:43:31:\
    \ error: expected \u2018)\u2019 before \u2018}\u2019 token\n   43 |     long long\
    \ int a12 = a1 - (\n      |                              ~^\n      |         \
    \                      )\n   44 | }\n      | ~                              \n\
    /tmp/tmppegyvt91.cpp:44:1: warning: no return statement in function returning\
    \ non-void [-Wreturn-type]\n   44 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    long long a1 = (a + b + c) / 2;\n    long long b1\
    \ = (b + c + a) / 2;\n    long long c1 = (c + a + b) / 2;\n    long long a2 =\
    \ (a1 + b1 + c1) / 2;\n    long long b2 = (b1 + c1 + a2) / 2;\n    long long c2\
    \ = (c1 + a2 + b2) / 2;\n    long long a3 = (a2 + b2 + c2) / 2;\n    long long\
    \ b3 = (b2 + c2 + a3) / 2;\n    long long c3 = (c2 + a3 + b3) / 2;\n    return\
    \ a * b * c == a1 * b1 * c1 && a2 * b2 * c2 == a3 * b3 * c3 &&\n            a\
    \ * b * c == a1 * b1 * c1 && a2 * b2 * c == a3 * b3 * c3 &&\n            a * b\
    \ * c == a1 * b1 * c1 && a2 * b2 * c == a3 * b3 * c3;\n}\nint main() {\n    auto\
    \ candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n\
    \    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  stdout: ''
  stderr: "tmp5qkx8xww: /tmp/tmp5qkx8xww.cpp:26: int main(): Assertion `candidate((3),\
    \ (4), (5)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    // Write your code here\n    long long int ans = 0;\n\
    \    long long int bc = b * c;\n    long long int ac = a * c;\n    long long int\
    \ ab = a * b;\n    long long int bd = b * d;\n    long long int ad = a * d;\n\
    \    long long int adc = ad * c;\n    long long int bda = bd * a;\n    long long\
    \ int bdb = bd * b;\n    long long int bdc = bd * c;\n    long long int bdaa =\
    \ bda * a;\n    long long int bdbb = bdb * b;\n    long long int bdca = bdc *\
    \ c;\n    long long int bdaab = bda * ab;\n    long long int bdbbc = bdb * bc;\n\
    \    long long int bdcab = bdc * ab;\n    long long int bdbdc = bdb * dc;\n  \
    \  long long int bdcaa = bdca * a;\n    long long int bdbdb = bdbd * b;\n    long\
    \ long int bdbdc = bdbd * c;\n    long long int bdbdca = bdbdc * a;\n    long\
    \ long int bdbdbc = bdbdb * b;\n    long long int bdbdbdc = bdbdbd * c;\n    long\
    \ long int bdbdbdca = bdbdbdc * a;\n    long long int bdbdbdbc = bdbdbdb * b;\n\
    \    long long int bdbdbdbdc = bdbdbdbd * c;\n    long long int bdbdbdbdca = bdbdbdbdc\
    \ * a;\n    long long int bdbdbdbdbc = bdbdbdbdb * b;\n    long long int bdbdbdbdbdc\
    \ = bdbdbdbdbd * c;\n    long long int bdbdbdbdbdca = bdbdbdbdbdc * a;\n    long\
    \ long int bdbdbdbdbdbc = bdbdbdbdbdb * b;\n    long long int bdbdbdbdbdbdc =\
    \ bdbdbdbdbdbd * c;\n    long long int bdbdbdbdbdbdca = bdbdbdbdbdbdc * a;\n \
    \   long long int bdbdbdbdbdbdbc = bdbdbdbdbdbdb * b;\n    long long int bdbdbdbdbdbdbdc\
    \ = bdbdbdbdbdbdbd * c;\n    long long int bdbdbdbdbdbdbdca = b\n}\nint main()\
    \ {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4),\
    \ (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpjco14qn3.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmpjco14qn3.cpp:16:28: error: \u2018d\u2019\
    \ was not declared in this scope; did you mean \u2018bd\u2019?\n   16 |     long\
    \ long int bd = b * d;\n      |                            ^\n      |        \
    \                    bd\n/tmp/tmpjco14qn3.cpp:28:33: error: \u2018dc\u2019 was\
    \ not declared in this scope; did you mean \u2018bdc\u2019?\n   28 |     long\
    \ long int bdbdc = bdb * dc;\n      |                                 ^~\n   \
    \   |                                 bdc\n/tmp/tmpjco14qn3.cpp:30:27: error:\
    \ \u2018bdbd\u2019 was not declared in this scope; did you mean \u2018bdbdb\u2019\
    ?\n   30 |     long long int bdbdb = bdbd * b;\n      |                      \
    \     ^~~~\n      |                           bdbdb\n/tmp/tmpjco14qn3.cpp:31:19:\
    \ error: redeclaration of \u2018long long int bdbdc\u2019\n   31 |     long long\
    \ int bdbdc = bdbd * c;\n      |                   ^~~~~\n/tmp/tmpjco14qn3.cpp:28:19:\
    \ note: \u2018long long int bdbdc\u2019 previously declared here\n   28 |    \
    \ long long int bdbdc = bdb * dc;\n      |                   ^~~~~\n/tmp/tmpjco14qn3.cpp:34:29:\
    \ error: \u2018bdbdbd\u2019 was not declared in this scope; did you mean \u2018\
    bdbdbdc\u2019?\n   34 |     long long int bdbdbdc = bdbdbd * c;\n      |     \
    \                        ^~~~~~\n      |                             bdbdbdc\n\
    /tmp/tmpjco14qn3.cpp:36:30: error: \u2018bdbdbdb\u2019 was not declared in this\
    \ scope; did you mean \u2018bdbdbdbc\u2019?\n   36 |     long long int bdbdbdbc\
    \ = bdbdbdb * b;\n      |                              ^~~~~~~\n      |      \
    \                        bdbdbdbc\n/tmp/tmpjco14qn3.cpp:37:31: error: \u2018bdbdbdbd\u2019\
    \ was not declared in this scope; did you mean \u2018bdbdbdbdc\u2019?\n   37 |\
    \     long long int bdbdbdbdc = bdbdbdbd * c;\n      |                       \
    \        ^~~~~~~~\n      |                               bdbdbdbdc\n/tmp/tmpjco14qn3.cpp:39:32:\
    \ error: \u2018bdbdbdbdb\u2019 was not declared in this scope; did you mean \u2018\
    bdbdbdbdbc\u2019?\n   39 |     long long int bdbdbdbdbc = bdbdbdbdb * b;\n   \
    \   |                                ^~~~~~~~~\n      |                      \
    \          bdbdbdbdbc\n/tmp/tmpjco14qn"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    long d = b * b - 4 * a * c;\n    if (d < 0) {\n  \
    \      return false;\n    }\n    long root = d*d / 2;\n    long t1 = (-b + root)\
    \ / a;\n    long t2 = (-b - root) / a;\n    if (t1 >= 0 && t1 <= 1 && t2 >= 0\
    \ && t2 <= 1) {\n        return true;\n    }\n    return false;\n}\nint main()\
    \ {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4),\
    \ (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  stdout: ''
  stderr: "tmplu_j4g5z: /tmp/tmplu_j4g5z.cpp:25: int main(): Assertion `candidate((3),\
    \ (4), (5)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    long d = b * b - 4 * a * c;\n    if (d < 0) {\n  \
    \      return false;\n    }\n    long root = (long) sqrt(d);\n    long s = (-b\
    \ + root) / (2 * a);\n    long t = (-b - root) / (2 * a);\n    if (s < 0 || t\
    \ < 0) {\n        return false;\n    }\n    if (s == t) {\n        return true;\n\
    \    }\n    return false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpmv5yq9vf: /tmp/tmpmv5yq9vf.cpp:28: int main(): Assertion `candidate((3),\
    \ (4), (5)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    if (a == 0 || b == 0 || c == 0)\n        return false;\n\
    \    long d = b * b - 4 * a * c;\n    if (d < 0)\n        return false;\n    long\
    \ x = (b + d) / (2 * a);\n    long y = (-b - d) / (2 * a);\n    return (x > 0)\
    \ && (y > 0);\n}\nint main() {\n    auto candidate = right_angle_triangle;\n \
    \   assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmps4hu66f_: /tmp/tmps4hu66f_.cpp:22: int main(): Assertion `candidate((3),\
    \ (4), (5)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    long long a1 = (a + b + c) / 2;\n    long long b1\
    \ = (a + b - c) / 2;\n    long long c1 = (a - b - c) / 2;\n    long long a2 =\
    \ (a1 + b1 + c1) / 2;\n    long long b2 = (a1 + b1 - c1) / 2;\n    long long c2\
    \ = (a1 - b1 - c2) / 2;\n    long long a3 = (a2 + b2 + c2) / 2;\n    long long\
    \ b3 = (a2 + b2 - c2) / 2;\n    long long c3 = (a2 - b2 - c3) / 2;\n    long long\
    \ a4 = (a3 + b3 + c3) / 2;\n    long long b4 = (a3 + b3 - c3) / 2;\n    long long\
    \ c4 = (a3 - b3 - c4) / 2;\n    long long a5 = (a4 + b4 + c4) / 2;\n    long long\
    \ b5 = (a4 + b4 - c4) / 2;\n    long long c5 = (a4 - b4 - c5) / 2;\n    long long\
    \ a6 = (a5 + b5 + c5) / 2;\n    long long b6 = (a5 + b5 - c5) / 2;\n    long long\
    \ c6 = (a5 - b5 - c6) / 2;\n    long long a7 = (a6 + b6 + c6) / 2;\n    long long\
    \ b7 = (a6 + b6 - c6) / 2;\n    long long c7 = (a6 - b6 - c7) / 2;\n    long long\
    \ a8 = (a7 + b7 + c7) / 2;\n    long long b8 = (a7 + b7 - c7) / 2;\n    long long\
    \ c8 = (a7 - b7 - c8) / 2;\n    long long a9 = (a8 + b8 + c8) / 2;\n    long long\
    \ b9 = (a8 + b8 - c8) / 2;\n    long long c9 = (a8 - b8 - c9) / 2;\n    long long\
    \ a10 = (a9 + b9 + c9) / 2;\n    long long b10 = (a9 + b9 - c9) / 2;\n    long\
    \ long c10 = (a9 - b9 - c10) / 2;\n    long long a11 = (a10 + b10 + c10) / 2;\n\
    \    long long b11 = (a10 + b10 - c10) / 2;\n    long long c11 = (a10 - b10 -\
    \ c11) / 2;\n    long long a12 = (a11 + b11 + c11) / 2;\n    long long b12 = (a11\
    \ + b11 - c11) / 2;\n    long long c12 = (a11 - b11 - c12) / 2;\n    long long\
    \ a13 = (a12 + b12 + c12) / 2;\n    long long b13 = (a12 + b\n}\nint main() {\n\
    \    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5))\
    \ == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5iuv9_hk.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmp5iuv9_hk.cpp:48:29: error: expected\
    \ \u2018)\u2019 before \u2018}\u2019 token\n   48 |     long long b13 = (a12 +\
    \ b\n      |                     ~       ^\n      |                          \
    \   )\n   49 | }\n      | ~                            \n/tmp/tmp5iuv9_hk.cpp:49:1:\
    \ error: expected \u2018,\u2019 or \u2018;\u2019 before \u2018}\u2019 token\n\
    \   49 | }\n      | ^\n/tmp/tmp5iuv9_hk.cpp:49:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    // Write your code here\n    long long int ans = (a*a\
    \ + b*b - c*c)/2;\n    if (ans % 2 == 0)\n        return true;\n    return false;\n\
    }\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpx07iosp2: /tmp/tmpx07iosp2.cpp:20: int main(): Assertion `candidate((1),\
    \ (2), (3)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    long long ans = (a * b * c) / 2;\n    long long sum\
    \ = (a + b + c) / 2;\n    long long sq = sum * sum;\n    long long sq1 = sq -\
    \ ans;\n    long long sq2 = sq + ans;\n    long long sq3 = sq + sq;\n    long\
    \ long sq4 = sq3 - ans;\n    long long sq5 = sq3 + ans;\n    long long sq6 = sq3\
    \ + sq;\n    long long sq7 = sq5 - ans;\n    long long sq8 = sq5 + ans;\n    long\
    \ long sq9 = sq5 + sq;\n    long long sq10 = sq9 - ans;\n    long long sq11 =\
    \ sq9 + ans;\n    long long sq12 = sq9 + sq;\n    long long sq13 = sq11 - ans;\n\
    \    long long sq14 = sq11 + ans;\n    long long sq15 = sq11 + sq;\n    long long\
    \ sq16 = sq13 - ans;\n    long long sq17 = sq13 + ans;\n    long long sq18 = sq13\
    \ + sq;\n    long long sq19 = sq15 - ans;\n    long long sq20 = sq15 + ans;\n\
    \    long long sq21 = sq15 + sq;\n    long long sq22 = sq17 - ans;\n    long long\
    \ sq23 = sq17 + ans;\n    long long sq24 = sq17 + sq;\n    long long sq25 = sq19\
    \ - ans;\n    long long sq26 = sq19 + ans;\n    long long sq27 = sq19 + sq;\n\
    \    long long sq28 = sq21 - ans;\n    long long sq29 = sq21 + ans;\n    long\
    \ long sq30 = sq21 + sq;\n    long long sq31 = sq23 - ans;\n    long long sq32\
    \ = sq23 + ans;\n    long long sq33 = sq23 + sq;\n    long long sq34 = sq25 -\
    \ ans;\n    long long sq35 = sq25 + ans;\n    long long sq36 = sq25 + sq;\n  \
    \  long long sq37 = sq27 - ans;\n    long long sq38 = sq27 + ans;\n    long long\
    \ sq39 = sq27 + sq;\n    long long sq40 = sq29 - ans;\n    long long sq41 = sq29\
    \ + ans;\n    long long sq\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpirfce3b0.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmpirfce3b0.cpp:56:1: error: expected\
    \ initializer before \u2018}\u2019 token\n   56 | }\n      | ^\n/tmp/tmpirfce3b0.cpp:56:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    long long ans = (a * b * c) / 2;\n    long long sum\
    \ = a * b + c * a + ans;\n    long long sq = sum * sum;\n    long long sq1 = sq\
    \ - ans;\n    long long sq2 = sq + ans;\n    long long sq3 = sq + sq;\n    long\
    \ long sq4 = sq - sq;\n    long long sq5 = sq + sq1;\n    long long sq6 = sq +\
    \ sq2;\n    long long sq7 = sq + sq3;\n    long long sq8 = sq - sq3;\n    long\
    \ long sq9 = sq - sq4;\n    long long sq10 = sq - sq5;\n    long long sq11 = sq\
    \ + sq6;\n    long long sq12 = sq + sq7;\n    long long sq13 = sq + sq8;\n   \
    \ long long sq14 = sq - sq8;\n    long long sq15 = sq - sq9;\n    long long sq16\
    \ = sq - sq10;\n    long long sq17 = sq + sq11;\n    long long sq18 = sq + sq12;\n\
    \    long long sq19 = sq + sq13;\n    long long sq20 = sq + sq14;\n    long long\
    \ sq21 = sq + sq15;\n    long long sq22 = sq + sq16;\n    long long sq23 = sq\
    \ + sq17;\n    long long sq24 = sq + sq18;\n    long long sq25 = sq + sq19;\n\
    \    long long sq26 = sq + sq20;\n    long long sq27 = sq + sq21;\n    long long\
    \ sq28 = sq + sq22;\n    long long sq29 = sq + sq23;\n    long long sq30 = sq\
    \ + sq24;\n    long long sq31 = sq + sq25;\n    long long sq32 = sq + sq26;\n\
    \    long long sq33 = sq + sq27;\n    long long sq34 = sq + sq28;\n    long long\
    \ sq35 = sq + sq29;\n    long long sq36 = sq + sq30;\n    long long sq37 = sq\
    \ + sq31;\n    long long sq38 = sq + sq32;\n    long long sq39 = sq + sq33;\n\
    \    long long sq40 = sq + sq34;\n    long long sq41 = sq + sq35;\n    long long\
    \ sq42 = sq + sq36;\n    long long sq43 = sq + sq\n}\nint main() {\n    auto candidate\
    \ = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n \
    \   assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10), (6),\
    \ (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7),\
    \ (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n\
    \    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpo0s7wi89.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmpo0s7wi89.cpp:57:1: error: expected\
    \ \u2018,\u2019 or \u2018;\u2019 before \u2018}\u2019 token\n   57 | }\n     \
    \ | ^\n/tmp/tmpo0s7wi89.cpp:57:1: warning: no return statement in function returning\
    \ non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    long long int ab = abs(b - a);\n    long long int\
    \ ac = abs(c - a);\n    long long int bc = abs(b - c);\n    long long int bd =\
    \ abs(d - b);\n    long long int cd = abs(c - d);\n    long long int ad = abs(a\
    \ - d);\n    long long int acd = ac + ad;\n    long long int bcd = bc + bd;\n\
    \    long long int abbc = ab + bc;\n    long long int abbd = ab + bd;\n    long\
    \ long int abcc = ab + cc;\n    long long int abdd = ab + dd;\n    long long int\
    \ bcda = bc + ad;\n    long long int bcdb = bc + bd;\n    long long int bccc =\
    \ bc + cc;\n    long long int bcdd = bc + dd;\n    long long int cdab = cd + ab;\n\
    \    long long int cdac = cd + ac;\n    long long int cdabbc = cd + abbc;\n  \
    \  long long int cdabbd = cd + abbd;\n    long long int cdabcc = cd + abcc;\n\
    \    long long int cdabdd = cd + abdd;\n    long long int cdabbcd = cd + abbcd;\n\
    \    long long int cdabbcc = cd + abbcc;\n    long long int cdabbcdd = cd + abbcd;\n\
    \    long long int cdabbccd = cd + abbcd;\n    long long int cdabbccdd = cd +\
    \ abbcd;\n    long long int cdabbccddd = cd + abbcd;\n    long long int cdabbccddddd\
    \ = cd + abbcd;\n    long long int cdabbccddddde = cd + abbcd;\n    long long\
    \ int cdabbccdddddef = cd + abbcd;\n    long long int cdabbccdddddefg = cd + abbcd;\n\
    \    long long int cdabbccdddddefgh = cd + abbcd;\n    long long int cdabbccdddddefghi\
    \ = cd + abbcd;\n    long long int cdabbccdddddefghij = cd + abbcd;\n    long\
    \ long int cdabbccdddddefghijk = cd + abbcd;\n    long long int cdabbcc\n}\nint\
    \ main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6257angq.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmp6257angq.cpp:14:28: error: \u2018d\u2019\
    \ was not declared in this scope; did you mean \u2018bd\u2019?\n   14 |     long\
    \ long int bd = abs(d - b);\n      |                            ^\n      |   \
    \                         bd\n/tmp/tmp6257angq.cpp:21:31: error: \u2018cc\u2019\
    \ was not declared in this scope; did you mean \u2018cd\u2019?\n   21 |     long\
    \ long int abcc = ab + cc;\n      |                               ^~\n      |\
    \                               cd\n/tmp/tmp6257angq.cpp:22:31: error: \u2018\
    dd\u2019 was not declared in this scope; did you mean \u2018ad\u2019?\n   22 |\
    \     long long int abdd = ab + dd;\n      |                               ^~\n\
    \      |                               ad\n/tmp/tmp6257angq.cpp:33:34: error:\
    \ \u2018abbcd\u2019 was not declared in this scope; did you mean \u2018abbd\u2019\
    ?\n   33 |     long long int cdabbcd = cd + abbcd;\n      |                  \
    \                ^~~~~\n      |                                  abbd\n/tmp/tmp6257angq.cpp:34:34:\
    \ error: \u2018abbcc\u2019 was not declared in this scope; did you mean \u2018\
    abcc\u2019?\n   34 |     long long int cdabbcc = cd + abbcc;\n      |        \
    \                          ^~~~~\n      |                                  abcc\n\
    /tmp/tmp6257angq.cpp:48:1: error: expected initializer before \u2018}\u2019 token\n\
    \   48 | }\n      | ^\n/tmp/tmp6257angq.cpp:48:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    long d = b * b - 4 * a * c;\n    if (d < 0)\n    \
    \    return false;\n    long root = (long) sqrt(d);\n    long t1 = (-b + root)\
    \ / (2 * a);\n    long t2 = (-b - root) / (2 * a);\n    return t1 >= 0 && t1 <=\
    \ 1 && t2 >= 0 && t2 <= 1;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp64egjfxk: /tmp/tmp64egjfxk.cpp:21: int main(): Assertion `candidate((3),\
    \ (4), (5)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    // Write your code here\n    long ab = abs(b - a);\n\
    \    long ac = abs(c - a);\n    long ad = abs(b - c);\n    long bc = abs(c - b);\n\
    \    long abc = ab + ac + ad;\n    long bcd = bc + ab;\n    long acd = ac + ab;\n\
    \    long abcd = acd + bcd;\n    long abac = abc + acd;\n    long abbc = abc +\
    \ bcd;\n    long abcc = abc + cde;\n    long abbc = abbc + cde;\n    long abcc\
    \ = abcc + cde;\n    long abcc = abcc + cde;\n    long abcc = abcc + cde;\n  \
    \  long abcc = abcc + cde;\n    long abcc = abcc + cde;\n    long abcc = abcc\
    \ + cde;\n    long abcc = abcc + cde;\n    long abcc = abcc + cde;\n    long abcc\
    \ = abcc + cde;\n    long abcc = abcc + cde;\n    long abcc = abcc + cde;\n  \
    \  long abcc = abcc + cde;\n    long abcc = abcc + cde;\n    long abcc = abcc\
    \ + cde;\n    long abcc = abcc + cde;\n    long abcc = abcc + cde;\n    long abcc\
    \ = abcc + cde;\n    long abcc = abcc + cde;\n    long abcc = abcc + cde;\n  \
    \  long abcc = abcc + cde;\n    long abcc = abcc + cde;\n    long abcc = abcc\
    \ + cde;\n    long abcc = abcc + cde;\n    long abcc = abcc + cde;\n    long abcc\
    \ = abcc + cde;\n    long abcc = abcc + cde;\n    long abcc = abcc + cde;\n  \
    \  long abcc = abcc + cde;\n    long abcc = abcc + cde;\n    long abcc = abcc\
    \ + cde;\n    long abcc = abcc + cde;\n    long abcc = abcc + cde;\n    long abcc\
    \ = ab\n}\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpw3aresch.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmpw3aresch.cpp:22:23: error: \u2018cde\u2019\
    \ was not declared in this scope\n   22 |     long abcc = abc + cde;\n      |\
    \                       ^~~\n/tmp/tmpw3aresch.cpp:23:10: error: redeclaration\
    \ of \u2018long int abbc\u2019\n   23 |     long abbc = abbc + cde;\n      | \
    \         ^~~~\n/tmp/tmpw3aresch.cpp:21:10: note: \u2018long int abbc\u2019 previously\
    \ declared here\n   21 |     long abbc = abc + bcd;\n      |          ^~~~\n/tmp/tmpw3aresch.cpp:24:10:\
    \ error: redeclaration of \u2018long int abcc\u2019\n   24 |     long abcc = abcc\
    \ + cde;\n      |          ^~~~\n/tmp/tmpw3aresch.cpp:22:10: note: \u2018long\
    \ int abcc\u2019 previously declared here\n   22 |     long abcc = abc + cde;\n\
    \      |          ^~~~\n/tmp/tmpw3aresch.cpp:25:10: error: redeclaration of \u2018\
    long int abcc\u2019\n   25 |     long abcc = abcc + cde;\n      |          ^~~~\n\
    /tmp/tmpw3aresch.cpp:22:10: note: \u2018long int abcc\u2019 previously declared\
    \ here\n   22 |     long abcc = abc + cde;\n      |          ^~~~\n/tmp/tmpw3aresch.cpp:26:10:\
    \ error: redeclaration of \u2018long int abcc\u2019\n   26 |     long abcc = abcc\
    \ + cde;\n      |          ^~~~\n/tmp/tmpw3aresch.cpp:22:10: note: \u2018long\
    \ int abcc\u2019 previously declared here\n   22 |     long abcc = abc + cde;\n\
    \      |          ^~~~\n/tmp/tmpw3aresch.cpp:27:10: error: redeclaration of \u2018\
    long int abcc\u2019\n   27 |     long abcc = abcc + cde;\n      |          ^~~~\n\
    /tmp/tmpw3aresch.cpp:22:10: note: \u2018long int abcc\u2019 previously declared\
    \ here\n   22 |     long abcc = abc + cde;\n      |          ^~~~\n/tmp/tmpw3aresch.cpp:28:10:\
    \ error: redeclaration of \u2018long int abcc\u2019\n   28 |     long abcc = abcc\
    \ + cde;\n      |          ^~~~\n/tmp/tmpw3aresch.cpp:22:10: note: \u2018long\
    \ int abcc\u2019 previously declared here\n   22 |     long abcc = abc + cde;\n\
    \      |          ^~~~\n/tmp/tmpw3aresch.cpp:29:10: error: redeclaration of \u2018\
    long int abcc\u2019\n   29 |     long abcc = abcc + cde;\n      |          ^~~~\n\
    /tmp/tmpw3aresch.cpp:22:10: note: \u2018long int abcc\u2019 previously declared\
    \ here\n   22 |     long abcc = abc + cde;\n      |          ^~~~\n/tmp/tmp"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    if (a > b && a > c) {\n        return true;\n    }\n\
    \    if (b > c && b > a) {\n        return true;\n    }\n    if (c > a && c >\
    \ b) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto\
    \ candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n\
    \    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpvccd30op: /tmp/tmpvccd30op.cpp:25: int main(): Assertion `candidate((1),\
    \ (2), (3)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    long ab = abs(b - a);\n    long ac = abs(c - a);\n\
    \    long bc = abs(b - c);\n    long cb = abs(c - b);\n    long abc = ab + ac\
    \ + bc;\n    long abc_ab = ab * ab;\n    long abc_ac = ab * ac;\n    long abc_bc\
    \ = ab * bc;\n    long abc_cb = ab * cb;\n    long acb_ac = ac * ac;\n    long\
    \ acb_ab = ac * ab;\n    long acb_ba = ac * ba;\n    long acb_bc = ac * bc;\n\
    \    long acb_ca = ac * ca;\n    long abc_acb = abc_ac + acb_ac;\n    long abc_abc\
    \ = abc_ab + abc_ac + abc_bc;\n    long abc_abc_ab = abc_abc * ab;\n    long abc_abc_ac\
    \ = abc_abc * ac;\n    long abc_abc_bc = abc_abc * bc;\n    long abc_abc_cb =\
    \ abc_abc * cb;\n    long acb_acb = acb_ac + acb_ab;\n    long acb_abc = acb_ac\
    \ + acb_ba;\n    long acb_abc_ac = acb_abc * ac;\n    long acb_abc_ab = acb_abc\
    \ * ab;\n    long acb_abc_ba = acb_abc * ba;\n    long acb_abc_bc = acb_abc *\
    \ bc;\n    long acb_abc_ca = acb_abc * ca;\n    long abc_acb_ac = abc_acb * ac;\n\
    \    long abc_acb_ab = abc_acb * ab;\n    long abc_acb_ba = abc_acb * ba;\n  \
    \  long abc_acb_bc = abc_acb * bc;\n    long abc_acb_ca = abc_acb * ca;\n    long\
    \ abc_abc_acb = abc_abc_ac + acb_acb;\n    long abc_abc_abc = abc_abc_ab + abc_abc_ac\
    \ + abc_abc_bc;\n    long abc_abc_abc_ab = abc_abc_abc * ab;\n    long abc_abc_abc_ac\
    \ = abc_abc_abc * ac;\n    long abc_ab\n}\nint main() {\n    auto candidate =\
    \ right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n   \
    \ assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10), (6),\
    \ (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7),\
    \ (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n\
    \    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8mdpszaz.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmp8mdpszaz.cpp:22:24: error: \u2018ba\u2019\
    \ was not declared in this scope; did you mean \u2018bc\u2019?\n   22 |     long\
    \ acb_ba = ac * ba;\n      |                        ^~\n      |              \
    \          bc\n/tmp/tmp8mdpszaz.cpp:24:24: error: \u2018ca\u2019 was not declared\
    \ in this scope; did you mean \u2018cb\u2019?\n   24 |     long acb_ca = ac *\
    \ ca;\n      |                        ^~\n      |                        cb\n\
    /tmp/tmp8mdpszaz.cpp:48:1: error: expected initializer before \u2018}\u2019 token\n\
    \   48 | }\n      | ^\n/tmp/tmp8mdpszaz.cpp:48:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    // Write your code here\n    long long int ans = (a*a\
    \ + b*b - c*c)/2;\n    if(ans <= 0)\n        return false;\n    long long int\
    \ sq = sqrt(ans);\n    long long int d = b*b - a*c;\n    if(d > 0)\n        return\
    \ sq > d && sq > -b;\n    else\n        return sq > -b && sq > d;\n}\nint main()\
    \ {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4),\
    \ (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpcs21v_yv: /tmp/tmpcs21v_yv.cpp:24: int main(): Assertion `candidate((3),\
    \ (4), (5)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    if (a == 0 && b == 0 && c == 0)\n        return true;\n\
    \    if (a == 0 || b == 0 || c == 0)\n        return false;\n    long d = b *\
    \ b - 4 * a * c;\n    if (d < 0)\n        return false;\n    long x = (b + d)\
    \ / (2 * a);\n    long y = (-b - d) / (2 * a);\n    return ((x == 0 && y >= 0)\
    \ || (x == 0 && y < 0)\n            || (x >= 0 && y == 0));\n}\nint main() {\n\
    \    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5))\
    \ == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpuc5fdj4j: /tmp/tmpuc5fdj4j.cpp:25: int main(): Assertion `candidate((3),\
    \ (4), (5)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    long long a1 = (a + b + c) / 2;\n    long long b1\
    \ = (a + b) / 2;\n    long long c1 = (a + b) / 2;\n    long long a2 = (a1 + b1\
    \ + c1) / 2;\n    long long b2 = (a1 + b1) / 2;\n    long long c2 = (a1 + b1)\
    \ / 2;\n    long long a3 = (a2 + b2 + c2) / 2;\n    long long b3 = (a2 + b2) /\
    \ 2;\n    long long c3 = (a2 + b2) / 2;\n    long long a4 = (a3 + b3 + c3) / 2;\n\
    \    long long b4 = (a3 + b3) / 2;\n    long long c4 = (a3 + b3) / 2;\n    long\
    \ long a5 = (a4 + b4 + c4) / 2;\n    long long b5 = (a4 + b4) / 2;\n    long long\
    \ c5 = (a4 + b4) / 2;\n    long long a6 = (a5 + b5 + c5) / 2;\n    long long b6\
    \ = (a5 + b5) / 2;\n    long long c6 = (a5 + b5) / 2;\n    long long a7 = (a6\
    \ + b6 + c6) / 2;\n    long long b7 = (a6 + b6) / 2;\n    long long c7 = (a6 +\
    \ b6) / 2;\n    long long a8 = (a7 + b7 + c7) / 2;\n    long long b8 = (a7 + b7)\
    \ / 2;\n    long long c8 = (a7 + b7) / 2;\n    long long a9 = (a8 + b8 + c8) /\
    \ 2;\n    long long b9 = (a8 + b8) / 2;\n    long long c9 = (a8 + b8) / 2;\n \
    \   long long a10 = (a9 + b9 + c9) / 2;\n    long long b10 = (a9 + b9) / 2;\n\
    \    long long c10 = (a9 + b9) / 2;\n    long long a11 = (a10 + b10 + c10) / 2;\n\
    \    long long b11 = (a10 + b10) / 2;\n    long long c11 = (a10 + b10) / 2;\n\
    \    long long a12 = (a11 + b11 + c11) / 2;\n    long long b12 = (a11 + b11) /\
    \ 2;\n    long long c12 = (a11 + b11) / 2;\n    long long a13 = (a12 + b12 + c12)\
    \ / 2;\n    long long b13 = (a12 + b12) / 2;\n    long long c13 = (a12 + b12)\
    \ / 2;\n    long long a14 = (a13 + b13 + c13) / 2;\n    long long b14 = (a13 +\
    \ b13) / 2;\n    long long c14 = (a13 + b13) / 2;\n}\nint main() {\n    auto candidate\
    \ = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n \
    \   assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10), (6),\
    \ (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7),\
    \ (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n\
    \    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpetut1igb: /tmp/tmpetut1igb.cpp:56: int main(): Assertion `candidate((3),\
    \ (4), (5)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    // Write your code here\n    long long int a1 = (a\
    \ + b + c) / 2;\n    long long int b1 = (a + b) / 2;\n    long long int c1 = (a\
    \ + b) / 2;\n    long long int a2 = (a1 + b1 + c1) / 2;\n    long long int b2\
    \ = (a1 + b1) / 2;\n    long long int c2 = (a1 + b1) / 2;\n    long long int a3\
    \ = (a2 + b2 + c2) / 2;\n    long long int b3 = (a2 + b2) / 2;\n    long long\
    \ int c3 = (a2 + b2) / 2;\n    long long int a4 = (a3 + b3 + c3) / 2;\n    long\
    \ long int b4 = (a3 + b3) / 2;\n    long long int c4 = (a3 + b3) / 2;\n    long\
    \ long int a5 = (a4 + b4 + c4) / 2;\n    long long int b5 = (a4 + b4) / 2;\n \
    \   long long int c5 = (a4 + b4) / 2;\n    long long int a6 = (a5 + b5 + c5) /\
    \ 2;\n    long long int b6 = (a5 + b5) / 2;\n    long long int c6 = (a5 + b5)\
    \ / 2;\n    long long int a7 = (a6 + b6 + c6) / 2;\n    long long int b7 = (a6\
    \ + b6) / 2;\n    long long int c7 = (a6 + b6) / 2;\n    long long int a8 = (a7\
    \ + b7 + c7) / 2;\n    long long int b8 = (a7 + b7) / 2;\n    long long int c8\
    \ = (a7 + b7) / 2;\n    long long int a9 = (a8 + b8 + c8) / 2;\n    long long\
    \ int b9 = (a8 + b8) / 2;\n    long long int c9 = (a8 + b8) / 2;\n    long long\
    \ int a10 = (a9 + b9 + c9) / 2;\n    long long int b10 = (a9 + b9) / 2;\n    long\
    \ long int c10 = (a9 + b9) / 2;\n    long long int a11 = (a10 + b10 + c10) / 2;\n\
    \    long long int b11 = (a10 + b10) / 2;\n    long long int c11 = (a10 + b10)\
    \ / 2;\n    long long int a12 = (a11 + b11 + c11) / 2;\n    long long int b12\
    \ = (a11 + b11) / 2;\n    long long int c12 = (a11 + b11) / 2;\n    long long\
    \ int a13 = (a12 + b12 + c12) / 2;\n    long long int b13 = (a12 + b12) / 2;\n\
    \    long long int c13 = (a12\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpdpyjx25z.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmpdpyjx25z.cpp:50:29: error: expected\
    \ \u2018)\u2019 before \u2018}\u2019 token\n   50 |     long long int c13 = (a12\n\
    \      |                         ~   ^\n      |                             )\n\
    \   51 | }\n      | ~                            \n/tmp/tmpdpyjx25z.cpp:51:1:\
    \ error: expected \u2018,\u2019 or \u2018;\u2019 before \u2018}\u2019 token\n\
    \   51 | }\n      | ^\n/tmp/tmpdpyjx25z.cpp:51:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    long d = b * b - 4 * a * c;\n    if (d < 0) {\n  \
    \      return false;\n    }\n    long root = (long) sqrt(d);\n    long t1 = (-b\
    \ + root) / (2 * a);\n    long t2 = (-b - root) / (2 * a);\n    if (t1 >= 0 &&\
    \ t1 <= 1 && t2 >= 0 && t2 <= 1) {\n        return true;\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpj5eozsj3: /tmp/tmpj5eozsj3.cpp:25: int main(): Assertion `candidate((3),\
    \ (4), (5)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    long long a1 = abs(a), b1 = abs(b), c1 = abs(c);\n\
    \    long long a2 = a1 + b1, b2 = b1 + c1, c2 = a1 + c1;\n    long long a3 = a2\
    \ + b2, b3 = b2 + c2, c3 = a2 + c2;\n    long long a4 = a3 + b3, b4 = b3 + c3,\
    \ c4 = a3 + c3;\n    long long a5 = a4 + b4, b5 = b4 + c4, c5 = a4 + c4;\n   \
    \ long long a6 = a5 + b5, b6 = b5 + c5, c6 = a5 + c5;\n    long long a7 = a6 +\
    \ b6, b7 = b6 + c6, c7 = a6 + c6;\n    long long a8 = a7 + b7, b8 = b7 + c7, c8\
    \ = a7 + c7;\n    long long a9 = a8 + b8, b9 = b8 + c8, c9 = a8 + c8;\n    long\
    \ long a10 = a9 + b9, b10 = b9 + c9, c10 = a9 + c9;\n    long long a11 = a10 +\
    \ b10, b11 = b10 + c10, c11 = a10 + c10;\n    long long a12 = a11 + b11, b12 =\
    \ b11 + c11, c12 = a11 + c11;\n    long long a13 = a12 + b12, b13 = b12 + c12,\
    \ c13 = a12 + c12;\n    long long a14 = a13 + b13, b14 = b13 + c13, c14 = a13\
    \ + c13;\n    long long a15 = a14 + b14, b15 = b14 + c14, c15 = a14 + c14;\n \
    \   long long a16 = a15 + b15, b16 = b15 + c15, c16 = a15 + c15;\n    long long\
    \ a17 = a16 + b16, b17 = b16 + c16, c17 = a16 + c16;\n    long long a18 = a17\
    \ + b17, b18 = b17 + c17, c18 = a17 + c17;\n    long long a19 = a18 + b18, b19\
    \ = b18 + c18, c19 = a18 + c18;\n    long long a20 = a19 + b19, b20 = b19 + c19,\
    \ c20 = a19 + c19;\n    long long a21 = a20 + b20, b21 = b20 + c20, c21 = a20\
    \ + c20;\n    long long a22 = a21 + b21, b22 = b21 + c21, \n}\nint main() {\n\
    \    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5))\
    \ == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7vosw7qg.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmp7vosw7qg.cpp:33:1: error: expected\
    \ unqualified-id before \u2018}\u2019 token\n   33 | }\n      | ^\n/tmp/tmp7vosw7qg.cpp:33:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    // Write your code here\n    if(a==b&&b==c){\n   \
    \     return true;\n    }\n    if(a==b||a==c||b==c){\n        return false;\n\
    \    }\n    long long ans=0;\n    long long sum=a+b+c;\n    ans=sum%10;\n    if(ans==a||ans==b||ans==c){\n\
    \        return false;\n    }\n    ans=sum/10;\n    if(ans==a||ans==b||ans==c){\n\
    \        return false;\n    }\n    ans=sum%10;\n    if(ans==a||ans==b||ans==c){\n\
    \        return false;\n    }\n    ans=sum/10;\n    if(ans==a||ans==b||ans==c){\n\
    \        return false;\n    }\n    ans=sum%10;\n    if(ans==a||ans==b||ans==c){\n\
    \        return false;\n    }\n    ans=sum/10;\n    if(ans==a||ans==b||ans==c){\n\
    \        return false;\n    }\n    ans=sum%10;\n    if(ans==a||ans==b||ans==c){\n\
    \        return false;\n    }\n    ans=sum/10;\n    if(ans==a||ans==b||ans==c){\n\
    \        return false;\n    }\n    ans=sum%10;\n    if(ans==a||ans==b||ans==c){\n\
    \        return false;\n    }\n    ans=sum/10;\n    if(ans==a||ans==b||ans==c){\n\
    \        return false;\n    }\n    ans=sum%10;\n    if(ans==a||ans==b||ans==c){\n\
    \        return false;\n    }\n    ans=sum/10;\n    if(ans==a||ans==b||ans==c){\n\
    \        return false;\n    }\n    ans=sum%10;\n    if(ans==a||ans==b||ans==c){\n\
    \        return false;\n    }\n    ans=sum/10;\n    if(ans==a||ans==b||ans==c){\n\
    \        return false;\n    }\n    ans=sum%10;\n    if(ans==a||ans==b||ans==c){\n\
    \        return false;\n    }\n    ans=sum/10;\n    if(ans==a||ans==b||ans==c){\n\
    \        return false;\n    }\n    ans=sum%10;\n    if(ans==a||ans==b||ans==c){\n\
    \        return false;\n    }\n    ans=sum/10;\n    if(ans==a||ans==b||ans==c){\n\
    \        return false;\n    }\n    ans=sum%10;\n    if(\n}\nint main() {\n   \
    \ auto candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5))\
    \ == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5lpm259r.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmp5lpm259r.cpp:94:1: error: expected\
    \ primary-expression before \u2018}\u2019 token\n   94 | }\n      | ^\n/tmp/tmp5lpm259r.cpp:93:8:\
    \ error: expected \u2018)\u2019 before \u2018}\u2019 token\n   93 |     if(\n\
    \      |       ~^\n      |        )\n   94 | }\n      | ~       \n/tmp/tmp5lpm259r.cpp:94:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n   94 | }\n \
    \     | ^\n/tmp/tmp5lpm259r.cpp:94:1: warning: control reaches end of non-void\
    \ function [-Wreturn-type]\n   94 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    long ab = abs(b - a);\n    long ac = abs(c - a);\n\
    \    long bc = abs(b - c);\n    long acb = abs(ac - bc);\n    long abc = abs(ab\
    \ - bc);\n    long abbc = abs(ab - bc);\n    long abac = abs(ab - ac);\n    long\
    \ abcab = abs(ab - ac);\n    long abcabc = abs(ab - ac);\n    long abcabcb = abs(ab\
    \ - ac);\n    long abcabcba = abs(ab - ac);\n    long abcabcbb = abs(ab - ac);\n\
    \    long abcabcbbc = abs(ab - ac);\n    long abcabcbbca = abs(ab - ac);\n   \
    \ long abcabcbbcb = abs(ab - ac);\n    long abcabcbbcba = abs(ab - ac);\n    long\
    \ abcabcbbcbac = abs(ab - ac);\n    long abcabcbbcbaca = abs(ab - ac);\n    long\
    \ abcabcbbcbacbc = abs(ab - ac);\n    long abcabcbbcbacab = abs(ab - ac);\n  \
    \  long abcabcbbcbacabc = abs(ab - ac);\n    long abcabcbbcbacabcb = abs(ab -\
    \ ac);\n    long abcabcbbcbacabcba = abs(ab - ac);\n    long abcabcbbcbacabcbac\
    \ = abs(ab - ac);\n    long abcabcbbcbacabcbaca = abs(ab - ac);\n    long abcabcbbcbacabcbacbc\
    \ = abs(ab - ac);\n    long abcabcbbcbacabcbacab = abs(ab - ac);\n    long abcabcbbcbacabcbacabc\
    \ = abs(ab - ac);\n    long abcabcbbcbacabcbacabcb = abs(ab - ac);\n    long abcabcbbcbacabcbacabcba\
    \ = abs(ab - ac);\n    long abcabcbbcbacabcbacabcbac = abs(ab - ac);\n    long\
    \ abcabcbbcbacabcbacabcbaca = abs(ab - ac);\n    long abcabcbbcbacabcbacabcbacb\
    \ = abs(ab - ac);\n    long abcabcbbcbacabcbacabcbacab\n}\nint main() {\n    auto\
    \ candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n\
    \    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpd_5iq2sn.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmpd_5iq2sn.cpp:45:1: error: expected\
    \ initializer before \u2018}\u2019 token\n   45 | }\n      | ^\n/tmp/tmpd_5iq2sn.cpp:45:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    if (a == 0 || b == 0 || c == 0)\n        return false;\n\
    \    long d = b * b - 4 * a * c;\n    if (d < 0)\n        return false;\n    long\
    \ root = (long) sqrt(d);\n    long s = (-b + root) / (2 * a);\n    long t = (-b\
    \ - root) / (2 * a);\n    return (s == 0 && t == 0) || (s == t && s == 0);\n}\n\
    int main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  stdout: ''
  stderr: "tmp6_ii81ce: /tmp/tmp6_ii81ce.cpp:23: int main(): Assertion `candidate((3),\
    \ (4), (5)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    long long a1 = (a + b + c) / 2;\n    long long a2\
    \ = (b + c + a) / 2;\n    long long a3 = (c + a + b) / 2;\n    long long b1 =\
    \ (a + b + c) / 2;\n    long long b2 = (b + c + a) / 2;\n    long long b3 = (c\
    \ + a + b) / 2;\n    long long c1 = (a + b + c) / 2;\n    long long c2 = (b +\
    \ c + a) / 2;\n    long long c3 = (c + a + b) / 2;\n    long long d1 = (a + b\
    \ + c) / 2;\n    long long d2 = (b + c + a) / 2;\n    long long d3 = (c + a +\
    \ b) / 2;\n    long long e1 = (a + b + c) / 2;\n    long long e2 = (b + c + a)\
    \ / 2;\n    long long e3 = (c + a + b) / 2;\n    long long f1 = (a + b + c) /\
    \ 2;\n    long long f2 = (b + c + a) / 2;\n    long long f3 = (c + a + b) / 2;\n\
    \    long long g1 = (a + b + c) / 2;\n    long long g2 = (b + c + a) / 2;\n  \
    \  long long g3 = (c + a + b) / 2;\n    long long h1 = (a + b + c) / 2;\n    long\
    \ long h2 = (b + c + a) / 2;\n    long long h3 = (c + a + b) / 2;\n    long long\
    \ i1 = (a + b + c) / 2;\n    long long i2 = (b + c + a) / 2;\n    long long i3\
    \ = (c + a + b) / 2;\n    long long j1 = (a + b + c) / 2;\n    long long j2 =\
    \ (b + c + a) / 2;\n    long long j3 = (c + a + b) / 2;\n    long long k1 = (a\
    \ + b + c) / 2;\n    long long k2 = (b + c + a) / 2;\n    long long k3 = (c +\
    \ a + b) / 2;\n    long long l1 = (a + b + c) / 2;\n    long long l2 = (b + c\
    \ + a) / 2;\n    long long l3 = (c + a + b) / 2;\n    long long m1 = (a + b +\
    \ c) / 2;\n    long long m2 = (b + c + a) / 2;\n    long long m3 = (c + a + b)\
    \ / 2;\n    long long n1 = (a + b + c) / 2;\n    long long n2 = (b + c + a) /\
    \ 2;\n    long long n3 = (c + a + b) / 2;\n    long \n}\nint main() {\n    auto\
    \ candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n\
    \    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6ql5c4td.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmp6ql5c4td.cpp:54:1: error: expected\
    \ unqualified-id before \u2018}\u2019 token\n   54 | }\n      | ^\n/tmp/tmp6ql5c4td.cpp:54:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    long d = b * b - 4 * a * c;\n    if (d < 0) {\n  \
    \      return false;\n    }\n    long root = (long) sqrt(d);\n    long x0 = ((-b\
    \ - root) / a) % 2;\n    long y0 = ((-b + root) / a) % 2;\n    long x1 = ((-b\
    \ + root) / a) % 2;\n    long y1 = ((-b - root) / a) % 2;\n    return (x0 == 0\
    \ && y1 == 0 || x1 == 0 && y0 == 0);\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpqowdjkw5: /tmp/tmpqowdjkw5.cpp:24: int main(): Assertion `candidate((3),\
    \ (4), (5)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    if (a == 0 || b == 0 || c == 0) return false;\n  \
    \  long d = b * b - 4 * a * c;\n    if (d < 0) return false;\n    long x = (long)\
    \ (-b + sqrt(d)) / (2 * a);\n    long y = (long) (-b - sqrt(d)) / (2 * a);\n \
    \   return ((x >= 0) && (x <= 1) && (y >= 0) && (y <= 1));\n}\nint main() {\n\
    \    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5))\
    \ == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  stdout: ''
  stderr: "tmp6qcwa7bo: /tmp/tmp6qcwa7bo.cpp:20: int main(): Assertion `candidate((3),\
    \ (4), (5)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    long ab = abs(b - a);\n    long ac = abs(c - a);\n\
    \    long bc = abs(b - c);\n    long abc = abs(ab + ac);\n    long bcd = abs(bc\
    \ + ab);\n    long acd = abs(ac + bc);\n    long abcd = abs(abc);\n    long bcda\
    \ = abs(bcd - acd);\n    long acdb = abs(acd - ab);\n    long abcda = abs(abcd\
    \ - acdb);\n    long bcdba = abs(bcda - abcd);\n    long acdba = abs(acdb - abc);\n\
    \    long abcdba = abs(abcda - bcdb);\n    long bcdaa = abs(bcdba - acd);\n  \
    \  long acdbaa = abs(acdba);\n    long abcdaa = abs(abcdaa);\n    long bcdaaa\
    \ = abs(bcdaaa);\n    long acdbaaa = abs(acdbaaa);\n    long abcdaaa = abs(abcdaaa);\n\
    \    long bcdaaaa = abs(bcdaaaaa);\n    long acdbaaaa = abs(acdbaaaaa);\n    long\
    \ abcdaaaa = abs(abcdaaaaa);\n    long bcdaaaaa = abs(bcdaaaaaa);\n    long acdbaaaaa\
    \ = abs(acdbaaaaaa);\n    long abcdaaaaa = abs(abcdaaaaaa);\n    long bcdaaaaaa\
    \ = abs(bcdaaaaaaa);\n    long acdbaaaaaa = abs(acdbaaaaaaa);\n    long abcdaaaaaa\
    \ = abs(abcdaaaaaaa);\n    long bcdaaaaaaa = abs(bcdaaaaaaaa);\n    long acdbaaaaaaa\
    \ = abs(acdbaaaaaaaa);\n    long abcdaaaaaaa = abs(abcdaaaaaaaa);\n    long bcdaaaaaaaa\
    \ = abs(bcdaaaaaaaaa);\n    long acdbaaaaaaaa = abs(acdbaaaaaaaaa);\n    long\
    \ abcdaaaaaaaa = abs(abcdaaaaaaaaa);\n    long bcdaaaaaaaaa = abs(bcdaaaaaaaaaa);\n\
    \    long acdbaaaaaaaaa = abs(acdbaaaaaaaaaa);\n    long abcdaaaaaaaaa = abs(abcdaaaaaaaaaa);\n\
    \    long bcdaaaaaaaaaa = abs(bcdaaaaaaaaaaa);\n    long acdbaaaaaaaaaa = abs(acdbaaaaaaaaaaa);\n\
    \    long abcdaaaaaaaaaa = abs(abcdaaaaaaaaaaa);\n    long bcdaaaaaaaaaaa = \n\
    }\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_vw1e9v1.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmp_vw1e9v1.cpp:23:31: error: \u2018bcdb\u2019\
    \ was not declared in this scope; did you mean \u2018bcdba\u2019?\n   23 |   \
    \  long abcdba = abs(abcda - bcdb);\n      |                               ^~~~\n\
    \      |                               bcdba\n/tmp/tmp_vw1e9v1.cpp:30:24: error:\
    \ \u2018bcdaaaaa\u2019 was not declared in this scope; did you mean \u2018bcdaaaa\u2019\
    ?\n   30 |     long bcdaaaa = abs(bcdaaaaa);\n      |                        ^~~~~~~~\n\
    \      |                        bcdaaaa\n/tmp/tmp_vw1e9v1.cpp:31:25: error: \u2018\
    acdbaaaaa\u2019 was not declared in this scope; did you mean \u2018acdbaaaa\u2019\
    ?\n   31 |     long acdbaaaa = abs(acdbaaaaa);\n      |                      \
    \   ^~~~~~~~~\n      |                         acdbaaaa\n/tmp/tmp_vw1e9v1.cpp:32:25:\
    \ error: \u2018abcdaaaaa\u2019 was not declared in this scope; did you mean \u2018\
    abcdaaaa\u2019?\n   32 |     long abcdaaaa = abs(abcdaaaaa);\n      |        \
    \                 ^~~~~~~~~\n      |                         abcdaaaa\n/tmp/tmp_vw1e9v1.cpp:33:25:\
    \ error: \u2018bcdaaaaaa\u2019 was not declared in this scope; did you mean \u2018\
    bcdaaaa\u2019?\n   33 |     long bcdaaaaa = abs(bcdaaaaaa);\n      |         \
    \                ^~~~~~~~~\n      |                         bcdaaaa\n/tmp/tmp_vw1e9v1.cpp:34:26:\
    \ error: \u2018acdbaaaaaa\u2019 was not declared in this scope; did you mean \u2018\
    acdbaaaa\u2019?\n   34 |     long acdbaaaaa = abs(acdbaaaaaa);\n      |      \
    \                    ^~~~~~~~~~\n      |                          acdbaaaa\n/tmp/tmp_vw1e9v1.cpp:35:26:\
    \ error: \u2018abcdaaaaaa\u2019 was not declared in this scope; did you mean \u2018\
    abcdaaaa\u2019?\n   35 |     long abcdaaaaa = abs(abcdaaaaaa);\n      |      \
    \                    ^~~~~~~~~~\n      |                          abcdaaaa\n/tmp/tmp_vw1e9v1.cpp:36:26:\
    \ error: \u2018bcdaaaaaaa\u2019 was not declared in this scope; did you mean \u2018\
    bcdaaaa\u2019?\n   36 |     long bcdaaaaaa = abs(bcdaaaaaaa);\n      |       \
    \                   ^~~~~~~~~~\n      |                          bcdaaaa\n/tmp/tmp_vw1e9v1.cpp:37:27:\
    \ error: \u2018acdbaaaaaaa\u2019 was not declared in this scope; did you mean\
    \ \u2018acdbaaaa\u2019"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    long long a1 = abs(a), b1 = abs(b), c1 = abs(c);\n\
    \    long long a2 = a1 + b1, c2 = a1 + c1, b2 = b1 + c1;\n    long long ans =\
    \ a2 + b2 + c2;\n    if (ans == 0) return false;\n    long long s = a * b * c;\
    \ // side length\n    long long t = a1 * b1 * c1; // total angle\n    long long\
    \ u = a2 * b2 * c2; // unique angle\n    long long v = (s + t) / ans;\n    long\
    \ long w = sqrt(v * v + w);\n    long long x = v / w;\n    long long y = w / v;\n\
    \    long long z = a * b * c1;\n    long long r = a1 * b2 * c2;\n    long long\
    \ s = a2 * b1 * c1;\n    long long t = a1 * b2 * c2;\n    long long u = a2 * b1\
    \ * c2;\n    long long v = (s + t) / ans;\n    long long w = sqrt(v * v + w);\n\
    \    long long x = v / w;\n    long long y = w / v;\n    long long z = a * b *\
    \ c1;\n    long long r = a1 * b2 * c2;\n    long long s = a2 * b1 * c1;\n    long\
    \ long t = a1 * b2 * c2;\n    long long u = a2 * b1 * c2;\n    long long v = (s\
    \ + t) / ans;\n    long long w = sqrt(v * v + w);\n    long long x = v / w;\n\
    \    long long y = w / v;\n    long long z = a * b * c1;\n    long long r = a1\
    \ * b2 * c2;\n    long long s = a2 * b1 * c1;\n    long long t = a1 * b2 * c2;\n\
    \    long long u = a2 * b1 * c2;\n    long long v = (s + t) / ans;\n    long long\
    \ w = sqrt(v * v + w);\n    long long x = v / w;\n    long long y = w / v;\n \
    \   long long z = a * b * c1;\n    long long r = a1 * b2 * c2;\n    long long\
    \ s = a2 * b1 * c1;\n    long long t = a1 * b2 * c2;\n    long long u = a2 * b1\
    \ * c2;\n    long long v = (s + t) / ans;\n    long long w = sqrt(v * v + w);\n\
    \    long long x = v / w;\n    long long y = w / v;\n\n}\nint main() {\n    auto\
    \ candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n\
    \    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmps4wlc495.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmps4wlc495.cpp:24:15: error: redeclaration\
    \ of \u2018long long int s\u2019\n   24 |     long long s = a2 * b1 * c1;\n  \
    \    |               ^\n/tmp/tmps4wlc495.cpp:15:15: note: \u2018long long int\
    \ s\u2019 previously declared here\n   15 |     long long s = a * b * c; // side\
    \ length\n      |               ^\n/tmp/tmps4wlc495.cpp:25:15: error: redeclaration\
    \ of \u2018long long int t\u2019\n   25 |     long long t = a1 * b2 * c2;\n  \
    \    |               ^\n/tmp/tmps4wlc495.cpp:16:15: note: \u2018long long int\
    \ t\u2019 previously declared here\n   16 |     long long t = a1 * b1 * c1; //\
    \ total angle\n      |               ^\n/tmp/tmps4wlc495.cpp:26:15: error: redeclaration\
    \ of \u2018long long int u\u2019\n   26 |     long long u = a2 * b1 * c2;\n  \
    \    |               ^\n/tmp/tmps4wlc495.cpp:17:15: note: \u2018long long int\
    \ u\u2019 previously declared here\n   17 |     long long u = a2 * b2 * c2; //\
    \ unique angle\n      |               ^\n/tmp/tmps4wlc495.cpp:27:15: error: redeclaration\
    \ of \u2018long long int v\u2019\n   27 |     long long v = (s + t) / ans;\n \
    \     |               ^\n/tmp/tmps4wlc495.cpp:18:15: note: \u2018long long int\
    \ v\u2019 previously declared here\n   18 |     long long v = (s + t) / ans;\n\
    \      |               ^\n/tmp/tmps4wlc495.cpp:28:15: error: redeclaration of\
    \ \u2018long long int w\u2019\n   28 |     long long w = sqrt(v * v + w);\n  \
    \    |               ^\n/tmp/tmps4wlc495.cpp:19:15: note: \u2018long long int\
    \ w\u2019 previously declared here\n   19 |     long long w = sqrt(v * v + w);\n\
    \      |               ^\n/tmp/tmps4wlc495.cpp:29:15: error: redeclaration of\
    \ \u2018long long int x\u2019\n   29 |     long long x = v / w;\n      |     \
    \          ^\n/tmp/tmps4wlc495.cpp:20:15: note: \u2018long long int x\u2019 previously\
    \ declared here\n   20 |     long long x = v / w;\n      |               ^\n/tmp/tmps4wlc495.cpp:30:15:\
    \ error: redeclaration of \u2018long long int y\u2019\n   30 |     long long y\
    \ = w / v;\n      |               ^\n/tmp/tmps4wlc495.cpp:21:15: note: \u2018\
    long long int y\u2019 previously declared here\n   21 |     long long y = w /\
    \ v;\n      |               ^\n/tmp/tm"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    if (a == 0 || b == 0 || c == 0) return false;\n  \
    \  long d = b * b - 4 * a * c;\n    if (d < 0) return false;\n    long x = ((b\
    \ * b) - 4 * a * c) / d;\n    if (x >= 0) return true;\n    return false;\n}\n\
    int main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  stdout: ''
  stderr: "tmp573cx4do: /tmp/tmp573cx4do.cpp:20: int main(): Assertion `candidate((3),\
    \ (4), (5)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    // Write your code here\n    long sum = a+b+c;\n \
    \   long diff = b - a;\n    long diff2 = c - sum;\n    long diff3 = diff * diff;\n\
    \    long diff4 = diff2 * diff2;\n    long diff5 = diff3 * diff3;\n    long diff6\
    \ = diff4 * diff4;\n    long diff7 = diff5 * diff5;\n    long diff8 = diff6 *\
    \ diff6;\n    long diff9 = diff7 * diff7;\n    long diff10 = diff8 * diff8;\n\
    \    long diff11 = diff9 * diff9;\n    long diff12 = diff10 * diff10;\n    long\
    \ diff13 = diff11 * diff11;\n    long diff14 = diff12 * diff12;\n    long diff15\
    \ = diff13 * diff13;\n    long diff16 = diff14 * diff14;\n    long diff17 = diff15\
    \ * diff15;\n    long diff18 = diff16 * diff16;\n    long diff19 = diff17 * diff17;\n\
    \    long diff20 = diff18 * diff18;\n    long diff21 = diff19 * diff19;\n    long\
    \ diff22 = diff20 * diff20;\n    long diff23 = diff21 * diff21;\n    long diff24\
    \ = diff22 * diff22;\n    long diff25 = diff23 * diff23;\n    long diff26 = diff24\
    \ * diff24;\n    long diff27 = diff25 * diff25;\n    long diff28 = diff26 * diff26;\n\
    \    long diff29 = diff27 * diff27;\n    long diff30 = diff28 * diff28;\n    long\
    \ diff31 = diff29 * diff29;\n    long diff32 = diff30 * diff30;\n    long diff33\
    \ = diff31 * diff31;\n    long diff34 = diff32 * diff32;\n    long diff35 = diff33\
    \ * diff33;\n    long diff36 = diff34 * diff34;\n    long diff37 = diff35 * diff35;\n\
    \    long diff38 = diff36 * diff36;\n    long diff39 = diff37 * diff37;\n    long\
    \ diff40 = diff38 * diff38;\n    long diff41 = diff39 * diff39;\n    long diff42\
    \ = diff40 * diff40;\n    long diff43 = diff41 * diff41;\n    long diff44 = diff42\
    \ * diff42;\n    long diff45 = diff43 * diff43;\n    long diff\n}\nint main()\
    \ {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4),\
    \ (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpu86wr11g.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmpu86wr11g.cpp:59:1: error: expected\
    \ initializer before \u2018}\u2019 token\n   59 | }\n      | ^\n/tmp/tmpu86wr11g.cpp:59:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    long long ans = (a * b * c) - (a * c * b) - (b * a\
    \ * c);\n    if (ans == 0)\n        return true;\n    else \n        return false;\n\
    }\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  stdout: ''
  stderr: "tmptt6yfx79: /tmp/tmptt6yfx79.cpp:19: int main(): Assertion `candidate((3),\
    \ (4), (5)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    long long int sum = a+b+c;\n    long long int sq =\
    \ sum*sum;\n    long long int sq1 = sq-a*a;\n    long long int sq2 = sq-b*b;\n\
    \    long long int sq3 = sq-a*b;\n    long long int sq4 = sq-c*c;\n    long long\
    \ int sq5 = sq1*sq2;\n    long long int sq6 = sq3*sq4;\n    long long int sq7\
    \ = sq1*sq4;\n    long long int sq8 = sq2*sq4;\n    long long int sq9 = sq1*sq3;\n\
    \    long long int sq10 = sq2*sq3;\n    long long int sq11 = sq1*sq2;\n    long\
    \ long int sq12 = sq3*sq1;\n    long long int sq13 = sq4*sq1;\n    long long int\
    \ sq14 = sq5*sq2;\n    long long int sq15 = sq6*sq2;\n    long long int sq16 =\
    \ sq5*sq3;\n    long long int sq17 = sq6*sq3;\n    long long int sq18 = sq7*sq4;\n\
    \    long long int sq19 = sq8*sq4;\n    long long int sq20 = sq7*sq3;\n    long\
    \ long int sq21 = sq8*sq3;\n    long long int sq22 = sq9*sq4;\n    long long int\
    \ sq23 = sq10*sq4;\n    long long int sq24 = sq9*sq3;\n    long long int sq25\
    \ = sq10*sq3;\n    long long int sq26 = sq11*sq4;\n    long long int sq27 = sq12*sq4;\n\
    \    long long int sq28 = sq11*sq3;\n    long long int sq29 = sq12*sq3;\n    long\
    \ long int sq30 = sq13*sq4;\n    long long int sq31 = sq14*sq4;\n    long long\
    \ int sq32 = sq13*sq3;\n    long long int sq33 = sq14*sq3;\n    long long int\
    \ sq34 = sq15*sq4;\n    long long int sq35 = sq16*sq4;\n    long long int sq36\
    \ = sq15*sq3;\n    long long int sq37 = sq16*sq3;\n    long long int sq38 = sq17*sq4;\n\
    \    long long int sq39 = sq18*sq4;\n    long long int sq40 = sq17*sq3;\n}\nint\
    \ main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  stdout: ''
  stderr: "tmp6aa24nmm: /tmp/tmp6aa24nmm.cpp:56: int main(): Assertion `candidate((3),\
    \ (4), (5)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    long ab = abs(b - a);\n    long ac = abs(c - a);\n\
    \    long bc = abs(b - c);\n    long abc = abs(ab + ac + bc);\n    if (abc > ab)\
    \ {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n\
    \    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpzns8luzr: /tmp/tmpzns8luzr.cpp:22: int main(): Assertion `candidate((3),\
    \ (4), (5)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    if((b - a)*(c - b) == (c - a)*(a - b)) {\n       \
    \ return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n \
    \   assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10), (6),\
    \ (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7),\
    \ (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n\
    \    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  stdout: ''
  stderr: "tmplo4dmnp8: /tmp/tmplo4dmnp8.cpp:18: int main(): Assertion `candidate((3),\
    \ (4), (5)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    // Write your code here\n    if(a==b&&b==c){\n   \
    \     return true;\n    }\n    if(a==b||a==c||b==c){\n        return false;\n\
    \    }\n    if(a>b&&b>c&&c>a){\n        return false;\n    }\n    if(a>b&&b>c&&c>a){\n\
    \        return false;\n    }\n    if(a>b&&b>c&&c>a){\n        return false;\n\
    \    }\n    if(a>b&&b>c&&c>a){\n        return false;\n    }\n    if(a>b&&b>c&&c>a){\n\
    \        return false;\n    }\n    if(a>b&&b>c&&c>a){\n        return false;\n\
    \    }\n    if(a>b&&b>c&&c>a){\n        return false;\n    }\n    if(a>b&&b>c&&c>a){\n\
    \        return false;\n    }\n    if(a>b&&b>c&&c>a){\n        return false;\n\
    \    }\n    if(a>b&&b>c&&c>a){\n        return false;\n    }\n    if(a>b&&b>c&&c>a){\n\
    \        return false;\n    }\n    if(a>b&&b>c&&c>a){\n        return false;\n\
    \    }\n    if(a>b&&b>c&&c>a){\n        return false;\n    }\n    if(a>b&&b>c&&c>a){\n\
    \        return false;\n    }\n    if(a>b&&b>c&&c>a){\n        return false;\n\
    \    }\n    if(a>b&&b>c&&c>a){\n        return false;\n    }\n    if(a>b&&b>c&&c>a){\n\
    \        return false;\n    }\n    if(a>b&&b>c&&c>a){\n        return false;\n\
    \    }\n    if(a>b&&b>c&&c>a){\n        return false;\n    }\n    if(a>b&&b>c&&c>a){\n\
    \        return false;\n    }\n    if(a>b&&b>c&&c>a){\n        return false;\n\
    \    }\n    if(a>b&&b>c&&c>a){\n        return false;\n    }\n    if(a>b&&b>c&&c>a){\n\
    \        return false;\n    }\n    if(a>b&&b>c&&c>a){\n        return false;\n\
    \    }\n    if(a>b&&b>c&&c>a){\n        return false;\n    }\n    if(a>b&&b>c&&c>a){\n\
    \        return false;\n    }\n    if(a>b&&b>c&&c>a){\n        return false;\n\
    \    }\n    if(a>b&&b>c&&c>a){\n        return false;\n    }\n}\nint main() {\n\
    \    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5))\
    \ == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  stdout: ''
  stderr: "tmp8u1e5o50: /tmp/tmp8u1e5o50.cpp:105: int main(): Assertion `candidate((3),\
    \ (4), (5)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    long long a1 = (a + b + c) / 2;\n    long long a2\
    \ = ((a + b) / 2) * (a + b + c) / 6;\n    long long a3 = ((a + b) / 2) * ((a +\
    \ b + c) / 6) * (a + b + c) / 6;\n    long long b1 = (a + b) / 2;\n    long long\
    \ b2 = ((a + b + c) / 2) * (a + b + c) / 6;\n    long long b3 = ((a + b) / 2)\
    \ * ((a + b + c) / 6) * (a + b + c) / 6;\n    long long c1 = (a + b + c) / 2;\n\
    \    long long c2 = ((a + b) / 2) * (a + b + c) / 6;\n    long long c3 = ((a +\
    \ b) / 2) * ((a + b + c) / 6) * (a + b + c) / 6;\n    long long d1 = (a + b) /\
    \ 2;\n    long long d2 = ((a + b + c) / 2) * (a + b + c) / 6;\n    long long d3\
    \ = ((a + b) / 2) * ((a + b + c) / 6) * (a + b + c) / 6;\n    long long e1 = (a\
    \ + b + c) / 2;\n    long long e2 = ((a + b) / 2) * (a + b + c) / 6;\n    long\
    \ long e3 = ((a + b) / 2) * ((a + b + c) / 6) * (a + b + c) / 6;\n    long long\
    \ f1 = (a + b + c) / 2;\n    long long f2 = ((a + b) / 2) * (a + b + c) / 6;\n\
    \    long long f3 = ((a + b) / 2) * ((a + b + c) / 6) * (a + b + c) / 6;\n   \
    \ long long g1 = (a + b) / 2;\n    long long g2 = ((a + b + c) / 2) * (a + b +\
    \ c) / 6;\n    long long g3 = ((a + b) / 2) * ((a + b + c) / 6) * (a + b + c)\
    \ / 6;\n    long long h1 = (a + b + c) / 2;\n    long long h2 = ((a + b) / 2)\
    \ * (a + b + c) / 6;\n    long long h3 = ((a + b) / 2) * ((a + b + c) / 6) * (a\
    \ + b + c) / 6;\n    long long i1 = (a + b + c) / 2;\n    long long i2 = ((a +\
    \ b) / 2) * (a + b + c) / 6;\n    long long i3 = ((a + b) / 2) * ((a + b + c)\
    \ / 6) * (a + b + c) / 6;\n    \n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpxjd3fqv0: /tmp/tmpxjd3fqv0.cpp:42: int main(): Assertion `candidate((3),\
    \ (4), (5)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    if (a == 0 || b == 0 || c == 0) return false;\n  \
    \  long d = b * b - 4 * a * c;\n    if (d < 0) return false;\n    long e = std::sqrt(d);\n\
    \    long f = (b + e) / (2 * a);\n    long g = (c + e) / (2 * a);\n    long h\
    \ = (b - e) / (2 * a);\n    if (std::abs(f) > std::abs(g) && std::abs(f) > std::abs(h))\
    \ return false;\n    return true;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpir3693__: /tmp/tmpir3693__.cpp:23: int main(): Assertion `candidate((3),\
    \ (4), (5)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    // Write your code here\n    long d = b * b - 4 *\
    \ a * c;\n    if (d < 0) {\n        return false;\n    }\n    long x = (b + c)\
    \ / 2;\n    long y = (-b - c) / 2;\n    long m = (a + b) / 2;\n    long n = (a\
    \ + c) / 2;\n    long o = (b + c) / 2;\n    long p = a + b;\n    long q = a +\
    \ c;\n    long r = b + c;\n    long s = a + b;\n    long t = a + c;\n    long\
    \ u = b + c;\n    long v = a + b;\n    long w = a + c;\n    long x = a + b;\n\
    \    long y = a + c;\n    long z = b + c;\n    long x1 = a + b;\n    long x2 =\
    \ a + c;\n    long x3 = b + c;\n    long y1 = a - b;\n    long y2 = a - c;\n \
    \   long y3 = c - b;\n    long z1 = a - b;\n    long z2 = a - c;\n    long z3\
    \ = c - b;\n    long x1 = a + b;\n    long x2 = a + c;\n    long x3 = b + c;\n\
    \    long y1 = a - b;\n    long y2 = a - c;\n    long y3 = c - b;\n    long z1\
    \ = a - b;\n    long z2 = a - c;\n    long z3 = c - b;\n    long x1 = a + b;\n\
    \    long x2 = a + c;\n    long x3 = b + c;\n    long y1 = a - b;\n    long y2\
    \ = a - c;\n    long y3 = c - b;\n    long z1 = a - b;\n    long z2 = a - c;\n\
    \    long z3 = c - b;\n    long x1 = a + b;\n    long x2 = a + c;\n    long x3\
    \ = b + c;\n    long y1 = a - b;\n    long y2 = a - c;\n    long y3 = c - b;\n\
    \    long z1 = a - b;\n    long z2 = a - c;\n    long z3 = c - b;\n    long x1\
    \ = a + b;\n    long x2 = a + c;\n    long x3 = b + c;\n    long y1 = a - b;\n\
    \    long y2 = a - c;\n    long y3 = c - b;\n    long z1 = a - b;\n    long z2\
    \ = a - c;\n    long z3 = c - b;\n    long x1 = a + b;\n    long x2 = a + c;\n\
    \    long x3 = b + c;\n    long y1 = a - b;\n    long y2 = a - c;\n    long y3\
    \ = c - b;\n    long z1 = a - b;\n    long z2 = a - c;\n    long z3 = c - b;\n\
    \    long x1 = a + b;\n    long x2 = a + c;\n\n}\nint main() {\n    auto candidate\
    \ = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n \
    \   assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10), (6),\
    \ (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7),\
    \ (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n\
    \    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp9j31pb2o.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmp9j31pb2o.cpp:29:10: error: redeclaration\
    \ of \u2018long int x\u2019\n   29 |     long x = a + b;\n      |          ^\n\
    /tmp/tmp9j31pb2o.cpp:16:10: note: \u2018long int x\u2019 previously declared here\n\
    \   16 |     long x = (b + c) / 2;\n      |          ^\n/tmp/tmp9j31pb2o.cpp:30:10:\
    \ error: redeclaration of \u2018long int y\u2019\n   30 |     long y = a + c;\n\
    \      |          ^\n/tmp/tmp9j31pb2o.cpp:17:10: note: \u2018long int y\u2019\
    \ previously declared here\n   17 |     long y = (-b - c) / 2;\n      |      \
    \    ^\n/tmp/tmp9j31pb2o.cpp:41:10: error: redeclaration of \u2018long int x1\u2019\
    \n   41 |     long x1 = a + b;\n      |          ^~\n/tmp/tmp9j31pb2o.cpp:32:10:\
    \ note: \u2018long int x1\u2019 previously declared here\n   32 |     long x1\
    \ = a + b;\n      |          ^~\n/tmp/tmp9j31pb2o.cpp:42:10: error: redeclaration\
    \ of \u2018long int x2\u2019\n   42 |     long x2 = a + c;\n      |          ^~\n\
    /tmp/tmp9j31pb2o.cpp:33:10: note: \u2018long int x2\u2019 previously declared\
    \ here\n   33 |     long x2 = a + c;\n      |          ^~\n/tmp/tmp9j31pb2o.cpp:43:10:\
    \ error: redeclaration of \u2018long int x3\u2019\n   43 |     long x3 = b + c;\n\
    \      |          ^~\n/tmp/tmp9j31pb2o.cpp:34:10: note: \u2018long int x3\u2019\
    \ previously declared here\n   34 |     long x3 = b + c;\n      |          ^~\n\
    /tmp/tmp9j31pb2o.cpp:44:10: error: redeclaration of \u2018long int y1\u2019\n\
    \   44 |     long y1 = a - b;\n      |          ^~\n/tmp/tmp9j31pb2o.cpp:35:10:\
    \ note: \u2018long int y1\u2019 previously declared here\n   35 |     long y1\
    \ = a - b;\n      |          ^~\n/tmp/tmp9j31pb2o.cpp:45:10: error: redeclaration\
    \ of \u2018long int y2\u2019\n   45 |     long y2 = a - c;\n      |          ^~\n\
    /tmp/tmp9j31pb2o.cpp:36:10: note: \u2018long int y2\u2019 previously declared\
    \ here\n   36 |     long y2 = a - c;\n      |          ^~\n/tmp/tmp9j31pb2o.cpp:46:10:\
    \ error: redeclaration of \u2018long int y3\u2019\n   46 |     long y3 = c - b;\n\
    \      |          ^~\n/tmp/tmp9j31pb2o.cpp:37:10: note: \u2018long int y3\u2019\
    \ previously declared here\n   37 |     long y3 = c - b;\n      |          ^~\n\
    /tmp/tmp9j31pb2o.cpp:47:10: error: redeclaration of \u2018long "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    if (a == 0 || b == 0 || c == 0) return false;\n  \
    \  long d = b * b - 4 * a * c;\n    if (d < 0) return false;\n    long e = std::sqrt(d);\n\
    \    long f = (b + e) / (2 * a);\n    long g = (c + e) / (2 * a);\n    long h\
    \ = (b - e) / (2 * a);\n    return ((f < 0 && g < 0 && h < 0) || (f > 0 && g >\
    \ 0 && h > 0));\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpbr2fpnd3: /tmp/tmpbr2fpnd3.cpp:22: int main(): Assertion `candidate((3),\
    \ (4), (5)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    if (a > b && a > c) {\n        if (b > c) {\n    \
    \        return true;\n        }\n    }\n    else if (b > a && b > c) {\n    \
    \    return true;\n    }\n    else if (c > a && c > b) {\n        return true;\n\
    \    }\n    return false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp0s_zo1rs: /tmp/tmp0s_zo1rs.cpp:27: int main(): Assertion `candidate((1),\
    \ (2), (3)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    long d = b * b - 4 * a * c;\n    if (d < 0) {\n  \
    \      return false;\n    }\n    long x = (b + d) / (2 * a);\n    long y = (-b\
    \ - d) / (2 * a);\n    return (x * x + y * y) <= 1;\n}\nint main() {\n    auto\
    \ candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n\
    \    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpx1soibw4: /tmp/tmpx1soibw4.cpp:21: int main(): Assertion `candidate((3),\
    \ (4), (5)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    if (a == 0 || b == 0 || c == 0) return false;\n  \
    \  long d = (b * b) - (4 * a * c);\n    if (d < 0) return false;\n    long x =\
    \ (b * b) - (4 * a * d);\n    if (x < 0) return false;\n    long y = (b * b) -\
    \ (4 * a * d);\n    if (y < 0) return false;\n    long z = (b * b) - (4 * a *\
    \ d);\n    if (z < 0) return false;\n    if (x == y && x == z) return true;\n\
    \    if (x == y || x == z) return true;\n    if (y == z) return true;\n    return\
    \ false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  stdout: ''
  stderr: "tmp4p0myoyi: /tmp/tmp4p0myoyi.cpp:27: int main(): Assertion `candidate((3),\
    \ (4), (5)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    // Write your code here\n    long sum = a+b+c;\n \
    \   long s = (a+b+c)/2;\n    long t = (a+b+c-s)/2;\n    long u = (b+c-s)/2;\n\
    \    long v = (a-b+c-s)/2;\n    long w = (a-b-c-s)/2;\n    long x = (a+b+c-s)/4;\n\
    \    long y = (b+c-s)/4;\n    long z = (a-b-c-s)/4;\n    long x1 = (a+b+c-s)/8;\n\
    \    long y1 = (b+c-s)/8;\n    long z1 = (a-b-c-s)/8;\n    long x2 = (a+b+c-s)/16;\n\
    \    long y2 = (b+c-s)/16;\n    long z2 = (a-b-c-s)/16;\n    long x3 = (a+b+c-s)/32;\n\
    \    long y3 = (b+c-s)/32;\n    long z3 = (a-b-c-s)/32;\n    long x4 = (a+b+c-s)/64;\n\
    \    long y4 = (b+c-s)/64;\n    long z4 = (a-b-c-s)/64;\n    long x5 = (a+b+c-s)/128;\n\
    \    long y5 = (b+c-s)/128;\n    long z5 = (a-b-c-s)/128;\n    long x6 = (a+b+c-s)/256;\n\
    \    long y6 = (b+c-s)/256;\n    long z6 = (a-b-c-s)/256;\n    long x7 = (a+b+c-s)/512;\n\
    \    long y7 = (b+c-s)/512;\n    long z7 = (a-b-c-s)/512;\n    long x8 = (a+b+c-s)/1024;\n\
    \    long y8 = (b+c-s)/1024;\n    long z8 = (a-b-c-s)/1024;\n    long x9 = (a+b+c-s)/2048;\n\
    \    long y9 = (b+c-s)/2048;\n    long z9 = (a-b-c-s)/2048;\n    long x10 = (a+b+c-s)/4096;\n\
    \    long y10 = (b+c-s)/4096;\n    long z10 = (a-b-c-s)/4096;\n    long x11 =\
    \ (a+b+c-s)/8192;\n    long y11 = (b+c-s)/819\n}\nint main() {\n    auto candidate\
    \ = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n \
    \   assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10), (6),\
    \ (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7),\
    \ (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n\
    \    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmplcfmrw9a.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmplcfmrw9a.cpp:53:1: error: expected\
    \ \u2018,\u2019 or \u2018;\u2019 before \u2018}\u2019 token\n   53 | }\n     \
    \ | ^\n/tmp/tmplcfmrw9a.cpp:53:1: warning: no return statement in function returning\
    \ non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    // Write your code here\n    if(a==b&&b==c){\n   \
    \     return true;\n    }\n    if(a==b||a==c||b==c){\n        return false;\n\
    \    }\n    if(a>b&&b>c&&c>a){\n        return true;\n    }\n    if(a>b&&b>c&&c<a){\n\
    \        return false;\n    }\n    if(a<b&&b>c&&c<a){\n        return true;\n\
    \    }\n    if(a<b&&b>c&&c>a){\n        return false;\n    }\n}\nint main() {\n\
    \    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5))\
    \ == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  stdout: ''
  stderr: "tmp1gy2xe5m: /tmp/tmp1gy2xe5m.cpp:33: int main(): Assertion `candidate((3),\
    \ (4), (5)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    long long ans = (a * b * c) - (a * c * b) - (b * c\
    \ * a);\n    if (ans == 0)\n        return true;\n    return false;\n}\nint main()\
    \ {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4),\
    \ (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  stdout: ''
  stderr: "tmp3pvcpjee: /tmp/tmp3pvcpjee.cpp:18: int main(): Assertion `candidate((3),\
    \ (4), (5)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    long long a1 = abs(a), b1 = abs(b), c1 = abs(c);\n\
    \    long long a2 = a1 + b1, c2 = a1 + c1, b2 = b1 + c1;\n    return (a2 + b2\
    \ > c2);\n}\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpg9p2q2qd: /tmp/tmpg9p2q2qd.cpp:18: int main(): Assertion `candidate((1),\
    \ (2), (3)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    // Write your code here\n    if(a==b||a==c||b==c)\n\
    \        return false;\n    else if(a>b&&a>c)\n        return true;\n    else\
    \ if(b>a&&b>c)\n        return true;\n    else if(c>a&&c>b)\n        return true;\n\
    \    else if(a>b&&b>c)\n        return false;\n    else if(b>a&&a>c)\n       \
    \ return false;\n    else if(c>a&&c>b)\n        return false;\n    else if(a>b&&b>c)\n\
    \        return false;\n    else if(b>a&&a>c)\n        return false;\n    else\
    \ if(c>a&&c>b)\n        return false;\n    else if(a>b&&b>c)\n        return false;\n\
    \    else if(b>a&&a>c)\n        return false;\n    else if(c>a&&c>b)\n       \
    \ return false;\n    else if(a>b&&b>c)\n        return false;\n    else if(b>a&&a>c)\n\
    \        return false;\n    else if(c>a&&c>b)\n        return false;\n    else\
    \ if(a>b&&b>c)\n        return false;\n    else if(b>a&&a>c)\n        return false;\n\
    \    else if(c>a&&c>b)\n        return false;\n    else if(a>b&&b>c)\n       \
    \ return false;\n    else if(b>a&&a>c)\n        return false;\n    else if(c>a&&c>b)\n\
    \        return false;\n    else if(a>b&&b>c)\n        return false;\n    else\
    \ if(b>a&&a>c)\n        return false;\n    else if(c>a&&c>b)\n        return false;\n\
    \    else if(a>b&&b>c)\n        return false;\n    else if(b>a&&a>c)\n       \
    \ return false;\n    else if(c>a&&c>b)\n        return false;\n    else if(a>b&&b>c)\n\
    \        return false;\n    else if(b>a&&a>c)\n        return false;\n    else\
    \ if(c>a&&c>b)\n        return false;\n    else if(a>b&&b>c)\n        return false;\n\
    \    else if(b>a&&a>c)\n        return false;\n    else if(c>a&&c>b)\n       \
    \ return false;\n    else if(a>b&&b>c)\n        return false;\n    else if(b>a&&a>c)\n\
    \        return false;\n    else if(c>a&&c>b)\n        return false;\n    else\
    \ if(a>b&&b>c)\n        return false;\n    else if(b>a&&a>c)\n        return false;\n\
    \    else if(c>a&&c>b)\n\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmplewdzos9.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmplewdzos9.cpp:92:1: error: expected\
    \ primary-expression before \u2018}\u2019 token\n   92 | }\n      | ^\n/tmp/tmplewdzos9.cpp:92:1:\
    \ warning: control reaches end of non-void function [-Wreturn-type]\n   92 | }\n\
    \      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    if (a == 0 && b == 0 && c == 0) return true;\n   \
    \ long d = b * b - 4 * a * c;\n    if (d < 0) return false;\n    long x = (long)\
    \ sqrt(d);\n    long y = (long) (-b + x) / (2 * a);\n    return x == y;\n}\nint\
    \ main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpvsvho7xm: /tmp/tmpvsvho7xm.cpp:20: int main(): Assertion `candidate((3),\
    \ (4), (5)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    long d = b * b - 4 * a * c;\n    if (d < 0) {\n  \
    \      return false;\n    }\n    long root = d*d / (2 * a);\n    if (root >= 0)\
    \ {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto\
    \ candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n\
    \    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpr2udc5u_: /tmp/tmpr2udc5u_.cpp:23: int main(): Assertion `candidate((3),\
    \ (4), (5)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    long long a1 = abs(a), b1 = abs(b), c1 = abs(c);\n\
    \    long long a2 = a1 + b1, b2 = b1 + c1, c2 = a1 + c1;\n    long long a3 = a2\
    \ + b2, b3 = b2 + c2, c3 = a2 + c2;\n    long long a4 = a3 + b3, b4 = b3 + c3,\
    \ c4 = a3 + c3;\n    long long a5 = a4 + b4, b5 = b4 + c4, c5 = a4 + c4;\n   \
    \ long long a6 = a5 + b5, b6 = b5 + c5, c6 = a5 + c5;\n    long long a7 = a6 +\
    \ b6, b7 = b6 + c6, c7 = a6 + c6;\n    long long a8 = a7 + b7, b8 = b7 + c7, c8\
    \ = a7 + c7;\n    long long a9 = a8 + b8, b9 = b8 + c8, c9 = a8 + c8;\n    long\
    \ long a10 = a9 + b9, b10 = b9 + c9, c10 = a9 + c9;\n    long long a11 = a10 +\
    \ b10, b11 = b10 + c10, c11 = a10 + c10;\n    long long a12 = a11 + b11, b12 =\
    \ b11 + c11, c12 = a11 + c11;\n    long long a13 = a12 + b12, b13 = b12 + c12,\
    \ c13 = a12 + c12;\n    long long a14 = a13 + b13, b14 = b13 + c13, c14 = a13\
    \ + c13;\n    long long a15 = a14 + b14, b15 = b14 + c14, c15 = a14 + c14;\n \
    \   long long a16 = a15 + b15, b16 = b15 + c15, c16 = a15 + c15;\n    long long\
    \ a17 = a16 + b16, b17 = b16 + c16, c17 = a16 + c16;\n    long long a18 = a17\
    \ + b17, b18 = b17 + c17, c18 = a17 + c17;\n    long long a19 = a18 + b18, b19\
    \ = b18 + c18, c19 = a18 + c18;\n    long long a20 = a19 + b19, b20 = b19 + c19,\
    \ c20 = a19 + c19;\n    long long a21 = a20 + b20, b21 = b20 + c20, c21 = a20\
    \ + c20;\n    long long a22 = a21 + b21, b22 = b21 + c21, \n}\nint main() {\n\
    \    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5))\
    \ == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmps36b2zqj.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmps36b2zqj.cpp:33:1: error: expected\
    \ unqualified-id before \u2018}\u2019 token\n   33 | }\n      | ^\n/tmp/tmps36b2zqj.cpp:33:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    long long a1 = abs(a), b1 = abs(b), c1 = abs(c);\n\
    \    long long a2 = a1 + b1, c2 = b1 + c1, b2 = a1 + c1;\n    long long ans =\
    \ (a1 + b2 + c2) * (a2 + b1 + c1) * (a2 + b2 + c1);\n    ans = ans % 10;\n   \
    \ return ans == 0;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp_gf4wd4r: /tmp/tmp_gf4wd4r.cpp:20: int main(): Assertion `candidate((1),\
    \ (2), (3)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    // Write your code here\n    long d = b - a;\n   \
    \ long e = c - a;\n    long f = d - e;\n    long g = e - b;\n    long h = f +\
    \ g;\n    long i = g + f;\n    long j = h + i;\n    long k = j + h;\n    long\
    \ l = k + j;\n    long m = l + k;\n    long n = m + l;\n    long o = n + m;\n\
    \    long p = o + n;\n    long q = p + o;\n    long r = q + p;\n    long s = r\
    \ + q;\n    long t = s + r;\n    long u = t + s;\n    long v = u + t;\n    long\
    \ w = v + u;\n    long x = w + v;\n    long y = x + w;\n    long z = y + x;\n\
    \    long a = z + y;\n    long b = a + z;\n    long c = b + a;\n    long d = c\
    \ + b;\n    long e = d + c;\n    long f = e + d;\n    long g = f + e;\n    long\
    \ h = g + f;\n    long i = h + g;\n    long j = i + h;\n    long k = j + i;\n\
    \    long l = k + j;\n    long m = l + k;\n    long n = m + l;\n    long o = n\
    \ + m;\n    long p = o + n;\n    long q = p + o;\n    long r = q + p;\n    long\
    \ s = r + q;\n    long t = s + r;\n    long u = t + s;\n    long v = u + t;\n\
    \    long w = v + u;\n    long x = w + v;\n    long y = x + w;\n    long z = y\
    \ + x;\n    long a = z + y;\n    long b = a + z;\n    long c = b + a;\n    long\
    \ d = c + b;\n    long e = d + c;\n    long f = e + d;\n    long g = f + e;\n\
    \    long h = g + f;\n    long i = h + g;\n    long j = i + h;\n    long k = j\
    \ + i;\n    long l = k + j;\n    long m = l + k;\n    long n = m + l;\n    long\
    \ o = n + m;\n    long p = o + n;\n    long q = p + o;\n    long r = q + p;\n\
    \    long s = r + q;\n    long t = s + r;\n    long u = t + s;\n    long v = u\
    \ + t;\n    long w = v + u;\n    long x = w + v;\n    long y = x + w;\n    long\
    \ z = y + \n}\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpz0x6tmm2.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmpz0x6tmm2.cpp:35:10: error: declaration\
    \ of \u2018long int a\u2019 shadows a parameter\n   35 |     long a = z + y;\n\
    \      |          ^\n/tmp/tmpz0x6tmm2.cpp:36:10: error: declaration of \u2018\
    long int b\u2019 shadows a parameter\n   36 |     long b = a + z;\n      |   \
    \       ^\n/tmp/tmpz0x6tmm2.cpp:37:10: error: declaration of \u2018long int c\u2019\
    \ shadows a parameter\n   37 |     long c = b + a;\n      |          ^\n/tmp/tmpz0x6tmm2.cpp:38:10:\
    \ error: redeclaration of \u2018long int d\u2019\n   38 |     long d = c + b;\n\
    \      |          ^\n/tmp/tmpz0x6tmm2.cpp:12:10: note: \u2018long int d\u2019\
    \ previously declared here\n   12 |     long d = b - a;\n      |          ^\n\
    /tmp/tmpz0x6tmm2.cpp:39:10: error: redeclaration of \u2018long int e\u2019\n \
    \  39 |     long e = d + c;\n      |          ^\n/tmp/tmpz0x6tmm2.cpp:13:10: note:\
    \ \u2018long int e\u2019 previously declared here\n   13 |     long e = c - a;\n\
    \      |          ^\n/tmp/tmpz0x6tmm2.cpp:40:10: error: redeclaration of \u2018\
    long int f\u2019\n   40 |     long f = e + d;\n      |          ^\n/tmp/tmpz0x6tmm2.cpp:14:10:\
    \ note: \u2018long int f\u2019 previously declared here\n   14 |     long f =\
    \ d - e;\n      |          ^\n/tmp/tmpz0x6tmm2.cpp:41:10: error: redeclaration\
    \ of \u2018long int g\u2019\n   41 |     long g = f + e;\n      |          ^\n\
    /tmp/tmpz0x6tmm2.cpp:15:10: note: \u2018long int g\u2019 previously declared here\n\
    \   15 |     long g = e - b;\n      |          ^\n/tmp/tmpz0x6tmm2.cpp:42:10:\
    \ error: redeclaration of \u2018long int h\u2019\n   42 |     long h = g + f;\n\
    \      |          ^\n/tmp/tmpz0x6tmm2.cpp:16:10: note: \u2018long int h\u2019\
    \ previously declared here\n   16 |     long h = f + g;\n      |          ^\n\
    /tmp/tmpz0x6tmm2.cpp:43:10: error: redeclaration of \u2018long int i\u2019\n \
    \  43 |     long i = h + g;\n      |          ^\n/tmp/tmpz0x6tmm2.cpp:17:10: note:\
    \ \u2018long int i\u2019 previously declared here\n   17 |     long i = g + f;\n\
    \      |          ^\n/tmp/tmpz0x6tmm2.cpp:44:10: error: redeclaration of \u2018\
    long int j\u2019\n   44 |     long j = i + h;\n      |          ^\n/tmp/tmpz0x6tmm2.cpp:18:10:\
    \ note: \u2018long int j\u2019 previously declared "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    // Write your code here\n    long long int sum = (a\
    \ + b + c) % 10;\n    if (sum == 0)\n        return true;\n    if (sum > 0)\n\
    \        return false;\n    long long int sum1 = (a + b + c) / 10;\n    if (sum1\
    \ == 0)\n        return true;\n    if (sum1 > 0)\n        return false;\n    long\
    \ long int sum2 = (a + b + c) / 100;\n    if (sum2 == 0)\n        return true;\n\
    \    if (sum2 > 0)\n        return false;\n    long long int sum3 = (a + b + c)\
    \ / 1000;\n    if (sum3 == 0)\n        return true;\n    if (sum3 > 0)\n     \
    \   return false;\n    long long int sum4 = (a + b + c) / 10000;\n    if (sum4\
    \ == 0)\n        return true;\n    if (sum4 > 0)\n        return false;\n    long\
    \ long int sum5 = (a + b + c) / 100000;\n    if (sum5 == 0)\n        return true;\n\
    \    if (sum5 > 0)\n        return false;\n    long long int sum6 = (a + b + c)\
    \ / 1000000;\n    if (sum6 == 0)\n        return true;\n    if (sum6 > 0)\n  \
    \      return false;\n    long long int sum7 = (a + b + c) / 10000000;\n    if\
    \ (sum7 == 0)\n        return true;\n    if (sum7 > 0)\n        return false;\n\
    \    long long int sum8 = (a + b + c) / 100000000;\n    if (sum8 == 0)\n     \
    \   return true;\n    if (sum8 > 0)\n        return false;\n    long long int\
    \ sum9 = (a + b + c) / 1000000000;\n    if (sum9 == 0)\n        return true;\n\
    \    if (sum9 > 0)\n        return false;\n    long long int sum10 = (a + b +\
    \ c) / 10000000000;\n    if (sum10 == 0)\n        return true;\n    if (sum10\
    \ > 0)\n        return false;\n    long long int sum11 = (a + b + c) / 100000000000;\n\
    \    if (sum11 == 0)\n        return true;\n    if (sum11 > 0)\n        return\
    \ false;\n    long long int sum12 = (a + b + c) / 1000000000000;\n    if (sum12\
    \ == 0)\n        return true;\n    if (sum12 > 0)\n        return false;\n   \
    \ long long int sum13 = (a + b + c) / 10000000000000;\n    if (sum13 == 0)\n \
    \       return true;\n    if (sum13 > 0)\n        return false;\n    long long\
    \ int sum14 = (a + b + c) / 100000000000000;\n    if (sum14 == 0)\n        return\
    \ true;\n    if (sum14 > 0)\n        return false;\n    long long int sum15 =\
    \ (a + b + c) / 1000000000000000;\n    if (sum15 == 0)\n        return true;\n\
    \    if (sum15 > 0)\n        return false;\n    long long int sum16 = (a + b +\
    \ c) / \n}\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmplbjwslq2.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmplbjwslq2.cpp:93:1: error: expected\
    \ primary-expression before \u2018}\u2019 token\n   93 | }\n      | ^\n/tmp/tmplbjwslq2.cpp:93:1:\
    \ warning: control reaches end of non-void function [-Wreturn-type]\n   93 | }\n\
    \      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    // Write your code here\n    if(a==b){\n        if(a==c){\n\
    \            return true;\n        }\n        return false;\n    }\n    if(a==c){\n\
    \        return false;\n    }\n    if(b==c){\n        return false;\n    }\n \
    \   if(a>b){\n        if(a>c){\n            return false;\n        }\n    }\n\
    \    if(a<b){\n        if(b>c){\n            return false;\n        }\n    }\n\
    \    if(a>c){\n        if(b>c){\n            return false;\n        }\n    }\n\
    \    if(a<c){\n        if(b>c){\n            return false;\n        }\n    }\n\
    \    return true;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmph86oiyen: /tmp/tmph86oiyen.cpp:49: int main(): Assertion `candidate((1),\
    \ (2), (3)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    long d = b * b - 4 * a * c;\n    if (d < 0) {\n  \
    \      return false;\n    }\n    long root = (long) sqrt(d);\n    long t1 = (-b\
    \ + root) / (2 * a);\n    long t2 = (-b - root) / (2 * a);\n    return t1 >= 0\
    \ && t1 <= 1 && t2 >= 0 && t2 <= 1;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpe8brs66a: /tmp/tmpe8brs66a.cpp:22: int main(): Assertion `candidate((3),\
    \ (4), (5)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    long long a1 = abs(a), b1 = abs(b), c1 = abs(c);\n\
    \    long long a2 = a1 + b1, c2 = a1 + c1, b2 = b1 + c1;\n    long long ans =\
    \ a2 + b2 + c2;\n    long long ans1 = a1 + b1 + c1;\n    long long ans2 = a2 +\
    \ b2 + c2;\n    long long ans3 = a2 + b1 + c1;\n    long long ans4 = a1 + b2 +\
    \ c2;\n    long long ans5 = a1 + c2 + b2;\n    long long ans6 = a1 + c2 + b1;\n\
    \    long long ans7 = a1 + c2 + b2;\n    long long ans8 = a1 + c2 + b1;\n    long\
    \ long ans9 = a1 + c1 + b2;\n    long long ans10 = a1 + c1 + b1;\n    long long\
    \ ans11 = a1 + c1 + b2;\n    long long ans12 = a1 + c1 + b1;\n    long long ans13\
    \ = a1 + c1 + b2;\n    long long ans14 = a1 + c1 + b1;\n    long long ans15 =\
    \ a1 + c1 + b2;\n    long long ans16 = a1 + c1 + b1;\n    long long ans17 = a1\
    \ + c1 + b2;\n    long long ans18 = a1 + c1 + b1;\n    long long ans19 = a1 +\
    \ c1 + b2;\n    long long ans20 = a1 + c1 + b1;\n    long long ans21 = a1 + c1\
    \ + b2;\n    long long ans22 = a1 + c1 + b1;\n    long long ans23 = a1 + c1 +\
    \ b2;\n    long long ans24 = a1 + c1 + b1;\n    long long ans25 = a1 + c1 + b2;\n\
    \    long long ans26 = a1 + c1 + b1;\n    long long ans27 = a1 + c1 + b2;\n  \
    \  long long ans28 = a1 + c1 + b1;\n    long long ans29 = a1 + c1 + b2;\n    long\
    \ long ans30 = a1 + c1 + b1;\n    long long ans31 = a1 + c1 + b2;\n    long long\
    \ ans32 = a1 + c1 + b1;\n    long long ans33 = a1 + c1 + b2;\n    long long ans34\
    \ = a1 + c1 + b1;\n    long long ans35 = a1 + c1 + b2;\n    long long ans36 =\
    \ a1 + c1 + b1;\n    long long ans37 = a1 + c1 + b2;\n    long long ans38 = a1\
    \ + c1 + b1;\n    long long ans\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmp4zwh604q.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmp4zwh604q.cpp:53:1: error: expected\
    \ initializer before \u2018}\u2019 token\n   53 | }\n      | ^\n/tmp/tmp4zwh604q.cpp:53:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    if(a==b){\n        if(a==c){\n            return true;\n\
    \        }\n        return false;\n    }\n    if(a==c){\n        return false;\n\
    \    }\n    if(b==c){\n        return false;\n    }\n    long long ans = (a*a\
    \ + b*b - c*c)/2;\n    if(ans<0){\n        ans = -ans;\n    }\n    if(ans==0){\n\
    \        return true;\n    }\n    long long ansa = abs(a);\n    long long ansb\
    \ = abs(b);\n    long long ansc = abs(c);\n    if(ansa>ansb){\n        if(ansa>ansc){\n\
    \            return true;\n        }\n        return false;\n    }\n    if(ansb>ansc){\n\
    \        return false;\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n \
    \   assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10), (6),\
    \ (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7),\
    \ (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n\
    \    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpm_k7391b: /tmp/tmpm_k7391b.cpp:49: int main(): Assertion `candidate((2),\
    \ (2), (2)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    if (a == 0 || b == 0 || c == 0)\n        return false;\n\
    \    long d = b * b - 4 * a * c;\n    if (d < 0)\n        return false;\n    long\
    \ x = (b + d) / (2 * a);\n    long y = (-b - d) / (2 * a);\n    return (x * x\
    \ + y * y) <= 1;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp11vlv71c: /tmp/tmp11vlv71c.cpp:22: int main(): Assertion `candidate((3),\
    \ (4), (5)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    long d = b * b - 4 * a * c;\n    if (d < 0)\n    \
    \    return false;\n    long e = std::sqrt(d);\n    long f = a * a + b * b - 4\
    \ * a * c;\n    if (f < 0)\n        return false;\n    long g = std::sqrt(f);\n\
    \    return std::abs(g - e) < 1e-10;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpq7dso2iv: /tmp/tmpq7dso2iv.cpp:23: int main(): Assertion `candidate((3),\
    \ (4), (5)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    // Write your code here\n    long long int ans = (a*a\
    \ + b*b - c*c)/2;\n    if(ans == 0)\n        return false;\n    long long int\
    \ d = b*b - a*c;\n    if(d < 0)\n        return false;\n    long long int e =\
    \ b*b + a*c;\n    if(e < 0)\n        return false;\n    long long int f = a*a\
    \ - b*b;\n    if(f < 0)\n        return false;\n    if(d == 0 && e == 0 && f ==\
    \ 0)\n        return true;\n    return false;\n}\nint main() {\n    auto candidate\
    \ = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n \
    \   assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10), (6),\
    \ (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7),\
    \ (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n\
    \    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpbc6jc829: /tmp/tmpbc6jc829.cpp:30: int main(): Assertion `candidate((3),\
    \ (4), (5)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    long d = b * b - 4 * a * c;\n    if (d < 0)\n    \
    \    return false;\n    long root = (long) sqrt(d);\n    long s = (-b + root)\
    \ / (2 * a);\n    long t = (-b - root) / (2 * a);\n    return (s == 0 && t ==\
    \ 0) || (s > 0 && t > 0);\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpm9mfloi0: /tmp/tmpm9mfloi0.cpp:21: int main(): Assertion `candidate((3),\
    \ (4), (5)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    long long ans = a + b + c;\n    long long sum = (a\
    \ + b) * (a + c) + (b + c) * (a + b) + (a + c) * (b + c);\n    long long rem =\
    \ sum % ans;\n    if (rem == 0) {\n        return true;\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  stdout: ''
  stderr: "tmppml17630: /tmp/tmppml17630.cpp:21: int main(): Assertion `candidate((3),\
    \ (4), (5)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    long long ans = (a * b * c) - (a * c * b) - (b * a\
    \ * c);\n    if (ans == 0)\n        return false;\n    long long root = (ans %\
    \ MOD);\n    if (root == 0)\n        return true;\n    if (root == MOD)\n    \
    \    return false;\n    if (a > b)\n        swap(a, b);\n    if (a > c)\n    \
    \    swap(a, c);\n    if (b > c)\n        swap(b, c);\n    long long a1 = (a %\
    \ MOD);\n    long long b1 = (b % MOD);\n    long long c1 = (c % MOD);\n    long\
    \ long a2 = (a1 % MOD);\n    long long b2 = (b1 % MOD);\n    long long c2 = (c1\
    \ % MOD);\n    long long a3 = (a2 % MOD);\n    long long b3 = (b2 % MOD);\n  \
    \  long long c3 = (c2 % MOD);\n    long long a4 = (a3 % MOD);\n    long long b4\
    \ = (b3 % MOD);\n    long long c4 = (c3 % MOD);\n    if (a1 == b2 && b1 == c2)\n\
    \        return true;\n    if (a1 == c2 && c1 == b2)\n        return true;\n \
    \   if (a2 == b3 && b2 == c3)\n        return true;\n    if (a2 == c3 && c3 ==\
    \ b3)\n        return true;\n    if (a3 == b4 && b4 == c4)\n        return true;\n\
    \    if (a3 == c4 && c4 == b4)\n        return true;\n    return false;\n}\nint\
    \ main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_scfh_3t.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmp_scfh_3t.cpp:14:29: error: \u2018MOD\u2019\
    \ was not declared in this scope\n   14 |     long long root = (ans % MOD);\n\
    \      |                             ^~~\n/tmp/tmp_scfh_3t.cpp:20:9: error: \u2018\
    swap\u2019 was not declared in this scope\n   20 |         swap(a, b);\n     \
    \ |         ^~~~\n/tmp/tmp_scfh_3t.cpp:20:9: note: suggested alternatives:\nIn\
    \ file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmp_scfh_3t.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:2029:5:\
    \ note:   \u2018std::__cxx11::swap\u2019\n 2029 |     swap(match_results<_Bi_iter,\
    \ _Alloc>& __lhs,\n      |     ^~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/exception:143,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp_scfh_3t.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/exception_ptr.h:166:5:\
    \ note:   \u2018std::__exception_ptr::swap\u2019\n  166 |     swap(exception_ptr&\
    \ __lhs, exception_ptr& __rhs)\n      |     ^~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/nested_exception.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/exception:144,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/includ"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    long long a1 = (a + b + c) / 2;\n    long long b1\
    \ = (a + b) / 2;\n    long long c1 = (a + b) / 2;\n    long long a2 = (a1 + b1\
    \ + c1) / 2;\n    long long b2 = (a1 + b1) / 2;\n    long long c2 = (a1 + b1)\
    \ / 2;\n    long long a3 = (a2 + b2 + c2) / 2;\n    long long b3 = (a2 + b2) /\
    \ 2;\n    long long c3 = (a2 + b2) / 2;\n    long long a4 = (a3 + b3 + c3) / 2;\n\
    \    long long b4 = (a3 + b3) / 2;\n    long long c4 = (a3 + b3) / 2;\n    long\
    \ long a5 = (a4 + b4 + c4) / 2;\n    long long b5 = (a4 + b4) / 2;\n    long long\
    \ c5 = (a4 + b4) / 2;\n    long long a6 = (a5 + b5 + c5) / 2;\n    long long b6\
    \ = (a5 + b5) / 2;\n    long long c6 = (a5 + b5) / 2;\n    long long a7 = (a6\
    \ + b6 + c6) / 2;\n    long long b7 = (a6 + b6) / 2;\n    long long c7 = (a6 +\
    \ b6) / 2;\n    long long a8 = (a7 + b7 + c7) / 2;\n    long long b8 = (a7 + b7)\
    \ / 2;\n    long long c8 = (a7 + b7) / 2;\n    long long a9 = (a8 + b8 + c8) /\
    \ 2;\n    long long b9 = (a8 + b8) / 2;\n    long long c9 = (a8 + b8) / 2;\n \
    \   long long a10 = (a9 + b9 + c9) / 2;\n    long long b10 = (a9 + b9) / 2;\n\
    \    long long c10 = (a9 + b9) / 2;\n    long long a11 = (a10 + b10 + c10) / 2;\n\
    \    long long b11 = (a10 + b10) / 2;\n    long long c11 = (a10 + b10) / 2;\n\
    \    long long a12 = (a11 + b11 + c11) / 2;\n    long long b12 = (a11 + b11) /\
    \ 2;\n    long long c12 = (a11 + b11) / 2;\n    long long a13 = (a12 + b12 + c12)\
    \ / 2;\n    long long b13 = (a12 + b12) / 2;\n    long long c13 = (a12 + b12)\
    \ / 2;\n    long long a14 = (a13 + b13 + c13) / 2;\n    long long b14 = (a13 +\
    \ b13) / 2;\n    long long c14 = (a13 + b13) / 2;\n\n}\nint main() {\n    auto\
    \ candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n\
    \    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  stdout: ''
  stderr: "tmp0yniromg: /tmp/tmp0yniromg.cpp:57: int main(): Assertion `candidate((3),\
    \ (4), (5)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    long d = b * b - 4 * a * c;\n    if (d < 0) {\n  \
    \      return false;\n    }\n    long root = (long) sqrt(d);\n    long t1 = (-b\
    \ + root) / (2 * a);\n    long t2 = (-b - root) / (2 * a);\n    if (t1 < 0 ||\
    \ t2 < 0 || t1 > a || t2 > a) {\n        return false;\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpv90iza5i: /tmp/tmpv90iza5i.cpp:25: int main(): Assertion `candidate((3),\
    \ (4), (5)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    if (a > b && a > c) {\n        if (b > c) {\n    \
    \        return true;\n        } else {\n            return false;\n        }\n\
    \    } else if (b > a && b > c) {\n        if (a > c) {\n            return true;\n\
    \        } else {\n            return false;\n        }\n    } else if (c > a\
    \ && c > b) {\n        if (a > b) {\n            return true;\n        } else\
    \ {\n            return false;\n        }\n    } else {\n        return false;\n\
    \    }\n}\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  stdout: ''
  stderr: "tmp6jsmu9dk: /tmp/tmp6jsmu9dk.cpp:35: int main(): Assertion `candidate((3),\
    \ (4), (5)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    long long a1 = (a + b + c) / 2;\n    long long b1\
    \ = (a + b - c) / 2;\n    long long c1 = (a - b - c) / 2;\n    long long a2 =\
    \ (a1 + b1 + c1) / 2;\n    long long b2 = (a1 + b1 - c1) / 2;\n    long long c2\
    \ = (a1 - b1 - c2) / 2;\n    long long a3 = (a2 + b2 + c2) / 2;\n    long long\
    \ b3 = (a2 + b2 - c2) / 2;\n    long long c3 = (a2 - b2 - c3) / 2;\n    return\
    \ a * b * c == a1 * b1 * c1 + a2 * b2 * c2 + a3 * b3 * c3;\n}\nint main() {\n\
    \    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5))\
    \ == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpowvexa1p: /tmp/tmpowvexa1p.cpp:24: int main(): Assertion `candidate((3),\
    \ (4), (5)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    // Write your code here\n    if(a==b||a==c||b==c)\n\
    \        return true;\n    else if(a>b&&a>c)\n        return false;\n    else\
    \ if(b>a&&b>c)\n        return false;\n    else if(c>a&&c>b)\n        return false;\n\
    \    else\n        return true;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp5otkqzam: /tmp/tmp5otkqzam.cpp:25: int main(): Assertion `candidate((3),\
    \ (4), (5)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    long long ans = (a * b * c) - (a * c * b) - (b * a\
    \ * c);\n    if (ans == 0)\n        return true;\n    if (ans > 0)\n        return\
    \ false;\n    return true;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpoxamf422: /tmp/tmpoxamf422.cpp:21: int main(): Assertion `candidate((1),\
    \ (2), (3)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    if(a==b){\n        if(a==c){\n            return true;\n\
    \        }\n        return false;\n    }\n    if(a==c){\n        return false;\n\
    \    }\n    if(b==c){\n        return false;\n    }\n    if(a>b){\n        if(a>c){\n\
    \            return true;\n        }\n        return false;\n    }\n    if(b>c){\n\
    \        return false;\n    }\n    if(a>c){\n        if(b>c){\n            return\
    \ true;\n        }\n        return false;\n    }\n    return false;\n}\nint main()\
    \ {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4),\
    \ (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  stdout: ''
  stderr: "tmp6b3izxw8: /tmp/tmp6b3izxw8.cpp:42: int main(): Assertion `candidate((3),\
    \ (4), (5)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    long long a1 = abs(a), b1 = abs(b), c1 = abs(c);\n\
    \    long long a2 = a1 + b1, c2 = a1 + c1, b2 = b1 + c1;\n    long long a3 = a1\
    \ + b2, b3 = a1 + c2, c3 = b1 + c2;\n    long long a4 = a2 + b2, b4 = a2 + c2,\
    \ c4 = b2 + c2;\n    long long a5 = a2 + b3, b5 = a2 + c3, c5 = b2 + c3;\n   \
    \ long long a6 = a3 + b3, b6 = a3 + c3, c6 = b3 + c3;\n    long long a7 = a3 +\
    \ b4, b7 = a3 + c4, c7 = b3 + c4;\n    long long a8 = a4 + b4, b8 = a4 + c4, c8\
    \ = b4 + c4;\n    long long a9 = a4 + b5, b9 = a4 + c5, c9 = b5 + c5;\n    long\
    \ long a10 = a5 + b5, b10 = a5 + c5, c10 = b5 + c5;\n    long long a11 = a5 +\
    \ b6, b11 = a5 + c6, c11 = b6 + c6;\n    long long a12 = a6 + b6, b12 = a6 + c6,\
    \ c12 = b6 + c6;\n    long long a13 = a6 + b7, b13 = a6 + c7, c13 = b7 + c7;\n\
    \    long long a14 = a7 + b7, b14 = a7 + c7, c14 = b7 + c7;\n    long long a15\
    \ = a8 + b8, b15 = a8 + c8, c15 = b8 + c8;\n    long long a16 = a8 + b9, b16 =\
    \ a8 + c9, c16 = b9 + c9;\n    long long a17 = a9 + b9, b17 = a9 + c9, c17 = b9\
    \ + c9;\n    long long a18 = a9 + b10, b18 = a9 + c10, c18 = b10 + c10;\n    long\
    \ long a19 = a10 + b10, b19 = a10 + c10, c19 = b10 + c10;\n    long long a20 =\
    \ a10 + b11, b20 = a10 + c11, c20 = b11 + c11;\n    long long a21 = a11 + b11,\
    \ b21 = a11 + c11, c21 = b11 + c11;\n    long long a22 = a11 + b12, b22 = a11\
    \ + c12, c22 = b12 + c12;\n    \n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp_gt1c7gh: /tmp/tmp_gt1c7gh.cpp:37: int main(): Assertion `candidate((3),\
    \ (4), (5)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    if(a==b||a==c||b==c)\n        return true;\n    if(a>b&&a>c)\n\
    \        return false;\n    if(b>c&&b>a)\n        return false;\n    if(a>b&&b>c)\n\
    \        return false;\n    if(a>c&&a>b)\n        return false;\n    if(b>c&&b>a)\n\
    \        return false;\n    if(a>b&&b>c)\n        return false;\n    if(a>c&&a>b)\n\
    \        return false;\n    if(b>c&&b>a)\n        return false;\n    return false;\n\
    }\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpif6j6xnt: /tmp/tmpif6j6xnt.cpp:33: int main(): Assertion `candidate((3),\
    \ (4), (5)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    if (a == 0 && b == 0 && c == 0) return true;\n   \
    \ long d = b * b - 4 * a * c;\n    if (d < 0) return false;\n    long root = (long)\
    \ sqrt(d);\n    long x0 = ((-b) + root) / 2;\n    long y0 = ((-b) - root) / 2;\n\
    \    long x1 = ((-b) + root) / 2;\n    long y1 = ((-b) - root) / 2;\n    long\
    \ x2 = ((-b) - root) / 2;\n    long y2 = ((-b) + root) / 2;\n    long x3 = ((-b)\
    \ + root) / 2;\n    long y3 = ((-b) - root) / 2;\n    long x4 = ((-b) - root)\
    \ / 2;\n    long y4 = ((-b) + root) / 2;\n    long x5 = ((-b) + root) / 2;\n \
    \   long y5 = ((-b) - root) / 2;\n    long x6 = ((-b) - root) / 2;\n    long y6\
    \ = ((-b) + root) / 2;\n    long x7 = ((-b) - root) / 2;\n    long y7 = ((-b)\
    \ + root) / 2;\n    long x8 = ((-b) + root) / 2;\n    long y8 = ((-b) - root)\
    \ / 2;\n    long x9 = ((-b) - root) / 2;\n    long y9 = ((-b) + root) / 2;\n \
    \   long x10 = ((-b) + root) / 2;\n    long y10 = ((-b) - root) / 2;\n    long\
    \ x11 = ((-b) - root) / 2;\n    long y11 = ((-b) + root) / 2;\n    long x12 =\
    \ ((-b) - root) / 2;\n    long y12 = ((-b) + root) / 2;\n    long x13 = ((-b)\
    \ - root) / 2;\n    long y13 = ((-b) + root) / 2;\n    long x14 = ((-b) - root)\
    \ / 2;\n    long y14 = ((-b) + root) / 2;\n    long x15 = ((-b) + root) / 2;\n\
    \    long y15 = ((-b) - root) / 2;\n    long x16 = ((-b) - root) / 2;\n    long\
    \ y16 = ((-b) + root) / 2;\n    long x17 = ((-b) + root) / 2;\n    long y17 =\
    \ ((-b) - root) / 2;\n    long x18 = ((-b) - root) / 2;\n    long y18 = ((-b)\
    \ + root) / 2;\n    long x19 = ((-b) + root) / 2;\n    long y19 = ((-b) - root)\
    \ / 2;\n    long x20 = ((-b) - root) / 2;\n    long y20 = ((-b) + root) / 2;\n\
    \    long x21 = ((-b) + root) / 2;\n    long y21 = ((-b) - \n}\nint main() {\n\
    \    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5))\
    \ == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpnexjlz_9.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmpnexjlz_9.cpp:59:1: error: expected\
    \ primary-expression before \u2018}\u2019 token\n   59 | }\n      | ^\n/tmp/tmpnexjlz_9.cpp:58:23:\
    \ error: expected \u2018)\u2019 before \u2018}\u2019 token\n   58 |     long y21\
    \ = ((-b) -\n      |                ~      ^\n      |                       )\n\
    \   59 | }\n      | ~                      \n/tmp/tmpnexjlz_9.cpp:59:1: warning:\
    \ control reaches end of non-void function [-Wreturn-type]\n   59 | }\n      |\
    \ ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    // Write your code here\n    long long int ans = 0,\
    \ temp = 0;\n    long long int max = (a + b + c) / 2;\n    long long int min =\
    \ (a + b + c) / 2;\n    long long int mid = (a + b + c) / 2;\n    long long int\
    \ sum = (a + b + c) / 2;\n    long long int sum1 = (a + b + c) / 2;\n    long\
    \ long int sum2 = (a + b + c) / 2;\n    long long int sum3 = (a + b + c) / 2;\n\
    \    long long int sum4 = (a + b + c) / 2;\n    long long int sum5 = (a + b +\
    \ c) / 2;\n    long long int sum6 = (a + b + c) / 2;\n    long long int sum7 =\
    \ (a + b + c) / 2;\n    long long int sum8 = (a + b + c) / 2;\n    long long int\
    \ sum9 = (a + b + c) / 2;\n    long long int sum10 = (a + b + c) / 2;\n    long\
    \ long int sum11 = (a + b + c) / 2;\n    long long int sum12 = (a + b + c) / 2;\n\
    \    long long int sum13 = (a + b + c) / 2;\n    long long int sum14 = (a + b\
    \ + c) / 2;\n    long long int sum15 = (a + b + c) / 2;\n    long long int sum16\
    \ = (a + b + c) / 2;\n    long long int sum17 = (a + b + c) / 2;\n    long long\
    \ int sum18 = (a + b + c) / 2;\n    long long int sum19 = (a + b + c) / 2;\n \
    \   long long int sum20 = (a + b + c) / 2;\n    long long int sum21 = (a + b +\
    \ c) / 2;\n    long long int sum22 = (a + b + c) / 2;\n    long long int sum23\
    \ = (a + b + c) / 2;\n    long long int sum24 = (a + b + c) / 2;\n    long long\
    \ int sum25 = (a + b + c) / 2;\n    long long int sum26 = (a + b + c) / 2;\n \
    \   long long int sum27 = (a + b + c) / 2;\n    long long int sum28 = (a + b +\
    \ c) / 2;\n    long long int sum29 = (a + b + c) / 2;\n    long long int sum30\
    \ = (a + b + c) / 2;\n    long long int sum31 = (a + b + c) / 2;\n    long long\
    \ int sum32 = (a + b + \n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpabjvc6z3.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmpabjvc6z3.cpp:49:1: error: expected\
    \ primary-expression before \u2018}\u2019 token\n   49 | }\n      | ^\n/tmp/tmpabjvc6z3.cpp:48:35:\
    \ error: expected \u2018)\u2019 before \u2018}\u2019 token\n   48 |     long long\
    \ int sum32 = (a + b +\n      |                           ~       ^\n      | \
    \                                  )\n   49 | }\n      | ~                   \
    \               \n/tmp/tmpabjvc6z3.cpp:49:1: warning: no return statement in function\
    \ returning non-void [-Wreturn-type]\n   49 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    long long a1 = (a + b + c) / 2;\n    long long b1\
    \ = (b + c + a) / 2;\n    long long c1 = (c + a + b) / 2;\n    long long a2 =\
    \ (a1 + b1 + c1) / 2;\n    long long b2 = (b1 + c1 + a2) / 2;\n    long long c2\
    \ = (c1 + a2 + b2) / 2;\n    long long a3 = (a2 + b2 + c2) / 2;\n    long long\
    \ b3 = (b2 + c2 + a3) / 2;\n    long long c3 = (c2 + a3 + b3) / 2;\n    long long\
    \ a4 = (a3 + b3 + c3) / 2;\n    long long b4 = (b3 + c3 + a4) / 2;\n    long long\
    \ c4 = (c4 + a4 + b4) / 2;\n    long long a5 = (a4 + b4 + c4) / 2;\n    long long\
    \ b5 = (b5 + c5 + a5) / 2;\n    long long c5 = (c5 + a5 + b5) / 2;\n    long long\
    \ a6 = (a5 + b5 + c5) / 2;\n    long long b6 = (b6 + c6 + a6) / 2;\n    long long\
    \ c6 = (c6 + a6 + b6) / 2;\n    long long a7 = (a6 + b6 + c6) / 2;\n    long long\
    \ b7 = (b7 + c7 + a7) / 2;\n    long long c7 = (c7 + a7 + b7) / 2;\n    long long\
    \ a8 = (a7 + b7 + c7) / 2;\n    long long b8 = (b8 + c8 + a8) / 2;\n    long long\
    \ c8 = (c8 + a8 + b8) / 2;\n    long long a9 = (a8 + b8 + c8) / 2;\n    long long\
    \ b9 = (b9 + c9 + a9) / 2;\n    long long c9 = (c9 + a9 + b9) / 2;\n    long long\
    \ a10 = (a9 + b9 + c9) / 2;\n    long long b10 = (b10 + c10 + a10) / 2;\n    long\
    \ long c10 = (c10 + a10 + b10) / 2;\n    long long a11 = (a10 + b10 + c10) / 2;\n\
    \    long long b11 = (b11 + c11 + a11) / 2;\n    long long c11 = (c11 + a11 +\
    \ b11) / 2;\n    long long a12 = (a11 + b11 + c11) / 2;\n    long long b12 = (b12\
    \ + c12 + a12) / 2;\n    long long c12 = (c12 + a12 + b12) / 2;\n    long long\
    \ a13 = (a12 + b12 + c12) / 2;\n    long long b13 = (\n}\nint main() {\n    auto\
    \ candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n\
    \    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1wyefs3p.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmp1wyefs3p.cpp:24:26: error: \u2018c5\u2019\
    \ was not declared in this scope; did you mean \u2018b5\u2019?\n   24 |     long\
    \ long b5 = (b5 + c5 + a5) / 2;\n      |                          ^~\n      |\
    \                          b5\n/tmp/tmp1wyefs3p.cpp:27:26: error: \u2018c6\u2019\
    \ was not declared in this scope; did you mean \u2018b6\u2019?\n   27 |     long\
    \ long b6 = (b6 + c6 + a6) / 2;\n      |                          ^~\n      |\
    \                          b6\n/tmp/tmp1wyefs3p.cpp:30:26: error: \u2018c7\u2019\
    \ was not declared in this scope; did you mean \u2018b7\u2019?\n   30 |     long\
    \ long b7 = (b7 + c7 + a7) / 2;\n      |                          ^~\n      |\
    \                          b7\n/tmp/tmp1wyefs3p.cpp:33:26: error: \u2018c8\u2019\
    \ was not declared in this scope; did you mean \u2018b8\u2019?\n   33 |     long\
    \ long b8 = (b8 + c8 + a8) / 2;\n      |                          ^~\n      |\
    \                          b8\n/tmp/tmp1wyefs3p.cpp:36:26: error: \u2018c9\u2019\
    \ was not declared in this scope; did you mean \u2018b9\u2019?\n   36 |     long\
    \ long b9 = (b9 + c9 + a9) / 2;\n      |                          ^~\n      |\
    \                          b9\n/tmp/tmp1wyefs3p.cpp:39:28: error: \u2018c10\u2019\
    \ was not declared in this scope; did you mean \u2018b10\u2019?\n   39 |     long\
    \ long b10 = (b10 + c10 + a10) / 2;\n      |                            ^~~\n\
    \      |                            b10\n/tmp/tmp1wyefs3p.cpp:42:28: error: \u2018\
    c11\u2019 was not declared in this scope; did you mean \u2018b11\u2019?\n   42\
    \ |     long long b11 = (b11 + c11 + a11) / 2;\n      |                      \
    \      ^~~\n      |                            b11\n/tmp/tmp1wyefs3p.cpp:45:28:\
    \ error: \u2018c12\u2019 was not declared in this scope; did you mean \u2018b12\u2019\
    ?\n   45 |     long long b12 = (b12 + c12 + a12) / 2;\n      |               \
    \             ^~~\n      |                            b12\n/tmp/tmp1wyefs3p.cpp:49:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n   49 | }\n \
    \     | ^\n/tmp/tmp1wyefs3p.cpp:48:22: error: expected \u2018)\u2019 before \u2018\
    }\u2019 token\n   48 |     long long b13 = (\n      |                     ~^\n\
    \      |       "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    // Write your code here\n    long long int sum = a+b+c;\n\
    \    if(sum%2==0){\n        return false;\n    }\n    long long int sum1=(a+b+c)/2;\n\
    \    if(sum1%2==0){\n        return false;\n    }\n    long long int sum2=(a+b+c)/2;\n\
    \    if(sum2%2==0){\n        return false;\n    }\n    long long int sum3=(a+b+c)/2;\n\
    \    if(sum3%2==0){\n        return false;\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4),\
    \ (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpb26irkuw: /tmp/tmpb26irkuw.cpp:32: int main(): Assertion `candidate((3),\
    \ (4), (5)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    long d = b * b - 4 * a * c;\n    if (d < 0)\n    \
    \    return false;\n    long root = (long) sqrt(d);\n    long s = (-b + root)\
    \ / (2 * a);\n    long t = (-b - root) / (2 * a);\n    return (s == 0 && t ==\
    \ 0) || (s == t && b != c);\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp3mz1rbnu: /tmp/tmp3mz1rbnu.cpp:21: int main(): Assertion `candidate((3),\
    \ (4), (5)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    if (a > b && a > c) return true;\n    if (b > c &&\
    \ b > a) return true;\n    if (c > a && c > b) return true;\n    return false;\n\
    }\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpmsus9t48: /tmp/tmpmsus9t48.cpp:19: int main(): Assertion `candidate((1),\
    \ (2), (3)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    // Write your code here\n    long long int sum = a+b+c;\n\
    \    long long int sum1 = a*a+b*b+c*c;\n    long long int sum2 = a*a+b*b+c*c-a*a*b;\n\
    \    long long int sum3 = a*a+b*b+c*c-a*a*b-a*a*c;\n    long long int sum4 = a*a+b*b+c*c-a*a*b-a*a*c-a*a*b;\n\
    \    long long int sum5 = a*a+b*b+c*c-a*a*b-a*a*c-a*a*c-a*a*b;\n    long long\
    \ int sum6 = a*a+b*b+c*c-a*a*b-a*a*c-a*a*c-a*a*b;\n    long long int sum7 = a*a+b*b+c*c-a*a*b-a*a*c-a*a*c-a*a*b;\n\
    \    long long int sum8 = a*a+b*b+c*c-a*a*b-a*a*c-a*a*c-a*a*c;\n    long long\
    \ int sum9 = a*a+b*b+c*c-a*a*b-a*a*c-a*a*c-a*a*c;\n    long long int sum10 = a*a+b*b+c*c-a*a*b-a*a*c-a*a*c-a*a*c;\n\
    \    long long int sum11 = a*a+b*b+c*c-a*a*b-a*a*c-a*a*c-a*a*c;\n    long long\
    \ int sum12 = a*a+b*b+c*c-a*a*b-a*a*c-a*a*c-a*a*c;\n    long long int sum13 =\
    \ a*a+b*b+c*c-a*a*b-a*a*c-a*a*c-a*a*c;\n    long long int sum14 = a*a+b*b+c*c-a*a*b-a*a*c-a*a*c-a*a*c;\n\
    \    long long int sum15 = a*a+b*b+c*c-a*a*b-a*a*c-a*a*c-a*a*c;\n    long long\
    \ int sum16 = a*a+b*b+c*c-a*a*b-a*a*c-a*a*c-a*a*c;\n    long long int sum17 =\
    \ a*a+b*b+c*c-a*a*b-a*a*c-a*a*c-a*a*c;\n    long long int sum18 = a*a+b*b+c*c-a*a*b-a*a*c-a*a*c-a*a*c;\n\
    \    long long int sum19 = a*a+b*b+c*c-a*a*b-a*a*c-a*a*c-a*a*c;\n    \n}\nint\
    \ main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  stdout: ''
  stderr: "tmp6rvkgnn6: /tmp/tmp6rvkgnn6.cpp:36: int main(): Assertion `candidate((3),\
    \ (4), (5)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    long d = b * b - 4 * a * c;\n    if (d < 0) {\n  \
    \      return false;\n    }\n    long root = (long) sqrt(d);\n    long s = (-b\
    \ + root) / (2 * a);\n    long t = (-b - root) / (2 * a);\n    return (s == 0\
    \ && t == 0) || (s == t && s == 0);\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmplj6quusx: /tmp/tmplj6quusx.cpp:22: int main(): Assertion `candidate((3),\
    \ (4), (5)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    long long a1 = abs(a), b1 = abs(b), c1 = abs(c);\n\
    \    long long a2 = a1 + b1, b2 = b1 + c1, c2 = a1 + c1;\n    long long a3 = a2\
    \ + b2, b3 = b2 + c2, c3 = a2 + c2;\n    long long a4 = a3 + b3, b4 = b3 + c3,\
    \ c4 = a3 + c3;\n    long long a5 = a4 + b4, b5 = b4 + c4, c5 = a4 + c4;\n   \
    \ long long a6 = a5 + b5, b6 = b6 + c5, c6 = a5 + c5;\n    long long a7 = a6 +\
    \ b6, b7 = b7 + c6, c7 = a6 + c6;\n    long long a8 = a7 + b7, b8 = b7 + c7, c8\
    \ = a7 + c7;\n    long long a9 = a8 + b8, b9 = b9 + c8, c9 = a8 + c8;\n    long\
    \ long a10 = a9 + b9, b10 = b9 + c9, c10 = a9 + c9;\n    long long a11 = a10 +\
    \ b10, b11 = b10 + c10, c11 = a10 + c10;\n    long long a12 = a11 + b11, b12 =\
    \ b11 + c11, c12 = a11 + c11;\n    long long a13 = a12 + b12, b13 = b12 + c12,\
    \ c13 = a12 + c12;\n    long long a14 = a13 + b13, b14 = b13 + c13, c14 = a13\
    \ + c13;\n    long long a15 = a14 + b14, b15 = b14 + c14, c15 = a14 + c14;\n \
    \   long long a16 = a15 + b15, b16 = b15 + c15, c16 = a15 + c15;\n    long long\
    \ a17 = a16 + b16, b17 = b16 + c16, c17 = a16 + c16;\n    long long a18 = a17\
    \ + b17, b18 = b17 + c17, c18 = a17 + c17;\n    long long a19 = a18 + b18, b19\
    \ = b18 + c18, c19 = a18 + c18;\n    long long a20 = a19 + b19, b20 = b19 + c19,\
    \ c20 = a19 + c19;\n    long long a21 = a20 + b20, b21 = b20 + c20, c21 = a20\
    \ + c20;\n    long long a22 = a21 + b21, b22 = b21 + c21, \n}\nint main() {\n\
    \    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5))\
    \ == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7kjnnxle.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmp7kjnnxle.cpp:33:1: error: expected\
    \ unqualified-id before \u2018}\u2019 token\n   33 | }\n      | ^\n/tmp/tmp7kjnnxle.cpp:33:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    if (a == 0 || b == 0 || c == 0) return false;\n  \
    \  long d = b * b - 4 * a * c;\n    if (d < 0) return false;\n    long x = (long)\
    \ sqrt(d);\n    long y = (long) (-b + x) / a;\n    long z = (long) (-b - x) /\
    \ a;\n    return ((x * (x * a + b) + c) == 0);\n}\nint main() {\n    auto candidate\
    \ = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n \
    \   assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10), (6),\
    \ (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7),\
    \ (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n\
    \    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpq0f_5zyt: /tmp/tmpq0f_5zyt.cpp:21: int main(): Assertion `candidate((3),\
    \ (4), (5)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    if (a == 0 || b == 0 || c == 0)\n        return false;\n\
    \    long d = b * b - 4 * a * c;\n    if (d < 0)\n        return false;\n    long\
    \ x = (long) sqrt(d);\n    long y = (long) (-b + x) / (2 * a);\n    if (y > 0)\n\
    \        return true;\n    return false;\n}\nint main() {\n    auto candidate\
    \ = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n \
    \   assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10), (6),\
    \ (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7),\
    \ (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n\
    \    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  stdout: ''
  stderr: "tmp2mg2uz8k: /tmp/tmp2mg2uz8k.cpp:24: int main(): Assertion `candidate((3),\
    \ (4), (5)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    long ab = abs(b - a);\n    long ac = abs(c - a);\n\
    \    long bc = abs(b - c);\n    long cb = abs(c - b);\n    long abc = ab + ac\
    \ + bc;\n    long acb = ac + cb;\n    long bca = bc;\n    long cab = cb;\n   \
    \ long acbc = acb + cbc;\n    long bcab = bc + cab;\n    long acbcab = acbc +\
    \ cab;\n    long bcabc = bcab + acbc;\n    long acbcabc = acbcab + cabc;\n   \
    \ long bcabcb = bcabc + acbcb;\n    long acbcabcb = acbcabc + cabcb;\n    long\
    \ bcabcbc = bcabcb + acbcbc;\n    long acbcabcbc = acbcabcb + cabcbc;\n    long\
    \ bcabcbcd = bcabcbc + acbcbcd;\n    long acbcabcbcd = acbcabcbc + cabcbcd;\n\
    \    long bcabcbcde = bcabcbcd + acbcbcde;\n    long acbcabcbcde = acbcabcbcd\
    \ + cabcbcde;\n    long bcabcbcdef = bcabcbcde + acbcbcdef;\n    long acbcabcbcdef\
    \ = acbcabcbcde + cabcbcdef;\n    long bcabcbcdefg = bcabcbcdef + acbcbcdefg;\n\
    \    long acbcabcbcdefg = acbcabcbcde + cabcbcdefg;\n    long bcabcbcdefgh = bcabcbcdefg\
    \ + acbcbcdefgh;\n    long acbcabcbcdefgh = acbcabcbcdefg + cabcbcdefgh;\n   \
    \ long bcabcbcdefghi = bcabcbcdefgh + acbcbcdefghi;\n    long acbcabcbcdefghi\
    \ = acbcabcbcdefgh + cabcbcdefghi;\n    long bcabcbcdefghij = bcabcbcdefghi +\
    \ acbcbcdefghij;\n    long acbcabcbcdefghij = acbcabcbcdefghi + cabcbcdefghij;\n\
    \    long bcabcbcdefghijk = bcabcbcdef\n}\nint main() {\n    auto candidate =\
    \ right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n   \
    \ assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10), (6),\
    \ (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7),\
    \ (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n\
    \    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp425cbpf3.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmp425cbpf3.cpp:19:23: error: \u2018cbc\u2019\
    \ was not declared in this scope; did you mean \u2018acbc\u2019?\n   19 |    \
    \ long acbc = acb + cbc;\n      |                       ^~~\n      |         \
    \              acbc\n/tmp/tmp425cbpf3.cpp:23:29: error: \u2018cabc\u2019 was not\
    \ declared in this scope; did you mean \u2018bcabc\u2019?\n   23 |     long acbcabc\
    \ = acbcab + cabc;\n      |                             ^~~~\n      |        \
    \                     bcabc\n/tmp/tmp425cbpf3.cpp:24:27: error: \u2018acbcb\u2019\
    \ was not declared in this scope; did you mean \u2018acbcab\u2019?\n   24 |  \
    \   long bcabcb = bcabc + acbcb;\n      |                           ^~~~~\n  \
    \    |                           acbcab\n/tmp/tmp425cbpf3.cpp:25:31: error: \u2018\
    cabcb\u2019 was not declared in this scope; did you mean \u2018bcabcb\u2019?\n\
    \   25 |     long acbcabcb = acbcabc + cabcb;\n      |                       \
    \        ^~~~~\n      |                               bcabcb\n/tmp/tmp425cbpf3.cpp:26:29:\
    \ error: \u2018acbcbc\u2019 was not declared in this scope; did you mean \u2018\
    acbcabc\u2019?\n   26 |     long bcabcbc = bcabcb + acbcbc;\n      |         \
    \                    ^~~~~~\n      |                             acbcabc\n/tmp/tmp425cbpf3.cpp:27:33:\
    \ error: \u2018cabcbc\u2019 was not declared in this scope; did you mean \u2018\
    bcabcbc\u2019?\n   27 |     long acbcabcbc = acbcabcb + cabcbc;\n      |     \
    \                            ^~~~~~\n      |                                 bcabcbc\n\
    /tmp/tmp425cbpf3.cpp:28:31: error: \u2018acbcbcd\u2019 was not declared in this\
    \ scope; did you mean \u2018bcabcbcd\u2019?\n   28 |     long bcabcbcd = bcabcbc\
    \ + acbcbcd;\n      |                               ^~~~~~~\n      |         \
    \                      bcabcbcd\n/tmp/tmp425cbpf3.cpp:29:35: error: \u2018cabcbcd\u2019\
    \ was not declared in this scope; did you mean \u2018bcabcbcd\u2019?\n   29 |\
    \     long acbcabcbcd = acbcabcbc + cabcbcd;\n      |                        \
    \           ^~~~~~~\n      |                                   bcabcbcd\n/tmp/tmp425cbpf3.cpp:30:33:\
    \ error: \u2018acbcbcde\u2019 was not declared in this scope; did you mean \u2018\
    bcabcbcde\u2019?\n   30 |   "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    // Write your code here\n    long d = b * b - 4 *\
    \ a * c;\n    if (d < 0) {\n        return false;\n    }\n    long e = sqrt(d);\n\
    \    long f = (b + e) / (2 * a);\n    long g = (c + e) / (2 * a);\n    long h\
    \ = (b - e) / (2 * a);\n    if (f < 0 || g < 0 || h < 0) {\n        return false;\n\
    \    }\n    if (f > g) {\n        return false;\n    }\n    if (f > h) {\n   \
    \     return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n \
    \   assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10), (6),\
    \ (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7),\
    \ (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n\
    \    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpueoc7set: /tmp/tmpueoc7set.cpp:33: int main(): Assertion `candidate((3),\
    \ (4), (5)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    long d = b * b - 4 * a * c;\n    if (d < 0) {\n  \
    \      return false;\n    }\n    long root = (long) sqrt(d);\n    long s = (-b\
    \ + root) / (2 * a);\n    long t = (-b - root) / (2 * a);\n    return (s == 0\
    \ && t == 0) || (s > 0 && t > 0);\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpj0o6sbpd: /tmp/tmpj0o6sbpd.cpp:22: int main(): Assertion `candidate((3),\
    \ (4), (5)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    // Write your code here\n    long d = b * b - 4 *\
    \ a * c;\n    if (d < 0) {\n        return false;\n    }\n    long root = (long)\
    \ sqrt(d);\n    long t1 = (-b + root) / (2 * a);\n    long t2 = (-b - root) /\
    \ (2 * a);\n    if (t1 > 0 && t2 > 0) {\n        return true;\n    }\n    if (t1\
    \ < 0 && t2 < 0) {\n        return true;\n    }\n    return false;\n}\nint main()\
    \ {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4),\
    \ (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpmpdbdi2r: /tmp/tmpmpdbdi2r.cpp:29: int main(): Assertion `candidate((3),\
    \ (4), (5)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    long d = b * b - 4 * a * c;\n    if (d < 0)\n    \
    \    return false;\n    long e = std::sqrt(d);\n    long f = (b + e * 0.5) / a;\n\
    \    long g = (b - e * 0.5) / a;\n    return std::abs(f - g) <= 1;\n}\nint main()\
    \ {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4),\
    \ (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  stdout: ''
  stderr: "tmp9onntji2: /tmp/tmp9onntji2.cpp:21: int main(): Assertion `candidate((3),\
    \ (4), (5)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    long long a1 = abs(a), b1 = abs(b), c1 = abs(c);\n\
    \    long long a2 = a1 + b1, c2 = a1 + c1, b2 = b1 + c1;\n    long long ans =\
    \ a * b * b - c * c * c;\n    if (ans < 0) return false;\n    ans = sqrt(ans);\n\
    \    long long root1 = (-b + ans) / a1, root2 = (-b - ans) / a1;\n    if (root1\
    \ == root2) return true;\n    long long root3 = (-b + ans) / b1, root4 = (-b -\
    \ ans) / b1;\n    if (root3 == root4) return true;\n    long long root5 = (-b\
    \ + ans) / c1, root6 = (-b - ans) / c1;\n    if (root5 == root6) return true;\n\
    \    return false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp2a2hckst: /tmp/tmp2a2hckst.cpp:26: int main(): Assertion `candidate((3),\
    \ (4), (5)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    long long ans = (a * b * c) - (a * c * b) - (b * c\
    \ * a);\n    if (ans == 0)\n        return true;\n    long long sq = ans % b;\n\
    \    if (sq == 0)\n        return false;\n    long long sq1 = ans % c;\n    if\
    \ (sq1 == 0)\n        return false;\n    long long sq2 = sq % a;\n    if (sq2\
    \ == 0)\n        return false;\n    return true;\n}\nint main() {\n    auto candidate\
    \ = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n \
    \   assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10), (6),\
    \ (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7),\
    \ (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n\
    \    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  stdout: ''
  stderr: "tmp9nsk3v1i: /tmp/tmp9nsk3v1i.cpp:27: int main(): Assertion `candidate((3),\
    \ (4), (5)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    long d = b * b - 4 * a * c;\n    if (d < 0) {\n  \
    \      return false;\n    }\n    long root = d*d / (2 * a);\n    long x = (-b\
    \ - root) / (2 * a);\n    long y = (-b + root) / (2 * a);\n    return (x * x +\
    \ y * y) <= 1;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp4ya02w2i: /tmp/tmp4ya02w2i.cpp:22: int main(): Assertion `candidate((3),\
    \ (4), (5)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    if (a == 0 || b == 0 || c == 0)\n        return false;\n\
    \    long d = b * b - 4 * a * c;\n    if (d < 0)\n        return false;\n    long\
    \ x = (b + c) / 2;\n    long y = (-b - c) / 2;\n    long u = (a + b) / 2;\n  \
    \  long v = (a + c) / 2;\n    long w = sqrt(d);\n    long x1 = x;\n    long y1\
    \ = y;\n    long x2 = u;\n    long y2 = v;\n    long x3 = w;\n    long y3 = w;\n\
    \    long x4 = x;\n    long y4 = y;\n    long x5 = u;\n    long y5 = v;\n    long\
    \ x6 = w;\n    long y6 = w;\n    long x7 = x;\n    long y7 = y;\n    long x8 =\
    \ u;\n    long y8 = v;\n    long x9 = w;\n    long y9 = w;\n    long x10 = x;\n\
    \    long y10 = y;\n    long x11 = u;\n    long y11 = v;\n    long x12 = w;\n\
    \    long y12 = w;\n    long x13 = x;\n    long y13 = y;\n    long x14 = u;\n\
    \    long y14 = v;\n    long x15 = w;\n    long y15 = w;\n    long x16 = x;\n\
    \    long y16 = y;\n    long x17 = u;\n    long y17 = v;\n    long x18 = w;\n\
    \    long y18 = w;\n    long x19 = x;\n    long y19 = y;\n    long x20 = u;\n\
    \    long y20 = v;\n    long x21 = w;\n    long y21 = w;\n    long x22 = x;\n\
    \    long y22 = y;\n    long x23 = u;\n    long y23 = v;\n    long x24 = w;\n\
    \    long y24 = w;\n    long x25 = x;\n    long y25 = y;\n    long x26 = u;\n\
    \    long y26 = v;\n    long x27 = w;\n    long y27 = w;\n    long x28 = x;\n\
    \    long y28 = y;\n    long x29 = u;\n    long y29 = v;\n    long x30 = w;\n\
    \    long y30 = w;\n    long x31 = x;\n    long y31 = y;\n    long x32 = u;\n\
    }\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpfsa60dq5: /tmp/tmpfsa60dq5.cpp:87: int main(): Assertion `candidate((3),\
    \ (4), (5)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    if(a==b&&b==c) return true;\n    if(a==b||a==c||b==c)\
    \ return false; // Triangle is NOT right-angled.\n    long long ans = (a+b+c)/2;\n\
    \    long long sum = (ans*ans)-(a*a*a) + (b*b*b) - (a*a*b) - (a*b*a) + (b*b*c);\n\
    \    if(sum<0) return false;\n    else return true;\n}\nint main() {\n    auto\
    \ candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n\
    \    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  stdout: ''
  stderr: "tmp0lyprhtx: /tmp/tmp0lyprhtx.cpp:21: int main(): Assertion `candidate((1),\
    \ (2), (3)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    if (a > b && a > c) {\n        return true;\n    }\n\
    \    if (b > c && b > a) {\n        return true;\n    }\n    if (c > a && c >\
    \ b) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto\
    \ candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n\
    \    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpo4hhu2p2: /tmp/tmpo4hhu2p2.cpp:25: int main(): Assertion `candidate((1),\
    \ (2), (3)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    // Write your code here\n    if(a==b||a==c||b==c)\n\
    \        return true;\n    return false;\n}\nint main() {\n    auto candidate\
    \ = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n \
    \   assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10), (6),\
    \ (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7),\
    \ (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n\
    \    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  stdout: ''
  stderr: "tmprnuy6lr8: /tmp/tmprnuy6lr8.cpp:18: int main(): Assertion `candidate((3),\
    \ (4), (5)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    long long a1 = (a + b + c) / 2;\n    long long b1\
    \ = (b + c + a) / 2;\n    long long c1 = (c + a + b) / 2;\n    long long a2 =\
    \ (a1 + b1 + c1) / 2;\n    long long b2 = (b1 + c1 + a2) / 2;\n    long long c2\
    \ = (c1 + a2 + b2) / 2;\n    long long a3 = (a2 + b2 + c2) / 2;\n    long long\
    \ b3 = (b2 + c2 + a3) / 2;\n    long long c3 = (c2 + a3 + b3) / 2;\n    long long\
    \ a4 = (a3 + b3 + c3) / 2;\n    long long b4 = (b3 + c3 + a4) / 2;\n    long long\
    \ c4 = (c3 + a4 + b4) / 2;\n    long long a5 = (a4 + b4 + c4) / 2;\n    long long\
    \ b5 = (b4 + c4 + a5) / 2;\n    long long c5 = (c4 + a5 + b5) / 2;\n    long long\
    \ a6 = (a5 + b5 + c5) / 2;\n    long long b6 = (b5 + c5 + a6) / 2;\n    long long\
    \ c6 = (c5 + a6 + b6) / 2;\n    long long a7 = (a6 + b6 + c6) / 2;\n    long long\
    \ b7 = (b6 + c6 + a7) / 2;\n    long long c7 = (c6 + a7 + b7) / 2;\n    long long\
    \ a8 = (a7 + b7 + c7) / 2;\n    long long b8 = (b7 + c7 + a8) / 2;\n    long long\
    \ c8 = (c7 + a8 + b8) / 2;\n    long long a9 = (a8 + b8 + c8) / 2;\n    long long\
    \ b9 = (b8 + c8 + a9) / 2;\n    long long c9 = (c8 + a9 + b9) / 2;\n    long long\
    \ a10 = (a9 + b9 + c9) / 2;\n    long long b10 = (b9 + c9 + a10) / 2;\n    long\
    \ long c10 = (c9 + a10 + b10) / 2;\n    long long a11 = (a10 + b10 + c10) / 2;\n\
    \    long long b11 = (b10 + c10 + a11) / 2;\n    long long c11 = (c10 + a11 +\
    \ b11) / 2;\n    long long a12 = (a11 + b11 + c11) / 2;\n    long long b12 = (b11\
    \ + c11 + a12) / 2;\n    long long c12 = (c11 + a12 + b12) / 2;\n    long long\
    \ a13 = (a12 + b12 + c12) / 2;\n    long long b13 = (b12 + c12\n}\nint main()\
    \ {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4),\
    \ (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6zvrx89p.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmp6zvrx89p.cpp:48:31: error: expected\
    \ \u2018)\u2019 before \u2018}\u2019 token\n   48 |     long long b13 = (b12 +\
    \ c12\n      |                     ~         ^\n      |                      \
    \         )\n   49 | }\n      | ~                              \n/tmp/tmp6zvrx89p.cpp:49:1:\
    \ error: expected \u2018,\u2019 or \u2018;\u2019 before \u2018}\u2019 token\n\
    \   49 | }\n      | ^\n/tmp/tmp6zvrx89p.cpp:49:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    long long ans = (a * b * c) / 2;\n    long long sum\
    \ = (a + b + c) / 2;\n    long long diff = (a - b) * (b - c) * (c - a) / 4;\n\
    \    long long sum1 = (a + b + c) / 2;\n    long long sum2 = (a + b) * (b + c)\
    \ * (a + c) / 4;\n    long long sum3 = (a + b) * (b + c) * (a + c) / 4;\n    long\
    \ long sum4 = (a + b + c) * (a + b + c) / 4;\n    long long sum5 = (a + b) * (a\
    \ + c) * (a + c) / 4;\n    long long sum6 = (a + b) * (a + c) * (b + c) / 4;\n\
    \    long long sum7 = (a + b) * (a + c) * (a + c) / 4;\n    long long sum8 = (a\
    \ + b) * (a + c) * (a + c) / 4;\n    long long sum9 = (a + b) * (a + c) * (b +\
    \ c) / 4;\n    long long sum10 = (a + b) * (a + c) * (a + c) / 4;\n    long long\
    \ sum11 = (a + b) * (a + c) * (b + c) / 4;\n    long long sum12 = (a + b) * (a\
    \ + c) * (a + c) / 4;\n    long long sum13 = (a + b) * (a + c) * (b + c) / 4;\n\
    \    long long sum14 = (a + b) * (a + c) * (a + c) / 4;\n    long long sum15 =\
    \ (a + b) * (a + c) * (b + c) / 4;\n    long long sum16 = (a + b) * (a + c) *\
    \ (a + c) / 4;\n    long long sum17 = (a + b) * (a + c) * (b + c) / 4;\n    long\
    \ long sum18 = (a + b) * (a + c) * (a + c) / 4;\n    long long sum19 = (a + b)\
    \ * (a + c) * (b + c) / 4;\n    long long sum20 = (a + b) * (a + c) * (a + c)\
    \ / 4;\n    long long sum21 = (a + b) * (a + c) * (b + c) / 4;\n    long long\
    \ sum22 = (a + b) * (a + c) * (a + c) / 4;\n    long long sum23 = (a + b) * (a\
    \ + c) * (b + c) / 4;\n    long long sum24 = (a + b) * (a + c) * (a + c) / 4;\n\
    \    long long sum25 = (a + b) * (a + c) * (b + c) / 4;\n    long long sum26 =\
    \ (a + b) * (a + c) * (a + c) / 4;\n    long long sum27 = (a + b) * (a + c) *\
    \ (b + c) / 4;\n    long \n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpmnciitf2.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmpmnciitf2.cpp:42:1: error: expected\
    \ unqualified-id before \u2018}\u2019 token\n   42 | }\n      | ^\n/tmp/tmpmnciitf2.cpp:42:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    // Write your code here\n    if(a>b&&b>c&&c>a){\n\
    \        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n \
    \   assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10), (6),\
    \ (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7),\
    \ (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n\
    \    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  stdout: ''
  stderr: "tmp0i_xsm4x: /tmp/tmp0i_xsm4x.cpp:19: int main(): Assertion `candidate((3),\
    \ (4), (5)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    if (a < 0 || b < 0 || c < 0) {\n        return false;\n\
    \    }\n    if (a + b > c) {\n        return false;\n    }\n    if (a + c > b)\
    \ {\n        return false;\n    }\n    if (b + c > a) {\n        return false;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpp7a_zmuk: /tmp/tmpp7a_zmuk.cpp:27: int main(): Assertion `candidate((3),\
    \ (4), (5)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    if(a>b+c) return false;\n    if(a>c+b) return false;\n\
    \    if(b>c+a) return false;\n    return true;\n}\nint main() {\n    auto candidate\
    \ = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n \
    \   assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10), (6),\
    \ (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7),\
    \ (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n\
    \    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  stdout: ''
  stderr: "tmp43xyly1p: /tmp/tmp43xyly1p.cpp:19: int main(): Assertion `candidate((1),\
    \ (2), (3)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    long d = b * b - 4 * a * c;\n    if (d < 0) {\n  \
    \      return false;\n    }\n    long root = d*d / 2;\n    long s = (-b + sqrt(root))\
    \ / (2 * a);\n    long t = (-b - sqrt(root)) / (2 * a);\n    return (s == 0 &&\
    \ t == 0) || (s == t && s > 0);\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpi6v4xkix: /tmp/tmpi6v4xkix.cpp:22: int main(): Assertion `candidate((3),\
    \ (4), (5)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    if (a == 0 || b == 0 || c == 0)\n        return false;\n\
    \    long d = b * b - 4 * a * c;\n    if (d < 0)\n        return false;\n    long\
    \ x = (b + d) / (2 * a);\n    long y = (-b - d) / (2 * a);\n    return ((x * (x\
    \ * x + a) + c) * (x * x + a) < 0);\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp4tsqpujd: /tmp/tmp4tsqpujd.cpp:22: int main(): Assertion `candidate((3),\
    \ (4), (5)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    long long a1 = (a + b + c) / 2;\n    long long b1\
    \ = (a + b) / 2;\n    long long c1 = (a + b + c) / 2;\n    long long a2 = (a1\
    \ + b1 + c1) / 2;\n    long long b2 = (a1 + b1) / 2;\n    long long c2 = (a1 +\
    \ b1 + c1) / 2;\n    long long a3 = (a2 + b2 + c2) / 2;\n    long long b3 = (a2\
    \ + b2) / 2;\n    long long c3 = (a2 + b2 + c2) / 2;\n    long long a4 = (a3 +\
    \ b3 + c3) / 2;\n    long long b4 = (a3 + b3) / 2;\n    long long c4 = (a3 + b3\
    \ + c3) / 2;\n    long long a5 = (a4 + b4 + c4) / 2;\n    long long b5 = (a4 +\
    \ b4) / 2;\n    long long c5 = (a4 + b4 + c4) / 2;\n    long long a6 = (a5 + b5\
    \ + c5) / 2;\n    long long b6 = (a5 + b5) / 2;\n    long long c6 = (a5 + b5 +\
    \ c5) / 2;\n    long long a7 = (a6 + b6 + c6) / 2;\n    long long b7 = (a6 + b6)\
    \ / 2;\n    long long c7 = (a6 + b6 + c6) / 2;\n    long long a8 = (a7 + b7 +\
    \ c7) / 2;\n    long long b8 = (a7 + b7) / 2;\n    long long c8 = (a7 + b7 + c7)\
    \ / 2;\n    long long a9 = (a8 + b8 + c8) / 2;\n    long long b9 = (a8 + b8) /\
    \ 2;\n    long long c9 = (a8 + b8 + c8) / 2;\n    long long a10 = (a9 + b9 + c9)\
    \ / 2;\n    long long b10 = (a9 + b9) / 2;\n    long long c10 = (a9 + b9 + c9)\
    \ / 2;\n    long long a11 = (a10 + b10 + c10) / 2;\n    long long b11 = (a10 +\
    \ b10) / 2;\n    long long c11 = (a10 + b10 + c10) / 2;\n    long long a12 = (a11\
    \ + b11 + c11) / 2;\n    long long b12 = (a11 + b11) / 2;\n    long long c12 =\
    \ (a11 + b11 + c11) / 2;\n    long long a13 = (a12 + b12 + c12) / 2;\n    long\
    \ long b13 = (a12 + b12) / 2;\n    long long c13 = (a12 + b12 + c12) / 2;\n  \
    \  long long a14 = (a13 + b13\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpeudbo6mz.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmpeudbo6mz.cpp:50:31: error: expected\
    \ \u2018)\u2019 before \u2018}\u2019 token\n   50 |     long long a14 = (a13 +\
    \ b13\n      |                     ~         ^\n      |                      \
    \         )\n   51 | }\n      | ~                              \n/tmp/tmpeudbo6mz.cpp:51:1:\
    \ error: expected \u2018,\u2019 or \u2018;\u2019 before \u2018}\u2019 token\n\
    \   51 | }\n      | ^\n/tmp/tmpeudbo6mz.cpp:51:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    if (a == 0 && b == 0 && c == 0) return true;\n   \
    \ if (a == 0 || b == 0 || c == 0) return false;\n    long d = b * b - 4 * a *\
    \ c;\n    if (d < 0) return false;\n    long root = (long) sqrt(d);\n    long\
    \ x = ((b * b) - 4 * a * c) / root;\n    long y = ((-b) + root) / 2;\n    long\
    \ z = ((-a) + root) / 2;\n    if (x == y && x == z) return true;\n    return false;\n\
    }\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  stdout: ''
  stderr: "tmp809ssvm8: /tmp/tmp809ssvm8.cpp:24: int main(): Assertion `candidate((3),\
    \ (4), (5)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    if (a > b + c || b > a + c || c > a + b) {\n     \
    \   return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n \
    \   assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10), (6),\
    \ (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7),\
    \ (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n\
    \    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpx2o39ivo: /tmp/tmpx2o39ivo.cpp:19: int main(): Assertion `candidate((1),\
    \ (2), (3)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    if (a == 0 || b == 0 || c == 0)\n        return false;\n\
    \    long d = b * b - 4 * a * c;\n    if (d < 0)\n        return false;\n    long\
    \ e = ((b * b) - 4 * a * c) / d;\n    if (e < 0)\n        return false;\n    long\
    \ f = ((b * b) - 4 * a * c) / d;\n    if (f < 0)\n        return false;\n    long\
    \ g = a * a + b * b - c * c;\n    if (g < 0)\n        return false;\n    long\
    \ h = sqrt(g);\n    long i = a * h;\n    long j = b * h;\n    long k = c * h;\n\
    \    long l = a * j;\n    long m = b * j;\n    long n = c * j;\n    long o = a\
    \ * k;\n    long p = b * k;\n    long q = c * k;\n    long r = a * l;\n    long\
    \ s = b * l;\n    long t = c * l;\n    long u = a * m;\n    long v = b * m;\n\
    \    long w = c * m;\n    long x = a * n;\n    long y = b * n;\n    long z = c\
    \ * n;\n    long a = a * o;\n    long b = b * o;\n    long c = c * o;\n    long\
    \ d = a * p;\n    long e = b * p;\n    long f = c * p;\n    long g = a * q;\n\
    \    long h = b * q;\n    long i = c * q;\n    long j = a * r;\n    long k = b\
    \ * r;\n    long l = c * r;\n    long m = a * s;\n    long n = b * s;\n    long\
    \ o = c * s;\n    long p = a * t;\n    long q = b * t;\n    long r = c * t;\n\
    \    long s = a * u;\n    long t = b * u;\n    long u = c * u;\n    long v = a\
    \ * v;\n    long w = b * v;\n    long x = a * w;\n    long y = b * w;\n    long\
    \ z = c * w;\n    long a = a * x;\n    long b = b * x;\n    long c = c * x;\n\
    \    long d = a * y;\n    long e = b * y;\n    long f = c * y;\n    long g = a\
    \ * z;\n    long h = b * z;\n    long i = c * z;\n    long j = a * j;\n    long\
    \ k = b * j;\n    long l = c * j;\n    long m = a\n}\nint main() {\n    auto candidate\
    \ = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n \
    \   assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10), (6),\
    \ (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7),\
    \ (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n\
    \    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmprn60fkjv.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmprn60fkjv.cpp:44:10: error: declaration\
    \ of \u2018long int a\u2019 shadows a parameter\n   44 |     long a = a * o;\n\
    \      |          ^\n/tmp/tmprn60fkjv.cpp:45:10: error: declaration of \u2018\
    long int b\u2019 shadows a parameter\n   45 |     long b = b * o;\n      |   \
    \       ^\n/tmp/tmprn60fkjv.cpp:46:10: error: declaration of \u2018long int c\u2019\
    \ shadows a parameter\n   46 |     long c = c * o;\n      |          ^\n/tmp/tmprn60fkjv.cpp:47:10:\
    \ error: redeclaration of \u2018long int d\u2019\n   47 |     long d = a * p;\n\
    \      |          ^\n/tmp/tmprn60fkjv.cpp:13:10: note: \u2018long int d\u2019\
    \ previously declared here\n   13 |     long d = b * b - 4 * a * c;\n      | \
    \         ^\n/tmp/tmprn60fkjv.cpp:48:10: error: redeclaration of \u2018long int\
    \ e\u2019\n   48 |     long e = b * p;\n      |          ^\n/tmp/tmprn60fkjv.cpp:16:10:\
    \ note: \u2018long int e\u2019 previously declared here\n   16 |     long e =\
    \ ((b * b) - 4 * a * c) / d;\n      |          ^\n/tmp/tmprn60fkjv.cpp:49:10:\
    \ error: redeclaration of \u2018long int f\u2019\n   49 |     long f = c * p;\n\
    \      |          ^\n/tmp/tmprn60fkjv.cpp:19:10: note: \u2018long int f\u2019\
    \ previously declared here\n   19 |     long f = ((b * b) - 4 * a * c) / d;\n\
    \      |          ^\n/tmp/tmprn60fkjv.cpp:50:10: error: redeclaration of \u2018\
    long int g\u2019\n   50 |     long g = a * q;\n      |          ^\n/tmp/tmprn60fkjv.cpp:22:10:\
    \ note: \u2018long int g\u2019 previously declared here\n   22 |     long g =\
    \ a * a + b * b - c * c;\n      |          ^\n/tmp/tmprn60fkjv.cpp:51:10: error:\
    \ redeclaration of \u2018long int h\u2019\n   51 |     long h = b * q;\n     \
    \ |          ^\n/tmp/tmprn60fkjv.cpp:25:10: note: \u2018long int h\u2019 previously\
    \ declared here\n   25 |     long h = sqrt(g);\n      |          ^\n/tmp/tmprn60fkjv.cpp:52:10:\
    \ error: redeclaration of \u2018long int i\u2019\n   52 |     long i = c * q;\n\
    \      |          ^\n/tmp/tmprn60fkjv.cpp:26:10: note: \u2018long int i\u2019\
    \ previously declared here\n   26 |     long i = a * h;\n      |          ^\n\
    /tmp/tmprn60fkjv.cpp:53:10: error: redeclaration of \u2018long int j\u2019\n \
    \  53 |     long j = a * r;\n      |         "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    long long int a1 = (a + b + c) / 2;\n    long long\
    \ int b1 = (a + b) / 2;\n    long long int c1 = (a + b) / 2;\n    long long int\
    \ a2 = (a1 + b1 + c1) / 2;\n    long long int b2 = (a1 + b1) / 2;\n    long long\
    \ int c2 = (a1 + b1) / 2;\n    long long int a3 = (b1 + c1 + a2) / 2;\n    long\
    \ long int b3 = (b1 + c1) / 2;\n    long long int c3 = (b1 + c1) / 2;\n    long\
    \ long int a4 = (c1 + a2 + a3) / 2;\n    long long int b4 = (c1 + a2) / 2;\n \
    \   long long int c4 = (c1 + a2) / 2;\n    long long int a5 = (b2 + c3 + a4) /\
    \ 2;\n    long long int b5 = (b2 + c3) / 2;\n    long long int c5 = (b2 + c3)\
    \ / 2;\n    long long int a6 = (c2 + a4 + a5) / 2;\n    long long int b6 = (c2\
    \ + a4) / 2;\n    long long int c6 = (c2 + a4) / 2;\n    long long int a7 = (b3\
    \ + c5 + a6) / 2;\n    long long int b7 = (b3 + c5) / 2;\n    long long int c7\
    \ = (b3 + c5) / 2;\n    long long int a8 = (c4 + a6 + a7) / 2;\n    long long\
    \ int b8 = (c4 + a6) / 2;\n    long long int c8 = (c4 + a6) / 2;\n    long long\
    \ int a9 = (b5 + c7 + a8) / 2;\n    long long int b9 = (b5 + c7) / 2;\n    long\
    \ long int c9 = (b5 + c7) / 2;\n    long long int a10 = (b6 + c8 + a9) / 2;\n\
    \    long long int b10 = (b6 + c8) / 2;\n    long long int c10 = (b6 + c8) / 2;\n\
    \    long long int a11 = (b7 + c9 + a10) / 2;\n    long long int b11 = (b7 + c9)\
    \ / 2;\n    long long int c11 = (b7 + c9) / 2;\n    long long int a12 = (b8 +\
    \ c10 + a11) / 2;\n    long long int b12 = (b8 + c10) / 2;\n    long long int\
    \ c12 = (b8 + c10) / 2;\n    long long int a13 = (b9 + c11 + a12) / 2;\n    long\
    \ long int b13 = (b9 + c11) / 2;\n    long long int c13 = (b9 + c11) / 2;\n\n\
    }\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  stdout: ''
  stderr: "tmp6lxpqfjz: /tmp/tmp6lxpqfjz.cpp:54: int main(): Assertion `candidate((3),\
    \ (4), (5)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    if(a==b){\n        if(a==c){\n            return true;\n\
    \        }\n        return false;\n    }\n    if(b==c){\n        return false;\n\
    \    }\n    if(a>b){\n        if(a>c){\n            return false;\n        }\n\
    \        return true;\n    }\n    if(b>c){\n        return false;\n    }\n   \
    \ return false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpdzgn_2zt: /tmp/tmpdzgn_2zt.cpp:33: int main(): Assertion `candidate((3),\
    \ (4), (5)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    if (a > b && a > c) {\n        return true;\n    }\n\
    \    if (b > c && b > a) {\n        return true;\n    }\n    if (c > a && c >\
    \ b) {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto\
    \ candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n\
    \    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpybx9sq_y: /tmp/tmpybx9sq_y.cpp:25: int main(): Assertion `candidate((1),\
    \ (2), (3)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    // Write your code here\n    long long int a1 = (a\
    \ + b + c) / 2;\n    long long int b1 = (a + b) / 2;\n    long long int c1 = (a\
    \ + b) / 2;\n    long long int a2 = (a1 + b1 + c1) / 2;\n    long long int b2\
    \ = (a1 + b1) / 2;\n    long long int c2 = (a1 + b1) / 2;\n    long long int a3\
    \ = (a2 + b2 + c2) / 2;\n    long long int b3 = (a2 + b2) / 2;\n    long long\
    \ int c3 = (a2 + b2) / 2;\n    long long int a4 = (a3 + b3 + c3) / 2;\n    long\
    \ long int b4 = (a3 + b3) / 2;\n    long long int c4 = (a3 + b3) / 2;\n    long\
    \ long int a5 = (a4 + b4 + c4) / 2;\n    long long int b5 = (a4 + b4) / 2;\n \
    \   long long int c5 = (a4 + b4) / 2;\n    long long int a6 = (a5 + b5 + c5) /\
    \ 2;\n    long long int b6 = (a5 + b5) / 2;\n    long long int c6 = (a5 + b5)\
    \ / 2;\n    long long int a7 = (a6 + b6 + c6) / 2;\n    long long int b7 = (a6\
    \ + b6) / 2;\n    long long int c7 = (a6 + b6) / 2;\n    long long int a8 = (a7\
    \ + b7 + c7) / 2;\n    long long int b8 = (a7 + b7) / 2;\n    long long int c8\
    \ = (a7 + b7) / 2;\n    long long int a9 = (a8 + b8 + c8) / 2;\n    long long\
    \ int b9 = (a8 + b8) / 2;\n    long long int c9 = (a8 + b8) / 2;\n    long long\
    \ int a10 = (a9 + b9 + c9) / 2;\n    long long int b10 = (a9 + b9) / 2;\n    long\
    \ long int c10 = (a9 + b9) / 2;\n    long long int a11 = (a10 + b10 + c10) / 2;\n\
    \    long long int b11 = (a10 + b10) / 2;\n    long long int c11 = (a10 + b10)\
    \ / 2;\n    long long int a12 = (a11 + b11 + c11) / 2;\n    long long int b12\
    \ = (a11 + b11) / 2;\n    long long int c12 = (a11 + b11) / 2;\n    long long\
    \ int a13 = (a12 + b12 + c12) / 2;\n    long long int b13 = (a12 + b12) / 2;\n\
    \    long long int c13\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmp286rfhn9.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmp286rfhn9.cpp:51:1: error: expected\
    \ initializer before \u2018}\u2019 token\n   51 | }\n      | ^\n/tmp/tmp286rfhn9.cpp:51:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    long long a1 = abs(a), b1 = abs(b), c1 = abs(c);\n\
    \    long long a2 = a1 + b1, c2 = a1 + c1, b2 = b1 + c1;\n    long long a3 = a1\
    \ + a2, b3 = b1 + b2, c3 = c1 + c2;\n    return a1 == b1 && b1 == c1 && c1 ==\
    \ a2 && a2 == b2 && b2 == c2 && c2 == a3;\n}\nint main() {\n    auto candidate\
    \ = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n \
    \   assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10), (6),\
    \ (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7),\
    \ (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n\
    \    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  stdout: ''
  stderr: "tmp1pdwopdx: /tmp/tmp1pdwopdx.cpp:18: int main(): Assertion `candidate((3),\
    \ (4), (5)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    if (a > b + c || b > a + c || c > a + b) {\n     \
    \   return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n \
    \   assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10), (6),\
    \ (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7),\
    \ (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n\
    \    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpmfj30pv_: /tmp/tmpmfj30pv_.cpp:19: int main(): Assertion `candidate((1),\
    \ (2), (3)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    if (a == 0 && b == 0 && c == 0) return true;\n   \
    \ if (a == 0 || b == 0 || c == 0) return false;\n    long d = b * b - 4 * a *\
    \ c;\n    if (d < 0) return false;\n    long x = (b + c) / 2;\n    long y = (-b\
    \ + c) / 2;\n    long m = (a + b) / 2;\n    long n = (-a + b) / 2;\n    long k\
    \ = ((a + b) * (b + c)) / (4 * a * c);\n    long l = (a + b) * (a + c) / (4 *\
    \ a * c);\n    long m = ((a + b) * (b + c)) / (4 * a * c);\n    long n = ((-a\
    \ + b) * (b + c)) / (4 * a * c);\n    long k = ((a + b) * (b + c)) / (4 * a *\
    \ c);\n    long l = ((-a + b) * (b + c)) / (4 * a * c);\n    long m = ((a + b)\
    \ * (b + c)) / (4 * a * c);\n    long n = ((-a + b) * (b + c)) / (4 * a * c);\n\
    \    long k = ((a + b) * (b + c)) / (4 * a * c);\n    long l = ((-a + b) * (b\
    \ + c)) / (4 * a * c);\n    long m = ((a + b) * (b + c)) / (4 * a * c);\n    long\
    \ n = ((-a + b) * (b + c)) / (4 * a * c);\n    long k = ((a + b) * (b + c)) /\
    \ (4 * a * c);\n    long l = ((-a + b) * (b + c)) / (4 * a * c);\n    long m =\
    \ ((a + b) * (b + c)) / (4 * a * c);\n    long n = ((-a + b) * (b + c)) / (4 *\
    \ a * c);\n    long k = ((a + b) * (b + c)) / (4 * a * c);\n    long l = ((-a\
    \ + b) * (b + c)) / (4 * a * c);\n    long m = ((a + b) * (b + c)) / (4 * a *\
    \ c);\n    long n = ((-a + b) * (b + c)) / (4 * a * c);\n    long k = ((a + b)\
    \ * (b + c)) / (4 * a * c);\n    long l = ((-a + b) * (b + c)) / (4 * a * c);\n\
    \    long m = ((a + b) * (b + c)) / (4 * a * c);\n    long n = ((-a + b) * (b\
    \ + c)) / (4 * a * c);\n    long k = ((a + b) * (b + c)) / (4 * a * c);\n    \n\
    }\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmph5b26jhx.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmph5b26jhx.cpp:21:10: error: redeclaration\
    \ of \u2018long int m\u2019\n   21 |     long m = ((a + b) * (b + c)) / (4 * a\
    \ * c);\n      |          ^\n/tmp/tmph5b26jhx.cpp:17:10: note: \u2018long int\
    \ m\u2019 previously declared here\n   17 |     long m = (a + b) / 2;\n      |\
    \          ^\n/tmp/tmph5b26jhx.cpp:22:10: error: redeclaration of \u2018long int\
    \ n\u2019\n   22 |     long n = ((-a + b) * (b + c)) / (4 * a * c);\n      | \
    \         ^\n/tmp/tmph5b26jhx.cpp:18:10: note: \u2018long int n\u2019 previously\
    \ declared here\n   18 |     long n = (-a + b) / 2;\n      |          ^\n/tmp/tmph5b26jhx.cpp:23:10:\
    \ error: redeclaration of \u2018long int k\u2019\n   23 |     long k = ((a + b)\
    \ * (b + c)) / (4 * a * c);\n      |          ^\n/tmp/tmph5b26jhx.cpp:19:10: note:\
    \ \u2018long int k\u2019 previously declared here\n   19 |     long k = ((a +\
    \ b) * (b + c)) / (4 * a * c);\n      |          ^\n/tmp/tmph5b26jhx.cpp:24:10:\
    \ error: redeclaration of \u2018long int l\u2019\n   24 |     long l = ((-a +\
    \ b) * (b + c)) / (4 * a * c);\n      |          ^\n/tmp/tmph5b26jhx.cpp:20:10:\
    \ note: \u2018long int l\u2019 previously declared here\n   20 |     long l =\
    \ (a + b) * (a + c) / (4 * a * c);\n      |          ^\n/tmp/tmph5b26jhx.cpp:25:10:\
    \ error: redeclaration of \u2018long int m\u2019\n   25 |     long m = ((a + b)\
    \ * (b + c)) / (4 * a * c);\n      |          ^\n/tmp/tmph5b26jhx.cpp:17:10: note:\
    \ \u2018long int m\u2019 previously declared here\n   17 |     long m = (a + b)\
    \ / 2;\n      |          ^\n/tmp/tmph5b26jhx.cpp:26:10: error: redeclaration of\
    \ \u2018long int n\u2019\n   26 |     long n = ((-a + b) * (b + c)) / (4 * a *\
    \ c);\n      |          ^\n/tmp/tmph5b26jhx.cpp:18:10: note: \u2018long int n\u2019\
    \ previously declared here\n   18 |     long n = (-a + b) / 2;\n      |      \
    \    ^\n/tmp/tmph5b26jhx.cpp:27:10: error: redeclaration of \u2018long int k\u2019\
    \n   27 |     long k = ((a + b) * (b + c)) / (4 * a * c);\n      |          ^\n\
    /tmp/tmph5b26jhx.cpp:19:10: note: \u2018long int k\u2019 previously declared here\n\
    \   19 |     long k = ((a + b) * (b + c)) / (4 * a * c);\n      |          ^\n\
    /tmp/tmph5b26jhx.cpp:28:10: err"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    long long ans = (a * b * c) - (a * c * b) - (b * c\
    \ * a);\n    if (ans == 0)\n        return true;\n    else\n        return false;\n\
    }\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  stdout: ''
  stderr: "tmp5k8s75mx: /tmp/tmp5k8s75mx.cpp:19: int main(): Assertion `candidate((3),\
    \ (4), (5)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    long ab = abs(b - a);\n    long ac = abs(c - a);\n\
    \    long bc = abs(b - c);\n    long cb = abs(c - b);\n    long abc = ab + ac\
    \ + bc;\n    long abc_ab = ab * ab;\n    long abc_ac = ab * ac;\n    long abc_bc\
    \ = ab * bc;\n    long abc_cb = ab * cb;\n    long acb = ac * bc;\n    long acb_ac\
    \ = ac * ac;\n    long acb_cb = ac * cb;\n    long bcb = bc * cb;\n    long bcb_ac\
    \ = bc * ac;\n    long bcb_cb = bc * cb;\n    long cbc = cb * cb;\n    long cbc_ac\
    \ = cb * ac;\n    long cbc_cb = cb * cb;\n    long acbc = acb + acb_ac + acb_cb\
    \ + acb_cc + acb_cc + acb_ac + acb_ac + acb_cb + acb_cb + acb_ac + acb_ac + acb_cb\
    \ + acb_cb + acb_ac + acb_ac + acb_cb + acb_cb + acb_ac + acb_ac + acb_cb + acb_cb\
    \ + acb_ac + acb_ac + acb_cb + acb_cb + acb_ac + acb_ac + acb_cb + acb_cb + acb_ac\
    \ + acb_ac + acb_cb + acb_cb + acb_ac + acb_ac + acb_cb + acb_cb + acb_ac + acb_ac\
    \ + acb_cb + acb_cb + acb_ac + acb_ac + acb_cb + acb_cb + acb_ac + acb_ac + acb_cb\
    \ + acb_cb + acb_ac + acb_ac + acb_cb + acb_cb + acb_ac + acb_ac + acb_cb + acb_cb\
    \ + acb_ac + acb_ac + acb_cb + acb_cb + acb_ac + acb_ac + acb_cb + acb_cb + acb_ac\
    \ + acb_ac + acb_cb + acb_cb + acb_ac + acb_ac + acb_cb + acb_cb + acb_ac + acb_ac\
    \ + acb_cb + acb_cb + acb_ac + acb_ac + acb_cb + acb_cb + acb_\n}\nint main()\
    \ {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4),\
    \ (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmphbqtdl75.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmphbqtdl75.cpp:29:41: error: \u2018acb_cc\u2019\
    \ was not declared in this scope; did you mean \u2018acb_cb\u2019?\n   29 |  \
    \   long acbc = acb + acb_ac + acb_cb + acb_cc + acb_cc + acb_ac + acb_ac + acb_cb\
    \ + acb_cb + acb_ac + acb_ac + acb_cb + acb_cb + acb_ac + acb_ac + acb_cb + acb_cb\
    \ + acb_ac + acb_ac + acb_cb + acb_cb + acb_ac + acb_ac + acb_cb + acb_cb + acb_ac\
    \ + acb_ac + acb_cb + acb_cb + acb_ac + acb_ac + acb_cb + acb_cb + acb_ac + acb_ac\
    \ + acb_cb + acb_cb + acb_ac + acb_ac + acb_cb + acb_cb + acb_ac + acb_ac + acb_cb\
    \ + acb_cb + acb_ac + acb_ac + acb_cb + acb_cb + acb_ac + acb_ac + acb_cb + acb_cb\
    \ + acb_ac + acb_ac + acb_cb + acb_cb + acb_ac + acb_ac + acb_cb + acb_cb + acb_ac\
    \ + acb_ac + acb_cb + acb_cb + acb_ac + acb_ac + acb_cb + acb_cb + acb_ac + acb_ac\
    \ + acb_cb + acb_cb + acb_ac + acb_ac + acb_cb + acb_cb + acb_ac + acb_ac + acb_cb\
    \ + acb_cb + acb_\n      |                                         ^~~~~~\n  \
    \    |                                         acb_cb\n/tmp/tmphbqtdl75.cpp:29:743:\
    \ error: \u2018acb_\u2019 was not declared in this scope; did you mean \u2018\
    acbc\u2019?\n   29 |     long acbc = acb + acb_ac + acb_cb + acb_cc + acb_cc +\
    \ acb_ac + acb_ac + acb_cb + acb_cb + acb_ac + acb_ac + acb_cb + acb_cb + acb_ac\
    \ + acb_ac + acb_cb + acb_cb + acb_ac + acb_ac + acb_cb + acb_cb + acb_ac + acb_ac\
    \ + acb_cb + acb_cb + acb_ac + acb_ac + acb_cb + acb_cb + acb_ac + acb_ac + acb_cb\
    \ + acb_cb + acb_ac + acb_ac + acb_cb + acb_cb + acb_ac + acb_ac + acb_cb + acb_cb\
    \ + acb_ac + acb_ac + acb_cb + acb_cb + acb_ac + acb_ac + acb_cb + acb_cb + acb_ac\
    \ + acb_ac + acb_cb + acb_cb + acb_ac + acb_ac + acb_cb + acb_cb + acb_ac + acb_ac\
    \ + acb_cb + acb_cb + acb_ac + acb_ac + acb_cb + acb_cb + acb_ac + acb_ac + acb_cb\
    \ + acb_cb + acb_ac + acb_ac + acb_cb + acb_cb + acb_ac + acb_ac + acb_cb + acb_cb\
    \ + acb_ac + acb_ac + acb_cb + acb_cb + acb_\n      |                        \
    \                                                                            \
    \                                 "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    long d = b * b - 4 * a * c;\n    if (d < 0) {\n  \
    \      return false;\n    }\n    long root = (long) sqrt(d);\n    long t1 = (-b\
    \ + root) / a;\n    long t2 = (-b - root) / a;\n    if (t1 < 0 || t2 < 0) {\n\
    \        return false;\n    }\n    if (t1 == t2) {\n        return true;\n   \
    \ }\n    long t3 = t1 * t1;\n    long t4 = t2 * t2;\n    return (t3 <= t4 && t3\
    \ >= 0 && t4 <= t1);\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpw4r0vvem: /tmp/tmpw4r0vvem.cpp:30: int main(): Assertion `candidate((3),\
    \ (4), (5)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    if(a==b){\n        if(a==c){\n            return true;\n\
    \        }\n        return false;\n    }\n    if(a==c){\n        return false;\n\
    \    }\n    if(b==c){\n        return false;\n    }\n    if(a>b){\n        if(a>c){\n\
    \            return true;\n        }\n        return false;\n    }\n    if(b>c){\n\
    \        return false;\n    }\n    if(a>c){\n        if(b>c){\n            return\
    \ true;\n        }\n        return false;\n    }\n    return false;\n}\nint main()\
    \ {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4),\
    \ (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  stdout: ''
  stderr: "tmp7sy7t4zx: /tmp/tmp7sy7t4zx.cpp:42: int main(): Assertion `candidate((3),\
    \ (4), (5)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    // Write your code here\n    long long int sum = a+b+c;\n\
    \    long long int sum2 = a*a+b*b+c*c;\n    long long int sum3 = a*a*a+b*b*b+c*c*c;\n\
    \    long long int sum4 = a*a*a*a+b*b*b*b+c*c*c*c;\n    long long int sum5 = a*a*a*a*a+b*b*b*b*b+c*c*c*c*c;\n\
    \    long long int sum6 = a*a*a*a*a*a+b*b*b*b*b*b+c*c*c*c*c*c;\n    long long\
    \ int sum7 = a*a*a*a*a*a*a+b*b*b*b*b*b*b+c*c*c*c*c*c*c;\n    long long int sum8\
    \ = a*a*a*a*a*a*a*a+b*b*b*b*b*b*b*b+c*c*c*c*c*c*c;\n    long long int sum9 = a*a*a*a*a*a*a*a*a+b*b*b*b*b*b*b*b*b+c*c*c*c*c*c*c*c;\n\
    \    long long int sum10 = a*a*a*a*a*a*a*a*a*a+b*b*b*b*b*b*b*b*b*b+c*c*c*c*c*c*c*c*c;\n\
    \    long long int sum11 = a*a*a*a*a*a*a*a*a*a*a+b*b*b*b*b*b*b*b*b*b*b+c*c*c*c*c*c*c*c*c*c;\n\
    \    long long int sum12 = a*a*a*a*a*a*a*a*a*a*a*a+b*b*b*b*b*b*b*b*b*b*b+c*c*c*c*c*c*c*c*c*c*c;\n\
    \    long long int sum13 = a*a*a*a*a*a*a*a*a*a*a*a*a+b*b*b*b*b*b*b*b*b*b*b*b+c*c*c*c*c*c*c*c*c*c*c;\n\
    \    long long int sum14 = a*a*a*a*a*a*a*a*a*a*a*a*a+b*b*b*b*b*b*b*b*b*b*b+c*c*c*c*c*c*c*c*c*c*c*c*c;\n\
    \    long long int \n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpxul7u4rx.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmpxul7u4rx.cpp:27:1: error: expected\
    \ unqualified-id before \u2018}\u2019 token\n   27 | }\n      | ^\n/tmp/tmpxul7u4rx.cpp:27:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    // Write your code here\n    long long int a1 = (a\
    \ + b + c) / 2;\n    long long int b1 = (a + b) / 2;\n    long long int c1 = (a\
    \ + b) / 2;\n    long long int a2 = (a1 + b1 + c1) / 2;\n    long long int b2\
    \ = (a1 + b1) / 2;\n    long long int c2 = (a1 + b1) / 2;\n    long long int a3\
    \ = (a2 + b2 + c2) / 2;\n    long long int b3 = (a2 + b2) / 2;\n    long long\
    \ int c3 = (a2 + b2) / 2;\n    long long int a4 = (a3 + b3 + c3) / 2;\n    long\
    \ long int b4 = (a3 + b3) / 2;\n    long long int c4 = (a3 + b3) / 2;\n    long\
    \ long int a5 = (a4 + b4 + c4) / 2;\n    long long int b5 = (a4 + b4) / 2;\n \
    \   long long int c5 = (a4 + b4) / 2;\n    long long int a6 = (a5 + b5 + c5) /\
    \ 2;\n    long long int b6 = (a5 + b5) / 2;\n    long long int c6 = (a5 + b5)\
    \ / 2;\n    long long int a7 = (a6 + b6 + c6) / 2;\n    long long int b7 = (a6\
    \ + b6) / 2;\n    long long int c7 = (a6 + b6) / 2;\n    long long int a8 = (a7\
    \ + b7 + c7) / 2;\n    long long int b8 = (a7 + b7) / 2;\n    long long int c8\
    \ = (a7 + b7) / 2;\n    long long int a9 = (a8 + b8 + c8) / 2;\n    long long\
    \ int b9 = (a8 + b8) / 2;\n    long long int c9 = (a8 + b8) / 2;\n    long long\
    \ int a10 = (a9 + b9 + c9) / 2;\n    long long int b10 = (a9 + b9) / 2;\n    long\
    \ long int c10 = (a9 + b9) / 2;\n    long long int a11 = (a10 + b10 + c10) / 2;\n\
    \    long long int b11 = (a10 + b10) / 2;\n    long long int c11 = (a10 + b10)\
    \ / 2;\n    long long int a12 = (a11 + b11 + c11) / 2;\n    long long int b12\
    \ = (a11 + b11) / 2;\n    long long int c12 = (a11 + b11) / 2;\n    long long\
    \ int a13 = (a12 + b12 + c12) / 2;\n    long long int b13 = (a12 + b12) / 2;\n\
    \    long long int c13\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpmtamk57i.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmpmtamk57i.cpp:51:1: error: expected\
    \ initializer before \u2018}\u2019 token\n   51 | }\n      | ^\n/tmp/tmpmtamk57i.cpp:51:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    if (a == 0 || b == 0 || c == 0) return false;\n  \
    \  long d = b * b - 4 * a * c;\n    if (d < 0) return false;\n    long x = (b\
    \ + d) / (2 * a);\n    long y = (-b - d) / (2 * a);\n    return ((x * (x * x +\
    \ 1)) == ((y * (y * y + 1)) + 1));\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpnx5_0ln0: /tmp/tmpnx5_0ln0.cpp:20: int main(): Assertion `candidate((3),\
    \ (4), (5)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    long long ans = a + b + c;\n    long long sq = ans\
    \ * (ans - a) * (ans - b) * (ans - c);\n    long long det = ans * ans - sq;\n\
    \    if (det == 0)\n        return false;\n    long long root1 = ((ans * (ans\
    \ - a)) * (ans - b)) * (ans - c);\n    long long root2 = ((ans * (ans - b)) *\
    \ (ans - c)) * (ans - a);\n    long long root3 = ((ans * (ans - c)) * (ans - a))\
    \ * (ans - b);\n    long long root4 = ((ans * (ans - a)) * (ans - c)) * (ans -\
    \ b);\n    long long root5 = ((ans * (ans - b)) * (ans - a)) * (ans - c);\n  \
    \  long long root6 = ((ans * (ans - c)) * (ans - b)) * (ans - a);\n    long long\
    \ root7 = ((ans * (ans - a)) * (ans - b)) * (ans - c);\n    long long root8 =\
    \ ((ans * (ans - b)) * (ans - c)) * (ans - a);\n    long long root9 = ((ans *\
    \ (ans - c)) * (ans - a)) * (ans - b);\n    long long root10 = ((ans * (ans -\
    \ a)) * (ans - c)) * (ans - b);\n    long long root11 = ((ans * (ans - b)) * (ans\
    \ - a)) * (ans - c);\n    long long root12 = ((ans * (ans - c)) * (ans - b)) *\
    \ (ans - a);\n    long long root13 = ((ans * (ans - a)) * (ans - c)) * (ans -\
    \ b);\n    long long root14 = ((ans * (ans - b)) * (ans - a)) * (ans - c);\n \
    \   long long root15 = ((ans * (ans - c)) * (ans - b)) * (ans - a);\n    long\
    \ long root16 = ((ans * (ans - a)) * (ans - c)) * (ans - b);\n    long long root17\
    \ = ((ans * (ans - b)) * (ans - a)) * (ans - c);\n    long long root18 = ((ans\
    \ * (ans - c)) * (ans - b)) * (ans - a);\n    long long root19 = ((ans * (ans\
    \ - a)) * (ans - c)) * (ans - b);\n    long long root20 = ((ans * (ans - b)) *\
    \ (ans - a)) * (ans - c);\n    long long \n}\nint main() {\n    auto candidate\
    \ = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n \
    \   assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10), (6),\
    \ (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7),\
    \ (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n\
    \    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzqm3wtb9.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmpzqm3wtb9.cpp:37:1: error: expected\
    \ unqualified-id before \u2018}\u2019 token\n   37 | }\n      | ^\n/tmp/tmpzqm3wtb9.cpp:37:1:\
    \ warning: control reaches end of non-void function [-Wreturn-type]\n   37 | }\n\
    \      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    long long int a1 = abs(a), b1 = abs(b), c1 = abs(c);\n\
    \    long long int a2 = a1 + b1, b2 = b1 + c1, c2 = a1 + c1;\n    long long int\
    \ a3 = a2 + b2, b3 = b2 + c2, c3 = a2 + c2;\n    long long int a4 = a3 + b3, b4\
    \ = b3 + c3, c4 = a3 + c3;\n    long long int a5 = a4 + b4, b5 = b4 + c4, c5 =\
    \ a4 + c4;\n    long long int a6 = a5 + b5, b6 = b5 + c5, c6 = a5 + c5;\n    long\
    \ long int a7 = a6 + b6, b7 = b6 + c6, c7 = a6 + c6;\n    long long int a8 = a7\
    \ + b7, b8 = b7 + c7, c8 = a7 + c7;\n    long long int a9 = a8 + b8, b9 = b8 +\
    \ c8, c9 = a8 + c8;\n    long long int a10 = a9 + b9, b10 = b9 + c9, c10 = a9\
    \ + c9;\n    long long int a11 = a10 + b10, b11 = b10 + c10, c11 = a10 + c10;\n\
    \    long long int a12 = a11 + b11, b12 = b11 + c11, c12 = a11 + c11;\n    long\
    \ long int a13 = a12 + b12, b13 = b12 + c12, c13 = a12 + c12;\n    long long int\
    \ a14 = a13 + b13, b14 = b13 + c13, c14 = a13 + c13;\n    long long int a15 =\
    \ a14 + b14, b15 = b14 + c14, c15 = a14 + c14;\n    long long int a16 = a15 +\
    \ b15, b16 = b15 + c15, c16 = a15 + c15;\n    long long int a17 = a16 + b16, b17\
    \ = b16 + c16, c17 = a16 + c16;\n    long long int a18 = a17 + b17, b18 = b17\
    \ + c17, c18 = a17 + c17;\n    long long int a19 = a18 + b18, b19 = b18 + c18,\
    \ c19 = a18 + c18;\n    long long int a20 = a19 + b19, b20 = b19 + c19, c20 =\
    \ a19 + c19;\n    long long int a21 = a20 + b20, b21 = b20 + c20, c21 = a20 +\
    \ \n}\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_0y5wco6.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmp_0y5wco6.cpp:32:1: error: expected\
    \ primary-expression before \u2018}\u2019 token\n   32 | }\n      | ^\n/tmp/tmp_0y5wco6.cpp:32:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    long d = b * b - 4 * a * c;\n    if (d < 0) {\n  \
    \      return false;\n    }\n    long root = (long) sqrt(d);\n    long t1 = (long)\
    \ (-b + root) / a;\n    long t2 = (long) (-b - root) / a;\n    return t1 == t2;\n\
    }\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpy0kim05c: /tmp/tmpy0kim05c.cpp:22: int main(): Assertion `candidate((3),\
    \ (4), (5)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    long long ans = a + b + c;\n    long long sq = ans\
    \ * ans;\n    long long sq1 = sq - a;\n    long long sq2 = sq - b;\n    long long\
    \ sq3 = sq - c;\n    long long sq4 = sq3 - b;\n    long long sq5 = sq3 - c;\n\
    \    long long sq6 = sq5 - a;\n    long long sq7 = sq5 - b;\n    long long sq8\
    \ = sq5 - c;\n    long long sq9 = sq6 - a;\n    long long sq10 = sq6 - b;\n  \
    \  long long sq11 = sq6 - c;\n    long long sq12 = sq7 - a;\n    long long sq13\
    \ = sq7 - b;\n    long long sq14 = sq7 - c;\n    long long sq15 = sq8 - a;\n \
    \   long long sq16 = sq8 - b;\n    long long sq17 = sq8 - c;\n    long long sq18\
    \ = sq9 - a;\n    long long sq19 = sq9 - b;\n    long long sq20 = sq9 - c;\n \
    \   long long sq21 = sq10 - a;\n    long long sq22 = sq10 - b;\n    long long\
    \ sq23 = sq10 - c;\n    long long sq24 = sq11 - a;\n    long long sq25 = sq11\
    \ - b;\n    long long sq26 = sq11 - c;\n    long long sq27 = sq12 - a;\n    long\
    \ long sq28 = sq12 - b;\n    long long sq29 = sq12 - c;\n    long long sq30 =\
    \ sq13 - a;\n    long long sq31 = sq13 - b;\n    long long sq32 = sq13 - c;\n\
    \    long long sq33 = sq14 - a;\n    long long sq34 = sq14 - b;\n    long long\
    \ sq35 = sq14 - c;\n    long long sq36 = sq15 - a;\n    long long sq37 = sq15\
    \ - b;\n    long long sq38 = sq15 - c;\n    long long sq39 = sq16 - a;\n    long\
    \ long sq40 = sq16 - b;\n    long long sq41 = sq16 - c;\n    long long sq42 =\
    \ sq17 - a;\n    long long sq43 = sq17 - b;\n    long long sq44 = sq17 - c;\n\
    \    long long sq45 = sq18 - a;\n    long long sq46 = sq18 - b;\n    long long\
    \ \n}\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6tt0t37a.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmp6tt0t37a.cpp:60:1: error: expected\
    \ unqualified-id before \u2018}\u2019 token\n   60 | }\n      | ^\n/tmp/tmp6tt0t37a.cpp:60:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    // Write your code here\n    long sum = a+b+c;\n \
    \   long sq = sum*sum;\n    long sq1 = sq*sq;\n    long sq2 = sq1*sq;\n    long\
    \ sq3 = sq2*sq;\n    long sq4 = sq3*sq;\n    long sq5 = sq4*sq;\n    long sq6\
    \ = sq5*sq;\n    long sq7 = sq6*sq;\n    long sq8 = sq7*sq;\n    long sq9 = sq8*sq;\n\
    \    long sq10 = sq9*sq;\n    long sq11 = sq10*sq;\n    long sq12 = sq11*sq;\n\
    \    long sq13 = sq12*sq;\n    long sq14 = sq13*sq;\n    long sq15 = sq14*sq;\n\
    \    long sq16 = sq15*sq;\n    long sq17 = sq16*sq;\n    long sq18 = sq17*sq;\n\
    \    long sq19 = sq18*sq;\n    long sq20 = sq19*sq;\n    long sq21 = sq20*sq;\n\
    \    long sq22 = sq21*sq;\n    long sq23 = sq22*sq;\n    long sq24 = sq23*sq;\n\
    \    long sq25 = sq24*sq;\n    long sq26 = sq25*sq;\n    long sq27 = sq26*sq;\n\
    \    long sq28 = sq27*sq;\n    long sq29 = sq28*sq;\n    long sq30 = sq29*sq;\n\
    \    long sq31 = sq30*sq;\n    long sq32 = sq31*sq;\n    long sq33 = sq32*sq;\n\
    \    long sq34 = sq33*sq;\n    long sq35 = sq34*sq;\n    long sq36 = sq35*sq;\n\
    \    long sq37 = sq36*sq;\n    long sq38 = sq37*sq;\n    long sq39 = sq38*sq;\n\
    \    long sq40 = sq39*sq;\n    long sq41 = sq40*sq;\n    long sq42 = sq41*sq;\n\
    \    long sq43 = sq42*sq;\n    long sq44 = sq43*sq;\n    long sq45 = sq44*sq;\n\
    \    long sq46 = sq45*sq;\n    long \n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmp75tu89de.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmp75tu89de.cpp:61:1: error: expected\
    \ unqualified-id before \u2018}\u2019 token\n   61 | }\n      | ^\n/tmp/tmp75tu89de.cpp:61:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    // Write your code here\n    long d = b - a;\n   \
    \ long e = c - a;\n    long f = d - e;\n    long g = e - b;\n    long h = f -\
    \ g;\n    long i = g - c;\n    long j = h - i;\n    long k = i - f;\n    long\
    \ l = j - k;\n    long m = k - d;\n    long n = l - m;\n    long o = m - e;\n\
    \    long p = n - o;\n    long q = o - b;\n    long r = p - q;\n    long s = q\
    \ - c;\n    long t = s - r;\n    long u = t - s;\n    long v = u - t;\n    long\
    \ w = v - u;\n    long x = w - v;\n    long y = x - w;\n    long z = y - x;\n\
    \    long a = z - y;\n    long b = x - z;\n    long c = y - x;\n    long d = b\
    \ - a;\n    long e = c - a;\n    long f = d - e;\n    long g = e - b;\n    long\
    \ h = f - g;\n    long i = g - c;\n    long j = h - i;\n    long k = i - f;\n\
    \    long l = j - k;\n    long m = k - d;\n    long n = l - m;\n    long o = m\
    \ - e;\n    long p = n - o;\n    long q = o - b;\n    long r = p - q;\n    long\
    \ s = q - c;\n    long t = s - r;\n    long u = t - s;\n    long v = u - t;\n\
    \    long w = v - u;\n    long x = w - v;\n    long y = x - w;\n    long z = y\
    \ - x;\n    long a = z - y;\n    long b = x - z;\n    long c = y - x;\n    long\
    \ d = b - a;\n    long e = c - a;\n    long f = d - e;\n    long g = e - b;\n\
    \    long h = f - g;\n    long i = g - c;\n    long j = h - i;\n    long k = i\
    \ - f;\n    long l = j - k;\n    long m = k - d;\n    long n = l - m;\n    long\
    \ o = m - e;\n    long p = n - o;\n    long q = o - b;\n    long r = p - q;\n\
    \    long s = q - c;\n    long t = s - r;\n    long u = t - s;\n    long v = u\
    \ - t;\n    long w = v - u;\n    long x = w - v;\n    long y = x - w;\n    long\
    \ z = y - x;\n    long a = z - y;\n    long b = \n}\nint main() {\n    auto candidate\
    \ = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n \
    \   assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10), (6),\
    \ (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7),\
    \ (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n\
    \    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpu8vbxshk.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmpu8vbxshk.cpp:35:10: error: declaration\
    \ of \u2018long int a\u2019 shadows a parameter\n   35 |     long a = z - y;\n\
    \      |          ^\n/tmp/tmpu8vbxshk.cpp:36:10: error: declaration of \u2018\
    long int b\u2019 shadows a parameter\n   36 |     long b = x - z;\n      |   \
    \       ^\n/tmp/tmpu8vbxshk.cpp:37:10: error: declaration of \u2018long int c\u2019\
    \ shadows a parameter\n   37 |     long c = y - x;\n      |          ^\n/tmp/tmpu8vbxshk.cpp:38:10:\
    \ error: redeclaration of \u2018long int d\u2019\n   38 |     long d = b - a;\n\
    \      |          ^\n/tmp/tmpu8vbxshk.cpp:12:10: note: \u2018long int d\u2019\
    \ previously declared here\n   12 |     long d = b - a;\n      |          ^\n\
    /tmp/tmpu8vbxshk.cpp:39:10: error: redeclaration of \u2018long int e\u2019\n \
    \  39 |     long e = c - a;\n      |          ^\n/tmp/tmpu8vbxshk.cpp:13:10: note:\
    \ \u2018long int e\u2019 previously declared here\n   13 |     long e = c - a;\n\
    \      |          ^\n/tmp/tmpu8vbxshk.cpp:40:10: error: redeclaration of \u2018\
    long int f\u2019\n   40 |     long f = d - e;\n      |          ^\n/tmp/tmpu8vbxshk.cpp:14:10:\
    \ note: \u2018long int f\u2019 previously declared here\n   14 |     long f =\
    \ d - e;\n      |          ^\n/tmp/tmpu8vbxshk.cpp:41:10: error: redeclaration\
    \ of \u2018long int g\u2019\n   41 |     long g = e - b;\n      |          ^\n\
    /tmp/tmpu8vbxshk.cpp:15:10: note: \u2018long int g\u2019 previously declared here\n\
    \   15 |     long g = e - b;\n      |          ^\n/tmp/tmpu8vbxshk.cpp:42:10:\
    \ error: redeclaration of \u2018long int h\u2019\n   42 |     long h = f - g;\n\
    \      |          ^\n/tmp/tmpu8vbxshk.cpp:16:10: note: \u2018long int h\u2019\
    \ previously declared here\n   16 |     long h = f - g;\n      |          ^\n\
    /tmp/tmpu8vbxshk.cpp:43:10: error: redeclaration of \u2018long int i\u2019\n \
    \  43 |     long i = g - c;\n      |          ^\n/tmp/tmpu8vbxshk.cpp:17:10: note:\
    \ \u2018long int i\u2019 previously declared here\n   17 |     long i = g - c;\n\
    \      |          ^\n/tmp/tmpu8vbxshk.cpp:44:10: error: redeclaration of \u2018\
    long int j\u2019\n   44 |     long j = h - i;\n      |          ^\n/tmp/tmpu8vbxshk.cpp:18:10:\
    \ note: \u2018long int j\u2019 previously declared "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    // Write your code here\n    if(a==b||a==c||b==c)\n\
    \        return false;\n    long long ans=0;\n    long long sum=a+b+c;\n    for(long\
    \ long i=a;i<=sum;i++)\n    {\n        for(long long j=b;j<=sum;j++)\n       \
    \ {\n            for(long long k=c;k<=sum;k++)\n            {\n              \
    \  if(i+j+k==sum)\n                {\n                    ans++;\n           \
    \     }\n            }\n        }\n    }\n    if(ans==3)\n        return true;\n\
    \    else\n        return false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpnzs3r223: /tmp/tmpnzs3r223.cpp:36: int main(): Assertion `candidate((3),\
    \ (4), (5)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    long long a1 = (a + b + c) / 2;\n    long long b1\
    \ = (a + b) / 2;\n    long long c1 = (a + b) / 2;\n    long long a2 = (a1 + b1\
    \ + c1) / 2;\n    long long b2 = (a1 + b1) / 2;\n    long long c2 = (a1 + b1)\
    \ / 2;\n    long long a3 = (b1 + c1 + a2) / 2;\n    long long b3 = (b1 + c1) /\
    \ 2;\n    long long c3 = (b1 + c1) / 2;\n    long long a4 = (c1 + a2 + a3) / 2;\n\
    \    long long b4 = (c1 + a2) / 2;\n    long long c4 = (c1 + a2) / 2;\n    long\
    \ long a5 = (b2 + c3 + a4) / 2;\n    long long b5 = (b2 + c3) / 2;\n    long long\
    \ c5 = (b2 + c3) / 2;\n    long long a6 = (c2 + a5 + b6) / 2;\n    long long b6\
    \ = (c2 + a5) / 2;\n    long long c6 = (c2 + a5) / 2;\n    long long a7 = (b3\
    \ + c5 + a7) / 2;\n    long long b7 = (b3 + c5) / 2;\n    long long c7 = (b3 +\
    \ c5) / 2;\n    long long a8 = (c4 + a6 + a8) / 2;\n    long long b8 = (c4 + a6)\
    \ / 2;\n    long long c8 = (c4 + a6) / 2;\n    long long a9 = (b5 + c7 + a9) /\
    \ 2;\n    long long b9 = (b5 + c7) / 2;\n    long long c9 = (b5 + c7) / 2;\n \
    \   long long a10 = (b6 + c8 + a10) / 2;\n    long long b10 = (b6 + c8) / 2;\n\
    \    long long c10 = (b6 + c8) / 2;\n    long long a11 = (b7 + c9 + a11) / 2;\n\
    \    long long b11 = (b7 + c9) / 2;\n    long long c11 = (b7 + c9) / 2;\n    long\
    \ long a12 = (b8 + c10 + a12) / 2;\n    long long b12 = (b8 + c10) / 2;\n    long\
    \ long c12 = (b8 + c10) / 2;\n    long long a13 = (b9 + c11 + a13) / 2;\n    long\
    \ long b13 = (b9 + c11) / 2;\n    long long c13 = (b9 + c11) / 2;\n    long long\
    \ a14 = (b10 + c12 + a14) / 2;\n    long long b14 = (b10 + c12) / 2;\n    long\
    \ long c14 = (b10 + c12\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmp7giqwehl.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmp7giqwehl.cpp:26:31: error: \u2018b6\u2019\
    \ was not declared in this scope; did you mean \u2018a6\u2019?\n   26 |     long\
    \ long a6 = (c2 + a5 + b6) / 2;\n      |                               ^~\n  \
    \    |                               a6\n/tmp/tmp7giqwehl.cpp:52:31: error: expected\
    \ \u2018)\u2019 before \u2018}\u2019 token\n   52 |     long long c14 = (b10 +\
    \ c12\n      |                     ~         ^\n      |                      \
    \         )\n   53 | }\n      | ~                              \n/tmp/tmp7giqwehl.cpp:53:1:\
    \ error: expected \u2018,\u2019 or \u2018;\u2019 before \u2018}\u2019 token\n\
    \   53 | }\n      | ^\n/tmp/tmp7giqwehl.cpp:53:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    long d = b * b - 4 * a * c;\n    if (d < 0) {\n  \
    \      return false;\n    }\n    long root = (long) sqrt(d);\n    long x = (long)\
    \ (-b + root) / (2 * a);\n    long y = (long) (-b - root) / (2 * a);\n    return\
    \ (x > 0) && (y > 0);\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp3ovkc73q: /tmp/tmp3ovkc73q.cpp:22: int main(): Assertion `candidate((3),\
    \ (4), (5)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    long long ans = (a * b * c) - (a * c * b) - (b * a\
    \ * c);\n    if (ans == 0)\n        return false;\n    long long mod = sqrt(ans);\n\
    \    long long root1 = (ans / mod) % 10;\n    long long root2 = (ans / (mod *\
    \ mod)) % 10;\n    return (root1 == root2);\n}\nint main() {\n    auto candidate\
    \ = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n \
    \   assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10), (6),\
    \ (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7),\
    \ (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n\
    \    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -8
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    if (a == 0 || b == 0 || c == 0)\n        return false;\n\
    \    long d = b * b - 4 * a * c;\n    if (d < 0)\n        return false;\n    long\
    \ x = (b + d) / (2 * a);\n    long y = (-b - d) / (2 * a);\n    return (x * x\
    \ + y * y) <= 1;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpwtyn08_l: /tmp/tmpwtyn08_l.cpp:22: int main(): Assertion `candidate((3),\
    \ (4), (5)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    long d = b * b - 4 * a * c;\n    if (d < 0)\n    \
    \    return false;\n    long root = (long) sqrt(d);\n    long t1 = (-b + root)\
    \ / (2 * a);\n    long t2 = (-b - root) / (2 * a);\n    return t1 >= 0 && t1 <=\
    \ 1 && t2 >= 0 && t2 <= 1;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpv70tf89p: /tmp/tmpv70tf89p.cpp:21: int main(): Assertion `candidate((3),\
    \ (4), (5)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    long d = b * b - 4 * a * c;\n    if (d < 0) {\n  \
    \      return false;\n    }\n    long root = (d > 0) ? sqrt(d) : -sqrt(d);\n \
    \   long x0 = ((-b) + root) / 2;\n    long y0 = ((-b) - root) / 2;\n    long x1\
    \ = ((-b) + root) / 2;\n    long y1 = ((-b) - root) / 2;\n    long x2 = ((-b)\
    \ - root) / 2;\n    long y2 = ((-b) + root) / 2;\n    long x3 = ((-b) + root)\
    \ / 2;\n    long y3 = ((-b) - root) / 2;\n    long x4 = ((-b) - root) / 2;\n \
    \   long y4 = ((-b) + root) / 2;\n    long x5 = ((-b) - root) / 2;\n    long y5\
    \ = ((-b) + root) / 2;\n    long x6 = ((-b) - root) / 2;\n    long y6 = ((-b)\
    \ - root) / 2;\n    long x7 = ((-b) + root) / 2;\n    long y7 = ((-b) - root)\
    \ / 2;\n    long x8 = ((-b) - root) / 2;\n    long y8 = ((-b) + root) / 2;\n \
    \   long x9 = ((-b) + root) / 2;\n    long y9 = ((-b) - root) / 2;\n    long x10\
    \ = ((-b) - root) / 2;\n    long y10 = ((-b) + root) / 2;\n    long x11 = ((-b)\
    \ - root) / 2;\n    long y11 = ((-b) - root) / 2;\n    long x12 = ((-b) + root)\
    \ / 2;\n    long y12 = ((-b) - root) / 2;\n    long x13 = ((-b) - root) / 2;\n\
    \    long y13 = ((-b) + root) / 2;\n    long x14 = ((-b) + root) / 2;\n    long\
    \ y14 = ((-b) - root) / 2;\n    long x15 = ((-b) - root) / 2;\n    long y15 =\
    \ ((-b) + root) / 2;\n    long x16 = ((-b) - root) / 2;\n    long y16 = ((-b)\
    \ - root) / 2;\n    long x17 = ((-b) + root) / 2;\n    long y17 = ((-b) - root)\
    \ / 2;\n    long x18 = ((-b) - root) / 2;\n    long y18 = ((-b) + root) / 2;\n\
    \    long x19 = ((-b) + root) / 2;\n    long y19 = ((-b) - root) / 2;\n    long\
    \ x20 = ((-b) - root) / 2;\n    long y20 = ((-b) - root) / 2;\n    long x21 =\
    \ ((-b) + root) / 2;\n    long y21 = ((-b) - root) / 2;\n\n}\nint main() {\n \
    \   auto candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5))\
    \ == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  stdout: ''
  stderr: "tmp6ty0q3y0: /tmp/tmp6ty0q3y0.cpp:64: int main(): Assertion `candidate((3),\
    \ (4), (5)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    if(a>b+c) return false;\n    if(a>c+b) return false;\n\
    \    if(b>c+a) return false;\n    return true;\n}\nint main() {\n    auto candidate\
    \ = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n \
    \   assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10), (6),\
    \ (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7),\
    \ (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n\
    \    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  stdout: ''
  stderr: "tmp8oubc79d: /tmp/tmp8oubc79d.cpp:19: int main(): Assertion `candidate((1),\
    \ (2), (3)) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    long long ans = (a * b * c) - (a * c * b) - (b * a\
    \ * c);\n    if (ans == 0)\n        return true;\n    else \n        return false;\n\
    }\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpgg7cpmsa: /tmp/tmpgg7cpmsa.cpp:19: int main(): Assertion `candidate((3),\
    \ (4), (5)) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// right_angle_triangle(3,\
    \ 4, 5) == True\n// right_angle_triangle(1, 2, 3) == False\nbool right_angle_triangle(long\
    \ a, long b, long c) {\n    long long a1 = abs(a), b1 = abs(b), c1 = abs(c);\n\
    \    long long a2 = a1 + b1, b2 = a1 + c1, c2 = b1 + c1;\n    long long a3 = a2\
    \ + b2, b3 = a2 + c2, c3 = b2 + c2;\n    long long a4 = a3 + b3, b4 = a3 + c3,\
    \ c4 = b4 + c3;\n    long long a5 = a4 + b4, b5 = a4 + c4, c5 = b5 + c4;\n   \
    \ long long a6 = a5 + b5, b6 = a5 + c5, c6 = b6 + c5;\n    long long a7 = a6 +\
    \ b6, b7 = a6 + c6, c7 = b7 + c6;\n    long long a8 = a7 + b7, b8 = a7 + c7, c9\
    \ = b8 + c8;\n    long long a10 = a9 + b8, b10 = a9 + c8, c10 = b10 + c9;\n  \
    \  long long a11 = a10 + b10, b11 = a10 + c10, c11 = b11 + c10;\n    long long\
    \ a12 = a11 + b11, b12 = a11 + c11, c12 = b12 + c11;\n    long long a13 = a12\
    \ + b12, b13 = a12 + c12, c13 = b13 + c12;\n    long long a14 = a13 + b13, b14\
    \ = a13 + c13, c14 = b14 + c13;\n    long long a15 = a14 + b14, b15 = a14 + c14,\
    \ c15 = b15 + c14;\n    long long a16 = a15 + b15, b16 = a15 + c15, c16 = b16\
    \ + c15;\n    long long a17 = a16 + b16, b17 = a16 + c16, c17 = b17 + c16;\n \
    \   long long a18 = a17 + b17, b18 = a17 + c17, c18 = b18 + c17;\n    long long\
    \ a19 = a18 + b18, b19 = a18 + c18, c19 = b19 + c18;\n    long long a20 = a19\
    \ + b19, b20 = a19 + c19, c20 = b20 + c19;\n    long long a21 = a20 + b20, b21\
    \ = a20 + c20, c21 = b21 + c21;\n    long long a22 = a21 + b21, b22 = a21 + c21,\
    \ c22 = b22 + c22;\n    long long a23 = a22 + b22, b23 = a\n}\nint main() {\n\
    \    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5))\
    \ == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpm6ag5n_f.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmpm6ag5n_f.cpp:18:53: error: \u2018c8\u2019\
    \ was not declared in this scope; did you mean \u2018c9\u2019?\n   18 |     long\
    \ long a8 = a7 + b7, b8 = a7 + c7, c9 = b8 + c8;\n      |                    \
    \                                 ^~\n      |                                \
    \                     c9\n/tmp/tmpm6ag5n_f.cpp:19:21: error: \u2018a9\u2019 was\
    \ not declared in this scope; did you mean \u2018c9\u2019?\n   19 |     long long\
    \ a10 = a9 + b8, b10 = a9 + c8, c10 = b10 + c9;\n      |                     ^~\n\
    \      |                     c9\n/tmp/tmpm6ag5n_f.cpp:20:27: error: \u2018b10\u2019\
    \ was not declared in this scope; did you mean \u2018a10\u2019?\n   20 |     long\
    \ long a11 = a10 + b10, b11 = a10 + c10, c11 = b11 + c10;\n      |           \
    \                ^~~\n      |                           a10\n/tmp/tmpm6ag5n_f.cpp:21:27:\
    \ error: \u2018b11\u2019 was not declared in this scope; did you mean \u2018a11\u2019\
    ?\n   21 |     long long a12 = a11 + b11, b12 = a11 + c11, c12 = b12 + c11;\n\
    \      |                           ^~~\n      |                           a11\n\
    /tmp/tmpm6ag5n_f.cpp:22:27: error: \u2018b12\u2019 was not declared in this scope;\
    \ did you mean \u2018a12\u2019?\n   22 |     long long a13 = a12 + b12, b13 =\
    \ a12 + c12, c13 = b13 + c12;\n      |                           ^~~\n      |\
    \                           a12\n/tmp/tmpm6ag5n_f.cpp:23:27: error: \u2018b13\u2019\
    \ was not declared in this scope; did you mean \u2018a13\u2019?\n   23 |     long\
    \ long a14 = a13 + b13, b14 = a13 + c13, c14 = b14 + c13;\n      |           \
    \                ^~~\n      |                           a13\n/tmp/tmpm6ag5n_f.cpp:24:27:\
    \ error: \u2018b14\u2019 was not declared in this scope; did you mean \u2018a14\u2019\
    ?\n   24 |     long long a15 = a14 + b14, b15 = a14 + c14, c15 = b15 + c14;\n\
    \      |                           ^~~\n      |                           a14\n\
    /tmp/tmpm6ag5n_f.cpp:25:27: error: \u2018b15\u2019 was not declared in this scope;\
    \ did you mean \u2018a15\u2019?\n   25 |     long long a16 = a15 + b15, b16 =\
    \ a15 + c15, c16 = b16 + c15;\n      |                           ^~~\n      |\
    \                           a15\n/"
  exit_code: 1
  status: SyntaxError
