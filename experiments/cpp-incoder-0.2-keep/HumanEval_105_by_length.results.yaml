name: HumanEval_105_by_length
language: cpp
results:
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    std::vector<std::string>\
    \ res;\n    long temp;\n    long min = 0;\n    long max = arr.size() - 1;\n  \
    \  while (min < max) {\n        temp = arr[min];\n        while (min < max &&\
    \ temp < arr[min]) {\n            min++;\n        }\n        while (min < max\
    \ && temp > arr[max]) {\n            max--;\n        }\n        if (min < max)\
    \ {\n            std::string s = to_string(temp);\n            res.push_back(s);\n\
    \            temp = arr[min];\n        }\n    }\n    return res;\n}\nint main()\
    \ {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({2,\
    \ 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 55}))) == (std::vector<std::string>({\"One\"})));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 3, 2}))) == (std::vector<std::string>({\"Three\", \"Two\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>({9, 4, 8}))) == (std::vector<std::string>({\"\
    Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp69v3q95u.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmp69v3q95u.cpp:33:29: error:\
    \ \u2018to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   33 |             std::string s = to_string(temp);\n      |             \
    \                ^~~~~~~~~\n      |                             std::__cxx11::to_string\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp69v3q95u.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:6598:3:\
    \ note: \u2018std::__cxx11::to_string\u2019 declared here\n 6598 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    // Your code\
    \ here\n    std::vector<std::string> result;\n    long temp;\n    long min = std::numeric_limits<long>::max();\n\
    \    long max = std::numeric_limits<long>::min();\n    for (long i : arr) {\n\
    \        min = std::min(i, min);\n        max = std::max(i, max);\n    }\n   \
    \ long mid = (min + max) / 2;\n    for (long i : arr) {\n        if (i <= mid)\
    \ {\n            temp = i;\n        } else {\n            temp = mid;\n      \
    \  }\n        result.push_back(by_length(std::vector<long>{temp}));\n    }\n \
    \   for (long i : arr) {\n        if (i == temp) {\n            result.push_back(\"\
    One\");\n        } else {\n            result.push_back(by_length(std::vector<long>{i\
    \ - temp}));\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = by_length;\n    assert(candidate((std::vector<long>({2, 1, 1, 4,\
    \ 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 55}))) == (std::vector<std::string>({\"One\"})));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 3, 2}))) == (std::vector<std::string>({\"Three\", \"Two\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>({9, 4, 8}))) == (std::vector<std::string>({\"\
    Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp9hkcwitt.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmp9hkcwitt.cpp:36:60: error:\
    \ no matching function for call to \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >::push_back(std::vector<std::__cxx11::basic_string<char> >)\u2019\n   36 |\
    \         result.push_back(by_length(std::vector<long>{temp}));\n      |     \
    \                                                       ^\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n           \
    \      from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n  \
    \               from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmp9hkcwitt.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >\u2019 to \u2018const value_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019\
    }\n 1184 |       push_back(const value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>; _Alloc\
    \ = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::value_type\
    \ = std::__cxx11::basic_string<char>]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    std::vector<std::string>\
    \ res;\n    if (arr.size() == 0) {\n        return res;\n    }\n    long min =\
    \ arr[0];\n    long max = arr[0];\n    for (auto i : arr) {\n        if (i < min)\
    \ {\n            min = i;\n        } else if (i > max) {\n            max = i;\n\
    \        }\n    }\n    long mid = min + (max - min) / 2;\n    long mid2 = mid\
    \ / 10;\n    long mid3 = mid % 10;\n    long mid4 = mid2 / 10;\n    long mid5\
    \ = mid2 % 10;\n    long mid6 = mid3 / 10;\n    long mid7 = mid3 % 10;\n    long\
    \ mid8 = mid4 / 10;\n    long mid9 = mid4 % 10;\n    long mid10 = mid5 / 10;\n\
    \    long mid11 = mid5 % 10;\n    long mid12 = mid6 / 10;\n    long mid13 = mid6\
    \ % 10;\n    long mid14 = mid7 / 10;\n    long mid15 = mid7 % 10;\n    long mid16\
    \ = mid8 / 10;\n    long mid17 = mid8 % 10;\n    long mid18 = mid9 / 10;\n   \
    \ long mid19 = mid9 % 10;\n    long mid20 = mid10 / 10;\n    long mid21 = mid10\
    \ % 10;\n    long mid22 = mid11 / 10;\n    long mid23 = mid11 % 10;\n    long\
    \ mid24 = mid12 / 10;\n    long mid25 = mid12 % 10;\n    long mid26 = mid13 /\
    \ 10;\n    long mid27 = mid13 % 10;\n    long mid28 = mid14 / 10;\n    long mid29\
    \ = mid14 % 10;\n    long mid30 = mid15 / 10;\n    long mid31 = mid15 % 10;\n\
    \    long mid32 = mid16 / 10;\n    long mid33 = mid16 % 10;\n    long mid34 =\
    \ mid17 / 10;\n    long mid35 = mid17 % 10;\n    long mid36 = mid18 / 10;\n  \
    \  long mid37 = mid18 % 10;\n    long mid38 = mid19 / 10;\n    long mid39 = mid19\
    \ % 10;\n    long mid40 = mid20 / 10;\n    long mid41 = mid20 % 10;\n    long\
    \ mid42 = mid21 / 10;\n    long mid43 = mid21 % 10;\n    long mid44 = mid22 /\
    \ 10;\n    long mid45 = mid22 % 10;\n    long mid46 = mid23 / 10;\n    long mid47\
    \ = mid\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({2,\
    \ 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 55}))) == (std::vector<std::string>({\"One\"})));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 3, 2}))) == (std::vector<std::string>({\"Three\", \"Two\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>({9, 4, 8}))) == (std::vector<std::string>({\"\
    Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpingch621.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpingch621.cpp:80:1: error:\
    \ expected \u2018,\u2019 or \u2018;\u2019 before \u2018}\u2019 token\n   80 |\
    \ }\n      | ^\n/tmp/tmpingch621.cpp:80:1: warning: control reaches end of non-void\
    \ function [-Wreturn-type]\n   80 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    std::vector<std::string>\
    \ res;\n    long long len = arr.size();\n    if (len == 0) {\n        return res;\n\
    \    }\n    long long max_len = 0, min_len = 0;\n    for (long i = 0; i < len;\
    \ i++) {\n        if (arr[i] > max_len) {\n            max_len = arr[i];\n   \
    \     }\n        if (arr[i] < min_len) {\n            min_len = arr[i];\n    \
    \    }\n    }\n    long long mid = (max_len + min_len) / 2;\n    long long mid2\
    \ = mid / 10;\n    long long mid3 = mid % 10;\n    long long mid4 = mid / 100;\n\
    \    long long mid5 = mid % 100;\n    long long mid6 = mid / 1000;\n    long long\
    \ mid7 = mid % 1000;\n    long long mid8 = mid / 100000;\n    long long mid9 =\
    \ mid % 100000;\n    long long mid10 = mid / 1000000;\n    long long mid11 = mid\
    \ % 1000000;\n    long long mid12 = mid / 10000000;\n    long long mid13 = mid\
    \ % 10000000;\n    long long mid14 = mid / 1000000000;\n    long long mid15 =\
    \ mid % 1000000000;\n    long long mid16 = mid / 1000000000000;\n    long long\
    \ mid17 = mid % 1000000000000;\n    long long mid18 = mid / 1000000000000000;\n\
    \    long long mid19 = mid % 1000000000000000;\n    long long mid20 = mid / 100000000000000000;\n\
    \    long long mid21 = mid % 100000000000000000;\n    long long mid22 = mid /\
    \ 1000000000000000000;\n    long long mid23 = mid % 1000000000000000000;\n   \
    \ long long mid24 = mid / 10000000000000000000;\n    long long mid25 = mid % 10000000000000000000;\n\
    \    long long mid26 = mid / 1000000000000000000000;\n    long long mid27 = mid\
    \ % 1000000000000000000000;\n    long long mid28 = mid / 100000000000000000000000;\n\
    \    long long mid29 = mid % 100000000000000000000000;\n    long long mid30 =\
    \ mid / 10000000000000000000000000;\n    long long mid31 = mid % 10000000000000000000000000;\n\
    \    long long mid32 = mid / 100000000000000000000000000;\n    long long mid33\
    \ = mid % 100000000000000000000000000;\n    long long mid34 = mid / 1000000000000000000000000000;\n\
    \    long long mid35 = mid % 1000000000000000000000000000;\n    long long mid36\
    \ = mid / 100000000000000000000000000000;\n    long long mid37 = mid % 1000000000000000000\n\
    }\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({2,\
    \ 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 55}))) == (std::vector<std::string>({\"One\"})));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 3, 2}))) == (std::vector<std::string>({\"Three\", \"Two\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>({9, 4, 8}))) == (std::vector<std::string>({\"\
    Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp13p2n5a0.cpp:57:29: warning: integer constant is so large that\
    \ it is unsigned\n   57 |     long long mid24 = mid / 10000000000000000000;\n\
    \      |                             ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp13p2n5a0.cpp:58:29:\
    \ warning: integer constant is so large that it is unsigned\n   58 |     long\
    \ long mid25 = mid % 10000000000000000000;\n      |                          \
    \   ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp13p2n5a0.cpp:59:29: warning: integer constant\
    \ is too large for its type\n   59 |     long long mid26 = mid / 1000000000000000000000;\n\
    \      |                             ^~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp13p2n5a0.cpp:60:29:\
    \ warning: integer constant is too large for its type\n   60 |     long long mid27\
    \ = mid % 1000000000000000000000;\n      |                             ^~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp13p2n5a0.cpp:61:29: warning: integer constant is too large for its type\n\
    \   61 |     long long mid28 = mid / 100000000000000000000000;\n      |      \
    \                       ^~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp13p2n5a0.cpp:62:29:\
    \ warning: integer constant is too large for its type\n   62 |     long long mid29\
    \ = mid % 100000000000000000000000;\n      |                             ^~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp13p2n5a0.cpp:63:29: warning: integer constant is too large for its type\n\
    \   63 |     long long mid30 = mid / 10000000000000000000000000;\n      |    \
    \                         ^~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp13p2n5a0.cpp:64:29:\
    \ warning: integer constant is too large for its type\n   64 |     long long mid31\
    \ = mid % 10000000000000000000000000;\n      |                             ^~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp13p2n5a0.cpp:65:29: warning: integer constant is too large for its type\n\
    \   65 |     long long mid32 = mid / 100000000000000000000000000;\n      |   \
    \                          ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp13p2n5a0.cpp:66:29:\
    \ warning: integer constant is too large for its type\n   66 |     long long mid33\
    \ = mid % 100000000000000000000000000;\n      |                             ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp13"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    std::vector<std::string>\
    \ res;\n    if (arr.size() == 0) {\n        return res;\n    }\n    long maxValue\
    \ = *std::max_element(arr.begin(), arr.end());\n    long minValue = *std::min_element(arr.begin(),\
    \ arr.end());\n    long range = (maxValue - minValue) + 1;\n    long midValue\
    \ = maxValue / 2;\n    long midRange = range / 2;\n    long midMidRange = midRange\
    \ / 2;\n    long midMidRange2 = midMidRange / 2;\n    long midMidRange3 = midMidRange2\
    \ / 2;\n    long midMidRange4 = midMidRange3 / 2;\n    long midMidRange5 = midMidRange4\
    \ / 2;\n    long midMidRange6 = midMidRange5 / 2;\n    long midMidRange7 = midMidRange6\
    \ / 2;\n    long midMidRange8 = midMidRange7 / 2;\n    long midMidRange9 = midMidRange8\
    \ / 2;\n    long midMidRange10 = midMidRange9 / 2;\n    long midMidRange11 = midMidRange10\
    \ / 2;\n    long midMidRange12 = midMidRange11 / 2;\n    long midMidRange13 =\
    \ midMidRange12 / 2;\n    long midMidRange14 = midMidRange13 / 2;\n    long midMidRange15\
    \ = midMidRange14 / 2;\n    long midMidRange16 = midMidRange15 / 2;\n    long\
    \ midMidRange17 = midMidRange16 / 2;\n    long midMidRange18 = midMidRange17 /\
    \ 2;\n    long midMidRange19 = midMidRange18 / 2;\n    long midMidRange20 = midMidRange19\
    \ / 2;\n    long midMidRange21 = midMidRange20 / 2;\n    long midMidRange22 =\
    \ midMidRange21 / 2;\n    long midMidRange23 = midMidRange22 / 2;\n    long midMidRange24\
    \ = midMidRange23 / 2;\n    long midMidRange25 = midMidRange24 / 2;\n    long\
    \ midMidRange26 = midMidRange25 / 2;\n    long midMidRange27 = midMidRange26 /\
    \ 2;\n    long midMidRange28 = midMidRange27 / 2;\n    long midMidRange29 = midMidRange28\
    \ / 2;\n    long midMidRange30 = midMidRange29 / 2;\n    long midMidRange31 =\
    \ midMidRange30 / 2;\n    long midMidRange32 = midMidRange31 / 2;\n    long midMid\n\
    }\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({2,\
    \ 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 55}))) == (std::vector<std::string>({\"One\"})));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 3, 2}))) == (std::vector<std::string>({\"Three\", \"Two\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>({9, 4, 8}))) == (std::vector<std::string>({\"\
    Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmppb4jnvgm.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmppb4jnvgm.cpp:62:1: error:\
    \ expected initializer before \u2018}\u2019 token\n   62 | }\n      | ^\n/tmp/tmppb4jnvgm.cpp:62:1:\
    \ warning: control reaches end of non-void function [-Wreturn-type]\n   62 | }\n\
    \      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    std::vector<std::string>\
    \ res;\n    long n = arr.size();\n    long max_len = 0, min_len = INT_MAX;\n \
    \   for (long i = 0; i < n; i++) {\n        if (max_len < arr[i]) {\n        \
    \    max_len = arr[i];\n        }\n        if (min_len > arr[i]) {\n         \
    \   min_len = arr[i];\n        }\n    }\n    long mid = max_len >> 1;\n    long\
    \ start = 0, end = mid;\n    while (start < end) {\n        long mid = (start\
    \ + end) >> 1;\n        long mid_idx = mid - 1;\n        long mid_val = arr[mid_idx];\n\
    \        if (mid_val < min_len) {\n            end = mid - 1;\n        } else\
    \ if (mid_val > max_len) {\n            start = mid + 1;\n        } else {\n \
    \           long idx = mid - 1;\n            while (idx >= 0 && arr[idx] == mid_val)\
    \ {\n                idx--;\n            }\n            long val = arr[idx];\n\
    \            while (idx < n && arr[idx] == val) {\n                idx++;\n  \
    \          }\n            std::string name = names[val];\n            res.push_back(name);\n\
    \            while (idx >= 0 && arr[idx] == val) {\n                idx--;\n \
    \           }\n            while (idx < n && arr[idx] == val) {\n            \
    \    idx++;\n            }\n        }\n    }\n    return res;\n}\nint main() {\n\
    \    auto candidate = by_length;\n    assert(candidate((std::vector<long>({2,\
    \ 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 55}))) == (std::vector<std::string>({\"One\"})));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 3, 2}))) == (std::vector<std::string>({\"Three\", \"Two\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>({9, 4, 8}))) == (std::vector<std::string>({\"\
    Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpztzop3b3.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpztzop3b3.cpp:50:32: error:\
    \ \u2018names\u2019 was not declared in this scope; did you mean \u2018name\u2019\
    ?\n   50 |             std::string name = names[val];\n      |               \
    \                 ^~~~~\n      |                                name\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    if (arr.empty())\
    \ return {};\n    std::vector<long> sorted_arr;\n    for (auto i : arr) sorted_arr.push_back(i);\n\
    \    std::sort(sorted_arr.begin(), sorted_arr.end());\n    std::vector<long> reversed_arr(sorted_arr.size());\n\
    \    std::reverse(sorted_arr.begin(), sorted_arr.end());\n    for (auto i : sorted_arr)\
    \ reversed_arr[sorted_arr.size() - i - 1] = i;\n    std::vector<std::string> result;\n\
    \    for (auto i : reversed_arr) result.push_back(i == 1 ? One_ : std::to_string(i));\n\
    \    return result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({2,\
    \ 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 55}))) == (std::vector<std::string>({\"One\"})));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 3, 2}))) == (std::vector<std::string>({\"Three\", \"Two\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>({9, 4, 8}))) == (std::vector<std::string>({\"\
    Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpse02jlhh.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpse02jlhh.cpp:28:59: error:\
    \ \u2018One_\u2019 was not declared in this scope\n   28 |     for (auto i : reversed_arr)\
    \ result.push_back(i == 1 ? One_ : std::to_string(i));\n      |              \
    \                                             ^~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    std::vector<std::string>\
    \ res;\n    long n = arr.size();\n    long m = n;\n    long i = 0;\n    long j\
    \ = 0;\n    while (i < n) {\n        while (j < m) {\n            if (arr[j] <\
    \ arr[j + 1]) {\n                long temp = arr[j];\n                arr[j] =\
    \ arr[j + 1];\n                arr[j + 1] = temp;\n            }\n           \
    \ j++;\n        }\n        res.push_back(to_string(arr[i]));\n        i++;\n \
    \       j = 0;\n    }\n    return res;\n}\nint main() {\n    auto candidate =\
    \ by_length;\n    assert(candidate((std::vector<long>({2, 1, 1, 4, 5, 8, 2, 3})))\
    \ == (std::vector<std::string>({\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 55}))) == (std::vector<std::string>({\"One\"})));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 3, 2}))) == (std::vector<std::string>({\"Three\", \"Two\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>({9, 4, 8}))) == (std::vector<std::string>({\"\
    Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpt9zzou2r.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpt9zzou2r.cpp:34:23: error:\
    \ \u2018to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   34 |         res.push_back(to_string(arr[i]));\n      |                \
    \       ^~~~~~~~~\n      |                       std::__cxx11::to_string\nIn file\
    \ included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpt9zzou2r.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:6598:3:\
    \ note: \u2018std::__cxx11::to_string\u2019 declared here\n 6598 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    std::vector<std::string>\
    \ result;\n    long temp;\n    for (long i = 0; i < arr.size(); i++) {\n     \
    \   temp = arr[i];\n        if (temp > 9) {\n            temp = temp - 10;\n \
    \       }\n        result.push_back(to_string(temp));\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    result.resize(std::unique(result.begin(), result.end())\
    \ - result.begin());\n    for (long i = 0; i < result.size(); i++) {\n       \
    \ result[i] = result[i][0];\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = by_length;\n    assert(candidate((std::vector<long>({2, 1, 1, 4,\
    \ 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 55}))) == (std::vector<std::string>({\"One\"})));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 3, 2}))) == (std::vector<std::string>({\"Three\", \"Two\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>({9, 4, 8}))) == (std::vector<std::string>({\"\
    Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpkqiqc_1y.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpkqiqc_1y.cpp:27:26: error:\
    \ \u2018to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   27 |         result.push_back(to_string(temp));\n      |               \
    \           ^~~~~~~~~\n      |                          std::__cxx11::to_string\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpkqiqc_1y.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:6598:3:\
    \ note: \u2018std::__cxx11::to_string\u2019 declared here\n 6598 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    std::vector<std::string>\
    \ res;\n    if (arr.size() == 0) {\n        return res;\n    }\n    long min =\
    \ arr[0];\n    long max = arr[0];\n    for (long i : arr) {\n        if (i < min)\
    \ {\n            min = i;\n        }\n        if (i > max) {\n            max\
    \ = i;\n        }\n    }\n    long mid = (min + max) / 2;\n    long mid2 = mid\
    \ / 10;\n    long mid3 = mid % 10;\n    long mid4 = mid / 100;\n    long mid5\
    \ = mid % 100;\n    long mid6 = mid / 1000;\n    long mid7 = mid % 1000;\n   \
    \ long mid8 = mid / 100000;\n    long mid9 = mid % 100000;\n    long mid10 = mid\
    \ / 1000000;\n    long mid11 = mid % 1000000;\n    long mid12 = mid / 10000000;\n\
    \    long mid13 = mid % 10000000;\n    long mid14 = mid / 1000000000;\n    long\
    \ mid15 = mid % 1000000000;\n    long mid16 = mid / 1000000000000;\n    long mid17\
    \ = mid % 1000000000000;\n    long mid18 = mid / 1000000000000000;\n    long mid19\
    \ = mid % 1000000000000000;\n    long mid20 = mid / 100000000000000000;\n    long\
    \ mid21 = mid % 100000000000000000;\n    long mid22 = mid / 1000000000000000000;\n\
    \    long mid23 = mid % 1000000000000000000;\n    long mid24 = mid / 10000000000000000000;\n\
    \    long mid25 = mid % 10000000000000000000;\n    long mid26 = mid / 1000000000000000000000;\n\
    \    long mid27 = mid % 1000000000000000000000;\n    long mid28 = mid / 100000000000000000000000;\n\
    \    long mid29 = mid % 100000000000000000000000;\n    long mid30 = mid / 10000000000000000000000000;\n\
    \    long mid31 = mid % 10000000000000000000000000;\n    long mid32 = mid / 100000000000000000000000000;\n\
    \    long mid33 = mid % 100000000000000000000000000;\n    long mid34 = mid / 1000000000000000000000000000;\n\
    \    long mid35 = mid % 1000000000000000000000000000;\n    long mid36 = mid /\
    \ 100000000000000000000000000000;\n    long mid37 = mid % 100000000000000000000000000000;\n\
    \    long mid38 = mid / 10000000000000000000000000000000;\n    long mid39 = mid\
    \ % 10000000000000000000000000000000;\n    long mid40 = mid / 1000000000000000000000000000000000;\n\
    \    long mid4\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({2,\
    \ 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 55}))) == (std::vector<std::string>({\"One\"})));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 3, 2}))) == (std::vector<std::string>({\"Three\", \"Two\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>({9, 4, 8}))) == (std::vector<std::string>({\"\
    Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmplzfvskb8.cpp:57:24: warning: integer constant is so large that\
    \ it is unsigned\n   57 |     long mid24 = mid / 10000000000000000000;\n     \
    \ |                        ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmplzfvskb8.cpp:58:24: warning:\
    \ integer constant is so large that it is unsigned\n   58 |     long mid25 = mid\
    \ % 10000000000000000000;\n      |                        ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmplzfvskb8.cpp:59:24: warning: integer constant is too large for its type\n\
    \   59 |     long mid26 = mid / 1000000000000000000000;\n      |             \
    \           ^~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmplzfvskb8.cpp:60:24: warning: integer\
    \ constant is too large for its type\n   60 |     long mid27 = mid % 1000000000000000000000;\n\
    \      |                        ^~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmplzfvskb8.cpp:61:24:\
    \ warning: integer constant is too large for its type\n   61 |     long mid28\
    \ = mid / 100000000000000000000000;\n      |                        ^~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmplzfvskb8.cpp:62:24: warning: integer constant is too large for its type\n\
    \   62 |     long mid29 = mid % 100000000000000000000000;\n      |           \
    \             ^~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmplzfvskb8.cpp:63:24: warning: integer\
    \ constant is too large for its type\n   63 |     long mid30 = mid / 10000000000000000000000000;\n\
    \      |                        ^~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmplzfvskb8.cpp:64:24:\
    \ warning: integer constant is too large for its type\n   64 |     long mid31\
    \ = mid % 10000000000000000000000000;\n      |                        ^~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmplzfvskb8.cpp:65:24: warning: integer constant is too large for its type\n\
    \   65 |     long mid32 = mid / 100000000000000000000000000;\n      |        \
    \                ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmplzfvskb8.cpp:66:24: warning:\
    \ integer constant is too large for its type\n   66 |     long mid33 = mid % 100000000000000000000000000;\n\
    \      |                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmplzfvskb8.cpp:67:24:\
    \ warning: integer constant is too large for its type\n   67 |     long mid34\
    \ = mid /"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    std::vector<std::string>\
    \ ans;\n    long n = arr.size();\n    long max_len = 0, min_len = INT_MAX;\n \
    \   for (long i = 0; i < n; i++) {\n        if (arr[i] > max_len)\n          \
    \  max_len = arr[i];\n        if (arr[i] < min_len)\n            min_len = arr[i];\n\
    \    }\n    long diff = max_len - min_len;\n    long mid = diff / 2;\n    long\
    \ left = 0, right = max_len;\n    while (left < right) {\n        long mid = (left\
    \ + right) / 2;\n        long midval = arr[mid];\n        if (midval < min_len)\
    \ {\n            right = mid;\n        } else {\n            left = mid;\n   \
    \     }\n    }\n    long midval = arr[left];\n    long mid = left;\n    while\
    \ (midval < min_len) {\n        mid++;\n        midval = arr[mid];\n    }\n  \
    \  long midval = arr[mid];\n    long mid = left;\n    while (midval > max_len)\
    \ {\n        mid--;\n        midval = arr[mid];\n    }\n    long midval = arr[mid];\n\
    \    long mid = left;\n    while (midval < min_len) {\n        mid++;\n      \
    \  midval = arr[mid];\n    }\n    long midval = arr[mid];\n    long mid = left;\n\
    \    while (midval > max_len) {\n        mid--;\n        midval = arr[mid];\n\
    \    }\n    long midval = arr[mid];\n    long mid = left;\n    while (midval <\
    \ min_len) {\n        mid++;\n        midval = arr[mid];\n    }\n    long midval\
    \ = arr[mid];\n    long mid = left;\n    while (midval > max_len) {\n        mid--;\n\
    \        midval = arr[mid];\n    }\n    long midval = arr[mid];\n    long mid\
    \ = left;\n    while (midval < min_len) {\n        mid++;\n        midval = arr[mid];\n\
    \    }\n    long midval = arr[mid];\n    long mid = left;\n    while (midval >\
    \ max_len) {\n        mid--;\n        midval = arr[mid];\n    }\n    long midval\
    \ = arr[mid];\n    long mid = left;\n    while (midval < min_len) {\n        mid++;\n\
    \        midval = arr[mid];\n    }\n    long midval = arr[mid];\n    long mid\
    \ = left;\n    while (midval > max_len) {\n        mid--;\n        midval = arr[mid];\n\
    \    }\n    long midval = arr[mid];\n    long mid = left;\n    while (midval <\
    \ min_len) {\n        mid++;\n        midval = arr[mid];\n    }\n    long midval\
    \ = arr[\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({2,\
    \ 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 55}))) == (std::vector<std::string>({\"One\"})));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 3, 2}))) == (std::vector<std::string>({\"Three\", \"Two\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>({9, 4, 8}))) == (std::vector<std::string>({\"\
    Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5i2im9e7.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmp5i2im9e7.cpp:42:10: error:\
    \ redeclaration of \u2018long int mid\u2019\n   42 |     long mid = left;\n  \
    \    |          ^~~\n/tmp/tmp5i2im9e7.cpp:30:10: note: \u2018long int mid\u2019\
    \ previously declared here\n   30 |     long mid = diff / 2;\n      |        \
    \  ^~~\n/tmp/tmp5i2im9e7.cpp:47:10: error: redeclaration of \u2018long int midval\u2019\
    \n   47 |     long midval = arr[mid];\n      |          ^~~~~~\n/tmp/tmp5i2im9e7.cpp:41:10:\
    \ note: \u2018long int midval\u2019 previously declared here\n   41 |     long\
    \ midval = arr[left];\n      |          ^~~~~~\n/tmp/tmp5i2im9e7.cpp:48:10: error:\
    \ redeclaration of \u2018long int mid\u2019\n   48 |     long mid = left;\n  \
    \    |          ^~~\n/tmp/tmp5i2im9e7.cpp:30:10: note: \u2018long int mid\u2019\
    \ previously declared here\n   30 |     long mid = diff / 2;\n      |        \
    \  ^~~\n/tmp/tmp5i2im9e7.cpp:53:10: error: redeclaration of \u2018long int midval\u2019\
    \n   53 |     long midval = arr[mid];\n      |          ^~~~~~\n/tmp/tmp5i2im9e7.cpp:41:10:\
    \ note: \u2018long int midval\u2019 previously declared here\n   41 |     long\
    \ midval = arr[left];\n      |          ^~~~~~\n/tmp/tmp5i2im9e7.cpp:54:10: error:\
    \ redeclaration of \u2018long int mid\u2019\n   54 |     long mid = left;\n  \
    \    |          ^~~\n/tmp/tmp5i2im9e7.cpp:30:10: note: \u2018long int mid\u2019\
    \ previously declared here\n   30 |     long mid = diff / 2;\n      |        \
    \  ^~~\n/tmp/tmp5i2im9e7.cpp:59:10: error: redeclaration of \u2018long int midval\u2019\
    \n   59 |     long midval = arr[mid];\n      |          ^~~~~~\n/tmp/tmp5i2im9e7.cpp:41:10:\
    \ note: \u2018long int midval\u2019 previously declared here\n   41 |     long\
    \ midval = arr[left];\n      |          ^~~~~~\n/tmp/tmp5i2im9e7.cpp:60:10: error:\
    \ redeclaration of \u2018long int mid\u2019\n   60 |     long mid = left;\n  \
    \    |          ^~~\n/tmp/tmp5i2im9e7.cpp:30:10: note: \u2018long int mid\u2019\
    \ previously declared here\n   30 |     long mid = diff / 2;\n      |        \
    \  ^~~\n/tmp/tmp5i2im9e7.cpp:65:10: error: redeclaration of \u2018long int midval\u2019\
    \n   65 |     long midval = arr[mid];\n      |          ^~~~~~\n/tmp/tmp5i2im9e7."
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    if (arr.empty())\
    \ {\n        return {};\n    }\n    std::vector<std::string> res;\n    long max_len\
    \ = 0, min_len = std::numeric_limits<long>::max();\n    for (auto i : arr) {\n\
    \        if (max_len < i) {\n            max_len = i;\n        }\n        if (min_len\
    \ > i) {\n            min_len = i;\n        }\n    }\n    long diff = max_len\
    \ - min_len;\n    for (auto i : arr) {\n        if (diff > 0) {\n            long\
    \ diff = i - min_len;\n            while (diff > 0) {\n                res.push_back(\"\
    One\");\n                diff -= 10;\n            }\n            while (diff <\
    \ 0) {\n                res.push_back(\"Nine\");\n                diff += 10;\n\
    \            }\n        } else {\n            long diff = i - max_len;\n     \
    \       while (diff > 0) {\n                res.push_back(\"Nine\");\n       \
    \         diff -= 10;\n            }\n            while (diff < 0) {\n       \
    \         res.push_back(\"One\");\n                diff += 10;\n            }\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({2, 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({1, -1, 55}))) == (std::vector<std::string>({\"\
    One\"})));\n    assert(candidate((std::vector<long>({1, -1, 3, 2}))) == (std::vector<std::string>({\"\
    Three\", \"Two\", \"One\"})));\n    assert(candidate((std::vector<long>({9, 4,\
    \ 8}))) == (std::vector<std::string>({\"Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "tmpgsh4_qxk: /tmp/tmpgsh4_qxk.cpp:61: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    std::vector<std::string>\
    \ res;\n    if (arr.size() == 0) {\n        return res;\n    }\n    long min =\
    \ *std::min_element(arr.begin(), arr.end());\n    long max = *std::max_element(arr.begin(),\
    \ arr.end());\n    long mid = (min + max) / 2;\n    long mid2 = mid / 10;\n  \
    \  long mid3 = mid % 10;\n    long mid4 = mid2 / 10;\n    long mid5 = mid2 % 10;\n\
    \    long mid6 = mid3 / 10;\n    long mid7 = mid3 % 10;\n    long mid8 = mid4\
    \ / 10;\n    long mid9 = mid4 % 10;\n    long mid10 = mid5 / 10;\n    long mid11\
    \ = mid5 % 10;\n    long mid12 = mid6 / 10;\n    long mid13 = mid6 % 10;\n   \
    \ long mid14 = mid7 / 10;\n    long mid15 = mid7 % 10;\n    long mid16 = mid8\
    \ / 10;\n    long mid17 = mid8 % 10;\n    long mid18 = mid9 / 10;\n    long mid19\
    \ = mid9 % 10;\n    long mid20 = mid10 / 10;\n    long mid21 = mid10 % 10;\n \
    \   long mid22 = mid11 / 10;\n    long mid23 = mid11 % 10;\n    long mid24 = mid12\
    \ / 10;\n    long mid25 = mid12 % 10;\n    long mid26 = mid13 / 10;\n    long\
    \ mid27 = mid13 % 10;\n    long mid28 = mid14 / 10;\n    long mid29 = mid14 %\
    \ 10;\n    long mid30 = mid15 / 10;\n    long mid31 = mid15 % 10;\n    long mid32\
    \ = mid16 / 10;\n    long mid33 = mid16 % 10;\n    long mid34 = mid17 / 10;\n\
    \    long mid35 = mid17 % 10;\n    long mid36 = mid18 / 10;\n    long mid37 =\
    \ mid18 % 10;\n    long mid38 = mid19 / 10;\n    long mid39 = mid19 % 10;\n  \
    \  long mid40 = mid20 / 10;\n    long mid41 = mid20 % 10;\n    long mid42 = mid21\
    \ / 10;\n    long mid43 = mid21 % 10;\n    long mid44 = mid22 / 10;\n    long\
    \ mid45 = mid22 % 10;\n    long mid46 = mid23 / 10;\n    long mid47 = mid23 %\
    \ 10;\n    long mid48 = mid24 / 10;\n\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({2, 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({1, -1, 55}))) == (std::vector<std::string>({\"\
    One\"})));\n    assert(candidate((std::vector<long>({1, -1, 3, 2}))) == (std::vector<std::string>({\"\
    Three\", \"Two\", \"One\"})));\n    assert(candidate((std::vector<long>({9, 4,\
    \ 8}))) == (std::vector<std::string>({\"Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "tmpwrh0do68: /tmp/tmpwrh0do68.cpp:78: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    std::vector<std::string>\
    \ res;\n    long n = arr.size();\n    long max_len = 0, min_len = 0;\n    for\
    \ (long i = 0; i < n; i++) {\n        if (max_len < arr[i]) {\n            max_len\
    \ = arr[i];\n        }\n        if (min_len > arr[i]) {\n            min_len =\
    \ arr[i];\n        }\n    }\n    long mid = max_len;\n    long start = 0, end\
    \ = 0, mid_index = 0;\n    while (start < n) {\n        while (arr[start] < mid)\
    \ {\n            start++;\n        }\n        while (arr[end] > mid) {\n     \
    \       end--;\n        }\n        mid_index = (start + end) / 2;\n        res.push_back(names[mid_index]);\n\
    \        start = mid_index + 1;\n        end = mid_index - 1;\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({2,\
    \ 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 55}))) == (std::vector<std::string>({\"One\"})));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 3, 2}))) == (std::vector<std::string>({\"Three\", \"Two\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>({9, 4, 8}))) == (std::vector<std::string>({\"\
    Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpcd3dpp1a.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpcd3dpp1a.cpp:41:23: error:\
    \ \u2018names\u2019 was not declared in this scope\n   41 |         res.push_back(names[mid_index]);\n\
    \      |                       ^~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    std::vector<std::string>\
    \ res;\n    if (arr.size() == 0) {\n        return res;\n    }\n    long max_len\
    \ = 0, min_len = INT_MAX;\n    for (long i : arr) {\n        if (max_len < i)\
    \ {\n            max_len = i;\n        }\n        if (min_len > i) {\n       \
    \     min_len = i;\n        }\n    }\n    long len = max_len - min_len + 1;\n\
    \    long mid = len / 2;\n    long start = min_len + 1;\n    long end = max_len\
    \ - 1;\n    long mid1 = mid - 1;\n    long mid2 = mid + 1;\n    long mid3 = mid\
    \ + 2;\n    long mid4 = mid + 3;\n    long mid5 = mid + 4;\n    long mid6 = mid\
    \ + 5;\n    long mid7 = mid + 6;\n    long mid8 = mid + 7;\n    long mid9 = mid\
    \ + 8;\n    long mid10 = mid + 9;\n    long mid11 = mid + 10;\n    long mid12\
    \ = mid + 11;\n    long mid13 = mid + 12;\n    long mid14 = mid + 13;\n    long\
    \ mid15 = mid + 14;\n    long mid16 = mid + 15;\n    long mid17 = mid + 16;\n\
    \    long mid18 = mid + 17;\n    long mid19 = mid + 18;\n    long mid20 = mid\
    \ + 19;\n    long mid21 = mid + 20;\n    long mid22 = mid + 21;\n    long mid23\
    \ = mid + 22;\n    long mid24 = mid + 23;\n    long mid25 = mid + 24;\n    long\
    \ mid26 = mid + 25;\n    long mid27 = mid + 26;\n    long mid28 = mid + 27;\n\
    \    long mid29 = mid + 28;\n    long mid30 = mid + 29;\n    long mid31 = mid\
    \ + 30;\n    long mid32 = mid + 31;\n    long mid33 = mid + 32;\n    long mid34\
    \ = mid + 33;\n    long mid35 = mid + 34;\n    long mid36 = mid + 35;\n    long\
    \ mid37 = mid + 36;\n    long mid38 = mid + 37;\n    long mid39 = mid + 38;\n\
    \    long mid40 = mid + 39;\n    long mid41 = mid + 40;\n    long mid42 = mid\
    \ + 41;\n    long mid43 = mid + 42;\n    long mid44 = mid + 43;\n    long mid45\
    \ = mid + 44;\n    long mid46 = mid + 45;\n    long mid47 = mid + 46;\n    long\
    \ mid48 = mid + 47;\n    long mid\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({2, 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({1, -1, 55}))) == (std::vector<std::string>({\"\
    One\"})));\n    assert(candidate((std::vector<long>({1, -1, 3, 2}))) == (std::vector<std::string>({\"\
    Three\", \"Two\", \"One\"})));\n    assert(candidate((std::vector<long>({9, 4,\
    \ 8}))) == (std::vector<std::string>({\"Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpis_xorks.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpis_xorks.cpp:86:1: error:\
    \ expected initializer before \u2018}\u2019 token\n   86 | }\n      | ^\n/tmp/tmpis_xorks.cpp:86:1:\
    \ warning: control reaches end of non-void function [-Wreturn-type]\n   86 | }\n\
    \      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    // Write your\
    \ code here\n    std::vector<std::string> res;\n    long temp;\n    long min =\
    \ arr[0];\n    long max = arr[0];\n    for(long i = 1; i < arr.size(); i++) {\n\
    \        if(arr[i] < min) {\n            min = arr[i];\n        }\n        if(arr[i]\
    \ > max) {\n            max = arr[i];\n        }\n    }\n    long mid = (min +\
    \ max) / 2;\n    long mid2 = mid / 10;\n    long mid3 = mid % 10;\n    long mid4\
    \ = mid % 100;\n    long mid5 = mid % 1000;\n    long mid6 = mid % 10000;\n  \
    \  long mid7 = mid % 100000;\n    long mid8 = mid % 1000000;\n    long mid9 =\
    \ mid % 10000000;\n    long mid10 = mid % 100000000;\n    long mid11 = mid % 100000000;\n\
    \    long mid12 = mid % 1000000000;\n    long mid13 = mid % 1000000000;\n    long\
    \ mid14 = mid % 10000000000;\n    long mid15 = mid % 10000000000;\n    long mid16\
    \ = mid % 100000000000;\n    long mid17 = mid % 100000000000;\n    long mid18\
    \ = mid % 1000000000000;\n    long mid19 = mid % 1000000000000;\n    long mid20\
    \ = mid % 100000000000000;\n    long mid21 = mid % 100000000000000;\n    long\
    \ mid22 = mid % 1000000000000000;\n    long mid23 = mid % 1000000000000000;\n\
    \    long mid24 = mid % 100000000000000000;\n    long mid25 = mid % 100000000000000000;\n\
    \    long mid26 = mid % 1000000000000000000;\n    long mid27 = mid % 1000000000000000000;\n\
    \    long mid28 = mid % 100000000000000000000;\n    long mid29 = mid % 100000000000000000000;\n\
    \    long mid30 = mid % 1000000000000000000000;\n    long mid31 = mid % 1000000000000000000000;\n\
    \    long mid32 = mid % 100000000000000000000000;\n    long mid33 = mid % 100000000000000000;\n\
    \    long mid34 = mid % 1000000000000000000;\n    long mid35 = mid % 1000000000000000000;\n\
    \    long mid36 = mid % 100000000000000000;\n    long mid37 = mid % 100000000000000000;\n\
    \    long mid38 = mid % 1000000000000000000;\n    long mid39 = mid % 1000000000000000000;\n\
    \    long mid\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({2,\
    \ 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 55}))) == (std::vector<std::string>({\"One\"})));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 3, 2}))) == (std::vector<std::string>({\"Three\", \"Two\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>({9, 4, 8}))) == (std::vector<std::string>({\"\
    Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmplgntji3j.cpp:60:24: warning: integer constant is too large for\
    \ its type\n   60 |     long mid28 = mid % 100000000000000000000;\n      |   \
    \                     ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmplgntji3j.cpp:61:24: warning:\
    \ integer constant is too large for its type\n   61 |     long mid29 = mid % 100000000000000000000;\n\
    \      |                        ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmplgntji3j.cpp:62:24:\
    \ warning: integer constant is too large for its type\n   62 |     long mid30\
    \ = mid % 1000000000000000000000;\n      |                        ^~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmplgntji3j.cpp:63:24: warning: integer constant is too large for its type\n\
    \   63 |     long mid31 = mid % 1000000000000000000000;\n      |             \
    \           ^~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmplgntji3j.cpp:64:24: warning: integer\
    \ constant is too large for its type\n   64 |     long mid32 = mid % 100000000000000000000000;\n\
    \      |                        ^~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmplgntji3j.cpp:\
    \ In function \u2018std::vector<std::__cxx11::basic_string<char> > by_length(std::vector<long\
    \ int>)\u2019:\n/tmp/tmplgntji3j.cpp:73:1: error: expected initializer before\
    \ \u2018}\u2019 token\n   73 | }\n      | ^\n/tmp/tmplgntji3j.cpp:73:1: warning:\
    \ no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    std::vector<std::string>\
    \ res;\n    if (arr.size() == 0) {\n        return res;\n    }\n    long n = arr[0];\n\
    \    for (size_t i = 1; i < arr.size(); i++) {\n        if (arr[i] < n) {\n  \
    \          n = arr[i];\n        }\n    }\n    long m = n;\n    for (size_t i =\
    \ 1; i < arr.size(); i++) {\n        if (arr[i] > m) {\n            m = arr[i];\n\
    \        }\n    }\n    long l = m;\n    for (size_t i = 1; i < arr.size(); i++)\
    \ {\n        if (arr[i] > l) {\n            l = arr[i];\n        }\n    }\n  \
    \  long h = l;\n    for (size_t i = 1; i < arr.size(); i++) {\n        if (arr[i]\
    \ > h) {\n            h = arr[i];\n        }\n    }\n    long q = h;\n    for\
    \ (size_t i = 1; i < arr.size(); i++) {\n        if (arr[i] > q) {\n         \
    \   q = arr[i];\n        }\n    }\n    long p = q;\n    for (size_t i = 1; i <\
    \ arr.size(); i++) {\n        if (arr[i] > p) {\n            p = arr[i];\n   \
    \     }\n    }\n    long r = p;\n    for (size_t i = 1; i < arr.size(); i++) {\n\
    \        if (arr[i] > r) {\n            r = arr[i];\n        }\n    }\n    long\
    \ s = r;\n    for (size_t i = 1; i < arr.size(); i++) {\n        if (arr[i] >\
    \ s) {\n            s = arr[i];\n        }\n    }\n    long t = s;\n    for (size_t\
    \ i = 1; i < arr.size(); i++) {\n        if (arr[i] > t) {\n            t = arr[i];\n\
    \        }\n    }\n    long u = t;\n    for (size_t i = 1; i < arr.size(); i++)\
    \ {\n        if (arr[i] > u) {\n            u = arr[i];\n        }\n    }\n  \
    \  long v = u;\n    for (size_t i = 1; i < arr.size(); i++) {\n        if (arr[i]\
    \ > v) {\n            v = arr[i];\n        }\n    }\n    long w = v;\n    for\
    \ (size_t i = 1; i < arr.size(); i++) {\n        if (arr[i] > w) {\n         \
    \   w = arr[i];\n        }\n    }\n    long x = w;\n    for (size_t i = 1; i <\
    \ arr.size(); i++) {\n        if (arr[i] > x) {\n            x = arr[i];\n   \
    \     }\n    }\n    long y = x;\n    for (size_t i = 1; i < arr.size(); i++) {\n\
    \        if (arr[i] > y) {\n            y = arr[i];\n        }\n    }\n    long\
    \ z = y;\n    for (size_t i = 1; i < arr.size(); i++) {\n        if (arr[i] >\
    \ z) {\n            z = arr[i];\n        }\n    }\n    long a = z;\n    for (size_t\
    \ i = 1; i < arr.size(); i++) {\n        if (arr[i] > a) {\n            a = arr[i];\n\
    \        }\n    }\n    long b = a;\n    for (size_t i = 1; i < arr.size(); i++)\
    \ {\n        if (arr[i] > b) {\n            b = arr[i];\n        }\n    }\n  \
    \  long \n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({2,\
    \ 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 55}))) == (std::vector<std::string>({\"One\"})));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 3, 2}))) == (std::vector<std::string>({\"Three\", \"Two\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>({9, 4, 8}))) == (std::vector<std::string>({\"\
    Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpi2aofwnw.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpi2aofwnw.cpp:127:1: error:\
    \ expected unqualified-id before \u2018}\u2019 token\n  127 | }\n      | ^\n/tmp/tmpi2aofwnw.cpp:127:1:\
    \ warning: control reaches end of non-void function [-Wreturn-type]\n  127 | }\n\
    \      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    std::vector<std::string>\
    \ res;\n    long n = arr.size();\n    long m = std::min(n, 9);\n    long k = std::max(n,\
    \ m);\n    long count = 0;\n    for (long i = 0; i < k; i++) {\n        count\
    \ += arr[i];\n    }\n    if (count == 0) {\n        return res;\n    }\n    long\
    \ m = std::min(n, 9);\n    long k = std::max(n, m);\n    long count = 0;\n   \
    \ for (long i = 0; i < k; i++) {\n        count += arr[i];\n    }\n    if (count\
    \ < 9) {\n        for (long i = 0; i < k; i++) {\n            if (arr[i] < 9)\
    \ {\n                res.push_back(\"One\");\n            }\n            if (arr[i]\
    \ < 18) {\n                res.push_back(\"Two\");\n            }\n          \
    \  if (arr[i] < 27) {\n                res.push_back(\"Three\");\n           \
    \ }\n            if (arr[i] < 36) {\n                res.push_back(\"Four\");\n\
    \            }\n            if (arr[i] < 45) {\n                res.push_back(\"\
    Five\");\n            }\n            if (arr[i] < 54) {\n                res.push_back(\"\
    Six\");\n            }\n            if (arr[i] < 63) {\n                res.push_back(\"\
    Seven\");\n            }\n            if (arr[i] < 72) {\n                res.push_back(\"\
    Eight\");\n            }\n            if (arr[i] < 81) {\n                res.push_back(\"\
    Nine\");\n            }\n        }\n    }\n    return res;\n}\nint main() {\n\
    \    auto candidate = by_length;\n    assert(candidate((std::vector<long>({2,\
    \ 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 55}))) == (std::vector<std::string>({\"One\"})));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 3, 2}))) == (std::vector<std::string>({\"Three\", \"Two\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>({9, 4, 8}))) == (std::vector<std::string>({\"\
    Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7cjtnngw.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmp7cjtnngw.cpp:22:27: error:\
    \ no matching function for call to \u2018min(long int&, int)\u2019\n   22 |  \
    \   long m = std::min(n, 9);\n      |                           ^\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp7cjtnngw.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:198:5:\
    \ note: candidate: \u2018template<class _Tp> constexpr const _Tp& std::min(const\
    \ _Tp&, const _Tp&)\u2019\n  198 |     min(const _Tp& __a, const _Tp& __b)\n \
    \     |     ^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:198:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp7cjtnngw.cpp:22:27:\
    \ note:   deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018\
    long int\u2019 and \u2018int\u2019)\n   22 |     long m = std::min(n, 9);\n  \
    \    |                           ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \      "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    // write your\
    \ code here\n    std::vector<std::string> res;\n    long long n = arr.size();\n\
    \    long long m = n;\n    long long k = 0;\n    long long i = 0;\n    long long\
    \ j = 0;\n    long long temp = 0;\n    while (i < n) {\n        while (j < m)\
    \ {\n            if (arr[j] >= 1 && arr[j] <= 9) {\n                temp = arr[j];\n\
    \                arr[j] = k;\n                k = temp;\n                j++;\n\
    \            } else {\n                j++;\n            }\n        }\n      \
    \  res.push_back(to_string(k));\n        i = j;\n        j = 0;\n        k = 0;\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = by_length;\n  \
    \  assert(candidate((std::vector<long>({2, 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({1, -1, 55}))) == (std::vector<std::string>({\"\
    One\"})));\n    assert(candidate((std::vector<long>({1, -1, 3, 2}))) == (std::vector<std::string>({\"\
    Three\", \"Two\", \"One\"})));\n    assert(candidate((std::vector<long>({9, 4,\
    \ 8}))) == (std::vector<std::string>({\"Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpoi5vmb45.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpoi5vmb45.cpp:39:23: error:\
    \ \u2018to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   39 |         res.push_back(to_string(k));\n      |                     \
    \  ^~~~~~~~~\n      |                       std::__cxx11::to_string\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n      \
    \           from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpoi5vmb45.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:6598:3:\
    \ note: \u2018std::__cxx11::to_string\u2019 declared here\n 6598 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    std::vector<std::string>\
    \ res;\n    if (arr.size() == 0) {\n        return res;\n    }\n    long max =\
    \ *std::max_element(arr.begin(), arr.end());\n    long min = *std::min_element(arr.begin(),\
    \ arr.end());\n    if (max >= 1 && max <= 9) {\n        long mid = max / 10;\n\
    \        long left = max - mid * 10;\n        long right = min + mid * 10;\n \
    \       std::vector<std::string> left_res = by_length(arr);\n        std::vector<std::string>\
    \ right_res = by_length(arr);\n        std::vector<std::string> left_res_copy\
    \ = left_res;\n        std::vector<std::string> right_res_copy = right_res;\n\
    \        std::vector<std::string> left_res_copy_reverse = left_res_copy;\n   \
    \     std::vector<std::string> right_res_copy_reverse = right_res_copy;\n    \
    \    std::vector<std::string> left_res_copy_sorted = left_res_copy;\n        std::vector<std::string>\
    \ right_res_copy_sorted = right_res_copy;\n        std::vector<std::string> left_res_copy_reverse_sorted\
    \ = left_res_copy_reverse;\n        std::vector<std::string> right_res_copy_reverse_sorted\
    \ = right_res_copy_reverse;\n        std::vector<std::string> left_res_copy_sorted_reverse\
    \ = left_res_copy_sorted;\n        std::vector<std::string> right_res_copy_sorted_reverse\
    \ = right_res_copy_sorted;\n        std::vector<std::string> left_res_copy_reverse_sorted_reverse\
    \ = left_res_copy_reverse_sorted;\n        std::vector<std::string> right_res_copy_reverse_sorted_reverse\
    \ = right_res_copy_reverse_sorted;\n        std::vector<std::string> left_res_copy_sorted_reverse_copy\
    \ = left_res_copy_sorted_reverse;\n        std::vector<std::string> right_res_copy_sorted_reverse_copy\
    \ = right_res_copy_sorted_reverse;\n        std::vector<std::string> left_res_copy_reverse_sorted_reverse_copy\
    \ = left_res_copy_reverse_sorted_reverse;\n        std::vector<std::string> right_res_copy_reverse_sorted_reverse_copy\
    \ = right_res_copy_reverse_sorted_reverse;\n        std::vector<std::string> left_res_copy_sorted_reverse_copy_reverse\
    \ = left_res_copy_sorted_reverse_copy;\n        std::vector<std::string> right_res_copy_sorted_reverse_copy_reverse\
    \ = right_res_copy_sorted_reverse_copy;\n        std::vector<std::string> left_res_copy_reverse_sorted_reverse_copy_reverse\
    \ = left_res_copy_reverse_sorted_reverse_copy;\n        std::vector<std::string>\
    \ right_res_copy_reverse_sorted_reverse_copy_reverse = right_res_copy_reverse_sorted_reverse_copy;\n\
    \        std::vector<std::string> left_res_copy_sorted_reverse_copy_reverse_sorted\
    \ = left_res_copy_sorted_reverse_copy_reverse;\n        std::vector<std::string>\
    \ right_res_copy_sorted_reverse_copy_reverse_sorted = right_res_copy_sorted_reverse_copy_reverse;\n\
    \        std::vector<std::string> left_res_copy_reverse_sorted_reverse_copy_reverse_sorted\
    \ = left_res_copy_reverse_sorted_reverse_copy_reverse;\n        std::vector<std::string>\
    \ right_res_\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({2,\
    \ 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 55}))) == (std::vector<std::string>({\"One\"})));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 3, 2}))) == (std::vector<std::string>({\"Three\", \"Two\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>({9, 4, 8}))) == (std::vector<std::string>({\"\
    Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpkznomdlb.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpkznomdlb.cpp:56:1: error:\
    \ expected initializer before \u2018}\u2019 token\n   56 | }\n      | ^\n/tmp/tmpkznomdlb.cpp:57:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   57 | int main() {\n      |            ^\n/tmp/tmpkznomdlb.cpp:64:1: error:\
    \ expected \u2018}\u2019 at end of input\n   64 | }\n      | ^\n/tmp/tmpkznomdlb.cpp:19:59:\
    \ note: to match this \u2018{\u2019\n   19 | std::vector<std::string> by_length(std::vector<long>\
    \ arr) {\n      |                                                           ^\n\
    /tmp/tmpkznomdlb.cpp:64:1: warning: control reaches end of non-void function [-Wreturn-type]\n\
    \   64 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    std::vector<std::string>\
    \ res;\n    if (arr.size() == 0) {\n        return res;\n    }\n    long max_len\
    \ = 0, min_len = std::numeric_limits<long>::max();\n    for (auto i : arr) {\n\
    \        if (max_len < i) {\n            max_len = i;\n        }\n        if (i\
    \ < min_len) {\n            min_len = i;\n        }\n    }\n    long mid = max_len;\n\
    \    while (max_len > min_len) {\n        long mid = max_len;\n        for (auto\
    \ i : arr) {\n            if (i < mid) {\n                res.emplace_back(names[i]);\n\
    \                res.emplace_back(names[i - 1]);\n                res.emplace_back(names[i\
    \ - 2]);\n                res.emplace_back(names[i - 3]);\n                res.emplace_back(names[i\
    \ - 4]);\n                res.emplace_back(names[i - 5]);\n                res.emplace_back(names[i\
    \ - 6]);\n                res.emplace_back(names[i - 7]);\n                res.emplace_back(names[i\
    \ - 8]);\n                res.emplace_back(names[i - 9]);\n                res.emplace_back(names[i\
    \ - 10]);\n                res.emplace_back(names[i - 11]);\n                res.emplace_back(names[i\
    \ - 12]);\n                res.emplace_back(names[i - 13]);\n                res.emplace_back(names[i\
    \ - 14]);\n                res.emplace_back(names[i - 15]);\n                res.emplace_back(names[i\
    \ - 16]);\n                res.emplace_back(names[i - 17]);\n                res.emplace_back(names[i\
    \ - 18]);\n                res.emplace_back(names[i - 19]);\n                res.emplace_back(names[i\
    \ - 20]);\n                res.emplace_back(names[i - 21]);\n                res.emplace_back(names[i\
    \ - 22]);\n                res.emplace_back(names[i - 23]);\n                res.emplace_back(names[i\
    \ - 24]);\n                res.emplace_back(names[i - 25]);\n                res.emplace_back(names[i\
    \ - 26]);\n                res.emplace_back(names[i - 27]);\n                res.emplace_back(names[i\
    \ - 28]);\n                res.emplace_back(names[i - 29]);\n                res.emplace_back(names[i\
    \ - 30]);\n                res.emplace_back(names[i - 31]);\n                res.emplace_back(names[i\
    \ - 32]);\n                res.emplace_back(names[i - 33]);\n                res.emplace_back(\n\
    }\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({2,\
    \ 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 55}))) == (std::vector<std::string>({\"One\"})));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 3, 2}))) == (std::vector<std::string>({\"Three\", \"Two\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>({9, 4, 8}))) == (std::vector<std::string>({\"\
    Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpo2wy3y0s.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpo2wy3y0s.cpp:38:34: error:\
    \ \u2018names\u2019 was not declared in this scope\n   38 |                 res.emplace_back(names[i]);\n\
    \      |                                  ^~~~~\n/tmp/tmpo2wy3y0s.cpp:73:1: error:\
    \ expected primary-expression before \u2018}\u2019 token\n   73 | }\n      | ^\n\
    /tmp/tmpo2wy3y0s.cpp:74:12: error: a function-definition is not allowed here before\
    \ \u2018{\u2019 token\n   74 | int main() {\n      |            ^\n/tmp/tmpo2wy3y0s.cpp:81:1:\
    \ error: expected \u2018}\u2019 at end of input\n   81 | }\n      | ^\n/tmp/tmpo2wy3y0s.cpp:36:28:\
    \ note: to match this \u2018{\u2019\n   36 |         for (auto i : arr) {\n  \
    \    |                            ^\n/tmp/tmpo2wy3y0s.cpp:81:1: error: expected\
    \ \u2018}\u2019 at end of input\n   81 | }\n      | ^\n/tmp/tmpo2wy3y0s.cpp:34:31:\
    \ note: to match this \u2018{\u2019\n   34 |     while (max_len > min_len) {\n\
    \      |                               ^\n/tmp/tmpo2wy3y0s.cpp:81:1: error: expected\
    \ \u2018}\u2019 at end of input\n   81 | }\n      | ^\n/tmp/tmpo2wy3y0s.cpp:19:59:\
    \ note: to match this \u2018{\u2019\n   19 | std::vector<std::string> by_length(std::vector<long>\
    \ arr) {\n      |                                                           ^\n\
    /tmp/tmpo2wy3y0s.cpp:81:1: warning: control reaches end of non-void function [-Wreturn-type]\n\
    \   81 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    if (arr.size()\
    \ == 0) {\n        return {};\n    }\n    long min = *std::min_element(arr.begin(),\
    \ arr.end());\n    long max = *std::max_element(arr.begin(), arr.end());\n   \
    \ std::vector<std::string> res;\n    for (long i = min; i <= max; i++) {\n   \
    \     std::string s = to_string(i);\n        res.push_back(s);\n    }\n    std::reverse(arr.begin(),\
    \ arr.end());\n    for (long i = 0; i < arr.size(); i++) {\n        std::string\
    \ s = arr[i];\n        std::string t = res[i];\n        arr[i] = t;\n    }\n \
    \   return res;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({2,\
    \ 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 55}))) == (std::vector<std::string>({\"One\"})));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 3, 2}))) == (std::vector<std::string>({\"Three\", \"Two\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>({9, 4, 8}))) == (std::vector<std::string>({\"\
    Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvjyjb5w9.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpvjyjb5w9.cpp:27:25: error:\
    \ \u2018to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   27 |         std::string s = to_string(i);\n      |                    \
    \     ^~~~~~~~~\n      |                         std::__cxx11::to_string\nIn file\
    \ included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpvjyjb5w9.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:6598:3:\
    \ note: \u2018std::__cxx11::to_string\u2019 declared here\n 6598 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n/tmp/tmpvjyjb5w9.cpp:32:30: error: conversion\
    \ from \u2018__gnu_cxx::__alloc_traits<std::allocator<long int>, long int>::value_type\u2019\
    \ {aka \u2018long int\u2019} to non-scalar type \u2018std::string\u2019 {aka \u2018\
    std::__cxx11::basic_string<char>\u2019} requested\n   32 |         std::string\
    \ s = arr[i];\n      |                              ^\n/tmp/tmpvjyjb5w9.cpp:34:18:\
    \ error: cannot convert \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } to \u2018__gnu_cxx::__alloc_traits<std::allocator<long int>, long int>::value_type\u2019\
    \ {aka \u2018long int\u2019} in assignment\n   34 |         arr[i] = t;\n    \
    \  |                  ^\n      |                  |\n      |        "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    std::vector<std::string>\
    \ res;\n    long temp;\n    for(long i = 0; i < arr.size(); i++) {\n        if(arr[i]\
    \ >= 1 && arr[i] <= 9) {\n            temp = arr[i];\n            arr[i] = arr[arr.size()-1\
    \ - i];\n            arr[arr.size()-1 - i] = temp;\n            res.push_back(\"\
    One\");\n            res.push_back(\"Two\");\n            res.push_back(\"Three\"\
    );\n            res.push_back(\"Four\");\n            res.push_back(\"Five\");\n\
    \            res.push_back(\"Six\");\n            res.push_back(\"Seven\");\n\
    \            res.push_back(\"Eight\");\n            res.push_back(\"Nine\");\n\
    \            res.push_back(\"Ten\");\n            res.push_back(\"Eleven\");\n\
    \            res.push_back(\"Twelve\");\n            res.push_back(\"Thirteen\"\
    );\n            res.push_back(\"Fourteen\");\n            res.push_back(\"Fifteen\"\
    );\n            res.push_back(\"Sixteen\");\n            res.push_back(\"Seventeen\"\
    );\n            res.push_back(\"Eighteen\");\n            res.push_back(\"Nineteen\"\
    );\n            res.push_back(\"Twenty\");\n            res.push_back(\"Twenty\
    \ one\");\n            res.push_back(\"Twenty two\");\n            res.push_back(\"\
    Twenty three\");\n            res.push_back(\"Twenty four\");\n            res.push_back(\"\
    Twenty five\");\n            res.push_back(\"Twenty six\");\n            res.push_back(\"\
    Twenty seven\");\n            res.push_back(\"Twenty eight\");\n            res.push_back(\"\
    Twenty nine\");\n            res.push_back(\"Twenty ten\");\n            res.push_back(\"\
    Twenty eleven\");\n            res.push_back(\"Twenty twelve\");\n           \
    \ res.push_back(\"Twenty thirteen\");\n            res.push_back(\"Twenty fourteen\"\
    );\n            res.push_back(\"Twenty fifteen\");\n            res.push_back(\"\
    Twenty sixteen\");\n            res.push_back(\"Twenty seventeen\");\n       \
    \     res.push_back(\"Twenty eighteen\");\n            res.push_back(\"Twenty\
    \ nineteen\");\n            res.push_back(\"Twenty twenty\");\n            res.push_back(\"\
    Twenty twenty one\");\n            res.push_back(\"Twenty twenty two\");\n   \
    \         res.push_back(\"Twenty twenty three\");\n            res.push_back(\"\
    Twenty twenty four\");\n            res.push_back(\"Twenty twenty five\");\n \
    \           res.push_back(\"Twenty twenty \n}\nint main() {\n    auto candidate\
    \ = by_length;\n    assert(candidate((std::vector<long>({2, 1, 1, 4, 5, 8, 2,\
    \ 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"Four\", \"Three\"\
    , \"Two\", \"Two\", \"One\", \"One\"})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 55}))) == (std::vector<std::string>({\"One\"})));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 3, 2}))) == (std::vector<std::string>({\"Three\", \"Two\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>({9, 4, 8}))) == (std::vector<std::string>({\"\
    Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3aeormea.cpp:72:27: warning: missing terminating \" character\n\
    \   72 |             res.push_back(\"Twenty twenty\n      |                  \
    \         ^\n/tmp/tmp3aeormea.cpp:72:27: error: missing terminating \" character\n\
    \   72 |             res.push_back(\"Twenty twenty\n      |                  \
    \         ^~~~~~~~~~~~~~ \n/tmp/tmp3aeormea.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmp3aeormea.cpp:73:1: error:\
    \ expected primary-expression before \u2018}\u2019 token\n   73 | }\n      | ^\n\
    /tmp/tmp3aeormea.cpp:74:12: error: a function-definition is not allowed here before\
    \ \u2018{\u2019 token\n   74 | int main() {\n      |            ^\n/tmp/tmp3aeormea.cpp:81:1:\
    \ error: expected \u2018}\u2019 at end of input\n   81 | }\n      | ^\n/tmp/tmp3aeormea.cpp:22:42:\
    \ note: to match this \u2018{\u2019\n   22 |     for(long i = 0; i < arr.size();\
    \ i++) {\n      |                                          ^\n/tmp/tmp3aeormea.cpp:81:1:\
    \ error: expected \u2018}\u2019 at end of input\n   81 | }\n      | ^\n/tmp/tmp3aeormea.cpp:19:59:\
    \ note: to match this \u2018{\u2019\n   19 | std::vector<std::string> by_length(std::vector<long>\
    \ arr) {\n      |                                                           ^\n\
    /tmp/tmp3aeormea.cpp:81:1: warning: no return statement in function returning\
    \ non-void [-Wreturn-type]\n   81 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    std::vector<std::string>\
    \ res;\n    if (arr.size() == 0) {\n        return res;\n    }\n    long max =\
    \ *std::max_element(arr.begin(), arr.end());\n    long min = *std::min_element(arr.begin(),\
    \ arr.end());\n    long mid = max / 10;\n    long left = max - 10 * mid;\n   \
    \ long right = max - 10 * mid + 1;\n    long mid2 = min / 10;\n    long left2\
    \ = min - 10 * mid2;\n    long right2 = min - 10 * mid2 + 1;\n    long mid3 =\
    \ max / 100;\n    long left3 = max - 100 * mid3;\n    long right3 = max - 100\
    \ * mid3 + 1;\n    long mid4 = min / 100;\n    long left4 = min - 100 * mid4;\n\
    \    long right4 = min - 100 * mid4 + 1;\n    long mid5 = max / 1000;\n    long\
    \ left5 = max - 1000 * mid5;\n    long right5 = max - 1000 * mid5 + 1;\n    long\
    \ mid6 = min / 1000;\n    long left6 = min - 1000 * mid6;\n    long right6 = min\
    \ - 1000 * mid6 + 1;\n    long mid7 = max / 100000;\n    long left7 = max - 100000\
    \ * mid7;\n    long right7 = max - 100000 * mid7 + 1;\n    long mid8 = min / 100000;\n\
    \    long left8 = min - 100000 * mid8;\n    long right8 = min - 100000 * mid8\
    \ + 1;\n    long mid9 = max / 1000000;\n    long left9 = max - 1000000 * mid9;\n\
    \    long right9 = max - 1000000 * mid9 + 1;\n    long mid10 = min / 1000000;\n\
    \    long left10 = min - 1000000 * mid10;\n    long right10 = min - 1000000 *\
    \ mid10 + 1;\n    long mid11 = max / 10000000;\n    long left11 = max - 10000000\
    \ * mid11;\n    long right11 = max - 10000000 * mid11 + 1;\n    long mid12 = min\
    \ / 10000000;\n    long left12 = min - 10000000 * mid12;\n    long right12 = min\
    \ - 10000000 * mid12 + 1;\n    long mid13 = max / 1000000000;\n    long left13\
    \ = max - 1000000000 * mid13;\n    long right13 = max - 1000000000 * mid13 + 1;\n\
    \    long mid14 = min / 1000000000;\n    long left14 = min - 1000000000 * mid14;\n\
    \    long right14 = min - 1000000000 * mid14 + 1;\n    long mid15 = max / 10000000000;\n\
    \    long left15 = max - 10000000000 * mid15;\n    \n}\nint main() {\n    auto\
    \ candidate = by_length;\n    assert(candidate((std::vector<long>({2, 1, 1, 4,\
    \ 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 55}))) == (std::vector<std::string>({\"One\"})));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 3, 2}))) == (std::vector<std::string>({\"Three\", \"Two\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>({9, 4, 8}))) == (std::vector<std::string>({\"\
    Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "tmp43ui9fsp: /tmp/tmp43ui9fsp.cpp:74: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    std::vector<std::string>\
    \ res;\n    if (arr.size() == 0) {\n        return res;\n    }\n    long min =\
    \ *std::min_element(arr.begin(), arr.end());\n    long max = *std::max_element(arr.begin(),\
    \ arr.end());\n    long mid = (min + max) / 2;\n    long mid2 = mid / 10;\n  \
    \  long mid3 = mid % 10;\n    long mid4 = mid2 / 10;\n    long mid5 = mid2 % 10;\n\
    \    long mid6 = mid3 / 10;\n    long mid7 = mid3 % 10;\n    long mid8 = mid4\
    \ / 10;\n    long mid9 = mid4 % 10;\n    long mid10 = mid5 / 10;\n    long mid11\
    \ = mid5 % 10;\n    long mid12 = mid6 / 10;\n    long mid13 = mid6 % 10;\n   \
    \ long mid14 = mid7 / 10;\n    long mid15 = mid7 % 10;\n    long mid16 = mid8\
    \ / 10;\n    long mid17 = mid8 % 10;\n    long mid18 = mid9 / 10;\n    long mid19\
    \ = mid9 % 10;\n    long mid20 = mid10 / 10;\n    long mid21 = mid10 % 10;\n \
    \   long mid22 = mid11 / 10;\n    long mid23 = mid11 % 10;\n    long mid24 = mid12\
    \ / 10;\n    long mid25 = mid12 % 10;\n    long mid26 = mid13 / 10;\n    long\
    \ mid27 = mid13 % 10;\n    long mid28 = mid14 / 10;\n    long mid29 = mid14 %\
    \ 10;\n    long mid30 = mid15 / 10;\n    long mid31 = mid15 % 10;\n    long mid32\
    \ = mid16 / 10;\n    long mid33 = mid16 % 10;\n    long mid34 = mid17 / 10;\n\
    \    long mid35 = mid17 % 10;\n    long mid36 = mid18 / 10;\n    long mid37 =\
    \ mid18 % 10;\n    long mid38 = mid19 / 10;\n    long mid39 = mid19 % 10;\n  \
    \  long mid40 = mid20 / 10;\n    long mid41 = mid20 % 10;\n    long mid42 = mid21\
    \ / 10;\n    long mid43 = mid21 % 10;\n    long mid44 = mid22 / 10;\n    long\
    \ mid45 = mid22 % 10;\n    long mid46 = mid23 / 10;\n    long mid47 = mid23 %\
    \ 10;\n    long mid48 = mid24 / 10;\n\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({2, 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({1, -1, 55}))) == (std::vector<std::string>({\"\
    One\"})));\n    assert(candidate((std::vector<long>({1, -1, 3, 2}))) == (std::vector<std::string>({\"\
    Three\", \"Two\", \"One\"})));\n    assert(candidate((std::vector<long>({9, 4,\
    \ 8}))) == (std::vector<std::string>({\"Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "tmpjwgfpcco: /tmp/tmpjwgfpcco.cpp:78: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    std::vector<std::string>\
    \ result;\n    long min = *std::min_element(arr.begin(), arr.end());\n    long\
    \ max = *std::max_element(arr.begin(), arr.end());\n    long mid = min + (max\
    \ - min) / 2;\n    long mid2 = mid / 10;\n    long mid3 = mid % 10;\n    long\
    \ mid4 = mid2 / 10;\n    long mid5 = mid2 % 10;\n    long mid6 = mid3 / 10;\n\
    \    long mid7 = mid3 % 10;\n    long mid8 = mid4 / 10;\n    long mid9 = mid4\
    \ % 10;\n    long mid10 = mid5 / 10;\n    long mid11 = mid5 % 10;\n    long mid12\
    \ = mid6 / 10;\n    long mid13 = mid6 % 10;\n    long mid14 = mid7 / 10;\n   \
    \ long mid15 = mid7 % 10;\n    long mid16 = mid8 / 10;\n    long mid17 = mid8\
    \ % 10;\n    long mid18 = mid9 / 10;\n    long mid19 = mid9 % 10;\n    long mid20\
    \ = mid10 / 10;\n    long mid21 = mid10 % 10;\n    long mid22 = mid11 / 10;\n\
    \    long mid23 = mid11 % 10;\n    long mid24 = mid12 / 10;\n    long mid25 =\
    \ mid12 % 10;\n    long mid26 = mid13 / 10;\n    long mid27 = mid13 % 10;\n  \
    \  long mid28 = mid14 / 10;\n    long mid29 = mid14 % 10;\n    long mid30 = mid15\
    \ / 10;\n    long mid31 = mid15 % 10;\n    long mid32 = mid16 / 10;\n    long\
    \ mid33 = mid16 % 10;\n    long mid34 = mid17 / 10;\n    long mid35 = mid17 %\
    \ 10;\n    long mid36 = mid18 / 10;\n    long mid37 = mid18 % 10;\n    long mid38\
    \ = mid19 / 10;\n    long mid39 = mid19 % 10;\n    long mid40 = mid20 / 10;\n\
    \    long mid41 = mid20 % 10;\n    long mid42 = mid21 / 10;\n    long mid43 =\
    \ mid21 % 10;\n    long mid44 = mid22 / 10;\n    long mid45 = mid22 % 10;\n  \
    \  long mid46 = mid23 / 10;\n    long mid47 = mid23 % 10;\n    long mid48 = mid24\
    \ / 10;\n    long mid49 = mid24 % 10;\n\n}\nint main() {\n    auto candidate =\
    \ by_length;\n    assert(candidate((std::vector<long>({2, 1, 1, 4, 5, 8, 2, 3})))\
    \ == (std::vector<std::string>({\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 55}))) == (std::vector<std::string>({\"One\"})));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 3, 2}))) == (std::vector<std::string>({\"Three\", \"Two\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>({9, 4, 8}))) == (std::vector<std::string>({\"\
    Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "tmpfp9kk01q: /tmp/tmpfp9kk01q.cpp:76: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    std::vector<std::string>\
    \ result;\n    long temp = 0;\n    for (long i = 0; i < arr.size(); i++) {\n \
    \       if (arr[i] > 9) {\n            temp = arr[i];\n            arr[i] = arr[i]\
    \ / 10;\n            arr[i] = arr[i] * 10;\n            arr[i] = temp;\n     \
    \   }\n    }\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i]\
    \ > 9) {\n            result.push_back(\"One\");\n        } else if (arr[i] >\
    \ 8) {\n            result.push_back(\"Two\");\n        } else if (arr[i] > 7)\
    \ {\n            result.push_back(\"Three\");\n        } else if (arr[i] > 6)\
    \ {\n            result.push_back(\"Four\");\n        } else if (arr[i] > 5) {\n\
    \            result.push_back(\"Five\");\n        } else if (arr[i] > 4) {\n \
    \           result.push_back(\"Six\");\n        } else if (arr[i] > 3) {\n   \
    \         result.push_back(\"Seven\");\n        } else if (arr[i] > 2) {\n   \
    \         result.push_back(\"Eight\");\n        } else if (arr[i] > 1) {\n   \
    \         result.push_back(\"Nine\");\n        } else {\n            result.push_back(\"\
    Zero\");\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = by_length;\n    assert(candidate((std::vector<long>({2, 1, 1, 4, 5, 8, 2,\
    \ 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"Four\", \"Three\"\
    , \"Two\", \"Two\", \"One\", \"One\"})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 55}))) == (std::vector<std::string>({\"One\"})));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 3, 2}))) == (std::vector<std::string>({\"Three\", \"Two\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>({9, 4, 8}))) == (std::vector<std::string>({\"\
    Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "tmp9q5bz9kq: /tmp/tmp9q5bz9kq.cpp:57: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    std::vector<std::string>\
    \ ans;\n    long n = arr.size();\n    long m = std::min(n, 9);\n    long i = 0;\n\
    \    while (i < m) {\n        long j = i;\n        while (j < n) {\n         \
    \   if (arr[j] < arr[j + 1]) {\n                long temp = arr[j];\n        \
    \        arr[j] = arr[j + 1];\n                arr[j + 1] = temp;\n          \
    \  }\n            j++;\n        }\n        ans.push_back(std::to_string(arr[i]));\n\
    \        i++;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({2, 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({1, -1, 55}))) == (std::vector<std::string>({\"\
    One\"})));\n    assert(candidate((std::vector<long>({1, -1, 3, 2}))) == (std::vector<std::string>({\"\
    Three\", \"Two\", \"One\"})));\n    assert(candidate((std::vector<long>({9, 4,\
    \ 8}))) == (std::vector<std::string>({\"Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpqqm1cn_9.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpqqm1cn_9.cpp:22:27: error:\
    \ no matching function for call to \u2018min(long int&, int)\u2019\n   22 |  \
    \   long m = std::min(n, 9);\n      |                           ^\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpqqm1cn_9.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:198:5:\
    \ note: candidate: \u2018template<class _Tp> constexpr const _Tp& std::min(const\
    \ _Tp&, const _Tp&)\u2019\n  198 |     min(const _Tp& __a, const _Tp& __b)\n \
    \     |     ^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:198:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpqqm1cn_9.cpp:22:27:\
    \ note:   deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018\
    long int\u2019 and \u2018int\u2019)\n   22 |     long m = std::min(n, 9);\n  \
    \    |                           ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \      "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    std::vector<std::string>\
    \ res;\n    if (arr.size() == 0) {\n        return res;\n    }\n    long max =\
    \ *std::max_element(arr.begin(), arr.end());\n    long min = *std::min_element(arr.begin(),\
    \ arr.end());\n    long mid = max / 10;\n    long rem = max % 10;\n    long start\
    \ = mid - 1;\n    long end = mid + 1;\n    long index = 0;\n    while (start >=\
    \ 0) {\n        while (index < arr.size() && arr[index] >= start) {\n        \
    \    index++;\n        }\n        if (index == arr.size()) {\n            break;\n\
    \        }\n        long tmp = arr[index];\n        arr[index] = arr[arr.size()\
    \ - 1];\n        arr[arr.size() - 1] = tmp;\n        res.push_back(\"One\");\n\
    \        index--;\n        while (index < arr.size() && arr[index] <= end) {\n\
    \            index++;\n        }\n        if (index == arr.size()) {\n       \
    \     break;\n        }\n        tmp = arr[index];\n        arr[index] = arr[arr.size()\
    \ - 1];\n        arr[arr.size() - 1] = tmp;\n        res.push_back(\"Two\");\n\
    \        index--;\n        while (index < arr.size() && arr[index] >= end) {\n\
    \            index++;\n        }\n        if (index == arr.size()) {\n       \
    \     break;\n        }\n        tmp = arr[index];\n        arr[index] = arr[arr.size()\
    \ - 1];\n        arr[arr.size() - 1] = tmp;\n        res.push_back(\"Three\");\n\
    \        index--;\n        while (index < arr.size() && arr[index] <= end) {\n\
    \            index++;\n        }\n        if (index == arr.size()) {\n       \
    \     break;\n        }\n        tmp = arr[index];\n        arr[index] = arr[arr.size()\
    \ - 1];\n        arr[arr.size() - 1] = tmp;\n        res.push_back(\"Four\");\n\
    \        index--;\n        while (index < arr.size() && arr[index] >= end) {\n\
    \            index++;\n        }\n        if (index == arr.size()) {\n       \
    \     break;\n        }\n        tmp = arr[index];\n        arr[index] = arr[arr.size()\
    \ - 1];\n        arr[arr.size() - 1] = tmp;\n        res.push_back(\"Five\");\n\
    \        index--;\n        while (index < arr.size() && arr[index] <= end) {\n\
    \            index++;\n        }\n        if (index == arr.size()) {\n       \
    \     break;\n        }\n        tmp = arr[index];\n        arr[index] = arr[arr.size()\
    \ - 1];\n        arr[arr.size() - 1] = tmp;\n        res.push_back(\"Six\");\n\
    \        index--;\n        while (index < arr.size() && arr[index] >= end) {\n\
    \            index++;\n        }\n        if (index == arr.size()) {\n       \
    \     break;\n        }\n        tmp = arr[index];\n        arr[index] = arr[arr.size()\
    \ - 1];\n        arr[\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({2,\
    \ 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 55}))) == (std::vector<std::string>({\"One\"})));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 3, 2}))) == (std::vector<std::string>({\"Three\", \"Two\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>({9, 4, 8}))) == (std::vector<std::string>({\"\
    Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpqzhg33uh.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpqzhg33uh.cpp:107:1: error:\
    \ expected primary-expression before \u2018}\u2019 token\n  107 | }\n      | ^\n\
    /tmp/tmpqzhg33uh.cpp:106:13: error: expected \u2018]\u2019 before \u2018}\u2019\
    \ token\n  106 |         arr[\n      |             ^\n      |             ]\n\
    \  107 | }\n      | ~            \n/tmp/tmpqzhg33uh.cpp:108:12: error: a function-definition\
    \ is not allowed here before \u2018{\u2019 token\n  108 | int main() {\n     \
    \ |            ^\n/tmp/tmpqzhg33uh.cpp:115:1: error: expected \u2018}\u2019 at\
    \ end of input\n  115 | }\n      | ^\n/tmp/tmpqzhg33uh.cpp:19:59: note: to match\
    \ this \u2018{\u2019\n   19 | std::vector<std::string> by_length(std::vector<long>\
    \ arr) {\n      |                                                           ^\n\
    /tmp/tmpqzhg33uh.cpp:115:1: warning: control reaches end of non-void function\
    \ [-Wreturn-type]\n  115 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    std::vector<std::string>\
    \ res;\n    if (arr.size() == 0) {\n        return res;\n    }\n    long min =\
    \ *std::min_element(arr.begin(), arr.end());\n    long max = *std::max_element(arr.begin(),\
    \ arr.end());\n    long mid = min + (max - min) / 2;\n    long mid2 = mid / 10;\n\
    \    long mid3 = mid % 10;\n    long mid4 = mid2 / 10;\n    long mid5 = mid2 %\
    \ 10;\n    long mid6 = mid3 / 10;\n    long mid7 = mid3 % 10;\n    long mid8 =\
    \ mid4 / 10;\n    long mid9 = mid4 % 10;\n    long mid10 = mid5 / 10;\n    long\
    \ mid11 = mid5 % 10;\n    long mid12 = mid6 / 10;\n    long mid13 = mid6 % 10;\n\
    \    long mid14 = mid7 / 10;\n    long mid15 = mid7 % 10;\n    long mid16 = mid8\
    \ / 10;\n    long mid17 = mid8 % 10;\n    long mid18 = mid9 / 10;\n    long mid19\
    \ = mid9 % 10;\n    long mid20 = mid10 / 10;\n    long mid21 = mid10 % 10;\n \
    \   long mid22 = mid11 / 10;\n    long mid23 = mid11 % 10;\n    long mid24 = mid12\
    \ / 10;\n    long mid25 = mid12 % 10;\n    long mid26 = mid13 / 10;\n    long\
    \ mid27 = mid13 % 10;\n    long mid28 = mid14 / 10;\n    long mid29 = mid14 %\
    \ 10;\n    long mid30 = mid15 / 10;\n    long mid31 = mid15 % 10;\n    long mid32\
    \ = mid16 / 10;\n    long mid33 = mid16 % 10;\n    long mid34 = mid17 / 10;\n\
    \    long mid35 = mid17 % 10;\n    long mid36 = mid18 / 10;\n    long mid37 =\
    \ mid18 % 10;\n    long mid38 = mid19 / 10;\n    long mid39 = mid19 % 10;\n  \
    \  long mid40 = mid20 / 10;\n    long mid41 = mid20 % 10;\n    long mid42 = mid21\
    \ / 10;\n    long mid43 = mid21 % 10;\n    long mid44 = mid22 / 10;\n    long\
    \ mid45 = mid22 % 10;\n    long mid46 = mid23 / 10;\n    long mid47 = mid23 %\
    \ 10;\n    long mid48 = mid24 / 10;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({2, 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({1, -1, 55}))) == (std::vector<std::string>({\"\
    One\"})));\n    assert(candidate((std::vector<long>({1, -1, 3, 2}))) == (std::vector<std::string>({\"\
    Three\", \"Two\", \"One\"})));\n    assert(candidate((std::vector<long>({9, 4,\
    \ 8}))) == (std::vector<std::string>({\"Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "tmpfjosazr6: /tmp/tmpfjosazr6.cpp:77: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    std::vector<std::string>\
    \ res;\n    long temp;\n    for (long i : arr) {\n        if (i <= 9) {\n    \
    \        temp = i;\n        } else {\n            temp = 9 - i;\n        }\n \
    \       res.push_back(to_string(temp));\n    }\n    return res;\n}\nint main()\
    \ {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({2,\
    \ 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 55}))) == (std::vector<std::string>({\"One\"})));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 3, 2}))) == (std::vector<std::string>({\"Three\", \"Two\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>({9, 4, 8}))) == (std::vector<std::string>({\"\
    Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpcldo0jhe.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpcldo0jhe.cpp:28:23: error:\
    \ \u2018to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   28 |         res.push_back(to_string(temp));\n      |                  \
    \     ^~~~~~~~~\n      |                       std::__cxx11::to_string\nIn file\
    \ included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpcldo0jhe.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:6598:3:\
    \ note: \u2018std::__cxx11::to_string\u2019 declared here\n 6598 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    std::vector<std::string>\
    \ res;\n    if (arr.size() == 0) {\n        return res;\n    }\n    long l = arr[0];\n\
    \    for (long i : arr) {\n        if (i > 9) {\n            l = i;\n        }\n\
    \    }\n    long r = arr[0];\n    for (long i : arr) {\n        if (i < 9) {\n\
    \            r = i;\n        }\n    }\n    if (l > r) {\n        std::swap(l,\
    \ r);\n    }\n    long m = l;\n    for (long i : arr) {\n        if (i < 9) {\n\
    \            if (m == l) {\n                res.push_back(\"One\");\n        \
    \    }\n            if (m == r) {\n                res.push_back(\"Two\");\n \
    \           }\n            if (m == i) {\n                res.push_back(\"Three\"\
    );\n            }\n            if (m == i + 1) {\n                res.push_back(\"\
    Four\");\n            }\n            if (m == i + 2) {\n                res.push_back(\"\
    Five\");\n            }\n            if (m == i + 3) {\n                res.push_back(\"\
    Six\");\n            }\n            if (m == i + 4) {\n                res.push_back(\"\
    Seven\");\n            }\n            if (m == i + 5) {\n                res.push_back(\"\
    Eight\");\n            }\n            if (m == i + 6) {\n                res.push_back(\"\
    Nine\");\n            }\n        }\n        if (i > 9) {\n            if (m ==\
    \ l) {\n                res.push_back(\"Ten\");\n            }\n            if\
    \ (m == r) {\n                res.push_back(\"Eleven\");\n            }\n    \
    \        if (m == i) {\n                res.push_back(\"Twelve\");\n         \
    \   }\n            if (m == i + 1) {\n                res.push_back(\"Thirteen\"\
    );\n            }\n            if (m == i + 2) {\n                res.push_back(\"\
    Fourteen\");\n            }\n            if (m == i + 3) {\n                res.push_back(\"\
    Fifteen\");\n            }\n            if (m == i + 4) {\n                res.push_back(\"\
    Sixteen\");\n            }\n            if (m == i + 5) {\n                res.push_back(\"\
    Seventeen\");\n            }\n            if (m == i + 6) {\n                res.push_back(\"\
    Eighteen\");\n            }\n            if (m == i + 7) {\n                res.push_back(\"\
    Nineteen\");\n            }\n        }\n        if (i == l) {\n            res.push_back(\"\
    One\");\n        }\n        if (i == r) {\n            res.push_back(\"Two\");\n\
    \        }\n        if (i == i) {\n            res.push_back(\"Three\");\n   \
    \     }\n        if (i == i + 1) {\n            res.push_back(\"Four\");\n   \
    \     }\n        if (i == i + 2) {\n            res.push_back(\"Five\");\n   \
    \     }\n        if (i == i + 3) {\n            res.push_back(\"Six\");\n    \
    \    }\n        if (i == i + 4) {\n            res.push_back(\"Seven\");\n   \
    \     }\n\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({2,\
    \ 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 55}))) == (std::vector<std::string>({\"One\"})));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 3, 2}))) == (std::vector<std::string>({\"Three\", \"Two\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>({9, 4, 8}))) == (std::vector<std::string>({\"\
    Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpm5s2pudf.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpm5s2pudf.cpp:125:12: error:\
    \ a function-definition is not allowed here before \u2018{\u2019 token\n  125\
    \ | int main() {\n      |            ^\n/tmp/tmpm5s2pudf.cpp:132:1: error: expected\
    \ \u2018}\u2019 at end of input\n  132 | }\n      | ^\n/tmp/tmpm5s2pudf.cpp:19:59:\
    \ note: to match this \u2018{\u2019\n   19 | std::vector<std::string> by_length(std::vector<long>\
    \ arr) {\n      |                                                           ^\n\
    /tmp/tmpm5s2pudf.cpp:132:1: warning: control reaches end of non-void function\
    \ [-Wreturn-type]\n  132 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    std::vector<std::string>\
    \ res;\n    long n = arr.size();\n    long m = std::min(n, 9);\n    long k = std::max(n,\
    \ m);\n    long l = std::min(k, 9);\n    long r = std::max(k, 9);\n    long count\
    \ = 0;\n    for (long i = 0; i < n; i++) {\n        if (arr[i] >= l && arr[i]\
    \ <= r) {\n            count++;\n        }\n    }\n    if (count == 0) {\n   \
    \     return res;\n    }\n    long m = std::min(count, 9);\n    long k = std::max(count,\
    \ 9);\n    long l = std::min(k, 9);\n    long r = std::max(k, 9);\n    long count\
    \ = 0;\n    for (long i = 0; i < n; i++) {\n        if (arr[i] >= l && arr[i]\
    \ <= r) {\n            res.push_back(\"One\");\n        }\n        else if (arr[i]\
    \ == m) {\n            res.push_back(\"Two\");\n        }\n        else if (arr[i]\
    \ == k) {\n            res.push_back(\"Three\");\n        }\n        else if (arr[i]\
    \ == l) {\n            res.push_back(\"Four\");\n        }\n        else if (arr[i]\
    \ == r) {\n            res.push_back(\"Five\");\n        }\n        else if (arr[i]\
    \ == m) {\n            res.push_back(\"Six\");\n        }\n        else if (arr[i]\
    \ == k) {\n            res.push_back(\"Seven\");\n        }\n        else if (arr[i]\
    \ == l) {\n            res.push_back(\"Eight\");\n        }\n        else if (arr[i]\
    \ == r) {\n            res.push_back(\"Nine\");\n        }\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({2,\
    \ 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 55}))) == (std::vector<std::string>({\"One\"})));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 3, 2}))) == (std::vector<std::string>({\"Three\", \"Two\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>({9, 4, 8}))) == (std::vector<std::string>({\"\
    Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpwqwf1dzo.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpwqwf1dzo.cpp:22:27: error:\
    \ no matching function for call to \u2018min(long int&, int)\u2019\n   22 |  \
    \   long m = std::min(n, 9);\n      |                           ^\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpwqwf1dzo.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:198:5:\
    \ note: candidate: \u2018template<class _Tp> constexpr const _Tp& std::min(const\
    \ _Tp&, const _Tp&)\u2019\n  198 |     min(const _Tp& __a, const _Tp& __b)\n \
    \     |     ^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:198:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpwqwf1dzo.cpp:22:27:\
    \ note:   deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018\
    long int\u2019 and \u2018int\u2019)\n   22 |     long m = std::min(n, 9);\n  \
    \    |                           ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \      "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    if (arr.empty())\
    \ return {};\n    std::vector<long> sorted_arr(arr.begin(), arr.end());\n    std::sort(sorted_arr.begin(),\
    \ sorted_arr.end());\n    std::vector<long> reverse_arr(arr.begin(), arr.end());\n\
    \    std::reverse(reverse_arr.begin(), reverse_arr.end());\n    std::vector<std::string>\
    \ result;\n    for (long i : reverse_arr) {\n        std::string name = \"\";\n\
    \        switch (i) {\n            case 1:\n                name = \"One\";\n\
    \                break;\n            case 2:\n                name = \"Two\";\n\
    \                break;\n            case 3:\n                name = \"Three\"\
    ;\n                break;\n            case 4:\n                name = \"Four\"\
    ;\n                break;\n            case 5:\n                name = \"Five\"\
    ;\n                break;\n            case 6:\n                name = \"Six\"\
    ;\n                break;\n            case 7:\n                name = \"Seven\"\
    ;\n                break;\n            case 8:\n                name = \"Eight\"\
    ;\n                break;\n            case 9:\n                name = \"Nine\"\
    ;\n                break;\n            default:\n                break;\n    \
    \    }\n        result.push_back(name);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({2,\
    \ 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 55}))) == (std::vector<std::string>({\"One\"})));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 3, 2}))) == (std::vector<std::string>({\"Three\", \"Two\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>({9, 4, 8}))) == (std::vector<std::string>({\"\
    Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "tmps9c1zft6: /tmp/tmps9c1zft6.cpp:65: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    std::vector<std::string>\
    \ res;\n    if (arr.size() == 0) {\n        return res;\n    }\n    long min =\
    \ arr[0];\n    long max = arr[0];\n    for (long i : arr) {\n        if (i < min)\
    \ {\n            min = i;\n        }\n        if (i > max) {\n            max\
    \ = i;\n        }\n    }\n    long mid = min + (max - min) / 2;\n    long left\
    \ = mid;\n    long right = mid;\n    while (left < max) {\n        while (left\
    \ < max && arr[left] == mid) {\n            left++;\n        }\n        while\
    \ (right > min && arr[right] == mid) {\n            right--;\n        }\n    \
    \    if (left < right) {\n            std::string temp = to_string(mid);\n   \
    \         arr[left] = to_string(arr[left]);\n            arr[right] = to_string(arr[right]);\n\
    \            arr[left] = temp;\n            arr[right] = temp;\n        }\n  \
    \      mid++;\n        left++;\n        right--;\n    }\n    for (long i : arr)\
    \ {\n        res.push_back(to_string(mid));\n        mid++;\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({2,\
    \ 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 55}))) == (std::vector<std::string>({\"One\"})));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 3, 2}))) == (std::vector<std::string>({\"Three\", \"Two\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>({9, 4, 8}))) == (std::vector<std::string>({\"\
    Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpnmeebq56.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpnmeebq56.cpp:45:32: error:\
    \ \u2018to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   45 |             std::string temp = to_string(mid);\n      |           \
    \                     ^~~~~~~~~\n      |                                std::__cxx11::to_string\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpnmeebq56.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:6598:3:\
    \ note: \u2018std::__cxx11::to_string\u2019 declared here\n 6598 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n/tmp/tmpnmeebq56.cpp:48:25: error: cannot\
    \ convert \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } to \u2018__gnu_cxx::__alloc_traits<std::allocator<long int>, long int>::value_type\u2019\
    \ {aka \u2018long int\u2019} in assignment\n   48 |             arr[left] = temp;\n\
    \      |                         ^~~~\n      |                         |\n   \
    \   |                         std::string {aka std::__cxx11::basic_string<char>}\n\
    /tmp/tmpnmeebq56.cpp:49:26: error: cannot convert \u2018std::string\u2019 {aka\
    \ \u2018std::__cxx11::basic_string<char>\u2019} to \u2018__gnu_cxx::__alloc_traits<std::allocator<long\
    \ int>, long int>::value_type\u2019 {aka "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    std::vector<std::string>\
    \ res;\n    if (arr.size() == 0) {\n        return res;\n    }\n    long min =\
    \ *std::min_element(arr.begin(), arr.end());\n    long max = *std::max_element(arr.begin(),\
    \ arr.end());\n    long mid = (min + max) / 2;\n    long mid2 = mid / 10;\n  \
    \  long mid3 = mid % 10;\n    long mid4 = mid2 / 10;\n    long mid5 = mid2 % 10;\n\
    \    long mid6 = mid3 / 10;\n    long mid7 = mid3 % 10;\n    long mid8 = mid4\
    \ / 10;\n    long mid9 = mid4 % 10;\n    long mid10 = mid5 / 10;\n    long mid11\
    \ = mid5 % 10;\n    long mid12 = mid6 / 10;\n    long mid13 = mid6 % 10;\n   \
    \ long mid14 = mid7 / 10;\n    long mid15 = mid7 % 10;\n    long mid16 = mid8\
    \ / 10;\n    long mid17 = mid8 % 10;\n    long mid18 = mid9 / 10;\n    long mid19\
    \ = mid9 % 10;\n    long mid20 = mid10 / 10;\n    long mid21 = mid10 % 10;\n \
    \   long mid22 = mid11 / 10;\n    long mid23 = mid11 % 10;\n    long mid24 = mid12\
    \ / 10;\n    long mid25 = mid12 % 10;\n    long mid26 = mid13 / 10;\n    long\
    \ mid27 = mid13 % 10;\n    long mid28 = mid14 / 10;\n    long mid29 = mid14 %\
    \ 10;\n    long mid30 = mid15 / 10;\n    long mid31 = mid15 % 10;\n    long mid32\
    \ = mid16 / 10;\n    long mid33 = mid16 % 10;\n    long mid34 = mid17 / 10;\n\
    \    long mid35 = mid17 % 10;\n    long mid36 = mid18 / 10;\n    long mid37 =\
    \ mid18 % 10;\n    long mid38 = mid19 / 10;\n    long mid39 = mid19 % 10;\n  \
    \  long mid40 = mid20 / 10;\n    long mid41 = mid20 % 10;\n    long mid42 = mid21\
    \ / 10;\n    long mid43 = mid21 % 10;\n    long mid44 = mid22 / 10;\n    long\
    \ mid45 = mid22 % 10;\n    long mid46 = mid23 / 10;\n    long mid47 = mid23 %\
    \ 10;\n    long mid48 = mid24 / 10;\n\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({2, 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({1, -1, 55}))) == (std::vector<std::string>({\"\
    One\"})));\n    assert(candidate((std::vector<long>({1, -1, 3, 2}))) == (std::vector<std::string>({\"\
    Three\", \"Two\", \"One\"})));\n    assert(candidate((std::vector<long>({9, 4,\
    \ 8}))) == (std::vector<std::string>({\"Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "tmp_1uenbvv: /tmp/tmp_1uenbvv.cpp:78: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    std::vector<std::string>\
    \ res;\n    if (arr.size() == 0) {\n        return res;\n    }\n    long max =\
    \ *std::max_element(arr.begin(), arr.end());\n    long min = *std::min_element(arr.begin(),\
    \ arr.end());\n    long mid = (max + min) / 2;\n    long mid2 = mid / 10;\n  \
    \  long mid3 = mid % 10;\n    long mid4 = mid2 / 10;\n    long mid5 = mid2 % 10;\n\
    \    long mid6 = mid3 / 10;\n    long mid7 = mid3 % 10;\n    long mid8 = mid4\
    \ / 10;\n    long mid9 = mid4 % 10;\n    long mid10 = mid5 / 10;\n    long mid11\
    \ = mid5 % 10;\n    long mid12 = mid6 / 10;\n    long mid13 = mid6 % 10;\n   \
    \ long mid14 = mid7 / 10;\n    long mid15 = mid7 % 10;\n    long mid16 = mid8\
    \ / 10;\n    long mid17 = mid8 % 10;\n    long mid18 = mid9 / 10;\n    long mid19\
    \ = mid9 % 10;\n    long mid20 = mid10 / 10;\n    long mid21 = mid10 % 10;\n \
    \   long mid22 = mid11 / 10;\n    long mid23 = mid11 % 10;\n    long mid24 = mid12\
    \ / 10;\n    long mid25 = mid12 % 10;\n    long mid26 = mid13 / 10;\n    long\
    \ mid27 = mid13 % 10;\n    long mid28 = mid14 / 10;\n    long mid29 = mid14 %\
    \ 10;\n    long mid30 = mid15 / 10;\n    long mid31 = mid15 % 10;\n    long mid32\
    \ = mid16 / 10;\n    long mid33 = mid16 % 10;\n    long mid34 = mid17 / 10;\n\
    \    long mid35 = mid17 % 10;\n    long mid36 = mid18 / 10;\n    long mid37 =\
    \ mid18 % 10;\n    long mid38 = mid19 / 10;\n    long mid39 = mid19 % 10;\n  \
    \  long mid40 = mid20 / 10;\n    long mid41 = mid20 % 10;\n    long mid42 = mid21\
    \ / 10;\n    long mid43 = mid21 % 10;\n    long mid44 = mid22 / 10;\n    long\
    \ mid45 = mid22 % 10;\n    long mid46 = mid23 / 10;\n    long mid47 = mid23 %\
    \ 10;\n    long mid48 = mid24 / 10;\n\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({2, 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({1, -1, 55}))) == (std::vector<std::string>({\"\
    One\"})));\n    assert(candidate((std::vector<long>({1, -1, 3, 2}))) == (std::vector<std::string>({\"\
    Three\", \"Two\", \"One\"})));\n    assert(candidate((std::vector<long>({9, 4,\
    \ 8}))) == (std::vector<std::string>({\"Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "tmpx10fo06p: /tmp/tmpx10fo06p.cpp:78: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    if (arr.empty())\
    \ {\n        return {};\n    }\n    long long n = arr.size();\n    long long max_len\
    \ = std::max(std::accumulate(arr.begin(), arr.end(), 0), n);\n    std::vector<std::string>\
    \ ret;\n    for (long long i = 0; i < max_len; i++) {\n        long long count\
    \ = 0;\n        for (long long j = 0; j < n; j++) {\n            if (arr[j] ==\
    \ i) {\n                count++;\n            }\n        }\n        if (count\
    \ == n) {\n            ret.push_back(\"One\");\n        } else if (count == 1)\
    \ {\n            ret.push_back(\"Two\");\n        } else if (count == 2) {\n \
    \           ret.push_back(\"Three\");\n        } else if (count == 3) {\n    \
    \        ret.push_back(\"Four\");\n        } else if (count == 4) {\n        \
    \    ret.push_back(\"Five\");\n        } else if (count == 5) {\n            ret.push_back(\"\
    Six\");\n        } else if (count == 6) {\n            ret.push_back(\"Seven\"\
    );\n        } else if (count == 7) {\n            ret.push_back(\"Eight\");\n\
    \        } else if (count == 8) {\n            ret.push_back(\"Nine\");\n    \
    \    }\n    }\n    return ret;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({2, 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({1, -1, 55}))) == (std::vector<std::string>({\"\
    One\"})));\n    assert(candidate((std::vector<long>({1, -1, 3, 2}))) == (std::vector<std::string>({\"\
    Three\", \"Two\", \"One\"})));\n    assert(candidate((std::vector<long>({9, 4,\
    \ 8}))) == (std::vector<std::string>({\"Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0nmp7i73.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmp0nmp7i73.cpp:24:79: error:\
    \ no matching function for call to \u2018max(int, long long int&)\u2019\n   24\
    \ |     long long max_len = std::max(std::accumulate(arr.begin(), arr.end(), 0),\
    \ n);\n      |                                                               \
    \                ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp0nmp7i73.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:222:5:\
    \ note: candidate: \u2018template<class _Tp> constexpr const _Tp& std::max(const\
    \ _Tp&, const _Tp&)\u2019\n  222 |     max(const _Tp& __a, const _Tp& __b)\n \
    \     |     ^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:222:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp0nmp7i73.cpp:24:79:\
    \ note:   deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018\
    int\u2019 and \u2018long long int\u2019)\n   24 |     long long max_len = std::max(std::accumulate(arr.begin(),\
    \ arr.end(), 0), n);\n      |                                                \
    \                               ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    if (arr.empty())\
    \ {\n        return {};\n    }\n    std::vector<long> sorted_arr(arr.begin(),\
    \ arr.end());\n    std::sort(sorted_arr.begin(), sorted_arr.end());\n    std::vector<long>\
    \ reverse_arr(sorted_arr.rbegin(), sorted_arr.rend());\n    std::reverse(reverse_arr.begin(),\
    \ reverse_arr.end());\n    std::vector<std::string> result;\n    for (long i :\
    \ reverse_arr) {\n        std::string name = \"\";\n        switch (i) {\n   \
    \         case 1:\n                name = \"One\";\n                break;\n \
    \           case 2:\n                name = \"Two\";\n                break;\n\
    \            case 3:\n                name = \"Three\";\n                break;\n\
    \            case 4:\n                name = \"Four\";\n                break;\n\
    \            case 5:\n                name = \"Five\";\n                break;\n\
    \            case 6:\n                name = \"Six\";\n                break;\n\
    \            case 7:\n                name = \"Seven\";\n                break;\n\
    \            case 8:\n                name = \"Eight\";\n                break;\n\
    \            case 9:\n                name = \"Nine\";\n                break;\n\
    \            default:\n                break;\n        }\n        result.push_back(name);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({2, 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({1, -1, 55}))) == (std::vector<std::string>({\"\
    One\"})));\n    assert(candidate((std::vector<long>({1, -1, 3, 2}))) == (std::vector<std::string>({\"\
    Three\", \"Two\", \"One\"})));\n    assert(candidate((std::vector<long>({9, 4,\
    \ 8}))) == (std::vector<std::string>({\"Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "tmp6tezx6bk: /tmp/tmp6tezx6bk.cpp:67: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    std::vector<std::string>\
    \ res;\n    long n = arr.size();\n    long m = 1;\n    long i = 0;\n    while\
    \ (i < n) {\n        while (i < n && arr[i] < m) {\n            i++;\n       \
    \ }\n        if (i == n) {\n            res.push_back(to_string(m));\n       \
    \     i = n;\n        } else {\n            res.push_back(to_string(arr[i]));\n\
    \            i++;\n        }\n        m *= 10;\n    }\n    return res;\n}\nint\
    \ main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({2,\
    \ 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 55}))) == (std::vector<std::string>({\"One\"})));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 3, 2}))) == (std::vector<std::string>({\"Three\", \"Two\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>({9, 4, 8}))) == (std::vector<std::string>({\"\
    Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpitivuwpo.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpitivuwpo.cpp:29:27: error:\
    \ \u2018to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   29 |             res.push_back(to_string(m));\n      |                 \
    \          ^~~~~~~~~\n      |                           std::__cxx11::to_string\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpitivuwpo.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:6598:3:\
    \ note: \u2018std::__cxx11::to_string\u2019 declared here\n 6598 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n/tmp/tmpitivuwpo.cpp:32:27: error: \u2018\
    to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   32 |             res.push_back(to_string(arr[i]));\n      |            \
    \               ^~~~~~~~~\n      |                           std::__cxx11::to_string\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/in"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    std::vector<std::string>\
    \ res;\n    long n = arr.size();\n    long m = std::min(n, 9);\n    long k = std::max(n,\
    \ m);\n    long i = 1;\n    long j = 1;\n    long k = 0;\n    long l = n;\n  \
    \  long m = n;\n    while (i < m) {\n        while (j < l) {\n            if (arr[j]\
    \ < i) {\n                res.push_back(std::to_string(arr[j]));\n           \
    \     j++;\n            } else {\n                res.push_back(std::to_string(k));\n\
    \                k++;\n            }\n        }\n        i++;\n        j = 1;\n\
    \        k = i;\n        l = n;\n        m = n;\n    }\n    return res;\n}\nint\
    \ main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({2,\
    \ 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 55}))) == (std::vector<std::string>({\"One\"})));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 3, 2}))) == (std::vector<std::string>({\"Three\", \"Two\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>({9, 4, 8}))) == (std::vector<std::string>({\"\
    Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_82xtl8m.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmp_82xtl8m.cpp:22:27: error:\
    \ no matching function for call to \u2018min(long int&, int)\u2019\n   22 |  \
    \   long m = std::min(n, 9);\n      |                           ^\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp_82xtl8m.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:198:5:\
    \ note: candidate: \u2018template<class _Tp> constexpr const _Tp& std::min(const\
    \ _Tp&, const _Tp&)\u2019\n  198 |     min(const _Tp& __a, const _Tp& __b)\n \
    \     |     ^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:198:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp_82xtl8m.cpp:22:27:\
    \ note:   deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018\
    long int\u2019 and \u2018int\u2019)\n   22 |     long m = std::min(n, 9);\n  \
    \    |                           ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \      "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    std::vector<std::string>\
    \ res;\n    long min = *std::min_element(arr.begin(), arr.end());\n    long max\
    \ = *std::max_element(arr.begin(), arr.end());\n    long mid = min + (max - min)\
    \ / 2;\n    long mid2 = mid / 10;\n    long mid3 = mid % 10;\n    long mid4 =\
    \ mid2 / 10;\n    long mid5 = mid2 % 10;\n    long mid6 = mid3 / 10;\n    long\
    \ mid7 = mid3 % 10;\n    long mid8 = mid4 / 10;\n    long mid9 = mid4 % 10;\n\
    \    long mid10 = mid5 / 10;\n    long mid11 = mid5 % 10;\n    long mid12 = mid6\
    \ / 10;\n    long mid13 = mid6 % 10;\n    long mid14 = mid7 / 10;\n    long mid15\
    \ = mid7 % 10;\n    long mid16 = mid8 / 10;\n    long mid17 = mid8 % 10;\n   \
    \ long mid18 = mid9 / 10;\n    long mid19 = mid9 % 10;\n    long mid20 = mid10\
    \ / 10;\n    long mid21 = mid10 % 10;\n    long mid22 = mid11 / 10;\n    long\
    \ mid23 = mid11 % 10;\n    long mid24 = mid12 / 10;\n    long mid25 = mid12 %\
    \ 10;\n    long mid26 = mid13 / 10;\n    long mid27 = mid13 % 10;\n    long mid28\
    \ = mid14 / 10;\n    long mid29 = mid14 % 10;\n    long mid30 = mid15 / 10;\n\
    \    long mid31 = mid15 % 10;\n    long mid32 = mid16 / 10;\n    long mid33 =\
    \ mid16 % 10;\n    long mid34 = mid17 / 10;\n    long mid35 = mid17 % 10;\n  \
    \  long mid36 = mid18 / 10;\n    long mid37 = mid18 % 10;\n    long mid38 = mid19\
    \ / 10;\n    long mid39 = mid19 % 10;\n    long mid40 = mid20 / 10;\n    long\
    \ mid41 = mid20 % 10;\n    long mid42 = mid21 / 10;\n    long mid43 = mid21 %\
    \ 10;\n    long mid44 = mid22 / 10;\n    long mid45 = mid22 % 10;\n    long mid46\
    \ = mid23 / 10;\n    long mid47 = mid23 % 10;\n    long mid48 = mid24 / 10;\n\
    \    long mid49 = mid24 % 10;\n\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({2, 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({1, -1, 55}))) == (std::vector<std::string>({\"\
    One\"})));\n    assert(candidate((std::vector<long>({1, -1, 3, 2}))) == (std::vector<std::string>({\"\
    Three\", \"Two\", \"One\"})));\n    assert(candidate((std::vector<long>({9, 4,\
    \ 8}))) == (std::vector<std::string>({\"Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "tmpomcetsd9: /tmp/tmpomcetsd9.cpp:76: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    std::vector<std::string>\
    \ res;\n    long n = arr.size();\n    if (n <= 0) {\n        return res;\n   \
    \ }\n    long max_len = 0, min_len = INT_MAX;\n    for (long i = 0; i < n; i++)\
    \ {\n        long len = arr[i];\n        if (len > max_len) {\n            max_len\
    \ = len;\n        }\n        if (len < min_len) {\n            min_len = len;\n\
    \        }\n    }\n    long mid = max_len;\n    long start = 0, end = n - 1;\n\
    \    while (start < end) {\n        long mid = (start + end) / 2;\n        long\
    \ midLen = arr[mid];\n        if (midLen < min_len) {\n            end = mid -\
    \ 1;\n        } else if (midLen > max_len) {\n            start = mid + 1;\n \
    \       } else {\n            long i = mid;\n            while (i < n && arr[i]\
    \ < midLen) {\n                i++;\n            }\n            long j = mid -\
    \ 1;\n            while (j >= 0 && arr[j] > midLen) {\n                j--;\n\
    \            }\n            std::string s = \"\";\n            while (i < j) {\n\
    \                s += \"One\";\n                i++;\n                j--;\n \
    \           }\n            res.push_back(s);\n        }\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({2,\
    \ 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 55}))) == (std::vector<std::string>({\"One\"})));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 3, 2}))) == (std::vector<std::string>({\"Three\", \"Two\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>({9, 4, 8}))) == (std::vector<std::string>({\"\
    Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    std::vector<std::string>\
    \ result;\n    long long max = 0;\n    for (auto i : arr) {\n        if (i > max)\
    \ {\n            max = i;\n        }\n    }\n    long long start = max;\n    long\
    \ long end = max;\n    while (start < 9) {\n        end = start;\n        while\
    \ (end < 9) {\n            if (arr[end] > start) {\n                end = end\
    \ + 1;\n            } else {\n                break;\n            }\n        }\n\
    \        result.push_back(\"One\");\n        result.push_back(\"Two\");\n    \
    \    result.push_back(\"Three\");\n        result.push_back(\"Four\");\n     \
    \   result.push_back(\"Five\");\n        result.push_back(\"Six\");\n        result.push_back(\"\
    Seven\");\n        result.push_back(\"Eight\");\n        result.push_back(\"Nine\"\
    );\n        result.push_back(\"Ten\");\n        result.push_back(\"Eleven\");\n\
    \        result.push_back(\"Twelve\");\n        result.push_back(\"Thirteen\"\
    );\n        result.push_back(\"Fourteen\");\n        result.push_back(\"Fifteen\"\
    );\n        result.push_back(\"Sixteen\");\n        result.push_back(\"Seventeen\"\
    );\n        result.push_back(\"Eighteen\");\n        result.push_back(\"Nineteen\"\
    );\n        result.push_back(\"Twenty\");\n        result.push_back(\"Twenty one\"\
    );\n        result.push_back(\"Twenty two\");\n        result.push_back(\"Twenty\
    \ three\");\n        result.push_back(\"Twenty four\");\n        result.push_back(\"\
    Twenty five\");\n        result.push_back(\"Twenty six\");\n        result.push_back(\"\
    Twenty seven\");\n        result.push_back(\"Twenty eight\");\n        result.push_back(\"\
    Twenty nine\");\n        result.push_back(\"Twenty ten\");\n        result.push_back(\"\
    Twenty eleven\");\n        result.push_back(\"Twenty twelve\");\n        result.push_back(\"\
    Twenty thirteen\");\n        result.push_back(\"Twenty fourteen\");\n        result.push_back(\"\
    Twenty fifteen\");\n        result.push_back(\"Twenty sixteen\");\n        result.push_back(\"\
    Twenty seventeen\");\n        result.push_back(\"Twenty eighteen\");\n       \
    \ result.push_back(\"Twenty nineteen\");\n        result.push_back(\"Twenty twenty\"\
    );\n        result.push_back(\"Twenty twenty one\");\n        result.push_back(\"\
    Twenty twenty two\");\n        result.push_back(\"Twenty twenty three\");\n  \
    \      result.push_back(\"Twenty twenty four\");\n        result.push_back(\"\
    Twenty twenty five\");\n        result.push_back(\"Twenty twenty six\");\n   \
    \     result.push_back(\"Twenty twenty seven\");\n        result.push_back(\"\n\
    }\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({2,\
    \ 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 55}))) == (std::vector<std::string>({\"One\"})));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 3, 2}))) == (std::vector<std::string>({\"Three\", \"Two\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>({9, 4, 8}))) == (std::vector<std::string>({\"\
    Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_io692g9.cpp:85:26: warning: missing terminating \" character\n\
    \   85 |         result.push_back(\"\n      |                          ^\n/tmp/tmp_io692g9.cpp:85:26:\
    \ error: missing terminating \" character\n/tmp/tmp_io692g9.cpp: In function \u2018\
    std::vector<std::__cxx11::basic_string<char> > by_length(std::vector<long int>)\u2019\
    :\n/tmp/tmp_io692g9.cpp:86:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   86 | }\n      | ^\n/tmp/tmp_io692g9.cpp:87:12: error: a function-definition\
    \ is not allowed here before \u2018{\u2019 token\n   87 | int main() {\n     \
    \ |            ^\n/tmp/tmp_io692g9.cpp:94:1: error: expected \u2018}\u2019 at\
    \ end of input\n   94 | }\n      | ^\n/tmp/tmp_io692g9.cpp:19:59: note: to match\
    \ this \u2018{\u2019\n   19 | std::vector<std::string> by_length(std::vector<long>\
    \ arr) {\n      |                                                           ^\n\
    /tmp/tmp_io692g9.cpp:94:1: warning: no return statement in function returning\
    \ non-void [-Wreturn-type]\n   94 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    std::vector<std::string>\
    \ ans;\n    long temp;\n    for (long i : arr) {\n        if (i >= 1 && i <= 9)\
    \ {\n            temp = i;\n        } else {\n            ans.push_back(\"Nine\"\
    );\n            break;\n        }\n    }\n    if (ans.empty()) {\n        return\
    \ ans;\n    }\n    long start = ans.front();\n    long end = ans.back();\n   \
    \ long mid = (start + end) / 2;\n    long mid2 = mid / 10;\n    long mid3 = mid\
    \ % 10;\n    long mid4 = mid2 / 10;\n    long mid5 = mid2 % 10;\n    long mid6\
    \ = mid3 / 10;\n    long mid7 = mid3 % 10;\n    long mid8 = mid4 / 10;\n    long\
    \ mid9 = mid4 % 10;\n    long mid10 = mid5 / 10;\n    long mid11 = mid5 % 10;\n\
    \    long mid12 = mid6 / 10;\n    long mid13 = mid6 % 10;\n    long mid14 = mid7\
    \ / 10;\n    long mid15 = mid7 % 10;\n    long mid16 = mid8 / 10;\n    long mid17\
    \ = mid8 % 10;\n    long mid18 = mid9 / 10;\n    long mid19 = mid9 % 10;\n   \
    \ long mid20 = mid10 / 10;\n    long mid21 = mid10 % 10;\n    long mid22 = mid11\
    \ / 10;\n    long mid23 = mid11 % 10;\n    long mid24 = mid12 / 10;\n    long\
    \ mid25 = mid12 % 10;\n    long mid26 = mid13 / 10;\n    long mid27 = mid13 %\
    \ 10;\n    long mid28 = mid14 / 10;\n    long mid29 = mid14 % 10;\n    long mid30\
    \ = mid15 / 10;\n    long mid31 = mid15 % 10;\n    long mid32 = mid16 / 10;\n\
    \    long mid33 = mid16 % 10;\n    long mid34 = mid17 / 10;\n    long mid35 =\
    \ mid17 % 10;\n    long mid36 = mid18 / 10;\n    long mid37 = mid18 % 10;\n  \
    \  long mid38 = mid19 / 10;\n    long mid39 = mid19 % 10;\n    long mid40 = mid20\
    \ / 10;\n    long mid41 = mid20 % 10;\n    long mid42 = mid21 / 10;\n    long\
    \ mid43 = mid21 % 10;\n    long mid44 = mid22 / 10;\n    long mid45 = mid22 %\
    \ 10;\n    \n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({2,\
    \ 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 55}))) == (std::vector<std::string>({\"One\"})));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 3, 2}))) == (std::vector<std::string>({\"Three\", \"Two\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>({9, 4, 8}))) == (std::vector<std::string>({\"\
    Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxc2lzmzw.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpxc2lzmzw.cpp:33:27: error:\
    \ cannot convert \u2018__gnu_cxx::__alloc_traits<std::allocator<std::__cxx11::basic_string<char>\
    \ >, std::__cxx11::basic_string<char> >::value_type\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } to \u2018long int\u2019 in initialization\n   33 |     long start = ans.front();\n\
    \      |                  ~~~~~~~~~^~\n      |                           |\n \
    \     |                           __gnu_cxx::__alloc_traits<std::allocator<std::__cxx11::basic_string<char>\
    \ >, std::__cxx11::basic_string<char> >::value_type {aka std::__cxx11::basic_string<char>}\n\
    /tmp/tmpxc2lzmzw.cpp:34:24: error: cannot convert \u2018__gnu_cxx::__alloc_traits<std::allocator<std::__cxx11::basic_string<char>\
    \ >, std::__cxx11::basic_string<char> >::value_type\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } to \u2018long int\u2019 in initialization\n   34 |     long end = ans.back();\n\
    \      |                ~~~~~~~~^~\n      |                        |\n      |\
    \                        __gnu_cxx::__alloc_traits<std::allocator<std::__cxx11::basic_string<char>\
    \ >, std::__cxx11::basic_string<char> >::value_type {aka std::__cxx11::basic_string<char>}\n\
    /tmp/tmpxc2lzmzw.cpp:81:1: warning: control reaches end of non-void function [-Wreturn-type]\n\
    \   81 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    std::vector<std::string>\
    \ ret;\n    if (arr.size() == 0) {\n        return ret;\n    }\n    long max_len\
    \ = *std::max_element(arr.begin(), arr.end()) + 1;\n    long min_len = *std::min_element(arr.begin(),\
    \ arr.end()) + 1;\n    long len = max_len - min_len + 1;\n    long mid = len /\
    \ 2;\n    long left = max_len - mid;\n    long right = min_len + mid;\n    long\
    \ mid2 = len / 2;\n    long left2 = max_len - mid2;\n    long right2 = min_len\
    \ + mid2;\n    long mid3 = len / 2;\n    long left3 = max_len - mid3;\n    long\
    \ right3 = min_len + mid3;\n    long mid4 = len / 2;\n    long left4 = max_len\
    \ - mid4;\n    long right4 = min_len + mid4;\n    long mid5 = len / 2;\n    long\
    \ left5 = max_len - mid5;\n    long right5 = min_len + mid5;\n    long mid6 =\
    \ len / 2;\n    long left6 = max_len - mid6;\n    long right6 = min_len + mid6;\n\
    \    long mid7 = len / 2;\n    long left7 = max_len - mid7;\n    long right7 =\
    \ min_len + mid7;\n    long mid8 = len / 2;\n    long left8 = max_len - mid8;\n\
    \    long right8 = min_len + mid8;\n    long mid9 = len / 2;\n    long left9 =\
    \ max_len - mid9;\n    long right9 = min_len + mid9;\n    long mid10 = len / 2;\n\
    \    long left10 = max_len - mid10;\n    long right10 = min_len + mid10;\n   \
    \ long mid11 = len / 2;\n    long left11 = max_len - mid11;\n    long right11\
    \ = min_len + mid11;\n    long mid12 = len / 2;\n    long left12 = max_len - mid12;\n\
    \    long right12 = min_len + mid12;\n    long mid13 = len / 2;\n    long left13\
    \ = max_len - mid13;\n    long right13 = min_len + mid13;\n    long mid14 = len\
    \ / 2;\n    long left14 = max_len - mid14;\n    long right14 = min_len + mid14;\n\
    \    long mid15 = len / 2;\n    long left15 = max_len - mid15;\n    long right15\
    \ = min_len + mid15;\n    long mid16 = len / 2;\n    long left16 = max_len - mid16;\n\
    \    long right16 = min_len + mid16;\n    long mid17 = len / 2;\n    long left17\n\
    }\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({2,\
    \ 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 55}))) == (std::vector<std::string>({\"One\"})));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 3, 2}))) == (std::vector<std::string>({\"Three\", \"Two\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>({9, 4, 8}))) == (std::vector<std::string>({\"\
    Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmphcaloj10.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmphcaloj10.cpp:77:1: error:\
    \ expected initializer before \u2018}\u2019 token\n   77 | }\n      | ^\n/tmp/tmphcaloj10.cpp:77:1:\
    \ warning: control reaches end of non-void function [-Wreturn-type]\n   77 | }\n\
    \      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    // Your code\
    \ here\n    std::vector<std::string> res;\n    long temp;\n    for (long i = 0;\
    \ i < arr.size(); i++) {\n        if (arr[i] > 9) {\n            temp = arr[i];\n\
    \            arr[i] = arr[i] / 10;\n            arr[i] = arr[i] * 10;\n      \
    \      arr[i] = temp;\n        }\n    }\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] > 9) {\n            res.push_back(\"Nine\");\n  \
    \          arr[i] = arr[i] / 10;\n            arr[i] = arr[i] * 10;\n        \
    \    arr[i] = temp;\n        }\n    }\n    for (long i = 0; i < arr.size(); i++)\
    \ {\n        if (arr[i] > 9) {\n            res.push_back(\"Eight\");\n      \
    \      arr[i] = arr[i] / 10;\n            arr[i] = arr[i] * 10;\n            arr[i]\
    \ = temp;\n        }\n    }\n    for (long i = 0; i < arr.size(); i++) {\n   \
    \     if (arr[i] > 9) {\n            res.push_back(\"Seven\");\n            arr[i]\
    \ = arr[i] / 10;\n            arr[i] = arr[i] * 10;\n            arr[i] = temp;\n\
    \        }\n    }\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i]\
    \ > 9) {\n            res.push_back(\"Six\");\n            arr[i] = arr[i] / 10;\n\
    \            arr[i] = arr[i] * 10;\n            arr[i] = temp;\n        }\n  \
    \  }\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] > 9) {\n\
    \            res.push_back(\"Five\");\n            arr[i] = arr[i] / 10;\n   \
    \         arr[i] = arr[i] * 10;\n            arr[i] = temp;\n        }\n    }\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] > 9) {\n    \
    \        res.push_back(\"Four\");\n            arr[i] = arr[i] / 10;\n       \
    \     arr[i] = arr[i] * 10;\n            arr[i] = temp;\n        }\n    }\n  \
    \  for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] > 9) {\n      \
    \      res.push_back(\"Three\");\n            arr[i] = arr[i] / 10;\n        \
    \    arr[i] = arr[i] * 10;\n            arr[i] = temp;\n        }\n    }\n   \
    \ for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] > 9) {\n       \
    \     res.push_back(\"Two\");\n            arr[i] = arr[i] / 10;\n           \
    \ arr[i] = arr[i] * 10;\n            arr[i] = temp;\n        }\n    }\n    for\
    \ (long i = 0; i < arr.size(); i++) {\n        if (arr[i] > 9) {\n           \
    \ res.push_back(\"One\");\n            arr[i] = arr[i] / 10;\n            arr[i]\
    \ = arr[i] * 10;\n            arr[i] = temp;\n        }\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({2,\
    \ 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 55}))) == (std::vector<std::string>({\"One\"})));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 3, 2}))) == (std::vector<std::string>({\"Three\", \"Two\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>({9, 4, 8}))) == (std::vector<std::string>({\"\
    Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "tmp14ytle7v: /tmp/tmp14ytle7v.cpp:107: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    std::vector<std::string>\
    \ res;\n    if (arr.size() == 0) {\n        return res;\n    }\n    long min =\
    \ *std::min_element(arr.begin(), arr.end());\n    long max = *std::max_element(arr.begin(),\
    \ arr.end());\n    if (min == max) {\n        long mid = min / 10;\n        long\
    \ rest = min % 10;\n        long index = std::lower_bound(arr.begin(), arr.end(),\
    \ mid) - arr.begin();\n        long value = arr[index];\n        std::string name\
    \ = \"\";\n        if (value == 1) {\n            name = \"One\";\n        } else\
    \ if (value == 2) {\n            name = \"Two\";\n        } else if (value ==\
    \ 3) {\n            name = \"Three\";\n        } else if (value == 4) {\n    \
    \        name = \"Four\";\n        } else if (value == 5) {\n            name\
    \ = \"Five\";\n        } else if (value == 6) {\n            name = \"Six\";\n\
    \        } else if (value == 7) {\n            name = \"Seven\";\n        } else\
    \ if (value == 8) {\n            name = \"Eight\";\n        } else if (value ==\
    \ 9) {\n            name = \"Nine\";\n        }\n        res.push_back(name);\n\
    \        return res;\n    }\n    long mid = min + (max - min) / 2;\n    long rest\
    \ = max - (mid * 10);\n    long index = std::lower_bound(arr.begin(), arr.end(),\
    \ mid) - arr.begin();\n    long value = arr[index];\n    std::string name = \"\
    \";\n    if (value == 1) {\n        name = \"One\";\n    } else if (value == 2)\
    \ {\n        name = \"Two\";\n    } else if (value == 3) {\n        name = \"\
    Three\";\n    } else if (value == 4) {\n        name = \"Four\";\n    } else if\
    \ (value == 5) {\n        name = \"Five\";\n    } else if (value == 6) {\n   \
    \     name = \"Six\";\n    } else if (value == 7) {\n        name = \"Seven\"\
    ;\n    } else if (value == 8) {\n        name = \"Eight\";\n    } else if (value\
    \ == 9) {\n        name = \"Nine\";\n    }\n    res.push_back(name);\n    return\
    \ res;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({2,\
    \ 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 55}))) == (std::vector<std::string>({\"One\"})));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 3, 2}))) == (std::vector<std::string>({\"Three\", \"Two\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>({9, 4, 8}))) == (std::vector<std::string>({\"\
    Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "tmph2wimozf: /tmp/tmph2wimozf.cpp:83: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    std::vector<std::string>\
    \ result;\n    long n = arr.size();\n    long m = std::min(n, 9);\n    long k\
    \ = std::max(n, m);\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long\
    \ l = 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n    long p = 0;\n\
    \    long q = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n    long\
    \ u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n\
    \    long z = 0;\n    long A = 0;\n    long B = 0;\n    long C = 0;\n    long\
    \ D = 0;\n    long E = 0;\n    long F = 0;\n    long G = 0;\n    long H = 0;\n\
    \    long I = 0;\n    long J = 0;\n    long K = 0;\n    long L = 0;\n    long\
    \ M = 0;\n    long N = 0;\n    long O = 0;\n    long P = 0;\n    long Q = 0;\n\
    \    long R = 0;\n    long S = 0;\n    long T = 0;\n    long U = 0;\n    long\
    \ V = 0;\n    long W = 0;\n    long X = 0;\n    long Y = 0;\n    long Z = 0;\n\
    \    long a = 0;\n    long b = 0;\n    long c = 0;\n    long d = 0;\n    long\
    \ e = 0;\n    long f = 0;\n    long g = 0;\n    long h = 0;\n    long i = 0;\n\
    \    long j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long\
    \ n = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n\
    \    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long\
    \ w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long A = 0;\n\
    \    long B = 0;\n    long C = 0;\n    long D = 0;\n    long E = 0;\n    long\
    \ F = 0;\n    long G = 0;\n    long H = 0;\n    long I = 0;\n    long J = 0;\n\
    \    long K = 0;\n    long L = 0;\n    long M = 0;\n    long N = 0;\n    long\
    \ O = 0;\n    long P = 0;\n    long Q = 0;\n    long R = 0;\n    long S = 0;\n\
    \    long T = 0;\n    long U = 0;\n    long V = 0;\n    long W = 0;\n    long\
    \ X = 0;\n    long Y = 0;\n    long Z = 0;\n    long a = 0;\n    long b = 0;\n\
    \n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({2,\
    \ 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 55}))) == (std::vector<std::string>({\"One\"})));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 3, 2}))) == (std::vector<std::string>({\"Three\", \"Two\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>({9, 4, 8}))) == (std::vector<std::string>({\"\
    Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpwj3lkvzk.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpwj3lkvzk.cpp:22:27: error:\
    \ no matching function for call to \u2018min(long int&, int)\u2019\n   22 |  \
    \   long m = std::min(n, 9);\n      |                           ^\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpwj3lkvzk.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:198:5:\
    \ note: candidate: \u2018template<class _Tp> constexpr const _Tp& std::min(const\
    \ _Tp&, const _Tp&)\u2019\n  198 |     min(const _Tp& __a, const _Tp& __b)\n \
    \     |     ^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:198:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpwj3lkvzk.cpp:22:27:\
    \ note:   deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018\
    long int\u2019 and \u2018int\u2019)\n   22 |     long m = std::min(n, 9);\n  \
    \    |                           ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \      "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    std::vector<std::string>\
    \ res;\n    long n = arr.size();\n    if (n <= 0) {\n        return res;\n   \
    \ }\n    long max_len = 0, min_len = 0;\n    for (long i = 0; i < n; i++) {\n\
    \        if (max_len < arr[i]) {\n            max_len = arr[i];\n        }\n \
    \       if (min_len > arr[i]) {\n            min_len = arr[i];\n        }\n  \
    \  }\n    long mid = max_len;\n    long start = 0, end = 0, mid_index = 0;\n \
    \   while (start < n) {\n        mid = max_len;\n        while (start < n && mid\
    \ < max_len) {\n            mid = arr[start];\n            while (start < n &&\
    \ mid < max_len && arr[start] == mid) {\n                mid++;\n            \
    \    start++;\n            }\n        }\n        mid_index = (mid - min_len) /\
    \ 10;\n        res.push_back(names[mid_index]);\n        start = end;\n      \
    \  while (start < n && mid < max_len) {\n            mid = arr[start];\n     \
    \       while (start < n && mid < max_len && arr[start] == mid) {\n          \
    \      mid++;\n                start++;\n            }\n        }\n        mid_index\
    \ = (mid - min_len) / 10;\n        res.push_back(names[mid_index]);\n        end\
    \ = start + 1;\n        while (end < n && mid < max_len) {\n            mid =\
    \ arr[end];\n            while (start < n && mid < max_len && arr[start] == mid)\
    \ {\n                mid++;\n                end++;\n            }\n        }\n\
    \        mid_index = (mid - min_len) / 10;\n        res.push_back(names[mid_index]);\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = by_length;\n  \
    \  assert(candidate((std::vector<long>({2, 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({1, -1, 55}))) == (std::vector<std::string>({\"\
    One\"})));\n    assert(candidate((std::vector<long>({1, -1, 3, 2}))) == (std::vector<std::string>({\"\
    Three\", \"Two\", \"One\"})));\n    assert(candidate((std::vector<long>({9, 4,\
    \ 8}))) == (std::vector<std::string>({\"Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp57l7k7aj.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmp57l7k7aj.cpp:46:23: error:\
    \ \u2018names\u2019 was not declared in this scope\n   46 |         res.push_back(names[mid_index]);\n\
    \      |                       ^~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    std::vector<std::string>\
    \ res;\n    if (arr.size() == 0) {\n        return res;\n    }\n    long l = arr[0];\n\
    \    long r = arr[0];\n    for (size_t i = 1; i < arr.size(); i++) {\n       \
    \ l = std::min(l, arr[i]);\n        r = std::max(r, arr[i]);\n    }\n    long\
    \ mid = l + (r - l) / 2;\n    std::vector<std::string> temp;\n    while (l <=\
    \ r) {\n        temp.push_back(by_length(arr, l, mid));\n        temp.push_back(by_length(arr,\
    \ mid + 1, r));\n        mid = (mid + 1) % (r - l + 1);\n    }\n    temp.push_back(by_length(arr,\
    \ l, r));\n    res.insert(res.end(), temp.begin(), temp.end());\n    return res;\n\
    }\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({2,\
    \ 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 55}))) == (std::vector<std::string>({\"One\"})));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 3, 2}))) == (std::vector<std::string>({\"Three\", \"Two\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>({9, 4, 8}))) == (std::vector<std::string>({\"\
    Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmprqul63ws.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmprqul63ws.cpp:33:45: error:\
    \ too many arguments to function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019\n   33 |         temp.push_back(by_length(arr,\
    \ l, mid));\n      |                                             ^\n/tmp/tmprqul63ws.cpp:19:26:\
    \ note: declared here\n   19 | std::vector<std::string> by_length(std::vector<long>\
    \ arr) {\n      |                          ^~~~~~~~~\n/tmp/tmprqul63ws.cpp:33:46:\
    \ error: no matching function for call to \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >::push_back(std::vector<std::__cxx11::basic_string<char> >)\u2019\n   33 |\
    \         temp.push_back(by_length(arr, l, mid));\n      |                   \
    \                           ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmprqul63ws.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >\u2019 to \u2018const value_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019\
    }\n 1184 |       push_back(const value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    std::vector<std::string>\
    \ res;\n    long long n = arr.size();\n    long long m = std::max(arr.begin(),\
    \ arr.end()) - std::min(arr.begin(), arr.end()) + 1;\n    long long k = std::max(m,\
    \ n) / 10;\n    long long d = std::max(m, n) % 10;\n    long long x = 1;\n   \
    \ long long y = 1;\n    long long z = 1;\n    long long w = 1;\n    long long\
    \ v = 1;\n    long long u = 1;\n    long long w = 1;\n    long long v = 1;\n \
    \   long long u = 1;\n    long long w = 1;\n    long long v = 1;\n    long long\
    \ u = 1;\n    long long w = 1;\n    long long v = 1;\n    long long u = 1;\n \
    \   long long w = 1;\n    long long v = 1;\n    long long u = 1;\n    long long\
    \ w = 1;\n    long long v = 1;\n    long long u = 1;\n    long long w = 1;\n \
    \   long long v = 1;\n    long long u = 1;\n    long long w = 1;\n    long long\
    \ v = 1;\n    long long u = 1;\n    long long w = 1;\n    long long v = 1;\n \
    \   long long u = 1;\n    long long w = 1;\n    long long v = 1;\n    long long\
    \ u = 1;\n    long long w = 1;\n    long long v = 1;\n    long long u = 1;\n \
    \   long long w = 1;\n    long long v = 1;\n    long long u = 1;\n    long long\
    \ w = 1;\n    long long v = 1;\n    long long u = 1;\n    long long w = 1;\n \
    \   long long v = 1;\n    long long u = 1;\n    long long w = 1;\n    long long\
    \ v = 1;\n    long long u = 1;\n    long long w = 1;\n    long long v = 1;\n \
    \   long long u = 1;\n    long long w = 1;\n    long long v = 1;\n    long long\
    \ u = 1;\n    long long w = 1;\n    long long v = 1;\n    long long u = 1;\n \
    \   long long w = 1;\n    long long v = 1;\n    long long u = 1;\n    long long\
    \ w = 1;\n    long long v = 1;\n    long long u = 1;\n    long long w = 1;\n \
    \   long long v = 1;\n    long long u = 1;\n    long long w = 1;\n    long long\
    \ v = 1;\n    long long u = 1;\n    long long w = 1;\n    long long v = 1;\n \
    \   long long u = 1;\n    long long w = 1;\n    long long v = 1;\n    long long\
    \ u = 1;\n    long long w = 1;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({2, 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({1, -1, 55}))) == (std::vector<std::string>({\"\
    One\"})));\n    assert(candidate((std::vector<long>({1, -1, 3, 2}))) == (std::vector<std::string>({\"\
    Three\", \"Two\", \"One\"})));\n    assert(candidate((std::vector<long>({9, 4,\
    \ 8}))) == (std::vector<std::string>({\"Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzdi61qjt.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpzdi61qjt.cpp:31:15: error:\
    \ redeclaration of \u2018long long int w\u2019\n   31 |     long long w = 1;\n\
    \      |               ^\n/tmp/tmpzdi61qjt.cpp:28:15: note: \u2018long long int\
    \ w\u2019 previously declared here\n   28 |     long long w = 1;\n      |    \
    \           ^\n/tmp/tmpzdi61qjt.cpp:32:15: error: redeclaration of \u2018long\
    \ long int v\u2019\n   32 |     long long v = 1;\n      |               ^\n/tmp/tmpzdi61qjt.cpp:29:15:\
    \ note: \u2018long long int v\u2019 previously declared here\n   29 |     long\
    \ long v = 1;\n      |               ^\n/tmp/tmpzdi61qjt.cpp:33:15: error: redeclaration\
    \ of \u2018long long int u\u2019\n   33 |     long long u = 1;\n      |      \
    \         ^\n/tmp/tmpzdi61qjt.cpp:30:15: note: \u2018long long int u\u2019 previously\
    \ declared here\n   30 |     long long u = 1;\n      |               ^\n/tmp/tmpzdi61qjt.cpp:34:15:\
    \ error: redeclaration of \u2018long long int w\u2019\n   34 |     long long w\
    \ = 1;\n      |               ^\n/tmp/tmpzdi61qjt.cpp:28:15: note: \u2018long\
    \ long int w\u2019 previously declared here\n   28 |     long long w = 1;\n  \
    \    |               ^\n/tmp/tmpzdi61qjt.cpp:35:15: error: redeclaration of \u2018\
    long long int v\u2019\n   35 |     long long v = 1;\n      |               ^\n\
    /tmp/tmpzdi61qjt.cpp:29:15: note: \u2018long long int v\u2019 previously declared\
    \ here\n   29 |     long long v = 1;\n      |               ^\n/tmp/tmpzdi61qjt.cpp:36:15:\
    \ error: redeclaration of \u2018long long int u\u2019\n   36 |     long long u\
    \ = 1;\n      |               ^\n/tmp/tmpzdi61qjt.cpp:30:15: note: \u2018long\
    \ long int u\u2019 previously declared here\n   30 |     long long u = 1;\n  \
    \    |               ^\n/tmp/tmpzdi61qjt.cpp:37:15: error: redeclaration of \u2018\
    long long int w\u2019\n   37 |     long long w = 1;\n      |               ^\n\
    /tmp/tmpzdi61qjt.cpp:28:15: note: \u2018long long int w\u2019 previously declared\
    \ here\n   28 |     long long w = 1;\n      |               ^\n/tmp/tmpzdi61qjt.cpp:38:15:\
    \ error: redeclaration of \u2018long long int v\u2019\n   38 |     long long v\
    \ = 1;\n      |               ^\n/tmp/tmpzdi61qjt.cpp:29:15: note: \u2018lo"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    std::vector<std::string>\
    \ res;\n    long n = arr.size();\n    if (n == 0) return res;\n    long m = std::max(arr);\n\
    \    long k = std::min(arr);\n    long l = (k - m) / 10;\n    long r = std::count(arr.begin(),\
    \ arr.end(), k);\n    long c = std::count(arr.begin(), arr.end(), m);\n    long\
    \ d = std::count(arr.begin(), arr.end(), n);\n    long e = std::count(arr.begin(),\
    \ arr.end(), r);\n    long f = std::count(arr.begin(), arr.end(), l);\n    long\
    \ g = std::count(arr.begin(), arr.end(), c);\n    long h = std::count(arr.begin(),\
    \ arr.end(), d);\n    long i = std::count(arr.begin(), arr.end(), e);\n    long\
    \ j = std::count(arr.begin(), arr.end(), f);\n    long k = std::count(arr.begin(),\
    \ arr.end(), g);\n    long l = std::count(arr.begin(), arr.end(), h);\n    long\
    \ m = std::count(arr.begin(), arr.end(), i);\n    long n = std::count(arr.begin(),\
    \ arr.end(), j);\n    long o = std::count(arr.begin(), arr.end(), k);\n    long\
    \ p = std::count(arr.begin(), arr.end(), l);\n    long q = std::count(arr.begin(),\
    \ arr.end(), m);\n    long r = std::count(arr.begin(), arr.end(), n);\n    long\
    \ s = std::count(arr.begin(), arr.end(), o);\n    long t = std::count(arr.begin(),\
    \ arr.end(), p);\n    long u = std::count(arr.begin(), arr.end(), q);\n    long\
    \ v = std::count(arr.begin(), arr.end(), r);\n    long w = std::count(arr.begin(),\
    \ arr.end(), s);\n    long x = std::count(arr.begin(), arr.end(), t);\n    long\
    \ y = std::count(arr.begin(), arr.end(), u);\n    long z = std::count(arr.begin(),\
    \ arr.end(), v);\n    long a = std::count(arr.begin(), arr.end(), w);\n    long\
    \ b = std::count(arr.begin(), arr.end(), x);\n    long c = std::count(arr.begin(),\
    \ arr.end(), y);\n    long d = std::count(arr.begin(), arr.end(), z);\n    long\
    \ e = std::count(arr.begin(), arr.end(), a);\n    long f = std::count(arr.begin(),\
    \ arr.end(), b);\n    long g = std::count(arr.begin(), arr.end(), c);\n    long\
    \ h = std::count(arr.begin(), arr.end(), d);\n    long i = std::count(arr.begin(),\
    \ arr.end(), e);\n    long j = std::count(arr.begin(), arr.end(), f);\n}\nint\
    \ main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({2,\
    \ 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 55}))) == (std::vector<std::string>({\"One\"})));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 3, 2}))) == (std::vector<std::string>({\"Three\", \"Two\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>({9, 4, 8}))) == (std::vector<std::string>({\"\
    Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpij2kryzn.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpij2kryzn.cpp:23:26: error:\
    \ no matching function for call to \u2018max(std::vector<long int>&)\u2019\n \
    \  23 |     long m = std::max(arr);\n      |                          ^\nIn file\
    \ included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpij2kryzn.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:222:5:\
    \ note: candidate: \u2018template<class _Tp> constexpr const _Tp& std::max(const\
    \ _Tp&, const _Tp&)\u2019\n  222 |     max(const _Tp& __a, const _Tp& __b)\n \
    \     |     ^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:222:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpij2kryzn.cpp:23:26:\
    \ note:   candidate expects 2 arguments, 1 provided\n   23 |     long m = std::max(arr);\n\
    \      |                          ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/cento"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    std::vector<std::string>\
    \ res;\n    if (arr.size() == 0) {\n        return res;\n    }\n    long min =\
    \ *std::min_element(arr.begin(), arr.end());\n    long max = *std::max_element(arr.begin(),\
    \ arr.end());\n    long mid = (min + max) / 2;\n    long mid2 = mid / 10;\n  \
    \  long mid3 = mid % 10;\n    long mid4 = mid2 / 10;\n    long mid5 = mid2 % 10;\n\
    \    long mid6 = mid3 / 10;\n    long mid7 = mid3 % 10;\n    long mid8 = mid4\
    \ / 10;\n    long mid9 = mid4 % 10;\n    long mid10 = mid5 / 10;\n    long mid11\
    \ = mid5 % 10;\n    long mid12 = mid6 / 10;\n    long mid13 = mid6 % 10;\n   \
    \ long mid14 = mid7 / 10;\n    long mid15 = mid7 % 10;\n    long mid16 = mid8\
    \ / 10;\n    long mid17 = mid8 % 10;\n    long mid18 = mid9 / 10;\n    long mid19\
    \ = mid9 % 10;\n    long mid20 = mid10 / 10;\n    long mid21 = mid10 % 10;\n \
    \   long mid22 = mid11 / 10;\n    long mid23 = mid11 % 10;\n    long mid24 = mid12\
    \ / 10;\n    long mid25 = mid12 % 10;\n    long mid26 = mid13 / 10;\n    long\
    \ mid27 = mid13 % 10;\n    long mid28 = mid14 / 10;\n    long mid29 = mid14 %\
    \ 10;\n    long mid30 = mid15 / 10;\n    long mid31 = mid15 % 10;\n    long mid32\
    \ = mid16 / 10;\n    long mid33 = mid16 % 10;\n    long mid34 = mid17 / 10;\n\
    \    long mid35 = mid17 % 10;\n    long mid36 = mid18 / 10;\n    long mid37 =\
    \ mid18 % 10;\n    long mid38 = mid19 / 10;\n    long mid39 = mid19 % 10;\n  \
    \  long mid40 = mid20 / 10;\n    long mid41 = mid20 % 10;\n    long mid42 = mid21\
    \ / 10;\n    long mid43 = mid21 % 10;\n    long mid44 = mid22 / 10;\n    long\
    \ mid45 = mid22 % 10;\n    long mid46 = mid23 / 10;\n    long mid47 = mid23 %\
    \ 10;\n    long mid48 = mid24 / 10;\n\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({2, 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({1, -1, 55}))) == (std::vector<std::string>({\"\
    One\"})));\n    assert(candidate((std::vector<long>({1, -1, 3, 2}))) == (std::vector<std::string>({\"\
    Three\", \"Two\", \"One\"})));\n    assert(candidate((std::vector<long>({9, 4,\
    \ 8}))) == (std::vector<std::string>({\"Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "tmpzgn700t0: /tmp/tmpzgn700t0.cpp:78: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    std::vector<std::string>\
    \ ret;\n    if (arr.size() == 0) {\n        return ret;\n    }\n    long min =\
    \ arr[0];\n    long max = arr[0];\n    for (long i : arr) {\n        if (i < min)\
    \ {\n            min = i;\n        } else if (i > max) {\n            max = i;\n\
    \        }\n    }\n    long mid = min + (max - min) / 2;\n    long left = mid;\n\
    \    long right = mid;\n    long mid2 = mid;\n    std::vector<std::string> ret2;\n\
    \    while (left < max) {\n        while (right < max) {\n            if (arr[left]\
    \ < arr[right]) {\n                long temp = arr[left];\n                arr[left]\
    \ = arr[right];\n                arr[right] = temp;\n                ret2.push_back(names[arr[left]]);\n\
    \                ret2.push_back(names[arr[right]]);\n                left++;\n\
    \                right++;\n            } else if (arr[left] == arr[right]) {\n\
    \                ret2.push_back(names[arr[left]]);\n                left++;\n\
    \                right++;\n            } else {\n                long temp = arr[left];\n\
    \                arr[left] = arr[right];\n                arr[right] = temp;\n\
    \                ret2.push_back(names[arr[left]]);\n                left++;\n\
    \                right++;\n            }\n        }\n        mid2 = mid - 1;\n\
    \        while (mid2 < min) {\n            if (arr[mid2] < arr[mid]) {\n     \
    \           long temp = arr[mid2];\n                arr[mid2] = arr[mid];\n  \
    \              arr[mid] = temp;\n                ret2.push_back(names[arr[mid2]]);\n\
    \                mid2++;\n                mid++;\n            } else if (arr[mid2]\
    \ == arr[mid]) {\n                ret2.push_back(names[arr[mid2]]);\n        \
    \        mid2++;\n                mid++;\n            } else {\n             \
    \   long temp = arr[mid2];\n                arr[mid2] = arr[mid];\n          \
    \      arr[mid] = temp;\n                ret2.push_back(names[arr[mid2]]);\n \
    \               mid2++;\n                mid++;\n            }\n        }\n  \
    \      mid = mid - 1;\n        left = mid;\n        right = mid;\n    }\n    return\
    \ ret;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({2,\
    \ 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 55}))) == (std::vector<std::string>({\"One\"})));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 3, 2}))) == (std::vector<std::string>({\"Three\", \"Two\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>({9, 4, 8}))) == (std::vector<std::string>({\"\
    Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpurjxf1b2.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpurjxf1b2.cpp:44:32: error:\
    \ \u2018names\u2019 was not declared in this scope\n   44 |                 ret2.push_back(names[arr[left]]);\n\
    \      |                                ^~~~~\n/tmp/tmpurjxf1b2.cpp:49:32: error:\
    \ \u2018names\u2019 was not declared in this scope\n   49 |                 ret2.push_back(names[arr[left]]);\n\
    \      |                                ^~~~~\n/tmp/tmpurjxf1b2.cpp:56:32: error:\
    \ \u2018names\u2019 was not declared in this scope\n   56 |                 ret2.push_back(names[arr[left]]);\n\
    \      |                                ^~~~~\n/tmp/tmpurjxf1b2.cpp:67:32: error:\
    \ \u2018names\u2019 was not declared in this scope\n   67 |                 ret2.push_back(names[arr[mid2]]);\n\
    \      |                                ^~~~~\n/tmp/tmpurjxf1b2.cpp:71:32: error:\
    \ \u2018names\u2019 was not declared in this scope\n   71 |                 ret2.push_back(names[arr[mid2]]);\n\
    \      |                                ^~~~~\n/tmp/tmpurjxf1b2.cpp:78:32: error:\
    \ \u2018names\u2019 was not declared in this scope\n   78 |                 ret2.push_back(names[arr[mid2]]);\n\
    \      |                                ^~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    std::vector<std::string>\
    \ result;\n    long long int sum = 0;\n    for (long long int i : arr) {\n   \
    \     sum += i;\n    }\n    long long int mod = sum % 10;\n    if (mod != 0) {\n\
    \        result.push_back(\"One\");\n        sum -= mod;\n    }\n    mod = sum\
    \ % 10;\n    if (mod != 0) {\n        result.push_back(\"Two\");\n        sum\
    \ -= mod;\n    }\n    mod = sum % 10;\n    if (mod != 0) {\n        result.push_back(\"\
    Three\");\n        sum -= mod;\n    }\n    mod = sum % 10;\n    if (mod != 0)\
    \ {\n        result.push_back(\"Four\");\n        sum -= mod;\n    }\n    mod\
    \ = sum % 10;\n    if (mod != 0) {\n        result.push_back(\"Five\");\n    \
    \    sum -= mod;\n    }\n    mod = sum % 10;\n    if (mod != 0) {\n        result.push_back(\"\
    Six\");\n        sum -= mod;\n    }\n    mod = sum % 10;\n    if (mod != 0) {\n\
    \        result.push_back(\"Seven\");\n        sum -= mod;\n    }\n    mod = sum\
    \ % 10;\n    if (mod != 0) {\n        result.push_back(\"Eight\");\n        sum\
    \ -= mod;\n    }\n    mod = sum % 10;\n    if (mod != 0) {\n        result.push_back(\"\
    Nine\");\n        sum -= mod;\n    }\n    mod = sum % 10;\n    if (mod != 0) {\n\
    \        result.push_back(\"Zero\");\n        sum -= mod;\n    }\n    if (sum\
    \ != 0) {\n        result.push_back(\"One\");\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({2,\
    \ 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 55}))) == (std::vector<std::string>({\"One\"})));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 3, 2}))) == (std::vector<std::string>({\"Three\", \"Two\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>({9, 4, 8}))) == (std::vector<std::string>({\"\
    Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "tmp6ns8enkp: /tmp/tmp6ns8enkp.cpp:82: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    std::vector<std::string>\
    \ res;\n    if (arr.size() == 0) {\n        return res;\n    }\n    long min =\
    \ arr[0];\n    long max = arr[0];\n    for (auto &i : arr) {\n        if (i <\
    \ min) {\n            min = i;\n        }\n        if (i > max) {\n          \
    \  max = i;\n        }\n    }\n    long mid = min + (max - min) / 2;\n    long\
    \ mid2 = mid / 10;\n    long mid3 = mid % 10;\n    long mid4 = mid2 / 10;\n  \
    \  long mid5 = mid2 % 10;\n    long mid6 = mid3 / 10;\n    long mid7 = mid3 %\
    \ 10;\n    long mid8 = mid4 / 10;\n    long mid9 = mid4 % 10;\n    long mid10\
    \ = mid5 / 10;\n    long mid11 = mid5 % 10;\n    long mid12 = mid6 / 10;\n   \
    \ long mid13 = mid6 % 10;\n    long mid14 = mid7 / 10;\n    long mid15 = mid7\
    \ % 10;\n    long mid16 = mid8 / 10;\n    long mid17 = mid8 % 10;\n    long mid18\
    \ = mid9 / 10;\n    long mid19 = mid9 % 10;\n    long mid20 = mid10 / 10;\n  \
    \  long mid21 = mid10 % 10;\n    long mid22 = mid11 / 10;\n    long mid23 = mid11\
    \ % 10;\n    long mid24 = mid12 / 10;\n    long mid25 = mid12 % 10;\n    long\
    \ mid26 = mid13 / 10;\n    long mid27 = mid13 % 10;\n    long mid28 = mid14 /\
    \ 10;\n    long mid29 = mid14 % 10;\n    long mid30 = mid15 / 10;\n    long mid31\
    \ = mid15 % 10;\n    long mid32 = mid16 / 10;\n    long mid33 = mid16 % 10;\n\
    \    long mid34 = mid17 / 10;\n    long mid35 = mid17 % 10;\n    long mid36 =\
    \ mid18 / 10;\n    long mid37 = mid18 % 10;\n    long mid38 = mid19 / 10;\n  \
    \  long mid39 = mid19 % 10;\n    long mid40 = mid20 / 10;\n    long mid41 = mid20\
    \ % 10;\n    long mid42 = mid21 / 10;\n    long mid43 = mid21 % 10;\n    long\
    \ mid44 = mid22 / 10;\n    long mid45 = mid22 % 10;\n    long mid46 = mid23 /\
    \ 10;\n    long mid\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({2,\
    \ 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 55}))) == (std::vector<std::string>({\"One\"})));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 3, 2}))) == (std::vector<std::string>({\"Three\", \"Two\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>({9, 4, 8}))) == (std::vector<std::string>({\"\
    Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpw84saluo.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpw84saluo.cpp:81:1: error:\
    \ expected initializer before \u2018}\u2019 token\n   81 | }\n      | ^\n/tmp/tmpw84saluo.cpp:81:1:\
    \ warning: control reaches end of non-void function [-Wreturn-type]\n   81 | }\n\
    \      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    std::vector<std::string>\
    \ res;\n    long n = arr.size();\n    long m = n / 10;\n    long r = n % 10;\n\
    \    long temp;\n    long i;\n    long j;\n    long k;\n    long l;\n    long\
    \ m;\n    long n;\n    long o;\n    long p;\n    long q;\n    long r;\n    long\
    \ s;\n    long t;\n    long u;\n    long v;\n    long w;\n    long x;\n    long\
    \ y;\n    long z;\n    long A;\n    long B;\n    long C;\n    long D;\n    long\
    \ E;\n    long F;\n    long G;\n    long H;\n    long I;\n    long J;\n    long\
    \ K;\n    long L;\n    long M;\n    long N;\n    long O;\n    long P;\n    long\
    \ Q;\n    long R;\n    long S;\n    long T;\n    long U;\n    long V;\n    long\
    \ W;\n    long X;\n    long Y;\n    long Z;\n    long A;\n    long B;\n    long\
    \ C;\n    long D;\n    long E;\n    long F;\n    long G;\n    long H;\n    long\
    \ I;\n    long J;\n    long K;\n    long L;\n    long M;\n    long N;\n    long\
    \ O;\n    long P;\n    long Q;\n    long R;\n    long S;\n    long T;\n    long\
    \ U;\n    long V;\n    long W;\n    long X;\n    long Y;\n    long Z;\n    long\
    \ A;\n    long B;\n    long C;\n    long D;\n    long E;\n    long F;\n    long\
    \ G;\n    long H;\n    long I;\n    long J;\n    long K;\n    long L;\n    long\
    \ M;\n    long N;\n    long O;\n    long P;\n    long Q;\n    long R;\n    long\
    \ S;\n    long T;\n    long U;\n    long V;\n    long W;\n    long X;\n    long\
    \ Y;\n    long Z;\n    long A;\n    long B;\n    long C;\n    long D;\n    long\
    \ E;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({2,\
    \ 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 55}))) == (std::vector<std::string>({\"One\"})));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 3, 2}))) == (std::vector<std::string>({\"Three\", \"Two\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>({9, 4, 8}))) == (std::vector<std::string>({\"\
    Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5lt_3aw4.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmp5lt_3aw4.cpp:29:10: error:\
    \ redeclaration of \u2018long int m\u2019\n   29 |     long m;\n      |      \
    \    ^\n/tmp/tmp5lt_3aw4.cpp:22:10: note: \u2018long int m\u2019 previously declared\
    \ here\n   22 |     long m = n / 10;\n      |          ^\n/tmp/tmp5lt_3aw4.cpp:30:10:\
    \ error: redeclaration of \u2018long int n\u2019\n   30 |     long n;\n      |\
    \          ^\n/tmp/tmp5lt_3aw4.cpp:21:10: note: \u2018long int n\u2019 previously\
    \ declared here\n   21 |     long n = arr.size();\n      |          ^\n/tmp/tmp5lt_3aw4.cpp:34:10:\
    \ error: redeclaration of \u2018long int r\u2019\n   34 |     long r;\n      |\
    \          ^\n/tmp/tmp5lt_3aw4.cpp:23:10: note: \u2018long int r\u2019 previously\
    \ declared here\n   23 |     long r = n % 10;\n      |          ^\n/tmp/tmp5lt_3aw4.cpp:69:10:\
    \ error: redeclaration of \u2018long int A\u2019\n   69 |     long A;\n      |\
    \          ^\n/tmp/tmp5lt_3aw4.cpp:43:10: note: \u2018long int A\u2019 previously\
    \ declared here\n   43 |     long A;\n      |          ^\n/tmp/tmp5lt_3aw4.cpp:70:10:\
    \ error: redeclaration of \u2018long int B\u2019\n   70 |     long B;\n      |\
    \          ^\n/tmp/tmp5lt_3aw4.cpp:44:10: note: \u2018long int B\u2019 previously\
    \ declared here\n   44 |     long B;\n      |          ^\n/tmp/tmp5lt_3aw4.cpp:71:10:\
    \ error: redeclaration of \u2018long int C\u2019\n   71 |     long C;\n      |\
    \          ^\n/tmp/tmp5lt_3aw4.cpp:45:10: note: \u2018long int C\u2019 previously\
    \ declared here\n   45 |     long C;\n      |          ^\n/tmp/tmp5lt_3aw4.cpp:72:10:\
    \ error: redeclaration of \u2018long int D\u2019\n   72 |     long D;\n      |\
    \          ^\n/tmp/tmp5lt_3aw4.cpp:46:10: note: \u2018long int D\u2019 previously\
    \ declared here\n   46 |     long D;\n      |          ^\n/tmp/tmp5lt_3aw4.cpp:73:10:\
    \ error: redeclaration of \u2018long int E\u2019\n   73 |     long E;\n      |\
    \          ^\n/tmp/tmp5lt_3aw4.cpp:47:10: note: \u2018long int E\u2019 previously\
    \ declared here\n   47 |     long E;\n      |          ^\n/tmp/tmp5lt_3aw4.cpp:74:10:\
    \ error: redeclaration of \u2018long int F\u2019\n   74 |     long F;\n      |\
    \          ^\n/tmp/tmp5lt_3aw4.cpp:48:10: note: \u2018long int F\u2019 previously\
    \ declared here\n   4"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    std::vector<std::string>\
    \ result;\n    if (arr.size() == 0) {\n        return result;\n    }\n    long\
    \ min = *std::min_element(arr.begin(), arr.end());\n    long max = *std::max_element(arr.begin(),\
    \ arr.end());\n    long mid = min + (max - min) / 2;\n    long mid2 = mid / 10;\n\
    \    long mid3 = mid % 10;\n    long mid4 = mid2 / 10;\n    long mid5 = mid2 %\
    \ 10;\n    long mid6 = mid3 / 10;\n    long mid7 = mid3 % 10;\n    long mid8 =\
    \ mid4 / 10;\n    long mid9 = mid4 % 10;\n    long mid10 = mid5 / 10;\n    long\
    \ mid11 = mid5 % 10;\n    long mid12 = mid6 / 10;\n    long mid13 = mid6 % 10;\n\
    \    long mid14 = mid7 / 10;\n    long mid15 = mid7 % 10;\n    long mid16 = mid8\
    \ / 10;\n    long mid17 = mid8 % 10;\n    long mid18 = mid9 / 10;\n    long mid19\
    \ = mid9 % 10;\n    long mid20 = mid10 / 10;\n    long mid21 = mid10 % 10;\n \
    \   long mid22 = mid11 / 10;\n    long mid23 = mid11 % 10;\n    long mid24 = mid12\
    \ / 10;\n    long mid25 = mid12 % 10;\n    long mid26 = mid13 / 10;\n    long\
    \ mid27 = mid13 % 10;\n    long mid28 = mid14 / 10;\n    long mid29 = mid14 %\
    \ 10;\n    long mid30 = mid15 / 10;\n    long mid31 = mid15 % 10;\n    long mid32\
    \ = mid16 / 10;\n    long mid33 = mid16 % 10;\n    long mid34 = mid17 / 10;\n\
    \    long mid35 = mid17 % 10;\n    long mid36 = mid18 / 10;\n    long mid37 =\
    \ mid18 % 10;\n    long mid38 = mid19 / 10;\n    long mid39 = mid19 % 10;\n  \
    \  long mid40 = mid20 / 10;\n    long mid41 = mid20 % 10;\n    long mid42 = mid21\
    \ / 10;\n    long mid43 = mid21 % 10;\n    long mid44 = mid22 / 10;\n    long\
    \ mid45 = mid22 % 10;\n    long mid46 = mid23 / 10;\n    long mid47 = mid23 %\
    \ 10;\n    long mid48 = mid24 / 10;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({2, 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({1, -1, 55}))) == (std::vector<std::string>({\"\
    One\"})));\n    assert(candidate((std::vector<long>({1, -1, 3, 2}))) == (std::vector<std::string>({\"\
    Three\", \"Two\", \"One\"})));\n    assert(candidate((std::vector<long>({9, 4,\
    \ 8}))) == (std::vector<std::string>({\"Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "tmp7fcsez10: /tmp/tmp7fcsez10.cpp:77: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    std::vector<std::string>\
    \ res;\n    long n = arr.size();\n    long m = 1;\n    long temp;\n    long i\
    \ = 0;\n    while (i < n) {\n        temp = arr[i];\n        while (temp > m)\
    \ {\n            m += 10;\n        }\n        res.push_back(to_string(m));\n \
    \       m += temp;\n        i++;\n    }\n    return res;\n}\nint main() {\n  \
    \  auto candidate = by_length;\n    assert(candidate((std::vector<long>({2, 1,\
    \ 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 55}))) == (std::vector<std::string>({\"One\"})));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 3, 2}))) == (std::vector<std::string>({\"Three\", \"Two\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>({9, 4, 8}))) == (std::vector<std::string>({\"\
    Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8f0oy7vj.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmp8f0oy7vj.cpp:30:23: error:\
    \ \u2018to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   30 |         res.push_back(to_string(m));\n      |                     \
    \  ^~~~~~~~~\n      |                       std::__cxx11::to_string\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n      \
    \           from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp8f0oy7vj.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:6598:3:\
    \ note: \u2018std::__cxx11::to_string\u2019 declared here\n 6598 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    // Your code\
    \ here\n    std::vector<std::string> result;\n    long long sum = 0;\n    for\
    \ (long i : arr) {\n        sum += i;\n    }\n    long long mod = sum % 10;\n\
    \    if (mod == 0) {\n        result.push_back(\"One\");\n        return result;\n\
    \    }\n    mod = sum % 10;\n    if (mod == 1) {\n        result.push_back(\"\
    Two\");\n        return result;\n    }\n    mod = sum % 10;\n    if (mod == 2)\
    \ {\n        result.push_back(\"Three\");\n        return result;\n    }\n   \
    \ mod = sum % 10;\n    if (mod == 3) {\n        result.push_back(\"Four\");\n\
    \        return result;\n    }\n    mod = sum % 10;\n    if (mod == 4) {\n   \
    \     result.push_back(\"Five\");\n        return result;\n    }\n    mod = sum\
    \ % 10;\n    if (mod == 5) {\n        result.push_back(\"Six\");\n        return\
    \ result;\n    }\n    mod = sum % 10;\n    if (mod == 6) {\n        result.push_back(\"\
    Seven\");\n        return result;\n    }\n    mod = sum % 10;\n    if (mod ==\
    \ 7) {\n        result.push_back(\"Eight\");\n        return result;\n    }\n\
    \    mod = sum % 10;\n    if (mod == 8) {\n        result.push_back(\"Nine\");\n\
    \        return result;\n    }\n    mod = sum % 10;\n    if (mod == 9) {\n   \
    \     result.push_back(\"Ten\");\n        return result;\n    }\n    mod = sum\
    \ % 10;\n    if (mod == 1) {\n        result.push_back(\"One\");\n        return\
    \ result;\n    }\n    mod = sum % 10;\n    if (mod == 2) {\n        result.push_back(\"\
    Two\");\n        return result;\n    }\n    mod = sum % 10;\n    if (mod == 3)\
    \ {\n        result.push_back(\"Three\");\n        return result;\n    }\n   \
    \ mod = sum % 10;\n    if (mod == 4) {\n        result.push_back(\"Four\");\n\
    \        return result;\n    }\n    mod = sum % 10;\n    if (mod == 5) {\n   \
    \     result.push_back(\"Five\");\n        return result;\n    }\n    mod = sum\
    \ % 10;\n    if (mod == 6) {\n        result.push_back(\"Six\");\n        return\
    \ result;\n    }\n    mod = sum % 10;\n    if (mod == 7) {\n        result.push_back(\"\
    Seven\");\n        return result;\n    }\n    mod = sum % 10;\n    if (mod ==\
    \ 8) {\n        result.push_back(\"Eight\");\n        return result;\n    }\n\
    \    mod = sum % 10;\n    if (mod == 9) {\n        result.push_back(\"Nine\");\n\
    \        return result;\n    }\n    mod = sum % 10;\n    if (mod == 1) {\n   \
    \     result.push_back(\"One\");\n        return result;\n    }\n    mod = sum\
    \ % 10;\n    if (mod == 2) {\n        result.push_back(\"Two\");\n        return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({2,\
    \ 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 55}))) == (std::vector<std::string>({\"One\"})));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 3, 2}))) == (std::vector<std::string>({\"Three\", \"Two\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>({9, 4, 8}))) == (std::vector<std::string>({\"\
    Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpt2vfme7_.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpt2vfme7_.cpp:131:12: error:\
    \ a function-definition is not allowed here before \u2018{\u2019 token\n  131\
    \ | int main() {\n      |            ^\n/tmp/tmpt2vfme7_.cpp:138:1: error: expected\
    \ \u2018}\u2019 at end of input\n  138 | }\n      | ^\n/tmp/tmpt2vfme7_.cpp:19:59:\
    \ note: to match this \u2018{\u2019\n   19 | std::vector<std::string> by_length(std::vector<long>\
    \ arr) {\n      |                                                           ^\n\
    /tmp/tmpt2vfme7_.cpp:138:1: warning: control reaches end of non-void function\
    \ [-Wreturn-type]\n  138 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    std::vector<std::string>\
    \ ans;\n    long long ans_len = 0, max_len = 0, min_len = 0, cur_len = 0;\n  \
    \  for (long i = 0; i < arr.size(); i++) {\n        cur_len = arr[i];\n      \
    \  if (cur_len > max_len) {\n            max_len = cur_len;\n        }\n     \
    \   if (cur_len < min_len) {\n            min_len = cur_len;\n        }\n    }\n\
    \    ans.reserve(max_len + min_len + 1);\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        cur_len = arr[i];\n        if (cur_len > max_len) {\n      \
    \      ans.push_back(\"One\");\n        } else if (cur_len < min_len) {\n    \
    \        ans.push_back(\"Zero\");\n        } else {\n            ans.push_back(str[cur_len]);\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({2, 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({1, -1, 55}))) == (std::vector<std::string>({\"\
    One\"})));\n    assert(candidate((std::vector<long>({1, -1, 3, 2}))) == (std::vector<std::string>({\"\
    Three\", \"Two\", \"One\"})));\n    assert(candidate((std::vector<long>({9, 4,\
    \ 8}))) == (std::vector<std::string>({\"Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpu5ut56zr.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpu5ut56zr.cpp:39:27: error:\
    \ \u2018str\u2019 was not declared in this scope; did you mean \u2018std\u2019\
    ?\n   39 |             ans.push_back(str[cur_len]);\n      |                 \
    \          ^~~\n      |                           std\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    if (arr.empty())\
    \ {\n        return {};\n    }\n    std::vector<long> sorted_arr;\n    std::sort(arr.begin(),\
    \ arr.end());\n    std::reverse(arr.begin(), arr.end());\n    for (long i : arr)\
    \ {\n        sorted_arr.push_back(i);\n    }\n    std::vector<std::string> ret;\n\
    \    for (long i : sorted_arr) {\n        std::string name;\n        if (i <=\
    \ 9) {\n            name = \"One\";\n        } else if (i <= 19) {\n         \
    \   name = \"Two\";\n        } else if (i <= 29) {\n            name = \"Three\"\
    ;\n        } else if (i <= 39) {\n            name = \"Four\";\n        } else\
    \ if (i <= 49) {\n            name = \"Five\";\n        } else if (i <= 59) {\n\
    \            name = \"Six\";\n        } else if (i <= 69) {\n            name\
    \ = \"Seven\";\n        } else if (i <= 79) {\n            name = \"Eight\";\n\
    \        } else if (i <= 89) {\n            name = \"Nine\";\n        } else {\n\
    \            name = \"Ten\";\n        }\n        ret.push_back(name);\n    }\n\
    \    return ret;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({2,\
    \ 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 55}))) == (std::vector<std::string>({\"One\"})));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 3, 2}))) == (std::vector<std::string>({\"Three\", \"Two\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>({9, 4, 8}))) == (std::vector<std::string>({\"\
    Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "tmp7sur5z6i: /tmp/tmp7sur5z6i.cpp:59: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    if (arr.size()\
    \ == 0)\n        return {};\n    long min = *std::min_element(arr.begin(), arr.end());\n\
    \    long max = *std::max_element(arr.begin(), arr.end());\n    long mid = min\
    \ + (max - min) / 2;\n    std::vector<long> arr_rev(arr.size());\n    for (long\
    \ i = 0; i < arr.size(); i++) {\n        if (arr[i] < mid)\n            arr_rev[i]\
    \ = arr[arr.size() - i - 1];\n        else\n            arr_rev[i] = arr[arr.size()\
    \ - i - 1] + 1;\n    }\n    std::vector<std::string> res;\n    for (long i = 0;\
    \ i < arr_rev.size(); i++) {\n        std::string temp;\n        if (arr_rev[i]\
    \ < 10)\n            temp += \"Zero\";\n        else if (arr_rev[i] < 100)\n \
    \           temp += \"One\";\n        else if (arr_rev[i] < 1000)\n          \
    \  temp += \"Two\";\n        else if (arr_rev[i] < 10000)\n            temp +=\
    \ \"Three\";\n        else if (arr_rev[i] < 100000)\n            temp += \"Four\"\
    ;\n        else if (arr_rev[i] < 1000000)\n            temp += \"Five\";\n   \
    \     else if (arr_rev[i] < 10000000)\n            temp += \"Six\";\n        else\
    \ if (arr_rev[i] < 100000000)\n            temp += \"Seven\";\n        else if\
    \ (arr_rev[i] < 1000000000)\n            temp += \"Eight\";\n        else if (arr_rev[i]\
    \ < 10000000000)\n            temp += \"Nine\";\n        else\n            temp\
    \ += \"Ten\";\n        res.push_back(temp);\n    }\n    return res;\n}\nint main()\
    \ {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({2,\
    \ 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 55}))) == (std::vector<std::string>({\"One\"})));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 3, 2}))) == (std::vector<std::string>({\"Three\", \"Two\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>({9, 4, 8}))) == (std::vector<std::string>({\"\
    Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "tmpr0lk8tjy: /tmp/tmpr0lk8tjy.cpp:63: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    std::vector<std::string>\
    \ result;\n    long temp;\n    for (long i = 0; i < arr.size(); i++) {\n     \
    \   temp = arr[i];\n        if (temp < 1 || temp > 9) {\n            continue;\n\
    \        }\n        long index = temp - 1;\n        std::string name = \"\";\n\
    \        if (index >= 0 && index < 10) {\n            name = to_string(index);\n\
    \        }\n        if (index >= 10 && index < 100) {\n            name = to_string(index)\
    \ + \"Hundred\";\n        }\n        if (index >= 100 && index < 1000) {\n   \
    \         name = to_string(index) + \"Thousand\";\n        }\n        if (index\
    \ >= 1000 && index < 10000) {\n            name = to_string(index) + \"Lakh\"\
    ;\n        }\n        if (index >= 10000 && index < 100000) {\n            name\
    \ = to_string(index) + \"Crore\";\n        }\n        if (index >= 100000 && index\
    \ < 1000000) {\n            name = to_string(index) + \"Lakh\";\n        }\n \
    \       if (index >= 1000000 && index < 10000000) {\n            name = to_string(index)\
    \ + \"Crore\";\n        }\n        if (index >= 10000000 && index < 100000000)\
    \ {\n            name = to_string(index) + \"Lakh\";\n        }\n        if (index\
    \ >= 100000000 && index < 1000000000) {\n            name = to_string(index) +\
    \ \"Crore\";\n        }\n        if (index >= 1000000000 && index < 10000000000)\
    \ {\n            name = to_string(index) + \"Lakh\";\n        }\n        if (index\
    \ >= 10000000000 && index < 100000000000) {\n            name = to_string(index)\
    \ + \"Crore\";\n        }\n        if (index >= 100000000000 && index < 1000000000000)\
    \ {\n            name = to_string(index) + \"Lakh\";\n        }\n        if (index\
    \ >= 1000000000000 && index < 10000000000000) {\n            name = to_string(index)\
    \ + \"Crore\";\n        }\n        if (index >= 10000000000000 && index < 100000000000000)\
    \ {\n            name = to_string(index) + \"Lakh\";\n        }\n        if (index\
    \ >= 100000000000000 && index < 1000000000000000) {\n            name = to_string(index)\
    \ + \"Crore\";\n        }\n        if (index >= 1000000000000000 && index < 10000000000000000)\
    \ {\n            name = to_string(index) + \"Lakh\";\n        }\n        if (index\
    \ >= 10000000000000000 && index < 100000000000000000) {\n            name = to_string(index)\
    \ + \"Crore\";\n        }\n        if (index >= 100000000000000000 && index <\
    \ 1000000000000000000) {\n            name = to_string(index) + \"Lakh\";\n  \
    \      }\n        if (index >= 1000000000000000000 && index < 10000000000000000000)\
    \ {\n            name = to_string(index) + \"Crore\";\n        }\n        if (index\
    \ >= 10000000000000000000 && index < 100000000000000000000) {\n            name\
    \ = to_string(index) + \"Lakh\";\n        }\n        if (index >= 100000000000000000000\
    \ && index < 1000000000000000000000) {\n            name = to_string(index) +\
    \ \"Crore\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({2,\
    \ 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 55}))) == (std::vector<std::string>({\"One\"})));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 3, 2}))) == (std::vector<std::string>({\"Three\", \"Two\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>({9, 4, 8}))) == (std::vector<std::string>({\"\
    Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpu0sk0kft.cpp:83:53: warning: integer constant is so large that\
    \ it is unsigned\n   83 |         if (index >= 1000000000000000000 && index <\
    \ 10000000000000000000) {\n      |                                           \
    \          ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpu0sk0kft.cpp:86:22: warning: integer\
    \ constant is so large that it is unsigned\n   86 |         if (index >= 10000000000000000000\
    \ && index < 100000000000000000000) {\n      |                      ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpu0sk0kft.cpp:86:54: warning: integer constant is too large for its type\n\
    \   86 |         if (index >= 10000000000000000000 && index < 100000000000000000000)\
    \ {\n      |                                                      ^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpu0sk0kft.cpp:89:22: warning: integer constant is too large for its type\n\
    \   89 |         if (index >= 100000000000000000000 && index < 1000000000000000000000)\
    \ {\n      |                      ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpu0sk0kft.cpp:89:55:\
    \ warning: integer constant is too large for its type\n   89 |         if (index\
    \ >= 100000000000000000000 && index < 1000000000000000000000) {\n      |     \
    \                                                  ^~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpu0sk0kft.cpp:90:39:\
    \ warning: missing terminating \" character\n   90 |             name = to_string(index)\
    \ + \"Crore\n      |                                       ^\n/tmp/tmpu0sk0kft.cpp:90:39:\
    \ error: missing terminating \" character\n   90 |             name = to_string(index)\
    \ + \"Crore\n      |                                       ^~~~~~\n/tmp/tmpu0sk0kft.cpp:\
    \ In function \u2018std::vector<std::__cxx11::basic_string<char> > by_length(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpu0sk0kft.cpp:30:20: error: \u2018to_string\u2019 was not\
    \ declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019?\n\
    \   30 |             name = to_string(index);\n      |                    ^~~~~~~~~\n\
    \      |                    std::__cxx11::to_string\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/i"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    std::vector<std::string>\
    \ res;\n    if (arr.size() == 0) {\n        return res;\n    }\n    long min =\
    \ *std::min_element(arr.begin(), arr.end());\n    long max = *std::max_element(arr.begin(),\
    \ arr.end());\n    long mid = (min + max) / 2;\n    long mid2 = mid / 10;\n  \
    \  long mid3 = mid % 10;\n    long mid4 = mid2 / 10;\n    long mid5 = mid2 % 10;\n\
    \    long mid6 = mid3 / 10;\n    long mid7 = mid3 % 10;\n    long mid8 = mid4\
    \ / 10;\n    long mid9 = mid4 % 10;\n    long mid10 = mid5 / 10;\n    long mid11\
    \ = mid5 % 10;\n    long mid12 = mid6 / 10;\n    long mid13 = mid6 % 10;\n   \
    \ long mid14 = mid7 / 10;\n    long mid15 = mid7 % 10;\n    long mid16 = mid8\
    \ / 10;\n    long mid17 = mid8 % 10;\n    long mid18 = mid9 / 10;\n    long mid19\
    \ = mid9 % 10;\n    long mid20 = mid10 / 10;\n    long mid21 = mid10 % 10;\n \
    \   long mid22 = mid11 / 10;\n    long mid23 = mid11 % 10;\n    long mid24 = mid12\
    \ / 10;\n    long mid25 = mid12 % 10;\n    long mid26 = mid13 / 10;\n    long\
    \ mid27 = mid13 % 10;\n    long mid28 = mid14 / 10;\n    long mid29 = mid14 %\
    \ 10;\n    long mid30 = mid15 / 10;\n    long mid31 = mid15 % 10;\n    long mid32\
    \ = mid16 / 10;\n    long mid33 = mid16 % 10;\n    long mid34 = mid17 / 10;\n\
    \    long mid35 = mid17 % 10;\n    long mid36 = mid18 / 10;\n    long mid37 =\
    \ mid18 % 10;\n    long mid38 = mid19 / 10;\n    long mid39 = mid19 % 10;\n  \
    \  long mid40 = mid20 / 10;\n    long mid41 = mid20 % 10;\n    long mid42 = mid21\
    \ / 10;\n    long mid43 = mid21 % 10;\n    long mid44 = mid22 / 10;\n    long\
    \ mid45 = mid22 % 10;\n    long mid46 = mid23 / 10;\n    long mid47 = mid23 %\
    \ 10;\n    long mid48 = mid24 / 10;\n\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({2, 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({1, -1, 55}))) == (std::vector<std::string>({\"\
    One\"})));\n    assert(candidate((std::vector<long>({1, -1, 3, 2}))) == (std::vector<std::string>({\"\
    Three\", \"Two\", \"One\"})));\n    assert(candidate((std::vector<long>({9, 4,\
    \ 8}))) == (std::vector<std::string>({\"Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "tmpnkotyqpc: /tmp/tmpnkotyqpc.cpp:78: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    std::vector<std::string>\
    \ result;\n    long temp;\n    long min = 0;\n    long max = arr.size() - 1;\n\
    \    while (min <= max) {\n        temp = arr[min];\n        while (min <= max\
    \ && arr[min] == temp) {\n            min++;\n        }\n        while (min <=\
    \ max && arr[max] == temp) {\n            max--;\n        }\n        result.push_back(to_string(temp));\n\
    \        min = min + 1;\n        max = max - 1;\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({2,\
    \ 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 55}))) == (std::vector<std::string>({\"One\"})));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 3, 2}))) == (std::vector<std::string>({\"Three\", \"Two\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>({9, 4, 8}))) == (std::vector<std::string>({\"\
    Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpw70z_ehf.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpw70z_ehf.cpp:32:26: error:\
    \ \u2018to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   32 |         result.push_back(to_string(temp));\n      |               \
    \           ^~~~~~~~~\n      |                          std::__cxx11::to_string\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpw70z_ehf.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:6598:3:\
    \ note: \u2018std::__cxx11::to_string\u2019 declared here\n 6598 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    std::vector<std::string>\
    \ res;\n    long temp;\n    for (long i = 0; i < arr.size(); i++) {\n        temp\
    \ = arr[i];\n        if (temp < 1 || temp > 9) {\n            continue;\n    \
    \    }\n        long index = temp - 1;\n        std::string s = std::to_string(index);\n\
    \        res.push_back(s);\n    }\n    return res;\n}\nint main() {\n    auto\
    \ candidate = by_length;\n    assert(candidate((std::vector<long>({2, 1, 1, 4,\
    \ 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 55}))) == (std::vector<std::string>({\"One\"})));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 3, 2}))) == (std::vector<std::string>({\"Three\", \"Two\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>({9, 4, 8}))) == (std::vector<std::string>({\"\
    Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "tmp7pam4kl9: /tmp/tmp7pam4kl9.cpp:35: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    if (arr.size()\
    \ == 0) {\n        return {};\n    }\n    std::vector<long> sorted_arr(arr.begin(),\
    \ arr.end());\n    std::sort(sorted_arr.begin(), sorted_arr.end());\n    std::vector<long>\
    \ reverse_arr(sorted_arr.rbegin(), sorted_arr.rend());\n    for (long i : reverse_arr)\
    \ {\n        if (i <= 9) {\n            std::string s = std::to_string(i);\n \
    \           std::string t = std::to_string(static_cast<int>(i));\n           \
    \ std::string u = std::to_string(static_cast<unsigned int>(i));\n            std::string\
    \ v = std::to_string(static_cast<long long>(i));\n            std::string w =\
    \ std::to_string(static_cast<unsigned long long>(i));\n            std::string\
    \ x = std::to_string(static_cast<float>(i));\n            std::string y = std::to_string(static_cast<double>(i));\n\
    \            std::string z = std::to_string(static_cast<long double>(i));\n  \
    \          std::string a = std::to_string(static_cast<bool>(i));\n           \
    \ std::string b = std::to_string(static_cast<char>(i));\n            std::string\
    \ c = std::to_string(static_cast<signed char>(i));\n            std::string d\
    \ = std::to_string(static_cast<unsigned char>(i));\n            std::string e\
    \ = std::to_string(static_cast<short>(i));\n            std::string f = std::to_string(static_cast<unsigned\
    \ short>(i));\n            std::string g = std::to_string(static_cast<int>(i));\n\
    \            std::string h = std::to_string(static_cast<unsigned int>(i));\n \
    \           std::string i = std::to_string(static_cast<long>(i));\n          \
    \  std::string j = std::to_string(static_cast<unsigned long>(i));\n          \
    \  std::string k = std::to_string(static_cast<long long>(i));\n            std::string\
    \ l = std::to_string(static_cast<unsigned long long>(i));\n            std::string\
    \ m = std::to_string(static_cast<float>(i));\n            std::string n = std::to_string(static_cast<double>(i));\n\
    \            std::string o = std::to_string(static_cast<long double>(i));\n  \
    \          std::string p = std::to_string(static_cast<bool>(i));\n           \
    \ std::string q = std::to_string(static_cast<char>(i));\n            std::string\
    \ r = std::to_string(static_cast<signed char>(i));\n            std::string s\
    \ = std::to_string(static_cast<unsigned char>(i));\n            std::string t\
    \ = std::to_string(static_cast<short>(i));\n            std::string u = std::to_string(static_cast<unsigned\
    \ short>(i));\n            std::string v = std::to_string(static_cast<int>(i));\n\
    \            std::string w = std::to_string(static_cast<unsigned int>(i));\n \
    \           std::string x = std::to_string(static_cast<long>(i));\n          \
    \  std::string y = std::to_string(static_cast<unsigned long>(i));\n          \
    \  std::string z = std::to_string(static_cast<long long>(i));\n            std::string\
    \ a = std::to_string(static_cast<bool>(i));\n            std::string b = std::to_string(static_cast<char>(i));\n\
    \            std::string c = std::to_string(static_cast<signed char>(i\n}\nint\
    \ main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({2,\
    \ 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 55}))) == (std::vector<std::string>({\"One\"})));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 3, 2}))) == (std::vector<std::string>({\"Three\", \"Two\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>({9, 4, 8}))) == (std::vector<std::string>({\"\
    Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvave1lnz.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpvave1lnz.cpp:44:63: error:\
    \ invalid static_cast from type \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } to type \u2018long int\u2019\n   44 |             std::string i = std::to_string(static_cast<long>(i));\n\
    \      |                                                               ^\n/tmp/tmpvave1lnz.cpp:45:72:\
    \ error: invalid static_cast from type \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } to type \u2018long unsigned int\u2019\n   45 |             std::string j = std::to_string(static_cast<unsigned\
    \ long>(i));\n      |                                                        \
    \                ^\n/tmp/tmpvave1lnz.cpp:46:68: error: invalid static_cast from\
    \ type \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } to type \u2018long long int\u2019\n   46 |             std::string k = std::to_string(static_cast<long\
    \ long>(i));\n      |                                                        \
    \            ^\n/tmp/tmpvave1lnz.cpp:47:77: error: invalid static_cast from type\
    \ \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019} to\
    \ type \u2018long long unsigned int\u2019\n   47 |             std::string l =\
    \ std::to_string(static_cast<unsigned long long>(i));\n      |               \
    \                                                              ^\n/tmp/tmpvave1lnz.cpp:48:64:\
    \ error: invalid static_cast from type \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } to type \u2018float\u2019\n   48 |             std::string m = std::to_string(static_cast<float>(i));\n\
    \      |                                                                ^\n/tmp/tmpvave1lnz.cpp:49:65:\
    \ error: invalid static_cast from type \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } to type \u2018double\u2019\n   49 |             std::string n = std::to_string(static_cast<double>(i));\n\
    \      |                                                                 ^\n/tmp/tmpvave1lnz.cpp:50:70:\
    \ error: invalid static_cast from type \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } to type \u2018long do"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    std::vector<std::string>\
    \ res;\n    long temp;\n    for(long i = 0; i < arr.size(); i++) {\n        temp\
    \ = arr[i];\n        if(temp < 1 || temp > 9) {\n            continue;\n     \
    \   }\n        for(long j = i; j < arr.size(); j++) {\n            if(arr[j] <\
    \ temp) {\n                break;\n            }\n        }\n        for(long\
    \ j = i; j < arr.size(); j++) {\n            if(arr[j] == temp) {\n          \
    \      res.push_back(to_string(temp));\n                i = j;\n             \
    \   break;\n            }\n        }\n    }\n    return res;\n}\nint main() {\n\
    \    auto candidate = by_length;\n    assert(candidate((std::vector<long>({2,\
    \ 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 55}))) == (std::vector<std::string>({\"One\"})));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 3, 2}))) == (std::vector<std::string>({\"Three\", \"Two\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>({9, 4, 8}))) == (std::vector<std::string>({\"\
    Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpw9q12xxx.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpw9q12xxx.cpp:34:31: error:\
    \ \u2018to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   34 |                 res.push_back(to_string(temp));\n      |          \
    \                     ^~~~~~~~~\n      |                               std::__cxx11::to_string\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpw9q12xxx.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:6598:3:\
    \ note: \u2018std::__cxx11::to_string\u2019 declared here\n 6598 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    if (arr.empty())\
    \ return {};\n    long n = arr.size();\n    long m = std::min(n, 9);\n    long\
    \ k = std::max(n, m);\n    long ans = k;\n    std::vector<std::string> ret;\n\
    \    for (long i = 0; i < k; i++) {\n        long cur = arr[i];\n        if (cur\
    \ < 1 || cur > 9) continue;\n        long pos = cur - 1;\n        long cnt = 0;\n\
    \        for (long j = 0; j < m; j++) {\n            if (arr[j] == cur) {\n  \
    \              cnt++;\n                if (cnt > 1) break;\n            }\n  \
    \      }\n        if (cnt > 1) {\n            ret.push_back(std::to_string(pos));\n\
    \        }\n    }\n    return ret;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({2, 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({1, -1, 55}))) == (std::vector<std::string>({\"\
    One\"})));\n    assert(candidate((std::vector<long>({1, -1, 3, 2}))) == (std::vector<std::string>({\"\
    Three\", \"Two\", \"One\"})));\n    assert(candidate((std::vector<long>({9, 4,\
    \ 8}))) == (std::vector<std::string>({\"Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpynrrjmss.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpynrrjmss.cpp:22:27: error:\
    \ no matching function for call to \u2018min(long int&, int)\u2019\n   22 |  \
    \   long m = std::min(n, 9);\n      |                           ^\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpynrrjmss.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:198:5:\
    \ note: candidate: \u2018template<class _Tp> constexpr const _Tp& std::min(const\
    \ _Tp&, const _Tp&)\u2019\n  198 |     min(const _Tp& __a, const _Tp& __b)\n \
    \     |     ^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:198:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpynrrjmss.cpp:22:27:\
    \ note:   deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018\
    long int\u2019 and \u2018int\u2019)\n   22 |     long m = std::min(n, 9);\n  \
    \    |                           ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \      "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    std::vector<std::string>\
    \ ans;\n    long temp;\n    long len = arr.size();\n    long mid = len / 2;\n\
    \    long left = 0, right = mid;\n    while (left < right) {\n        temp = arr[left];\n\
    \        while (arr[right] > temp) {\n            right--;\n        }\n      \
    \  arr[right] = temp;\n        while (arr[left] < temp) {\n            left++;\n\
    \        }\n        arr[left] = temp;\n    }\n    ans.push_back(\"One\");\n  \
    \  ans.push_back(\"Two\");\n    ans.push_back(\"Three\");\n    ans.push_back(\"\
    Four\");\n    ans.push_back(\"Five\");\n    ans.push_back(\"Six\");\n    ans.push_back(\"\
    Seven\");\n    ans.push_back(\"Eight\");\n    ans.push_back(\"Nine\");\n    ans.push_back(\"\
    Ten\");\n    ans.push_back(\"Eleven\");\n    ans.push_back(\"Twelve\");\n    ans.push_back(\"\
    Thirteen\");\n    ans.push_back(\"Fourteen\");\n    ans.push_back(\"Fifteen\"\
    );\n    ans.push_back(\"Sixteen\");\n    ans.push_back(\"Seventeen\");\n    ans.push_back(\"\
    Eighteen\");\n    ans.push_back(\"Nineteen\");\n    ans.push_back(\"Twenty\");\n\
    \    ans.push_back(\"Twenty one\");\n    ans.push_back(\"Twenty two\");\n    ans.push_back(\"\
    Twenty three\");\n    ans.push_back(\"Twenty four\");\n    ans.push_back(\"Twenty\
    \ five\");\n    ans.push_back(\"Twenty six\");\n    ans.push_back(\"Twenty seven\"\
    );\n    ans.push_back(\"Twenty eight\");\n    ans.push_back(\"Twenty nine\");\n\
    \    ans.push_back(\"Twenty ten\");\n    ans.push_back(\"Twenty eleven\");\n \
    \   ans.push_back(\"Twenty twelve\");\n    ans.push_back(\"Twenty thirteen\");\n\
    \    ans.push_back(\"Twenty fourteen\");\n    ans.push_back(\"Twenty fifteen\"\
    );\n    ans.push_back(\"Twenty sixteen\");\n    ans.push_back(\"Twenty seventeen\"\
    );\n    ans.push_back(\"Twenty eighteen\");\n    ans.push_back(\"Twenty nineteen\"\
    );\n    ans.push_back(\"Twenty twenty\");\n    ans.\n}\nint main() {\n    auto\
    \ candidate = by_length;\n    assert(candidate((std::vector<long>({2, 1, 1, 4,\
    \ 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 55}))) == (std::vector<std::string>({\"One\"})));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 3, 2}))) == (std::vector<std::string>({\"Three\", \"Two\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>({9, 4, 8}))) == (std::vector<std::string>({\"\
    Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp90ozpkkb.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmp90ozpkkb.cpp:77:1: error:\
    \ expected unqualified-id before \u2018}\u2019 token\n   77 | }\n      | ^\n/tmp/tmp90ozpkkb.cpp:77:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    std::vector<std::string>\
    \ res;\n    if (arr.size() == 0) {\n        return res;\n    }\n    long min =\
    \ *std::min_element(arr.begin(), arr.end());\n    long max = *std::max_element(arr.begin(),\
    \ arr.end());\n    long mid = (min + max) / 2;\n    long mid2 = mid / 10;\n  \
    \  long mid3 = mid % 10;\n    long mid4 = mid2 / 10;\n    long mid5 = mid2 % 10;\n\
    \    long mid6 = mid3 / 10;\n    long mid7 = mid3 % 10;\n    long mid8 = mid4\
    \ / 10;\n    long mid9 = mid4 % 10;\n    long mid10 = mid5 / 10;\n    long mid11\
    \ = mid5 % 10;\n    long mid12 = mid6 / 10;\n    long mid13 = mid6 % 10;\n   \
    \ long mid14 = mid7 / 10;\n    long mid15 = mid7 % 10;\n    long mid16 = mid8\
    \ / 10;\n    long mid17 = mid8 % 10;\n    long mid18 = mid9 / 10;\n    long mid19\
    \ = mid9 % 10;\n    long mid20 = mid10 / 10;\n    long mid21 = mid10 % 10;\n \
    \   long mid22 = mid11 / 10;\n    long mid23 = mid11 % 10;\n    long mid24 = mid12\
    \ / 10;\n    long mid25 = mid12 % 10;\n    long mid26 = mid13 / 10;\n    long\
    \ mid27 = mid13 % 10;\n    long mid28 = mid14 / 10;\n    long mid29 = mid14 %\
    \ 10;\n    long mid30 = mid15 / 10;\n    long mid31 = mid15 % 10;\n    long mid32\
    \ = mid16 / 10;\n    long mid33 = mid16 % 10;\n    long mid34 = mid17 / 10;\n\
    \    long mid35 = mid17 % 10;\n    long mid36 = mid18 / 10;\n    long mid37 =\
    \ mid18 % 10;\n    long mid38 = mid19 / 10;\n    long mid39 = mid19 % 10;\n  \
    \  long mid40 = mid20 / 10;\n    long mid41 = mid20 % 10;\n    long mid42 = mid21\
    \ / 10;\n    long mid43 = mid21 % 10;\n    long mid44 = mid22 / 10;\n    long\
    \ mid45 = mid22 % 10;\n    long mid46 = mid23 / 10;\n    long mid47 = mid23 %\
    \ 10;\n    long mid48 = mid24 / 10;\n\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({2, 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({1, -1, 55}))) == (std::vector<std::string>({\"\
    One\"})));\n    assert(candidate((std::vector<long>({1, -1, 3, 2}))) == (std::vector<std::string>({\"\
    Three\", \"Two\", \"One\"})));\n    assert(candidate((std::vector<long>({9, 4,\
    \ 8}))) == (std::vector<std::string>({\"Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "tmp9l4xcjpw: /tmp/tmp9l4xcjpw.cpp:78: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    std::vector<std::string>\
    \ result;\n    if (arr.empty()) {\n        return result;\n    }\n    long min\
    \ = *std::min_element(arr.begin(), arr.end());\n    long max = *std::max_element(arr.begin(),\
    \ arr.end());\n    long mid = (min + max) / 2;\n    long mid_index = 0;\n    long\
    \ mid_value = arr[mid_index];\n    long mid_length = max - min;\n    long mid_length_sum\
    \ = std::accumulate(arr.begin(), arr.end(), 0);\n    while (mid_index < arr.size())\
    \ {\n        if (arr[mid_index] == mid_value) {\n            mid_index++;\n  \
    \          mid_value = arr[mid_index];\n            mid = mid_index;\n       \
    \     mid_value = arr[mid_index];\n            mid = mid_index;\n            mid_value\
    \ = arr[mid_index];\n            mid = mid_index;\n            mid_value = arr[mid_index];\n\
    \            mid = mid_index;\n            mid_value = arr[mid_index];\n     \
    \       mid = mid_index;\n            mid_value = arr[mid_index];\n          \
    \  mid = mid_index;\n            mid_value = arr[mid_index];\n            mid\
    \ = mid_index;\n            mid_value = arr[mid_index];\n            mid = mid_index;\n\
    \            mid_value = arr[mid_index];\n            mid = mid_index;\n     \
    \       mid_value = arr[mid_index];\n            mid = mid_index;\n          \
    \  mid_value = arr[mid_index];\n            mid = mid_index;\n            mid_value\
    \ = arr[mid_index];\n            mid = mid_index;\n            mid_value = arr[mid_index];\n\
    \            mid = mid_index;\n            mid_value = arr[mid_index];\n     \
    \       mid = mid_index;\n            mid_value = arr[mid_index];\n          \
    \  mid = mid_index;\n            mid_value = arr[mid_index];\n            mid\
    \ = mid_index;\n            mid_value = arr[mid_index];\n            mid = mid_index;\n\
    \            mid_value = arr[mid_index];\n            mid = mid_index;\n     \
    \       mid_value = arr[mid_index];\n            mid = mid_index;\n          \
    \  mid_value = arr[mid_index];\n            mid = mid_index;\n            mid_value\
    \ = arr[mid_index];\n            mid = mid_index;\n            mid_value = arr[mid_index];\n\
    \            mid = mid_index;\n            mid_value = arr[mid_index];\n     \
    \       mid = mid_index;\n            mid_value = arr[mid_index];\n          \
    \  mid = mid_index;\n            mid_value = arr[mid_index];\n            mid\
    \ = mid_index;\n            mid_value = arr[mid_index];\n            mid = mid_index;\n\
    \            mid_value = arr[mid_index];\n\n}\nint main() {\n    auto candidate\
    \ = by_length;\n    assert(candidate((std::vector<long>({2, 1, 1, 4, 5, 8, 2,\
    \ 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"Four\", \"Three\"\
    , \"Two\", \"Two\", \"One\", \"One\"})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 55}))) == (std::vector<std::string>({\"One\"})));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 3, 2}))) == (std::vector<std::string>({\"Three\", \"Two\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>({9, 4, 8}))) == (std::vector<std::string>({\"\
    Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpwrp8gkd8.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpwrp8gkd8.cpp:89:12: error:\
    \ a function-definition is not allowed here before \u2018{\u2019 token\n   89\
    \ | int main() {\n      |            ^\n/tmp/tmpwrp8gkd8.cpp:96:1: error: expected\
    \ \u2018}\u2019 at end of input\n   96 | }\n      | ^\n/tmp/tmpwrp8gkd8.cpp:31:36:\
    \ note: to match this \u2018{\u2019\n   31 |     while (mid_index < arr.size())\
    \ {\n      |                                    ^\n/tmp/tmpwrp8gkd8.cpp:96:1:\
    \ error: expected \u2018}\u2019 at end of input\n   96 | }\n      | ^\n/tmp/tmpwrp8gkd8.cpp:19:59:\
    \ note: to match this \u2018{\u2019\n   19 | std::vector<std::string> by_length(std::vector<long>\
    \ arr) {\n      |                                                           ^\n\
    /tmp/tmpwrp8gkd8.cpp:96:1: warning: control reaches end of non-void function [-Wreturn-type]\n\
    \   96 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    // Your code\
    \ here\n    std::vector<std::string> result;\n    long temp;\n    long min = 1;\n\
    \    long max = 9; \n    long mid = 0;\n    long count = 0;\n    long index =\
    \ 0;\n    long sum = 0;\n    long temp2 = 0;\n    long temp3 = 0;\n    long temp4\
    \ = 0;\n    long temp5 = 0;\n    long temp6 = 0;\n    long temp7 = 0;\n    long\
    \ temp8 = 0;\n    long temp9 = 0;\n    long temp10 = 0;\n    long temp11 = 0;\n\
    \    long temp12 = 0;\n    long temp13 = 0;\n    long temp14 = 0;\n    long temp15\
    \ = 0;\n    long temp16 = 0;\n    long temp17 = 0;\n    long temp18 = 0;\n   \
    \ long temp19 = 0;\n    long temp20 = 0;\n    long temp21 = 0;\n    long temp22\
    \ = 0;\n    long temp23 = 0;\n    long temp24 = 0;\n    long temp25 = 0;\n   \
    \ long temp26 = 0;\n    long temp27 = 0;\n    long temp28 = 0;\n    long temp29\
    \ = 0;\n    long temp30 = 0;\n    long temp31 = 0;\n    long temp32 = 0;\n   \
    \ long temp33 = 0;\n    long temp34 = 0;\n    long temp35 = 0;\n    long temp36\
    \ = 0;\n    long temp37 = 0;\n    long temp38 = 0;\n    long temp39 = 0;\n   \
    \ long temp40 = 0;\n    long temp41 = 0;\n    long temp42 = 0;\n    long temp43\
    \ = 0;\n    long temp44 = 0;\n    long temp45 = 0;\n    long temp46 = 0;\n   \
    \ long temp47 = 0;\n    long temp48 = 0;\n    long temp49 = 0;\n    long temp50\
    \ = 0;\n    long temp51 = 0;\n    long temp52 = 0;\n    long temp53 = 0;\n   \
    \ long temp54 = 0;\n    long temp55 = 0;\n    long temp56 = 0;\n    long temp57\
    \ = 0;\n    long temp58 = 0;\n    long temp59 = 0;\n    long temp60 = 0;\n   \
    \ long temp61 = 0;\n    long temp62 = 0;\n    long temp63 = 0;\n    long temp64\
    \ = 0;\n    long temp65 = 0;\n    long temp66 = 0;\n    long temp67 = 0;\n   \
    \ long temp68 = 0;\n    long temp69 = 0;\n    long temp70 = 0;\n    long temp71\
    \ = 0;\n    long temp72 = 0;\n    long temp73 = 0;\n    long temp74 = 0;\n   \
    \ long temp75 = 0;\n    long temp76 = 0;\n    long temp77 = 0;\n    long temp78\
    \ = 0;\n    long temp79 = 0;\n    long temp\n}\nint main() {\n    auto candidate\
    \ = by_length;\n    assert(candidate((std::vector<long>({2, 1, 1, 4, 5, 8, 2,\
    \ 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"Four\", \"Three\"\
    , \"Two\", \"Two\", \"One\", \"One\"})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 55}))) == (std::vector<std::string>({\"One\"})));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 3, 2}))) == (std::vector<std::string>({\"Three\", \"Two\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>({9, 4, 8}))) == (std::vector<std::string>({\"\
    Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1s0nxrt3.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmp1s0nxrt3.cpp:108:1: error:\
    \ expected initializer before \u2018}\u2019 token\n  108 | }\n      | ^\n/tmp/tmp1s0nxrt3.cpp:108:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    std::vector<std::string>\
    \ res;\n    if (arr.size() == 0) {\n        return res;\n    }\n    long max_len\
    \ = 0, min_len = INT_MAX;\n    for (long i : arr) {\n        if (max_len < i)\
    \ {\n            max_len = i;\n        }\n        if (min_len > i) {\n       \
    \     min_len = i;\n        }\n    }\n    long diff = max_len - min_len;\n   \
    \ long mid = min_len + diff / 2;\n    long start = mid - diff / 2;\n    long end\
    \ = mid + diff / 2;\n    long start = std::max(start, 0);\n    long end = std::min(end,\
    \ 9);\n    long mid = std::max(mid - 1, 0);\n    long mid2 = std::min(mid + 1,\
    \ 0);\n    long mid3 = std::max(mid + 1, 9);\n    long mid4 = std::min(mid + 2,\
    \ 9);\n    long mid5 = std::max(mid + 3, 9);\n    long mid6 = std::min(mid + 4,\
    \ 9);\n    long mid7 = std::max(mid + 5, 9);\n    long mid8 = std::min(mid + 6,\
    \ 9);\n    long mid9 = std::max(mid + 7, 9);\n    long mid10 = std::min(mid +\
    \ 8, 9);\n    long mid11 = std::max(mid + 9, 9);\n    long mid12 = std::min(mid\
    \ + 10, 9);\n    long mid13 = std::max(mid + 11, 9);\n    long mid14 = std::min(mid\
    \ + 12, 9);\n    long mid15 = std::max(mid + 13, 9);\n    long mid16 = std::min(mid\
    \ + 14, 9);\n    long mid17 = std::max(mid + 15, 9);\n    long mid18 = std::min(mid\
    \ + 16, 9);\n    long mid19 = std::max(mid + 17, 9);\n    long mid20 = std::min(mid\
    \ + 18, 9);\n    long mid21 = std::max(mid + 19, 9);\n    long mid22 = std::min(mid\
    \ + 20, 9);\n    long mid23 = std::max(mid + 21, 9);\n    long mid24 = std::min(mid\
    \ + 22, 9);\n    long mid25 = std::max(mid + 23, 9);\n    long mid26 = std::min(mid\
    \ + 24, 9);\n    long mid27 = std::max(mid + 25, 9);\n    long mid28 = std::min(mid\
    \ + 26, 9);\n    long mid29 = std::max(mid + 27, 9);\n    long mid30 = std::min(mid\
    \ + 28, 9);\n    long mid31 = std::max(mid + 29, 9);\n    long mid32 = std::min(mid\
    \ + 30, 9);\n    long mid33 = std::max(mid + 31, 9);\n    long mid34 = std::min(mid\
    \ + 32, 9);\n    long mid35\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({2, 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({1, -1, 55}))) == (std::vector<std::string>({\"\
    One\"})));\n    assert(candidate((std::vector<long>({1, -1, 3, 2}))) == (std::vector<std::string>({\"\
    Three\", \"Two\", \"One\"})));\n    assert(candidate((std::vector<long>({9, 4,\
    \ 8}))) == (std::vector<std::string>({\"Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpo8bt81o0.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpo8bt81o0.cpp:37:10: error:\
    \ redeclaration of \u2018long int start\u2019\n   37 |     long start = std::max(start,\
    \ 0);\n      |          ^~~~~\n/tmp/tmpo8bt81o0.cpp:35:10: note: \u2018long int\
    \ start\u2019 previously declared here\n   35 |     long start = mid - diff /\
    \ 2;\n      |          ^~~~~\n/tmp/tmpo8bt81o0.cpp:37:35: error: no matching function\
    \ for call to \u2018max(long int&, int)\u2019\n   37 |     long start = std::max(start,\
    \ 0);\n      |                                   ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpo8bt81o0.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:222:5:\
    \ note: candidate: \u2018template<class _Tp> constexpr const _Tp& std::max(const\
    \ _Tp&, const _Tp&)\u2019\n  222 |     max(const _Tp& __a, const _Tp& __b)\n \
    \     |     ^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:222:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpo8bt81o0.cpp:37:35:\
    \ note:   deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018\
    long int\u2019 and \u2018int\u2019)\n   37 |     long start = std::max(start,\
    \ 0);\n      |                                   ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    std::vector<std::string>\
    \ res;\n    if (arr.size() == 0) {\n        return res;\n    }\n    long n = arr.size();\n\
    \    long m = n / 10;\n    long r = n % 10;\n    long temp;\n    long i;\n   \
    \ for (i = 0; i < m; i++) {\n        temp = arr[i];\n        arr[i] = arr[m];\n\
    \        arr[m] = temp;\n    }\n    for (i = m; i < n; i++) {\n        temp =\
    \ arr[i];\n        arr[i] = arr[n - 1 - i];\n        arr[n - 1 - i] = temp;\n\
    \    }\n    for (i = 0; i < r; i++) {\n        temp = arr[i];\n        arr[i]\
    \ = arr[n - 1 - i];\n        arr[n - 1 - i] = temp;\n    }\n    for (i = 0; i\
    \ < n; i++) {\n        res.push_back(std::to_string(arr[i]));\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({2,\
    \ 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 55}))) == (std::vector<std::string>({\"One\"})));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 3, 2}))) == (std::vector<std::string>({\"Three\", \"Two\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>({9, 4, 8}))) == (std::vector<std::string>({\"\
    Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "tmpm23gd220: /tmp/tmpm23gd220.cpp:51: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    std::vector<std::string>\
    \ res;\n    long long ans = 0, temp = 0;\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        temp = arr[i];\n        while (temp > 0) {\n            ans\
    \ = ans * 10 + temp % 10;\n            temp /= 10;\n        }\n        res.push_back(to_string(ans));\n\
    \        ans = 0;\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = by_length;\n    assert(candidate((std::vector<long>({2, 1, 1, 4, 5, 8, 2,\
    \ 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"Four\", \"Three\"\
    , \"Two\", \"Two\", \"One\", \"One\"})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 55}))) == (std::vector<std::string>({\"One\"})));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 3, 2}))) == (std::vector<std::string>({\"Three\", \"Two\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>({9, 4, 8}))) == (std::vector<std::string>({\"\
    Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpyaaor0r8.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpyaaor0r8.cpp:28:23: error:\
    \ \u2018to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   28 |         res.push_back(to_string(ans));\n      |                   \
    \    ^~~~~~~~~\n      |                       std::__cxx11::to_string\nIn file\
    \ included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpyaaor0r8.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:6598:3:\
    \ note: \u2018std::__cxx11::to_string\u2019 declared here\n 6598 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    std::vector<std::string>\
    \ res;\n    if (arr.size() == 0) {\n        return res;\n    }\n    long max =\
    \ *std::max_element(arr.begin(), arr.end());\n    long min = *std::min_element(arr.begin(),\
    \ arr.end());\n    long mid = max / 10;\n    long left = max - 10 * mid;\n   \
    \ long right = max - 10 * mid + 10;\n    long mid2 = min / 10;\n    long left2\
    \ = min - 10 * mid2;\n    long right2 = min - 10 * mid2 + 10;\n    long mid3 =\
    \ max / 100;\n    long left3 = max - 100 * mid3;\n    long right3 = max - 100\
    \ * mid3 + 100;\n    long mid4 = min / 100;\n    long left4 = min - 100 * mid4;\n\
    \    long right4 = min - 100 * mid4 + 100;\n    long mid5 = max / 1000;\n    long\
    \ left5 = max - 1000 * mid5;\n    long right5 = max - 1000 * mid5 + 1000;\n  \
    \  long mid6 = min / 1000;\n    long left6 = min - 1000 * mid6;\n    long right6\
    \ = min - 1000 * mid6 + 1000;\n    long mid7 = max / 100000;\n    long left7 =\
    \ max - 100000 * mid7;\n    long right7 = max - 100000 * mid7 + 100000;\n    long\
    \ mid8 = min / 100000;\n    long left8 = min - 100000 * mid8;\n    long right8\
    \ = min - 100000 * mid8 + 100000;\n    long mid9 = max / 1000000;\n    long left9\
    \ = max - 1000000 * mid9;\n    long right9 = max - 1000000 * mid9 + 1000000;\n\
    \    long mid10 = min / 1000000;\n    long left10 = min - 1000000 * mid10;\n \
    \   long right10 = min - 1000000 * mid10 + 1000000;\n    long mid11 = max / 10000000;\n\
    \    long left11 = max - 10000000 * mid11;\n    long right11 = max - 10000000\
    \ * mid11 + 10000000;\n    long mid12 = min / 10000000;\n    long left12 = min\
    \ - 10000000 * mid12;\n    long right12 = min - 10000000 * mid12 + 10000000;\n\
    \    long mid13 = max / 1000000000;\n    long left13 = max - 1000000000 * mid13;\n\
    \    long right13 = max - 1000000000 * mid13 + 1000000000;\n    long mid14 = min\
    \ / 1000000000;\n    long left14 = min - 1000000000 * mid14;\n    long right14\
    \ = min - 1000000000 * mid14 + 1000000000;\n    long \n}\nint main() {\n    auto\
    \ candidate = by_length;\n    assert(candidate((std::vector<long>({2, 1, 1, 4,\
    \ 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 55}))) == (std::vector<std::string>({\"One\"})));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 3, 2}))) == (std::vector<std::string>({\"Three\", \"Two\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>({9, 4, 8}))) == (std::vector<std::string>({\"\
    Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpk3ra2g1_.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpk3ra2g1_.cpp:69:1: error:\
    \ expected unqualified-id before \u2018}\u2019 token\n   69 | }\n      | ^\n/tmp/tmpk3ra2g1_.cpp:69:1:\
    \ warning: control reaches end of non-void function [-Wreturn-type]\n   69 | }\n\
    \      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    std::vector<std::string>\
    \ result;\n    long max = std::accumulate(arr.begin(), arr.end(), 0);\n    long\
    \ min = std::accumulate(arr.begin(), arr.end(), 1);\n    long mid = max / 2;\n\
    \    long mid2 = mid / 10;\n    long mid3 = mid2 / 10;\n    long mid4 = mid3 /\
    \ 10;\n    long mid5 = mid4 / 10;\n    long mid6 = mid5 / 10;\n    long mid7 =\
    \ mid6 / 10;\n    long mid8 = mid7 / 10;\n    long mid9 = mid8 / 10;\n    long\
    \ mid10 = mid9 / 10;\n    long mid11 = mid10 / 10;\n    long mid12 = mid11 / 10;\n\
    \    long mid13 = mid12 / 10;\n    long mid14 = mid13 / 10;\n    long mid15 =\
    \ mid14 / 10;\n    long mid16 = mid15 / 10;\n    long mid17 = mid16 / 10;\n  \
    \  long mid18 = mid17 / 10;\n    long mid19 = mid18 / 10;\n    long mid20 = mid19\
    \ / 10;\n    long mid21 = mid20 / 10;\n    long mid22 = mid21 / 10;\n    long\
    \ mid23 = mid22 / 10;\n    long mid24 = mid23 / 10;\n    long mid25 = mid24 /\
    \ 10;\n    long mid26 = mid25 / 10;\n    long mid27 = mid26 / 10;\n    long mid28\
    \ = mid27 / 10;\n    long mid29 = mid28 / 10;\n    long mid30 = mid29 / 10;\n\
    \    long mid31 = mid30 / 10;\n    long mid32 = mid31 / 10;\n    long mid33 =\
    \ mid32 / 10;\n    long mid34 = mid33 / 10;\n    long mid35 = mid34 / 10;\n  \
    \  long mid36 = mid35 / 10;\n    long mid37 = mid36 / 10;\n    long mid38 = mid37\
    \ / 10;\n    long mid39 = mid38 / 10;\n    long mid40 = mid39 / 10;\n    long\
    \ mid41 = mid40 / 10;\n    long mid42 = mid41 / 10;\n    long mid43 = mid42 /\
    \ 10;\n    long mid44 = mid43 / 10;\n    long mid45 = mid44 / 10;\n    long mid46\
    \ = mid45 / 10;\n    long mid47 = mid46 / 10;\n    long mid48 = mid47 / 10;\n\
    \    long mid49 = mid48 / 10;\n    long \n}\nint main() {\n    auto candidate\
    \ = by_length;\n    assert(candidate((std::vector<long>({2, 1, 1, 4, 5, 8, 2,\
    \ 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"Four\", \"Three\"\
    , \"Two\", \"Two\", \"One\", \"One\"})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 55}))) == (std::vector<std::string>({\"One\"})));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 3, 2}))) == (std::vector<std::string>({\"Three\", \"Two\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>({9, 4, 8}))) == (std::vector<std::string>({\"\
    Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpesz055pv.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpesz055pv.cpp:73:1: error:\
    \ expected unqualified-id before \u2018}\u2019 token\n   73 | }\n      | ^\n/tmp/tmpesz055pv.cpp:73:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    std::vector<std::string>\
    \ res;\n    long long sum = 0;\n    for (auto i : arr) {\n        sum += i;\n\
    \    }\n    long long mod = sum % 10;\n    if (mod == 0) {\n        res.push_back(\"\
    One\");\n        sum -= mod;\n    }\n    mod = sum % 10;\n    if (mod == 0) {\n\
    \        res.push_back(\"Two\");\n        sum -= mod;\n    }\n    mod = sum %\
    \ 10;\n    if (mod == 0) {\n        res.push_back(\"Three\");\n        sum -=\
    \ mod;\n    }\n    mod = sum % 10;\n    if (mod == 0) {\n        res.push_back(\"\
    Four\");\n        sum -= mod;\n    }\n    mod = sum % 10;\n    if (mod == 0) {\n\
    \        res.push_back(\"Five\");\n        sum -= mod;\n    }\n    mod = sum %\
    \ 10;\n    if (mod == 0) {\n        res.push_back(\"Six\");\n        sum -= mod;\n\
    \    }\n    mod = sum % 10;\n    if (mod == 0) {\n        res.push_back(\"Seven\"\
    );\n        sum -= mod;\n    }\n    mod = sum % 10;\n    if (mod == 0) {\n   \
    \     res.push_back(\"Eight\");\n        sum -= mod;\n    }\n    mod = sum % 10;\n\
    \    if (mod == 0) {\n        res.push_back(\"Nine\");\n        sum -= mod;\n\
    \    }\n    mod = sum % 10;\n    if (mod == 0) {\n        res.push_back(\"Zero\"\
    );\n        sum -= mod;\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = by_length;\n    assert(candidate((std::vector<long>({2, 1, 1, 4, 5, 8, 2,\
    \ 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"Four\", \"Three\"\
    , \"Two\", \"Two\", \"One\", \"One\"})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 55}))) == (std::vector<std::string>({\"One\"})));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 3, 2}))) == (std::vector<std::string>({\"Three\", \"Two\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>({9, 4, 8}))) == (std::vector<std::string>({\"\
    Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "tmpo6qlms9t: /tmp/tmpo6qlms9t.cpp:79: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    std::vector<std::string>\
    \ res;\n    long n = arr.size();\n    long m = std::min(n, 9);\n    long k = std::max(n,\
    \ m);\n    long count = 0;\n    for (long i = 0; i < k; i++) {\n        count\
    \ += arr[i];\n    }\n    if (count == 0) {\n        return res;\n    }\n    long\
    \ x = count / 10;\n    long y = count % 10;\n    std::vector<std::string> arr2;\n\
    \    for (long i = 0; i < k; i++) {\n        arr2.push_back(arr[i] + to_string(arr[i]));\n\
    \    }\n    arr2.push_back(to_string(y));\n    arr2.push_back(to_string(x));\n\
    \    for (long i = 0; i < k; i++) {\n        arr2.push_back(arr2[i]);\n    }\n\
    \    std::vector<std::string> arr3;\n    for (long i = 0; i < k; i++) {\n    \
    \    arr3.push_back(arr2[i]);\n    }\n    for (long i = 0; i < k; i++) {\n   \
    \     arr3.push_back(to_string(arr3[i]));\n    }\n    for (long i = 0; i < k;\
    \ i++) {\n        arr3.push_back(arr3[i]);\n    }\n    for (long i = 0; i < k;\
    \ i++) {\n        arr3.push_back(to_string(arr3[i]));\n    }\n    for (long i\
    \ = 0; i < k; i++) {\n        arr3.push_back(arr3[i]);\n    }\n    for (long i\
    \ = 0; i < k; i++) {\n        arr3.push_back(arr3[i]);\n    }\n    for (long i\
    \ = 0; i < k; i++) {\n        arr3.push_back(arr3[i]);\n    }\n    for (long i\
    \ = 0; i < k; i++) {\n        arr3.push_back(arr3[i]);\n    }\n    for (long i\
    \ = 0; i < k; i++) {\n        arr3.push_back(arr3[i]);\n    }\n    for (long i\
    \ = 0; i < k; i++) {\n        arr3.push_back(arr3[i]);\n    }\n    for (long i\
    \ = 0; i < k; i++) {\n        arr3.push_back(arr3[i]);\n    }\n    for (long i\
    \ = 0; i < k; i++) {\n        arr3.push_back(arr3[i]);\n    }\n    for (long i\
    \ = 0; i < k; i++) {\n        arr3.push_back(arr3[i]);\n    }\n    for (long i\
    \ = 0; i < k; i++) {\n        arr3.push_back(arr3[i]);\n    }\n    for (long i\
    \ = 0; i < k; i++) {\n        arr3.push_back(arr3[i]);\n    }\n    for (long i\
    \ = 0; i < k; i++) {\n        arr3.push_back(arr3[i]);\n    }\n    for (long i\
    \ = 0; i < k; i++) {\n        arr3.push_back(arr3[i]);\n    }\n    for (long i\
    \ = 0; i < k; i++) {\n        arr3.push_back(arr3[i]);\n    }\n    for (long i\
    \ = 0; i < k; i++) {\n        arr3.push_back(arr3[i]);\n    }\n    for (long i\
    \ = 0; i < k; i++) {\n        arr3.push_back(arr3[i]);\n    }\n    for (long i\
    \ = 0; i < k; i++) {\n        arr3.push_back(arr3[i]);\n    }\n    for (long i\
    \ = 0; i < k; i++) {\n        arr3.push_back(arr3[i]);\n    }\n    for (long i\
    \ = 0; i < k; i++) {\n        arr3.push_back(arr3[i]);\n    }\n    for (long i\
    \ = 0; i < k; i++) {\n\n}\nint main() {\n    auto candidate = by_length;\n   \
    \ assert(candidate((std::vector<long>({2, 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({1, -1, 55}))) == (std::vector<std::string>({\"\
    One\"})));\n    assert(candidate((std::vector<long>({1, -1, 3, 2}))) == (std::vector<std::string>({\"\
    Three\", \"Two\", \"One\"})));\n    assert(candidate((std::vector<long>({9, 4,\
    \ 8}))) == (std::vector<std::string>({\"Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpulq5mig7.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpulq5mig7.cpp:22:27: error:\
    \ no matching function for call to \u2018min(long int&, int)\u2019\n   22 |  \
    \   long m = std::min(n, 9);\n      |                           ^\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpulq5mig7.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:198:5:\
    \ note: candidate: \u2018template<class _Tp> constexpr const _Tp& std::min(const\
    \ _Tp&, const _Tp&)\u2019\n  198 |     min(const _Tp& __a, const _Tp& __b)\n \
    \     |     ^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:198:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpulq5mig7.cpp:22:27:\
    \ note:   deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018\
    long int\u2019 and \u2018int\u2019)\n   22 |     long m = std::min(n, 9);\n  \
    \    |                           ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \      "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    // Your code\
    \ here\n    std::vector<std::string> res;\n    long temp;\n    long min = std::numeric_limits<long>::min();\n\
    \    long max = std::numeric_limits<long>::max();\n    long mid = 0;\n    for\
    \ (long i = 0; i < arr.size(); i++) {\n        mid = (min + max) / 2;\n      \
    \  if (arr[i] < mid) {\n            temp = arr[i];\n            arr[i] = arr[mid];\n\
    \            arr[mid] = temp;\n        }\n    }\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        mid = (min + max) / 2;\n        if (arr[i] < mid) {\n      \
    \      temp = arr[i];\n            arr[i] = arr[mid];\n            arr[mid] =\
    \ temp;\n        }\n    }\n    for (long i = 0; i < arr.size(); i++) {\n     \
    \   mid = (min + max) / 2;\n        if (arr[i] < mid) {\n            temp = arr[i];\n\
    \            arr[i] = arr[mid];\n            arr[mid] = temp;\n        }\n   \
    \ }\n    for (long i = 0; i < arr.size(); i++) {\n        mid = (min + max) /\
    \ 2;\n        if (arr[i] < mid) {\n            temp = arr[i];\n            arr[i]\
    \ = arr[mid];\n            arr[mid] = temp;\n        }\n    }\n    for (long i\
    \ = 0; i < arr.size(); i++) {\n        mid = (min + max) / 2;\n        if (arr[i]\
    \ < mid) {\n            temp = arr[i];\n            arr[i] = arr[mid];\n     \
    \       arr[mid] = temp;\n        }\n    }\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        mid = (min + max) / 2;\n        if (arr[i] < mid) {\n      \
    \      temp = arr[i];\n            arr[i] = arr[mid];\n            arr[mid] =\
    \ temp;\n        }\n    }\n    for (long i = 0; i < arr.size(); i++) {\n     \
    \   mid = (min + max) / 2;\n        if (arr[i] < mid) {\n            temp = arr[i];\n\
    \            arr[i] = arr[mid];\n            arr[mid] = temp;\n        }\n   \
    \ }\n    for (long i = 0; i < arr.size(); i++) {\n        mid = (min + max) /\
    \ 2;\n        if (arr[i] < mid) {\n            temp = arr[i];\n            arr[i]\
    \ = arr[mid];\n            arr[mid] = temp;\n        }\n    }\n    for (long i\
    \ = 0; i < arr.size(); i++) {\n        mid = (min + max) / 2;\n        if (arr[i]\
    \ < mid) {\n            temp = arr[i];\n            arr[i] = arr[mid];\n     \
    \       arr[mid] = temp;\n        }\n    }\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        mid = (min + max) / 2;\n        if (arr[i] < mid) {\n      \
    \      temp = arr[i];\n            arr[i] = arr[mid];\n            arr[mid] =\
    \ temp;\n        }\n    }\n    for (long i = 0; i < arr.size(); i++) {\n     \
    \   \n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({2,\
    \ 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 55}))) == (std::vector<std::string>({\"One\"})));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 3, 2}))) == (std::vector<std::string>({\"Three\", \"Two\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>({9, 4, 8}))) == (std::vector<std::string>({\"\
    Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp26q5leiw.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmp26q5leiw.cpp:109:12: error:\
    \ a function-definition is not allowed here before \u2018{\u2019 token\n  109\
    \ | int main() {\n      |            ^\n/tmp/tmp26q5leiw.cpp:116:1: error: expected\
    \ \u2018}\u2019 at end of input\n  116 | }\n      | ^\n/tmp/tmp26q5leiw.cpp:19:59:\
    \ note: to match this \u2018{\u2019\n   19 | std::vector<std::string> by_length(std::vector<long>\
    \ arr) {\n      |                                                           ^\n\
    /tmp/tmp26q5leiw.cpp:116:1: warning: no return statement in function returning\
    \ non-void [-Wreturn-type]\n  116 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    std::vector<std::string>\
    \ res;\n    long n = arr.size();\n    if (n > 0) {\n        long mid = n / 2;\n\
    \        long left = arr[0];\n        long right = arr[mid];\n        long mid1\
    \ = mid - 1;\n        long mid2 = mid + 1;\n        long mid3 = mid * 2;\n   \
    \     long mid4 = mid * 3;\n        long mid5 = mid * 4;\n        long mid6 =\
    \ mid * 5;\n        long mid7 = mid * 6;\n        long mid8 = mid * 7;\n     \
    \   long mid9 = mid * 8;\n        long mid10 = mid * 9;\n        long mid11 =\
    \ mid * 10;\n        long mid12 = mid * 11;\n        long mid13 = mid * 12;\n\
    \        long mid14 = mid * 13;\n        long mid15 = mid * 14;\n        long\
    \ mid16 = mid * 15;\n        long mid17 = mid * 16;\n        long mid18 = mid\
    \ * 17;\n        long mid19 = mid * 18;\n        long mid20 = mid * 19;\n    \
    \    long mid21 = mid * 20;\n        long mid22 = mid * 21;\n        long mid23\
    \ = mid * 22;\n        long mid24 = mid * 23;\n        long mid25 = mid * 24;\n\
    \        long mid26 = mid * 25;\n        long mid27 = mid * 26;\n        long\
    \ mid28 = mid * 27;\n        long mid29 = mid * 28;\n        long mid30 = mid\
    \ * 29;\n        long mid31 = mid * 30;\n        long mid32 = mid * 31;\n    \
    \    long mid33 = mid * 32;\n        long mid34 = mid * 33;\n        long mid35\
    \ = mid * 34;\n        long mid36 = mid * 35;\n        long mid37 = mid * 36;\n\
    \        long mid38 = mid * 37;\n        long mid39 = mid * 38;\n        long\
    \ mid40 = mid * 39;\n        long mid41 = mid * 40;\n        long mid42 = mid\
    \ * 41;\n        long mid43 = mid * 42;\n        long mid44 = mid * 43;\n    \
    \    long mid45 = mid * 44;\n        long mid46 = mid * 45;\n        long mid47\
    \ = mid * 46;\n        long mid48 = mid * 47;\n        long mid49 = mid * 48;\n\
    \n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({2,\
    \ 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 55}))) == (std::vector<std::string>({\"One\"})));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 3, 2}))) == (std::vector<std::string>({\"Three\", \"Two\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>({9, 4, 8}))) == (std::vector<std::string>({\"\
    Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpewza0brs.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpewza0brs.cpp:77:12: error:\
    \ a function-definition is not allowed here before \u2018{\u2019 token\n   77\
    \ | int main() {\n      |            ^\n/tmp/tmpewza0brs.cpp:84:1: error: expected\
    \ \u2018}\u2019 at end of input\n   84 | }\n      | ^\n/tmp/tmpewza0brs.cpp:19:59:\
    \ note: to match this \u2018{\u2019\n   19 | std::vector<std::string> by_length(std::vector<long>\
    \ arr) {\n      |                                                           ^\n\
    /tmp/tmpewza0brs.cpp:84:1: warning: no return statement in function returning\
    \ non-void [-Wreturn-type]\n   84 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    std::vector<std::string>\
    \ res;\n    if (arr.size() == 0) {\n        return res;\n    }\n    long min =\
    \ arr[0];\n    long max = arr[0];\n    for (long i : arr) {\n        if (i < min)\
    \ {\n            min = i;\n        }\n        if (i > max) {\n            max\
    \ = i;\n        }\n    }\n    long mid = (min + max) / 2;\n    long mid2 = mid\
    \ / 10;\n    long mid3 = mid % 10;\n    long mid4 = mid2 / 10;\n    long mid5\
    \ = mid2 % 10;\n    long mid6 = mid3 / 10;\n    long mid7 = mid3 % 10;\n    long\
    \ mid8 = mid4 / 10;\n    long mid9 = mid4 % 10;\n    long mid10 = mid5 / 10;\n\
    \    long mid11 = mid5 % 10;\n    long mid12 = mid6 / 10;\n    long mid13 = mid6\
    \ % 10;\n    long mid14 = mid7 / 10;\n    long mid15 = mid7 % 10;\n    long mid16\
    \ = mid8 / 10;\n    long mid17 = mid8 % 10;\n    long mid18 = mid9 / 10;\n   \
    \ long mid19 = mid9 % 10;\n    long mid20 = mid10 / 10;\n    long mid21 = mid10\
    \ % 10;\n    long mid22 = mid11 / 10;\n    long mid23 = mid11 % 10;\n    long\
    \ mid24 = mid12 / 10;\n    long mid25 = mid12 % 10;\n    long mid26 = mid13 /\
    \ 10;\n    long mid27 = mid13 % 10;\n    long mid28 = mid14 / 10;\n    long mid29\
    \ = mid14 % 10;\n    long mid30 = mid15 / 10;\n    long mid31 = mid15 % 10;\n\
    \    long mid32 = mid16 / 10;\n    long mid33 = mid16 % 10;\n    long mid34 =\
    \ mid17 / 10;\n    long mid35 = mid17 % 10;\n    long mid36 = mid18 / 10;\n  \
    \  long mid37 = mid18 % 10;\n    long mid38 = mid19 / 10;\n    long mid39 = mid19\
    \ % 10;\n    long mid40 = mid20 / 10;\n    long mid41 = mid20 % 10;\n    long\
    \ mid42 = mid21 / 10;\n    long mid43 = mid21 % 10;\n    long mid44 = mid22 /\
    \ 10;\n    long mid45 = mid22 % 10;\n    long mid46 = mid23 / 10;\n    long mid47\
    \ = \n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({2,\
    \ 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 55}))) == (std::vector<std::string>({\"One\"})));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 3, 2}))) == (std::vector<std::string>({\"Three\", \"Two\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>({9, 4, 8}))) == (std::vector<std::string>({\"\
    Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8td7whm0.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmp8td7whm0.cpp:81:1: error:\
    \ expected primary-expression before \u2018}\u2019 token\n   81 | }\n      | ^\n\
    /tmp/tmp8td7whm0.cpp:81:1: warning: control reaches end of non-void function [-Wreturn-type]\n\
    \   81 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    std::vector<std::string>\
    \ res;\n    if (arr.size() == 0) {\n        return res;\n    }\n    long max =\
    \ *std::max_element(arr.begin(), arr.end());\n    long min = *std::min_element(arr.begin(),\
    \ arr.end());\n    long mid = max / 10;\n    long remainder = max % 10;\n    long\
    \ start = mid - 1;\n    long end = mid + 1;\n    long mid2 = min / 10;\n    long\
    \ remainder2 = min % 10;\n    long start2 = mid2 - 1;\n    long end2 = mid2 +\
    \ 1;\n    long mid3 = mid / 100;\n    long remainder3 = mid % 100;\n    long start3\
    \ = mid3 - 1;\n    long end3 = mid3 + 1;\n    long mid4 = mid / 1000;\n    long\
    \ remainder4 = mid % 1000;\n    long start4 = mid4 - 1;\n    long end4 = mid4\
    \ + 1;\n    long mid5 = mid / 100000;\n    long remainder5 = mid % 100000;\n \
    \   long start5 = mid5 - 1;\n    long end5 = mid5 + 1;\n    long mid6 = mid /\
    \ 1000000;\n    long remainder6 = mid % 1000000;\n    long start6 = mid6 - 1;\n\
    \    long end6 = mid6 + 1;\n    long mid7 = mid / 10000000;\n    long remainder7\
    \ = mid % 10000000;\n    long start7 = mid7 - 1;\n    long end7 = mid7 + 1;\n\
    \    long mid8 = mid / 1000000000;\n    long remainder8 = mid % 1000000000;\n\
    \    long start8 = mid8 - 1;\n    long end8 = mid8 + 1;\n    long mid9 = mid /\
    \ 1000000000000;\n    long remainder9 = mid % 1000000000000;\n    long start9\
    \ = mid9 - 1;\n    long end9 = mid9 + 1;\n    long mid10 = mid / 1000000000000000;\n\
    \    long remainder10 = mid % 1000000000000000;\n    long start10 = mid10 - 1;\n\
    \    long end10 = mid10 + 1;\n    long mid11 = mid / 1000000000000000000;\n  \
    \  long remainder11 = mid % 1000000000000000000;\n    long start11 = mid11 - 1;\n\
    \    long end11 = mid11 + 1;\n    long mid12 = mid / 10000000000000000000;\n \
    \   long remainder12 = mid % 10000000000000000000;\n    long start12 = mid12 -\
    \ 1;\n    long end12 = mid12 + 1;\n    long mid13 = mid / 1000000000000000000000;\n\
    \    long remainder\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({2,\
    \ 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 55}))) == (std::vector<std::string>({\"One\"})));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 3, 2}))) == (std::vector<std::string>({\"Three\", \"Two\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>({9, 4, 8}))) == (std::vector<std::string>({\"\
    Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpij0apxa6.cpp:70:24: warning: integer constant is so large that\
    \ it is unsigned\n   70 |     long mid12 = mid / 10000000000000000000;\n     \
    \ |                        ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpij0apxa6.cpp:71:30: warning:\
    \ integer constant is so large that it is unsigned\n   71 |     long remainder12\
    \ = mid % 10000000000000000000;\n      |                              ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpij0apxa6.cpp:74:24: warning: integer constant is too large for its type\n\
    \   74 |     long mid13 = mid / 1000000000000000000000;\n      |             \
    \           ^~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpij0apxa6.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpij0apxa6.cpp:76:1: error:\
    \ expected initializer before \u2018}\u2019 token\n   76 | }\n      | ^\n/tmp/tmpij0apxa6.cpp:76:1:\
    \ warning: control reaches end of non-void function [-Wreturn-type]\n   76 | }\n\
    \      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    std::vector<std::string>\
    \ res;\n    if (arr.size() == 0) {\n        return res;\n    }\n    long min_val\
    \ = arr[0];\n    long max_val = arr[0];\n    for (long i : arr) {\n        if\
    \ (i < min_val) {\n            min_val = i;\n        }\n        if (i > max_val)\
    \ {\n            max_val = i;\n        }\n    }\n    long mid = min_val + max_val\
    \ / 2;\n    long left_len = max_val - min_val;\n    long right_len = arr.size()\
    \ - mid;\n    std::vector<std::string> left_res;\n    std::vector<std::string>\
    \ right_res;\n    std::string left_name = \"One\";\n    std::string right_name\
    \ = \"One\";\n    if (left_len < 10) {\n        left_name = \"One\";\n    }\n\
    \    if (right_len < 10) {\n        right_name = \"One\";\n    }\n    if (left_len\
    \ < 5) {\n        left_name = \"Two\";\n    }\n    if (right_len < 5) {\n    \
    \    right_name = \"Two\";\n    }\n    if (left_len < 3) {\n        left_name\
    \ = \"Three\";\n    }\n    if (right_len < 3) {\n        right_name = \"Three\"\
    ;\n    }\n    if (left_len < 2) {\n        left_name = \"Four\";\n    }\n    if\
    \ (right_len < 2) {\n        right_name = \"Four\";\n    }\n    if (left_len <\
    \ 1) {\n        left_name = \"Five\";\n    }\n    if (right_len < 1) {\n     \
    \   right_name = \"Five\";\n    }\n    if (left_len < 1) {\n        left_name\
    \ = \"Six\";\n    }\n    if (right_len < 1) {\n        right_name = \"Six\";\n\
    \    }\n    if (left_len < 1) {\n        left_name = \"Seven\";\n    }\n    if\
    \ (right_len < 1) {\n        right_name = \"Seven\";\n    }\n    if (left_len\
    \ < 1) {\n        left_name = \"Eight\";\n    }\n    if (right_len < 1) {\n  \
    \      right_name = \"Eight\";\n    }\n    if (left_len < 1) {\n        left_name\
    \ = \"Nine\";\n    }\n    if (right_len < 1) {\n        right_name = \"Nine\"\
    ;\n    }\n    left_res.push_back(left_name);\n    right_res.push_back(right_name);\n\
    \    long left_index = min_val;\n    long right_index = mid + 1;\n    while (left_index\
    \ < max_val) {\n        long left_val = arr[left_index];\n        long right_val\
    \ = arr[right_index];\n        if (left_val < right_val) {\n            left_res.push_back(left_name);\n\
    \            left_index++;\n        } else {\n            right_res.push_back(right_name);\n\
    \            right_index++;\n        }\n    }\n    res.insert(res.end(), left_res.begin(),\
    \ left_res.end());\n    res.insert(res.end(), right_res.begin(), right_res.end());\n\
    \    return res;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({2,\
    \ 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 55}))) == (std::vector<std::string>({\"One\"})));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 3, 2}))) == (std::vector<std::string>({\"Three\", \"Two\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>({9, 4, 8}))) == (std::vector<std::string>({\"\
    Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "tmp0q4rw5n2: /tmp/tmp0q4rw5n2.cpp:116: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    std::vector<std::string>\
    \ res;\n    long long n = arr.size();\n    if (n <= 0) {\n        return res;\n\
    \    }\n    long long m = n / 10;\n    long long r = n % 10;\n    long long l\
    \ = 0;\n    long long r1 = 0, r2 = 0;\n    long long l1 = 0, l2 = 0;\n    long\
    \ long l3 = 0, l4 = 0;\n    long long l5 = 0, l6 = 0;\n    long long l7 = 0, l8\
    \ = 0;\n    long long l9 = 0;\n    for (long long i = 0; i < m; i++) {\n     \
    \   l = arr[i];\n        l1 = l / 10;\n        l2 = l % 10;\n        l3 = l1 *\
    \ 10 + l2;\n        l4 = l3 * 10 + r1;\n        l5 = l4 * 10 + r2;\n        l6\
    \ = l5 * 10 + l9;\n        l7 = l6 * 10 + l8;\n        l8 = l7 * 10 + l6;\n  \
    \      l9 = l8 * 10 + l5;\n        res.push_back(\"One\");\n        res.push_back(\"\
    Two\");\n        res.push_back(\"Three\");\n        res.push_back(\"Four\");\n\
    \        res.push_back(\"Five\");\n        res.push_back(\"Six\");\n        res.push_back(\"\
    Seven\");\n        res.push_back(\"Eight\");\n        res.push_back(\"Nine\");\n\
    \        res.push_back(l9);\n    }\n    if (r != 0) {\n        l1 = arr[m];\n\
    \        l2 = l1 / 10;\n        l3 = l1 % 10;\n        l4 = l2 * 10 + l3;\n  \
    \      l5 = l4 * 10 + r1;\n        l6 = l5 * 10 + r2;\n        l7 = l6 * 10 +\
    \ l9;\n        l8 = l7 * 10 + l8;\n        l9 = l8 * 10 + l5;\n        res.push_back(\"\
    One\");\n        res.push_back(\"Two\");\n        res.push_back(\"Three\");\n\
    \        res.push_back(\"Four\");\n        res.push_back(\"Five\");\n        res.push_back(\"\
    Six\");\n        res.push_back(\"Seven\");\n        res.push_back(\"Eight\");\n\
    \        res.push_back(\"Nine\");\n        res.push_back(l9);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({2,\
    \ 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 55}))) == (std::vector<std::string>({\"One\"})));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 3, 2}))) == (std::vector<std::string>({\"Three\", \"Two\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>({9, 4, 8}))) == (std::vector<std::string>({\"\
    Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpl0t1ru8u.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpl0t1ru8u.cpp:54:25: error:\
    \ no matching function for call to \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >::push_back(long long int&)\u2019\n   54 |         res.push_back(l9);\n   \
    \   |                         ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmpl0t1ru8u.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018long long int\u2019 to\
    \ \u2018const value_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019\
    }\n 1184 |       push_back(const value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>; _Alloc\
    \ = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::value_type\
    \ = std::__cxx11::basic_string<char>]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018long long int\u2019 to\
    \ \u2018std::vector<std::__cxx11::basic_string<char> >::value_type&&\u2019 {aka\
    \ \u2018std::__cxx11::basic_string<char>&&\u2019}\n 1"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    std::vector<std::string>\
    \ res;\n    if (arr.size() == 0) {\n        return res;\n    }\n    long min =\
    \ *std::min_element(arr.begin(), arr.end());\n    long max = *std::max_element(arr.begin(),\
    \ arr.end());\n    long mid = min + (max - min) / 2;\n    long mid2 = mid / 10;\n\
    \    long mid3 = mid % 10;\n    long mid4 = mid2 / 10;\n    long mid5 = mid2 %\
    \ 10;\n    long mid6 = mid3 / 10;\n    long mid7 = mid3 % 10;\n    long mid8 =\
    \ mid4 / 10;\n    long mid9 = mid4 % 10;\n    long mid10 = mid5 / 10;\n    long\
    \ mid11 = mid5 % 10;\n    long mid12 = mid6 / 10;\n    long mid13 = mid6 % 10;\n\
    \    long mid14 = mid7 / 10;\n    long mid15 = mid7 % 10;\n    long mid16 = mid8\
    \ / 10;\n    long mid17 = mid8 % 10;\n    long mid18 = mid9 / 10;\n    long mid19\
    \ = mid9 % 10;\n    long mid20 = mid10 / 10;\n    long mid21 = mid10 % 10;\n \
    \   long mid22 = mid11 / 10;\n    long mid23 = mid11 % 10;\n    long mid24 = mid12\
    \ / 10;\n    long mid25 = mid12 % 10;\n    long mid26 = mid13 / 10;\n    long\
    \ mid27 = mid13 % 10;\n    long mid28 = mid14 / 10;\n    long mid29 = mid14 %\
    \ 10;\n    long mid30 = mid15 / 10;\n    long mid31 = mid15 % 10;\n    long mid32\
    \ = mid16 / 10;\n    long mid33 = mid16 % 10;\n    long mid34 = mid17 / 10;\n\
    \    long mid35 = mid17 % 10;\n    long mid36 = mid18 / 10;\n    long mid37 =\
    \ mid18 % 10;\n    long mid38 = mid19 / 10;\n    long mid39 = mid19 % 10;\n  \
    \  long mid40 = mid20 / 10;\n    long mid41 = mid20 % 10;\n    long mid42 = mid21\
    \ / 10;\n    long mid43 = mid21 % 10;\n    long mid44 = mid22 / 10;\n    long\
    \ mid45 = mid22 % 10;\n    long mid46 = mid23 / 10;\n    long mid47 = mid23 %\
    \ 10;\n    long mid48 = mid24 / 10;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({2, 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({1, -1, 55}))) == (std::vector<std::string>({\"\
    One\"})));\n    assert(candidate((std::vector<long>({1, -1, 3, 2}))) == (std::vector<std::string>({\"\
    Three\", \"Two\", \"One\"})));\n    assert(candidate((std::vector<long>({9, 4,\
    \ 8}))) == (std::vector<std::string>({\"Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "tmpfn82tdde: /tmp/tmpfn82tdde.cpp:77: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    std::vector<std::string>\
    \ res;\n    long temp;\n    for (long i : arr) {\n        if (i >= 1 && i <= 9)\
    \ {\n            temp = i;\n            while (temp > 0) {\n                res.push_back(\"\
    One\");\n                temp--;\n            }\n            while (temp > 9)\
    \ {\n                res.push_back(\"Nine\");\n                temp -= 10;\n \
    \           }\n            while (temp > 0) {\n                res.push_back(\"\
    Two\");\n                temp--;\n            }\n            while (temp > 9)\
    \ {\n                res.push_back(\"Three\");\n                temp -= 10;\n\
    \            }\n            while (temp > 0) {\n                res.push_back(\"\
    Four\");\n                temp--;\n            }\n            while (temp > 9)\
    \ {\n                res.push_back(\"Five\");\n                temp -= 10;\n \
    \           }\n            while (temp > 0) {\n                res.push_back(\"\
    Six\");\n                temp--;\n            }\n            while (temp > 9)\
    \ {\n                res.push_back(\"Seven\");\n                temp -= 10;\n\
    \            }\n            while (temp > 0) {\n                res.push_back(\"\
    Eight\");\n                temp--;\n            }\n            while (temp > 9)\
    \ {\n                res.push_back(\"Nine\");\n                temp -= 10;\n \
    \           }\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = by_length;\n    assert(candidate((std::vector<long>({2, 1, 1, 4, 5, 8, 2,\
    \ 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"Four\", \"Three\"\
    , \"Two\", \"Two\", \"One\", \"One\"})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 55}))) == (std::vector<std::string>({\"One\"})));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 3, 2}))) == (std::vector<std::string>({\"Three\", \"Two\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>({9, 4, 8}))) == (std::vector<std::string>({\"\
    Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "tmplgpy2de0: /tmp/tmplgpy2de0.cpp:71: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    if (arr.size()\
    \ == 0) {\n        return {};\n    }\n    std::vector<long> sorted_arr(arr.begin(),\
    \ arr.end());\n    std::sort(sorted_arr.begin(), sorted_arr.end());\n    std::vector<long>\
    \ reverse_arr(sorted_arr.rbegin(), sorted_arr.rend());\n    std::reverse(reverse_arr.begin(),\
    \ reverse_arr.end());\n    std::vector<std::string> result;\n    for (long i :\
    \ reverse_arr) {\n        result.push_back(i == 1 ? One_name : Two_name);\n  \
    \  }\n    return result;\n}\nint main() {\n    auto candidate = by_length;\n \
    \   assert(candidate((std::vector<long>({2, 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({1, -1, 55}))) == (std::vector<std::string>({\"\
    One\"})));\n    assert(candidate((std::vector<long>({1, -1, 3, 2}))) == (std::vector<std::string>({\"\
    Three\", \"Two\", \"One\"})));\n    assert(candidate((std::vector<long>({9, 4,\
    \ 8}))) == (std::vector<std::string>({\"Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpg7cd1_dm.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpg7cd1_dm.cpp:29:35: error:\
    \ \u2018One_name\u2019 was not declared in this scope; did you mean \u2018rename\u2019\
    ?\n   29 |         result.push_back(i == 1 ? One_name : Two_name);\n      |  \
    \                                 ^~~~~~~~\n      |                          \
    \         rename\n/tmp/tmpg7cd1_dm.cpp:29:46: error: \u2018Two_name\u2019 was\
    \ not declared in this scope\n   29 |         result.push_back(i == 1 ? One_name\
    \ : Two_name);\n      |                                              ^~~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    std::vector<std::string>\
    \ result;\n    long n = arr.size();\n    long max_len = 0, min_len = 0;\n    for\
    \ (long i = 0; i < n; i++) {\n        if (max_len < arr[i]) {\n            max_len\
    \ = arr[i];\n        }\n        if (min_len > arr[i]) {\n            min_len =\
    \ arr[i];\n        }\n    }\n    long max_len = max_len;\n    long min_len = min_len;\n\
    \    long mid = max_len >> 1;\n    long left_len = max_len - mid;\n    long right_len\
    \ = min_len - mid;\n    long left_mid = min_len - (left_len << 1);\n    long right_mid\
    \ = max_len - (right_len << 1);\n    long left_len = left_len;\n    long right_len\
    \ = right_len;\n    long left_mid = left_mid;\n    long right_mid = right_mid;\n\
    \    long left_len = left_len;\n    long right_len = right_len;\n    long left_mid\
    \ = left_mid;\n    long right_mid = right_mid;\n    long left_len = left_len;\n\
    \    long right_len = right_len;\n    long left_mid = left_mid;\n    long right_mid\
    \ = right_mid;\n    long left_len = left_len;\n    long right_len = right_len;\n\
    \    long left_mid = left_mid;\n    long right_mid = right_mid;\n    long left_len\
    \ = left_len;\n    long right_len = right_len;\n    long left_mid = left_mid;\n\
    \    long right_mid = right_mid;\n    long left_len = left_len;\n    long right_len\
    \ = right_len;\n    long left_mid = left_mid;\n    long right_mid = right_mid;\n\
    \    long left_len = left_len;\n    long right_len = right_len;\n    long left_mid\
    \ = left_mid;\n    long right_mid = right_mid;\n    long left_len = left_len;\n\
    \    long right_len = right_len;\n    long left_mid = left_mid;\n    long right_mid\
    \ = right_mid;\n    long left_len = left_len;\n    long right_len = right_len;\n\
    \    long left_mid = left_mid;\n    long right_mid = right_mid;\n    long left_len\
    \ = left_len;\n    long right_len = right_len;\n    long left_mid = left_mid;\n\
    \    long right_mid = right_mid;\n    long left_len = left_len;\n    long right_len\
    \ = right_len;\n    long left_mid = left_mid;\n    long right_mid = right_mid;\n\
    \    long left_len = left_len;\n    long right_len = right_len;\n    long left_mid\
    \ = left_mid;\n    long right_mid = right_mid;\n    long left_len = left_len;\n\
    }\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({2,\
    \ 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 55}))) == (std::vector<std::string>({\"One\"})));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 3, 2}))) == (std::vector<std::string>({\"Three\", \"Two\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>({9, 4, 8}))) == (std::vector<std::string>({\"\
    Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpy7l6mqa5.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpy7l6mqa5.cpp:31:10: error:\
    \ redeclaration of \u2018long int max_len\u2019\n   31 |     long max_len = max_len;\n\
    \      |          ^~~~~~~\n/tmp/tmpy7l6mqa5.cpp:22:10: note: \u2018long int max_len\u2019\
    \ previously declared here\n   22 |     long max_len = 0, min_len = 0;\n     \
    \ |          ^~~~~~~\n/tmp/tmpy7l6mqa5.cpp:32:10: error: redeclaration of \u2018\
    long int min_len\u2019\n   32 |     long min_len = min_len;\n      |         \
    \ ^~~~~~~\n/tmp/tmpy7l6mqa5.cpp:22:23: note: \u2018long int min_len\u2019 previously\
    \ declared here\n   22 |     long max_len = 0, min_len = 0;\n      |         \
    \              ^~~~~~~\n/tmp/tmpy7l6mqa5.cpp:38:10: error: redeclaration of \u2018\
    long int left_len\u2019\n   38 |     long left_len = left_len;\n      |      \
    \    ^~~~~~~~\n/tmp/tmpy7l6mqa5.cpp:34:10: note: \u2018long int left_len\u2019\
    \ previously declared here\n   34 |     long left_len = max_len - mid;\n     \
    \ |          ^~~~~~~~\n/tmp/tmpy7l6mqa5.cpp:39:10: error: redeclaration of \u2018\
    long int right_len\u2019\n   39 |     long right_len = right_len;\n      |   \
    \       ^~~~~~~~~\n/tmp/tmpy7l6mqa5.cpp:35:10: note: \u2018long int right_len\u2019\
    \ previously declared here\n   35 |     long right_len = min_len - mid;\n    \
    \  |          ^~~~~~~~~\n/tmp/tmpy7l6mqa5.cpp:40:10: error: redeclaration of \u2018\
    long int left_mid\u2019\n   40 |     long left_mid = left_mid;\n      |      \
    \    ^~~~~~~~\n/tmp/tmpy7l6mqa5.cpp:36:10: note: \u2018long int left_mid\u2019\
    \ previously declared here\n   36 |     long left_mid = min_len - (left_len <<\
    \ 1);\n      |          ^~~~~~~~\n/tmp/tmpy7l6mqa5.cpp:41:10: error: redeclaration\
    \ of \u2018long int right_mid\u2019\n   41 |     long right_mid = right_mid;\n\
    \      |          ^~~~~~~~~\n/tmp/tmpy7l6mqa5.cpp:37:10: note: \u2018long int\
    \ right_mid\u2019 previously declared here\n   37 |     long right_mid = max_len\
    \ - (right_len << 1);\n      |          ^~~~~~~~~\n/tmp/tmpy7l6mqa5.cpp:42:10:\
    \ error: redeclaration of \u2018long int left_len\u2019\n   42 |     long left_len\
    \ = left_len;\n      |          ^~~~~~~~\n/tmp/tmpy7l6mqa5.cpp:34:10: note: \u2018\
    long int left_le"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    if (arr.empty())\
    \ {\n        return {};\n    }\n    long min_val = arr[0];\n    long max_val =\
    \ arr[0];\n    for (auto i : arr) {\n        min_val = std::min(min_val, i);\n\
    \        max_val = std::max(max_val, i);\n    }\n    std::vector<std::string>\
    \ res;\n    for (long i = min_val; i <= max_val; i++) {\n        res.push_back(\"\
    One\");\n        res.push_back(\"Two\");\n        res.push_back(\"Three\");\n\
    \        res.push_back(\"Four\");\n        res.push_back(\"Five\");\n        res.push_back(\"\
    Six\");\n        res.push_back(\"Seven\");\n        res.push_back(\"Eight\");\n\
    \        res.push_back(\"Nine\");\n        res.push_back(i);\n    }\n    std::reverse(arr.begin(),\
    \ arr.end());\n    for (auto i : arr) {\n        std::string temp = std::to_string(i);\n\
    \        std::string name = res.at(std::distance(arr.begin(), std::find(arr.begin(),\
    \ arr.end(), i)));\n        res.at(std::distance(arr.begin(), std::find(arr.begin(),\
    \ arr.end(), i))) = name;\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = by_length;\n    assert(candidate((std::vector<long>({2, 1, 1, 4, 5, 8, 2,\
    \ 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"Four\", \"Three\"\
    , \"Two\", \"Two\", \"One\", \"One\"})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 55}))) == (std::vector<std::string>({\"One\"})));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 3, 2}))) == (std::vector<std::string>({\"Three\", \"Two\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>({9, 4, 8}))) == (std::vector<std::string>({\"\
    Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2ivlg67v.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmp2ivlg67v.cpp:40:24: error:\
    \ no matching function for call to \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >::push_back(long int&)\u2019\n   40 |         res.push_back(i);\n      |  \
    \                      ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmp2ivlg67v.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018long int\u2019 to \u2018\
    const value_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019\
    }\n 1184 |       push_back(const value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>; _Alloc\
    \ = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::value_type\
    \ = std::__cxx11::basic_string<char>]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018long int\u2019 to \u2018\
    std::vector<std::__cxx11::basic_string<char> >::value_type&&\u2019 {aka \u2018\
    std::__cxx11::basic_string<char>&&\u2019}\n 1200 |       push_"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    std::vector<std::string>\
    \ res;\n    if (arr.size() == 0) {\n        return res;\n    }\n    long n = arr.size();\n\
    \    long m = n / 10;\n    long r = n % 10;\n    long temp;\n    for (long i =\
    \ 0; i < m; i++) {\n        temp = arr[i];\n        arr[i] = arr[n - 1 - i];\n\
    \        arr[n - 1 - i] = temp;\n    }\n    long start = 0;\n    long end = m\
    \ - 1;\n    while (start < end) {\n        long mid = start + (end - start) /\
    \ 2;\n        long midVal = arr[mid];\n        if (midVal < 10) {\n          \
    \  arr[mid] = arr[mid] + 10;\n            arr[n - 1 - mid] = arr[n - 1 - mid]\
    \ - 10;\n            start = mid + 1;\n        } else if (midVal > 9) {\n    \
    \        arr[mid] = arr[mid] - 10;\n            arr[n - 1 - mid] = arr[n - 1 -\
    \ mid] + 10;\n            end = mid - 1;\n        } else {\n            start\
    \ = mid + 1;\n            end = mid - 1;\n        }\n    }\n    long temp;\n \
    \   for (long i = 0; i < r; i++) {\n        temp = arr[i];\n        arr[i] = arr[n\
    \ - 1 - i];\n        arr[n - 1 - i] = temp;\n    }\n    for (long i = 0; i < n;\
    \ i++) {\n        res.push_back(arr[i]);\n    }\n    return res;\n}\nint main()\
    \ {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({2,\
    \ 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 55}))) == (std::vector<std::string>({\"One\"})));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 3, 2}))) == (std::vector<std::string>({\"Three\", \"Two\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>({9, 4, 8}))) == (std::vector<std::string>({\"\
    Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpgl0fg3l0.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpgl0fg3l0.cpp:51:10: error:\
    \ redeclaration of \u2018long int temp\u2019\n   51 |     long temp;\n      |\
    \          ^~~~\n/tmp/tmpgl0fg3l0.cpp:27:10: note: \u2018long int temp\u2019 previously\
    \ declared here\n   27 |     long temp;\n      |          ^~~~\n/tmp/tmpgl0fg3l0.cpp:58:29:\
    \ error: no matching function for call to \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >::push_back(__gnu_cxx::__alloc_traits<std::allocator<long int>, long int>::value_type&)\u2019\
    \n   58 |         res.push_back(arr[i]);\n      |                            \
    \ ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmpgl0fg3l0.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<long\
    \ int>, long int>::value_type\u2019 {aka \u2018long int\u2019} to \u2018const\
    \ value_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n\
    \ 1184 |       push_back(const value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>; _Alloc\
    \ = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp,"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    std::vector<std::string>\
    \ result;\n    long n = arr.size();\n    long m = n / 10;\n    long r = n % 10;\n\
    \    long temp;\n    for (long i = 0; i < m; i++) {\n        temp = arr[i];\n\
    \        arr[i] = arr[m];\n        arr[m] = temp;\n    }\n    for (long i = 0;\
    \ i < r; i++) {\n        temp = arr[i];\n        arr[i] = arr[n - 1 - i];\n  \
    \      arr[n - 1 - i] = temp;\n    }\n    for (long i = 0; i < n; i++) {\n   \
    \     temp = arr[i];\n        arr[i] = arr[n - 1 - i];\n        arr[n - 1 - i]\
    \ = temp;\n    }\n    for (long i = 0; i < m; i++) {\n        result.push_back(std::to_string(arr[i]));\n\
    \    }\n    for (long i = 0; i < r; i++) {\n        result.push_back(std::to_string(arr[n\
    \ - 1 - i]));\n    }\n    for (long i = 0; i < n; i++) {\n        result.push_back(std::to_string(arr[n\
    \ - 1 - i]));\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = by_length;\n    assert(candidate((std::vector<long>({2, 1, 1, 4, 5, 8, 2,\
    \ 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"Four\", \"Three\"\
    , \"Two\", \"Two\", \"One\", \"One\"})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 55}))) == (std::vector<std::string>({\"One\"})));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 3, 2}))) == (std::vector<std::string>({\"Three\", \"Two\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>({9, 4, 8}))) == (std::vector<std::string>({\"\
    Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "tmpgkxpux_i: /tmp/tmpgkxpux_i.cpp:53: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    std::vector<std::string>\
    \ result;\n    long temp;\n    long min = std::numeric_limits<long>::min();\n\
    \    long max = std::numeric_limits<long>::max();\n    long mid = min + (max -\
    \ min) / 2;\n    for (long i : arr) {\n        if (i <= mid) {\n            temp\
    \ = i;\n        } else {\n            temp = mid;\n            mid = i;\n    \
    \    }\n        result.push_back(by_length(temp));\n    }\n    if (arr.size()\
    \ == 0) {\n        return result;\n    }\n    if (arr.size() == 1) {\n       \
    \ result.push_back(\"One\");\n        return result;\n    }\n    long mid2 = mid\
    \ + (max - min) / 2;\n    for (long i : arr) {\n        if (i <= mid2) {\n   \
    \         temp = i;\n        } else {\n            temp = mid2;\n            mid2\
    \ = i;\n        }\n        result.push_back(by_length(temp));\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({2,\
    \ 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 55}))) == (std::vector<std::string>({\"One\"})));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 3, 2}))) == (std::vector<std::string>({\"Three\", \"Two\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>({9, 4, 8}))) == (std::vector<std::string>({\"\
    Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0v1yc_zw.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmp0v1yc_zw.cpp:32:36: error:\
    \ could not convert \u2018temp\u2019 from \u2018long int\u2019 to \u2018std::vector<long\
    \ int>\u2019\n   32 |         result.push_back(by_length(temp));\n      |    \
    \                                ^~~~\n      |                               \
    \     |\n      |                                    long int\n/tmp/tmp0v1yc_zw.cpp:49:36:\
    \ error: could not convert \u2018temp\u2019 from \u2018long int\u2019 to \u2018\
    std::vector<long int>\u2019\n   49 |         result.push_back(by_length(temp));\n\
    \      |                                    ^~~~\n      |                    \
    \                |\n      |                                    long int\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    std::vector<std::string>\
    \ res;\n    long long n = arr.size();\n    if (n == 0) {\n        return res;\n\
    \    }\n    long long m = n / 10;\n    long long r = n % 10;\n    long long start\
    \ = 1, end = m;\n    while (start < m) {\n        while (end < n) {\n        \
    \    if (arr[end] < 9) {\n                res.push_back(to_string(arr[end]));\n\
    \                end++;\n            } else {\n                long long temp\
    \ = arr[end];\n                arr[end] = arr[start];\n                arr[start]\
    \ = temp;\n                start++;\n                end++;\n            }\n \
    \       }\n        start = end;\n        end = m;\n    }\n    while (end < n)\
    \ {\n        res.push_back(to_string(arr[end]));\n        end++;\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({2,\
    \ 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 55}))) == (std::vector<std::string>({\"One\"})));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 3, 2}))) == (std::vector<std::string>({\"Three\", \"Two\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>({9, 4, 8}))) == (std::vector<std::string>({\"\
    Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6xixp6to.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmp6xixp6to.cpp:31:31: error:\
    \ \u2018to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   31 |                 res.push_back(to_string(arr[end]));\n      |      \
    \                         ^~~~~~~~~\n      |                               std::__cxx11::to_string\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp6xixp6to.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:6598:3:\
    \ note: \u2018std::__cxx11::to_string\u2019 declared here\n 6598 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n/tmp/tmp6xixp6to.cpp:45:23: error: \u2018\
    to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   45 |         res.push_back(to_string(arr[end]));\n      |              \
    \         ^~~~~~~~~\n      |                       std::__cxx11::to_string\nIn\
    \ file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-s"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    // Your code\
    \ here\n    std::vector<std::string> result;\n    long n = arr.size();\n    long\
    \ m = 1;\n    long sum = 0;\n    long temp;\n    long i;\n    long j;\n    long\
    \ k;\n    long l;\n    long sum2;\n    long sum3;\n    long sum4;\n    long sum5;\n\
    \    long sum6;\n    long sum7;\n    long sum8;\n    long sum9;\n    long sum10;\n\
    \    long sum11;\n    long sum12;\n    long sum13;\n    long sum14;\n    long\
    \ sum15;\n    long sum16;\n    long sum17;\n    long sum18;\n    long sum19;\n\
    \    long sum20;\n    long sum21;\n    long sum22;\n    long sum23;\n    long\
    \ sum24;\n    long sum25;\n    long sum26;\n    long sum27;\n    long sum28;\n\
    \    long sum29;\n    long sum30;\n    long sum31;\n    long sum32;\n    long\
    \ sum33;\n    long sum34;\n    long sum35;\n    long sum36;\n    long sum37;\n\
    \    long sum38;\n    long sum39;\n    long sum40;\n    long sum41;\n    long\
    \ sum42;\n    long sum43;\n    long sum44;\n    long sum45;\n    long sum46;\n\
    \    long sum47;\n    long sum48;\n    long sum49;\n    long sum50;\n    long\
    \ sum51;\n    long sum52;\n    long sum53;\n    long sum54;\n    long sum55;\n\
    \    long sum56;\n    long sum57;\n    long sum58;\n    long sum59;\n    long\
    \ sum60;\n    long sum61;\n    long sum62;\n    long sum63;\n    long sum64;\n\
    \    long sum65;\n    long sum66;\n    long sum67;\n    long sum68;\n    long\
    \ sum69;\n    long sum70;\n    long sum71;\n    long sum72;\n    long sum73;\n\
    \    long sum74;\n    long sum75;\n    long sum76;\n    long sum77;\n    long\
    \ sum78;\n    long sum79;\n    long sum80;\n    long sum81;\n    long \n}\nint\
    \ main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({2,\
    \ 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 55}))) == (std::vector<std::string>({\"One\"})));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 3, 2}))) == (std::vector<std::string>({\"Three\", \"Two\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>({9, 4, 8}))) == (std::vector<std::string>({\"\
    Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmph48dbox2.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmph48dbox2.cpp:111:1: error:\
    \ expected unqualified-id before \u2018}\u2019 token\n  111 | }\n      | ^\n/tmp/tmph48dbox2.cpp:111:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    // Write your\
    \ code here\n    std::vector<std::string> result;\n    long temp;\n    long min\
    \ = 0;\n    long max = arr.size() - 1;\n    while (min <= max) {\n        temp\
    \ = arr[min];\n        while (min <= max && arr[min] == temp) {\n            min++;\n\
    \        }\n        while (min <= max && arr[max] == temp) {\n            max--;\n\
    \        }\n        result.push_back(to_string(temp));\n        temp = arr[min];\n\
    \        while (min <= max && arr[max] == temp) {\n            max--;\n      \
    \  }\n        temp = arr[max];\n        while (min <= max && arr[min] == temp)\
    \ {\n            min++;\n        }\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = by_length;\n    assert(candidate((std::vector<long>({2,\
    \ 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 55}))) == (std::vector<std::string>({\"One\"})));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 3, 2}))) == (std::vector<std::string>({\"Three\", \"Two\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>({9, 4, 8}))) == (std::vector<std::string>({\"\
    Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpr7qitsbv.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpr7qitsbv.cpp:33:26: error:\
    \ \u2018to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   33 |         result.push_back(to_string(temp));\n      |               \
    \           ^~~~~~~~~\n      |                          std::__cxx11::to_string\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpr7qitsbv.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:6598:3:\
    \ note: \u2018std::__cxx11::to_string\u2019 declared here\n 6598 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    std::vector<std::string>\
    \ res;\n    long n = arr.size();\n    long max_len = 0, min_len = INT_MAX;\n \
    \   for (long i = 0; i < n; i++) {\n        if (arr[i] > max_len)\n          \
    \  max_len = arr[i];\n        if (arr[i] < min_len)\n            min_len = arr[i];\n\
    \    }\n    if (max_len < 9)\n        return res;\n    long min_len = 9 - min_len;\n\
    \    long max_len = 9 - max_len;\n    long mid = (max_len + min_len) / 2;\n  \
    \  long mid2 = mid / 2;\n    long mid3 = mid - mid2;\n    long mid4 = mid3 / 2;\n\
    \    long mid5 = mid3 - mid4;\n    long mid6 = mid5 / 2;\n    long mid7 = mid5\
    \ - mid6;\n    long mid8 = mid7 / 2;\n    long mid9 = mid7 - mid8;\n    long mid10\
    \ = mid9 / 2;\n    long mid11 = mid9 - mid10;\n    long mid12 = mid11 / 2;\n \
    \   long mid13 = mid11 - mid12;\n    long mid14 = mid13 / 2;\n    long mid15 =\
    \ mid13 - mid14;\n    long mid16 = mid15 / 2;\n    long mid17 = mid15 - mid16;\n\
    \    long mid18 = mid17 / 2;\n    long mid19 = mid17 - mid18;\n    long mid20\
    \ = mid19 / 2;\n    long mid21 = mid19 - mid20;\n    long mid22 = mid21 / 2;\n\
    \    long mid23 = mid21 - mid22;\n    long mid24 = mid23 / 2;\n    long mid25\
    \ = mid23 - mid24;\n    long mid26 = mid25 / 2;\n    long mid27 = mid25 - mid26;\n\
    \    long mid28 = mid27 / 2;\n    long mid29 = mid27 - mid28;\n    long mid30\
    \ = mid29 / 2;\n    long mid31 = mid29 - mid30;\n    long mid32 = mid31 / 2;\n\
    \    long mid33 = mid31 - mid32;\n    long mid34 = mid33 / 2;\n    long mid35\
    \ = mid33 - mid34;\n    long mid36 = mid35 / 2;\n    long mid37 = mid35 - mid36;\n\
    \    long mid38 = mid37 / 2;\n    long mid39 = mid37 - mid38;\n    long mid40\
    \ = mid39 / 2;\n    long mid41 = mid39 - mid40;\n    \n}\nint main() {\n    auto\
    \ candidate = by_length;\n    assert(candidate((std::vector<long>({2, 1, 1, 4,\
    \ 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 55}))) == (std::vector<std::string>({\"One\"})));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 3, 2}))) == (std::vector<std::string>({\"Three\", \"Two\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>({9, 4, 8}))) == (std::vector<std::string>({\"\
    Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp07r56rac.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmp07r56rac.cpp:31:10: error:\
    \ redeclaration of \u2018long int min_len\u2019\n   31 |     long min_len = 9\
    \ - min_len;\n      |          ^~~~~~~\n/tmp/tmp07r56rac.cpp:22:23: note: \u2018\
    long int min_len\u2019 previously declared here\n   22 |     long max_len = 0,\
    \ min_len = INT_MAX;\n      |                       ^~~~~~~\n/tmp/tmp07r56rac.cpp:32:10:\
    \ error: redeclaration of \u2018long int max_len\u2019\n   32 |     long max_len\
    \ = 9 - max_len;\n      |          ^~~~~~~\n/tmp/tmp07r56rac.cpp:22:10: note:\
    \ \u2018long int max_len\u2019 previously declared here\n   22 |     long max_len\
    \ = 0, min_len = INT_MAX;\n      |          ^~~~~~~\n/tmp/tmp07r56rac.cpp:75:1:\
    \ warning: control reaches end of non-void function [-Wreturn-type]\n   75 | }\n\
    \      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    std::vector<std::string>\
    \ ans;\n    long n = arr.size();\n    long m = std::min(n, 9);\n    long count\
    \ = 0;\n    for (long i = 0; i < n; i++) {\n        if (arr[i] >= 1 && arr[i]\
    \ <= 9) {\n            count += 1;\n            ans.push_back(to_string(arr[i]));\n\
    \        }\n    }\n    if (count == m) {\n        std::reverse(ans.begin(), ans.end());\n\
    \        for (long i = 0; i < n; i++) {\n            if (arr[i] >= 1 && arr[i]\
    \ <= 9) {\n                ans[ans.size() - 1 - i] = to_string(arr[i]);\n    \
    \        }\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = by_length;\n    assert(candidate((std::vector<long>({2, 1, 1, 4, 5, 8, 2,\
    \ 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"Four\", \"Three\"\
    , \"Two\", \"Two\", \"One\", \"One\"})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 55}))) == (std::vector<std::string>({\"One\"})));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 3, 2}))) == (std::vector<std::string>({\"Three\", \"Two\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>({9, 4, 8}))) == (std::vector<std::string>({\"\
    Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7xfdycsl.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmp7xfdycsl.cpp:22:27: error:\
    \ no matching function for call to \u2018min(long int&, int)\u2019\n   22 |  \
    \   long m = std::min(n, 9);\n      |                           ^\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp7xfdycsl.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:198:5:\
    \ note: candidate: \u2018template<class _Tp> constexpr const _Tp& std::min(const\
    \ _Tp&, const _Tp&)\u2019\n  198 |     min(const _Tp& __a, const _Tp& __b)\n \
    \     |     ^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:198:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp7xfdycsl.cpp:22:27:\
    \ note:   deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018\
    long int\u2019 and \u2018int\u2019)\n   22 |     long m = std::min(n, 9);\n  \
    \    |                           ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \      "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    std::vector<std::string>\
    \ res;\n    long long n = arr.size();\n    long long m = 1;\n    long long i =\
    \ 1;\n    long long j = 0;\n    long long k = 0;\n    long long l = 0;\n    long\
    \ long m1 = 1;\n    long long m2 = 1;\n    long long m3 = 1;\n    long long m4\
    \ = 1;\n    long long m5 = 1;\n    long long m6 = 1;\n    long long m7 = 1;\n\
    \    long long m8 = 1;\n    long long m9 = 1;\n    long long m10 = 1;\n    long\
    \ long m11 = 1;\n    long long m12 = 1;\n    long long m13 = 1;\n    long long\
    \ m14 = 1;\n    long long m15 = 1;\n    long long m16 = 1;\n    long long m17\
    \ = 1;\n    long long m18 = 1;\n    long long m19 = 1;\n    long long m20 = 1;\n\
    \    long long m21 = 1;\n    long long m22 = 1;\n    long long m23 = 1;\n    long\
    \ long m24 = 1;\n    long long m25 = 1;\n    long long m26 = 1;\n    long long\
    \ m27 = 1;\n    long long m28 = 1;\n    long long m29 = 1;\n    long long m30\
    \ = 1;\n    long long m31 = 1;\n    long long m32 = 1;\n    long long m33 = 1;\n\
    \    long long m34 = 1;\n    long long m35 = 1;\n    long long m36 = 1;\n    long\
    \ long m37 = 1;\n    long long m38 = 1;\n    long long m39 = 1;\n    long long\
    \ m40 = 1;\n    long long m41 = 1;\n    long long m42 = 1;\n    long long m43\
    \ = 1;\n    long long m44 = 1;\n    long long m45 = 1;\n    long long m46 = 1;\n\
    \    long long m47 = 1;\n    long long m48 = 1;\n    long long m49 = 1;\n    long\
    \ long m50 = 1;\n    long long m51 = 1;\n    long long m52 = 1;\n    long long\
    \ m53 = 1;\n    long long m54 = 1;\n    long long m55 = 1;\n    long long m56\
    \ = 1;\n    long long m57 = 1;\n    long long m58 = 1;\n    long long m59 = 1;\n\
    \    long long m60 = 1;\n    long long m61 = 1;\n    long long m62 = 1;\n    long\
    \ long m63 = 1;\n    long long m64 = 1;\n    long long m65 = 1;\n    long long\
    \ m66 = 1;\n    long long m67\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({2, 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({1, -1, 55}))) == (std::vector<std::string>({\"\
    One\"})));\n    assert(candidate((std::vector<long>({1, -1, 3, 2}))) == (std::vector<std::string>({\"\
    Three\", \"Two\", \"One\"})));\n    assert(candidate((std::vector<long>({9, 4,\
    \ 8}))) == (std::vector<std::string>({\"Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpga5s2zd9.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpga5s2zd9.cpp:94:1: error:\
    \ expected initializer before \u2018}\u2019 token\n   94 | }\n      | ^\n/tmp/tmpga5s2zd9.cpp:94:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    if (arr.empty())\
    \ {\n        return {};\n    }\n    long min = *std::min_element(arr.begin(),\
    \ arr.end());\n    long max = *std::max_element(arr.begin(), arr.end());\n   \
    \ long mid = (min + max) / 2;\n    std::vector<long> arr_rev(arr.size());\n  \
    \  for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] >= min && arr[i]\
    \ <= max) {\n            arr_rev[i] = arr[i];\n        } else {\n            arr_rev[i]\
    \ = mid;\n        }\n    }\n    std::reverse(arr_rev.begin(), arr_rev.end());\n\
    \    std::vector<std::string> ret;\n    for (long i = 0; i < arr_rev.size(); i++)\
    \ {\n        ret.push_back(std::to_string(arr_rev[i]));\n    }\n    return ret;\n\
    }\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({2,\
    \ 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 55}))) == (std::vector<std::string>({\"One\"})));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 3, 2}))) == (std::vector<std::string>({\"Three\", \"Two\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>({9, 4, 8}))) == (std::vector<std::string>({\"\
    Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "tmpawfyu4th: /tmp/tmpawfyu4th.cpp:43: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    std::vector<std::string>\
    \ res;\n    if (arr.size() == 0) {\n        return res;\n    }\n    long min =\
    \ arr[0];\n    long max = arr[0];\n    for (auto i : arr) {\n        if (i < min)\
    \ {\n            min = i;\n        }\n        if (i > max) {\n            max\
    \ = i;\n        }\n    }\n    long mid = (min + max) / 2;\n    long mid2 = mid\
    \ / 10;\n    long mid3 = mid % 10;\n    long mid4 = mid2 / 10;\n    long mid5\
    \ = mid2 % 10;\n    long mid6 = mid3 / 10;\n    long mid7 = mid3 % 10;\n    long\
    \ mid8 = mid4 / 10;\n    long mid9 = mid4 % 10;\n    long mid10 = mid5 / 10;\n\
    \    long mid11 = mid5 % 10;\n    long mid12 = mid6 / 10;\n    long mid13 = mid6\
    \ % 10;\n    long mid14 = mid7 / 10;\n    long mid15 = mid7 % 10;\n    long mid16\
    \ = mid8 / 10;\n    long mid17 = mid8 % 10;\n    long mid18 = mid9 / 10;\n   \
    \ long mid19 = mid9 % 10;\n    long mid20 = mid10 / 10;\n    long mid21 = mid10\
    \ % 10;\n    long mid22 = mid11 / 10;\n    long mid23 = mid11 % 10;\n    long\
    \ mid24 = mid12 / 10;\n    long mid25 = mid12 % 10;\n    long mid26 = mid13 /\
    \ 10;\n    long mid27 = mid13 % 10;\n    long mid28 = mid14 / 10;\n    long mid29\
    \ = mid14 % 10;\n    long mid30 = mid15 / 10;\n    long mid31 = mid15 % 10;\n\
    \    long mid32 = mid16 / 10;\n    long mid33 = mid16 % 10;\n    long mid34 =\
    \ mid17 / 10;\n    long mid35 = mid17 % 10;\n    long mid36 = mid18 / 10;\n  \
    \  long mid37 = mid18 % 10;\n    long mid38 = mid19 / 10;\n    long mid39 = mid19\
    \ % 10;\n    long mid40 = mid20 / 10;\n    long mid41 = mid20 % 10;\n    long\
    \ mid42 = mid21 / 10;\n    long mid43 = mid21 % 10;\n    long mid44 = mid22 /\
    \ 10;\n    long mid45 = mid22 % 10;\n    long mid46 = mid23 / 10;\n    long mid47\
    \ = \n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({2,\
    \ 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 55}))) == (std::vector<std::string>({\"One\"})));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 3, 2}))) == (std::vector<std::string>({\"Three\", \"Two\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>({9, 4, 8}))) == (std::vector<std::string>({\"\
    Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpukzoatz5.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpukzoatz5.cpp:81:1: error:\
    \ expected primary-expression before \u2018}\u2019 token\n   81 | }\n      | ^\n\
    /tmp/tmpukzoatz5.cpp:81:1: warning: control reaches end of non-void function [-Wreturn-type]\n\
    \   81 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    std::vector<std::string>\
    \ res;\n    long n = arr.size();\n    long m = std::min(n, 9);\n    long k = std::max(n,\
    \ m);\n    long count = 0;\n    long index = 0;\n    for (long i = 0; i < k; i++)\
    \ {\n        if (arr[i] >= 1 && arr[i] <= 9) {\n            count++;\n       \
    \ }\n    }\n    long start = 0;\n    long end = count;\n    while (end > start)\
    \ {\n        long mid = (start + end) / 2;\n        long midValue = arr[mid];\n\
    \        if (midValue >= 1 && midValue <= 9) {\n            long midIndex = mid;\n\
    \            while (midIndex < count && arr[midIndex] < midValue) {\n        \
    \        midIndex++;\n            }\n            while (midIndex > 0 && arr[midIndex]\
    \ > midValue) {\n                midIndex--;\n            }\n            std::swap(arr[midIndex],\
    \ arr[mid]);\n            mid++;\n            while (mid < count && arr[mid] <\
    \ midValue) {\n                mid++;\n            }\n            while (mid >\
    \ 0 && arr[mid] > midValue) {\n                mid--;\n            }\n       \
    \ }\n        if (mid < count) {\n            start = mid;\n        } else {\n\
    \            end = mid;\n        }\n    }\n    for (long i = 0; i < count; i++)\
    \ {\n        res.push_back(std::to_string(arr[i]));\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({2,\
    \ 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 55}))) == (std::vector<std::string>({\"One\"})));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 3, 2}))) == (std::vector<std::string>({\"Three\", \"Two\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>({9, 4, 8}))) == (std::vector<std::string>({\"\
    Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4y03uw3_.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmp4y03uw3_.cpp:22:27: error:\
    \ no matching function for call to \u2018min(long int&, int)\u2019\n   22 |  \
    \   long m = std::min(n, 9);\n      |                           ^\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp4y03uw3_.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:198:5:\
    \ note: candidate: \u2018template<class _Tp> constexpr const _Tp& std::min(const\
    \ _Tp&, const _Tp&)\u2019\n  198 |     min(const _Tp& __a, const _Tp& __b)\n \
    \     |     ^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:198:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp4y03uw3_.cpp:22:27:\
    \ note:   deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018\
    long int\u2019 and \u2018int\u2019)\n   22 |     long m = std::min(n, 9);\n  \
    \    |                           ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \      "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    std::vector<std::string>\
    \ res;\n    long n = arr.size();\n    long m = std::min(n, 9);\n    long k = std::max(n,\
    \ m);\n    long l = 0;\n    for (long i = 0; i < k; i++) {\n        l += arr[i];\n\
    \    }\n    long r = std::max(l, m);\n    long s = std::min(l, m);\n    long t\
    \ = std::max(l, r);\n    long u = std::min(l, r);\n    long v = std::max(l, s);\n\
    \    long w = std::min(l, s);\n    long x = std::max(l, t);\n    long y = std::min(l,\
    \ t);\n    long z = std::max(l, u);\n    long a = std::min(l, u);\n    long b\
    \ = std::max(l, v);\n    long c = std::min(l, v);\n    long d = std::max(l, w);\n\
    \    long e = std::min(l, w);\n    long f = std::max(l, x);\n    long g = std::min(l,\
    \ x);\n    long h = std::max(l, y);\n    long i = std::min(l, y);\n    long j\
    \ = std::max(l, z);\n    long k = std::min(l, z);\n    long l = std::max(l, a);\n\
    \    long m = std::min(l, a);\n    long n = std::max(l, b);\n    long o = std::min(l,\
    \ b);\n    long p = std::max(l, c);\n    long q = std::min(l, c);\n    long r\
    \ = std::max(l, d);\n    long s = std::min(l, d);\n    long t = std::max(l, e);\n\
    \    long u = std::min(l, e);\n    long v = std::max(l, f);\n    long w = std::min(l,\
    \ f);\n    long x = std::max(l, g);\n    long y = std::min(l, g);\n    long z\
    \ = std::max(l, h);\n    long a = std::min(l, h);\n    long b = std::max(l, i);\n\
    \    long c = std::min(l, i);\n    long d = std::max(l, j);\n    long e = std::min(l,\
    \ j);\n    long f = std::max(l, k);\n    long g = std::min(l, k);\n    long h\
    \ = std::max(l, l);\n    long i = std::min(l, l);\n    long j = std::max(l, m);\n\
    \    long k = std::min(l, m);\n    long l = std::max(l, n);\n    long m = std::min(l,\
    \ n);\n    long n = std::max(l, o);\n    long o = std::min(l, o);\n    long p\
    \ = std::max(l, p);\n    long q = std::min(l, p);\n    long r = std::max(l, q);\n\
    \    long s = std::min(l, q);\n    long t = std::max(l, r);\n}\nint main() {\n\
    \    auto candidate = by_length;\n    assert(candidate((std::vector<long>({2,\
    \ 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 55}))) == (std::vector<std::string>({\"One\"})));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 3, 2}))) == (std::vector<std::string>({\"Three\", \"Two\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>({9, 4, 8}))) == (std::vector<std::string>({\"\
    Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpo18kzxwz.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpo18kzxwz.cpp:22:27: error:\
    \ no matching function for call to \u2018min(long int&, int)\u2019\n   22 |  \
    \   long m = std::min(n, 9);\n      |                           ^\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpo18kzxwz.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:198:5:\
    \ note: candidate: \u2018template<class _Tp> constexpr const _Tp& std::min(const\
    \ _Tp&, const _Tp&)\u2019\n  198 |     min(const _Tp& __a, const _Tp& __b)\n \
    \     |     ^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:198:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpo18kzxwz.cpp:22:27:\
    \ note:   deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018\
    long int\u2019 and \u2018int\u2019)\n   22 |     long m = std::min(n, 9);\n  \
    \    |                           ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \      "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    std::vector<std::string>\
    \ res;\n    if (arr.size() == 0) {\n        return res;\n    }\n    long max =\
    \ *std::max_element(arr.begin(), arr.end());\n    long min = *std::min_element(arr.begin(),\
    \ arr.end());\n    long mid = (max + min) / 2;\n    long mid2 = mid / 10;\n  \
    \  long mid3 = mid % 10;\n    long mid4 = mid2 / 10;\n    long mid5 = mid2 % 10;\n\
    \    long mid6 = mid3 / 10;\n    long mid7 = mid3 % 10;\n    long mid8 = mid4\
    \ / 10;\n    long mid9 = mid4 % 10;\n    long mid10 = mid5 / 10;\n    long mid11\
    \ = mid5 % 10;\n    long mid12 = mid6 / 10;\n    long mid13 = mid6 % 10;\n   \
    \ long mid14 = mid7 / 10;\n    long mid15 = mid7 % 10;\n    long mid16 = mid8\
    \ / 10;\n    long mid17 = mid8 % 10;\n    long mid18 = mid9 / 10;\n    long mid19\
    \ = mid9 % 10;\n    long mid20 = mid10 / 10;\n    long mid21 = mid10 % 10;\n \
    \   long mid22 = mid11 / 10;\n    long mid23 = mid11 % 10;\n    long mid24 = mid12\
    \ / 10;\n    long mid25 = mid12 % 10;\n    long mid26 = mid13 / 10;\n    long\
    \ mid27 = mid13 % 10;\n    long mid28 = mid14 / 10;\n    long mid29 = mid14 %\
    \ 10;\n    long mid30 = mid15 / 10;\n    long mid31 = mid15 % 10;\n    long mid32\
    \ = mid16 / 10;\n    long mid33 = mid16 % 10;\n    long mid34 = mid17 / 10;\n\
    \    long mid35 = mid17 % 10;\n    long mid36 = mid18 / 10;\n    long mid37 =\
    \ mid18 % 10;\n    long mid38 = mid19 / 10;\n    long mid39 = mid19 % 10;\n  \
    \  long mid40 = mid20 / 10;\n    long mid41 = mid20 % 10;\n    long mid42 = mid21\
    \ / 10;\n    long mid43 = mid21 % 10;\n    long mid44 = mid22 / 10;\n    long\
    \ mid45 = mid22 % 10;\n    long mid46 = mid23 / 10;\n    long mid47 = mid23 %\
    \ 10;\n    long mid48 = mid24 / 10;\n\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({2, 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({1, -1, 55}))) == (std::vector<std::string>({\"\
    One\"})));\n    assert(candidate((std::vector<long>({1, -1, 3, 2}))) == (std::vector<std::string>({\"\
    Three\", \"Two\", \"One\"})));\n    assert(candidate((std::vector<long>({9, 4,\
    \ 8}))) == (std::vector<std::string>({\"Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "tmptnaujxtl: /tmp/tmptnaujxtl.cpp:78: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    std::vector<std::string>\
    \ result;\n    if (arr.size() == 0) {\n        return result;\n    }\n    long\
    \ min = arr[0];\n    long max = arr[0];\n    for (auto &i : arr) {\n        if\
    \ (i < min) {\n            min = i;\n        }\n        if (i > max) {\n     \
    \       max = i;\n        }\n    }\n    long mid = (min + max) / 2;\n    long\
    \ mid2 = mid / 10;\n    long mid3 = mid % 10;\n    long mid4 = mid2 / 10;\n  \
    \  long mid5 = mid2 % 10;\n    long mid6 = mid3 / 10;\n    long mid7 = mid3 %\
    \ 10;\n    long mid8 = mid4 / 10;\n    long mid9 = mid4 % 10;\n    long mid10\
    \ = mid5 / 10;\n    long mid11 = mid5 % 10;\n    long mid12 = mid6 / 10;\n   \
    \ long mid13 = mid6 % 10;\n    long mid14 = mid7 / 10;\n    long mid15 = mid7\
    \ % 10;\n    long mid16 = mid8 / 10;\n    long mid17 = mid8 % 10;\n    long mid18\
    \ = mid9 / 10;\n    long mid19 = mid9 % 10;\n    long mid20 = mid10 / 10;\n  \
    \  long mid21 = mid10 % 10;\n    long mid22 = mid11 / 10;\n    long mid23 = mid11\
    \ % 10;\n    long mid24 = mid12 / 10;\n    long mid25 = mid12 % 10;\n    long\
    \ mid26 = mid13 / 10;\n    long mid27 = mid13 % 10;\n    long mid28 = mid14 /\
    \ 10;\n    long mid29 = mid14 % 10;\n    long mid30 = mid15 / 10;\n    long mid31\
    \ = mid15 % 10;\n    long mid32 = mid16 / 10;\n    long mid33 = mid16 % 10;\n\
    \    long mid34 = mid17 / 10;\n    long mid35 = mid17 % 10;\n    long mid36 =\
    \ mid18 / 10;\n    long mid37 = mid18 % 10;\n    long mid38 = mid19 / 10;\n  \
    \  long mid39 = mid19 % 10;\n    long mid40 = mid20 / 10;\n    long mid41 = mid20\
    \ % 10;\n    long mid42 = mid21 / 10;\n    long mid43 = mid21 % 10;\n    long\
    \ mid44 = mid22 / 10;\n    long mid45 = mid22 % 10;\n    long mid46 = mid23 /\
    \ 10;\n    long mid47\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({2,\
    \ 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 55}))) == (std::vector<std::string>({\"One\"})));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 3, 2}))) == (std::vector<std::string>({\"Three\", \"Two\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>({9, 4, 8}))) == (std::vector<std::string>({\"\
    Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmprk2c0b0g.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmprk2c0b0g.cpp:81:1: error:\
    \ expected initializer before \u2018}\u2019 token\n   81 | }\n      | ^\n/tmp/tmprk2c0b0g.cpp:81:1:\
    \ warning: control reaches end of non-void function [-Wreturn-type]\n   81 | }\n\
    \      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    if (arr.size()\
    \ == 0) {\n        return {};\n    }\n    std::vector<long> sorted_arr(arr.begin(),\
    \ arr.end());\n    std::sort(sorted_arr.begin(), sorted_arr.end());\n    std::vector<long>\
    \ reverse_arr(sorted_arr.rbegin(), sorted_arr.rend());\n    std::reverse(reverse_arr.begin(),\
    \ reverse_arr.end());\n    std::vector<std::string> result;\n    for (long i :\
    \ reverse_arr) {\n        std::string name;\n        if (i <= 9) {\n         \
    \   name = \"One\";\n        } else if (i <= 99) {\n            name = \"Two\"\
    ;\n        } else if (i <= 999) {\n            name = \"Three\";\n        } else\
    \ if (i <= 9999) {\n            name = \"Four\";\n        } else if (i <= 99999)\
    \ {\n            name = \"Five\";\n        } else if (i <= 999999) {\n       \
    \     name = \"Six\";\n        } else if (i <= 9999999) {\n            name =\
    \ \"Seven\";\n        } else if (i <= 999999999) {\n            name = \"Eight\"\
    ;\n        } else if (i <= 99999999999) {\n            name = \"Nine\";\n    \
    \    } else {\n            name = \"?\";\n        }\n        result.push_back(name);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({2, 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({1, -1, 55}))) == (std::vector<std::string>({\"\
    One\"})));\n    assert(candidate((std::vector<long>({1, -1, 3, 2}))) == (std::vector<std::string>({\"\
    Three\", \"Two\", \"One\"})));\n    assert(candidate((std::vector<long>({9, 4,\
    \ 8}))) == (std::vector<std::string>({\"Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "tmpxzd1sdj4: /tmp/tmpxzd1sdj4.cpp:57: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    std::vector<std::string>\
    \ res;\n    long n = arr.size();\n    long m = 1;\n    long temp;\n    long cnt\
    \ = 0;\n    for (long i = 0; i < n; i++) {\n        temp = arr[i];\n        while\
    \ (temp > 0) {\n            cnt++;\n            temp /= 10;\n        }\n     \
    \   if (cnt > m) {\n            m = cnt;\n        }\n    }\n    long cnt2 = 0;\n\
    \    for (long i = 0; i < n; i++) {\n        temp = arr[i];\n        while (temp\
    \ > 0) {\n            cnt2++;\n            temp /= 10;\n        }\n        if\
    \ (cnt2 > m) {\n            m = cnt2;\n        }\n    }\n    long cnt3 = 0;\n\
    \    for (long i = 0; i < n; i++) {\n        temp = arr[i];\n        while (temp\
    \ > 0) {\n            cnt3++;\n            temp /= 10;\n        }\n        if\
    \ (cnt3 > m) {\n            m = cnt3;\n        }\n    }\n    long cnt4 = 0;\n\
    \    for (long i = 0; i < n; i++) {\n        temp = arr[i];\n        while (temp\
    \ > 0) {\n            cnt4++;\n            temp /= 10;\n        }\n        if\
    \ (cnt4 > m) {\n            m = cnt4;\n        }\n    }\n    long cnt5 = 0;\n\
    \    for (long i = 0; i < n; i++) {\n        temp = arr[i];\n        while (temp\
    \ > 0) {\n            cnt5++;\n            temp /= 10;\n        }\n        if\
    \ (cnt5 > m) {\n            m = cnt5;\n        }\n    }\n    long cnt6 = 0;\n\
    \    for (long i = 0; i < n; i++) {\n        temp = arr[i];\n        while (temp\
    \ > 0) {\n            cnt6++;\n            temp /= 10;\n        }\n        if\
    \ (cnt6 > m) {\n            m = cnt6;\n        }\n    }\n    long cnt7 = 0;\n\
    \    for (long i = 0; i < n; i++) {\n        temp = arr[i];\n        while (temp\
    \ > 0) {\n            cnt7++;\n            temp /= 10;\n        }\n        if\
    \ (cnt7 > m) {\n            m = cnt7;\n        }\n    }\n    long cnt8 = 0;\n\
    \    for (long i = 0; i < n; i++) {\n        temp = arr[i];\n        while (temp\
    \ > 0) {\n            cnt8++;\n            temp /= 10;\n        }\n        if\
    \ (cnt8 > m) {\n            m = cnt8;\n        }\n    }\n    long cnt9 = 0;\n\
    \    for (long i = 0; i < n; i++) {\n        temp = arr[i];\n        while (temp\
    \ > 0) {\n            cnt9++;\n            temp /= 10;\n        }\n        if\
    \ (cnt9 > m) {\n            m = cnt9;\n        }\n    }\n    long cnt10 = 0;\n\
    \    for (long i = 0; i < n; i++) {\n        temp = arr[i];\n        while (temp\
    \ > 0) {\n            cnt10++;\n            temp /= 10;\n        }\n        if\
    \ (cnt10 > m) {\n            m = cnt10;\n        }\n    }\n    long cnt11 = 0;\n\
    \n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({2,\
    \ 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 55}))) == (std::vector<std::string>({\"One\"})));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 3, 2}))) == (std::vector<std::string>({\"Three\", \"Two\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>({9, 4, 8}))) == (std::vector<std::string>({\"\
    Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "tmpynktid19: /tmp/tmpynktid19.cpp:139: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    std::vector<std::string>\
    \ res;\n    if (arr.size() == 0) {\n        return res;\n    }\n    long max_len\
    \ = 0, min_len = std::numeric_limits<long>::max();\n    for (auto i : arr) {\n\
    \        if (max_len < i) {\n            max_len = i;\n        }\n        if (min_len\
    \ > i) {\n            min_len = i;\n        }\n    }\n    long mid = min_len +\
    \ (max_len - min_len) / 2;\n    long mid2 = max_len - (max_len - min_len) / 2;\n\
    \    long mid3 = max_len - (max_len - min_len) / 3;\n    long mid4 = max_len -\
    \ (max_len - min_len) / 4;\n    long mid5 = max_len - (max_len - min_len) / 5;\n\
    \    long mid6 = max_len - (max_len - min_len) / 6;\n    long mid7 = max_len -\
    \ (max_len - min_len) / 7;\n    long mid8 = max_len - (max_len - min_len) / 8;\n\
    \    long mid9 = max_len - (max_len - min_len) / 9;\n    long mid10 = max_len\
    \ - (max_len - min_len) / 10;\n    long mid11 = max_len - (max_len - min_len)\
    \ / 11;\n    long mid12 = max_len - (max_len - min_len) / 12;\n    long mid13\
    \ = max_len - (max_len - min_len) / 13;\n    long mid14 = max_len - (max_len -\
    \ min_len) / 14;\n    long mid15 = max_len - (max_len - min_len) / 15;\n    long\
    \ mid16 = max_len - (max_len - min_len) / 16;\n    long mid17 = max_len - (max_len\
    \ - min_len) / 17;\n    long mid18 = max_len - (max_len - min_len) / 18;\n   \
    \ long mid19 = max_len - (max_len - min_len) / 19;\n    long mid20 = max_len -\
    \ (max_len - min_len) / 20;\n    long mid21 = max_len - (max_len - min_len) /\
    \ 21;\n    long mid22 = max_len - (max_len - min_len) / 22;\n    long mid23 =\
    \ max_len - (max_len - min_len) / 23;\n    long mid24 = max_len - (max_len - min_len)\
    \ / 24;\n    long mid25 = max_len - (max_len - min_len) / 25;\n    long mid26\
    \ = max_len - (max_len - min_len) / 26;\n    long mid27 = max_len - (max_len -\
    \ min_len) / 27;\n    long mid28 = max_len - (max_len - min_len) / 28;\n    long\
    \ mid29 = max_len - (max_len - min_len) / 29;\n    long mid30 = max_len - (max_len\
    \ - min_len) / 30\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({2,\
    \ 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 55}))) == (std::vector<std::string>({\"One\"})));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 3, 2}))) == (std::vector<std::string>({\"Three\", \"Two\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>({9, 4, 8}))) == (std::vector<std::string>({\"\
    Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpqjgvieep.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpqjgvieep.cpp:63:1: error:\
    \ expected \u2018,\u2019 or \u2018;\u2019 before \u2018}\u2019 token\n   63 |\
    \ }\n      | ^\n/tmp/tmpqjgvieep.cpp:63:1: warning: control reaches end of non-void\
    \ function [-Wreturn-type]\n   63 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    std::vector<std::string>\
    \ res;\n    long long n = arr.size();\n    if (n <= 0) {\n        return res;\n\
    \    }\n    long long m = n / 10;\n    long long r = n % 10;\n    long long s\
    \ = m;\n    long long t = r;\n    while (s > 0) {\n        long long temp = s;\n\
    \        s = t - temp;\n        t = temp;\n        res.push_back(\"One\");\n \
    \   }\n    while (t > 0) {\n        long long temp = t;\n        t = m - temp;\n\
    \        m = temp;\n        res.push_back(\"Two\");\n    }\n    while (m > 0)\
    \ {\n        long long temp = m;\n        m = r - temp;\n        r = temp;\n \
    \       res.push_back(\"Three\");\n    }\n    while (r > 0) {\n        long long\
    \ temp = r; \n        r = s - temp;\n        s = temp;\n        res.push_back(\"\
    Four\");\n    }\n    while (s > 0) {\n        long long temp = s;\n        s =\
    \ t - temp;\n        t = temp;\n        res.push_back(\"Five\");\n    }\n    while\
    \ (r > 0) {\n        long long temp = r; \n        r = m - temp;\n        m =\
    \ temp;\n        res.push_back(\"Six\");\n    }\n    while (m > 0) {\n       \
    \ long long temp = m;\n        m = r - temp;\n        r = temp;\n        res.push_back(\"\
    Seven\");\n    }\n    while (r > 0) {\n        long long temp = r; \n        r\
    \ = s - temp;\n        s = temp;\n        res.push_back(\"Eight\");\n    }\n \
    \   while (r > 0) {\n        long long temp = r; \n        r = t - temp;\n   \
    \     t = temp;\n        res.push_back(\"Nine\");\n    }\n    return res;\n}\n\
    int main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({2,\
    \ 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 55}))) == (std::vector<std::string>({\"One\"})));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 3, 2}))) == (std::vector<std::string>({\"Three\", \"Two\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>({9, 4, 8}))) == (std::vector<std::string>({\"\
    Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "tmp7sf_bozq: /tmp/tmp7sf_bozq.cpp:87: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    // write your\
    \ code here\n    std::vector<std::string> result;\n    long min = std::numeric_limits<long>::min();\n\
    \    long max = std::numeric_limits<long>::max();\n    long mid = 0;\n    for\
    \ (long i : arr) {\n        if (i < min) {\n            min = i;\n        }\n\
    \        if (i > max) {\n            max = i;\n        }\n    }\n    mid = (min\
    \ + max) / 2;\n    long mid2 = mid / 10;\n    long mid3 = mid % 10;\n    long\
    \ mid4 = mid2 / 10;\n    long mid5 = mid2 % 10;\n    long mid6 = mid3 / 10;\n\
    \    long mid7 = mid3 % 10;\n    long mid8 = mid4 / 10;\n    long mid9 = mid4\
    \ % 10;\n    long mid10 = mid5 / 10;\n    long mid11 = mid5 % 10;\n    long mid12\
    \ = mid6 / 10;\n    long mid13 = mid6 % 10;\n    long mid14 = mid7 / 10;\n   \
    \ long mid15 = mid7 % 10;\n    long mid16 = mid8 / 10;\n    long mid17 = mid8\
    \ % 10;\n    long mid18 = mid9 / 10;\n    long mid19 = mid9 % 10;\n    long mid20\
    \ = mid10 / 10;\n    long mid21 = mid10 % 10;\n    long mid22 = mid11 / 10;\n\
    \    long mid23 = mid11 % 10;\n    long mid24 = mid12 / 10;\n    long mid25 =\
    \ mid12 % 10;\n    long mid26 = mid13 / 10;\n    long mid27 = mid13 % 10;\n  \
    \  long mid28 = mid14 / 10;\n    long mid29 = mid14 % 10;\n    long mid30 = mid15\
    \ / 10;\n    long mid31 = mid15 % 10;\n    long mid32 = mid16 / 10;\n    long\
    \ mid33 = mid16 % 10;\n    long mid34 = mid17 / 10;\n    long mid35 = mid17 %\
    \ 10;\n    long mid36 = mid18 / 10;\n    long mid37 = mid18 % 10;\n    long mid38\
    \ = mid19 / 10;\n    long mid39 = mid19 % 10;\n    long mid40 = mid20 / 10;\n\
    \    long mid41 = mid20 % 10;\n    long mid42 = mid21 / 10;\n    long mid43 =\
    \ mid21 % 10;\n    long mid44 = mid22 / 10;\n    long mid45 = mid22 % 10;\n  \
    \  long mid46 = \n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({2,\
    \ 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 55}))) == (std::vector<std::string>({\"One\"})));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 3, 2}))) == (std::vector<std::string>({\"Three\", \"Two\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>({9, 4, 8}))) == (std::vector<std::string>({\"\
    Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmprlq5_y2f.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmprlq5_y2f.cpp:79:1: error:\
    \ expected primary-expression before \u2018}\u2019 token\n   79 | }\n      | ^\n\
    /tmp/tmprlq5_y2f.cpp:79:1: warning: no return statement in function returning\
    \ non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    std::vector<std::string>\
    \ res;\n    long n = arr.size();\n    if (n == 0)\n        return res;\n    long\
    \ m = 1;\n    for (long i = 0; i < n; i++) {\n        m += arr[i];\n        if\
    \ (m > 9)\n            m = 1;\n    }\n    long k = m;\n    while (k != 0) {\n\
    \        res.push_back(\"One\");\n        k--;\n    }\n    for (long i = 0; i\
    \ < n; i++) {\n        long j = arr[i];\n        long k = j;\n        while (k\
    \ != 0) {\n            if (k % 10 == 0)\n                res.push_back(\"Ten\"\
    );\n            k /= 10;\n        }\n        if (j % 10 == 0)\n            res.push_back(\"\
    One\");\n    }\n    return res;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({2, 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({1, -1, 55}))) == (std::vector<std::string>({\"\
    One\"})));\n    assert(candidate((std::vector<long>({1, -1, 3, 2}))) == (std::vector<std::string>({\"\
    Three\", \"Two\", \"One\"})));\n    assert(candidate((std::vector<long>({9, 4,\
    \ 8}))) == (std::vector<std::string>({\"Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "tmpt_2qbe21: /tmp/tmpt_2qbe21.cpp:50: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    std::vector<std::string>\
    \ res;\n    if (arr.empty()) return res;\n    long n = arr.size();\n    long m\
    \ = n / 10;\n    long r = n % 10;\n    long temp;\n    for (long i = 0; i < m;\
    \ i++) {\n        temp = arr[i];\n        arr[i] = arr[m];\n        arr[m] = temp;\n\
    \    }\n    for (long i = 0; i < r; i++) {\n        temp = arr[i];\n        arr[i]\
    \ = arr[n - r + i];\n        arr[n - r + i] = temp;\n    }\n    for (long i =\
    \ 0; i < n; i++) {\n        temp = arr[i];\n        arr[i] = arr[n-i];\n     \
    \   arr[n-i] = temp;\n    }\n    for (long i = 0; i < m; i++) {\n        temp\
    \ = arr[i];\n        arr[i] = arr[m];\n        arr[m] = temp;\n    }\n    for\
    \ (long i = 0; i < r; i++) {\n        temp = arr[i];\n        arr[i] = arr[n -\
    \ r + i];\n        arr[n - r + i] = temp;\n    }\n    for (long i = 0; i < n;\
    \ i++) {\n        temp = arr[i];\n        arr[i] = arr[n-i];\n        arr[n-i]\
    \ = temp;\n    }\n    for (long i = 0; i < m; i++) {\n        temp = arr[i];\n\
    \        arr[i] = arr[m];\n        arr[m] = temp;\n    }\n    for (long i = 0;\
    \ i < r; i++) {\n        temp = arr[i];\n        arr[i] = arr[n - r + i];\n  \
    \      arr[n - r + i] = temp;\n    }\n    for (long i = 0; i < n; i++) {\n   \
    \     temp = arr[i];\n        arr[i] = arr[n-i];\n        arr[n-i] = temp;\n \
    \   }\n    for (long i = 0; i < m; i++) {\n        temp = arr[i];\n        arr[i]\
    \ = arr[m];\n        arr[m] = temp;\n    }\n    for (long i = 0; i < r; i++) {\n\
    \        temp = arr[i];\n        arr[i] = arr[n - r + i];\n        arr[n - r +\
    \ i] = temp;\n    }\n    for (long i = 0; i < n; i++) {\n        temp = arr[i];\n\
    \        arr[i] = arr[n-i];\n        arr[n-i] = temp;\n    }\n    for (long i\
    \ = 0; i < m; i++) {\n        temp = arr[i];\n        arr[i] = arr[m];\n     \
    \   arr[m] = temp;\n    }\n    for (long i = 0; i < r; i++) {\n        temp =\
    \ arr[i];\n        arr[i] = arr[n - r + i];\n        arr[n - r + i] = temp;\n\
    \    }\n    for (long i = 0; i < n; i++) {\n        temp = arr[i];\n        arr[i]\
    \ = arr[n-i];\n        arr[n-i] = temp;\n    }\n    for (long i = 0; i < m; i++)\
    \ {\n        temp = arr[i];\n        arr[i] = arr[m];\n        arr[m] = temp;\n\
    \    }\n    for (long i = 0; i < r; i++) {\n        temp = \n}\nint main() {\n\
    \    auto candidate = by_length;\n    assert(candidate((std::vector<long>({2,\
    \ 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 55}))) == (std::vector<std::string>({\"One\"})));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 3, 2}))) == (std::vector<std::string>({\"Three\", \"Two\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>({9, 4, 8}))) == (std::vector<std::string>({\"\
    Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvvl8w841.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpvvl8w841.cpp:108:1: error:\
    \ expected primary-expression before \u2018}\u2019 token\n  108 | }\n      | ^\n\
    /tmp/tmpvvl8w841.cpp:109:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n  109 | int main() {\n      |            ^\n/tmp/tmpvvl8w841.cpp:116:1:\
    \ error: expected \u2018}\u2019 at end of input\n  116 | }\n      | ^\n/tmp/tmpvvl8w841.cpp:19:59:\
    \ note: to match this \u2018{\u2019\n   19 | std::vector<std::string> by_length(std::vector<long>\
    \ arr) {\n      |                                                           ^\n\
    /tmp/tmpvvl8w841.cpp:116:1: warning: control reaches end of non-void function\
    \ [-Wreturn-type]\n  116 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    std::vector<std::string>\
    \ res;\n    if (arr.size() == 0) {\n        return res;\n    }\n    long min_val\
    \ = arr[0];\n    long max_val = arr[0];\n    for (long i : arr) {\n        if\
    \ (i < min_val) {\n            min_val = i;\n        }\n        if (i > max_val)\
    \ {\n            max_val = i;\n        }\n    }\n    long mid = min_val + max_val\
    \ / 2;\n    long left_len = max_val - min_val;\n    long right_len = mid - min_val;\n\
    \    std::vector<std::string> left_res;\n    std::vector<std::string> right_res;\n\
    \    for (long i = min_val; i <= mid; ++i) {\n        left_res.push_back(\"One\"\
    );\n    }\n    for (long i = mid + 1; i <= max_val; ++i) {\n        right_res.push_back(\"\
    One\");\n    }\n    for (long i = min_val; i <= right_len; ++i) {\n        right_res.push_back(\"\
    Two\");\n    }\n    for (long i = right_len + 1; i <= left_len; ++i) {\n     \
    \   left_res.push_back(\"Two\");\n    }\n    for (long i = min_val; i <= left_len;\
    \ ++i) {\n        left_res.push_back(\"Three\");\n    }\n    for (long i = left_len\
    \ + 1; i <= max_val; ++i) {\n        right_res.push_back(\"Three\");\n    }\n\
    \    for (long i = max_val + 1; i <= mid; ++i) {\n        left_res.push_back(\"\
    Four\");\n    }\n    for (long i = mid + 1; i <= max_val; ++i) {\n        right_res.push_back(\"\
    Four\");\n    }\n    for (long i = min_val; i <= right_len; ++i) {\n        right_res.push_back(\"\
    Five\");\n    }\n    for (long i = right_len + 1; i <= left_len; ++i) {\n    \
    \    left_res.push_back(\"Five\");\n    }\n    for (long i = min_val; i <= left_len;\
    \ ++i) {\n        left_res.push_back(\"Six\");\n    }\n    for (long i = left_len\
    \ + 1; i <= max_val; ++i) {\n        right_res.push_back(\"Six\");\n    }\n  \
    \  for (long i = max_val + 1; i <= mid; ++i) {\n        left_res.push_back(\"\
    Seven\");\n    }\n    for (long i = mid + 1; i <= max_val; ++i) {\n        right_res.push_back(\"\
    Seven\");\n    }\n    for (long i = min_val; i <= right_len; ++i) {\n        right_res.push_back(\"\
    Eight\");\n    }\n    for (long i = right_len + 1; i <= left_len; ++i) {\n   \
    \     left_res.push_back(\"Eight\");\n    }\n    for (long i = min_val; i <= left_len;\
    \ ++i) {\n        left_res.push_back(\"Nine\");\n    }\n    for (long i = left_len\
    \ + 1; i <= max_val; ++i) {\n        right_res.push_back(\"Nine\");\n    }\n \
    \   for (long i = max_val + 1; i <= mid; ++i) {\n        left_res.push_back(\"\
    Ten\");\n    }\n    for (long i = mid + 1; i <= max_val\n}\nint main() {\n   \
    \ auto candidate = by_length;\n    assert(candidate((std::vector<long>({2, 1,\
    \ 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 55}))) == (std::vector<std::string>({\"One\"})));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 3, 2}))) == (std::vector<std::string>({\"Three\", \"Two\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>({9, 4, 8}))) == (std::vector<std::string>({\"\
    Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0pzbs_vr.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmp0pzbs_vr.cpp:96:40: error:\
    \ expected \u2018;\u2019 before \u2018}\u2019 token\n   96 |     for (long i =\
    \ mid + 1; i <= max_val\n      |                                        ^\n  \
    \    |                                        ;\n   97 | }\n      | ~        \
    \                               \n/tmp/tmp0pzbs_vr.cpp:97:1: error: expected primary-expression\
    \ before \u2018}\u2019 token\n   97 | }\n      | ^\n/tmp/tmp0pzbs_vr.cpp:96:40:\
    \ error: expected \u2018)\u2019 before \u2018}\u2019 token\n   96 |     for (long\
    \ i = mid + 1; i <= max_val\n      |         ~                              ^\n\
    \      |                                        )\n   97 | }\n      | ~      \
    \                                 \n/tmp/tmp0pzbs_vr.cpp:97:1: error: expected\
    \ primary-expression before \u2018}\u2019 token\n   97 | }\n      | ^\n/tmp/tmp0pzbs_vr.cpp:97:1:\
    \ warning: control reaches end of non-void function [-Wreturn-type]\n   97 | }\n\
    \      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    // Write your\
    \ code here\n    std::vector<std::string> res;\n    long temp;\n    for(long i=0;i<arr.size();i++){\n\
    \        if(arr[i]<10){\n            temp = arr[i];\n            arr[i] = arr[arr[i]-1];\n\
    \            arr[arr[i]-1] = temp;\n        }\n    }\n    for(long i=0;i<arr.size();i++){\n\
    \        if(arr[i]<10){\n            res.push_back(\"One\");\n        }\n    \
    \    else if(arr[i]<100){\n            res.push_back(\"Two\");\n        }\n  \
    \      else if(arr[i]<1000){\n            res.push_back(\"Three\");\n        }\n\
    \        else if(arr[i]<10000){\n            res.push_back(\"Four\");\n      \
    \  }\n        else if(arr[i]<100000){\n            res.push_back(\"Five\");\n\
    \        }\n        else if(arr[i]<1000000){\n            res.push_back(\"Six\"\
    );\n        }\n        else if(arr[i]<10000000){\n            res.push_back(\"\
    Seven\");\n        }\n        else if(arr[i]<100000000){\n            res.push_back(\"\
    Eight\");\n        }\n        else if(arr[i]<1000000000){\n            res.push_back(\"\
    Nine\");\n        }\n        else if(arr[i]<10000000000){\n            res.push_back(\"\
    Ten\");\n        }\n        else if(arr[i]<100000000000){\n            res.push_back(\"\
    Eleven\");\n        }\n        else if(arr[i]<1000000000000){\n            res.push_back(\"\
    Twelve\");\n        }\n        else if(arr[i]<10000000000000){\n            res.push_back(\"\
    Thirteen\");\n        }\n        else if(arr[i]<100000000000000){\n          \
    \  res.push_back(\"Fourteen\");\n        }\n        else if(arr[i]<1000000000000000){\n\
    \            res.push_back(\"Fifteen\");\n        }\n        else if(arr[i]<10000000000000000){\n\
    \            res.push_back(\"Sixteen\");\n        }\n        else if(arr[i]<100000000000000000){\n\
    \            res.push_back(\"Seventeen\");\n        }\n        else if(arr[i]<1000000000000000000){\n\
    \            res.push_back(\"Eighteen\");\n        }\n        else if(arr[i]<10000000000000000000){\n\
    \            res.push_back(\"Nineteen\");\n        }\n        else if(arr[i]<1000000000000000000){\n\
    \            res.push_back(\"Twenty\");\n        }\n        else if(arr[i]<10000000000000000000){\n\
    \            res.push_back(\"Twenty one\");\n        }\n        else if(arr[i]<100000000000000000000){\n\
    \            res.push_back(\"Twenty two\");\n        }\n        else if(arr[i]<\n\
    }\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({2,\
    \ 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 55}))) == (std::vector<std::string>({\"One\"})));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 3, 2}))) == (std::vector<std::string>({\"Three\", \"Two\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>({9, 4, 8}))) == (std::vector<std::string>({\"\
    Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_tmlhz_s.cpp:85:24: warning: integer constant is so large that\
    \ it is unsigned\n   85 |         else if(arr[i]<10000000000000000000){\n    \
    \  |                        ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_tmlhz_s.cpp:91:24:\
    \ warning: integer constant is so large that it is unsigned\n   91 |         else\
    \ if(arr[i]<10000000000000000000){\n      |                        ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp_tmlhz_s.cpp:94:24: warning: integer constant is too large for its type\n\
    \   94 |         else if(arr[i]<100000000000000000000){\n      |             \
    \           ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp_tmlhz_s.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmp_tmlhz_s.cpp:98:1: error:\
    \ expected primary-expression before \u2018}\u2019 token\n   98 | }\n      | ^\n\
    /tmp/tmp_tmlhz_s.cpp:97:24: error: expected \u2018)\u2019 before \u2018}\u2019\
    \ token\n   97 |         else if(arr[i]<\n      |                ~       ^\n \
    \     |                        )\n   98 | }\n      | ~                       \n\
    /tmp/tmp_tmlhz_s.cpp:98:1: error: expected primary-expression before \u2018}\u2019\
    \ token\n   98 | }\n      | ^\n/tmp/tmp_tmlhz_s.cpp:99:12: error: a function-definition\
    \ is not allowed here before \u2018{\u2019 token\n   99 | int main() {\n     \
    \ |            ^\n/tmp/tmp_tmlhz_s.cpp:106:1: error: expected \u2018}\u2019 at\
    \ end of input\n  106 | }\n      | ^\n/tmp/tmp_tmlhz_s.cpp:19:59: note: to match\
    \ this \u2018{\u2019\n   19 | std::vector<std::string> by_length(std::vector<long>\
    \ arr) {\n      |                                                           ^\n\
    /tmp/tmp_tmlhz_s.cpp:106:1: warning: no return statement in function returning\
    \ non-void [-Wreturn-type]\n  106 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    std::vector<std::string>\
    \ res;\n    if (arr.empty()) {\n        return res;\n    }\n    long max = *std::max_element(arr.begin(),\
    \ arr.end());\n    long min = *std::min_element(arr.begin(), arr.end());\n   \
    \ long mid = max / 10;\n    long left = max - mid * 10;\n    long right = min\
    \ - mid * 10;\n    std::vector<std::string> left_res;\n    std::vector<std::string>\
    \ right_res;\n    for (long i = mid; i <= min; i++) {\n        left_res.push_back(\"\
    One\");\n    }\n    for (long i = left; i <= max; i++) {\n        right_res.push_back(\"\
    One\");\n    }\n    for (long i = mid; i <= max; i++) {\n        left_res.push_back(\"\
    Two\");\n    }\n    for (long i = left; i <= max; i++) {\n        right_res.push_back(\"\
    Two\");\n    }\n    for (long i = mid; i <= max; i++) {\n        left_res.push_back(\"\
    Three\");\n    }\n    for (long i = left; i <= max; i++) {\n        right_res.push_back(\"\
    Three\");\n    }\n    for (long i = mid; i <= max; i++) {\n        left_res.push_back(\"\
    Four\");\n    }\n    for (long i = left; i <= max; i++) {\n        right_res.push_back(\"\
    Four\");\n    }\n    for (long i = mid; i <= max; i++) {\n        left_res.push_back(\"\
    Five\");\n    }\n    for (long i = left; i <= max; i++) {\n        right_res.push_back(\"\
    Five\");\n    }\n    for (long i = mid; i <= max; i++) {\n        left_res.push_back(\"\
    Six\");\n    }\n    for (long i = left; i <= max; i++) {\n        right_res.push_back(\"\
    Six\");\n    }\n    for (long i = mid; i <= max; i++) {\n        left_res.push_back(\"\
    Seven\");\n    }\n    for (long i = left; i <= max; i++) {\n        right_res.push_back(\"\
    Seven\");\n    }\n    for (long i = mid; i <= max; i++) {\n        left_res.push_back(\"\
    Eight\");\n    }\n    for (long i = left; i <= max; i++) {\n        right_res.push_back(\"\
    Eight\");\n    }\n    for (long i = mid; i <= max; i++) {\n        left_res.push_back(\"\
    Nine\");\n    }\n    for (long i = left; i <= max; i++) {\n        right_res.push_back(\"\
    Nine\");\n    }\n    for (long i = mid; i <= max; i++) {\n        left_res.push_back(\"\
    Zero\");\n    }\n    for (long i = left; i <= max; i++) {\n        right_res.push_back(\"\
    Zero\");\n    }\n    for (long i = mid; i <= max; i++) {\n        left_res.push_back(\"\
    One\");\n    }\n    for (long i = left; i <= max; i++) {\n        right_res.push_back(\"\
    One\");\n    }\n    for (long i = mid; i <= max; i++) {\n        left_res.push_back(\"\
    Two\");\n    }\n    for (long i = left; i <= max\n}\nint main() {\n    auto candidate\
    \ = by_length;\n    assert(candidate((std::vector<long>({2, 1, 1, 4, 5, 8, 2,\
    \ 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"Four\", \"Three\"\
    , \"Two\", \"Two\", \"One\", \"One\"})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 55}))) == (std::vector<std::string>({\"One\"})));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 3, 2}))) == (std::vector<std::string>({\"Three\", \"Two\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>({9, 4, 8}))) == (std::vector<std::string>({\"\
    Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpqfl0qt33.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpqfl0qt33.cpp:100:33: error:\
    \ expected \u2018;\u2019 before \u2018}\u2019 token\n  100 |     for (long i =\
    \ left; i <= max\n      |                                 ^\n      |         \
    \                        ;\n  101 | }\n      | ~                             \
    \   \n/tmp/tmpqfl0qt33.cpp:101:1: error: expected primary-expression before \u2018\
    }\u2019 token\n  101 | }\n      | ^\n/tmp/tmpqfl0qt33.cpp:100:33: error: expected\
    \ \u2018)\u2019 before \u2018}\u2019 token\n  100 |     for (long i = left; i\
    \ <= max\n      |         ~                       ^\n      |                 \
    \                )\n  101 | }\n      | ~                                \n/tmp/tmpqfl0qt33.cpp:101:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n  101 | }\n \
    \     | ^\n/tmp/tmpqfl0qt33.cpp:101:1: warning: control reaches end of non-void\
    \ function [-Wreturn-type]\n  101 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    std::vector<std::string>\
    \ res;\n    long long n = arr.size();\n    long long m = n / 10;\n    long long\
    \ r = n % 10;\n    long long k = 0;\n    long long temp = 0;\n    long long count\
    \ = 0;\n    long long temp2 = 0;\n    long long count2 = 0;\n    long long temp3\
    \ = 0;\n    long long count3 = 0;\n    long long temp4 = 0;\n    long long count4\
    \ = 0;\n    long long temp5 = 0;\n    long long count5 = 0;\n    long long temp6\
    \ = 0;\n    long long count6 = 0;\n    long long temp7 = 0;\n    long long count7\
    \ = 0;\n    long long temp8 = 0;\n    long long count8 = 0;\n    long long temp9\
    \ = 0;\n    long long count9 = 0;\n    long long temp10 = 0;\n    long long count10\
    \ = 0;\n    long long temp11 = 0;\n    long long count11 = 0;\n    long long temp12\
    \ = 0;\n    long long count12 = 0;\n    long long temp13 = 0;\n    long long count13\
    \ = 0;\n    long long temp14 = 0;\n    long long count14 = 0;\n    long long temp15\
    \ = 0;\n    long long count15 = 0;\n    long long temp16 = 0;\n    long long count16\
    \ = 0;\n    long long temp17 = 0;\n    long long count17 = 0;\n    long long temp18\
    \ = 0;\n    long long count18 = 0;\n    long long temp19 = 0;\n    long long count19\
    \ = 0;\n    long long temp20 = 0;\n    long long count20 = 0;\n    long long temp21\
    \ = 0;\n    long long count21 = 0;\n    long long temp22 = 0;\n    long long count22\
    \ = 0;\n    long long temp23 = 0;\n    long long count23 = 0;\n    long long temp24\
    \ = 0;\n    long long count24 = 0;\n    long long temp25 = 0;\n    long long count25\
    \ = 0;\n    long long temp26 = 0;\n    long long count26 = 0;\n    long long temp27\
    \ = 0;\n    long long count27 = 0;\n    long long temp28 = 0;\n    long long count28\
    \ = 0;\n    long long temp29 = 0;\n    long long count29 = 0;\n    long long temp30\
    \ = 0;\n    long long count30 = 0;\n    long long temp31 = 0;\n    long long count31\
    \ = 0;\n    long long temp32 = 0;\n    long long count32 = 0;\n    long long temp33\
    \ = 0;\n    long long count33 = 0;\n    long long temp34 = 0;\n    long long count34\
    \ = 0;\n    long long temp35 = 0;\n    long long count35 = 0;\n}\nint main() {\n\
    \    auto candidate = by_length;\n    assert(candidate((std::vector<long>({2,\
    \ 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 55}))) == (std::vector<std::string>({\"One\"})));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 3, 2}))) == (std::vector<std::string>({\"Three\", \"Two\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>({9, 4, 8}))) == (std::vector<std::string>({\"\
    Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "tmpz25cgar4: /tmp/tmpz25cgar4.cpp:98: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    if (arr.empty())\
    \ {\n        return {};\n    }\n    long max = *std::max_element(arr.begin(),\
    \ arr.end());\n    std::vector<long> reversed;\n    for (long i : arr) {\n   \
    \     if (i <= 9) {\n            reversed.push_back(i);\n        }\n    }\n  \
    \  std::sort(reversed.begin(), reversed.end());\n    reversed.erase(std::unique(reversed.begin(),\
    \ reversed.end()), reversed.end());\n    std::vector<std::string> result;\n  \
    \  for (long i : reversed) {\n        std::string name = \"\";\n        switch\
    \ (i) {\n            case 1:\n                name = \"One\";\n              \
    \  break;\n            case 2:\n                name = \"Two\";\n            \
    \    break;\n            case 3:\n                name = \"Three\";\n        \
    \        break;\n            case 4:\n                name = \"Four\";\n     \
    \           break;\n            case 5:\n                name = \"Five\";\n  \
    \              break;\n            case 6:\n                name = \"Six\";\n\
    \                break;\n            case 7:\n                name = \"Seven\"\
    ;\n                break;\n            case 8:\n                name = \"Eight\"\
    ;\n                break;\n            case 9:\n                name = \"Nine\"\
    ;\n                break;\n            default:\n                break;\n    \
    \    }\n        result.push_back(name);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({2,\
    \ 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 55}))) == (std::vector<std::string>({\"One\"})));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 3, 2}))) == (std::vector<std::string>({\"Three\", \"Two\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>({9, 4, 8}))) == (std::vector<std::string>({\"\
    Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "tmpqgldm4dq: /tmp/tmpqgldm4dq.cpp:72: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    std::vector<std::string>\
    \ res;\n    if (arr.size() == 0) {\n        return res;\n    }\n    long max_len\
    \ = 0, min_len = std::numeric_limits<long>::max();\n    for (long i : arr) {\n\
    \        if (max_len < i) {\n            max_len = i;\n        }\n        if (min_len\
    \ > i) {\n            min_len = i;\n        }\n    }\n    long mid = (max_len\
    \ + min_len) / 2;\n    long mid2 = mid / 10;\n    long mid3 = mid % 10;\n    long\
    \ mid4 = mid2 / 10;\n    long mid5 = mid2 % 10;\n    long mid6 = mid3 / 10;\n\
    \    long mid7 = mid3 % 10;\n    long mid8 = mid4 / 10;\n    long mid9 = mid4\
    \ % 10;\n    long mid10 = mid5 / 10;\n    long mid11 = mid5 % 10;\n    long mid12\
    \ = mid6 / 10;\n    long mid13 = mid6 % 10;\n    long mid14 = mid7 / 10;\n   \
    \ long mid15 = mid7 % 10;\n    long mid16 = mid8 / 10;\n    long mid17 = mid8\
    \ % 10;\n    long mid18 = mid9 / 10;\n    long mid19 = mid9 % 10;\n    long mid20\
    \ = mid10 / 10;\n    long mid21 = mid10 % 10;\n    long mid22 = mid11 / 10;\n\
    \    long mid23 = mid11 % 10;\n    long mid24 = mid12 / 10;\n    long mid25 =\
    \ mid12 % 10;\n    long mid26 = mid13 / 10;\n    long mid27 = mid13 % 10;\n  \
    \  long mid28 = mid14 / 10;\n    long mid29 = mid14 % 10;\n    long mid30 = mid15\
    \ / 10;\n    long mid31 = mid15 % 10;\n    long mid32 = mid16 / 10;\n    long\
    \ mid33 = mid16 % 10;\n    long mid34 = mid17 / 10;\n    long mid35 = mid17 %\
    \ 10;\n    long mid36 = mid18 / 10;\n    long mid37 = mid18 % 10;\n    long mid38\
    \ = mid19 / 10;\n    long mid39 = mid19 % 10;\n    long mid40 = mid20 / 10;\n\
    \    long mid41 = mid20 % 10;\n    long mid42 = mid21 / 10;\n    long mid43 =\
    \ mid21 % 10;\n    long mid44 = mid22 / 10;\n    long mid45 = mid22 % 10;\n  \
    \  long mid46 = mid23 / 10;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({2, 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({1, -1, 55}))) == (std::vector<std::string>({\"\
    One\"})));\n    assert(candidate((std::vector<long>({1, -1, 3, 2}))) == (std::vector<std::string>({\"\
    Three\", \"Two\", \"One\"})));\n    assert(candidate((std::vector<long>({9, 4,\
    \ 8}))) == (std::vector<std::string>({\"Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "tmpjvzbtk2t: /tmp/tmpjvzbtk2t.cpp:82: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    std::vector<std::string>\
    \ res;\n    if (arr.size() == 0) {\n        return res;\n    }\n    long min_val\
    \ = arr[0];\n    long max_val = arr[0];\n    for (auto i : arr) {\n        if\
    \ (i < min_val) {\n            min_val = i;\n        }\n        if (i > max_val)\
    \ {\n            max_val = i;\n        }\n    }\n    long diff = max_val - min_val;\n\
    \    long mid = min_val + diff / 2;\n    long start = min_val;\n    long end =\
    \ max_val;\n    while (start < end) {\n        long mid = (start + end) / 2;\n\
    \        long midval = arr[mid];\n        if (midval < mid) {\n            start\
    \ = mid + 1;\n        } else if (midval > mid) {\n            end = mid - 1;\n\
    \        } else {\n            res.push_back(names[midval]);\n            start\
    \ = mid + 1;\n            end = mid - 1;\n        }\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({2,\
    \ 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 55}))) == (std::vector<std::string>({\"One\"})));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 3, 2}))) == (std::vector<std::string>({\"Three\", \"Two\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>({9, 4, 8}))) == (std::vector<std::string>({\"\
    Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpo6d2zqpq.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpo6d2zqpq.cpp:46:27: error:\
    \ \u2018names\u2019 was not declared in this scope\n   46 |             res.push_back(names[midval]);\n\
    \      |                           ^~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    std::vector<std::string>\
    \ res;\n    long long n = arr.size();\n    if (n <= 0) {\n        return res;\n\
    \    }\n    long long m = n / 10;\n    long long r = n % 10;\n    long long temp;\n\
    \    long long count = 0;\n    for (long long i = 0; i < m; i++) {\n        temp\
    \ = arr[i];\n        arr[i] = arr[m];\n        arr[m] = temp;\n        count++;\n\
    \    }\n    for (long long i = 0; i < r; i++) {\n        temp = arr[i];\n    \
    \    arr[i] = arr[count];\n        arr[count] = temp;\n        count--;\n    }\n\
    \    for (long long i = 0; i < m; i++) {\n        temp = arr[i];\n        arr[i]\
    \ = arr[m];\n        arr[m] = temp;\n        count--;\n    }\n    for (long long\
    \ i = 0; i < r; i++) {\n        temp = arr[i];\n        arr[i] = arr[count];\n\
    \        arr[count] = temp;\n        count++;\n    }\n    for (long long i = 0;\
    \ i < m; i++) {\n        temp = arr[i];\n        arr[i] = arr[m];\n        arr[m]\
    \ = temp;\n        count--;\n    }\n    for (long long i = 0; i < r; i++) {\n\
    \        temp = arr[i];\n        arr[i] = arr[count];\n        arr[count] = temp;\n\
    \        count++;\n    }\n    for (long long i = 0; i < m; i++) {\n        temp\
    \ = arr[i];\n        arr[i] = arr[m];\n        arr[m] = temp;\n        count--;\n\
    \    }\n    for (long long i = 0; i < r; i++) {\n        temp = arr[i];\n    \
    \    arr[i] = arr[count];\n        arr[count] = temp;\n        count++;\n    }\n\
    \    for (long long i = 0; i < m; i++) {\n        temp = arr[i];\n        arr[i]\
    \ = arr[m];\n        arr[m] = temp;\n        count--;\n    }\n    for (long long\
    \ i = 0; i < r; i++) {\n        temp = arr[i];\n        arr[i] = arr[count];\n\
    \        arr[count] = temp;\n        count++;\n    }\n    for (long long i = 0;\
    \ i < m; i++) {\n        temp = arr[i];\n        arr[i] = arr[m];\n        arr[m]\
    \ = temp;\n        count--;\n    }\n    for (long long i = 0; i < r; i++) {\n\
    \        temp = arr[i];\n        arr[i] = arr[count];\n        arr[count] = temp;\n\
    \        count++;\n    }\n    for (long long i = 0; i < m; i++) {\n        temp\
    \ = arr[i];\n        arr[i] = arr[m];\n        arr[m] = temp;\n        count--;\n\
    \    }\n    for (long long i = 0; i < r; i++) {\n        temp = arr[i];\n    \
    \    arr[i] = arr[count];\n        arr[count] = temp;\n        count++;\n    }\n\
    \    for (long long i = 0; i < m; i++) {\n        temp = arr[i];\n        arr[i]\
    \ = arr[m];\n        arr[m] = temp;\n        count--;\n\n}\nint main() {\n   \
    \ auto candidate = by_length;\n    assert(candidate((std::vector<long>({2, 1,\
    \ 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 55}))) == (std::vector<std::string>({\"One\"})));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 3, 2}))) == (std::vector<std::string>({\"Three\", \"Two\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>({9, 4, 8}))) == (std::vector<std::string>({\"\
    Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpj0a94fjv.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpj0a94fjv.cpp:120:12: error:\
    \ a function-definition is not allowed here before \u2018{\u2019 token\n  120\
    \ | int main() {\n      |            ^\n/tmp/tmpj0a94fjv.cpp:127:1: error: expected\
    \ \u2018}\u2019 at end of input\n  127 | }\n      | ^\n/tmp/tmpj0a94fjv.cpp:19:59:\
    \ note: to match this \u2018{\u2019\n   19 | std::vector<std::string> by_length(std::vector<long>\
    \ arr) {\n      |                                                           ^\n\
    /tmp/tmpj0a94fjv.cpp:127:1: warning: control reaches end of non-void function\
    \ [-Wreturn-type]\n  127 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    std::vector<std::string>\
    \ result;\n    long temp;\n    long length = arr.size();\n    long max_len = 0,\
    \ min_len = 0;\n    for (long i = 0; i < length; i++) {\n        temp = arr[i];\n\
    \        if (temp > max_len) {\n            max_len = temp;\n        }\n     \
    \   if (temp < min_len) {\n            min_len = temp;\n        }\n    }\n   \
    \ long min_len = min_len + 1;\n    long max_len = max_len + 1;\n    long length\
    \ = max_len - min_len;\n    long mod = length / 10;\n    long remainder = length\
    \ % 10;\n    long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n  \
    \      temp = arr[i];\n        if (temp > max_len) {\n            temp = max_len\
    \ - 1;\n        }\n        if (temp < min_len) {\n            temp = min_len;\n\
    \        }\n        if (temp < 10) {\n            temp = temp - 10;\n        }\n\
    \        if (temp > 9) {\n            temp = temp - 9;\n        }\n        if\
    \ (temp == remainder) {\n            count++;\n        }\n        if (temp ==\
    \ mod) {\n            count++;\n        }\n        result.push_back(to_string(temp));\n\
    \    }\n    if (count > 0) {\n        result.push_back(\"One\");\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({2,\
    \ 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 55}))) == (std::vector<std::string>({\"One\"})));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 3, 2}))) == (std::vector<std::string>({\"Three\", \"Two\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>({9, 4, 8}))) == (std::vector<std::string>({\"\
    Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp08mm8_e0.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmp08mm8_e0.cpp:33:10: error:\
    \ redeclaration of \u2018long int min_len\u2019\n   33 |     long min_len = min_len\
    \ + 1;\n      |          ^~~~~~~\n/tmp/tmp08mm8_e0.cpp:23:23: note: \u2018long\
    \ int min_len\u2019 previously declared here\n   23 |     long max_len = 0, min_len\
    \ = 0;\n      |                       ^~~~~~~\n/tmp/tmp08mm8_e0.cpp:34:10: error:\
    \ redeclaration of \u2018long int max_len\u2019\n   34 |     long max_len = max_len\
    \ + 1;\n      |          ^~~~~~~\n/tmp/tmp08mm8_e0.cpp:23:10: note: \u2018long\
    \ int max_len\u2019 previously declared here\n   23 |     long max_len = 0, min_len\
    \ = 0;\n      |          ^~~~~~~\n/tmp/tmp08mm8_e0.cpp:35:10: error: redeclaration\
    \ of \u2018long int length\u2019\n   35 |     long length = max_len - min_len;\n\
    \      |          ^~~~~~\n/tmp/tmp08mm8_e0.cpp:22:10: note: \u2018long int length\u2019\
    \ previously declared here\n   22 |     long length = arr.size();\n      |   \
    \       ^~~~~~\n/tmp/tmp08mm8_e0.cpp:59:26: error: \u2018to_string\u2019 was not\
    \ declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019?\n\
    \   59 |         result.push_back(to_string(temp));\n      |                 \
    \         ^~~~~~~~~\n      |                          std::__cxx11::to_string\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/s"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    std::vector<std::string>\
    \ result;\n    long long n = arr.size();\n    if (n == 0) {\n        return result;\n\
    \    }\n    long long m = n / 10;\n    long long r = n % 10;\n    long long start\
    \ = 0, end = m;\n    while (start < end) {\n        long long mid = start + (end\
    \ - start) / 2;\n        long long midVal = arr[mid];\n        if (midVal < 10)\
    \ {\n            end = mid;\n        } else if (midVal > 9) {\n            start\
    \ = mid + 1;\n        } else {\n            result.push_back(names[midVal]);\n\
    \            start = mid + 1;\n        }\n    }\n    if (start < n) {\n      \
    \  result.push_back(names[r]);\n    }\n    return result;\n}\nint main() {\n \
    \   auto candidate = by_length;\n    assert(candidate((std::vector<long>({2, 1,\
    \ 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 55}))) == (std::vector<std::string>({\"One\"})));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 3, 2}))) == (std::vector<std::string>({\"Three\", \"Two\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>({9, 4, 8}))) == (std::vector<std::string>({\"\
    Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6gjzjmtu.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmp6gjzjmtu.cpp:36:30: error:\
    \ \u2018names\u2019 was not declared in this scope\n   36 |             result.push_back(names[midVal]);\n\
    \      |                              ^~~~~\n/tmp/tmp6gjzjmtu.cpp:41:26: error:\
    \ \u2018names\u2019 was not declared in this scope\n   41 |         result.push_back(names[r]);\n\
    \      |                          ^~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    if (arr.empty())\
    \ return {};\n    std::vector<long> sorted_arr(arr.begin(), arr.end());\n    std::sort(sorted_arr.begin(),\
    \ sorted_arr.end());\n    std::vector<long> reverse_arr(sorted_arr.rbegin(), sorted_arr.rend());\n\
    \    std::reverse(reverse_arr.begin(), reverse_arr.end());\n    std::vector<std::string>\
    \ result;\n    for (long i : reverse_arr) {\n        std::string name;\n     \
    \   if (i >= 1 && i <= 9) {\n            name = std::to_string(i - 1);\n     \
    \   }\n        else {\n            name = \"Unknown\";\n        }\n        result.push_back(name);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({2, 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({1, -1, 55}))) == (std::vector<std::string>({\"\
    One\"})));\n    assert(candidate((std::vector<long>({1, -1, 3, 2}))) == (std::vector<std::string>({\"\
    Three\", \"Two\", \"One\"})));\n    assert(candidate((std::vector<long>({9, 4,\
    \ 8}))) == (std::vector<std::string>({\"Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "tmplbl94fuc: /tmp/tmplbl94fuc.cpp:40: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    std::vector<std::string>\
    \ res;\n    if (arr.size() == 0) {\n        return res;\n    }\n    long min =\
    \ *std::min_element(arr.begin(), arr.end());\n    long max = *std::max_element(arr.begin(),\
    \ arr.end());\n    long mid = (min + max) / 2;\n    long mid2 = mid / 10;\n  \
    \  long mid3 = mid % 10;\n    long mid4 = mid2 / 10;\n    long mid5 = mid2 % 10;\n\
    \    long mid6 = mid3 / 10;\n    long mid7 = mid3 % 10;\n    long mid8 = mid4\
    \ / 10;\n    long mid9 = mid4 % 10;\n    long mid10 = mid5 / 10;\n    long mid11\
    \ = mid5 % 10;\n    long mid12 = mid6 / 10;\n    long mid13 = mid6 % 10;\n   \
    \ long mid14 = mid7 / 10;\n    long mid15 = mid7 % 10;\n    long mid16 = mid8\
    \ / 10;\n    long mid17 = mid8 % 10;\n    long mid18 = mid9 / 10;\n    long mid19\
    \ = mid9 % 10;\n    long mid20 = mid10 / 10;\n    long mid21 = mid10 % 10;\n \
    \   long mid22 = mid11 / 10;\n    long mid23 = mid11 % 10;\n    long mid24 = mid12\
    \ / 10;\n    long mid25 = mid12 % 10;\n    long mid26 = mid13 / 10;\n    long\
    \ mid27 = mid13 % 10;\n    long mid28 = mid14 / 10;\n    long mid29 = mid14 %\
    \ 10;\n    long mid30 = mid15 / 10;\n    long mid31 = mid15 % 10;\n    long mid32\
    \ = mid16 / 10;\n    long mid33 = mid16 % 10;\n    long mid34 = mid17 / 10;\n\
    \    long mid35 = mid17 % 10;\n    long mid36 = mid18 / 10;\n    long mid37 =\
    \ mid18 % 10;\n    long mid38 = mid19 / 10;\n    long mid39 = mid19 % 10;\n  \
    \  long mid40 = mid20 / 10;\n    long mid41 = mid20 % 10;\n    long mid42 = mid21\
    \ / 10;\n    long mid43 = mid21 % 10;\n    long mid44 = mid22 / 10;\n    long\
    \ mid45 = mid22 % 10;\n    long mid46 = mid23 / 10;\n    long mid47 = mid23 %\
    \ 10;\n    long mid48 = mid24 / 10;\n\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({2, 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({1, -1, 55}))) == (std::vector<std::string>({\"\
    One\"})));\n    assert(candidate((std::vector<long>({1, -1, 3, 2}))) == (std::vector<std::string>({\"\
    Three\", \"Two\", \"One\"})));\n    assert(candidate((std::vector<long>({9, 4,\
    \ 8}))) == (std::vector<std::string>({\"Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "tmp5cgkf58k: /tmp/tmp5cgkf58k.cpp:78: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    std::vector<std::string>\
    \ res;\n    long min = std::numeric_limits<long>::min();\n    long max = std::numeric_limits<long>::max();\n\
    \    long mid = 0;\n    for (long i : arr) {\n        if (i < min) {\n       \
    \     mid = min;\n        } else if (i > max) {\n            mid = max;\n    \
    \    } else {\n            mid = i;\n        }\n        std::string name;\n  \
    \      switch (mid) {\n            case 1:\n                name = \"One\";\n\
    \                break;\n            case 2:\n                name = \"Two\";\n\
    \                break;\n            case 3:\n                name = \"Three\"\
    ;\n                break;\n            case 4:\n                name = \"Four\"\
    ;\n                break;\n            case 5:\n                name = \"Five\"\
    ;\n                break;\n            case 6:\n                name = \"Six\"\
    ;\n                break;\n            case 7:\n                name = \"Seven\"\
    ;\n                break;\n            case 8:\n                name = \"Eight\"\
    ;\n                break;\n            case 9:\n                name = \"Nine\"\
    ;\n                break;\n            default:\n                name = \"Unknown\"\
    ;\n                break;\n        }\n        res.push_back(name);\n    }\n  \
    \  return res;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({2,\
    \ 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 55}))) == (std::vector<std::string>({\"One\"})));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 3, 2}))) == (std::vector<std::string>({\"Three\", \"Two\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>({9, 4, 8}))) == (std::vector<std::string>({\"\
    Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "tmpqd4ya5sd: /tmp/tmpqd4ya5sd.cpp:71: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    std::vector<std::string>\
    \ result;\n    long temp;\n    for (long i = 0; i < arr.size(); i++) {\n     \
    \   if (arr[i] > 9) {\n            temp = arr[i];\n            arr[i] = arr[i]\
    \ / 10;\n            arr[i] = arr[i] * 10;\n            arr[i] = temp;\n     \
    \   }\n    }\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i]\
    \ > 9) {\n            result.push_back(\"Nine\");\n        } else {\n        \
    \    result.push_back(\"One\");\n        }\n    }\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] > 9) {\n            result.push_back(\"Eight\");\n\
    \        } else {\n            result.push_back(\"Two\");\n        }\n    }\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] > 9) {\n    \
    \        result.push_back(\"Seven\");\n        } else {\n            result.push_back(\"\
    Three\");\n        }\n    }\n    for (long i = 0; i < arr.size(); i++) {\n   \
    \     if (arr[i] > 9) {\n            result.push_back(\"Six\");\n        } else\
    \ {\n            result.push_back(\"Four\");\n        }\n    }\n    for (long\
    \ i = 0; i < arr.size(); i++) {\n        if (arr[i] > 9) {\n            result.push_back(\"\
    Five\");\n        } else {\n            result.push_back(\"Five\");\n        }\n\
    \    }\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] > 9) {\n\
    \            result.push_back(\"Four\");\n        } else {\n            result.push_back(\"\
    Four\");\n        }\n    }\n    for (long i = 0; i < arr.size(); i++) {\n    \
    \    if (arr[i] > 9) {\n            result.push_back(\"Three\");\n        } else\
    \ {\n            result.push_back(\"Two\");\n        }\n    }\n    for (long i\
    \ = 0; i < arr.size(); i++) {\n        if (arr[i] > 9) {\n            result.push_back(\"\
    Two\");\n        } else {\n            result.push_back(\"One\");\n        }\n\
    \    }\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] > 9) {\n\
    \            result.push_back(\"One\");\n        } else {\n            result.push_back(\"\
    One\");\n        }\n    }\n    for (long i = 0; i < arr.size(); i++) {\n     \
    \   if (arr[i] > 9) {\n            result.push_back(\"One\");\n        } else\
    \ {\n            result.push_back(\"One\");\n        }\n    }\n    for (long i\
    \ = 0; i < arr.size(); i++) {\n        if (arr[i] > 9) {\n            result.push_back(\"\
    One\");\n        } else {\n            result.push_back(\"One\");\n        }\n\
    \    }\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] > 9) {\n\
    \            result.push_back(\"One\");\n        } else {\n            result.push_back(\"\
    One\");\n        }\n    }\n    for (long i = 0; i < arr.size(); i++) {\n     \
    \   if (arr[i] > 9) {\n            result.push_back(\"One\");\n        } else\
    \ {\n            result.push_back(\"One\");\n        }\n    }\n    for (long i\
    \ = 0; i < arr.size(); i++) {\n        if (arr[i] > 9) {\n            result.push_back(\"\
    One\");\n        } else {\n            result.push_back(\"One\");\n        }\n\
    \    }\n    for (long i = 0; i < \n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({2, 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({1, -1, 55}))) == (std::vector<std::string>({\"\
    One\"})));\n    assert(candidate((std::vector<long>({1, -1, 3, 2}))) == (std::vector<std::string>({\"\
    Three\", \"Two\", \"One\"})));\n    assert(candidate((std::vector<long>({9, 4,\
    \ 8}))) == (std::vector<std::string>({\"Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8e77abh3.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmp8e77abh3.cpp:129:1: error:\
    \ expected primary-expression before \u2018}\u2019 token\n  129 | }\n      | ^\n\
    /tmp/tmp8e77abh3.cpp:128:25: error: expected \u2018;\u2019 before \u2018}\u2019\
    \ token\n  128 |     for (long i = 0; i <\n      |                         ^\n\
    \      |                         ;\n  129 | }\n      | ~                     \
    \   \n/tmp/tmp8e77abh3.cpp:129:1: error: expected primary-expression before \u2018\
    }\u2019 token\n  129 | }\n      | ^\n/tmp/tmp8e77abh3.cpp:128:25: error: expected\
    \ \u2018)\u2019 before \u2018}\u2019 token\n  128 |     for (long i = 0; i <\n\
    \      |         ~               ^\n      |                         )\n  129 |\
    \ }\n      | ~                        \n/tmp/tmp8e77abh3.cpp:129:1: error: expected\
    \ primary-expression before \u2018}\u2019 token\n  129 | }\n      | ^\n/tmp/tmp8e77abh3.cpp:129:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    std::vector<std::string>\
    \ res;\n    if (arr.size() == 0) {\n        return res;\n    }\n    long max_len\
    \ = *std::max_element(arr.begin(), arr.end());\n    long min_len = *std::min_element(arr.begin(),\
    \ arr.end());\n    long mid = max_len >> 1;\n    long mid2 = max_len >> 1;\n \
    \   long mid3 = max_len >> 1;\n    long mid4 = max_len >> 1;\n    long mid5 =\
    \ max_len >> 1;\n    long mid6 = max_len >> 1;\n    long mid7 = max_len >> 1;\n\
    \    long mid8 = max_len >> 1;\n    long mid9 = max_len >> 1;\n    long mid10\
    \ = max_len >> 1;\n    long mid11 = max_len >> 1;\n    long mid12 = max_len >>\
    \ 1;\n    long mid13 = max_len >> 1;\n    long mid14 = max_len >> 1;\n    long\
    \ mid15 = max_len >> 1;\n    long mid16 = max_len >> 1;\n    long mid17 = max_len\
    \ >> 1;\n    long mid18 = max_len >> 1;\n    long mid19 = max_len >> 1;\n    long\
    \ mid20 = max_len >> 1;\n    long mid21 = max_len >> 1;\n    long mid22 = max_len\
    \ >> 1;\n    long mid23 = max_len >> 1;\n    long mid24 = max_len >> 1;\n    long\
    \ mid25 = max_len >> 1;\n    long mid26 = max_len >> 1;\n    long mid27 = max_len\
    \ >> 1;\n    long mid28 = max_len >> 1;\n    long mid29 = max_len >> 1;\n    long\
    \ mid30 = max_len >> 1;\n    long mid31 = max_len >> 1;\n    long mid32 = max_len\
    \ >> 1;\n    long mid33 = max_len >> 1;\n    long mid34 = max_len >> 1;\n    long\
    \ mid35 = max_len >> 1;\n    long mid36 = max_len >> 1;\n    long mid37 = max_len\
    \ >> 1;\n    long mid38 = max_len >> 1;\n    long mid39 = max_len >> 1;\n    long\
    \ mid40 = max_len >> 1;\n    long mid41 = max_len >> 1;\n    long mid42 = max_len\
    \ >> 1;\n    long mid43 = max_len >> 1;\n    long mid44 = max_len >> 1;\n    long\
    \ mid45 = max_len >> 1;\n    long mid46 = max_len >> 1;\n    long mid47 = max_len\
    \ >> 1;\n    long mid48 = max_len >> \n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({2, 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({1, -1, 55}))) == (std::vector<std::string>({\"\
    One\"})));\n    assert(candidate((std::vector<long>({1, -1, 3, 2}))) == (std::vector<std::string>({\"\
    Three\", \"Two\", \"One\"})));\n    assert(candidate((std::vector<long>({9, 4,\
    \ 8}))) == (std::vector<std::string>({\"Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp40vsjew_.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmp40vsjew_.cpp:74:1: error:\
    \ expected primary-expression before \u2018}\u2019 token\n   74 | }\n      | ^\n\
    /tmp/tmp40vsjew_.cpp:74:1: warning: control reaches end of non-void function [-Wreturn-type]\n\
    \   74 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    if (arr.empty())\
    \ return {};\n    std::vector<long> arr_reversed;\n    arr_reversed.reserve(arr.size());\n\
    \    for (auto &i : arr) {\n        if (i >= 1 && i <= 9) {\n            arr_reversed.push_back(i);\n\
    \        }\n    }\n    std::sort(arr_reversed.begin(), arr_reversed.end());\n\
    \    arr_reversed.erase(std::unique(arr_reversed.begin(), arr_reversed.end()),\
    \ arr_reversed.end());\n    std::vector<std::string> arr_names;\n    arr_names.reserve(arr_reversed.size());\n\
    \    for (auto &i : arr_reversed) {\n        arr_names.push_back(\"One\");\n \
    \       arr_names.push_back(\"Two\");\n        arr_names.push_back(\"Three\");\n\
    \        arr_names.push_back(\"Four\");\n        arr_names.push_back(\"Five\"\
    );\n        arr_names.push_back(\"Six\");\n        arr_names.push_back(\"Seven\"\
    );\n        arr_names.push_back(\"Eight\");\n        arr_names.push_back(\"Nine\"\
    );\n        arr_names.push_back(i);\n    }\n    return arr_names;\n}\nint main()\
    \ {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({2,\
    \ 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 55}))) == (std::vector<std::string>({\"One\"})));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 3, 2}))) == (std::vector<std::string>({\"Three\", \"Two\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>({9, 4, 8}))) == (std::vector<std::string>({\"\
    Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpypw80zak.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpypw80zak.cpp:42:30: error:\
    \ no matching function for call to \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >::push_back(long int&)\u2019\n   42 |         arr_names.push_back(i);\n   \
    \   |                              ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmpypw80zak.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018long int\u2019 to \u2018\
    const value_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019\
    }\n 1184 |       push_back(const value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>; _Alloc\
    \ = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::value_type\
    \ = std::__cxx11::basic_string<char>]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018long int\u2019 to \u2018\
    std::vector<std::__cxx11::basic_string<char> >::value_type&&\u2019 {aka \u2018\
    std::__cxx11::basic_string<char>&&\u2019}\n 1200 |"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    std::vector<std::string>\
    \ res;\n    if (arr.size() == 0) {\n        return res;\n    }\n    long max =\
    \ *std::max_element(arr.begin(), arr.end());\n    long min = *std::min_element(arr.begin(),\
    \ arr.end());\n    long mid = (max + min) / 2;\n    long mid2 = mid / 10;\n  \
    \  long mid3 = mid % 10;\n    long mid4 = mid2 / 10;\n    long mid5 = mid2 % 10;\n\
    \    long mid6 = mid3 / 10;\n    long mid7 = mid3 % 10;\n    long mid8 = mid4\
    \ / 10;\n    long mid9 = mid4 % 10;\n    long mid10 = mid5 / 10;\n    long mid11\
    \ = mid5 % 10;\n    long mid12 = mid6 / 10;\n    long mid13 = mid6 % 10;\n   \
    \ long mid14 = mid7 / 10;\n    long mid15 = mid7 % 10;\n    long mid16 = mid8\
    \ / 10;\n    long mid17 = mid8 % 10;\n    long mid18 = mid9 / 10;\n    long mid19\
    \ = mid9 % 10;\n    long mid20 = mid10 / 10;\n    long mid21 = mid10 % 10;\n \
    \   long mid22 = mid11 / 10;\n    long mid23 = mid11 % 10;\n    long mid24 = mid12\
    \ / 10;\n    long mid25 = mid12 % 10;\n    long mid26 = mid13 / 10;\n    long\
    \ mid27 = mid13 % 10;\n    long mid28 = mid14 / 10;\n    long mid29 = mid14 %\
    \ 10;\n    long mid30 = mid15 / 10;\n    long mid31 = mid15 % 10;\n    long mid32\
    \ = mid16 / 10;\n    long mid33 = mid16 % 10;\n    long mid34 = mid17 / 10;\n\
    \    long mid35 = mid17 % 10;\n    long mid36 = mid18 / 10;\n    long mid37 =\
    \ mid18 % 10;\n    long mid38 = mid19 / 10;\n    long mid39 = mid19 % 10;\n  \
    \  long mid40 = mid20 / 10;\n    long mid41 = mid20 % 10;\n    long mid42 = mid21\
    \ / 10;\n    long mid43 = mid21 % 10;\n    long mid44 = mid22 / 10;\n    long\
    \ mid45 = mid22 % 10;\n    long mid46 = mid23 / 10;\n    long mid47 = mid23 %\
    \ 10;\n    long mid48 = mid24 / 10;\n\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({2, 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({1, -1, 55}))) == (std::vector<std::string>({\"\
    One\"})));\n    assert(candidate((std::vector<long>({1, -1, 3, 2}))) == (std::vector<std::string>({\"\
    Three\", \"Two\", \"One\"})));\n    assert(candidate((std::vector<long>({9, 4,\
    \ 8}))) == (std::vector<std::string>({\"Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "tmp4aqqa75g: /tmp/tmp4aqqa75g.cpp:78: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    std::vector<std::string>\
    \ ans;\n    long n = arr.size();\n    long m = n;\n    long i = 0;\n    long j\
    \ = 0;\n    long k = 0;\n    while (i < n) {\n        while (j < m) {\n      \
    \      if (arr[j] < arr[j + 1]) {\n                long tmp = arr[j];\n      \
    \          arr[j] = arr[j + 1];\n                arr[j + 1] = tmp;\n         \
    \   }\n            j++;\n        }\n        ans.push_back(to_string(arr[k]));\n\
    \        k++;\n        i++;\n        j = 0;\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({2,\
    \ 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 55}))) == (std::vector<std::string>({\"One\"})));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 3, 2}))) == (std::vector<std::string>({\"Three\", \"Two\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>({9, 4, 8}))) == (std::vector<std::string>({\"\
    Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpg6i1l_f3.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpg6i1l_f3.cpp:35:23: error:\
    \ \u2018to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   35 |         ans.push_back(to_string(arr[k]));\n      |                \
    \       ^~~~~~~~~\n      |                       std::__cxx11::to_string\nIn file\
    \ included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpg6i1l_f3.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:6598:3:\
    \ note: \u2018std::__cxx11::to_string\u2019 declared here\n 6598 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    std::vector<std::string>\
    \ result;\n    long temp;\n    long sum = 0;\n    long min = arr[0];\n    long\
    \ max = arr[0];\n    for (long i : arr) {\n        sum += i;\n        if (i <\
    \ min) min = i;\n        if (i > max) max = i;\n    }\n    long mid = sum / 10;\n\
    \    long remainder = sum % 10;\n    long start = mid - 1;\n    long end = mid\
    \ + 1;\n    long index = 0;\n    while (start >= 0) {\n        temp = arr[start];\n\
    \        arr[start] = arr[end];\n        arr[end] = temp;\n        start -= 1;\n\
    \        end += 1;\n        index += 1;\n    }\n    long index2 = 0;\n    while\
    \ (end < arr.size()) {\n        temp = arr[end];\n        arr[end] = arr[start];\n\
    \        arr[start] = temp;\n        end += 1;\n        start += 1;\n        index2\
    \ += 1;\n    }\n    long index3 = 0;\n    while (end < arr.size()) {\n       \
    \ temp = arr[end];\n        arr[end] = arr[start];\n        arr[start] = temp;\n\
    \        end += 1;\n        start += 1;\n        index3 += 1;\n    }\n    long\
    \ index4 = 0;\n    while (end < arr.size()) {\n        temp = arr[end];\n    \
    \    arr[end] = arr[start];\n        arr[start] = temp;\n        end += 1;\n \
    \       start += 1;\n        index4 += 1;\n    }\n    long index5 = 0;\n    while\
    \ (end < arr.size()) {\n        temp = arr[end];\n        arr[end] = arr[start];\n\
    \        arr[start] = temp;\n        end += 1;\n        start += 1;\n        index5\
    \ += 1;\n    }\n    long index6 = 0;\n    while (end < arr.size()) {\n       \
    \ temp = arr[end];\n        arr[end] = arr[start];\n        arr[start] = temp;\n\
    \        end += 1;\n        start += 1;\n        index6 += 1;\n    }\n    long\
    \ index7 = 0;\n    while (end < arr.size()) {\n        temp = arr[end];\n    \
    \    arr[end] = arr[start];\n        arr[start] = temp;\n        end += 1;\n \
    \       start += 1;\n        index7 += 1;\n    }\n    long index8 = 0;\n    while\
    \ (end < arr.size()) {\n        temp = arr[end];\n        arr[end] = arr[start];\n\
    \        arr[start] = temp;\n        end += 1;\n        start += 1;\n        index8\
    \ += 1;\n    }\n    long index9 = 0;\n    while (end < arr.size()) {\n       \
    \ temp = arr[end];\n        arr[end] = arr[start];\n\n}\nint main() {\n    auto\
    \ candidate = by_length;\n    assert(candidate((std::vector<long>({2, 1, 1, 4,\
    \ 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 55}))) == (std::vector<std::string>({\"One\"})));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 3, 2}))) == (std::vector<std::string>({\"Three\", \"Two\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>({9, 4, 8}))) == (std::vector<std::string>({\"\
    Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5ig2c94d.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmp5ig2c94d.cpp:112:12: error:\
    \ a function-definition is not allowed here before \u2018{\u2019 token\n  112\
    \ | int main() {\n      |            ^\n/tmp/tmp5ig2c94d.cpp:119:1: error: expected\
    \ \u2018}\u2019 at end of input\n  119 | }\n      | ^\n/tmp/tmp5ig2c94d.cpp:19:59:\
    \ note: to match this \u2018{\u2019\n   19 | std::vector<std::string> by_length(std::vector<long>\
    \ arr) {\n      |                                                           ^\n\
    /tmp/tmp5ig2c94d.cpp:119:1: warning: no return statement in function returning\
    \ non-void [-Wreturn-type]\n  119 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    std::vector<std::string>\
    \ ret;\n    long temp;\n    long length = arr.size();\n    long min = arr[0];\n\
    \    long max = arr[0];\n    for (long i = 0; i < length; i++) {\n        temp\
    \ = arr[i];\n        if (temp < min) {\n            min = temp;\n        }\n \
    \       if (temp > max) {\n            max = temp;\n        }\n    }\n    long\
    \ mid = min + (max - min) / 2;\n    long mid2 = mid / 10;\n    long mid3 = mid\
    \ % 10;\n    long mid4 = mid2 / 10;\n    long mid5 = mid2 % 10;\n    long mid6\
    \ = mid3 / 10;\n    long mid7 = mid3 % 10;\n    long mid8 = mid4 / 10;\n    long\
    \ mid9 = mid4 % 10;\n    long mid10 = mid5 / 10;\n    long mid11 = mid5 % 10;\n\
    \    long mid12 = mid6 / 10;\n    long mid13 = mid6 % 10;\n    long mid14 = mid7\
    \ / 10;\n    long mid15 = mid7 % 10;\n    long mid16 = mid8 / 10;\n    long mid17\
    \ = mid8 % 10;\n    long mid18 = mid9 / 10;\n    long mid19 = mid9 % 10;\n   \
    \ long mid20 = mid10 / 10;\n    long mid21 = mid10 % 10;\n    long mid22 = mid11\
    \ / 10;\n    long mid23 = mid11 % 10;\n    long mid24 = mid12 / 10;\n    long\
    \ mid25 = mid12 % 10;\n    long mid26 = mid13 / 10;\n    long mid27 = mid13 %\
    \ 10;\n    long mid28 = mid14 / 10;\n    long mid29 = mid14 % 10;\n    long mid30\
    \ = mid15 / 10;\n    long mid31 = mid15 % 10;\n    long mid32 = mid16 / 10;\n\
    \    long mid33 = mid16 % 10;\n    long mid34 = mid17 / 10;\n    long mid35 =\
    \ mid17 % 10;\n    long mid36 = mid18 / 10;\n    long mid37 = mid18 % 10;\n  \
    \  long mid38 = mid19 / 10;\n    long mid39 = mid19 % 10;\n    long mid40 = mid20\
    \ / 10;\n    long mid41 = mid20 % 10;\n    long mid42 = mid21 / 10;\n    long\
    \ mid43 = mid21 % 10;\n    long mid44 = mid22 / 10;\n    long mid45 = mid22 %\
    \ 10;\n    long mid46 = mid\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({2, 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({1, -1, 55}))) == (std::vector<std::string>({\"\
    One\"})));\n    assert(candidate((std::vector<long>({1, -1, 3, 2}))) == (std::vector<std::string>({\"\
    Three\", \"Two\", \"One\"})));\n    assert(candidate((std::vector<long>({9, 4,\
    \ 8}))) == (std::vector<std::string>({\"Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6p5jjvmp.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmp6p5jjvmp.cpp:80:1: error:\
    \ expected \u2018,\u2019 or \u2018;\u2019 before \u2018}\u2019 token\n   80 |\
    \ }\n      | ^\n/tmp/tmp6p5jjvmp.cpp:80:1: warning: no return statement in function\
    \ returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    std::vector<std::string>\
    \ ans;\n    long n = arr.size();\n    long m = std::min(n, 9);\n    long k = std::max(n,\
    \ m);\n    long i = 1;\n    long j = 1;\n    long k = 0;\n    long l = 0;\n  \
    \  long m = std::min(n, 9);\n    long n = std::max(n, m);\n    long m = std::min(n,\
    \ 9);\n    long n = std::max(n, m);\n    long m = std::min(n, 9);\n    long n\
    \ = std::max(n, m);\n    long m = std::min(n, 9);\n    long n = std::max(n, m);\n\
    \    long m = std::min(n, 9);\n    long n = std::max(n, m);\n    long m = std::min(n,\
    \ 9);\n    long n = std::max(n, m);\n    long m = std::min(n, 9);\n    long n\
    \ = std::max(n, m);\n    long m = std::min(n, 9);\n    long n = std::max(n, m);\n\
    \    long m = std::min(n, 9);\n    long n = std::max(n, m);\n    long m = std::min(n,\
    \ 9);\n    long n = std::max(n, m);\n    long m = std::min(n, 9);\n    long n\
    \ = std::max(n, m);\n    long m = std::min(n, 9);\n    long n = std::max(n, m);\n\
    \    long m = std::min(n, 9);\n    long n = std::max(n, m);\n    long m = std::min(n,\
    \ 9);\n    long n = std::max(n, m);\n    long m = std::min(n, 9);\n    long n\
    \ = std::max(n, m);\n    long m = std::min(n, 9);\n    long n = std::max(n, m);\n\
    \    long m = std::min(n, 9);\n    long n = std::max(n, m);\n    long m = std::min(n,\
    \ 9);\n    long n = std::max(n, m);\n    long m = std::min(n, 9);\n    long n\
    \ = std::max(n, m);\n    long m = std::min(n, 9);\n    long n = std::max(n, m);\n\
    \    long m = std::min(n, 9);\n    long n = std::max(n, m);\n    long m = std::min(n,\
    \ 9);\n    long n = std::max(n, m);\n    long m = std::min(n, 9);\n    long n\
    \ = std::max(n, m);\n    long m = std::min(n, 9);\n    long n = std::max(n, m);\n\
    \    long m = std::min(n, 9);\n    long n = std::max(n, m);\n    long m = std::min(n,\
    \ 9);\n    long n = std::max(n, m);\n    long m = std::min(n, 9);\n    long n\
    \ = std::max(n, m);\n    long m = std::min(n, 9);\n    long n = std::max(n, m);\n\
    \    long m = std::min(n, 9);\n    long n = std::max(n, m);\n}\nint main() {\n\
    \    auto candidate = by_length;\n    assert(candidate((std::vector<long>({2,\
    \ 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 55}))) == (std::vector<std::string>({\"One\"})));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 3, 2}))) == (std::vector<std::string>({\"Three\", \"Two\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>({9, 4, 8}))) == (std::vector<std::string>({\"\
    Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpikxwu0ot.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpikxwu0ot.cpp:22:27: error:\
    \ no matching function for call to \u2018min(long int&, int)\u2019\n   22 |  \
    \   long m = std::min(n, 9);\n      |                           ^\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpikxwu0ot.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:198:5:\
    \ note: candidate: \u2018template<class _Tp> constexpr const _Tp& std::min(const\
    \ _Tp&, const _Tp&)\u2019\n  198 |     min(const _Tp& __a, const _Tp& __b)\n \
    \     |     ^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:198:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpikxwu0ot.cpp:22:27:\
    \ note:   deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018\
    long int\u2019 and \u2018int\u2019)\n   22 |     long m = std::min(n, 9);\n  \
    \    |                           ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \      "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    std::vector<std::string>\
    \ res;\n    long n = arr.size();\n    long m = 1;\n    while (m <= 9) {\n    \
    \    long sum = 0;\n        for (long i = 0; i < n; i++) {\n            if (arr[i]\
    \ >= m && arr[i] <= 9) {\n                sum += arr[i];\n            }\n    \
    \    }\n        res.push_back((m == 1) ? \"One\" : to_string(sum));\n        m\
    \ *= 10;\n    }\n    return res;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({2, 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({1, -1, 55}))) == (std::vector<std::string>({\"\
    One\"})));\n    assert(candidate((std::vector<long>({1, -1, 3, 2}))) == (std::vector<std::string>({\"\
    Three\", \"Two\", \"One\"})));\n    assert(candidate((std::vector<long>({9, 4,\
    \ 8}))) == (std::vector<std::string>({\"Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpcbg72rap.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpcbg72rap.cpp:30:42: error:\
    \ \u2018to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   30 |         res.push_back((m == 1) ? \"One\" : to_string(sum));\n     \
    \ |                                          ^~~~~~~~~\n      |              \
    \                            std::__cxx11::to_string\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpcbg72rap.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:6598:3:\
    \ note: \u2018std::__cxx11::to_string\u2019 declared here\n 6598 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    std::vector<std::string>\
    \ res;\n    long temp;\n    for (auto &i : arr) {\n        if (i >= 1 && i <=\
    \ 9) {\n            temp = i;\n        }\n    }\n    if (temp == -1) {\n     \
    \   return res;\n    }\n    long reverse = 0;\n    for (auto &i : arr) {\n   \
    \     if (i >= 1 && i <= 9) {\n            reverse = reverse * 10 + i - 1;\n \
    \       }\n    }\n    long reverse2 = reverse;\n    reverse = 0;\n    for (auto\
    \ &i : arr) {\n        if (i >= 1 && i <= 9) {\n            reverse = reverse\
    \ * 10 + i - 1;\n        }\n    }\n    reverse = reverse2;\n    for (auto &i :\
    \ arr) {\n        if (i >= 1 && i <= 9) {\n            reverse = reverse * 10\
    \ + i - 1;\n        }\n    }\n    reverse = reverse2;\n    for (auto &i : arr)\
    \ {\n        if (i >= 1 && i <= 9) {\n            reverse = reverse * 10 + i -\
    \ 1;\n        }\n    }\n    reverse = reverse2;\n    for (auto &i : arr) {\n \
    \       if (i >= 1 && i <= 9) {\n            reverse = reverse * 10 + i - 1;\n\
    \        }\n    }\n    reverse = reverse2;\n    for (auto &i : arr) {\n      \
    \  if (i >= 1 && i <= 9) {\n            reverse = reverse * 10 + i - 1;\n    \
    \    }\n    }\n    reverse = reverse2;\n    for (auto &i : arr) {\n        if\
    \ (i >= 1 && i <= 9) {\n            reverse = reverse * 10 + i - 1;\n        }\n\
    \    }\n    reverse = reverse2;\n    for (auto &i : arr) {\n        if (i >= 1\
    \ && i <= 9) {\n            reverse = reverse * 10 + i - 1;\n        }\n    }\n\
    \    reverse = reverse2;\n    for (auto &i : arr) {\n        if (i >= 1 && i <=\
    \ 9) {\n            reverse = reverse * 10 + i - 1;\n        }\n    }\n    reverse\
    \ = reverse2;\n    for (auto &i : arr) {\n        if (i >= 1 && i <= 9) {\n  \
    \          reverse = reverse * 10 + i - 1;\n        }\n    }\n    reverse = reverse2;\n\
    \    for (auto &i : arr) {\n        if (i >= 1 && i <= 9) {\n            reverse\
    \ = reverse * 10 + i - 1;\n        }\n    }\n    reverse = reverse2;\n    for\
    \ (auto &i : arr) {\n        if (i >= 1 && i <= 9) {\n            reverse = reverse\
    \ * 10 + i - 1;\n        }\n    }\n    reverse = reverse2;\n    for (auto &i :\
    \ arr) {\n        if (i >= 1 && i <= 9) {\n            reverse = reverse * 10\
    \ + i - 1;\n        }\n    }\n    reverse = reverse2;\n    for (auto &i \n}\n\
    int main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({2,\
    \ 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 55}))) == (std::vector<std::string>({\"One\"})));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 3, 2}))) == (std::vector<std::string>({\"Three\", \"Two\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>({9, 4, 8}))) == (std::vector<std::string>({\"\
    Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpyzzgzlbv.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpyzzgzlbv.cpp:110:17: error:\
    \ expected \u2018;\u2019 before \u2018}\u2019 token\n  110 |     for (auto &i\n\
    \      |                 ^\n      |                 ;\n  111 | }\n      | ~  \
    \              \n/tmp/tmpyzzgzlbv.cpp:111:1: error: expected primary-expression\
    \ before \u2018}\u2019 token\n  111 | }\n      | ^\n/tmp/tmpyzzgzlbv.cpp:110:17:\
    \ error: expected \u2018;\u2019 before \u2018}\u2019 token\n  110 |     for (auto\
    \ &i\n      |                 ^\n      |                 ;\n  111 | }\n      |\
    \ ~                \n/tmp/tmpyzzgzlbv.cpp:111:1: error: expected primary-expression\
    \ before \u2018}\u2019 token\n  111 | }\n      | ^\n/tmp/tmpyzzgzlbv.cpp:110:17:\
    \ error: expected \u2018)\u2019 before \u2018}\u2019 token\n  110 |     for (auto\
    \ &i\n      |         ~       ^\n      |                 )\n  111 | }\n      |\
    \ ~                \n/tmp/tmpyzzgzlbv.cpp:111:1: error: expected primary-expression\
    \ before \u2018}\u2019 token\n  111 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    std::vector<std::string>\
    \ res;\n    if (arr.size() == 0) {\n        return res;\n    }\n    long min =\
    \ arr[0];\n    long max = arr[0];\n    for (long i : arr) {\n        if (i < min)\
    \ {\n            min = i;\n        }\n        if (i > max) {\n            max\
    \ = i;\n        }\n    }\n    long mid = min + (max - min) / 2;\n    long mid2\
    \ = mid / 10;\n    long mid3 = mid % 10;\n    long mid4 = mid2 / 10;\n    long\
    \ mid5 = mid2 % 10;\n    long mid6 = mid3 / 10;\n    long mid7 = mid3 % 10;\n\
    \    long mid8 = mid4 / 10;\n    long mid9 = mid4 % 10;\n    long mid10 = mid5\
    \ / 10;\n    long mid11 = mid5 % 10;\n    long mid12 = mid6 / 10;\n    long mid13\
    \ = mid6 % 10;\n    long mid14 = mid7 / 10;\n    long mid15 = mid7 % 10;\n   \
    \ long mid16 = mid8 / 10;\n    long mid17 = mid8 % 10;\n    long mid18 = mid9\
    \ / 10;\n    long mid19 = mid9 % 10;\n    long mid20 = mid10 / 10;\n    long mid21\
    \ = mid10 % 10;\n    long mid22 = mid11 / 10;\n    long mid23 = mid11 % 10;\n\
    \    long mid24 = mid12 / 10;\n    long mid25 = mid12 % 10;\n    long mid26 =\
    \ mid13 / 10;\n    long mid27 = mid13 % 10;\n    long mid28 = mid14 / 10;\n  \
    \  long mid29 = mid14 % 10;\n    long mid30 = mid15 / 10;\n    long mid31 = mid15\
    \ % 10;\n    long mid32 = mid16 / 10;\n    long mid33 = mid16 % 10;\n    long\
    \ mid34 = mid17 / 10;\n    long mid35 = mid17 % 10;\n    long mid36 = mid18 /\
    \ 10;\n    long mid37 = mid18 % 10;\n    long mid38 = mid19 / 10;\n    long mid39\
    \ = mid19 % 10;\n    long mid40 = mid20 / 10;\n    long mid41 = mid20 % 10;\n\
    \    long mid42 = mid21 / 10;\n    long mid43 = mid21 % 10;\n    long mid44 =\
    \ mid22 / 10;\n    long mid45 = mid22 % 10;\n    long mid46 = mid23 / 10;\n  \
    \  long mid47\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({2,\
    \ 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 55}))) == (std::vector<std::string>({\"One\"})));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 3, 2}))) == (std::vector<std::string>({\"Three\", \"Two\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>({9, 4, 8}))) == (std::vector<std::string>({\"\
    Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpttd2ung0.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpttd2ung0.cpp:81:1: error:\
    \ expected initializer before \u2018}\u2019 token\n   81 | }\n      | ^\n/tmp/tmpttd2ung0.cpp:81:1:\
    \ warning: control reaches end of non-void function [-Wreturn-type]\n   81 | }\n\
    \      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    std::vector<std::string>\
    \ res;\n    long temp;\n    for (long i : arr) {\n        if (i >= 1 && i <= 9)\
    \ {\n            temp = i;\n        } else {\n            temp = 9 - i;\n    \
    \    }\n        res.push_back(by_length(temp));\n    }\n    return res;\n}\nint\
    \ main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({2,\
    \ 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 55}))) == (std::vector<std::string>({\"One\"})));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 3, 2}))) == (std::vector<std::string>({\"Three\", \"Two\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>({9, 4, 8}))) == (std::vector<std::string>({\"\
    Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2z6ntruw.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmp2z6ntruw.cpp:28:33: error:\
    \ could not convert \u2018temp\u2019 from \u2018long int\u2019 to \u2018std::vector<long\
    \ int>\u2019\n   28 |         res.push_back(by_length(temp));\n      |       \
    \                          ^~~~\n      |                                 |\n \
    \     |                                 long int\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    std::vector<std::string>\
    \ res;\n    if (arr.size() == 0) {\n        return res;\n    }\n    long min =\
    \ *std::min_element(arr.begin(), arr.end());\n    long max = *std::max_element(arr.begin(),\
    \ arr.end());\n    long mid = (min + max) / 2;\n    long mid2 = mid / 10;\n  \
    \  long mid3 = mid % 10;\n    long mid4 = mid2 / 10;\n    long mid5 = mid2 % 10;\n\
    \    long mid6 = mid3 / 10;\n    long mid7 = mid3 % 10;\n    long mid8 = mid4\
    \ / 10;\n    long mid9 = mid4 % 10;\n    long mid10 = mid5 / 10;\n    long mid11\
    \ = mid5 % 10;\n    long mid12 = mid6 / 10;\n    long mid13 = mid6 % 10;\n   \
    \ long mid14 = mid7 / 10;\n    long mid15 = mid7 % 10;\n    long mid16 = mid8\
    \ / 10;\n    long mid17 = mid8 % 10;\n    long mid18 = mid9 / 10;\n    long mid19\
    \ = mid9 % 10;\n    long mid20 = mid10 / 10;\n    long mid21 = mid10 % 10;\n \
    \   long mid22 = mid11 / 10;\n    long mid23 = mid11 % 10;\n    long mid24 = mid12\
    \ / 10;\n    long mid25 = mid12 % 10;\n    long mid26 = mid13 / 10;\n    long\
    \ mid27 = mid13 % 10;\n    long mid28 = mid14 / 10;\n    long mid29 = mid14 %\
    \ 10;\n    long mid30 = mid15 / 10;\n    long mid31 = mid15 % 10;\n    long mid32\
    \ = mid16 / 10;\n    long mid33 = mid16 % 10;\n    long mid34 = mid17 / 10;\n\
    \    long mid35 = mid17 % 10;\n    long mid36 = mid18 / 10;\n    long mid37 =\
    \ mid18 % 10;\n    long mid38 = mid19 / 10;\n    long mid39 = mid19 % 10;\n  \
    \  long mid40 = mid20 / 10;\n    long mid41 = mid20 % 10;\n    long mid42 = mid21\
    \ / 10;\n    long mid43 = mid21 % 10;\n    long mid44 = mid22 / 10;\n    long\
    \ mid45 = mid22 % 10;\n    long mid46 = mid23 / 10;\n    long mid47 = mid23 %\
    \ 10;\n    long mid48 = mid24 / 10;\n\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({2, 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({1, -1, 55}))) == (std::vector<std::string>({\"\
    One\"})));\n    assert(candidate((std::vector<long>({1, -1, 3, 2}))) == (std::vector<std::string>({\"\
    Three\", \"Two\", \"One\"})));\n    assert(candidate((std::vector<long>({9, 4,\
    \ 8}))) == (std::vector<std::string>({\"Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "tmpssoeso7s: /tmp/tmpssoeso7s.cpp:78: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    std::vector<std::string>\
    \ res;\n    long temp = 0;\n    for (long i : arr) {\n        if (i >= 1 && i\
    \ <= 9) {\n            temp = temp * 10 + i;\n        } else {\n            res.push_back(\"\
    Nine\");\n            break;\n        }\n    }\n    if (temp == 0)\n        return\
    \ res;\n    long reverse = temp;\n    while (reverse != 0) {\n        long rem\
    \ = reverse;\n        reverse = reverse / 10;\n        res.push_back(rem % 10\
    \ + \"One\");\n    }\n    return res;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({2, 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({1, -1, 55}))) == (std::vector<std::string>({\"\
    One\"})));\n    assert(candidate((std::vector<long>({1, -1, 3, 2}))) == (std::vector<std::string>({\"\
    Three\", \"Two\", \"One\"})));\n    assert(candidate((std::vector<long>({9, 4,\
    \ 8}))) == (std::vector<std::string>({\"Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "tmpbuvmcr91: /tmp/tmpbuvmcr91.cpp:42: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    std::vector<std::string>\
    \ res;\n    if (arr.size() == 0) {\n        return res;\n    }\n    long max =\
    \ *std::max_element(arr.begin(), arr.end());\n    long min = *std::min_element(arr.begin(),\
    \ arr.end());\n    long mid = (max + min) / 2;\n    long mid2 = mid / 10;\n  \
    \  long mid3 = mid % 10;\n    long mid4 = mid2 / 10;\n    long mid5 = mid2 % 10;\n\
    \    long mid6 = mid3 / 10;\n    long mid7 = mid3 % 10;\n    long mid8 = mid4\
    \ / 10;\n    long mid9 = mid4 % 10;\n    long mid10 = mid5 / 10;\n    long mid11\
    \ = mid5 % 10;\n    long mid12 = mid6 / 10;\n    long mid13 = mid6 % 10;\n   \
    \ long mid14 = mid7 / 10;\n    long mid15 = mid7 % 10;\n    long mid16 = mid8\
    \ / 10;\n    long mid17 = mid8 % 10;\n    long mid18 = mid9 / 10;\n    long mid19\
    \ = mid9 % 10;\n    long mid20 = mid10 / 10;\n    long mid21 = mid10 % 10;\n \
    \   long mid22 = mid11 / 10;\n    long mid23 = mid11 % 10;\n    long mid24 = mid12\
    \ / 10;\n    long mid25 = mid12 % 10;\n    long mid26 = mid13 / 10;\n    long\
    \ mid27 = mid13 % 10;\n    long mid28 = mid14 / 10;\n    long mid29 = mid14 %\
    \ 10;\n    long mid30 = mid15 / 10;\n    long mid31 = mid15 % 10;\n    long mid32\
    \ = mid16 / 10;\n    long mid33 = mid16 % 10;\n    long mid34 = mid17 / 10;\n\
    \    long mid35 = mid17 % 10;\n    long mid36 = mid18 / 10;\n    long mid37 =\
    \ mid18 % 10;\n    long mid38 = mid19 / 10;\n    long mid39 = mid19 % 10;\n  \
    \  long mid40 = mid20 / 10;\n    long mid41 = mid20 % 10;\n    long mid42 = mid21\
    \ / 10;\n    long mid43 = mid21 % 10;\n    long mid44 = mid22 / 10;\n    long\
    \ mid45 = mid22 % 10;\n    long mid46 = mid23 / 10;\n    long mid47 = mid23 %\
    \ 10;\n    long mid48 = mid24 / 10;\n\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({2, 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({1, -1, 55}))) == (std::vector<std::string>({\"\
    One\"})));\n    assert(candidate((std::vector<long>({1, -1, 3, 2}))) == (std::vector<std::string>({\"\
    Three\", \"Two\", \"One\"})));\n    assert(candidate((std::vector<long>({9, 4,\
    \ 8}))) == (std::vector<std::string>({\"Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "tmp44zzcbqj: /tmp/tmp44zzcbqj.cpp:78: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    if (arr.size()\
    \ == 0) {\n        return {};\n    }\n    std::vector<long> sorted_arr(arr.begin(),\
    \ arr.end());\n    std::sort(sorted_arr.begin(), sorted_arr.end());\n    std::vector<long>\
    \ reverse_arr(sorted_arr.rbegin(), sorted_arr.rend());\n    std::vector<std::string>\
    \ result;\n    for (long i : reverse_arr) {\n        if (i <= 9) {\n         \
    \   result.push_back(\"One\");\n        } else if (i <= 99) {\n            result.push_back(\"\
    Two\");\n        } else if (i <= 999) {\n            result.push_back(\"Three\"\
    );\n        } else if (i <= 9999) {\n            result.push_back(\"Four\");\n\
    \        } else if (i <= 99999) {\n            result.push_back(\"Five\");\n \
    \       } else if (i <= 999999) {\n            result.push_back(\"Six\");\n  \
    \      } else if (i <= 9999999) {\n            result.push_back(\"Seven\");\n\
    \        } else if (i <= 99999999) {\n            result.push_back(\"Eight\");\n\
    \        } else if (i <= 999999999) {\n            result.push_back(\"Nine\");\n\
    \        } else {\n            result.push_back(\"Ten\");\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({2,\
    \ 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 55}))) == (std::vector<std::string>({\"One\"})));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 3, 2}))) == (std::vector<std::string>({\"Three\", \"Two\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>({9, 4, 8}))) == (std::vector<std::string>({\"\
    Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "tmpyiacux8o: /tmp/tmpyiacux8o.cpp:54: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    // Your code\
    \ here\n    std::vector<std::string> res;\n    long n = arr.size();\n    long\
    \ m = 1;\n    long sum = 0;\n    long max = 0;\n    long min = 0;\n    long sum2\
    \ = 0;\n    long max2 = 0;\n    long min2 = 0;\n    long sum3 = 0;\n    long max3\
    \ = 0;\n    long min3 = 0;\n    long sum4 = 0;\n    long max4 = 0;\n    long min4\
    \ = 0;\n    long sum5 = 0;\n    long max5 = 0;\n    long min5 = 0;\n    long sum6\
    \ = 0;\n    long max6 = 0;\n    long min6 = 0;\n    long sum7 = 0;\n    long max7\
    \ = 0;\n    long min7 = 0;\n    long sum8 = 0;\n    long max8 = 0;\n    long min8\
    \ = 0;\n    long sum9 = 0;\n    long max9 = 0;\n    long min9 = 0;\n    long sum10\
    \ = 0;\n    long max10 = 0;\n    long min10 = 0;\n    long sum11 = 0;\n    long\
    \ max11 = 0;\n    long min11 = 0;\n    long sum12 = 0;\n    long max12 = 0;\n\
    \    long min12 = 0;\n    long sum13 = 0;\n    long max13 = 0;\n    long min13\
    \ = 0;\n    long sum14 = 0;\n    long max14 = 0;\n    long min14 = 0;\n    long\
    \ sum15 = 0;\n    long max15 = 0;\n    long min15 = 0;\n    long sum16 = 0;\n\
    \    long max16 = 0;\n    long min16 = 0;\n    long sum17 = 0;\n    long max17\
    \ = 0;\n    long min17 = 0;\n    long sum18 = 0;\n    long max18 = 0;\n    long\
    \ min18 = 0;\n    long sum19 = 0;\n    long max19 = 0;\n    long min19 = 0;\n\
    \    long sum20 = 0;\n    long max20 = 0;\n    long min20 = 0;\n    long sum21\
    \ = 0;\n    long max21 = 0;\n    long min21 = 0;\n    long sum22 = 0;\n    long\
    \ max22 = 0;\n    long min22 = 0;\n    long sum23 = 0;\n    long max23 = 0;\n\
    \    long min23 = 0;\n    long sum24 = 0;\n    long max24 = 0;\n    long min24\
    \ = 0;\n    long sum25 = 0;\n    long max25 = 0;\n    long min25 = 0;\n    long\
    \ sum26 = 0;\n    long max26 = 0;\n    long min26 = 0;\n    long sum27 = 0;\n\
    \    long max27 = 0;\n    long min27 = 0;\n    long sum28 = 0;\n    long max28\
    \ = 0;\n    long min28 = 0;\n    \n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({2, 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({1, -1, 55}))) == (std::vector<std::string>({\"\
    One\"})));\n    assert(candidate((std::vector<long>({1, -1, 3, 2}))) == (std::vector<std::string>({\"\
    Three\", \"Two\", \"One\"})));\n    assert(candidate((std::vector<long>({9, 4,\
    \ 8}))) == (std::vector<std::string>({\"Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "tmp_8dwdo2s: /tmp/tmp_8dwdo2s.cpp:112: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    // Your code\
    \ here\n    long long sum = 0;\n    for (long i = 0; i < arr.size(); i++) {\n\
    \        sum += arr[i];\n    }\n    long long mod = sum % 10;\n    long long rem\
    \ = sum / 10;\n    std::vector<std::string> ret;\n    if (mod == 0) {\n      \
    \  ret.push_back(\"One\");\n    }\n    if (rem == 0) {\n        ret.push_back(\"\
    Two\");\n    }\n    if (rem == 1) {\n        ret.push_back(\"Three\");\n    }\n\
    \    if (rem == 2) {\n        ret.push_back(\"Four\");\n    }\n    if (rem ==\
    \ 3) {\n        ret.push_back(\"Five\");\n    }\n    if (rem == 4) {\n       \
    \ ret.push_back(\"Six\");\n    }\n    if (rem == 5) {\n        ret.push_back(\"\
    Seven\");\n    }\n    if (rem == 6) {\n        ret.push_back(\"Eight\");\n   \
    \ }\n    if (rem == 7) {\n        ret.push_back(\"Nine\");\n    }\n    if (rem\
    \ == 8) {\n        ret.push_back(\"Ten\");\n    }\n    if (rem == 9) {\n     \
    \   ret.push_back(\"Eleven\");\n    }\n    if (rem == 10) {\n        ret.push_back(\"\
    Twelve\");\n    }\n    if (rem == 11) {\n        ret.push_back(\"Thirteen\");\n\
    \    }\n    if (rem == 12) {\n        ret.push_back(\"Fourteen\");\n    }\n  \
    \  if (rem == 13) {\n        ret.push_back(\"Fifteen\");\n    }\n    if (rem ==\
    \ 14) {\n        ret.push_back(\"Sixteen\");\n    }\n    if (rem == 15) {\n  \
    \      ret.push_back(\"Seventeen\");\n    }\n    if (rem == 16) {\n        ret.push_back(\"\
    Eighteen\");\n    }\n    if (rem == 17) {\n        ret.push_back(\"Nineteen\"\
    );\n    }\n    if (rem == 18) {\n        ret.push_back(\"Twenty\");\n    }\n \
    \   if (rem == 19) {\n        ret.push_back(\"Twenty One\");\n    }\n    if (rem\
    \ == 20) {\n        ret.push_back(\"Twenty Two\");\n    }\n    if (rem == 21)\
    \ {\n        ret.push_back(\"Twenty Three\");\n    }\n    if (rem == 22) {\n \
    \       ret.push_back(\"Twenty Four\");\n    }\n    if (rem == 23) {\n       \
    \ ret.push_back(\"Twenty Five\");\n    }\n    if (rem == 24) {\n        ret.push_back(\"\
    Twenty Six\");\n    }\n    if (rem == 25) {\n        ret.push_back(\"Twenty Seven\"\
    );\n    }\n    if (rem == 26) {\n        ret.push_back(\"Twenty Eight\");\n  \
    \  }\n    if (\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({2,\
    \ 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 55}))) == (std::vector<std::string>({\"One\"})));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 3, 2}))) == (std::vector<std::string>({\"Three\", \"Two\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>({9, 4, 8}))) == (std::vector<std::string>({\"\
    Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpc43gqufq.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpc43gqufq.cpp:113:1: error:\
    \ expected primary-expression before \u2018}\u2019 token\n  113 | }\n      | ^\n\
    /tmp/tmpc43gqufq.cpp:112:9: error: expected \u2018)\u2019 before \u2018}\u2019\
    \ token\n  112 |     if (\n      |        ~^\n      |         )\n  113 | }\n \
    \     | ~        \n/tmp/tmpc43gqufq.cpp:113:1: error: expected primary-expression\
    \ before \u2018}\u2019 token\n  113 | }\n      | ^\n/tmp/tmpc43gqufq.cpp:113:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    std::vector<std::string>\
    \ ret;\n    if (arr.size() == 0) {\n        return ret;\n    }\n    long min =\
    \ arr[0];\n    long max = arr[0];\n    for (auto i : arr) {\n        if (i < min)\
    \ {\n            min = i;\n        }\n        if (i > max) {\n            max\
    \ = i;\n        }\n    }\n    long mid = min + (max - min) / 2;\n    long mid2\
    \ = mid / 10;\n    long mid3 = mid % 10;\n    long mid4 = mid2 / 10;\n    long\
    \ mid5 = mid2 % 10;\n    long mid6 = mid3 / 10;\n    long mid7 = mid3 % 10;\n\
    \    long mid8 = mid4 / 10;\n    long mid9 = mid4 % 10;\n    long mid10 = mid5\
    \ / 10;\n    long mid11 = mid5 % 10;\n    long mid12 = mid6 / 10;\n    long mid13\
    \ = mid6 % 10;\n    long mid14 = mid7 / 10;\n    long mid15 = mid7 % 10;\n   \
    \ long mid16 = mid8 / 10;\n    long mid17 = mid8 % 10;\n    long mid18 = mid9\
    \ / 10;\n    long mid19 = mid9 % 10;\n    long mid20 = mid10 / 10;\n    long mid21\
    \ = mid10 % 10;\n    long mid22 = mid11 / 10;\n    long mid23 = mid11 % 10;\n\
    \    long mid24 = mid12 / 10;\n    long mid25 = mid12 % 10;\n    long mid26 =\
    \ mid13 / 10;\n    long mid27 = mid13 % 10;\n    long mid28 = mid14 / 10;\n  \
    \  long mid29 = mid14 % 10;\n    long mid30 = mid15 / 10;\n    long mid31 = mid15\
    \ % 10;\n    long mid32 = mid16 / 10;\n    long mid33 = mid16 % 10;\n    long\
    \ mid34 = mid17 / 10;\n    long mid35 = mid17 % 10;\n    long mid36 = mid18 /\
    \ 10;\n    long mid37 = mid18 % 10;\n    long mid38 = mid19 / 10;\n    long mid39\
    \ = mid19 % 10;\n    long mid40 = mid20 / 10;\n    long mid41 = mid20 % 10;\n\
    \    long mid42 = mid21 / 10;\n    long mid43 = mid21 % 10;\n    long mid44 =\
    \ mid22 / 10;\n    long mid45 = mid22 % 10;\n    long mid46 = mid23 / 10;\n  \
    \  long mid47\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({2,\
    \ 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 55}))) == (std::vector<std::string>({\"One\"})));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 3, 2}))) == (std::vector<std::string>({\"Three\", \"Two\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>({9, 4, 8}))) == (std::vector<std::string>({\"\
    Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfnmxy_8w.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpfnmxy_8w.cpp:81:1: error:\
    \ expected initializer before \u2018}\u2019 token\n   81 | }\n      | ^\n/tmp/tmpfnmxy_8w.cpp:81:1:\
    \ warning: control reaches end of non-void function [-Wreturn-type]\n   81 | }\n\
    \      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    if (arr.empty())\
    \ return {};\n    long min = *std::min_element(arr.begin(), arr.end());\n    long\
    \ max = *std::max_element(arr.begin(), arr.end());\n    std::vector<std::string>\
    \ res;\n    for (long i = min; i <= max; i++) {\n        std::string name = \"\
    \";\n        switch (i) {\n            case 1:\n                name = \"One\"\
    ;\n                break;\n            case 2:\n                name = \"Two\"\
    ;\n                break;\n            case 3:\n                name = \"Three\"\
    ;\n                break;\n            case 4:\n                name = \"Four\"\
    ;\n                break;\n            case 5:\n                name = \"Five\"\
    ;\n                break;\n            case 6:\n                name = \"Six\"\
    ;\n                break;\n            case 7:\n                name = \"Seven\"\
    ;\n                break;\n            case 8:\n                name = \"Eight\"\
    ;\n                break;\n            case 9:\n                name = \"Nine\"\
    ;\n                break;\n            default:\n                break;\n    \
    \    }\n        res.push_back(name);\n    }\n    return res;\n}\nint main() {\n\
    \    auto candidate = by_length;\n    assert(candidate((std::vector<long>({2,\
    \ 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 55}))) == (std::vector<std::string>({\"One\"})));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 3, 2}))) == (std::vector<std::string>({\"Three\", \"Two\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>({9, 4, 8}))) == (std::vector<std::string>({\"\
    Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "tmp8tywt5xn: /tmp/tmp8tywt5xn.cpp:63: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    std::vector<std::string>\
    \ res;\n    long long len = arr.size();\n    if (len == 0) {\n        return res;\n\
    \    }\n    long long mid = len / 2;\n    long long left = arr[mid];\n    long\
    \ long right = arr[mid];\n    long long temp;\n    while (left < right) {\n  \
    \      temp = left;\n        left = right;\n        right = temp;\n    }\n   \
    \ long long mid1 = len / 2;\n    long long mid2 = len / 2;\n    long long mid3\
    \ = len / 2;\n    long long mid4 = len / 2;\n    long long mid5 = len / 2;\n \
    \   long long mid6 = len / 2;\n    long long mid7 = len / 2;\n    long long mid8\
    \ = len / 2;\n    long long mid9 = len / 2;\n    long long mid10 = len / 2;\n\
    \    long long mid11 = len / 2;\n    long long mid12 = len / 2;\n    long long\
    \ mid13 = len / 2;\n    long long mid14 = len / 2;\n    long long mid15 = len\
    \ / 2;\n    long long mid16 = len / 2;\n    long long mid17 = len / 2;\n    long\
    \ long mid18 = len / 2;\n    long long mid19 = len / 2;\n    long long mid20 =\
    \ len / 2;\n    long long mid21 = len / 2;\n    long long mid22 = len / 2;\n \
    \   long long mid23 = len / 2;\n    long long mid24 = len / 2;\n    long long\
    \ mid25 = len / 2;\n    long long mid26 = len / 2;\n    long long mid27 = len\
    \ / 2;\n    long long mid28 = len / 2;\n    long long mid29 = len / 2;\n    long\
    \ long mid30 = len / 2;\n    long long mid31 = len / 2;\n    long long mid32 =\
    \ len / 2;\n    long long mid33 = len / 2;\n    long long mid34 = len / 2;\n \
    \   long long mid35 = len / 2;\n    long long mid36 = len / 2;\n    long long\
    \ mid37 = len / 2;\n    long long mid38 = len / 2;\n    long long mid39 = len\
    \ / 2;\n    long long mid40 = len / 2;\n    long long mid41 = len / 2;\n    long\
    \ long mid42 = len / 2;\n    long long mid43 = len / 2;\n    long long mid44 =\
    \ len / 2;\n    long long mid45 = len / 2;\n\n}\nint main() {\n    auto candidate\
    \ = by_length;\n    assert(candidate((std::vector<long>({2, 1, 1, 4, 5, 8, 2,\
    \ 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"Four\", \"Three\"\
    , \"Two\", \"Two\", \"One\", \"One\"})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 55}))) == (std::vector<std::string>({\"One\"})));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 3, 2}))) == (std::vector<std::string>({\"Three\", \"Two\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>({9, 4, 8}))) == (std::vector<std::string>({\"\
    Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "tmper1d06ei: /tmp/tmper1d06ei.cpp:83: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    std::vector<std::string>\
    \ res;\n    if (arr.size() == 0) {\n        return res;\n    }\n    long min =\
    \ arr[0];\n    long max = arr[0];\n    for (long i : arr) {\n        if (i < min)\
    \ {\n            min = i;\n        }\n        if (i > max) {\n            max\
    \ = i;\n        }\n    }\n    long mid = min + (max - min) / 2;\n    long mid2\
    \ = mid / 10;\n    long mid3 = mid % 10;\n    long mid4 = mid2 / 10;\n    long\
    \ mid5 = mid2 % 10;\n    long mid6 = mid3 / 10;\n    long mid7 = mid3 % 10;\n\
    \    long mid8 = mid4 / 10;\n    long mid9 = mid4 % 10;\n    long mid10 = mid5\
    \ / 10;\n    long mid11 = mid5 % 10;\n    long mid12 = mid6 / 10;\n    long mid13\
    \ = mid6 % 10;\n    long mid14 = mid7 / 10;\n    long mid15 = mid7 % 10;\n   \
    \ long mid16 = mid8 / 10;\n    long mid17 = mid8 % 10;\n    long mid18 = mid9\
    \ / 10;\n    long mid19 = mid9 % 10;\n    long mid20 = mid10 / 10;\n    long mid21\
    \ = mid10 % 10;\n    long mid22 = mid11 / 10;\n    long mid23 = mid11 % 10;\n\
    \    long mid24 = mid12 / 10;\n    long mid25 = mid12 % 10;\n    long mid26 =\
    \ mid13 / 10;\n    long mid27 = mid13 % 10;\n    long mid28 = mid14 / 10;\n  \
    \  long mid29 = mid14 % 10;\n    long mid30 = mid15 / 10;\n    long mid31 = mid15\
    \ % 10;\n    long mid32 = mid16 / 10;\n    long mid33 = mid16 % 10;\n    long\
    \ mid34 = mid17 / 10;\n    long mid35 = mid17 % 10;\n    long mid36 = mid18 /\
    \ 10;\n    long mid37 = mid18 % 10;\n    long mid38 = mid19 / 10;\n    long mid39\
    \ = mid19 % 10;\n    long mid40 = mid20 / 10;\n    long mid41 = mid20 % 10;\n\
    \    long mid42 = mid21 / 10;\n    long mid43 = mid21 % 10;\n    long mid44 =\
    \ mid22 / 10;\n    long mid45 = mid22 % 10;\n    long mid46 = mid23 / 10;\n  \
    \  long mid47\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({2,\
    \ 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 55}))) == (std::vector<std::string>({\"One\"})));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 3, 2}))) == (std::vector<std::string>({\"Three\", \"Two\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>({9, 4, 8}))) == (std::vector<std::string>({\"\
    Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpltyp13fu.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpltyp13fu.cpp:81:1: error:\
    \ expected initializer before \u2018}\u2019 token\n   81 | }\n      | ^\n/tmp/tmpltyp13fu.cpp:81:1:\
    \ warning: control reaches end of non-void function [-Wreturn-type]\n   81 | }\n\
    \      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    std::vector<std::string>\
    \ res;\n    long temp;\n    for (long i = 0; i < arr.size(); i++) {\n        temp\
    \ = arr[i];\n        if (temp < 1 || temp > 9) {\n            continue;\n    \
    \    }\n        long index = (temp - 1) % 10;\n        long value = temp / 10;\n\
    \        std::string name = names[value];\n        res.push_back(name);\n    }\n\
    \    return res;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({2,\
    \ 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 55}))) == (std::vector<std::string>({\"One\"})));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 3, 2}))) == (std::vector<std::string>({\"Three\", \"Two\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>({9, 4, 8}))) == (std::vector<std::string>({\"\
    Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2jespnwa.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmp2jespnwa.cpp:29:28: error:\
    \ \u2018names\u2019 was not declared in this scope; did you mean \u2018name\u2019\
    ?\n   29 |         std::string name = names[value];\n      |                 \
    \           ^~~~~\n      |                            name\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    std::vector<std::string>\
    \ result;\n    long max_len = 0, min_len = 0, min_val = 0, max_val = 0, min_idx\
    \ = 0, max_idx = 0, min_val = 0, max_val = 0, min_idx = 0, max_idx = 0, min_val\
    \ = 0, max_val = 0, min_idx = 0, max_idx = 0, min_val = 0, max_val = 0, min_idx\
    \ = 0, max_idx = 0, min_val = 0, max_val = 0, min_idx = 0, max_idx = 0, min_val\
    \ = 0, max_val = 0, min_idx = 0, max_idx = 0, min_val = 0, max_val = 0, min_idx\
    \ = 0, max_idx = 0, min_val = 0, max_val = 0, min_idx = 0, max_idx = 0, min_val\
    \ = 0, max_val = 0, min_idx = 0, max_idx = 0, min_val = 0, max_val = 0, min_idx\
    \ = 0, max_idx = 0, min_val = 0, max_val = 0, min_idx = 0, max_idx = 0, min_val\
    \ = 0, max_val = 0, min_idx = 0, max_idx = 0, min_val = 0, max_val = 0, min_idx\
    \ = 0, max_idx = 0, min_val = 0, max_val = 0, min_idx = 0, max_idx = 0, min_val\
    \ = 0, max_val = 0, min_idx = 0, max_idx = 0, min_val = 0, max_val = 0, min_idx\
    \ = 0, max_idx = 0, min_val = 0, max_val = 0, min_idx = 0, max_idx = 0, min_val\
    \ = 0, max_val = 0, min_idx = 0, max_idx = 0, min_val = 0, max_val = 0, min_idx\
    \ = 0, max_idx = 0, min_val = 0, max_val = 0, min_idx = 0, max_idx = 0, min_val\
    \ = 0, max_val = 0, min_idx = 0, max_idx = 0, min_val = 0, max_val = 0, min_idx\
    \ = 0, max_idx = 0, min_val = 0, max_val = 0, min_idx = 0, max_idx = 0, min_val\
    \ = 0, max_val = 0, min_idx = 0, max_idx = 0, min_val = 0, max_val = 0, min_idx\
    \ = 0, max_idx = 0, min_val = 0, max_val = 0, min_idx = 0, max_idx = 0, min_val\
    \ = 0, max_val = 0, min_idx = 0, max_idx = 0, min_val = 0, max_val = 0, min_idx\
    \ = 0, max_idx = 0, min_val = 0, max_val = 0, min_idx = 0, max_idx = 0, min_val\
    \ = 0, max_val = 0, min_idx = 0, max_idx = 0, min_val = 0, max_val = 0, min_idx\
    \ = 0, max_idx = 0, min_val = 0, max_val = 0, min_idx = 0, max_idx = 0, min_val\
    \ = 0, max_val = 0, min_idx = 0, max_idx = 0, min_val = 0, max_val = 0, min_idx\
    \ = 0, max_idx = 0, min_val = 0, max_val = 0, min_idx = 0, max_idx = 0, min_val\
    \ = 0, max_val = 0, min_idx = 0, max_idx = 0, min_val = 0, max_val = 0, min_idx\
    \ = 0, max_idx = 0, min_val = 0, max_val = 0, min_idx = 0, max_idx = 0, min_val\
    \ = 0, max_val = 0, min_idx = 0, max_idx = 0, min_val = 0, max_val = 0, min_idx\
    \ = 0, max_idx = 0, min_val = 0, max_val = 0, min_idx = 0, max_idx = 0, min_val\
    \ = 0, max_val = 0, min_\n}\nint main() {\n    auto candidate = by_length;\n \
    \   assert(candidate((std::vector<long>({2, 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({1, -1, 55}))) == (std::vector<std::string>({\"\
    One\"})));\n    assert(candidate((std::vector<long>({1, -1, 3, 2}))) == (std::vector<std::string>({\"\
    Three\", \"Two\", \"One\"})));\n    assert(candidate((std::vector<long>({9, 4,\
    \ 8}))) == (std::vector<std::string>({\"Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5nsy_7hh.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmp5nsy_7hh.cpp:21:88: error:\
    \ redeclaration of \u2018long int min_val\u2019\n   21 |     long max_len = 0,\
    \ min_len = 0, min_val = 0, max_val = 0, min_idx = 0, max_idx = 0, min_val = 0,\
    \ max_val = 0, min_idx = 0, max_idx = 0, min_val = 0, max_val = 0, min_idx = 0,\
    \ max_idx = 0, min_val = 0, max_val = 0, min_idx = 0, max_idx = 0, min_val = 0,\
    \ max_val = 0, min_idx = 0, max_idx = 0, min_val = 0, max_val = 0, min_idx = 0,\
    \ max_idx = 0, min_val = 0, max_val = 0, min_idx = 0, max_idx = 0, min_val = 0,\
    \ max_val = 0, min_idx = 0, max_idx = 0, min_val = 0, max_val = 0, min_idx = 0,\
    \ max_idx = 0, min_val = 0, max_val = 0, min_idx = 0, max_idx = 0, min_val = 0,\
    \ max_val = 0, min_idx = 0, max_idx = 0, min_val = 0, max_val = 0, min_idx = 0,\
    \ max_idx = 0, min_val = 0, max_val = 0, min_idx = 0, max_idx = 0, min_val = 0,\
    \ max_val = 0, min_idx = 0, max_idx = 0, min_val = 0, max_val = 0, min_idx = 0,\
    \ max_idx = 0, min_val = 0, max_val = 0, min_idx = 0, max_idx = 0, min_val = 0,\
    \ max_val = 0, min_idx = 0, max_idx = 0, min_val = 0, max_val = 0, min_idx = 0,\
    \ max_idx = 0, min_val = 0, max_val = 0, min_idx = 0, max_idx = 0, min_val = 0,\
    \ max_val = 0, min_idx = 0, max_idx = 0, min_val = 0, max_val = 0, min_idx = 0,\
    \ max_idx = 0, min_val = 0, max_val = 0, min_idx = 0, max_idx = 0, min_val = 0,\
    \ max_val = 0, min_idx = 0, max_idx = 0, min_val = 0, max_val = 0, min_idx = 0,\
    \ max_idx = 0, min_val = 0, max_val = 0, min_idx = 0, max_idx = 0, min_val = 0,\
    \ max_val = 0, min_idx = 0, max_idx = 0, min_val = 0, max_val = 0, min_idx = 0,\
    \ max_idx = 0, min_val = 0, max_val = 0, min_idx = 0, max_idx = 0, min_val = 0,\
    \ max_val = 0, min_idx = 0, max_idx = 0, min_val = 0, max_val = 0, min_idx = 0,\
    \ max_idx = 0, min_val = 0, max_val = 0, min_idx = 0, max_idx = 0, min_val = 0,\
    \ max_val = 0, min_idx = 0, max_idx = 0, min_val = 0, max_val = 0, min_idx = 0,\
    \ max_idx = 0, min_val = 0, max_val = 0, min_idx = 0, max_idx = 0, min_val = 0,\
    \ max_val = 0, min_idx = 0, max_idx = "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    // Your code\
    \ here\n    long long int n = arr.size();\n    long long int m = 1;\n    long\
    \ long int temp = 0;\n    std::vector<std::string> res;\n    for(long long int\
    \ i = 0; i < n; i++) {\n        temp = arr[i];\n        if(temp > 9) {\n     \
    \       temp -= 10;\n        }\n        if(temp < 1) {\n            temp += 10;\n\
    \        }\n        if(temp > m) {\n            m = temp;\n        }\n    }\n\
    \    long long int temp2 = m;\n    while(temp2 > 0) {\n        res.push_back(\"\
    One\");\n        temp2 -= 1;\n    }\n    long long int temp3 = n;\n    while(temp3\
    \ > 0) {\n        res.push_back(\"Nine\");\n        temp3 -= 1;\n    }\n    for(long\
    \ long int i = 0; i < n; i++) {\n        temp = arr[i];\n        if(temp > 9)\
    \ {\n            temp -= 10;\n        }\n        if(temp < 1) {\n            temp\
    \ += 10;\n        }\n        if(temp > m) {\n            m = temp;\n        }\n\
    \    }\n    long long int temp4 = m;\n    while(temp4 > 0) {\n        res.push_back(\"\
    Two\");\n        temp4 -= 1;\n    }\n    long long int temp5 = n;\n    while(temp5\
    \ > 0) {\n        res.push_back(\"Three\");\n        temp5 -= 1;\n    }\n    for(long\
    \ long int i = 0; i < n; i++) {\n        temp = arr[i];\n        if(temp > 9)\
    \ {\n            temp -= 10;\n        }\n        if(temp < 1) {\n            temp\
    \ += 10;\n        }\n        if(temp > m) {\n            m = temp;\n        }\n\
    \    }\n    long long int temp6 = m;\n    while(temp6 > 0) {\n        res.push_back(\"\
    Four\");\n        temp6 -= 1;\n    }\n    long long int temp7 = n;\n    while(temp7\
    \ > 0) {\n        res.push_back(\"Five\");\n        temp7 -= 1;\n    }\n    for(long\
    \ long int i = 0; i < n; i++) {\n        temp = arr[i];\n        if(temp > 9)\
    \ {\n            temp -= 10;\n        }\n        if(temp < 1) {\n            temp\
    \ += 10;\n        }\n        if(temp > m) {\n            m = temp;\n        }\n\
    \    }\n    long long int temp8 = m;\n    while(temp8 > 0) {\n        res.push_back(\"\
    Six\");\n        temp8 -= 1;\n    }\n    long long int temp9 = n;\n    while(temp9\
    \ > 0) {\n        res.push_back(\"Seven\");\n        temp9 -= 1;\n    }\n    for(long\
    \ long int i = 0; i < n; i++) {\n        temp = arr[i];\n        if(temp > 9)\
    \ {\n            temp -= 10;\n        }\n        if(temp < 1) {\n            temp\
    \ += 10;\n        }\n        if(temp > m) {\n            m = temp;\n\n}\nint main()\
    \ {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({2,\
    \ 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 55}))) == (std::vector<std::string>({\"One\"})));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 3, 2}))) == (std::vector<std::string>({\"Three\", \"Two\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>({9, 4, 8}))) == (std::vector<std::string>({\"\
    Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpjryd8iuw.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpjryd8iuw.cpp:125:12: error:\
    \ a function-definition is not allowed here before \u2018{\u2019 token\n  125\
    \ | int main() {\n      |            ^\n/tmp/tmpjryd8iuw.cpp:132:1: error: expected\
    \ \u2018}\u2019 at end of input\n  132 | }\n      | ^\n/tmp/tmpjryd8iuw.cpp:113:42:\
    \ note: to match this \u2018{\u2019\n  113 |     for(long long int i = 0; i <\
    \ n; i++) {\n      |                                          ^\n/tmp/tmpjryd8iuw.cpp:132:1:\
    \ error: expected \u2018}\u2019 at end of input\n  132 | }\n      | ^\n/tmp/tmpjryd8iuw.cpp:19:59:\
    \ note: to match this \u2018{\u2019\n   19 | std::vector<std::string> by_length(std::vector<long>\
    \ arr) {\n      |                                                           ^\n\
    /tmp/tmpjryd8iuw.cpp:132:1: warning: no return statement in function returning\
    \ non-void [-Wreturn-type]\n  132 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    std::vector<std::string>\
    \ res;\n    long temp;\n    for (long i = 0; i < arr.size(); i++) {\n        if\
    \ (arr[i] > 9) {\n            temp = arr[i];\n            arr[i] = arr[i] / 10;\n\
    \            arr[i] = arr[i] * 10;\n            arr[i] = temp;\n        }\n  \
    \  }\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] > 9) {\n\
    \            temp = arr[i];\n            arr[i] = arr[i] / 10;\n            arr[i]\
    \ = arr[i] * 10;\n            arr[i] = temp;\n        }\n    }\n    for (long\
    \ i = 0; i < arr.size(); i++) {\n        if (arr[i] > 9) {\n            temp =\
    \ arr[i];\n            arr[i] = arr[i] / 10;\n            arr[i] = arr[i] * 10;\n\
    \            arr[i] = temp;\n        }\n    }\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] > 9) {\n            temp = arr[i];\n            arr[i]\
    \ = arr[i] / 10;\n            arr[i] = arr[i] * 10;\n            arr[i] = temp;\n\
    \        }\n    }\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i]\
    \ > 9) {\n            temp = arr[i];\n            arr[i] = arr[i] / 10;\n    \
    \        arr[i] = arr[i] * 10;\n            arr[i] = temp;\n        }\n    }\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] > 9) {\n    \
    \        temp = arr[i];\n            arr[i] = arr[i] / 10;\n            arr[i]\
    \ = arr[i] * 10;\n            arr[i] = temp;\n        }\n    }\n    for (long\
    \ i = 0; i < arr.size(); i++) {\n        if (arr[i] > 9) {\n            temp =\
    \ arr[i];\n            arr[i] = arr[i] / 10;\n            arr[i] = arr[i] * 10;\n\
    \            arr[i] = temp;\n        }\n    }\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] > 9) {\n            temp = arr[i];\n            arr[i]\
    \ = arr[i] / 10;\n            arr[i] = arr[i] * 10;\n            arr[i] = temp;\n\
    \        }\n    }\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i]\
    \ > 9) {\n            temp = arr[i];\n            arr[i] = arr[i] / 10;\n    \
    \        arr[i] = arr[i] * 10;\n            arr[i] = temp;\n        }\n    }\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] > 9) {\n    \
    \        temp = arr[i];\n            arr[i] = arr[i] / 10;\n            arr[i]\
    \ = arr[i] * 10;\n            arr[i] = temp;\n        }\n    }\n    for (long\
    \ i = 0; i < arr.size(); i++) {\n        if (arr[i] > 9) {\n            temp =\
    \ arr[i];\n            arr[i] = arr[i] / 10;\n            arr[i] = arr[i] * 10;\n\
    \            arr[i] = temp;\n        }\n    }\n    for (long i = 0; i < arr.size();\
    \ i++) {\n\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({2,\
    \ 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 55}))) == (std::vector<std::string>({\"One\"})));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 3, 2}))) == (std::vector<std::string>({\"Three\", \"Two\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>({9, 4, 8}))) == (std::vector<std::string>({\"\
    Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5bgrqy7i.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmp5bgrqy7i.cpp:113:12: error:\
    \ a function-definition is not allowed here before \u2018{\u2019 token\n  113\
    \ | int main() {\n      |            ^\n/tmp/tmp5bgrqy7i.cpp:120:1: error: expected\
    \ \u2018}\u2019 at end of input\n  120 | }\n      | ^\n/tmp/tmp5bgrqy7i.cpp:19:59:\
    \ note: to match this \u2018{\u2019\n   19 | std::vector<std::string> by_length(std::vector<long>\
    \ arr) {\n      |                                                           ^\n\
    /tmp/tmp5bgrqy7i.cpp:120:1: warning: no return statement in function returning\
    \ non-void [-Wreturn-type]\n  120 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    std::vector<std::string>\
    \ res;\n    if (arr.size() == 0) {\n        return res;\n    }\n    long max_len\
    \ = 0, min_len = std::numeric_limits<long>::max();\n    for (long i : arr) {\n\
    \        if (max_len < i) {\n            max_len = i;\n        }\n        if (min_len\
    \ > i) {\n            min_len = i;\n        }\n    }\n    long diff = max_len\
    \ - min_len;\n    if (diff == 0) {\n        long mid = min_len / 2;\n        for\
    \ (long i : arr) {\n            if (i < mid) {\n                res.push_back(\"\
    One\");\n            } else if (i > mid) {\n                res.push_back(\"Nine\"\
    );\n            } else {\n                res.push_back(\"Two\");\n          \
    \  }\n        }\n        return res;\n    }\n    std::vector<std::string> temp;\n\
    \    for (long i : arr) {\n        if (i < min_len) {\n            temp.push_back(\"\
    One\");\n        } else if (i > max_len) {\n            temp.push_back(\"Nine\"\
    );\n        } else {\n            temp.push_back(\"Two\");\n        }\n    }\n\
    \    res.swap(temp);\n    return res;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({2, 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({1, -1, 55}))) == (std::vector<std::string>({\"\
    One\"})));\n    assert(candidate((std::vector<long>({1, -1, 3, 2}))) == (std::vector<std::string>({\"\
    Three\", \"Two\", \"One\"})));\n    assert(candidate((std::vector<long>({9, 4,\
    \ 8}))) == (std::vector<std::string>({\"Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "tmp190r_dvx: /tmp/tmp190r_dvx.cpp:62: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    std::vector<std::string>\
    \ result;\n    long long n = arr.size();\n    if (n <= 0) {\n        return result;\n\
    \    }\n    long long m = n / 10;\n    long long r = n % 10;\n    long long temp;\n\
    \    for (long long i = 0; i < m; i++) {\n        temp = arr[i];\n        arr[i]\
    \ = arr[m];\n        arr[m] = temp;\n    }\n    for (long long i = m; i < n; i++)\
    \ {\n        temp = arr[i];\n        arr[i] = arr[r];\n        arr[r] = temp;\n\
    \    }\n    for (long long i = 0; i < n; i++) {\n        temp = arr[i];\n    \
    \    arr[i] = \"One\";\n        arr[r] = \"Nine\";\n        result[result.size()\
    \ - 1 - i] = temp;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = by_length;\n    assert(candidate((std::vector<long>({2, 1, 1, 4, 5, 8, 2,\
    \ 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"Four\", \"Three\"\
    , \"Two\", \"Two\", \"One\", \"One\"})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 55}))) == (std::vector<std::string>({\"One\"})));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 3, 2}))) == (std::vector<std::string>({\"Three\", \"Two\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>({9, 4, 8}))) == (std::vector<std::string>({\"\
    Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpjs4jzmsb.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpjs4jzmsb.cpp:40:18: error:\
    \ invalid conversion from \u2018const char*\u2019 to \u2018__gnu_cxx::__alloc_traits<std::allocator<long\
    \ int>, long int>::value_type\u2019 {aka \u2018long int\u2019} [-fpermissive]\n\
    \   40 |         arr[i] = \"One\";\n      |                  ^~~~~\n      |  \
    \                |\n      |                  const char*\n/tmp/tmpjs4jzmsb.cpp:41:18:\
    \ error: invalid conversion from \u2018const char*\u2019 to \u2018__gnu_cxx::__alloc_traits<std::allocator<long\
    \ int>, long int>::value_type\u2019 {aka \u2018long int\u2019} [-fpermissive]\n\
    \   41 |         arr[r] = \"Nine\";\n      |                  ^~~~~~\n      |\
    \                  |\n      |                  const char*\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    std::vector<std::string>\
    \ res;\n    if (arr.size() == 0) {\n        return res;\n    }\n    long min =\
    \ *std::min_element(arr.begin(), arr.end());\n    long max = *std::max_element(arr.begin(),\
    \ arr.end());\n    long mid = (min + max) / 2;\n    long mid2 = mid / 10;\n  \
    \  long mid3 = mid % 10;\n    long mid4 = mid2 / 10;\n    long mid5 = mid2 % 10;\n\
    \    long mid6 = mid3 / 10;\n    long mid7 = mid3 % 10;\n    long mid8 = mid4\
    \ / 10;\n    long mid9 = mid4 % 10;\n    long mid10 = mid5 / 10;\n    long mid11\
    \ = mid5 % 10;\n    long mid12 = mid6 / 10;\n    long mid13 = mid6 % 10;\n   \
    \ long mid14 = mid7 / 10;\n    long mid15 = mid7 % 10;\n    long mid16 = mid8\
    \ / 10;\n    long mid17 = mid8 % 10;\n    long mid18 = mid9 / 10;\n    long mid19\
    \ = mid9 % 10;\n    long mid20 = mid10 / 10;\n    long mid21 = mid10 % 10;\n \
    \   long mid22 = mid11 / 10;\n    long mid23 = mid11 % 10;\n    long mid24 = mid12\
    \ / 10;\n    long mid25 = mid12 % 10;\n    long mid26 = mid13 / 10;\n    long\
    \ mid27 = mid13 % 10;\n    long mid28 = mid14 / 10;\n    long mid29 = mid14 %\
    \ 10;\n    long mid30 = mid15 / 10;\n    long mid31 = mid15 % 10;\n    long mid32\
    \ = mid16 / 10;\n    long mid33 = mid16 % 10;\n    long mid34 = mid17 / 10;\n\
    \    long mid35 = mid17 % 10;\n    long mid36 = mid18 / 10;\n    long mid37 =\
    \ mid18 % 10;\n    long mid38 = mid19 / 10;\n    long mid39 = mid19 % 10;\n  \
    \  long mid40 = mid20 / 10;\n    long mid41 = mid20 % 10;\n    long mid42 = mid21\
    \ / 10;\n    long mid43 = mid21 % 10;\n    long mid44 = mid22 / 10;\n    long\
    \ mid45 = mid22 % 10;\n    long mid46 = mid23 / 10;\n    long mid47 = mid23 %\
    \ 10;\n    long mid48 = mid24 / 10;\n\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({2, 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({1, -1, 55}))) == (std::vector<std::string>({\"\
    One\"})));\n    assert(candidate((std::vector<long>({1, -1, 3, 2}))) == (std::vector<std::string>({\"\
    Three\", \"Two\", \"One\"})));\n    assert(candidate((std::vector<long>({9, 4,\
    \ 8}))) == (std::vector<std::string>({\"Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "tmptohxi4q3: /tmp/tmptohxi4q3.cpp:78: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    std::vector<std::string>\
    \ res;\n    long temp;\n    for (long i : arr) {\n        if (i >= 1 && i <= 9)\
    \ {\n            temp = i;\n        } else {\n            temp = -1;\n       \
    \ }\n        res.push_back(by_length(temp));\n    }\n    return res;\n}\nint main()\
    \ {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({2,\
    \ 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 55}))) == (std::vector<std::string>({\"One\"})));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 3, 2}))) == (std::vector<std::string>({\"Three\", \"Two\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>({9, 4, 8}))) == (std::vector<std::string>({\"\
    Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpodfd9zv2.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpodfd9zv2.cpp:28:33: error:\
    \ could not convert \u2018temp\u2019 from \u2018long int\u2019 to \u2018std::vector<long\
    \ int>\u2019\n   28 |         res.push_back(by_length(temp));\n      |       \
    \                          ^~~~\n      |                                 |\n \
    \     |                                 long int\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    std::vector<std::string>\
    \ ans;\n    long n = arr.size();\n    if (n <= 0) {\n        return ans;\n   \
    \ }\n    long m = n;\n    while (m > 0) {\n        m /= 10;\n        ans.push_back(\"\
    Nine\");\n    }\n    while (m >= 9) {\n        m /= 10;\n        ans.push_back(\"\
    Eight\");\n    }\n    while (m >= 8) {\n        m /= 10;\n        ans.push_back(\"\
    Seven\");\n    }\n    while (m >= 7) {\n        m /= 10;\n        ans.push_back(\"\
    Six\");\n    }\n    while (m >= 6) {\n        m /= 10;\n        ans.push_back(\"\
    Five\");\n    }\n    while (m >= 5) {\n        m /= 10;\n        ans.push_back(\"\
    Four\");\n    }\n    while (m >= 4) {\n        m /= 10;\n        ans.push_back(\"\
    Three\");\n    }\n    while (m >= 3) {\n        m /= 10;\n        ans.push_back(\"\
    Two\");\n    }\n    while (m >= 2) {\n        m /= 10;\n        ans.push_back(\"\
    One\");\n    }\n    while (m >= 1) {\n        m /= 10;\n        ans.push_back(\"\
    Zero\");\n    }\n    return ans;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({2, 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({1, -1, 55}))) == (std::vector<std::string>({\"\
    One\"})));\n    assert(candidate((std::vector<long>({1, -1, 3, 2}))) == (std::vector<std::string>({\"\
    Three\", \"Two\", \"One\"})));\n    assert(candidate((std::vector<long>({9, 4,\
    \ 8}))) == (std::vector<std::string>({\"Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "tmpe5u1q352: /tmp/tmpe5u1q352.cpp:70: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    std::vector<std::string>\
    \ res;\n    if (arr.size() == 0) {\n        return res;\n    }\n    long min_val\
    \ = arr[0];\n    long max_val = arr[0];\n    for (long i : arr) {\n        if\
    \ (i < min_val) {\n            min_val = i;\n        }\n        if (i > max_val)\
    \ {\n            max_val = i;\n        }\n    }\n    long diff = max_val - min_val;\n\
    \    if (diff == 0) {\n        res.push_back(\"One\");\n        return res;\n\
    \    }\n    long mod = diff % 10;\n    long rem = diff / 10;\n    std::vector<std::string>\
    \ temp;\n    long start = min_val;\n    long end = max_val;\n    while (start\
    \ <= end) {\n        long mid = start + (end - start) / 2;\n        if (mid %\
    \ 10 == mod) {\n            temp.push_back(\"One\");\n            start = mid\
    \ + 1;\n        } else {\n            temp.push_back(\"Two\");\n            start\
    \ = mid + 1;\n        }\n    }\n    std::vector<std::string> reversed;\n    for\
    \ (long i : arr) {\n        reversed.push_back(reversed.back() + to_string(i));\n\
    \    }\n    res.insert(res.end(), temp.begin(), temp.end());\n    res.insert(res.end(),\
    \ reversed.begin(), reversed.end());\n    return res;\n}\nint main() {\n    auto\
    \ candidate = by_length;\n    assert(candidate((std::vector<long>({2, 1, 1, 4,\
    \ 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"Four\",\
    \ \"Three\", \"Two\", \"Two\", \"One\", \"One\"})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 55}))) == (std::vector<std::string>({\"One\"})));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 3, 2}))) == (std::vector<std::string>({\"Three\", \"Two\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>({9, 4, 8}))) == (std::vector<std::string>({\"\
    Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmph7k1db3l.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmph7k1db3l.cpp:56:46: error:\
    \ \u2018to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   56 |         reversed.push_back(reversed.back() + to_string(i));\n     \
    \ |                                              ^~~~~~~~~\n      |          \
    \                                    std::__cxx11::to_string\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n      \
    \           from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmph7k1db3l.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:6598:3:\
    \ note: \u2018std::__cxx11::to_string\u2019 declared here\n 6598 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    std::vector<std::string>\
    \ res;\n    long temp;\n    long min = 1;\n    long max = 9; \n    long mid;\n\
    \    long count = 0;\n    long index = 0;\n    long temp2;\n    long temp3;\n\
    \    long temp4;\n    long temp5;\n    long temp6;\n    long temp7;\n    long\
    \ temp8;\n    long temp9;\n    long temp10;\n    long temp11;\n    long temp12;\n\
    \    long temp13;\n    long temp14;\n    long temp15;\n    long temp16;\n    long\
    \ temp17;\n    long temp18;\n    long temp19;\n    long temp20;\n    long temp21;\n\
    \    long temp22;\n    long temp23;\n    long temp24;\n    long temp25;\n    long\
    \ temp26;\n    long temp27;\n    long temp28;\n    long temp29;\n    long temp30;\n\
    \    long temp31;\n    long temp32;\n    long temp33;\n    long temp34;\n    long\
    \ temp35;\n    long temp36;\n    long temp37;\n    long temp38;\n    long temp39;\n\
    \    long temp40;\n    long temp41;\n    long temp42;\n    long temp43;\n    long\
    \ temp44;\n    long temp45;\n    long temp46;\n    long temp47;\n    long temp48;\n\
    \    long temp49;\n    long temp50;\n    long temp51;\n    long temp52;\n    long\
    \ temp53;\n    long temp54;\n    long temp55;\n    long temp56;\n    long temp57;\n\
    \    long temp58;\n    long temp59;\n    long temp60;\n    long temp61;\n    long\
    \ temp62;\n    long temp63;\n    long temp64;\n    long temp65;\n    long temp66;\n\
    \    long temp67;\n    long temp68;\n    long temp69;\n    long temp70;\n    long\
    \ temp71;\n    long temp72;\n    long temp73;\n    long temp74;\n    long temp75;\n\
    \    long temp76;\n    long temp77;\n    long temp78;\n    long temp79;\n    long\
    \ temp80;\n    long temp81;\n    long temp82;\n    long temp83;\n    long temp84\n\
    }\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({2,\
    \ 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 55}))) == (std::vector<std::string>({\"One\"})));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 3, 2}))) == (std::vector<std::string>({\"Three\", \"Two\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>({9, 4, 8}))) == (std::vector<std::string>({\"\
    Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpd8sldfvw.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpd8sldfvw.cpp:110:1: error:\
    \ expected initializer before \u2018}\u2019 token\n  110 | }\n      | ^\n/tmp/tmpd8sldfvw.cpp:110:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    std::vector<std::string>\
    \ res;\n    long n = arr.size();\n    long m = 1;\n    long k = 0;\n    long i\
    \ = 0;\n    long j = 0;\n    long k = 0;\n    long k = 0;\n    long k = 0;\n \
    \   long k = 0;\n    long k = 0;\n    long k = 0;\n    long k = 0;\n    long k\
    \ = 0;\n    long k = 0;\n    long k = 0;\n    long k = 0;\n    long k = 0;\n \
    \   long k = 0;\n    long k = 0;\n    long k = 0;\n    long k = 0;\n    long k\
    \ = 0;\n    long k = 0;\n    long k = 0;\n    long k = 0;\n    long k = 0;\n \
    \   long k = 0;\n    long k = 0;\n    long k = 0;\n    long k = 0;\n    long k\
    \ = 0;\n    long k = 0;\n    long k = 0;\n    long k = 0;\n    long k = 0;\n \
    \   long k = 0;\n    long k = 0;\n    long k = 0;\n    long k = 0;\n    long k\
    \ = 0;\n    long k = 0;\n    long k = 0;\n    long k = 0;\n    long k = 0;\n \
    \   long k = 0;\n    long k = 0;\n    long k = 0;\n    long k = 0;\n    long k\
    \ = 0;\n    long k = 0;\n    long k = 0;\n    long k = 0;\n    long k = 0;\n \
    \   long k = 0;\n    long k = 0;\n    long k = 0;\n    long k = 0;\n    long k\
    \ = 0;\n    long k = 0;\n    long k = 0;\n    long k = 0;\n    long k = 0;\n \
    \   long k = 0;\n    long k = 0;\n    long k = 0;\n    long k = 0;\n    long k\
    \ = 0;\n    long k = 0;\n    long k = 0;\n    long k = 0;\n    long k = 0;\n \
    \   long k = 0;\n    long k = 0;\n    long k = 0;\n    long k = 0;\n    long k\
    \ = 0;\n    long k = 0;\n    long k = 0;\n    long k = 0;\n    long k = 0;\n \
    \   long k = 0;\n    long k = 0;\n    long k = 0;\n    long k = 0;\n    long k\
    \ = 0;\n    long k = 0;\n    long k = 0;\n    long k = 0;\n    long k = 0;\n \
    \   long k = 0;\n    long k = 0;\n    long k = 0;\n    long k = 0;\n    long k\
    \ = 0;\n    long k = 0;\n    long k = 0;\n    long k = 0;\n    long k = 0;\n \
    \   long k = 0;\n    long k = 0;\n    long k = 0;\n    \n}\nint main() {\n   \
    \ auto candidate = by_length;\n    assert(candidate((std::vector<long>({2, 1,\
    \ 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 55}))) == (std::vector<std::string>({\"One\"})));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 3, 2}))) == (std::vector<std::string>({\"Three\", \"Two\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>({9, 4, 8}))) == (std::vector<std::string>({\"\
    Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0rusksml.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmp0rusksml.cpp:26:10: error:\
    \ redeclaration of \u2018long int k\u2019\n   26 |     long k = 0;\n      |  \
    \        ^\n/tmp/tmp0rusksml.cpp:23:10: note: \u2018long int k\u2019 previously\
    \ declared here\n   23 |     long k = 0;\n      |          ^\n/tmp/tmp0rusksml.cpp:27:10:\
    \ error: redeclaration of \u2018long int k\u2019\n   27 |     long k = 0;\n  \
    \    |          ^\n/tmp/tmp0rusksml.cpp:23:10: note: \u2018long int k\u2019 previously\
    \ declared here\n   23 |     long k = 0;\n      |          ^\n/tmp/tmp0rusksml.cpp:28:10:\
    \ error: redeclaration of \u2018long int k\u2019\n   28 |     long k = 0;\n  \
    \    |          ^\n/tmp/tmp0rusksml.cpp:23:10: note: \u2018long int k\u2019 previously\
    \ declared here\n   23 |     long k = 0;\n      |          ^\n/tmp/tmp0rusksml.cpp:29:10:\
    \ error: redeclaration of \u2018long int k\u2019\n   29 |     long k = 0;\n  \
    \    |          ^\n/tmp/tmp0rusksml.cpp:23:10: note: \u2018long int k\u2019 previously\
    \ declared here\n   23 |     long k = 0;\n      |          ^\n/tmp/tmp0rusksml.cpp:30:10:\
    \ error: redeclaration of \u2018long int k\u2019\n   30 |     long k = 0;\n  \
    \    |          ^\n/tmp/tmp0rusksml.cpp:23:10: note: \u2018long int k\u2019 previously\
    \ declared here\n   23 |     long k = 0;\n      |          ^\n/tmp/tmp0rusksml.cpp:31:10:\
    \ error: redeclaration of \u2018long int k\u2019\n   31 |     long k = 0;\n  \
    \    |          ^\n/tmp/tmp0rusksml.cpp:23:10: note: \u2018long int k\u2019 previously\
    \ declared here\n   23 |     long k = 0;\n      |          ^\n/tmp/tmp0rusksml.cpp:32:10:\
    \ error: redeclaration of \u2018long int k\u2019\n   32 |     long k = 0;\n  \
    \    |          ^\n/tmp/tmp0rusksml.cpp:23:10: note: \u2018long int k\u2019 previously\
    \ declared here\n   23 |     long k = 0;\n      |          ^\n/tmp/tmp0rusksml.cpp:33:10:\
    \ error: redeclaration of \u2018long int k\u2019\n   33 |     long k = 0;\n  \
    \    |          ^\n/tmp/tmp0rusksml.cpp:23:10: note: \u2018long int k\u2019 previously\
    \ declared here\n   23 |     long k = 0;\n      |          ^\n/tmp/tmp0rusksml.cpp:34:10:\
    \ error: redeclaration of \u2018long int k\u2019\n   34 |     long k = 0;\n  \
    \    |          ^\n/tmp/tmp0rusksml.cpp:23:10: note: \u2018long"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    std::vector<std::string>\
    \ res;\n    if (arr.size() == 0) {\n        return res;\n    }\n    long min =\
    \ *std::min_element(arr.begin(), arr.end());\n    long max = *std::max_element(arr.begin(),\
    \ arr.end());\n    long mid = min + (max - min) / 2;\n    long mid2 = mid / 10;\n\
    \    long mid3 = mid % 10;\n    long mid4 = mid2 / 10;\n    long mid5 = mid2 %\
    \ 10;\n    long mid6 = mid3 / 10;\n    long mid7 = mid3 % 10;\n    long mid8 =\
    \ mid4 / 10;\n    long mid9 = mid4 % 10;\n    long mid10 = mid5 / 10;\n    long\
    \ mid11 = mid5 % 10;\n    long mid12 = mid6 / 10;\n    long mid13 = mid6 % 10;\n\
    \    long mid14 = mid7 / 10;\n    long mid15 = mid7 % 10;\n    long mid16 = mid8\
    \ / 10;\n    long mid17 = mid8 % 10;\n    long mid18 = mid9 / 10;\n    long mid19\
    \ = mid9 % 10;\n    long mid20 = mid10 / 10;\n    long mid21 = mid10 % 10;\n \
    \   long mid22 = mid11 / 10;\n    long mid23 = mid11 % 10;\n    long mid24 = mid12\
    \ / 10;\n    long mid25 = mid12 % 10;\n    long mid26 = mid13 / 10;\n    long\
    \ mid27 = mid13 % 10;\n    long mid28 = mid14 / 10;\n    long mid29 = mid14 %\
    \ 10;\n    long mid30 = mid15 / 10;\n    long mid31 = mid15 % 10;\n    long mid32\
    \ = mid16 / 10;\n    long mid33 = mid16 % 10;\n    long mid34 = mid17 / 10;\n\
    \    long mid35 = mid17 % 10;\n    long mid36 = mid18 / 10;\n    long mid37 =\
    \ mid18 % 10;\n    long mid38 = mid19 / 10;\n    long mid39 = mid19 % 10;\n  \
    \  long mid40 = mid20 / 10;\n    long mid41 = mid20 % 10;\n    long mid42 = mid21\
    \ / 10;\n    long mid43 = mid21 % 10;\n    long mid44 = mid22 / 10;\n    long\
    \ mid45 = mid22 % 10;\n    long mid46 = mid23 / 10;\n    long mid47 = mid23 %\
    \ 10;\n    long mid48 = mid24 / 10;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({2, 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({1, -1, 55}))) == (std::vector<std::string>({\"\
    One\"})));\n    assert(candidate((std::vector<long>({1, -1, 3, 2}))) == (std::vector<std::string>({\"\
    Three\", \"Two\", \"One\"})));\n    assert(candidate((std::vector<long>({9, 4,\
    \ 8}))) == (std::vector<std::string>({\"Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "tmphr1zqqd6: /tmp/tmphr1zqqd6.cpp:77: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    std::vector<std::string>\
    \ result;\n    if (arr.size() == 0) {\n        return result;\n    }\n    long\
    \ min = arr[0];\n    long max = arr[0];\n    for (auto &i : arr) {\n        if\
    \ (i < min) {\n            min = i;\n        }\n        if (i > max) {\n     \
    \       max = i;\n        }\n    }\n    long mid = (min + max) / 2;\n    long\
    \ mid2 = mid / 10;\n    long mid3 = mid % 10;\n    long mid4 = mid2 / 10;\n  \
    \  long mid5 = mid2 % 10;\n    long mid6 = mid3 / 10;\n    long mid7 = mid3 %\
    \ 10;\n    long mid8 = mid4 / 10;\n    long mid9 = mid4 % 10;\n    long mid10\
    \ = mid5 / 10;\n    long mid11 = mid5 % 10;\n    long mid12 = mid6 / 10;\n   \
    \ long mid13 = mid6 % 10;\n    long mid14 = mid7 / 10;\n    long mid15 = mid7\
    \ % 10;\n    long mid16 = mid8 / 10;\n    long mid17 = mid8 % 10;\n    long mid18\
    \ = mid9 / 10;\n    long mid19 = mid9 % 10;\n    long mid20 = mid10 / 10;\n  \
    \  long mid21 = mid10 % 10;\n    long mid22 = mid11 / 10;\n    long mid23 = mid11\
    \ % 10;\n    long mid24 = mid12 / 10;\n    long mid25 = mid12 % 10;\n    long\
    \ mid26 = mid13 / 10;\n    long mid27 = mid13 % 10;\n    long mid28 = mid14 /\
    \ 10;\n    long mid29 = mid14 % 10;\n    long mid30 = mid15 / 10;\n    long mid31\
    \ = mid15 % 10;\n    long mid32 = mid16 / 10;\n    long mid33 = mid16 % 10;\n\
    \    long mid34 = mid17 / 10;\n    long mid35 = mid17 % 10;\n    long mid36 =\
    \ mid18 / 10;\n    long mid37 = mid18 % 10;\n    long mid38 = mid19 / 10;\n  \
    \  long mid39 = mid19 % 10;\n    long mid40 = mid20 / 10;\n    long mid41 = mid20\
    \ % 10;\n    long mid42 = mid21 / 10;\n    long mid43 = mid21 % 10;\n    long\
    \ mid44 = mid22 / 10;\n    long mid45 = mid22 % 10;\n    long mid46 = mid23 /\
    \ 10;\n    long mid47\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({2,\
    \ 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 55}))) == (std::vector<std::string>({\"One\"})));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 3, 2}))) == (std::vector<std::string>({\"Three\", \"Two\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>({9, 4, 8}))) == (std::vector<std::string>({\"\
    Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4nj4wu0c.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmp4nj4wu0c.cpp:81:1: error:\
    \ expected initializer before \u2018}\u2019 token\n   81 | }\n      | ^\n/tmp/tmp4nj4wu0c.cpp:81:1:\
    \ warning: control reaches end of non-void function [-Wreturn-type]\n   81 | }\n\
    \      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    std::vector<std::string>\
    \ res;\n    if (arr.size() == 0) {\n        return res;\n    }\n    long min =\
    \ arr[0];\n    long max = arr[0];\n    for (auto i : arr) {\n        if (i < min)\
    \ {\n            min = i;\n        }\n        if (i > max) {\n            max\
    \ = i;\n        }\n    }\n    long mid = min + (max - min) / 2;\n    long mid2\
    \ = mid / 10;\n    long mid3 = mid % 10;\n    long mid4 = mid2 / 10;\n    long\
    \ mid5 = mid2 % 10;\n    long mid6 = mid3 / 10;\n    long mid7 = mid3 % 10;\n\
    \    long mid8 = mid4 / 10;\n    long mid9 = mid4 % 10;\n    long mid10 = mid5\
    \ / 10;\n    long mid11 = mid5 % 10;\n    long mid12 = mid6 / 10;\n    long mid13\
    \ = mid6 % 10;\n    long mid14 = mid7 / 10;\n    long mid15 = mid7 % 10;\n   \
    \ long mid16 = mid8 / 10;\n    long mid17 = mid8 % 10;\n    long mid18 = mid9\
    \ / 10;\n    long mid19 = mid9 % 10;\n    long mid20 = mid10 / 10;\n    long mid21\
    \ = mid10 % 10;\n    long mid22 = mid11 / 10;\n    long mid23 = mid11 % 10;\n\
    \    long mid24 = mid12 / 10;\n    long mid25 = mid12 % 10;\n    long mid26 =\
    \ mid13 / 10;\n    long mid27 = mid13 % 10;\n    long mid28 = mid14 / 10;\n  \
    \  long mid29 = mid14 % 10;\n    long mid30 = mid15 / 10;\n    long mid31 = mid15\
    \ % 10;\n    long mid32 = mid16 / 10;\n    long mid33 = mid16 % 10;\n    long\
    \ mid34 = mid17 / 10;\n    long mid35 = mid17 % 10;\n    long mid36 = mid18 /\
    \ 10;\n    long mid37 = mid18 % 10;\n    long mid38 = mid19 / 10;\n    long mid39\
    \ = mid19 % 10;\n    long mid40 = mid20 / 10;\n    long mid41 = mid20 % 10;\n\
    \    long mid42 = mid21 / 10;\n    long mid43 = mid21 % 10;\n    long mid44 =\
    \ mid22 / 10;\n    long mid45 = mid22 % 10;\n    long mid46 = mid23 / 10;\n  \
    \  long mid47\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({2,\
    \ 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 55}))) == (std::vector<std::string>({\"One\"})));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 3, 2}))) == (std::vector<std::string>({\"Three\", \"Two\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>({9, 4, 8}))) == (std::vector<std::string>({\"\
    Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpffapbpca.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpffapbpca.cpp:81:1: error:\
    \ expected initializer before \u2018}\u2019 token\n   81 | }\n      | ^\n/tmp/tmpffapbpca.cpp:81:1:\
    \ warning: control reaches end of non-void function [-Wreturn-type]\n   81 | }\n\
    \      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    std::vector<std::string>\
    \ res;\n    if (arr.size() == 0) {\n        return res;\n    }\n    long min =\
    \ *std::min_element(arr.begin(), arr.end());\n    long max = *std::max_element(arr.begin(),\
    \ arr.end());\n    long mid = (min + max) / 2;\n    long mid2 = mid / 10;\n  \
    \  long mid3 = mid % 10;\n    long mid4 = mid2 / 10;\n    long mid5 = mid2 % 10;\n\
    \    long mid6 = mid3 / 10;\n    long mid7 = mid3 % 10;\n    long mid8 = mid4\
    \ / 10;\n    long mid9 = mid4 % 10;\n    long mid10 = mid5 / 10;\n    long mid11\
    \ = mid5 % 10;\n    long mid12 = mid6 / 10;\n    long mid13 = mid6 % 10;\n   \
    \ long mid14 = mid7 / 10;\n    long mid15 = mid7 % 10;\n    long mid16 = mid8\
    \ / 10;\n    long mid17 = mid8 % 10;\n    long mid18 = mid9 / 10;\n    long mid19\
    \ = mid9 % 10;\n    long mid20 = mid10 / 10;\n    long mid21 = mid10 % 10;\n \
    \   long mid22 = mid11 / 10;\n    long mid23 = mid11 % 10;\n    long mid24 = mid12\
    \ / 10;\n    long mid25 = mid12 % 10;\n    long mid26 = mid13 / 10;\n    long\
    \ mid27 = mid13 % 10;\n    long mid28 = mid14 / 10;\n    long mid29 = mid14 %\
    \ 10;\n    long mid30 = mid15 / 10;\n    long mid31 = mid15 % 10;\n    long mid32\
    \ = mid16 / 10;\n    long mid33 = mid16 % 10;\n    long mid34 = mid17 / 10;\n\
    \    long mid35 = mid17 % 10;\n    long mid36 = mid18 / 10;\n    long mid37 =\
    \ mid18 % 10;\n    long mid38 = mid19 / 10;\n    long mid39 = mid19 % 10;\n  \
    \  long mid40 = mid20 / 10;\n    long mid41 = mid20 % 10;\n    long mid42 = mid21\
    \ / 10;\n    long mid43 = mid21 % 10;\n    long mid44 = mid22 / 10;\n    long\
    \ mid45 = mid22 % 10;\n    long mid46 = mid23 / 10;\n    long mid47 = mid23 %\
    \ 10;\n    long mid48 = mid24 / 10;\n\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({2, 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({1, -1, 55}))) == (std::vector<std::string>({\"\
    One\"})));\n    assert(candidate((std::vector<long>({1, -1, 3, 2}))) == (std::vector<std::string>({\"\
    Three\", \"Two\", \"One\"})));\n    assert(candidate((std::vector<long>({9, 4,\
    \ 8}))) == (std::vector<std::string>({\"Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "tmpylncpyrf: /tmp/tmpylncpyrf.cpp:78: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    if (arr.empty())\
    \ {\n        return {};\n    }\n    std::vector<long> sorted_arr;\n    std::sort(arr.begin(),\
    \ arr.end());\n    std::reverse(arr.begin(), arr.end());\n    for (long i : arr)\
    \ {\n        std::string name = to_string(static_cast<int>(i));\n        sorted_arr.push_back(name);\n\
    \    }\n    return sorted_arr;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({2, 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({1, -1, 55}))) == (std::vector<std::string>({\"\
    One\"})));\n    assert(candidate((std::vector<long>({1, -1, 3, 2}))) == (std::vector<std::string>({\"\
    Three\", \"Two\", \"One\"})));\n    assert(candidate((std::vector<long>({9, 4,\
    \ 8}))) == (std::vector<std::string>({\"Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmplx26jvl5.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmplx26jvl5.cpp:27:28: error:\
    \ \u2018to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   27 |         std::string name = to_string(static_cast<int>(i));\n      |\
    \                            ^~~~~~~~~\n      |                            std::__cxx11::to_string\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmplx26jvl5.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:6598:3:\
    \ note: \u2018std::__cxx11::to_string\u2019 declared here\n 6598 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n/tmp/tmplx26jvl5.cpp:28:34: error: no matching\
    \ function for call to \u2018std::vector<long int>::push_back(std::string&)\u2019\
    \n   28 |         sorted_arr.push_back(name);\n      |                       \
    \           ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmplx26jvl5.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    std::vector<std::string>\
    \ res;\n    long n = arr.size();\n    long m = std::min(n, 9);\n    long k = std::max(n,\
    \ m);\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n  \
    \  long m = 0;\n    long n = 0;\n    long o = 0;\n    long p = 0;\n    long q\
    \ = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n \
    \   long v = 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n    long z\
    \ = 0;\n    long A = 0;\n    long B = 0;\n    long C = 0;\n    long D = 0;\n \
    \   long E = 0;\n    long F = 0;\n    long G = 0;\n    long H = 0;\n    long I\
    \ = 0;\n    long J = 0;\n    long K = 0;\n    long L = 0;\n    long M = 0;\n \
    \   long N = 0;\n    long O = 0;\n    long P = 0;\n    long Q = 0;\n    long R\
    \ = 0;\n    long S = 0;\n    long T = 0;\n    long U = 0;\n    long V = 0;\n \
    \   long W = 0;\n    long X = 0;\n    long Y = 0;\n    long Z = 0;\n    long a\
    \ = 0;\n    long b = 0;\n    long c = 0;\n    long d = 0;\n    long e = 0;\n \
    \   long f = 0;\n    long g = 0;\n    long h = 0;\n    long i = 0;\n    long j\
    \ = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n \
    \   long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s\
    \ = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n \
    \   long x = 0;\n    long y = 0;\n    long z = 0;\n    long A = 0;\n    long B\
    \ = 0;\n    long C = 0;\n    long D = 0;\n    long E = 0;\n    long F = 0;\n \
    \   long G = 0;\n    long H = 0;\n    long I = 0;\n    long J = 0;\n    long K\
    \ = 0;\n    long L = 0;\n    long M = 0;\n    long N = 0;\n    long O = 0;\n \
    \   long P = 0;\n    long Q = 0;\n    long R = 0;\n    long S = 0;\n    long T\
    \ = 0;\n    long U = 0;\n    long V = 0;\n    long W = 0;\n    long X = 0;\n \
    \   long Y = 0;\n    long Z = 0;\n    long a = 0;\n    long b = 0;\n\n}\nint main()\
    \ {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({2,\
    \ 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 55}))) == (std::vector<std::string>({\"One\"})));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 3, 2}))) == (std::vector<std::string>({\"Three\", \"Two\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>({9, 4, 8}))) == (std::vector<std::string>({\"\
    Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpz6zkz8ul.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpz6zkz8ul.cpp:22:27: error:\
    \ no matching function for call to \u2018min(long int&, int)\u2019\n   22 |  \
    \   long m = std::min(n, 9);\n      |                           ^\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpz6zkz8ul.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:198:5:\
    \ note: candidate: \u2018template<class _Tp> constexpr const _Tp& std::min(const\
    \ _Tp&, const _Tp&)\u2019\n  198 |     min(const _Tp& __a, const _Tp& __b)\n \
    \     |     ^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:198:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpz6zkz8ul.cpp:22:27:\
    \ note:   deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018\
    long int\u2019 and \u2018int\u2019)\n   22 |     long m = std::min(n, 9);\n  \
    \    |                           ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \      "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    std::vector<std::string>\
    \ result;\n    long min = std::numeric_limits<long>::min();\n    long max = std::numeric_limits<long>::max();\n\
    \    long mid = 0;\n    for (long i : arr) {\n        if (i < min) {\n       \
    \     mid = min;\n        } else if (i > max) {\n            mid = max;\n    \
    \    } else {\n            mid = i;\n        }\n        std::string s = to_string(mid);\n\
    \        result.push_back(s);\n    }\n    return result;\n}\nint main() {\n  \
    \  auto candidate = by_length;\n    assert(candidate((std::vector<long>({2, 1,\
    \ 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 55}))) == (std::vector<std::string>({\"One\"})));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 3, 2}))) == (std::vector<std::string>({\"Three\", \"Two\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>({9, 4, 8}))) == (std::vector<std::string>({\"\
    Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpc0wmboiq.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpc0wmboiq.cpp:32:25: error:\
    \ \u2018to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   32 |         std::string s = to_string(mid);\n      |                  \
    \       ^~~~~~~~~\n      |                         std::__cxx11::to_string\nIn\
    \ file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpc0wmboiq.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:6598:3:\
    \ note: \u2018std::__cxx11::to_string\u2019 declared here\n 6598 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    if (arr.empty())\
    \ {\n        return {};\n    }\n    std::vector<long> sorted_arr(arr.begin(),\
    \ arr.end());\n    std::sort(sorted_arr.begin(), sorted_arr.end());\n    std::vector<long>\
    \ reverse_arr(sorted_arr.rbegin(), sorted_arr.rend());\n    std::reverse(reverse_arr.begin(),\
    \ reverse_arr.end());\n    std::vector<std::string> result;\n    for (long i :\
    \ reverse_arr) {\n        std::string name;\n        if (i <= 9) {\n         \
    \   name = \"One\";\n        } else if (i <= 99) {\n            name = \"Two\"\
    ;\n        } else if (i <= 999) {\n            name = \"Three\";\n        } else\
    \ if (i <= 9999) {\n            name = \"Four\";\n        } else if (i <= 99999)\
    \ {\n            name = \"Five\";\n        } else if (i <= 999999) {\n       \
    \     name = \"Six\";\n        } else if (i <= 9999999) {\n            name =\
    \ \"Seven\";\n        } else if (i <= 999999999) {\n            name = \"Eight\"\
    ;\n        } else if (i <= 99999999999) {\n            name = \"Nine\";\n    \
    \    } else {\n            name = \"?\";\n        }\n        result.push_back(name);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({2, 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({1, -1, 55}))) == (std::vector<std::string>({\"\
    One\"})));\n    assert(candidate((std::vector<long>({1, -1, 3, 2}))) == (std::vector<std::string>({\"\
    Three\", \"Two\", \"One\"})));\n    assert(candidate((std::vector<long>({9, 4,\
    \ 8}))) == (std::vector<std::string>({\"Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "tmp67en85sr: /tmp/tmp67en85sr.cpp:57: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    std::vector<std::string>\
    \ result;\n    long long max = 0;\n    for (long long i : arr) {\n        max\
    \ = std::max(max, i);\n    }\n    for (long long i : arr) {\n        if (i <=\
    \ max) {\n            result.push_back(i == max ? \"One\" : std::to_string(i));\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({2, 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({1, -1, 55}))) == (std::vector<std::string>({\"\
    One\"})));\n    assert(candidate((std::vector<long>({1, -1, 3, 2}))) == (std::vector<std::string>({\"\
    Three\", \"Two\", \"One\"})));\n    assert(candidate((std::vector<long>({9, 4,\
    \ 8}))) == (std::vector<std::string>({\"Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "tmpd_1_o3db: /tmp/tmpd_1_o3db.cpp:34: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    std::vector<std::string>\
    \ result;\n    long min = std::numeric_limits<long>::min();\n    long max = std::numeric_limits<long>::max();\n\
    \    long mid;\n    for (long i : arr) {\n        if (i < min) {\n           \
    \ min = i;\n        }\n        if (i > max) {\n            max = i;\n        }\n\
    \    }\n    mid = min + (max - min) / 2;\n    for (long i : arr) {\n        if\
    \ (i < mid) {\n            result.push_back(\"One\");\n        } else if (i >\
    \ mid) {\n            result.push_back(\"Nine\");\n        } else {\n        \
    \    result.push_back(\"Two\");\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({2,\
    \ 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 55}))) == (std::vector<std::string>({\"One\"})));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 3, 2}))) == (std::vector<std::string>({\"Three\", \"Two\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>({9, 4, 8}))) == (std::vector<std::string>({\"\
    Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "tmptv3v6kfg: /tmp/tmptv3v6kfg.cpp:46: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    std::vector<std::string>\
    \ res;\n    if (arr.size() == 0) {\n        return res;\n    }\n    long first\
    \ = arr[0];\n    long last = arr[0];\n    for (long i : arr) {\n        if (i\
    \ < first) {\n            first = i;\n        }\n        if (i > last) {\n   \
    \         last = i;\n        }\n    }\n    long mid = first + (last - first) /\
    \ 2;\n    long mid2 = mid / 10;\n    long mid3 = mid % 10;\n    long mid4 = mid2\
    \ / 10;\n    long mid5 = mid2 % 10;\n    long mid6 = mid3 / 10;\n    long mid7\
    \ = mid3 % 10;\n    long mid8 = mid4 / 10;\n    long mid9 = mid4 % 10;\n    long\
    \ mid10 = mid5 / 10;\n    long mid11 = mid5 % 10;\n    long mid12 = mid6 / 10;\n\
    \    long mid13 = mid6 % 10;\n    long mid14 = mid7 / 10;\n    long mid15 = mid7\
    \ % 10;\n    long mid16 = mid8 / 10;\n    long mid17 = mid8 % 10;\n    long mid18\
    \ = mid9 / 10;\n    long mid19 = mid9 % 10;\n    long mid20 = mid10 / 10;\n  \
    \  long mid21 = mid10 % 10;\n    long mid22 = mid11 / 10;\n    long mid23 = mid11\
    \ % 10;\n    long mid24 = mid12 / 10;\n    long mid25 = mid12 % 10;\n    long\
    \ mid26 = mid13 / 10;\n    long mid27 = mid13 % 10;\n    long mid28 = mid14 /\
    \ 10;\n    long mid29 = mid14 % 10;\n    long mid30 = mid15 / 10;\n    long mid31\
    \ = mid15 % 10;\n    long mid32 = mid16 / 10;\n    long mid33 = mid16 % 10;\n\
    \    long mid34 = mid17 / 10;\n    long mid35 = mid17 % 10;\n    long mid36 =\
    \ mid18 / 10;\n    long mid37 = mid18 % 10;\n    long mid38 = mid19 / 10;\n  \
    \  long mid39 = mid19 % 10;\n    long mid40 = mid20 / 10;\n    long mid41 = mid20\
    \ % 10;\n    long mid42 = mid21 / 10;\n    long mid43 = mid21 % 10;\n    long\
    \ mid44 = mid22 / 10;\n    long mid45 = mid22 % 10;\n    long mid46 = mid23 /\
    \ 10;\n    long mid47\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({2,\
    \ 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 55}))) == (std::vector<std::string>({\"One\"})));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 3, 2}))) == (std::vector<std::string>({\"Three\", \"Two\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>({9, 4, 8}))) == (std::vector<std::string>({\"\
    Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3timzksm.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmp3timzksm.cpp:81:1: error:\
    \ expected initializer before \u2018}\u2019 token\n   81 | }\n      | ^\n/tmp/tmp3timzksm.cpp:81:1:\
    \ warning: control reaches end of non-void function [-Wreturn-type]\n   81 | }\n\
    \      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    if (arr.size()\
    \ == 0) {\n        return {};\n    }\n    long min_len = std::min(arr.begin(),\
    \ arr.end()) - 1;\n    long max_len = std::max(arr.begin(), arr.end()) + 1;\n\
    \    std::vector<std::string> res;\n    for (long i = min_len; i <= max_len; ++i)\
    \ {\n        res.push_back(std::to_string(arr[i]));\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({2,\
    \ 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 55}))) == (std::vector<std::string>({\"One\"})));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 3, 2}))) == (std::vector<std::string>({\"Three\", \"Two\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>({9, 4, 8}))) == (std::vector<std::string>({\"\
    Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpu0xtcbaj.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpu0xtcbaj.cpp:23:53: error:\
    \ cannot convert \u2018__gnu_cxx::__normal_iterator<long int*, std::vector<long\
    \ int> >\u2019 to \u2018long int\u2019 in initialization\n   23 |     long min_len\
    \ = std::min(arr.begin(), arr.end()) - 1;\n      |                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n\
    \      |                                                     |\n      |      \
    \                                               __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\n/tmp/tmpu0xtcbaj.cpp:24:53: error: cannot convert\
    \ \u2018__gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\u2019\
    \ to \u2018long int\u2019 in initialization\n   24 |     long max_len = std::max(arr.begin(),\
    \ arr.end()) + 1;\n      |                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n\
    \      |                                                     |\n      |      \
    \                                               __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    std::vector<std::string>\
    \ result;\n    long max = std::accumulate(arr.begin(), arr.end(), 0);\n    long\
    \ min = std::accumulate(arr.begin(), arr.end(), 0);\n    long mid = max / 2;\n\
    \    long mid2 = mid / 10;\n    long mid3 = mid2 / 10;\n    long mid4 = mid3 /\
    \ 10;\n    long mid5 = mid4 / 10;\n    long mid6 = mid5 / 10;\n    long mid7 =\
    \ mid6 / 10;\n    long mid8 = mid7 / 10;\n    long mid9 = mid8 / 10;\n    long\
    \ mid10 = mid9 / 10;\n    long mid11 = mid10 / 10;\n    long mid12 = mid11 / 10;\n\
    \    long mid13 = mid12 / 10;\n    long mid14 = mid13 / 10;\n    long mid15 =\
    \ mid14 / 10;\n    long mid16 = mid15 / 10;\n    long mid17 = mid16 / 10;\n  \
    \  long mid18 = mid17 / 10;\n    long mid19 = mid18 / 10;\n    long mid20 = mid19\
    \ / 10;\n    long mid21 = mid20 / 10;\n    long mid22 = mid21 / 10;\n    long\
    \ mid23 = mid22 / 10;\n    long mid24 = mid23 / 10;\n    long mid25 = mid24 /\
    \ 10;\n    long mid26 = mid25 / 10;\n    long mid27 = mid26 / 10;\n    long mid28\
    \ = mid27 / 10;\n    long mid29 = mid28 / 10;\n    long mid30 = mid29 / 10;\n\
    \    long mid31 = mid30 / 10;\n    long mid32 = mid31 / 10;\n    long mid33 =\
    \ mid32 / 10;\n    long mid34 = mid33 / 10;\n    long mid35 = mid34 / 10;\n  \
    \  long mid36 = mid35 / 10;\n    long mid37 = mid36 / 10;\n    long mid38 = mid37\
    \ / 10;\n    long mid39 = mid38 / 10;\n    long mid40 = mid39 / 10;\n    long\
    \ mid41 = mid40 / 10;\n    long mid42 = mid41 / 10;\n    long mid43 = mid42 /\
    \ 10;\n    long mid44 = mid43 / 10;\n    long mid45 = mid44 / 10;\n    long mid46\
    \ = mid45 / 10;\n    long mid47 = mid46 / 10;\n    long mid48 = mid47 / 10;\n\
    \    long mid49 = mid48 / 10;\n    long \n}\nint main() {\n    auto candidate\
    \ = by_length;\n    assert(candidate((std::vector<long>({2, 1, 1, 4, 5, 8, 2,\
    \ 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"Four\", \"Three\"\
    , \"Two\", \"Two\", \"One\", \"One\"})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 55}))) == (std::vector<std::string>({\"One\"})));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 3, 2}))) == (std::vector<std::string>({\"Three\", \"Two\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>({9, 4, 8}))) == (std::vector<std::string>({\"\
    Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpiwgae59d.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpiwgae59d.cpp:73:1: error:\
    \ expected unqualified-id before \u2018}\u2019 token\n   73 | }\n      | ^\n/tmp/tmpiwgae59d.cpp:73:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    std::vector<std::string>\
    \ res;\n    if (arr.size() == 0) {\n        return res;\n    }\n    long min =\
    \ arr[0];\n    long max = arr[0];\n    for (long i : arr) {\n        if (i < min)\
    \ {\n            min = i;\n        }\n        if (i > max) {\n            max\
    \ = i;\n        }\n    }\n    long mid = min + (max - min) / 2;\n    long mid2\
    \ = mid / 10;\n    long mid3 = mid % 10;\n    long mid4 = mid2 / 10;\n    long\
    \ mid5 = mid2 % 10;\n    long mid6 = mid3 / 10;\n    long mid7 = mid3 % 10;\n\
    \    long mid8 = mid4 / 10;\n    long mid9 = mid4 % 10;\n    long mid10 = mid5\
    \ / 10;\n    long mid11 = mid5 % 10;\n    long mid12 = mid6 / 10;\n    long mid13\
    \ = mid6 % 10;\n    long mid14 = mid7 / 10;\n    long mid15 = mid7 % 10;\n   \
    \ long mid16 = mid8 / 10;\n    long mid17 = mid8 % 10;\n    long mid18 = mid9\
    \ / 10;\n    long mid19 = mid9 % 10;\n    long mid20 = mid10 / 10;\n    long mid21\
    \ = mid10 % 10;\n    long mid22 = mid11 / 10;\n    long mid23 = mid11 % 10;\n\
    \    long mid24 = mid12 / 10;\n    long mid25 = mid12 % 10;\n    long mid26 =\
    \ mid13 / 10;\n    long mid27 = mid13 % 10;\n    long mid28 = mid14 / 10;\n  \
    \  long mid29 = mid14 % 10;\n    long mid30 = mid15 / 10;\n    long mid31 = mid15\
    \ % 10;\n    long mid32 = mid16 / 10;\n    long mid33 = mid16 % 10;\n    long\
    \ mid34 = mid17 / 10;\n    long mid35 = mid17 % 10;\n    long mid36 = mid18 /\
    \ 10;\n    long mid37 = mid18 % 10;\n    long mid38 = mid19 / 10;\n    long mid39\
    \ = mid19 % 10;\n    long mid40 = mid20 / 10;\n    long mid41 = mid20 % 10;\n\
    \    long mid42 = mid21 / 10;\n    long mid43 = mid21 % 10;\n    long mid44 =\
    \ mid22 / 10;\n    long mid45 = mid22 % 10;\n    long mid46 = mid23 / 10;\n  \
    \  long mid47\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({2,\
    \ 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 55}))) == (std::vector<std::string>({\"One\"})));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 3, 2}))) == (std::vector<std::string>({\"Three\", \"Two\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>({9, 4, 8}))) == (std::vector<std::string>({\"\
    Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpsw5lvbzc.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpsw5lvbzc.cpp:81:1: error:\
    \ expected initializer before \u2018}\u2019 token\n   81 | }\n      | ^\n/tmp/tmpsw5lvbzc.cpp:81:1:\
    \ warning: control reaches end of non-void function [-Wreturn-type]\n   81 | }\n\
    \      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    std::vector<std::string>\
    \ res;\n    long max = 0;\n    for (auto i : arr) {\n        if (i > max) {\n\
    \            max = i;\n        }\n    }\n    for (auto i : arr) {\n        if\
    \ (i <= max) {\n            res.push_back(i + to_string(max));\n        }\n  \
    \  }\n    return res;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({2,\
    \ 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 55}))) == (std::vector<std::string>({\"One\"})));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 3, 2}))) == (std::vector<std::string>({\"Three\", \"Two\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>({9, 4, 8}))) == (std::vector<std::string>({\"\
    Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpbvw514d6.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpbvw514d6.cpp:29:31: error:\
    \ \u2018to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   29 |             res.push_back(i + to_string(max));\n      |           \
    \                    ^~~~~~~~~\n      |                               std::__cxx11::to_string\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpbvw514d6.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:6598:3:\
    \ note: \u2018std::__cxx11::to_string\u2019 declared here\n 6598 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    std::vector<std::string>\
    \ res;\n    long n = arr.size();\n    if (n == 0)\n        return res;\n    long\
    \ max_len = 0, min_len = INT_MAX;\n    for (long i = 0; i < n; i++) {\n      \
    \  if (arr[i] > max_len)\n            max_len = arr[i];\n        if (arr[i] <\
    \ min_len)\n            min_len = arr[i];\n    }\n    long gap = max_len - min_len;\n\
    \    long n = arr.size();\n    long gap = max_len - min_len;\n    long max_len\
    \ = min_len + gap;\n    long min_len = max_len - gap;\n    long gap = max_len\
    \ - min_len;\n    long n = arr.size();\n    long gap = max_len - min_len;\n  \
    \  long max_len = min_len + gap;\n    long min_len = max_len - gap;\n    long\
    \ gap = max_len - min_len;\n    long n = arr.size();\n    long gap = max_len -\
    \ min_len;\n    long max_len = min_len + gap;\n    long min_len = max_len - gap;\n\
    \    long gap = max_len - min_len;\n    long n = arr.size();\n    long gap = max_len\
    \ - min_len;\n    long max_len = min_len + gap;\n    long min_len = max_len -\
    \ gap;\n    long gap = max_len - min_len;\n    long n = arr.size();\n    long\
    \ gap = max_len - min_len;\n    long max_len = min_len + gap;\n    long min_len\
    \ = max_len - gap;\n    long gap = max_len - min_len;\n    long n = arr.size();\n\
    \    long gap = max_len - min_len;\n    long max_len = min_len + gap;\n    long\
    \ min_len = max_len - gap;\n    long gap = max_len - min_len;\n    long n = arr.size();\n\
    \    long gap = max_len - min_len;\n    long max_len = min_len + gap;\n    long\
    \ min_len = max_len - gap;\n    long gap = max_len - min_len;\n    long n = arr.size();\n\
    \    long gap = max_len - min_len;\n    long max_len = min_len + gap;\n    long\
    \ min_len = max_len - gap;\n    long gap = max_len - min_len;\n    long n = arr.size();\n\
    \    long gap = max_len - min_len;\n    long max_len = min_len + gap;\n    long\
    \ min_len = max_len - gap;\n    long gap = max_len - min_len;\n    long n = arr.size();\n\
    \    long gap = max_len - min_len;\n    long max_len = min_len + gap;\n    long\
    \ min_len = max_len - gap;\n    long gap = max_len - min_len;\n    \n}\nint main()\
    \ {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({2,\
    \ 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 55}))) == (std::vector<std::string>({\"One\"})));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 3, 2}))) == (std::vector<std::string>({\"Three\", \"Two\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>({9, 4, 8}))) == (std::vector<std::string>({\"\
    Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvh97m__v.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpvh97m__v.cpp:32:10: error:\
    \ redeclaration of \u2018long int n\u2019\n   32 |     long n = arr.size();\n\
    \      |          ^\n/tmp/tmpvh97m__v.cpp:21:10: note: \u2018long int n\u2019\
    \ previously declared here\n   21 |     long n = arr.size();\n      |        \
    \  ^\n/tmp/tmpvh97m__v.cpp:33:10: error: redeclaration of \u2018long int gap\u2019\
    \n   33 |     long gap = max_len - min_len;\n      |          ^~~\n/tmp/tmpvh97m__v.cpp:31:10:\
    \ note: \u2018long int gap\u2019 previously declared here\n   31 |     long gap\
    \ = max_len - min_len;\n      |          ^~~\n/tmp/tmpvh97m__v.cpp:34:10: error:\
    \ redeclaration of \u2018long int max_len\u2019\n   34 |     long max_len = min_len\
    \ + gap;\n      |          ^~~~~~~\n/tmp/tmpvh97m__v.cpp:24:10: note: \u2018long\
    \ int max_len\u2019 previously declared here\n   24 |     long max_len = 0, min_len\
    \ = INT_MAX;\n      |          ^~~~~~~\n/tmp/tmpvh97m__v.cpp:35:10: error: redeclaration\
    \ of \u2018long int min_len\u2019\n   35 |     long min_len = max_len - gap;\n\
    \      |          ^~~~~~~\n/tmp/tmpvh97m__v.cpp:24:23: note: \u2018long int min_len\u2019\
    \ previously declared here\n   24 |     long max_len = 0, min_len = INT_MAX;\n\
    \      |                       ^~~~~~~\n/tmp/tmpvh97m__v.cpp:36:10: error: redeclaration\
    \ of \u2018long int gap\u2019\n   36 |     long gap = max_len - min_len;\n   \
    \   |          ^~~\n/tmp/tmpvh97m__v.cpp:31:10: note: \u2018long int gap\u2019\
    \ previously declared here\n   31 |     long gap = max_len - min_len;\n      |\
    \          ^~~\n/tmp/tmpvh97m__v.cpp:37:10: error: redeclaration of \u2018long\
    \ int n\u2019\n   37 |     long n = arr.size();\n      |          ^\n/tmp/tmpvh97m__v.cpp:21:10:\
    \ note: \u2018long int n\u2019 previously declared here\n   21 |     long n =\
    \ arr.size();\n      |          ^\n/tmp/tmpvh97m__v.cpp:38:10: error: redeclaration\
    \ of \u2018long int gap\u2019\n   38 |     long gap = max_len - min_len;\n   \
    \   |          ^~~\n/tmp/tmpvh97m__v.cpp:31:10: note: \u2018long int gap\u2019\
    \ previously declared here\n   31 |     long gap = max_len - min_len;\n      |\
    \          ^~~\n/tmp/tmpvh97m__v.cpp:39:10: error: redeclaration of \u2018lo"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    std::vector<std::string>\
    \ ret;\n    if (arr.size() == 0) {\n        return ret;\n    }\n    long maxLen\
    \ = *std::max_element(arr.begin(), arr.end());\n    long minLen = *std::min_element(arr.begin(),\
    \ arr.end());\n    long len = maxLen - minLen + 1;\n    long mid = len / 2;\n\
    \    long midLen = len % 2;\n    long midLenLen = midLen / 2;\n    long midLenLenLen\
    \ = midLen % 2;\n    long midLenLenLenLen = midLenLen / 2;\n    long midLenLenLenLenLen\
    \ = midLenLenLen % 2;\n    long midLenLenLenLenLenLen = midLenLenLenLen / 2;\n\
    \    long midLenLenLenLenLenLenLen = midLenLenLenLenLen % 2;\n    long midLenLenLenLenLenLenLenLen\
    \ = midLenLenLenLenLenLenLen / 2;\n    long midLenLenLenLenLenLenLenLenLen = midLenLenLenLenLenLenLenLenLen\
    \ % 2;\n    long midLenLenLenLenLenLenLenLenLenLen = midLenLenLenLenLenLenLenLenLenLen\
    \ / 2;\n    long midLenLenLenLenLenLenLenLenLenLenLen = midLenLenLenLenLenLenLenLenLenLenLen\
    \ % 2;\n    long midLenLenLenLenLenLenLenLenLenLenLenLen = midLenLenLenLenLenLenLenLenLenLenLenLenLen\
    \ / 2;\n    long midLenLenLenLenLenLenLenLenLenLenLenLenLenLen = midLenLenLenLenLenLenLenLenLenLenLenLenLenLen\
    \ % 2;\n    long midLenLenLenLenLenLenLenLenLenLenLenLenLenLenLen = midLenLenLenLenLenLenLenLenLenLenLenLenLenLenLen\
    \ / 2;\n    long midLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLen = midLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLen\
    \ / 2;\n    long midLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLen\
    \ = midLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLen /\
    \ 2;\n    long midLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLen\n\
    }\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({2,\
    \ 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 55}))) == (std::vector<std::string>({\"One\"})));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 3, 2}))) == (std::vector<std::string>({\"Three\", \"Two\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>({9, 4, 8}))) == (std::vector<std::string>({\"\
    Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvt9m66v8.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpvt9m66v8.cpp:39:52: error:\
    \ \u2018midLenLenLenLenLenLenLenLenLenLenLenLenLen\u2019 was not declared in this\
    \ scope; did you mean \u2018midLenLenLenLenLenLenLenLenLenLenLenLen\u2019?\n \
    \  39 |     long midLenLenLenLenLenLenLenLenLenLenLenLen = midLenLenLenLenLenLenLenLenLenLenLenLenLen\
    \ / 2;\n      |                                                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \      |                                                    midLenLenLenLenLenLenLenLenLenLenLenLen\n\
    /tmp/tmpvt9m66v8.cpp:45:1: error: expected initializer before \u2018}\u2019 token\n\
    \   45 | }\n      | ^\n/tmp/tmpvt9m66v8.cpp:45:1: warning: control reaches end\
    \ of non-void function [-Wreturn-type]\n   45 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    std::vector<std::string>\
    \ res;\n    long long temp;\n    for (auto i : arr) {\n        if (i >= 1 && i\
    \ <= 9) {\n            temp = i;\n        } else {\n            temp = 9 - i;\n\
    \        }\n        res.push_back(by_length(temp));\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({2,\
    \ 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 55}))) == (std::vector<std::string>({\"One\"})));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 3, 2}))) == (std::vector<std::string>({\"Three\", \"Two\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>({9, 4, 8}))) == (std::vector<std::string>({\"\
    Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvqwsrss_.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpvqwsrss_.cpp:28:33: error:\
    \ could not convert \u2018temp\u2019 from \u2018long long int\u2019 to \u2018\
    std::vector<long int>\u2019\n   28 |         res.push_back(by_length(temp));\n\
    \      |                                 ^~~~\n      |                       \
    \          |\n      |                                 long long int\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    std::vector<std::string>\
    \ result;\n    long max = 0;\n    for (long i : arr) {\n        max = std::max(max,\
    \ i);\n    }\n    long size = arr.size();\n    long mod = size % 10;\n    long\
    \ remain = size / 10;\n    long i = 0;\n    for (long j = 1; j <= max; j++) {\n\
    \        while (i < size && arr[i] < j) {\n            i++;\n        }\n     \
    \   if (i == size) {\n            result.emplace_back(to_string(j));\n       \
    \     break;\n        }\n        result.emplace_back(to_string(j));\n        while\
    \ (i < size && arr[i] == j) {\n            i++;\n        }\n    }\n    if (mod\
    \ == 0) {\n        for (long j = 1; j <= max; j++) {\n            result.emplace_back(to_string(j));\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({2, 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({1, -1, 55}))) == (std::vector<std::string>({\"\
    One\"})));\n    assert(candidate((std::vector<long>({1, -1, 3, 2}))) == (std::vector<std::string>({\"\
    Three\", \"Two\", \"One\"})));\n    assert(candidate((std::vector<long>({9, 4,\
    \ 8}))) == (std::vector<std::string>({\"Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzkky4mwe.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpzkky4mwe.cpp:34:33: error:\
    \ \u2018to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   34 |             result.emplace_back(to_string(j));\n      |           \
    \                      ^~~~~~~~~\n      |                                 std::__cxx11::to_string\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpzkky4mwe.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:6598:3:\
    \ note: \u2018std::__cxx11::to_string\u2019 declared here\n 6598 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n/tmp/tmpzkky4mwe.cpp:37:29: error: \u2018\
    to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   37 |         result.emplace_back(to_string(j));\n      |               \
    \              ^~~~~~~~~\n      |                             std::__cxx11::to_string\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/g"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    // Write your\
    \ code here\n    long long int sum = 0;\n    long long int max = 0;\n    long\
    \ long int min = 0;\n    long long int sum2 = 0;\n    long long int max2 = 0;\n\
    \    long long int min2 = 0;\n    long long int sum3 = 0;\n    long long int max3\
    \ = 0;\n    long long int min3 = 0;\n    long long int sum4 = 0;\n    long long\
    \ int max4 = 0;\n    long long int min4 = 0;\n    long long int sum5 = 0;\n  \
    \  long long int max5 = 0;\n    long long int min5 = 0;\n    long long int sum6\
    \ = 0;\n    long long int max6 = 0;\n    long long int min6 = 0;\n    long long\
    \ int sum7 = 0;\n    long long int max7 = 0;\n    long long int min7 = 0;\n  \
    \  long long int sum8 = 0;\n    long long int max8 = 0;\n    long long int min8\
    \ = 0;\n    long long int sum9 = 0;\n    long long int max9 = 0;\n    long long\
    \ int min9 = 0;\n    long long int sum10 = 0;\n    long long int max10 = 0;\n\
    \    long long int min10 = 0;\n    long long int sum11 = 0;\n    long long int\
    \ max11 = 0;\n    long long int min11 = 0;\n    long long int sum12 = 0;\n   \
    \ long long int max12 = 0;\n    long long int min12 = 0;\n    long long int sum13\
    \ = 0;\n    long long int max13 = 0;\n    long long int min13 = 0;\n    long long\
    \ int sum14 = 0;\n    long long int max14 = 0;\n    long long int min14 = 0;\n\
    \    long long int sum15 = 0;\n    long long int max15 = 0;\n    long long int\
    \ min15 = 0;\n    long long int sum16 = 0;\n    long long int max16 = 0;\n   \
    \ long long int min16 = 0;\n    long long int sum17 = 0;\n    long long int max17\
    \ = 0;\n    long long int min17 = 0;\n    long long int sum18 = 0;\n    long long\
    \ int max18 = 0;\n    long long int min18 = 0;\n    long long int sum19 = 0;\n\
    \    long long int max19 = 0;\n    long long int min19 = 0;\n    long long int\
    \ sum20 = 0;\n    long long int max20 = 0;\n    long long int min20 = 0;\n   \
    \ long long int sum21 = 0;\n    long long int max21 = 0;\n    long long int min21\
    \ = 0;\n    long long int sum22 = 0;\n    long long int max22 = 0;\n    long \n\
    }\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({2,\
    \ 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 55}))) == (std::vector<std::string>({\"One\"})));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 3, 2}))) == (std::vector<std::string>({\"Three\", \"Two\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>({9, 4, 8}))) == (std::vector<std::string>({\"\
    Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5h38jidj.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmp5h38jidj.cpp:87:1: error:\
    \ expected unqualified-id before \u2018}\u2019 token\n   87 | }\n      | ^\n/tmp/tmp5h38jidj.cpp:87:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    std::vector<std::string>\
    \ res;\n    long temp;\n    for (long i : arr) {\n        if (i >= 1 && i <= 9)\
    \ {\n            temp = i;\n            while (temp > 0) {\n                res.push_back(\"\
    One\");\n                temp--;\n            }\n            while (temp > 9)\
    \ {\n                res.push_back(\"Nine\");\n                temp -= 10;\n \
    \           }\n            while (temp > 0) {\n                res.push_back(\"\
    Two\");\n                temp--;\n            }\n            while (temp > 9)\
    \ {\n                res.push_back(\"Three\");\n                temp -= 10;\n\
    \            }\n            while (temp > 0) {\n                res.push_back(\"\
    Four\");\n                temp--;\n            }\n            while (temp > 9)\
    \ {\n                res.push_back(\"Five\");\n                temp -= 10;\n \
    \           }\n            while (temp > 0) {\n                res.push_back(\"\
    Six\");\n                temp--;\n            }\n            while (temp > 9)\
    \ {\n                res.push_back(\"Seven\");\n                temp -= 10;\n\
    \            }\n            while (temp > 0) {\n                res.push_back(\"\
    Eight\");\n                temp--;\n            }\n            while (temp > 9)\
    \ {\n                res.push_back(\"Nine\");\n                temp -= 10;\n \
    \           }\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = by_length;\n    assert(candidate((std::vector<long>({2, 1, 1, 4, 5, 8, 2,\
    \ 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"Four\", \"Three\"\
    , \"Two\", \"Two\", \"One\", \"One\"})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 55}))) == (std::vector<std::string>({\"One\"})));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 3, 2}))) == (std::vector<std::string>({\"Three\", \"Two\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>({9, 4, 8}))) == (std::vector<std::string>({\"\
    Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "tmpe5r_kydl: /tmp/tmpe5r_kydl.cpp:71: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    std::vector<std::string>\
    \ res;\n    long n = arr.size();\n    long m = 1;\n    long k = 0;\n    long temp;\n\
    \    long i;\n    long j;\n    long sum = 0;\n    long sum2 = 0;\n    long sum3\
    \ = 0;\n    long sum4 = 0;\n    long sum5 = 0;\n    long sum6 = 0;\n    long sum7\
    \ = 0;\n    long sum8 = 0;\n    long sum9 = 0;\n    long sum10 = 0;\n    long\
    \ sum11 = 0;\n    long sum12 = 0;\n    long sum13 = 0;\n    long sum14 = 0;\n\
    \    long sum15 = 0;\n    long sum16 = 0;\n    long sum17 = 0;\n    long sum18\
    \ = 0;\n    long sum19 = 0;\n    long sum20 = 0;\n    long sum21 = 0;\n    long\
    \ sum22 = 0;\n    long sum23 = 0;\n    long sum24 = 0;\n    long sum25 = 0;\n\
    \    long sum26 = 0;\n    long sum27 = 0;\n    long sum28 = 0;\n    long sum29\
    \ = 0;\n    long sum30 = 0;\n    long sum31 = 0;\n    long sum32 = 0;\n    long\
    \ sum33 = 0;\n    long sum34 = 0;\n    long sum35 = 0;\n    long sum36 = 0;\n\
    \    long sum37 = 0;\n    long sum38 = 0;\n    long sum39 = 0;\n    long sum40\
    \ = 0;\n    long sum41 = 0;\n    long sum42 = 0;\n    long sum43 = 0;\n    long\
    \ sum44 = 0;\n    long sum45 = 0;\n    long sum46 = 0;\n    long sum47 = 0;\n\
    \    long sum48 = 0;\n    long sum49 = 0;\n    long sum50 = 0;\n    long sum51\
    \ = 0;\n    long sum52 = 0;\n    long sum53 = 0;\n    long sum54 = 0;\n    long\
    \ sum55 = 0;\n    long sum56 = 0;\n    long sum57 = 0;\n    long sum58 = 0;\n\
    \    long sum59 = 0;\n    long sum60 = 0;\n    long sum61 = 0;\n    long sum62\
    \ = 0;\n    long sum63 = 0;\n    long sum64 = 0;\n    long sum65 = 0;\n    long\
    \ sum66 = 0;\n    long sum67 = 0;\n    long sum68 = 0;\n    long sum69 = 0;\n\
    \    long sum70 = 0;\n    long sum71 = 0;\n    long sum72 = 0;\n    long sum73\
    \ = 0;\n    long sum74 = 0;\n    long sum75 = 0;\n    long sum76 = 0;\n    long\
    \ sum77 = 0;\n    long sum78 = 0;\n    long sum79 = 0;\n    long sum80 = 0;\n\
    \    \n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({2,\
    \ 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 55}))) == (std::vector<std::string>({\"One\"})));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 3, 2}))) == (std::vector<std::string>({\"Three\", \"Two\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>({9, 4, 8}))) == (std::vector<std::string>({\"\
    Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "tmpmk224wbx: /tmp/tmpmk224wbx.cpp:111: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    std::vector<std::string>\
    \ res;\n    long long max = 0;\n    for (auto i : arr) {\n        if (i > max)\
    \ {\n            max = i;\n        }\n    }\n    for (auto i : arr) {\n      \
    \  if (i <= max) {\n            res.push_back(i == max ? \"One\" : std::to_string(i));\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({2, 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({1, -1, 55}))) == (std::vector<std::string>({\"\
    One\"})));\n    assert(candidate((std::vector<long>({1, -1, 3, 2}))) == (std::vector<std::string>({\"\
    Three\", \"Two\", \"One\"})));\n    assert(candidate((std::vector<long>({9, 4,\
    \ 8}))) == (std::vector<std::string>({\"Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "tmpj9rva2kp: /tmp/tmpj9rva2kp.cpp:36: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    std::vector<std::string>\
    \ res;\n    if (arr.size() == 0) {\n        return res;\n    }\n    long max =\
    \ *std::max_element(arr.begin(), arr.end());\n    long min = *std::min_element(arr.begin(),\
    \ arr.end());\n    long mid = (max + min) / 2;\n    long mid2 = mid / 10;\n  \
    \  long mid3 = mid % 10;\n    long mid4 = mid2 / 10;\n    long mid5 = mid2 % 10;\n\
    \    long mid6 = mid3 / 10;\n    long mid7 = mid3 % 10;\n    long mid8 = mid4\
    \ / 10;\n    long mid9 = mid4 % 10;\n    long mid10 = mid5 / 10;\n    long mid11\
    \ = mid5 % 10;\n    long mid12 = mid6 / 10;\n    long mid13 = mid6 % 10;\n   \
    \ long mid14 = mid7 / 10;\n    long mid15 = mid7 % 10;\n    long mid16 = mid8\
    \ / 10;\n    long mid17 = mid8 % 10;\n    long mid18 = mid9 / 10;\n    long mid19\
    \ = mid9 % 10;\n    long mid20 = mid10 / 10;\n    long mid21 = mid10 % 10;\n \
    \   long mid22 = mid11 / 10;\n    long mid23 = mid11 % 10;\n    long mid24 = mid12\
    \ / 10;\n    long mid25 = mid12 % 10;\n    long mid26 = mid13 / 10;\n    long\
    \ mid27 = mid13 % 10;\n    long mid28 = mid14 / 10;\n    long mid29 = mid14 %\
    \ 10;\n    long mid30 = mid15 / 10;\n    long mid31 = mid15 % 10;\n    long mid32\
    \ = mid16 / 10;\n    long mid33 = mid16 % 10;\n    long mid34 = mid17 / 10;\n\
    \    long mid35 = mid17 % 10;\n    long mid36 = mid18 / 10;\n    long mid37 =\
    \ mid18 % 10;\n    long mid38 = mid19 / 10;\n    long mid39 = mid19 % 10;\n  \
    \  long mid40 = mid20 / 10;\n    long mid41 = mid20 % 10;\n    long mid42 = mid21\
    \ / 10;\n    long mid43 = mid21 % 10;\n    long mid44 = mid22 / 10;\n    long\
    \ mid45 = mid22 % 10;\n    long mid46 = mid23 / 10;\n    long mid47 = mid23 %\
    \ 10;\n    long mid48 = mid24 / 10;\n\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({2, 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({1, -1, 55}))) == (std::vector<std::string>({\"\
    One\"})));\n    assert(candidate((std::vector<long>({1, -1, 3, 2}))) == (std::vector<std::string>({\"\
    Three\", \"Two\", \"One\"})));\n    assert(candidate((std::vector<long>({9, 4,\
    \ 8}))) == (std::vector<std::string>({\"Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "tmppnur0jaz: /tmp/tmppnur0jaz.cpp:78: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    std::vector<std::string>\
    \ res;\n    if (arr.size() == 0) {\n        return res;\n    }\n    long min_val\
    \ = arr[0];\n    long max_val = arr[0];\n    for (long i : arr) {\n        if\
    \ (i < min_val) {\n            min_val = i;\n        }\n        if (i > max_val)\
    \ {\n            max_val = i;\n        }\n    }\n    long mid = (min_val + max_val)\
    \ / 2;\n    long left_len = max_val - min_val;\n    long right_len = mid - min_val;\n\
    \    std::vector<std::string> left_res = by_length(arr - left_len);\n    std::vector<std::string>\
    \ right_res = by_length(arr - right_len);\n    res.insert(res.end(), left_res.begin(),\
    \ left_res.end());\n    res.insert(res.end(), right_res.begin(), right_res.end());\n\
    \    res.push_back(by_length(arr - left_len + right_len));\n    return res;\n\
    }\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({2,\
    \ 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 55}))) == (std::vector<std::string>({\"One\"})));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 3, 2}))) == (std::vector<std::string>({\"Three\", \"Two\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>({9, 4, 8}))) == (std::vector<std::string>({\"\
    Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpi30y61ix.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpi30y61ix.cpp:37:55: error:\
    \ no match for \u2018operator-\u2019 (operand types are \u2018std::vector<long\
    \ int>\u2019 and \u2018long int\u2019)\n   37 |     std::vector<std::string> left_res\
    \ = by_length(arr - left_len);\n      |                                      \
    \             ~~~ ^ ~~~~~~~~\n      |                                        \
    \           |     |\n      |                                                 \
    \  |     long int\n      |                                                   std::vector<long\
    \ int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpi30y61ix.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:415:5:\
    \ note: candidate: \u2018template<class _IteratorL, class _IteratorR> decltype\
    \ ((__y.base() - __x.base())) std::operator-(const std::reverse_iterator<_Iterator>&,\
    \ const std::reverse_iterator<_IteratorR>&)\u2019\n  415 |     operator-(const\
    \ reverse_iterator<_IteratorL>& __x,\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:415:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpi30y61ix.cpp:37:57:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   37 |     std::vector<std::string> left_res "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    std::vector<std::string>\
    \ res;\n    if (arr.size() == 0) {\n        return res;\n    }\n    long min =\
    \ arr[0];\n    long max = arr[0];\n    for (auto i : arr) {\n        if (i < min)\
    \ {\n            min = i;\n        }\n        if (i > max) {\n            max\
    \ = i;\n        }\n    }\n    long mid = min + (max - min) / 2;\n    long left\
    \ = mid;\n    long right = mid;\n    while (left < max) {\n        long mid =\
    \ left + (right - left) / 2;\n        long left = mid;\n        long right = mid;\n\
    \        while (left < max) {\n            long mid = left + (right - left) /\
    \ 2;\n            long left = mid;\n            long right = mid;\n          \
    \  while (left < max) {\n                long mid = left + (right - left) / 2;\n\
    \                long left = mid;\n                long right = mid;\n       \
    \         while (left < max) {\n                    long mid = left + (right -\
    \ left) / 2;\n                    long left = mid;\n                    long right\
    \ = mid;\n                    while (left < max) {\n                        long\
    \ mid = left + (right - left) / 2;\n                        long left = mid;\n\
    \                        long right = mid;\n                        while (left\
    \ < max) {\n                            long mid = left + (right - left) / 2;\n\
    \                            long left = mid;\n                            long\
    \ right = mid;\n                            while (left < max) {\n           \
    \                     long mid = left + (right - left) / 2;\n                \
    \                long left = mid;\n                                long right\
    \ = mid;\n                                while (left < max) {\n             \
    \                       long mid = left + (right - left) / 2;\n              \
    \                      long left = mid;\n                                    long\
    \ right = mid;\n                                    while (left < max) {\n   \
    \                                     long mid = left + (right - left) / 2;\n\
    \                                        long left = mid;\n                  \
    \                      long right = mid;\n                                   \
    \     while (left < max) {\n                                            long mid\
    \ = left + (right - left) / 2;\n                                            long\
    \ left = mid;\n                                            long right = mid;\n\
    \                                            while (left < max) {\n          \
    \                                      long mid = left + (right - left) / 2;\n\
    \                                                long left = mid;\n          \
    \                                      long right = mid;\n                   \
    \                         }\n                                        }\n     \
    \                               }\n                                }\n       \
    \                     }\n                        }\n                    }\n  \
    \              }\n            }\n        }\n    }\n    long mid = min + (max -\
    \ min) / 2;\n    long left = mid;\n    long right = mid;\n    while (left < max)\
    \ {\n        long mid = left + (right - left) / 2;\n        long left = mid;\n\
    \        long right = mid;\n        while (left < max) {\n            long mid\
    \ = left + (\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({2,\
    \ 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 55}))) == (std::vector<std::string>({\"One\"})));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 3, 2}))) == (std::vector<std::string>({\"Three\", \"Two\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>({9, 4, 8}))) == (std::vector<std::string>({\"\
    Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpv93hqrt3.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpv93hqrt3.cpp:92:10: error:\
    \ redeclaration of \u2018long int mid\u2019\n   92 |     long mid = min + (max\
    \ - min) / 2;\n      |          ^~~\n/tmp/tmpv93hqrt3.cpp:34:10: note: \u2018\
    long int mid\u2019 previously declared here\n   34 |     long mid = min + (max\
    \ - min) / 2;\n      |          ^~~\n/tmp/tmpv93hqrt3.cpp:93:10: error: redeclaration\
    \ of \u2018long int left\u2019\n   93 |     long left = mid;\n      |        \
    \  ^~~~\n/tmp/tmpv93hqrt3.cpp:35:10: note: \u2018long int left\u2019 previously\
    \ declared here\n   35 |     long left = mid;\n      |          ^~~~\n/tmp/tmpv93hqrt3.cpp:94:10:\
    \ error: redeclaration of \u2018long int right\u2019\n   94 |     long right =\
    \ mid;\n      |          ^~~~~\n/tmp/tmpv93hqrt3.cpp:36:10: note: \u2018long int\
    \ right\u2019 previously declared here\n   36 |     long right = mid;\n      |\
    \          ^~~~~\n/tmp/tmpv93hqrt3.cpp:101:1: error: expected primary-expression\
    \ before \u2018}\u2019 token\n  101 | }\n      | ^\n/tmp/tmpv93hqrt3.cpp:100:32:\
    \ error: expected \u2018)\u2019 before \u2018}\u2019 token\n  100 |          \
    \   long mid = left + (\n      |                               ~^\n      |   \
    \                             )\n  101 | }\n      | ~                        \
    \       \n/tmp/tmpv93hqrt3.cpp:102:12: error: a function-definition is not allowed\
    \ here before \u2018{\u2019 token\n  102 | int main() {\n      |            ^\n\
    /tmp/tmpv93hqrt3.cpp:109:1: error: expected \u2018}\u2019 at end of input\n  109\
    \ | }\n      | ^\n/tmp/tmpv93hqrt3.cpp:95:24: note: to match this \u2018{\u2019\
    \n   95 |     while (left < max) {\n      |                        ^\n/tmp/tmpv93hqrt3.cpp:109:1:\
    \ error: expected \u2018}\u2019 at end of input\n  109 | }\n      | ^\n/tmp/tmpv93hqrt3.cpp:19:59:\
    \ note: to match this \u2018{\u2019\n   19 | std::vector<std::string> by_length(std::vector<long>\
    \ arr) {\n      |                                                           ^\n\
    /tmp/tmpv93hqrt3.cpp:109:1: warning: control reaches end of non-void function\
    \ [-Wreturn-type]\n  109 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    std::vector<std::string>\
    \ res;\n    long long n = arr.size();\n    long long m = 1;\n    long long i =\
    \ 0;\n    long long j = 0;\n    while (i < n) {\n        while (j < n && arr[j]\
    \ < m) {\n            j++;\n        }\n        res.push_back(arr[j]);\n      \
    \  m += 1;\n        i += 1;\n        j = 0;\n    }\n    return res;\n}\nint main()\
    \ {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({2,\
    \ 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 55}))) == (std::vector<std::string>({\"One\"})));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 3, 2}))) == (std::vector<std::string>({\"Three\", \"Two\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>({9, 4, 8}))) == (std::vector<std::string>({\"\
    Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpg1m9moqd.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpg1m9moqd.cpp:29:29: error:\
    \ no matching function for call to \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >::push_back(__gnu_cxx::__alloc_traits<std::allocator<long int>, long int>::value_type&)\u2019\
    \n   29 |         res.push_back(arr[j]);\n      |                            \
    \ ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmpg1m9moqd.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<long\
    \ int>, long int>::value_type\u2019 {aka \u2018long int\u2019} to \u2018const\
    \ value_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n\
    \ 1184 |       push_back(const value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>; _Alloc\
    \ = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::value_type\
    \ = std::__cxx11::basic_string<char>]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion fo"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    std::vector<std::string>\
    \ res;\n    long temp;\n    for (auto i : arr) {\n        if (i >= 1 && i <= 9)\
    \ {\n            temp = i;\n            while (temp > 0) {\n                res.push_back(\"\
    One\");\n                temp /= 10;\n            }\n            while (temp >\
    \ 0) {\n                res.push_back(\"Two\");\n                temp /= 10;\n\
    \            }\n            while (temp > 0) {\n                res.push_back(\"\
    Three\");\n                temp /= 10;\n            }\n            while (temp\
    \ > 0) {\n                res.push_back(\"Four\");\n                temp /= 10;\n\
    \            }\n            while (temp > 0) {\n                res.push_back(\"\
    Five\");\n                temp /= 10;\n            }\n            while (temp\
    \ > 0) {\n                res.push_back(\"Six\");\n                temp /= 10;\n\
    \            }\n            while (temp > 0) {\n                res.push_back(\"\
    Seven\");\n                temp /= 10;\n            }\n            while (temp\
    \ > 0) {\n                res.push_back(\"Eight\");\n                temp /= 10;\n\
    \            }\n            while (temp > 0) {\n                res.push_back(\"\
    Nine\");\n                temp /= 10;\n            }\n            while (temp\
    \ > 0) {\n                res.push_back(\"Ten\");\n                temp /= 10;\n\
    \            }\n            while (temp > 0) {\n                res.push_back(\"\
    Eleven\");\n                temp /= 10;\n            }\n            while (temp\
    \ > 0) {\n                res.push_back(\"Twelve\");\n                temp /=\
    \ 10;\n            }\n            while (temp > 0) {\n                res.push_back(\"\
    Thirteen\");\n                temp /= 10;\n            }\n            while (temp\
    \ > 0) {\n                res.push_back(\"Fourteen\");\n                temp /=\
    \ 10;\n            }\n            while (temp > 0) {\n                res.push_back(\"\
    Fifteen\");\n                temp /= 10;\n            }\n            while (temp\
    \ > 0) {\n                res.push_back(\"Sixteen\");\n                temp /=\
    \ 10;\n            }\n            while (temp > 0) {\n                res.push_back(\"\
    Seventeen\");\n                temp /= 10;\n            }\n            while (temp\
    \ > 0) {\n                res.push_back(\"Eighteen\");\n                temp /=\
    \ 10;\n            }\n            while (temp > 0) {\n                res.push_back(\"\
    Nineteen\");\n                temp /= 10;\n            }\n            while (temp\
    \ > 0) {\n                res.push_back(\"Twenty\");\n                temp /=\
    \ 10;\n            }\n            while (temp > 0) {\n                res.push_back(\"\
    Twentyone\");\n                temp /= 10;\n            }\n            while (temp\
    \ > 0) {\n                res.push_back(\"Twentytwo\");\n                temp\
    \ /= 10;\n            }\n            while (temp > 0) {\n                res.push_back(\"\
    Twentythree\");\n\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({2,\
    \ 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 55}))) == (std::vector<std::string>({\"One\"})));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 3, 2}))) == (std::vector<std::string>({\"Three\", \"Two\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>({9, 4, 8}))) == (std::vector<std::string>({\"\
    Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2rwsldq4.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmp2rwsldq4.cpp:117:12: error:\
    \ a function-definition is not allowed here before \u2018{\u2019 token\n  117\
    \ | int main() {\n      |            ^\n/tmp/tmp2rwsldq4.cpp:124:1: error: expected\
    \ \u2018}\u2019 at end of input\n  124 | }\n      | ^\n/tmp/tmp2rwsldq4.cpp:23:31:\
    \ note: to match this \u2018{\u2019\n   23 |         if (i >= 1 && i <= 9) {\n\
    \      |                               ^\n/tmp/tmp2rwsldq4.cpp:124:1: error: expected\
    \ \u2018}\u2019 at end of input\n  124 | }\n      | ^\n/tmp/tmp2rwsldq4.cpp:22:24:\
    \ note: to match this \u2018{\u2019\n   22 |     for (auto i : arr) {\n      |\
    \                        ^\n/tmp/tmp2rwsldq4.cpp:124:1: error: expected \u2018\
    }\u2019 at end of input\n  124 | }\n      | ^\n/tmp/tmp2rwsldq4.cpp:19:59: note:\
    \ to match this \u2018{\u2019\n   19 | std::vector<std::string> by_length(std::vector<long>\
    \ arr) {\n      |                                                           ^\n\
    /tmp/tmp2rwsldq4.cpp:124:1: warning: no return statement in function returning\
    \ non-void [-Wreturn-type]\n  124 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    std::vector<std::string>\
    \ res;\n    long temp;\n    for (auto i : arr) {\n        if (i >= 1 && i <= 9)\
    \ {\n            temp = i;\n        } else {\n            temp = -1;\n       \
    \ }\n        res.push_back(by_length(temp));\n    }\n    return res;\n}\nint main()\
    \ {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({2,\
    \ 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 55}))) == (std::vector<std::string>({\"One\"})));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 3, 2}))) == (std::vector<std::string>({\"Three\", \"Two\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>({9, 4, 8}))) == (std::vector<std::string>({\"\
    Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6bf72xly.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmp6bf72xly.cpp:28:33: error:\
    \ could not convert \u2018temp\u2019 from \u2018long int\u2019 to \u2018std::vector<long\
    \ int>\u2019\n   28 |         res.push_back(by_length(temp));\n      |       \
    \                          ^~~~\n      |                                 |\n \
    \     |                                 long int\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    std::vector<std::string>\
    \ res;\n    long long sum = 0;\n    for (auto i : arr) {\n        sum += i;\n\
    \    }\n    long long mod = sum % 10;\n    long long div = sum / 10;\n    long\
    \ long start = div * 10;\n    long long end = start + 9;\n    while (start <=\
    \ end) {\n        long long mid = start + (end - start) / 2;\n        if (arr[mid]\
    \ >= 1 && arr[mid] <= 9) {\n            std::string name = to_string(arr[mid]);\n\
    \            res.push_back(name);\n            start = mid + 1;\n        } else\
    \ {\n            end = mid - 1;\n        }\n    }\n    if (mod != 0) {\n     \
    \   res.push_back(to_string(mod));\n    }\n    return res;\n}\nint main() {\n\
    \    auto candidate = by_length;\n    assert(candidate((std::vector<long>({2,\
    \ 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 55}))) == (std::vector<std::string>({\"One\"})));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 3, 2}))) == (std::vector<std::string>({\"Three\", \"Two\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>({9, 4, 8}))) == (std::vector<std::string>({\"\
    Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpae6lszn8.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpae6lszn8.cpp:32:32: error:\
    \ \u2018to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   32 |             std::string name = to_string(arr[mid]);\n      |      \
    \                          ^~~~~~~~~\n      |                                std::__cxx11::to_string\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpae6lszn8.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:6598:3:\
    \ note: \u2018std::__cxx11::to_string\u2019 declared here\n 6598 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n/tmp/tmpae6lszn8.cpp:40:23: error: \u2018\
    to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   40 |         res.push_back(to_string(mod));\n      |                   \
    \    ^~~~~~~~~\n      |                       std::__cxx11::to_string\nIn file\
    \ included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skyl"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    std::vector<std::string>\
    \ res;\n    if (arr.size() == 0) {\n        return res;\n    }\n    long min =\
    \ arr[0];\n    long max = arr[0];\n    for (auto i : arr) {\n        if (i < min)\
    \ {\n            min = i;\n        }\n        if (i > max) {\n            max\
    \ = i;\n        }\n    }\n    long mid = (min + max) / 2;\n    long mid2 = mid\
    \ / 10;\n    long mid3 = mid % 10;\n    long mid4 = mid2 / 10;\n    long mid5\
    \ = mid2 % 10;\n    long mid6 = mid3 / 10;\n    long mid7 = mid3 % 10;\n    long\
    \ mid8 = mid4 / 10;\n    long mid9 = mid4 % 10;\n    long mid10 = mid5 / 10;\n\
    \    long mid11 = mid5 % 10;\n    long mid12 = mid6 / 10;\n    long mid13 = mid6\
    \ % 10;\n    long mid14 = mid7 / 10;\n    long mid15 = mid7 % 10;\n    long mid16\
    \ = mid8 / 10;\n    long mid17 = mid8 % 10;\n    long mid18 = mid9 / 10;\n   \
    \ long mid19 = mid9 % 10;\n    long mid20 = mid10 / 10;\n    long mid21 = mid10\
    \ % 10;\n    long mid22 = mid11 / 10;\n    long mid23 = mid11 % 10;\n    long\
    \ mid24 = mid12 / 10;\n    long mid25 = mid12 % 10;\n    long mid26 = mid13 /\
    \ 10;\n    long mid27 = mid13 % 10;\n    long mid28 = mid14 / 10;\n    long mid29\
    \ = mid14 % 10;\n    long mid30 = mid15 / 10;\n    long mid31 = mid15 % 10;\n\
    \    long mid32 = mid16 / 10;\n    long mid33 = mid16 % 10;\n    long mid34 =\
    \ mid17 / 10;\n    long mid35 = mid17 % 10;\n    long mid36 = mid18 / 10;\n  \
    \  long mid37 = mid18 % 10;\n    long mid38 = mid19 / 10;\n    long mid39 = mid19\
    \ % 10;\n    long mid40 = mid20 / 10;\n    long mid41 = mid20 % 10;\n    long\
    \ mid42 = mid21 / 10;\n    long mid43 = mid21 % 10;\n    long mid44 = mid22 /\
    \ 10;\n    long mid45 = mid22 % 10;\n    long mid46 = mid23 / 10;\n    long mid47\
    \ = \n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({2,\
    \ 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 55}))) == (std::vector<std::string>({\"One\"})));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 3, 2}))) == (std::vector<std::string>({\"Three\", \"Two\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>({9, 4, 8}))) == (std::vector<std::string>({\"\
    Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpyb5ski7m.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpyb5ski7m.cpp:81:1: error:\
    \ expected primary-expression before \u2018}\u2019 token\n   81 | }\n      | ^\n\
    /tmp/tmpyb5ski7m.cpp:81:1: warning: control reaches end of non-void function [-Wreturn-type]\n\
    \   81 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    if (arr.empty())\
    \ {\n        return {};\n    }\n    std::vector<long> sorted_arr(arr.begin(),\
    \ arr.end());\n    std::sort(sorted_arr.begin(), sorted_arr.end());\n    std::vector<long>\
    \ reverse_arr(sorted_arr.rbegin(), sorted_arr.rend());\n    std::reverse(reverse_arr.begin(),\
    \ reverse_arr.end());\n    std::vector<std::string> ret;\n    for (long i : reverse_arr)\
    \ {\n        std::string name = \"\";\n        switch (i) {\n            case\
    \ 1:\n                name = \"One\";\n                break;\n            case\
    \ 2:\n                name = \"Two\";\n                break;\n            case\
    \ 3:\n                name = \"Three\";\n                break;\n            case\
    \ 4:\n                name = \"Four\";\n                break;\n            case\
    \ 5:\n                name = \"Five\";\n                break;\n            case\
    \ 6:\n                name = \"Six\";\n                break;\n            case\
    \ 7:\n                name = \"Seven\";\n                break;\n            case\
    \ 8:\n                name = \"Eight\";\n                break;\n            case\
    \ 9:\n                name = \"Nine\";\n                break;\n            default:\n\
    \                break;\n        }\n        ret.push_back(name);\n    }\n    return\
    \ ret;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({2,\
    \ 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 55}))) == (std::vector<std::string>({\"One\"})));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 3, 2}))) == (std::vector<std::string>({\"Three\", \"Two\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>({9, 4, 8}))) == (std::vector<std::string>({\"\
    Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "tmpk3tzemrx: /tmp/tmpk3tzemrx.cpp:67: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    std::vector<std::string>\
    \ res;\n    long n = arr.size();\n    if (n > 0) {\n        long mid = n / 2;\n\
    \        long left = arr[mid];\n        long right = arr[n - 1];\n        long\
    \ mid1 = mid - 1;\n        long mid2 = mid + 1;\n        long mid3 = mid2 + 1;\n\
    \        long mid4 = mid3 - 1;\n        long mid5 = mid4 + 1;\n        long mid6\
    \ = mid5 - 1;\n        long mid7 = mid6 + 1;\n        long mid8 = mid7 - 1;\n\
    \        long mid9 = mid8 + 1;\n        long mid10 = mid9 - 1;\n        long mid11\
    \ = mid10 + 1;\n        long mid12 = mid11 - 1;\n        long mid13 = mid12 +\
    \ 1;\n        long mid14 = mid13 - 1;\n        long mid15 = mid14 + 1;\n     \
    \   long mid16 = mid15 - 1;\n        long mid17 = mid16 + 1;\n        long mid18\
    \ = mid17 - 1;\n        long mid19 = mid18 + 1;\n        long mid20 = mid19 -\
    \ 1;\n        long mid21 = mid20 + 1;\n        long mid22 = mid21 - 1;\n     \
    \   long mid23 = mid22 + 1;\n        long mid24 = mid23 - 1;\n        long mid25\
    \ = mid24 + 1;\n        long mid26 = mid25 - 1;\n        long mid27 = mid26 +\
    \ 1;\n        long mid28 = mid27 - 1;\n        long mid29 = mid28 + 1;\n     \
    \   long mid30 = mid29 - 1;\n        long mid31 = mid30 + 1;\n        long mid32\
    \ = mid31 - 1;\n        long mid33 = mid32 + 1;\n        long mid34 = mid33 -\
    \ 1;\n        long mid35 = mid34 + 1;\n        long mid36 = mid35 - 1;\n     \
    \   long mid37 = mid36 + 1;\n        long mid38 = mid37 - 1;\n        long mid39\
    \ = mid38 + 1;\n        long mid40 = mid39 - 1;\n        long mid41 = mid40 +\
    \ 1;\n        long mid42 = mid41 - 1;\n        long mid43 = mid42 + 1;\n     \
    \   long mid44 = mid43 - 1;\n        long mid45 = mid44 + 1;\n        long mid46\
    \ = mid45 - 1;\n        long mid47 = mid46 + 1;\n        long mid48 = mid47 -\
    \ 1;\n        long mid49 = mid48 + 1;\n        long mid50 = mid49 - 1;\n     \
    \   long mid51 = mid50 + 1;\n        long mid\n}\nint main() {\n    auto candidate\
    \ = by_length;\n    assert(candidate((std::vector<long>({2, 1, 1, 4, 5, 8, 2,\
    \ 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"Four\", \"Three\"\
    , \"Two\", \"Two\", \"One\", \"One\"})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 55}))) == (std::vector<std::string>({\"One\"})));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 3, 2}))) == (std::vector<std::string>({\"Three\", \"Two\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>({9, 4, 8}))) == (std::vector<std::string>({\"\
    Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpt1mgidt_.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpt1mgidt_.cpp:78:1: error:\
    \ expected initializer before \u2018}\u2019 token\n   78 | }\n      | ^\n/tmp/tmpt1mgidt_.cpp:79:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   79 | int main() {\n      |            ^\n/tmp/tmpt1mgidt_.cpp:86:1: error:\
    \ expected \u2018}\u2019 at end of input\n   86 | }\n      | ^\n/tmp/tmpt1mgidt_.cpp:19:59:\
    \ note: to match this \u2018{\u2019\n   19 | std::vector<std::string> by_length(std::vector<long>\
    \ arr) {\n      |                                                           ^\n\
    /tmp/tmpt1mgidt_.cpp:86:1: warning: no return statement in function returning\
    \ non-void [-Wreturn-type]\n   86 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    // Write your\
    \ code here\n    std::vector<std::string> v;\n    long sum = 0;\n    for (long\
    \ i : arr) {\n        sum += i;\n    }\n    long half = sum / 2;\n    long start\
    \ = 0, end = half;\n    while (start < half) {\n        v.push_back(\"One\");\n\
    \        start += 1;\n    }\n    while (end > half) {\n        v.push_back(\"\
    Two\");\n        end -= 1;\n    }\n    while (start < end) {\n        v.push_back(\"\
    Three\");\n        start += 1;\n        end -= 1;\n    }\n    while (start < end)\
    \ {\n        v.push_back(\"Four\");\n        start += 1;\n        end -= 1;\n\
    \    }\n    while (start < end) {\n        v.push_back(\"Five\");\n        start\
    \ += 1;\n        end -= 1;\n    }\n    while (start < end) {\n        v.push_back(\"\
    Six\");\n        start += 1;\n        end -= 1;\n    }\n    while (start < end)\
    \ {\n        v.push_back(\"Seven\");\n        start += 1;\n        end -= 1;\n\
    \    }\n    while (start < end) {\n        v.push_back(\"Eight\");\n        start\
    \ += 1;\n        end -= 1;\n    }\n    while (start < end) {\n        v.push_back(\"\
    Nine\");\n        start += 1;\n        end -= 1;\n    }\n    return v;\n}\nint\
    \ main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({2,\
    \ 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 55}))) == (std::vector<std::string>({\"One\"})));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 3, 2}))) == (std::vector<std::string>({\"Three\", \"Two\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>({9, 4, 8}))) == (std::vector<std::string>({\"\
    Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "tmp73arqust: /tmp/tmp73arqust.cpp:75: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    std::vector<std::string>\
    \ res;\n    long n = arr.size();\n    if (n == 0)\n        return res;\n    long\
    \ m = std::min(9L, n);\n    long r = std::max(1L, std::min(9L, n));\n    long\
    \ s = std::min(9L, n);\n    long t = std::max(1L, std::min(9L, n));\n    long\
    \ u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n\
    \    long z = 0;\n    long A = 0;\n    long B = 0;\n    long C = 0;\n    long\
    \ D = 0;\n    long E = 0;\n    long F = 0;\n    long G = 0;\n    long H = 0;\n\
    \    long I = 0;\n    long J = 0;\n    long K = 0;\n    long L = 0;\n    long\
    \ M = 0;\n    long N = 0;\n    long O = 0;\n    long P = 0;\n    long Q = 0;\n\
    \    long R = 0;\n    long S = 0;\n    long T = 0;\n    long U = 0;\n    long\
    \ V = 0;\n    long W = 0;\n    long X = 0;\n    long Y = 0;\n    long Z = 0;\n\
    \    long aa = 0;\n    long ab = 0;\n    long ac = 0;\n    long ad = 0;\n    long\
    \ ae = 0;\n    long af = 0;\n    long ag = 0;\n    long ah = 0;\n    long ai =\
    \ 0;\n    long aj = 0;\n    long ak = 0;\n    long al = 0;\n    long am = 0;\n\
    \    long an = 0;\n    long ao = 0;\n    long ap = 0;\n    long aq = 0;\n    long\
    \ ar = 0;\n    long as = 0;\n    long at = 0;\n    long au = 0;\n    long av =\
    \ 0;\n    long aw = 0;\n    long ax = 0;\n    long ay = 0;\n    long az = 0;\n\
    \    long aaa = 0;\n    long aab = 0;\n    long aac = 0;\n    long aad = 0;\n\
    \    long aae = 0;\n    long aaf = 0;\n    long aag = 0;\n    long aah = 0;\n\
    \    long aai = 0;\n    long aaj = 0;\n    long aak = 0;\n    long aal = 0;\n\
    \    long aam = 0;\n    long aan = 0;\n    long aao = 0;\n    long aap = 0;\n\
    \    long aax = 0;\n    long aay = 0;\n    long aaz = 0;\n    long aba = 0;\n\
    \    long abb = 0;\n    long abc = 0;\n    long abd = 0;\n    long abe = 0;\n\
    \    long abf = 0;\n    long abg = 0;\n    \n}\nint main() {\n    auto candidate\
    \ = by_length;\n    assert(candidate((std::vector<long>({2, 1, 1, 4, 5, 8, 2,\
    \ 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"Four\", \"Three\"\
    , \"Two\", \"Two\", \"One\", \"One\"})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 55}))) == (std::vector<std::string>({\"One\"})));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 3, 2}))) == (std::vector<std::string>({\"Three\", \"Two\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>({9, 4, 8}))) == (std::vector<std::string>({\"\
    Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "tmpdsr2wh8y: /tmp/tmpdsr2wh8y.cpp:116: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    std::vector<std::string>\
    \ res;\n    if (arr.size() == 0) {\n        return res;\n    }\n    long min =\
    \ arr[0];\n    long max = arr[0];\n    for (auto i : arr) {\n        if (i < min)\
    \ {\n            min = i;\n        }\n        if (i > max) {\n            max\
    \ = i;\n        }\n    }\n    long mid = min + (max - min) / 2;\n    long mid2\
    \ = mid / 10;\n    long mid3 = mid % 10;\n    long mid4 = mid2 / 10;\n    long\
    \ mid5 = mid2 % 10;\n    long mid6 = mid3 / 10;\n    long mid7 = mid3 % 10;\n\
    \    long mid8 = mid4 / 10;\n    long mid9 = mid4 % 10;\n    long mid10 = mid5\
    \ / 10;\n    long mid11 = mid5 % 10;\n    long mid12 = mid6 / 10;\n    long mid13\
    \ = mid6 % 10;\n    long mid14 = mid7 / 10;\n    long mid15 = mid7 % 10;\n   \
    \ long mid16 = mid8 / 10;\n    long mid17 = mid8 % 10;\n    long mid18 = mid9\
    \ / 10;\n    long mid19 = mid9 % 10;\n    long mid20 = mid10 / 10;\n    long mid21\
    \ = mid10 % 10;\n    long mid22 = mid11 / 10;\n    long mid23 = mid11 % 10;\n\
    \    long mid24 = mid12 / 10;\n    long mid25 = mid12 % 10;\n    long mid26 =\
    \ mid13 / 10;\n    long mid27 = mid13 % 10;\n    long mid28 = mid14 / 10;\n  \
    \  long mid29 = mid14 % 10;\n    long mid30 = mid15 / 10;\n    long mid31 = mid15\
    \ % 10;\n    long mid32 = mid16 / 10;\n    long mid33 = mid16 % 10;\n    long\
    \ mid34 = mid17 / 10;\n    long mid35 = mid17 % 10;\n    long mid36 = mid18 /\
    \ 10;\n    long mid37 = mid18 % 10;\n    long mid38 = mid19 / 10;\n    long mid39\
    \ = mid19 % 10;\n    long mid40 = mid20 / 10;\n    long mid41 = mid20 % 10;\n\
    \    long mid42 = mid21 / 10;\n    long mid43 = mid21 % 10;\n    long mid44 =\
    \ mid22 / 10;\n    long mid45 = mid22 % 10;\n    long mid46 = mid23 / 10;\n  \
    \  long mid47\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({2,\
    \ 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 55}))) == (std::vector<std::string>({\"One\"})));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 3, 2}))) == (std::vector<std::string>({\"Three\", \"Two\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>({9, 4, 8}))) == (std::vector<std::string>({\"\
    Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpn3czgc7r.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmpn3czgc7r.cpp:81:1: error:\
    \ expected initializer before \u2018}\u2019 token\n   81 | }\n      | ^\n/tmp/tmpn3czgc7r.cpp:81:1:\
    \ warning: control reaches end of non-void function [-Wreturn-type]\n   81 | }\n\
    \      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    std::vector<std::string>\
    \ res;\n    long temp;\n    for (long i : arr) {\n        if (i >= 1 && i <= 9)\
    \ {\n            temp = i;\n        } else {\n            temp = -1;\n       \
    \ }\n        res.push_back(to_string(temp));\n    }\n    return res;\n}\nint main()\
    \ {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({2,\
    \ 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<std::string>()));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 55}))) == (std::vector<std::string>({\"One\"})));\n    assert(candidate((std::vector<long>({1,\
    \ -1, 3, 2}))) == (std::vector<std::string>({\"Three\", \"Two\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>({9, 4, 8}))) == (std::vector<std::string>({\"\
    Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmppa32824b.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > by_length(std::vector<long int>)\u2019:\n/tmp/tmppa32824b.cpp:28:23: error:\
    \ \u2018to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   28 |         res.push_back(to_string(temp));\n      |                  \
    \     ^~~~~~~~~\n      |                       std::__cxx11::to_string\nIn file\
    \ included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmppa32824b.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:6598:3:\
    \ note: \u2018std::__cxx11::to_string\u2019 declared here\n 6598 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n// -> sort arr -> [1,\
    \ 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n// return\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ]\n// If the array is empty, return an empty array:\n// arr = []\n// return []\n\
    // If the array has any strange number ignore it:\n// arr = [1, -1 , 55] \n//\
    \ -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55, 1, -1]\n// return = ['One']\n\
    std::vector<std::string> by_length(std::vector<long> arr) {\n    std::vector<std::string>\
    \ res;\n    if (arr.size() == 0) {\n        return res;\n    }\n    long min =\
    \ *std::min_element(arr.begin(), arr.end());\n    long max = *std::max_element(arr.begin(),\
    \ arr.end());\n    long mid = (min + max) / 2;\n    long mid2 = mid / 10;\n  \
    \  long mid3 = mid % 10;\n    long mid4 = mid2 / 10;\n    long mid5 = mid2 % 10;\n\
    \    long mid6 = mid3 / 10;\n    long mid7 = mid3 % 10;\n    long mid8 = mid4\
    \ / 10;\n    long mid9 = mid4 % 10;\n    long mid10 = mid5 / 10;\n    long mid11\
    \ = mid5 % 10;\n    long mid12 = mid6 / 10;\n    long mid13 = mid6 % 10;\n   \
    \ long mid14 = mid7 / 10;\n    long mid15 = mid7 % 10;\n    long mid16 = mid8\
    \ / 10;\n    long mid17 = mid8 % 10;\n    long mid18 = mid9 / 10;\n    long mid19\
    \ = mid9 % 10;\n    long mid20 = mid10 / 10;\n    long mid21 = mid10 % 10;\n \
    \   long mid22 = mid11 / 10;\n    long mid23 = mid11 % 10;\n    long mid24 = mid12\
    \ / 10;\n    long mid25 = mid12 % 10;\n    long mid26 = mid13 / 10;\n    long\
    \ mid27 = mid13 % 10;\n    long mid28 = mid14 / 10;\n    long mid29 = mid14 %\
    \ 10;\n    long mid30 = mid15 / 10;\n    long mid31 = mid15 % 10;\n    long mid32\
    \ = mid16 / 10;\n    long mid33 = mid16 % 10;\n    long mid34 = mid17 / 10;\n\
    \    long mid35 = mid17 % 10;\n    long mid36 = mid18 / 10;\n    long mid37 =\
    \ mid18 % 10;\n    long mid38 = mid19 / 10;\n    long mid39 = mid19 % 10;\n  \
    \  long mid40 = mid20 / 10;\n    long mid41 = mid20 % 10;\n    long mid42 = mid21\
    \ / 10;\n    long mid43 = mid21 % 10;\n    long mid44 = mid22 / 10;\n    long\
    \ mid45 = mid22 % 10;\n    long mid46 = mid23 / 10;\n    long mid47 = mid23 %\
    \ 10;\n    long mid48 = mid24 / 10;\n\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({2, 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"})));\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({1, -1, 55}))) == (std::vector<std::string>({\"\
    One\"})));\n    assert(candidate((std::vector<long>({1, -1, 3, 2}))) == (std::vector<std::string>({\"\
    Three\", \"Two\", \"One\"})));\n    assert(candidate((std::vector<long>({9, 4,\
    \ 8}))) == (std::vector<std::string>({\"Nine\", \"Eight\", \"Four\"})));\n}\n"
  stdout: ''
  stderr: "tmpydyyxp9h: /tmp/tmpydyyxp9h.cpp:78: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 1, 1, 4, 5, 8, 2, 3}))) == (std::vector<std::string>({\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}))' failed.\n"
  exit_code: -6
  status: Exception
