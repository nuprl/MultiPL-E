name: HumanEval_80_is_happy
language: cpp
results:
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    int count\
    \ = 0;\n    for (int i = 0; i < n; i++) {\n        if (s[i] == s[i + 1]) {\n \
    \           count++;\n        }\n    }\n    if (count >= 3) {\n        for (int\
    \ i = 0; i < n; i++) {\n            if (s[i] == s[i + 2]) {\n                count++;\n\
    \            }\n        }\n    }\n    if (count >= 3) {\n        for (int i =\
    \ 0; i < n; i++) {\n            if (s[i] == s[i + 3]) {\n                count++;\n\
    \            }\n        }\n    }\n    if (count == 0) {\n        return true;\n\
    \    }\n    return false;\n}\nint main() {\n    auto candidate = is_happy;\n \
    \   assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) ==\
    \ (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpkhupn88s: /tmp/tmpkhupn88s.cpp:42: int main(): Assertion `candidate((\"\
    a\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    if (n <\
    \ 3) return false; // string length less than 3\n    for (int i = 0; i < n; i++)\
    \ {\n        if (s.at(i) == s.at(i + 1)) {\n            if (s.at(i) == s.at(i\
    \ + 2)) {\n                if (s.at(i) == s.at(i + 3)) {\n                   \
    \ return true;\n                }\n            }\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "terminate called after throwing an instance of 'std::out_of_range'\n  what():\
    \  basic_string::at: __n (which is 4) >= this->size() (which is 4)\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    bool flag = false;\n    int n\
    \ = s.size();\n    if (n >= 3) {\n        for (int i = 0; i < n - 3; i++) {\n\
    \            if (s[i] == s[i + 1] && s[i] == s[i + 2] && s[i] == s[i + 3]) {\n\
    \                flag = true;\n                break;\n            }\n       \
    \ }\n    }\n    return flag;\n}\nint main() {\n    auto candidate = is_happy;\n\
    \    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) ==\
    \ (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp8grplfhc: /tmp/tmp8grplfhc.cpp:30: int main(): Assertion `candidate((\"\
    abcd\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    bool flag = true;\n    int n =\
    \ s.size();\n    if (n < 3) {\n        flag = false;\n    }\n    for (int i =\
    \ 0; i < n; i++) {\n        for (int j = i + 1; j < n; j++) {\n            if\
    \ (s[i] == s[j]) {\n                flag = false;\n            }\n        }\n\
    \    }\n    return flag;\n}\nint main() {\n    auto candidate = is_happy;\n  \
    \  assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n\
    \    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\"\
    )) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpjq5hf5dq: /tmp/tmpjq5hf5dq.cpp:36: int main(): Assertion `candidate((\"\
    iopaxpoi\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    // Your code here\n    \n    bool\
    \ flag = false;\n    int len = s.size();\n    for(int i = 0; i < len-3; i++){\n\
    \        if(s[i] == s[i+1] && s[i+1] == s[i+2] && s[i+2] == s[i+3]){\n       \
    \     flag = true;\n        }\n    }\n    return flag;\n}\nint main() {\n    auto\
    \ candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"\
    aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpgy4xzpsm: /tmp/tmpgy4xzpsm.cpp:29: int main(): Assertion `candidate((\"\
    abcd\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    // Your code here\n    \n    for(int\
    \ i=0;i<s.size();i++){\n        if(s[i]==s[i+1] && s[i]==s[i+2]){\n          \
    \  return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"\
    aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmplf1_2a1d: /tmp/tmplf1_2a1d.cpp:25: int main(): Assertion `candidate((\"\
    a\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    bool flag = true;\n    int count\
    \ = 0;\n    for (int i = 0; i < s.length(); i++) {\n        if (s[i] == s[i +\
    \ 1]) {\n            count++;\n        } else {\n            flag = false;\n \
    \           break;\n        }\n    }\n    if (flag && count >= 3) {\n        for\
    \ (int i = 0; i < s.length() - 1; i++) {\n            if (s[i] == s[i + 1]) {\n\
    \                count++;\n            } else {\n                flag = false;\n\
    \                break;\n            }\n        }\n    }\n    return flag;\n}\n\
    int main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) ==\
    \ (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp362gvvc5: /tmp/tmp362gvvc5.cpp:40: int main(): Assertion `candidate((\"\
    abcd\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    bool flag = false;\n    int count\
    \ = 0;\n    for (int i = 0; i < s.length(); i++) {\n        if (s[i] == s[i +\
    \ 1]) {\n            count++;\n        } else {\n            flag = true;\n  \
    \          break;\n        }\n    }\n    if (flag && count >= 3) {\n        flag\
    \ = false;\n        for (int i = 0; i < s.length() - 1; i++) {\n            if\
    \ (s[i] == s[i + 1]) {\n                flag = true;\n                break;\n\
    \            }\n        }\n    }\n    return flag;\n}\nint main() {\n    auto\
    \ candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"\
    aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpsy6kmbq9: /tmp/tmpsy6kmbq9.cpp:37: int main(): Assertion `candidate((\"\
    a\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    bool flag = true;\n    int n =\
    \ s.size();\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j\
    \ < n; j++) {\n            if (s[i] == s[j]) {\n                flag = false;\n\
    \                break;\n            }\n        }\n    }\n    return flag;\n}\n\
    int main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) ==\
    \ (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpt2st0jq9: /tmp/tmpt2st0jq9.cpp:28: int main(): Assertion `candidate((\"\
    a\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    bool flag = false;\n    int n\
    \ = s.size();\n    if (n < 3) {\n        flag = false;\n    }\n    else {\n  \
    \      for (int i = 0; i < n - 3; i++) {\n            if (s.at(i) == s.at(i +\
    \ 1) && s.at(i) == s.at(i + 2)) {\n                flag = true;\n            }\n\
    \        }\n    }\n    return flag;\n}\nint main() {\n    auto candidate = is_happy;\n\
    \    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) ==\
    \ (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpl2jul9t0: /tmp/tmpl2jul9t0.cpp:32: int main(): Assertion `candidate((\"\
    abcd\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    bool flag = true;\n    int n =\
    \ s.size();\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j\
    \ < n; j++) {\n            for (int k = j + 1; k < n; k++) {\n               \
    \ if (s[i] == s[j] && s[i] == s[k]) {\n                    flag = false;\n   \
    \                 break;\n                }\n            }\n        }\n    }\n\
    \    return flag;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp7czp7obv: /tmp/tmp7czp7obv.cpp:30: int main(): Assertion `candidate((\"\
    a\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    // Your code here\n    bool flag\
    \ = true;\n    int count = 0;\n    for (int i = 0; i < s.length(); i++) {\n  \
    \      if (s[i] == s[i + 1]) {\n            count++;\n        }\n        else\
    \ {\n            flag = false;\n            break;\n        }\n    }\n    if (flag\
    \ && count >= 3) {\n        for (int i = 0; i < s.length(); i++) {\n         \
    \   if (s[i] == s[i + 1]) {\n                count++;\n            }\n       \
    \     else {\n                flag = false;\n                break;\n        \
    \    }\n        }\n    }\n    return flag;\n}\nint main() {\n    auto candidate\
    \ = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"\
    aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpf77l6nfz: /tmp/tmpf77l6nfz.cpp:43: int main(): Assertion `candidate((\"\
    abcd\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    bool flag = false;\n    int count\
    \ = 0;\n    for (int i = 0; i < s.size(); i++) {\n        if (s[i] == s[i + 1])\
    \ {\n            count++;\n        } else {\n            if (count == 3) {\n \
    \               flag = true;\n                break;\n            }\n        \
    \    count = 0;\n        }\n    }\n    return flag;\n}\nint main() {\n    auto\
    \ candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"\
    aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpj4jl0wgs: /tmp/tmpj4jl0wgs.cpp:33: int main(): Assertion `candidate((\"\
    abcd\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    if (n <\
    \ 3) return false;\n    int count = 0;\n    for (int i = 0; i < n; i++) {\n  \
    \      if (s[i] == s[i + 1]) count++;\n        else count = 0;\n        if (count\
    \ == 3) return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"\
    aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp2f175y62: /tmp/tmp2f175y62.cpp:29: int main(): Assertion `candidate((\"\
    aabb\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    if (n <\
    \ 3) return true;\n    for (int i = 0; i < n; i++) {\n        for (int j = i +\
    \ 1; j < n; j++) {\n            for (int k = j + 1; k < n; k++) {\n          \
    \      if (s[i] == s[j] && s[i] == s[k] && s[i] != s[k]) {\n                 \
    \   return false;\n                }\n            }\n        }\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpv0csf95c: /tmp/tmpv0csf95c.cpp:29: int main(): Assertion `candidate((\"\
    a\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.length();\n    int count\
    \ = 0;\n    for (int i = 0; i < n; i++) {\n        if (s[i] == s[i + 1]) {\n \
    \           count++;\n        }\n    }\n    if (count >= 3) {\n        for (int\
    \ i = 0; i < n; i++) {\n            if (s[i] == s[i + 2]) {\n                count++;\n\
    \            }\n        }\n    }\n    if (count >= 3) {\n        for (int i =\
    \ 0; i < n; i++) {\n            if (s[i] == s[i + 3]) {\n                count++;\n\
    \            }\n        }\n    }\n    if (count >= 3) {\n        for (int i =\
    \ 0; i < n; i++) {\n            if (s[i] == s[i + 4]) {\n                count++;\n\
    \            }\n        }\n    }\n    if (count >= 3) {\n        for (int i =\
    \ 0; i < n; i++) {\n            if (s[i] == s[i + 5]) {\n                count++;\n\
    \            }\n        }\n    }\n    if (count >= 3) {\n        for (int i =\
    \ 0; i < n; i++) {\n            if (s[i] == s[i + 6]) {\n                count++;\n\
    \            }\n        }\n    }\n    if (count >= 3) {\n        for (int i =\
    \ 0; i < n; i++) {\n            if (s[i] == s[i + 7]) {\n                count++;\n\
    \            }\n        }\n    }\n    if (count >= 3) {\n        for (int i =\
    \ 0; i < n; i++) {\n            if (s[i] == s[i + 8]) {\n                count++;\n\
    \            }\n        }\n    }\n    if (count >= 3) {\n        for (int i =\
    \ 0; i < n; i++) {\n            if (s[i] == s[i + 9]) {\n                count++;\n\
    \            }\n        }\n    }\n    if (count >= 3) {\n        for (int i =\
    \ 0; i < n; i++) {\n            if (s[i] == s[i + 10]) {\n                count++;\n\
    \            }\n        }\n    }\n    if (count >= 3) {\n        for (int i =\
    \ 0; i < n; i++) {\n            if (s[i] == s[i + 11]) {\n                count++;\n\
    \            }\n        }\n    }\n    if (count >= 3) {\n        for (int i =\
    \ 0; i < n; i++) {\n            if (s[i] == s[i + 12]) {\n                count++;\n\
    \            }\n        }\n    }\n    if (count >= 3) {\n        for (int i =\
    \ 0; i < n; i++) {\n            if (s[i] == s[i + 13]) {\n                count++;\n\
    \            }\n        }\n    }\n    if (count >= 3) {\n        for (int i =\
    \ 0; i < n; i++) {\n            if (s[i] == s[i + 14]) {\n                count++;\n\
    \            }\n        }\n    }\n    if (count >= 3) {\n        for (int i =\
    \ 0; i < n; i++) {\n            if (s[i] == s[i + 15]) {\n                count++;\n\
    \            }\n        }\n    }\n    if (count >= 3) {\n        for (int i =\
    \ 0; i < n; i++) {\n            if (s[i] == s[i + 16]) {\n                count++;\n\
    \            }\n        }\n    }\n    if (count >= 3) {\n        for (int i =\
    \ 0; i < n; i++) {\n            if (s[i] == s[i + 17]) {\n                count++;\n\
    \            }\n        }\n    }\n    if (count >= 3\n}\nint main() {\n    auto\
    \ candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"\
    aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpkpmds3xe.cpp: In function \u2018bool is_happy(std::string)\u2019\
    :\n/tmp/tmpkpmds3xe.cpp:133:19: error: expected \u2018)\u2019 before \u2018}\u2019\
    \ token\n  133 |     if (count >= 3\n      |        ~          ^\n      |    \
    \               )\n  134 | }\n      | ~                  \n/tmp/tmpkpmds3xe.cpp:134:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n  134 | }\n \
    \     | ^\n/tmp/tmpkpmds3xe.cpp:134:1: warning: no return statement in function\
    \ returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    bool flag\
    \ = false;\n    for (int i = 0; i < n; i++) {\n        if (s[i] == s[i + 1] &&\
    \ s[i] == s[i + 2]) {\n            flag = true;\n        }\n    }\n    return\
    \ flag;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpsfqvyvpx: /tmp/tmpsfqvyvpx.cpp:27: int main(): Assertion `candidate((\"\
    abcd\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.length();\n    int count\
    \ = 0;\n    for (int i = 0; i < n; i++) {\n        if (s[i] == s[i + 1]) {\n \
    \           count++;\n        }\n    }\n    if (count < 3) {\n        return false;\n\
    \    }\n    for (int i = 0; i < n - 3; i++) {\n        if (s[i] == s[i + 1] &&\
    \ s[i] == s[i + 2] && s[i] == s[i + 3]) {\n            return false;\n       \
    \ }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_happy;\n\
    \    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) ==\
    \ (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpf8apybjm: /tmp/tmpf8apybjm.cpp:35: int main(): Assertion `candidate((\"\
    abcd\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    bool flag = true;\n    int count\
    \ = 0;\n    for (int i = 0; i < s.length(); i++) {\n        if (s[i] == s[i +\
    \ 1]) {\n            count++;\n        } else {\n            flag = false;\n \
    \           break;\n        }\n    }\n    if (flag && count >= 3) {\n        for\
    \ (int i = 0; i < s.length() - 1; i++) {\n            if (s[i] == s[i + 1]) {\n\
    \                count++;\n            } else {\n                flag = false;\n\
    \                break;\n            }\n        }\n    }\n    return flag;\n}\n\
    int main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) ==\
    \ (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp8g94doqb: /tmp/tmp8g94doqb.cpp:40: int main(): Assertion `candidate((\"\
    abcd\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    bool flag = true;\n    int n =\
    \ s.size();\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j\
    \ < n; j++) {\n            for (int k = j + 1; k < n; k++) {\n               \
    \ if (s[i] == s[j] && s[i] == s[k]) {\n                    flag = false;\n   \
    \                 break;\n                }\n            }\n        }\n    }\n\
    \    return flag;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmptmefh7az: /tmp/tmptmefh7az.cpp:30: int main(): Assertion `candidate((\"\
    a\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    // Your code here\n    bool flag\
    \ = false;\n    int n = s.size();\n    for(int i = 0; i < n; i++) {\n        for(int\
    \ j = i + 1; j < n; j++) {\n            for(int k = j + 1; k < n; k++) {\n   \
    \             if(s[i] == s[j] && s[i] == s[k] && s[j] == s[k]) {\n           \
    \         flag = true;\n                }\n            }\n        }\n    }\n \
    \   return flag;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp5yobc84r: /tmp/tmp5yobc84r.cpp:32: int main(): Assertion `candidate((\"\
    abcd\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.length();\n    if (n\
    \ < 3) return false;\n    for (int i = 0; i < n; i++) {\n        if (s.at(i) ==\
    \ s.at(i + 1)) return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"\
    aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: "terminate called after throwing an instance of 'std::out_of_range'\n  what():\
    \  basic_string::at: __n (which is 4) >= this->size() (which is 4)\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    bool flag = false;\n    int n\
    \ = s.size();\n    if (n >= 3) {\n        for (int i = 0; i < n - 3; i++) {\n\
    \            if (s.at(i) == s.at(i + 1) && s.at(i) == s.at(i + 2)) {\n       \
    \         flag = true;\n                break;\n            }\n        }\n   \
    \ }\n    return flag;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp9zdj4zq_: /tmp/tmp9zdj4zq_.cpp:30: int main(): Assertion `candidate((\"\
    abcd\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    if (n <\
    \ 3) {\n        return false;\n    }\n    for (int i = 0; i < n - 3; i++) {\n\
    \        if (s[i] == s[i + 1] && s[i + 1] == s[i + 2] && s[i + 2] == s[i + 3])\
    \ {\n            return false;\n        }\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n\
    \    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\"))\
    \ == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpa1n5q8uq: /tmp/tmpa1n5q8uq.cpp:30: int main(): Assertion `candidate((\"\
    aabb\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    bool flag = false;\n    int n\
    \ = s.size();\n    if (n >= 3) {\n        for (int i = 0; i < n - 3; i++) {\n\
    \            if (s[i] == s[i + 1] && s[i] == s[i + 2] && s[i] == s[i + 3]) {\n\
    \                flag = true;\n                break;\n            }\n       \
    \ }\n    }\n    return flag;\n}\nint main() {\n    auto candidate = is_happy;\n\
    \    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) ==\
    \ (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp_q0v1fd0: /tmp/tmp_q0v1fd0.cpp:30: int main(): Assertion `candidate((\"\
    abcd\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    bool flag = true;\n    for (int\
    \ i = 0; i < s.length(); i++) {\n        if (s[i] == s[i + 1]) {\n           \
    \ flag = false;\n            break;\n        }\n    }\n    for (int i = 0; i <\
    \ s.length() - 3; i++) {\n        if (s[i] == s[i + 1] && s[i] == s[i + 2] &&\
    \ s[i] == s[i + 3]) {\n            flag = false;\n            break;\n       \
    \ }\n    }\n    return flag;\n}\nint main() {\n    auto candidate = is_happy;\n\
    \    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) ==\
    \ (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpgzapzwd5: /tmp/tmpgzapzwd5.cpp:38: int main(): Assertion `candidate((\"\
    iopaxioi\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    if (n <\
    \ 3) return false; // empty string\n    bool flag = true;\n    for (int i = 0;\
    \ i < n; i++) {\n        if (s[i] != s[i + 1]) {\n            flag = false;\n\
    \            break;\n        }\n    }\n    return flag;\n}\nint main() {\n   \
    \ auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n   \
    \ assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) ==\
    \ (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpw_s5eb_a: /tmp/tmpw_s5eb_a.cpp:29: int main(): Assertion `candidate((\"\
    abcd\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    if (n <\
    \ 3)\n        return false;\n    int count = 0;\n    for (int i = 0; i < n; i++)\
    \ {\n        if (s[i] == s[i + 1] && s[i] == s[i + 2])\n            count++;\n\
    \    }\n    if (count < 3)\n        return false;\n    for (int i = 0; i < n -\
    \ 3; i++) {\n        if (s[i] == s[i + 1] && s[i] == s[i + 2] && s[i] == s[i +\
    \ 3])\n            count++;\n    }\n    return count == 3;\n}\nint main() {\n\
    \    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n\
    \    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\"))\
    \ == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmprj9jm5_o: /tmp/tmprj9jm5_o.cpp:34: int main(): Assertion `candidate((\"\
    abcd\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.length();\n    if (n\
    \ < 3) return true;\n    for (int i = 0; i < n; i++) {\n        if (s.at(i) !=\
    \ s.at(i + 1)) return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"\
    aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpz1i3l4zz: /tmp/tmpz1i3l4zz.cpp:23: int main(): Assertion `candidate((\"\
    a\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.length();\n    bool\
    \ flag = false;\n    for (int i = 0; i < n; i++) {\n        if (s[i] == s[i +\
    \ 1] && s[i] == s[i + 2]) {\n            flag = true;\n        }\n    }\n    return\
    \ flag;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpt65iorah: /tmp/tmpt65iorah.cpp:27: int main(): Assertion `candidate((\"\
    abcd\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    if (n <\
    \ 3) return true;\n    for (int i = 0; i < n; i++) {\n        for (int j = i +\
    \ 1; j < n; j++) {\n            if (s[i] != s[j]) {\n                return false;\n\
    \            }\n        }\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"\
    aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpj19n_2_c: /tmp/tmpj19n_2_c.cpp:27: int main(): Assertion `candidate((\"\
    a\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    if (n <\
    \ 3) return false;\n    for (int i = 0; i < n; i++) {\n        if (s[i] == s[i\
    \ + 1] && s[i] == s[i + 2]) return false;\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n\
    \    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\"))\
    \ == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpxfrph3cg: /tmp/tmpxfrph3cg.cpp:26: int main(): Assertion `candidate((\"\
    aabb\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    bool flag = true;\n    int n =\
    \ s.size();\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j\
    \ < n; j++) {\n            if (s[i] == s[j]) {\n                flag = false;\n\
    \            }\n        }\n    }\n    return flag;\n}\nint main() {\n    auto\
    \ candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"\
    aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp3twbwmx0: /tmp/tmp3twbwmx0.cpp:27: int main(): Assertion `candidate((\"\
    a\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    bool flag\
    \ = true;\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j <\
    \ n; j++) {\n            if (s[i] == s[j]) {\n                flag = false;\n\
    \                break;\n            }\n        }\n    }\n    return flag;\n}\n\
    int main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) ==\
    \ (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpm5_2z025: /tmp/tmpm5_2z025.cpp:28: int main(): Assertion `candidate((\"\
    a\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    if (n <\
    \ 3)\n        return false;\n    for (int i = 0; i < n - 3; i++) {\n        if\
    \ (s.at(i) == s.at(i + 1) && s.at(i) == s.at(i + 2)) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_happy;\n\
    \    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) ==\
    \ (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpwyypul91: /tmp/tmpwyypul91.cpp:29: int main(): Assertion `candidate((\"\
    aabb\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.length();\n    int count\
    \ = 0;\n    for (int i = 0; i < n; i++) {\n        if (s[i] == s[i + 1]) {\n \
    \           count++;\n        }\n    }\n    return count >= 3 && n == (count -\
    \ 1);\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmptm2jz7sg: /tmp/tmptm2jz7sg.cpp:27: int main(): Assertion `candidate((\"\
    abcd\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.length();\n    bool\
    \ flag = false;\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1;\
    \ j < n; j++) {\n            if (s[i] == s[j]) {\n                flag = true;\n\
    \                break;\n            }\n        }\n    }\n    return flag;\n}\n\
    int main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) ==\
    \ (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpopwpv3i8: /tmp/tmpopwpv3i8.cpp:29: int main(): Assertion `candidate((\"\
    aa\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    if (n <\
    \ 3) return false;\n    for (int i = 0; i < n; i++) {\n        for (int j = i\
    \ + 1; j < n; j++) {\n            if (s[i] != s[j]) break;\n        }\n      \
    \  if (j == n) return true;\n    }\n    return false;\n}\nint main() {\n    auto\
    \ candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"\
    aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7ecda3r6.cpp: In function \u2018bool is_happy(std::string)\u2019\
    :\n/tmp/tmp7ecda3r6.cpp:20:13: error: \u2018j\u2019 was not declared in this scope\n\
    \   20 |         if (j == n) return true;\n      |             ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    int count\
    \ = 0;\n    for (int i = 0; i < n; i++) {\n        if (s[i] == s[i + 1]) {\n \
    \           count++;\n        }\n    }\n    if (count < 3) {\n        return false;\n\
    \    }\n    for (int i = 0; i < n - 3; i++) {\n        if (s[i] == s[i + 1] &&\
    \ s[i] == s[i + 2] && s[i] == s[i + 3]) {\n            return false;\n       \
    \ }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_happy;\n\
    \    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) ==\
    \ (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmppxmlg7vj: /tmp/tmppxmlg7vj.cpp:35: int main(): Assertion `candidate((\"\
    abcd\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    // Your code here\n    int n =\
    \ s.size();\n    bool flag = true;\n    for (int i = 0; i < n; i++) {\n      \
    \  for (int j = i + 1; j < n; j++) {\n            if (s[i] == s[j]) {\n      \
    \          flag = false;\n            }\n        }\n    }\n    return flag;\n\
    }\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\"))\
    \ == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmplu677tm9: /tmp/tmplu677tm9.cpp:28: int main(): Assertion `candidate((\"\
    a\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    bool flag = true;\n    int count\
    \ = 0;\n    for (int i = 0; i < s.size(); i++) {\n        if (s[i] == s[i + 1])\
    \ {\n            count++;\n        }\n        if (count == 3) {\n            flag\
    \ = false;\n            break;\n        }\n    }\n    return flag;\n}\nint main()\
    \ {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n\
    \    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\"))\
    \ == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpi2fbj0d7: /tmp/tmpi2fbj0d7.cpp:29: int main(): Assertion `candidate((\"\
    a\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.length();\n    bool\
    \ flag = true;\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1;\
    \ j < n; j++) {\n            for (int k = j + 1; k < n; k++) {\n             \
    \   if (s[i] == s[j] && s[i] == s[k]) {\n                    flag = false;\n \
    \                   break;\n                }\n            }\n        }\n    }\n\
    \    return flag;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpjol8zh1z: /tmp/tmpjol8zh1z.cpp:30: int main(): Assertion `candidate((\"\
    a\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    if (n <\
    \ 3) return false;\n    int count = 0;\n    for (int i = 0; i < n; i++) {\n  \
    \      if (s[i] == s[i + 1]) {\n            count++;\n        }\n    }\n    if\
    \ (count == 3) return false;\n    for (int i = 0; i < n; i++) {\n        if (s[i]\
    \ == s[i + 2]) {\n            count++;\n        }\n    }\n    if (count == 3)\
    \ return false;\n    return true;\n}\nint main() {\n    auto candidate = is_happy;\n\
    \    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) ==\
    \ (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp3vg1r1jl: /tmp/tmp3vg1r1jl.cpp:36: int main(): Assertion `candidate((\"\
    aabb\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    int count\
    \ = 0;\n    for (int i = 0; i < n; i++) {\n        if (s[i] == s[i + 1]) {\n \
    \           count++;\n        }\n    }\n    if (count < 3) {\n        return false;\n\
    \    }\n    for (int i = 0; i < n - 3; i++) {\n        if (s[i] == s[i + 2] &&\
    \ s[i] == s[i + 3]) {\n            return false;\n        }\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp569ybxve: /tmp/tmp569ybxve.cpp:35: int main(): Assertion `candidate((\"\
    abcd\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    if (n <\
    \ 3) return false;\n    int count = 0;\n    for (int i = 0; i < n; i++) {\n  \
    \      if (s[i] == s[i + 1]) {\n            count++;\n            if (count ==\
    \ 3) {\n                return false;\n            }\n        }\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp624k48ju: /tmp/tmp624k48ju.cpp:32: int main(): Assertion `candidate((\"\
    aabb\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    if (n <\
    \ 3) return false;\n    for (int i = 0; i < n; i++) {\n        for (int j = i\
    \ + 1; j < n; j++) {\n            for (int k = j + 1; k < n; k++) {\n        \
    \        if (s[i] != s[j] && s[i] != s[k] && s[i] != s[k]) return false;\n   \
    \         }\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"\
    aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpd7a34g0d: /tmp/tmpd7a34g0d.cpp:29: int main(): Assertion `candidate((\"\
    abcd\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    bool flag\
    \ = false;\n    for (int i = 0; i < n; i++) {\n        if (i % 3 == 0) {\n   \
    \         if (s.at(i) == s.at(i - 1) && s.at(i) == s.at(i - 2)) {\n          \
    \      flag = true;\n            }\n        }\n    }\n    return flag;\n}\nint\
    \ main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n\
    \    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\"))\
    \ == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "terminate called after throwing an instance of 'std::out_of_range'\n  what():\
    \  basic_string::at: __n (which is 18446744073709551615) >= this->size() (which\
    \ is 1)\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    if (n <\
    \ 3)\n        return false;\n    int count = 0;\n    for (int i = 0; i < n; i++)\
    \ {\n        if (s[i] == s[i + 1]) {\n            count++;\n        }\n    }\n\
    \    if (count == 3)\n        return true;\n    return false;\n}\nint main() {\n\
    \    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n\
    \    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\"))\
    \ == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp1sch19zr: /tmp/tmp1sch19zr.cpp:31: int main(): Assertion `candidate((\"\
    abcd\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    if (n <\
    \ 3) return true;\n    for (int i = 0; i < n; i++) {\n        if (s.at(i) == s.at(i\
    \ + 1)) {\n            if (s.at(i) == s.at(i + 2)) {\n                if (s.at(i)\
    \ == s.at(i + 3)) {\n                    return false;\n                }\n  \
    \          }\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"\
    aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmph18l5115: /tmp/tmph18l5115.cpp:29: int main(): Assertion `candidate((\"\
    a\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.length();\n    if (n\
    \ < 3)\n        return false;\n    for (int i = 0; i < n; i++) {\n        for\
    \ (int j = i + 1; j < n; j++) {\n            if (s[i] != s[j])\n             \
    \   return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"\
    aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpefbxsvr_: /tmp/tmpefbxsvr_.cpp:29: int main(): Assertion `candidate((\"\
    abcd\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\n}\nint main() {\n    auto candidate = is_happy;\n \
    \   assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) ==\
    \ (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp5rkijl5o: /tmp/tmp5rkijl5o.cpp:275: int main(): Assertion `candidate((\"\
    aa\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    if (n <\
    \ 3) return false;\n    for (int i = 0; i < n; i++) {\n        if (s.at(i) ==\
    \ s.at(i + 1)) return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"\
    aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: "terminate called after throwing an instance of 'std::out_of_range'\n  what():\
    \  basic_string::at: __n (which is 4) >= this->size() (which is 4)\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    if (n <\
    \ 3) return false;\n    int count = 0;\n    for (int i = 0; i < n; i++) {\n  \
    \      if (s[i] == s[i + 1]) {\n            count++;\n        }\n    }\n    return\
    \ count >= 3;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp2h8itd1b: /tmp/tmp2h8itd1b.cpp:28: int main(): Assertion `candidate((\"\
    abcd\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    bool flag\
    \ = false;\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j <\
    \ n; j++) {\n            if (s[i] == s[j]) {\n                flag = false;\n\
    \                break;\n            }\n        }\n    }\n    return flag;\n}\n\
    int main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) ==\
    \ (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpmvh39t6d: /tmp/tmpmvh39t6d.cpp:30: int main(): Assertion `candidate((\"\
    abcd\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    if (n <\
    \ 3) return false;\n    for (int i = 0; i < n; i++) {\n        if (s[i] == s[i\
    \ + 1] && s[i] == s[i + 2]) return false;\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n\
    \    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\"))\
    \ == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpf43yghyn: /tmp/tmpf43yghyn.cpp:26: int main(): Assertion `candidate((\"\
    aabb\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    bool flag = true;\n    int n =\
    \ s.size();\n    if (n < 3) {\n        flag = false;\n    }\n    for (int i =\
    \ 0; i < n - 3; i++) {\n        if (s[i] == s[i + 1] && s[i] == s[i + 2] && s[i]\
    \ == s[i + 3]) {\n            flag = false;\n        }\n    }\n    return flag;\n\
    }\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\"))\
    \ == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpko98nl4x: /tmp/tmpko98nl4x.cpp:31: int main(): Assertion `candidate((\"\
    aabb\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    if (n <\
    \ 3) return true;\n    for (int i = 0; i < n; i++) {\n        if (s.at(i) == s.at(i\
    \ + 1)) continue;\n        if (s.at(i) == s.at(i + 2)) continue;\n        if (s.at(i)\
    \ == s.at(i + 3)) continue;\n        return false;\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\"))\
    \ == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp_qo72wq2: /tmp/tmp_qo72wq2.cpp:26: int main(): Assertion `candidate((\"\
    a\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    if (n <\
    \ 3)\n        return false;\n    for (int i = 0; i < n; i++) {\n        for (int\
    \ j = i + 1; j < n; j++) {\n            if (s[i] == s[j])\n                return\
    \ false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"\
    aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp92lysr9t: /tmp/tmp92lysr9t.cpp:33: int main(): Assertion `candidate((\"\
    iopaxpoi\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    if (n <\
    \ 3) return false;\n    for (int i = 0; i < n; i++) {\n        for (int j = i\
    \ + 1; j < n; j++) {\n            if (s[i] == s[j]) continue;\n            if\
    \ (s[i] == s[j] && i != j) continue;\n            return false;\n        }\n \
    \   }\n    return true;\n}\nint main() {\n    auto candidate = is_happy;\n   \
    \ assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n\
    \    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\"\
    )) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp4a3j_p4o: /tmp/tmp4a3j_p4o.cpp:29: int main(): Assertion `candidate((\"\
    abcd\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.length();\n    if (n\
    \ < 3)\n        return false;\n    for (int i = 0; i < n; i++) {\n        if (s.at(i)\
    \ == s.at(i + 1))\n            return false;\n    }\n    return true;\n}\nint\
    \ main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n\
    \    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\"))\
    \ == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "terminate called after throwing an instance of 'std::out_of_range'\n  what():\
    \  basic_string::at: __n (which is 4) >= this->size() (which is 4)\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.length();\n    bool\
    \ flag = false;\n    for (int i = 0; i < n; i++) {\n        if (s[i] == s[i +\
    \ 1]) {\n            flag = true;\n        }\n    }\n    if (flag) {\n       \
    \ for (int i = 0; i < n; i++) {\n            if (s[i] == s[i + 2]) {\n       \
    \         flag = true;\n            }\n        }\n    }\n    if (flag) {\n   \
    \     for (int i = 0; i < n; i++) {\n            if (s[i] == s[i + 3]) {\n   \
    \             flag = true;\n            }\n        }\n    }\n    if (flag) {\n\
    \        for (int i = 0; i < n; i++) {\n            if (s[i] == s[i + 4]) {\n\
    \                flag = true;\n            }\n        }\n    }\n    if (flag)\
    \ {\n        for (int i = 0; i < n; i++) {\n            if (s[i] == s[i + 5])\
    \ {\n                flag = true;\n            }\n        }\n    }\n    if (flag)\
    \ {\n        for (int i = 0; i < n; i++) {\n            if (s[i] == s[i + 6])\
    \ {\n                flag = true;\n            }\n        }\n    }\n    if (flag)\
    \ {\n        for (int i = 0; i < n; i++) {\n            if (s[i] == s[i + 7])\
    \ {\n                flag = true;\n            }\n        }\n    }\n    if (flag)\
    \ {\n        for (int i = 0; i < n; i++) {\n            if (s[i] == s[i + 8])\
    \ {\n                flag = true;\n            }\n        }\n    }\n    if (flag)\
    \ {\n        for (int i = 0; i < n; i++) {\n            if (s[i] == s[i + 9])\
    \ {\n                flag = true;\n            }\n        }\n    }\n    if (flag)\
    \ {\n        for (int i = 0; i < n; i++) {\n            if (s[i] == s[i + 10])\
    \ {\n                flag = true;\n            }\n        }\n    }\n    if (flag)\
    \ {\n        for (int i = 0; i < n; i++) {\n            if (s[i] == s[i + 11])\
    \ {\n                flag = true;\n            }\n        }\n    }\n    if (flag)\
    \ {\n        for (int i = 0; i < n; i++) {\n            if (s[i] == s[i + 12])\
    \ {\n                flag = true;\n            }\n        }\n    }\n    if (flag)\
    \ {\n        for (int i = 0; i < n; i++) {\n            if (s[i] == s[i + 13])\
    \ {\n                flag = true;\n            }\n        }\n    }\n    if (flag)\
    \ {\n        for (int i = 0; i < n; i++) {\n            if (s[i] == s[i + 14])\
    \ {\n                flag = true;\n            }\n        }\n    }\n    if (flag)\
    \ {\n        for (int i = 0; i < n; i++) {\n            if (s[i] == s[i + 15])\
    \ {\n                flag = true;\n            }\n        }\n    }\n    if (flag)\
    \ {\n        for (int i = 0; i < n; i++) {\n            if (s[i] == s[i + 16])\
    \ {\n                flag = true;\n            }\n        }\n    }\n    if (flag)\
    \ {\n        for (int i = 0; i < n; i++) {\n            if (s[i] == s[i + 17])\
    \ {\n                flag = true;\n            }\n        }\n    }\n    if (flag)\
    \ {\n        for (int i = 0; i < n; i++) {\n            if (s[i] == s[i + 18])\
    \ {\n                flag = true;\n            }\n        }\n    }\n    if (flag)\
    \ {\n        for (int \n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpr7r8_hnp.cpp: In function \u2018bool is_happy(std::string)\u2019\
    :\n/tmp/tmpr7r8_hnp.cpp:142:1: error: expected unqualified-id before \u2018}\u2019\
    \ token\n  142 | }\n      | ^\n/tmp/tmpr7r8_hnp.cpp:141:17: error: expected \u2018\
    ;\u2019 before \u2018}\u2019 token\n  141 |         for (int\n      |        \
    \         ^\n      |                 ;\n  142 | }\n      | ~                \n\
    /tmp/tmpr7r8_hnp.cpp:142:1: error: expected primary-expression before \u2018}\u2019\
    \ token\n  142 | }\n      | ^\n/tmp/tmpr7r8_hnp.cpp:141:17: error: expected \u2018\
    ;\u2019 before \u2018}\u2019 token\n  141 |         for (int\n      |        \
    \         ^\n      |                 ;\n  142 | }\n      | ~                \n\
    /tmp/tmpr7r8_hnp.cpp:142:1: error: expected primary-expression before \u2018}\u2019\
    \ token\n  142 | }\n      | ^\n/tmp/tmpr7r8_hnp.cpp:141:17: error: expected \u2018\
    )\u2019 before \u2018}\u2019 token\n  141 |         for (int\n      |        \
    \     ~   ^\n      |                 )\n  142 | }\n      | ~                \n\
    /tmp/tmpr7r8_hnp.cpp:142:1: error: expected primary-expression before \u2018}\u2019\
    \ token\n  142 | }\n      | ^\n/tmp/tmpr7r8_hnp.cpp:143:12: error: a function-definition\
    \ is not allowed here before \u2018{\u2019 token\n  143 | int main() {\n     \
    \ |            ^\n/tmp/tmpr7r8_hnp.cpp:153:1: error: expected \u2018}\u2019 at\
    \ end of input\n  153 | }\n      | ^\n/tmp/tmpr7r8_hnp.cpp:13:30: note: to match\
    \ this \u2018{\u2019\n   13 | bool is_happy(std::string s) {\n      |        \
    \                      ^\n/tmp/tmpr7r8_hnp.cpp:153:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n  153 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    if (n <\
    \ 3) {\n        return false;\n    }\n    unordered_set<char> hash;\n    for (int\
    \ i = 0; i < n; i++) {\n        hash[s[i]];\n    }\n    for (int i = 0; i < n;\
    \ i++) {\n        if (i % 3 == 0) {\n            if (hash[s[i + 1]] == hash[s[i\
    \ + 2]] && hash[s[i + 1]] == hash[s[i + 3]]) {\n                return false;\n\
    \            }\n        }\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"\
    aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpl780b7ov.cpp: In function \u2018bool is_happy(std::string)\u2019\
    :\n/tmp/tmpl780b7ov.cpp:18:5: error: \u2018unordered_set\u2019 was not declared\
    \ in this scope; did you mean \u2018std::unordered_set\u2019?\n   18 |     unordered_set<char>\
    \ hash;\n      |     ^~~~~~~~~~~~~\n      |     std::unordered_set\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/unordered_set:47,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:118,\n\
    \                 from /tmp/tmpl780b7ov.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/unordered_set.h:97:11:\
    \ note: \u2018std::unordered_set\u2019 declared here\n   97 |     class unordered_set\n\
    \      |           ^~~~~~~~~~~~~\n/tmp/tmpl780b7ov.cpp:18:19: error: expected\
    \ primary-expression before \u2018char\u2019\n   18 |     unordered_set<char>\
    \ hash;\n      |                   ^~~~\n/tmp/tmpl780b7ov.cpp:20:9: error: \u2018\
    hash\u2019 was not declared in this scope; did you mean \u2018std::hash\u2019\
    ?\n   20 |         hash[s[i]];\n      |         ^~~~\n      |         std::hash\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:6719,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpl780b7ov.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    if (n <\
    \ 3) {\n        return false;\n    }\n    int count = 0;\n    for (int i = 0;\
    \ i < n; i++) {\n        if (s[i] == s[i + 1]) {\n            count++;\n     \
    \   }\n    }\n    if (count == 3) {\n        return true;\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\"))\
    \ == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpfz9dp7c5: /tmp/tmpfz9dp7c5.cpp:33: int main(): Assertion `candidate((\"\
    abcd\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    if (n <\
    \ 3) return true;\n    for (int i = 0; i < n; i++) {\n        for (int j = i +\
    \ 1; j < n; j++) {\n            if (s[i] == s[j]) {\n                return false;\n\
    \            }\n        }\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"\
    aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmplhfxxad_: /tmp/tmplhfxxad_.cpp:27: int main(): Assertion `candidate((\"\
    a\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.length();\n    if (n\
    \ < 3) {\n        return false;\n    }\n    for (int i = 0; i < n; i++) {\n  \
    \      for (int j = i + 1; j < n; j++) {\n            if (s[i] == s[j]) {\n  \
    \              return false;\n            }\n        }\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\"))\
    \ == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpxz7r6hpu: /tmp/tmpxz7r6hpu.cpp:35: int main(): Assertion `candidate((\"\
    iopaxpoi\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    bool flag\
    \ = false;\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j <\
    \ n; j++) {\n            for (int k = j + 1; k < n; k++) {\n                if\
    \ (s[i] == s[j] && s[i] == s[k]) {\n                    flag = true;\n       \
    \             break;\n                }\n            }\n        }\n    }\n   \
    \ return flag;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp83crbr3d: /tmp/tmp83crbr3d.cpp:32: int main(): Assertion `candidate((\"\
    abcd\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.length();\n    if (n\
    \ < 3) return true;\n    for (int i = 0; i < n; i++) {\n        if (s.at(i) ==\
    \ s.at(i + 1)) continue;\n        if (s.at(i) == s.at(i + 2)) continue;\n    \
    \    return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"\
    aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp3yh6ikhl: /tmp/tmp3yh6ikhl.cpp:25: int main(): Assertion `candidate((\"\
    a\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    int count\
    \ = 0;\n    for (int i = 0; i < n; i++) {\n        if (s[i] == s[i + 1]) {\n \
    \           count++;\n        }\n    }\n    if (count >= 3) {\n        for (int\
    \ i = 0; i < n; i++) {\n            if (s[i] == s[i + 2]) {\n                count++;\n\
    \            }\n        }\n    }\n    return count >= 3;\n}\nint main() {\n  \
    \  auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n  \
    \  assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) ==\
    \ (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmphhy7l_4w: /tmp/tmphhy7l_4w.cpp:34: int main(): Assertion `candidate((\"\
    abcd\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    bool flag = false;\n    int n\
    \ = s.size();\n    for (int i = 0; i < n; i++) {\n        if (i % 3 == 0) {\n\
    \            if (s.at(i) == s.at(i - 1) && s.at(i) == s.at(i - 2)) {\n       \
    \         flag = true;\n            }\n        }\n    }\n    return flag;\n}\n\
    int main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) ==\
    \ (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "terminate called after throwing an instance of 'std::out_of_range'\n  what():\
    \  basic_string::at: __n (which is 18446744073709551615) >= this->size() (which\
    \ is 1)\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    bool flag = true;\n    int len\
    \ = s.size();\n    if (len < 3)\n        return false;\n    for (int i = 0; i\
    \ < len-3; i++) {\n        if (s[i] == s[i+1] && s[i] == s[i+2])\n           \
    \ flag = false;\n    }\n    return flag;\n}\nint main() {\n    auto candidate\
    \ = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"\
    aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpvu21ikc8: /tmp/tmpvu21ikc8.cpp:29: int main(): Assertion `candidate((\"\
    aabb\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    bool flag = true;\n    int n =\
    \ s.size();\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j\
    \ < n; j++) {\n            if (s[i] == s[j]) {\n                flag = false;\n\
    \            }\n        }\n    }\n    return flag;\n}\nint main() {\n    auto\
    \ candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"\
    aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpgcj48njh: /tmp/tmpgcj48njh.cpp:27: int main(): Assertion `candidate((\"\
    a\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.length();\n    if (n\
    \ < 3) return false;\n    for (int i = 0; i < n; i++) {\n        if (s[i] == s[i\
    \ + 1] && s[i] == s[i + 2]) return false;\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n\
    \    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\"))\
    \ == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp1acj0wfx: /tmp/tmp1acj0wfx.cpp:26: int main(): Assertion `candidate((\"\
    aabb\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.length();\n    for(int\
    \ i = 0; i < n; i++) {\n        for(int j = i + 1; j < n; j++) {\n           \
    \ for(int k = j + 1; k < n; k++) {\n                if(s[i] == s[j] && s[i] ==\
    \ s[k] && s[i] != s[k]) {\n                    return false;\n               \
    \ }\n            }\n        }\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"\
    aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpxxwc0jg2: /tmp/tmpxxwc0jg2.cpp:28: int main(): Assertion `candidate((\"\
    a\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    int count\
    \ = 0;\n    for (int i = 0; i < n; i++) {\n        if (s[i] == s[i + 1]) {\n \
    \           count++;\n        }\n    }\n    return count >= 3 && n == (count -\
    \ 1);\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpaqv4ejb7: /tmp/tmpaqv4ejb7.cpp:27: int main(): Assertion `candidate((\"\
    abcd\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    if (n <\
    \ 3) return false;\n    for (int i = 0; i < n; i++) {\n        for (int j = i\
    \ + 1; j < n; j++) {\n            if (s[i] == s[j]) {\n                return\
    \ false;\n            }\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n\
    \    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\"))\
    \ == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpm065yrzv: /tmp/tmpm065yrzv.cpp:33: int main(): Assertion `candidate((\"\
    iopaxpoi\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.length();\n    if (n\
    \ < 3) return false;\n    for (int i = 0; i < n; i++) {\n        if (s.at(i) ==\
    \ s.at(i + 1)) return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"\
    aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: "terminate called after throwing an instance of 'std::out_of_range'\n  what():\
    \  basic_string::at: __n (which is 4) >= this->size() (which is 4)\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    if (n <\
    \ 3) return true;\n    for (int i = 0; i < n; i++) {\n        for (int j = i +\
    \ 1; j < n; j++) {\n            if (s[i] == s[j]) {\n                return false;\n\
    \            }\n        }\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"\
    aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpy6i5skm8: /tmp/tmpy6i5skm8.cpp:27: int main(): Assertion `candidate((\"\
    a\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    if (n <\
    \ 3) return true;\n    unordered_set<char> chars;\n    for (int i = 0; i < n;\
    \ i++) {\n        char c = s[i];\n        if (chars.find(c) != chars.end()) {\n\
    \            return false;\n        }\n        chars.insert(c);\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmppahs0d7h.cpp: In function \u2018bool is_happy(std::string)\u2019\
    :\n/tmp/tmppahs0d7h.cpp:16:5: error: \u2018unordered_set\u2019 was not declared\
    \ in this scope; did you mean \u2018std::unordered_set\u2019?\n   16 |     unordered_set<char>\
    \ chars;\n      |     ^~~~~~~~~~~~~\n      |     std::unordered_set\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/unordered_set:47,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:118,\n\
    \                 from /tmp/tmppahs0d7h.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/unordered_set.h:97:11:\
    \ note: \u2018std::unordered_set\u2019 declared here\n   97 |     class unordered_set\n\
    \      |           ^~~~~~~~~~~~~\n/tmp/tmppahs0d7h.cpp:16:19: error: expected\
    \ primary-expression before \u2018char\u2019\n   16 |     unordered_set<char>\
    \ chars;\n      |                   ^~~~\n/tmp/tmppahs0d7h.cpp:19:13: error: \u2018\
    chars\u2019 was not declared in this scope; did you mean \u2018char\u2019?\n \
    \  19 |         if (chars.find(c) != chars.end()) {\n      |             ^~~~~\n\
    \      |             char\n/tmp/tmppahs0d7h.cpp:22:9: error: \u2018chars\u2019\
    \ was not declared in this scope; did you mean \u2018char\u2019?\n   22 |    \
    \     chars.insert(c);\n      |         ^~~~~\n      |         char\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    bool flag = true;\n    int n =\
    \ s.size();\n    for(int i = 0; i < n; i++) {\n        for(int j = i+1; j < n;\
    \ j++) {\n            for(int k = j+1; k < n; k++) {\n                if(s[i]\
    \ == s[j] && s[i] == s[k]) {\n                    flag = false;\n            \
    \        break;\n                }\n            }\n        }\n    }\n    return\
    \ flag;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpbqowvvz2: /tmp/tmpbqowvvz2.cpp:30: int main(): Assertion `candidate((\"\
    a\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    if (n <\
    \ 3) return true;\n    for (int i = 0; i < n - 3; i++) {\n        if (s[i] ==\
    \ s[i + 1] && s[i] == s[i + 2] && s[i] == s[i + 3]) return true;\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp7_6ys9vf: /tmp/tmp7_6ys9vf.cpp:23: int main(): Assertion `candidate((\"\
    a\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.length();\n    if (n\
    \ < 3) return false;\n    for (int i = 0; i < n; i++) {\n        for (int j =\
    \ i + 1; j < n; j++) {\n            if (s[i] == s[j]) {\n                for (int\
    \ k = j + 1; k < n; k++) {\n                    if (s[k] == s[i]) {\n        \
    \                for (int l = k + 1; l < n; l++) {\n                         \
    \   if (s[l] == s[i]) {\n                                return false;\n     \
    \                       }\n                        }\n                    }\n\
    \                }\n            }\n        }\n    }\n    return true;\n}\nint\
    \ main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n\
    \    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\"))\
    \ == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp53yk62by: /tmp/tmp53yk62by.cpp:38: int main(): Assertion `candidate((\"\
    aabb\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    bool flag = true;\n    int n =\
    \ s.size();\n    if (n < 3) {\n        flag = false;\n    }\n    for (int i =\
    \ 0; i < n; i++) {\n        if (s.at(i) == s.at(i + 1) && s.at(i) == s.at(i +\
    \ 2)) {\n            flag = false;\n        }\n    }\n    return flag;\n}\nint\
    \ main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n\
    \    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\"))\
    \ == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "terminate called after throwing an instance of 'std::out_of_range'\n  what():\
    \  basic_string::at: __n (which is 1) >= this->size() (which is 1)\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.length();\n    int count\
    \ = 0;\n    for (int i = 0; i < n; i++) {\n        if (s[i] == s[i + 1]) {\n \
    \           count++;\n        }\n    }\n    if (count < 3) {\n        return false;\n\
    \    }\n    for (int i = 0; i < n; i++) {\n        if (s[i] == s[i + 2]) {\n \
    \           count++;\n        }\n    }\n    if (count < 3) {\n        return false;\n\
    \    }\n    for (int i = 0; i < n; i++) {\n        if (s[i] == s[i + 3]) {\n \
    \           count++;\n        }\n    }\n    if (count < 3) {\n        return false;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_happy;\n  \
    \  assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n\
    \    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\"\
    )) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmplfyrhp5j: /tmp/tmplfyrhp5j.cpp:46: int main(): Assertion `candidate((\"\
    abcd\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    if (n <\
    \ 3) return false;\n    for (int i = 0; i < n; i++) {\n        for (int j = i\
    \ + 1; j < n; j++) {\n            if (s[i] == s[j]) {\n                return\
    \ false;\n            }\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n\
    \    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\"))\
    \ == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp90479r6v: /tmp/tmp90479r6v.cpp:33: int main(): Assertion `candidate((\"\
    iopaxpoi\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.length();\n    if (n\
    \ < 3) return false;\n    for (int i = 0; i < n; i++) {\n        for (int j =\
    \ i + 1; j < n; j++) {\n            for (int k = j + 1; k < n; k++) {\n      \
    \          if (s[i] == s[j] && s[i] == s[k] && s[i] != s[k]) return false;\n \
    \           }\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"\
    aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpc04qy146: /tmp/tmpc04qy146.cpp:30: int main(): Assertion `candidate((\"\
    aabb\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.length();\n    if (n\
    \ < 3) return false;\n    for (int i = 0; i < n; i++) {\n        if (s[i] == s[i\
    \ + 1] && s[i] == s[i + 2]) return false;\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n\
    \    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\"))\
    \ == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp52xos9dc: /tmp/tmp52xos9dc.cpp:26: int main(): Assertion `candidate((\"\
    aabb\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    bool flag = true;\n    int n =\
    \ s.size();\n    if (n < 3) {\n        flag = false;\n    }\n    for (int i =\
    \ 0; i < n; i++) {\n        for (int j = i + 1; j < n; j++) {\n            if\
    \ (s[i] == s[j]) {\n                flag = false;\n                break;\n  \
    \          }\n        }\n    }\n    return flag;\n}\nint main() {\n    auto candidate\
    \ = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"\
    aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp2l4bu64x: /tmp/tmp2l4bu64x.cpp:37: int main(): Assertion `candidate((\"\
    iopaxpoi\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    bool flag\
    \ = false;\n    for (int i = 0; i < n; i++) {\n        if (s[i] == s[i + 1] &&\
    \ s[i] == s[i + 2] && s[i] == s[i + 3]) {\n            flag = true;\n        }\n\
    \    }\n    return flag;\n}\nint main() {\n    auto candidate = is_happy;\n  \
    \  assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n\
    \    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\"\
    )) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpk3b5cu1n: /tmp/tmpk3b5cu1n.cpp:27: int main(): Assertion `candidate((\"\
    abcd\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.length();\n    int count\
    \ = 0;\n    for (int i = 0; i < n; i++) {\n        if (s[i] == s[i + 1]) {\n \
    \           count++;\n        }\n    }\n    if (count < 3) {\n        return false;\n\
    \    }\n    for (int i = 0; i < n - 3; i++) {\n        if (s[i] == s[i + 1] &&\
    \ s[i] == s[i + 2] && s[i] == s[i + 3]) {\n            count++;\n        }\n \
    \   }\n    if (count != 3) {\n        return false;\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\"))\
    \ == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpalr67gi5: /tmp/tmpalr67gi5.cpp:38: int main(): Assertion `candidate((\"\
    abcd\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    int count\
    \ = 0;\n    for (int i = 0; i < n; i++) {\n        if (s[i] == s[i + 1]) {\n \
    \           count++;\n        }\n    }\n    return count >= 3 && count % 3 ==\
    \ 0;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp4kpyzyh1: /tmp/tmp4kpyzyh1.cpp:27: int main(): Assertion `candidate((\"\
    abcd\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.length();\n    if(n<3)\n\
    \        return false;\n    for(int i=0;i<n;i++)\n    {\n        for(int j=i+1;j<n;j++)\n\
    \        {\n            if(s[i]==s[j])\n            {\n                return\
    \ false;\n            }\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n\
    \    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\"))\
    \ == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp5zhpx2cb: /tmp/tmp5zhpx2cb.cpp:37: int main(): Assertion `candidate((\"\
    iopaxpoi\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    if (n <\
    \ 3) return true;\n    unordered_set<char> s;\n    for (int i = 0; i < n; i++)\
    \ {\n        s.insert(s[i]);\n    }\n    for (int i = 0; i < n; i++) {\n     \
    \   if (s.size() != 3) return false;\n        if (s.count(s[i]) == 0) return false;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_happy;\n  \
    \  assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n\
    \    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\"\
    )) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8pwln5ix.cpp: In function \u2018bool is_happy(std::string)\u2019\
    :\n/tmp/tmp8pwln5ix.cpp:16:5: error: \u2018unordered_set\u2019 was not declared\
    \ in this scope; did you mean \u2018std::unordered_set\u2019?\n   16 |     unordered_set<char>\
    \ s;\n      |     ^~~~~~~~~~~~~\n      |     std::unordered_set\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/unordered_set:47,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:118,\n\
    \                 from /tmp/tmp8pwln5ix.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/unordered_set.h:97:11:\
    \ note: \u2018std::unordered_set\u2019 declared here\n   97 |     class unordered_set\n\
    \      |           ^~~~~~~~~~~~~\n/tmp/tmp8pwln5ix.cpp:16:19: error: expected\
    \ primary-expression before \u2018char\u2019\n   16 |     unordered_set<char>\
    \ s;\n      |                   ^~~~\n/tmp/tmp8pwln5ix.cpp:18:22: error: no matching\
    \ function for call to \u2018std::__cxx11::basic_string<char>::insert(__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type&)\u2019\n   18 |         s.insert(s[i]);\n      |        \
    \              ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp8pwln5ix.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:1534:7:\
    \ note: cand"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    if (n <\
    \ 3) return false;\n    for (int i = 0; i < n; i++) {\n        if (s[i] == s[i\
    \ + 1] && s[i] == s[i + 2]) return false;\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n\
    \    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\"))\
    \ == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpzz5kzo8v: /tmp/tmpzz5kzo8v.cpp:26: int main(): Assertion `candidate((\"\
    aabb\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    bool flag\
    \ = false;\n    for (int i = 0; i < n; i++) {\n        if (s[i] == s[i + 1] &&\
    \ s[i] == s[i + 2]) {\n            flag = true;\n        }\n    }\n    return\
    \ flag;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpy8m56ziq: /tmp/tmpy8m56ziq.cpp:27: int main(): Assertion `candidate((\"\
    abcd\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    if (n <\
    \ 3) return false;\n    for (int i = 0; i < n; i++) {\n        if (s[i] == s[i\
    \ + 1] && s[i] == s[i + 2]) return false;\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n\
    \    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\"))\
    \ == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpz0k_iuzz: /tmp/tmpz0k_iuzz.cpp:26: int main(): Assertion `candidate((\"\
    aabb\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    bool flag = false;\n    int n\
    \ = s.size();\n    if (n >= 3) {\n        for (int i = 0; i < n - 3; i++) {\n\
    \            if (s[i] == s[i + 1] && s[i] == s[i + 2] && s[i] == s[i + 3]) {\n\
    \                flag = true;\n            }\n        }\n    }\n    return flag;\n\
    }\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\"))\
    \ == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp7tksmc1y: /tmp/tmp7tksmc1y.cpp:29: int main(): Assertion `candidate((\"\
    abcd\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    int count\
    \ = 0;\n    for (int i = 0; i < n; i++) {\n        if (s[i] == s[i + 1]) {\n \
    \           count++;\n        }\n    }\n    if (count < 3) {\n        return false;\n\
    \    }\n    for (int i = 0; i < n - 3; i++) {\n        if (s[i] == s[i + 3] &&\
    \ s[i + 1] == s[i + 2]) {\n            return false;\n        }\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpp6y6gv6y: /tmp/tmpp6y6gv6y.cpp:35: int main(): Assertion `candidate((\"\
    abcd\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    bool flag = false;\n    int n\
    \ = s.size();\n    if (n >= 3) {\n        for (int i = 0; i < n; i++) {\n    \
    \        int j = i + 1;\n            int k = i + 2;\n            if (s[j] == s[k]\
    \ && s[j] == s[j + 1]) {\n                flag = true;\n            }\n      \
    \  }\n    }\n    return flag;\n}\nint main() {\n    auto candidate = is_happy;\n\
    \    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) ==\
    \ (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpj8qttcm0: /tmp/tmpj8qttcm0.cpp:32: int main(): Assertion `candidate((\"\
    aabb\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    // Your code here\n    \n    for(int\
    \ i=0;i<s.size();i++){\n        if(s[i]==s[i+1] && s[i]==s[i+2]){\n          \
    \  return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"\
    aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmphyhy9q2l: /tmp/tmphyhy9q2l.cpp:25: int main(): Assertion `candidate((\"\
    a\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    bool flag = false;\n    int n\
    \ = s.size();\n    if (n >= 3) {\n        for (int i = 0; i < n; i++) {\n    \
    \        for (int j = i + 1; j < n; j++) {\n                if (s[i] == s[j])\
    \ {\n                    flag = false;\n                    break;\n         \
    \       }\n            }\n        }\n    }\n    return flag;\n}\nint main() {\n\
    \    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n\
    \    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\"))\
    \ == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp15uzc0sf: /tmp/tmp15uzc0sf.cpp:32: int main(): Assertion `candidate((\"\
    abcd\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    bool flag = false;\n    int n\
    \ = s.size();\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1;\
    \ j < n; j++) {\n            if (s[i] == s[j]) {\n                flag = true;\n\
    \                break;\n            }\n        }\n    }\n    return flag;\n}\n\
    int main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) ==\
    \ (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpqufojui0: /tmp/tmpqufojui0.cpp:29: int main(): Assertion `candidate((\"\
    aa\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    if (n <\
    \ 3) return true;\n    for (int i = 0; i < n - 3; i++) {\n        if (s[i] ==\
    \ s[i + 1] && s[i] == s[i + 2] && s[i] == s[i + 3]) return true;\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpmr98f4tj: /tmp/tmpmr98f4tj.cpp:23: int main(): Assertion `candidate((\"\
    a\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    if (n <\
    \ 3) return false;\n    for (int i = 0; i < n - 3; i++) {\n        if (s.at(i)\
    \ == s.at(i + 1) && s.at(i) == s.at(i + 2)) {\n            return false;\n   \
    \     }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_happy;\n\
    \    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) ==\
    \ (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpfdsvwtls: /tmp/tmpfdsvwtls.cpp:28: int main(): Assertion `candidate((\"\
    aabb\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.length();\n    if (n\
    \ < 3) return false;\n    for (int i = 0; i < n; i++) {\n        for (int j =\
    \ i + 1; j < n; j++) {\n            if (s[i] == s[j]) continue;\n            if\
    \ (s[i] == s[j] && i != j) continue;\n            return false;\n        }\n \
    \   }\n    return true;\n}\nint main() {\n    auto candidate = is_happy;\n   \
    \ assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n\
    \    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\"\
    )) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpasvaegnw: /tmp/tmpasvaegnw.cpp:29: int main(): Assertion `candidate((\"\
    abcd\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    \n    for(int i=0;i<s.length();i++){\n\
    \        if(s[i]==s[i+1] && s[i]==s[i+2]){\n            continue;\n        }\n\
    \        else{\n            return false;\n        }\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\"))\
    \ == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp555nudgs: /tmp/tmp555nudgs.cpp:29: int main(): Assertion `candidate((\"\
    abcd\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    bool flag = false;\n    int n\
    \ = s.size();\n    if (n >= 3 && n == s.size() % 3) {\n        for (int i = 0;\
    \ i < n; i++) {\n            int j = i + 1;\n            int k = i + 2;\n    \
    \        if (s[j] == s[k]) {\n                flag = true;\n                break;\n\
    \            }\n        }\n    }\n    return flag;\n}\nint main() {\n    auto\
    \ candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"\
    aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp01lad2s9: /tmp/tmp01lad2s9.cpp:32: int main(): Assertion `candidate((\"\
    abcd\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    bool flag = false;\n    int n\
    \ = s.size();\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1;\
    \ j < n; j++) {\n            for (int k = j + 1; k < n; k++) {\n             \
    \   if (s[i] == s[j] && s[i] == s[k]) {\n                    flag = true;\n  \
    \                  break;\n                }\n            }\n        }\n    }\n\
    \    return flag;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmprxwf7kdc: /tmp/tmprxwf7kdc.cpp:32: int main(): Assertion `candidate((\"\
    abcd\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    if (n <\
    \ 3)\n        return false;\n    int count = 0;\n    for (int i = 0; i < n; i++)\
    \ {\n        if (s[i] == s[i + 1] && s[i] == s[i + 2])\n            count++;\n\
    \        else\n            count = 0;\n    }\n    return count >= 3;\n}\nint main()\
    \ {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n\
    \    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\"))\
    \ == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp0tk6y5l7: /tmp/tmp0tk6y5l7.cpp:30: int main(): Assertion `candidate((\"\
    abcd\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.length();\n    int count\
    \ = 0;\n    for (int i = 0; i < n; i++) {\n        if (s[i] == s[i + 1]) {\n \
    \           count++;\n        }\n    }\n    if (count >= 3) {\n        for (int\
    \ i = 0; i < n - 3; i++) {\n            if (s[i] == s[i + 3] && s[i + 1] == s[i\
    \ + 2] && s[i] == s[i + 2]) {\n                return false;\n            }\n\
    \        }\n        return true;\n    }\n    return false;\n}\nint main() {\n\
    \    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n\
    \    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\"))\
    \ == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpqr70iyje: /tmp/tmpqr70iyje.cpp:35: int main(): Assertion `candidate((\"\
    abcd\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    if (n <\
    \ 3) return false;\n    for (int i = 0; i < n; i++) {\n        for (int j = i\
    \ + 1; j < n; j++) {\n            for (int k = j + 1; k < n; k++) {\n        \
    \        if (s[i] != s[j] || s[i] != s[k] || s[i] != s[k]) return false;\n   \
    \         }\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"\
    aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpj5cmmm9a: /tmp/tmpj5cmmm9a.cpp:29: int main(): Assertion `candidate((\"\
    abcd\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    for(int i=0;i<s.size();i++){\n\
    \        for(int j=i+1;j<s.size();j++){\n            for(int k=j+1;k<s.size();k++){\n\
    \                if(s[i]==s[j] && s[i]==s[k]){\n                    return false;\n\
    \                }\n            }\n        }\n    }\n    return true;\n}\nint\
    \ main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n\
    \    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\"))\
    \ == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp9ympwp90: /tmp/tmp9ympwp90.cpp:27: int main(): Assertion `candidate((\"\
    a\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    if (n <\
    \ 3) return true;\n    for (int i = 0; i < n - 3; i++) {\n        if (s[i] ==\
    \ s[i + 1] && s[i] == s[i + 2] && s[i] == s[i + 3]) return true;\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp2zubuvbd: /tmp/tmp2zubuvbd.cpp:23: int main(): Assertion `candidate((\"\
    a\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    if (n <\
    \ 3) {\n        return false;\n    }\n    for (int i = 0; i < n; i++) {\n    \
    \    for (int j = i + 1; j < n; j++) {\n            if (s[i] == s[j]) {\n    \
    \            return false;\n            }\n        }\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\"))\
    \ == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmprgahxo4c: /tmp/tmprgahxo4c.cpp:35: int main(): Assertion `candidate((\"\
    iopaxpoi\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    for(int\
    \ i = 0; i < n; i++) {\n        for(int j = i + 1; j < n; j++) {\n           \
    \ for(int k = j + 1; k < n; k++) {\n                if(s[i] == s[j] && s[i] ==\
    \ s[k] && s[i] != s[k]) {\n                    return false;\n               \
    \ }\n            }\n        }\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"\
    aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpxjosqrqb: /tmp/tmpxjosqrqb.cpp:28: int main(): Assertion `candidate((\"\
    a\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.length();\n    int count\
    \ = 0;\n    for (int i = 0; i < n; i++) {\n        if (s[i] == s[i + 1]) {\n \
    \           count++;\n        }\n    }\n    if (count < 3) {\n        return false;\n\
    \    }\n    for (int i = 0; i < n; i++) {\n        if (s[i] == s[i + 2]) {\n \
    \           count++;\n        }\n    }\n    if (count < 3) {\n        return false;\n\
    \    }\n    for (int i = 0; i < n; i++) {\n        if (s[i] == s[i + 3]) {\n \
    \           count++;\n        }\n    }\n    if (count < 3) {\n        return false;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_happy;\n  \
    \  assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n\
    \    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\"\
    )) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpos22sgst: /tmp/tmpos22sgst.cpp:46: int main(): Assertion `candidate((\"\
    abcd\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    int count\
    \ = 0;\n    for (int i = 0; i < n; i++) {\n        if (s[i] == s[i + 1] && s[i]\
    \ == s[i + 2]) {\n            count++;\n        }\n    }\n    return count >=\
    \ 3 && count == n;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpjbx2dhop: /tmp/tmpjbx2dhop.cpp:27: int main(): Assertion `candidate((\"\
    abcd\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    if (n <\
    \ 3) return false;\n    for (int i = 0; i < n; i++) {\n        for (int j = i\
    \ + 1; j < n; j++) {\n            if (s[i] == s[j]) {\n                return\
    \ false;\n            }\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n\
    \    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\"))\
    \ == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpctd3veqk: /tmp/tmpctd3veqk.cpp:33: int main(): Assertion `candidate((\"\
    iopaxpoi\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.length();\n    int count\
    \ = 0;\n    for (int i = 0; i < n; i++) {\n        if (s[i] == s[i + 1]) {\n \
    \           count++;\n        }\n    }\n    return count >= 3 && count == n;\n\
    }\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\"))\
    \ == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpeshsho6l: /tmp/tmpeshsho6l.cpp:27: int main(): Assertion `candidate((\"\
    abcd\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    // Your code here\n    bool flag\
    \ = true;\n    for(int i=0;i<s.size();i++){\n        for(int j=i+1;j<s.size();j++){\n\
    \            for(int k=j+1;k<s.size();k++){\n                if(s[i]==s[j] &&\
    \ s[i]==s[k]){\n                    flag = false;\n                    break;\n\
    \                }\n            }\n        }\n    }\n    return flag;\n}\nint\
    \ main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n\
    \    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\"))\
    \ == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpqok2bgp_: /tmp/tmpqok2bgp_.cpp:30: int main(): Assertion `candidate((\"\
    a\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    if (n <\
    \ 3) return true;\n    unordered_set<char> seen;\n    for (int i = 0; i < n; i++)\
    \ {\n        char c = s[i];\n        if (seen.find(c) != seen.end()) {\n     \
    \       return false;\n        }\n        seen.insert(c);\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\"))\
    \ == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpsq76nn6y.cpp: In function \u2018bool is_happy(std::string)\u2019\
    :\n/tmp/tmpsq76nn6y.cpp:16:5: error: \u2018unordered_set\u2019 was not declared\
    \ in this scope; did you mean \u2018std::unordered_set\u2019?\n   16 |     unordered_set<char>\
    \ seen;\n      |     ^~~~~~~~~~~~~\n      |     std::unordered_set\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/unordered_set:47,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:118,\n\
    \                 from /tmp/tmpsq76nn6y.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/unordered_set.h:97:11:\
    \ note: \u2018std::unordered_set\u2019 declared here\n   97 |     class unordered_set\n\
    \      |           ^~~~~~~~~~~~~\n/tmp/tmpsq76nn6y.cpp:16:19: error: expected\
    \ primary-expression before \u2018char\u2019\n   16 |     unordered_set<char>\
    \ seen;\n      |                   ^~~~\n/tmp/tmpsq76nn6y.cpp:19:13: error: \u2018\
    seen\u2019 was not declared in this scope\n   19 |         if (seen.find(c) !=\
    \ seen.end()) {\n      |             ^~~~\n/tmp/tmpsq76nn6y.cpp:22:9: error: \u2018\
    seen\u2019 was not declared in this scope\n   22 |         seen.insert(c);\n \
    \     |         ^~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.length();\n    if (n\
    \ < 3) return true;\n    for (int i = 0; i < n; i++) {\n        for (int j = i\
    \ + 1; j < n; j++) {\n            for (int k = j + 1; k < n; k++) {\n        \
    \        if (s[i] == s[j] && s[i] == s[k] && s[i] != s[k]) {\n               \
    \     return false;\n                }\n            }\n        }\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp9iafnujs: /tmp/tmp9iafnujs.cpp:29: int main(): Assertion `candidate((\"\
    a\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    if (n <\
    \ 3) return false;\n    for (int i = 0; i < n; i++) {\n        if (s[i] == s[i\
    \ + 1] && s[i] == s[i + 2]) return false;\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n\
    \    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\"))\
    \ == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpbx89tb9p: /tmp/tmpbx89tb9p.cpp:26: int main(): Assertion `candidate((\"\
    aabb\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    bool flag = true;\n    int n =\
    \ s.size();\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j\
    \ < n; j++) {\n            for (int k = j + 1; k < n; k++) {\n               \
    \ if (s[i] == s[j] && s[i] == s[k]) {\n                    flag = false;\n   \
    \                 break;\n                }\n            }\n        }\n    }\n\
    \    return flag;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpa98hb73w: /tmp/tmpa98hb73w.cpp:30: int main(): Assertion `candidate((\"\
    a\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    int count\
    \ = 0;\n    for (int i = 0; i < n; i++) {\n        if (s[i] == s[i + 1] && s[i]\
    \ == s[i + 2]) {\n            count++;\n        }\n    }\n    return count >=\
    \ 3 && n == (count - 3);\n}\nint main() {\n    auto candidate = is_happy;\n  \
    \  assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n\
    \    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\"\
    )) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpci9ezz_h: /tmp/tmpci9ezz_h.cpp:27: int main(): Assertion `candidate((\"\
    abcd\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    if (n <\
    \ 3) return false;\n    int count = 0;\n    for (int i = 0; i < n; i++) {\n  \
    \      if (s[i] == s[i + 1] && s[i] == s[i + 2]) count++;\n    }\n    return count\
    \ >= 3;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp50uvwp2t: /tmp/tmp50uvwp2t.cpp:26: int main(): Assertion `candidate((\"\
    abcd\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    bool flag = false;\n    for(int\
    \ i = 0; i < s.length()-3; i++){\n        if(s[i]==s[i+1] && s[i+1]==s[i+2] &&\
    \ s[i+2]==s[i+3]){\n            flag = true;\n        }\n    }\n    return flag;\n\
    }\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\"))\
    \ == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    if (n <\
    \ 3) return false;\n    for (int i = 0; i < n; i++) {\n        for (int j = i\
    \ + 1; j < n; j++) {\n            for (int k = j + 1; k < n; k++) {\n        \
    \        if (s[i] == s[j] && s[i] == s[k] && s[i] != s[k]) return false;\n   \
    \         }\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"\
    aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp00tlc2yt: /tmp/tmp00tlc2yt.cpp:30: int main(): Assertion `candidate((\"\
    aabb\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    // Your code here\n    int n =\
    \ s.size();\n    bool flag = true;\n    for (int i = 0; i < n; i++) {\n      \
    \  for (int j = i + 1; j < n; j++) {\n            if (s[i] == s[j]) {\n      \
    \          flag = false;\n                break;\n            }\n        }\n \
    \   }\n    return flag;\n}\nint main() {\n    auto candidate = is_happy;\n   \
    \ assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n\
    \    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\"\
    )) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpwn0j8wzx: /tmp/tmpwn0j8wzx.cpp:29: int main(): Assertion `candidate((\"\
    a\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    \n    for(int i = 0; i < s.length();\
    \ i++) {\n        for(int j = i + 1; j < s.length(); j++) {\n            for(int\
    \ k = j + 1; k < s.length(); k++) {\n                if(s[i] == s[j] && s[i] ==\
    \ s[k]) {\n                    return false;\n                }\n            }\n\
    \        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_happy;\n\
    \    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) ==\
    \ (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpftakc_iq: /tmp/tmpftakc_iq.cpp:28: int main(): Assertion `candidate((\"\
    a\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    if (n <\
    \ 3) return false;\n    for (int i = 0; i < n; i++) {\n        if (s.at(i) ==\
    \ s.at(i + 1)) return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"\
    aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: "terminate called after throwing an instance of 'std::out_of_range'\n  what():\
    \  basic_string::at: __n (which is 4) >= this->size() (which is 4)\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    bool flag = false;\n    int len\
    \ = s.length();\n    if (len < 3)\n        return false;\n    for (int i = 0;\
    \ i < len - 1; i++) {\n        if (s[i] == s[i + 1]) {\n            flag = true;\n\
    \        }\n    }\n    return flag;\n}\nint main() {\n    auto candidate = is_happy;\n\
    \    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) ==\
    \ (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpc8xsa654: /tmp/tmpc8xsa654.cpp:29: int main(): Assertion `candidate((\"\
    abcd\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    if (n <\
    \ 3) return false;\n    for (int i = 0; i < n; i++) {\n        for (int j = i\
    \ + 1; j < n; j++) {\n            if (s[i] == s[j]) continue;\n            if\
    \ (s[i] == s[j] && i != j) return false;\n        }\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\"))\
    \ == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmputnyoedt: /tmp/tmputnyoedt.cpp:29: int main(): Assertion `candidate((\"\
    aabb\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.length();\n    if (n\
    \ < 3) return false;\n    for (int i = 0; i < n; i++) {\n        if (s.at(i) ==\
    \ s.at(i + 1)) continue;\n        if (s.at(i) == s.at(i + 2)) continue;\n    \
    \    if (s.at(i) == s.at(i + 3)) continue;\n        return false;\n    }\n   \
    \ return true;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpom3o4v5b: /tmp/tmpom3o4v5b.cpp:28: int main(): Assertion `candidate((\"\
    abcd\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    if (n <\
    \ 3) return true;\n    int count = 0;\n    for (int i = 0; i < n; i++) {\n   \
    \     if (s[i] == s[i + 1] && s[i] == s[i + 2]) count++;\n    }\n    return count\
    \ >= 3;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp3t8bkh6p: /tmp/tmp3t8bkh6p.cpp:24: int main(): Assertion `candidate((\"\
    a\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.length();\n    if(n<3)\n\
    \        return false;\n    for(int i=0;i<n;i+=3)\n    {\n        if(s.at(i)==s.at(i+1)&&s.at(i+1)==s.at(i+2))\n\
    \            return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"\
    aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: "terminate called after throwing an instance of 'std::out_of_range'\n  what():\
    \  basic_string::at: __n (which is 4) >= this->size() (which is 4)\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    if (n <\
    \ 3) {\n        return false;\n    }\n    for (int i = 0; i < n; i++) {\n    \
    \    for (int j = i + 1; j < n; j++) {\n            if (s[i] == s[j]) {\n    \
    \            return false;\n            }\n        }\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\"))\
    \ == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpys6wim0s: /tmp/tmpys6wim0s.cpp:35: int main(): Assertion `candidate((\"\
    iopaxpoi\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    bool flag = true;\n    for(int\
    \ i = 0; i < s.length(); i++) {\n        if(s[i] != s[i+1]) {\n            flag\
    \ = false;\n            break;\n        }\n    }\n    if(flag) {\n        for(int\
    \ i = 0; i < s.length(); i++) {\n            if(s[i] != s[i+2]) {\n          \
    \      flag = false;\n                break;\n            }\n        }\n    }\n\
    \    if(flag) {\n        for(int i = 0; i < s.length(); i++) {\n            if(s[i]\
    \ != s[i+3]) {\n                flag = false;\n                break;\n      \
    \      }\n        }\n    }\n    return flag;\n}\nint main() {\n    auto candidate\
    \ = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"\
    aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp_1aqyjla: /tmp/tmp_1aqyjla.cpp:43: int main(): Assertion `candidate((\"\
    abcd\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.length();\n    if (n\
    \ < 3) {\n        return false;\n    }\n    for (int i = 0; i < n; i++) {\n  \
    \      for (int j = i + 1; j < n; j++) {\n            if (s[i] == s[j]) {\n  \
    \              return false;\n            }\n        }\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\"))\
    \ == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpn37i5trl: /tmp/tmpn37i5trl.cpp:35: int main(): Assertion `candidate((\"\
    iopaxpoi\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    bool flag = true;\n    int n =\
    \ s.size();\n    for (int i = 0; i < n; i++) {\n        if (s.at(i) != s.at(i\
    \ + 1)) {\n            flag = false;\n            break;\n        }\n    }\n \
    \   if (flag) {\n        for (int i = 0; i < n; i++) {\n            if (s.at(i)\
    \ != s.at(i + 2)) {\n                flag = false;\n                break;\n \
    \           }\n        }\n    }\n    return flag;\n}\nint main() {\n    auto candidate\
    \ = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"\
    aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: "terminate called after throwing an instance of 'std::out_of_range'\n  what():\
    \  basic_string::at: __n (which is 1) >= this->size() (which is 1)\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    bool flag = true;\n    for(int\
    \ i = 0; i < s.size(); i++) {\n        if(s[i] == s[i+1] && s[i] == s[i+2]) {\n\
    \            flag = false;\n            break;\n        }\n    }\n    return flag;\n\
    }\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\"))\
    \ == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpp2638fen: /tmp/tmpp2638fen.cpp:25: int main(): Assertion `candidate((\"\
    a\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    bool flag\
    \ = false;\n    for (int i = 0; i < n; i++) {\n        if (s[i] == s[i + 1]) {\n\
    \            flag = true;\n        }\n    }\n    if (flag) {\n        flag = false;\n\
    \        for (int i = 0; i < n; i++) {\n            if (s[i] == s[i + 2]) {\n\
    \                flag = true;\n            }\n        }\n    }\n    if (flag)\
    \ {\n        flag = false;\n        for (int i = 0; i < n; i++) {\n          \
    \  if (s[i] == s[i + 3]) {\n                flag = true;\n            }\n    \
    \    }\n    }\n    if (flag) {\n        flag = false;\n        for (int i = 0;\
    \ i < n; i++) {\n            if (s[i] == s[i + 4]) {\n                flag = true;\n\
    \            }\n        }\n    }\n    if (flag) {\n        flag = false;\n   \
    \     for (int i = 0; i < n; i++) {\n            if (s[i] == s[i + 5]) {\n   \
    \             flag = true;\n            }\n        }\n    }\n    if (flag) {\n\
    \        flag = false;\n        for (int i = 0; i < n; i++) {\n            if\
    \ (s[i] == s[i + 6]) {\n                flag = true;\n            }\n        }\n\
    \    }\n    if (flag) {\n        flag = false;\n        for (int i = 0; i < n;\
    \ i++) {\n            if (s[i] == s[i + 7]) {\n                flag = true;\n\
    \            }\n        }\n    }\n    if (flag) {\n        flag = false;\n   \
    \     for (int i = 0; i < n; i++) {\n            if (s[i] == s[i + 8]) {\n   \
    \             flag = true;\n            }\n        }\n    }\n    if (flag) {\n\
    \        flag = false;\n        for (int i = 0; i < n; i++) {\n            if\
    \ (s[i] == s[i + 9]) {\n                flag = true;\n            }\n        }\n\
    \    }\n    if (flag) {\n        flag = false;\n        for (int i = 0; i < n;\
    \ i++) {\n            if (s[i] == s[i + 10]) {\n                flag = true;\n\
    \            }\n        }\n    }\n    if (flag) {\n        flag = false;\n   \
    \     for (int i = 0; i < n; i++) {\n            if (s[i] == s[i + 11]) {\n  \
    \              flag = true;\n            }\n        }\n    }\n    if (flag) {\n\
    \        flag = false;\n        for (int i = 0; i < n; i++) {\n            if\
    \ (s[i] == s[i + 12]) {\n                flag = true;\n            }\n       \
    \ }\n    }\n    if (flag) {\n        flag = false;\n        for (int i = 0; i\
    \ < n; i++) {\n            if (s[i] == s[i + 13]) {\n                flag = true;\n\
    \            }\n        }\n    }\n    if (flag) {\n        flag = false;\n   \
    \     for (int i = 0; i < n; i++) {\n            if (s[i] == s[i + 14]) {\n  \
    \              flag = true;\n            }\n        }\n    }\n    if (flag) {\n\
    \        flag = false;\n        for (int i = 0; i < n; i++) {\n            if\
    \ (s[i] == s[i + 15]) {\n                flag = true;\n            }\n       \
    \ }\n    }\n    if (flag) {\n        flag = false;\n        for (int i = 0; i\
    \ < n; i++) {\n            if (s[i] == s[i + 16]) {\n                flag = true;\n\
    \            }\n        }\n    }\n    if (flag\n}\nint main() {\n    auto candidate\
    \ = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"\
    aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1zg6x6ks.cpp: In function \u2018bool is_happy(std::string)\u2019\
    :\n/tmp/tmp1zg6x6ks.cpp:141:13: error: expected \u2018)\u2019 before \u2018}\u2019\
    \ token\n  141 |     if (flag\n      |        ~    ^\n      |             )\n\
    \  142 | }\n      | ~            \n/tmp/tmp1zg6x6ks.cpp:142:1: error: expected\
    \ primary-expression before \u2018}\u2019 token\n  142 | }\n      | ^\n/tmp/tmp1zg6x6ks.cpp:142:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    bool flag = true;\n    int n =\
    \ s.size();\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j\
    \ < n; j++) {\n            if (s[i] == s[j]) {\n                flag = false;\n\
    \                break;\n            }\n        }\n    }\n    return flag;\n}\n\
    int main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) ==\
    \ (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpa0c3x7_k: /tmp/tmpa0c3x7_k.cpp:28: int main(): Assertion `candidate((\"\
    a\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.length();\n    int count\
    \ = 0;\n    for (int i = 0; i < n; i++) {\n        if (s[i] == s[i + 1]) {\n \
    \           count++;\n        }\n    }\n    return count >= 3 && count == n;\n\
    }\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\"))\
    \ == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp1a8sx424: /tmp/tmp1a8sx424.cpp:27: int main(): Assertion `candidate((\"\
    abcd\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    if (n <\
    \ 3) {\n        return false;\n    }\n    for (int i = 0; i < n - 3; i++) {\n\
    \        if (s[i] == s[i + 1] && s[i] == s[i + 2] && s[i] == s[i + 3]) {\n   \
    \         return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n\
    \    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\"))\
    \ == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpdsgcusik: /tmp/tmpdsgcusik.cpp:30: int main(): Assertion `candidate((\"\
    aabb\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.length();\n    if (n\
    \ < 3) {\n        return false;\n    }\n    unordered_set<char> seen;\n    for\
    \ (int i = 0; i < n; i++) {\n        char ch = s[i];\n        if (seen.find(ch)\
    \ != seen.end()) {\n            return false;\n        }\n        seen.insert(ch);\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_happy;\n  \
    \  assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n\
    \    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\"\
    )) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp614fcub_.cpp: In function \u2018bool is_happy(std::string)\u2019\
    :\n/tmp/tmp614fcub_.cpp:18:5: error: \u2018unordered_set\u2019 was not declared\
    \ in this scope; did you mean \u2018std::unordered_set\u2019?\n   18 |     unordered_set<char>\
    \ seen;\n      |     ^~~~~~~~~~~~~\n      |     std::unordered_set\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/unordered_set:47,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:118,\n\
    \                 from /tmp/tmp614fcub_.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/unordered_set.h:97:11:\
    \ note: \u2018std::unordered_set\u2019 declared here\n   97 |     class unordered_set\n\
    \      |           ^~~~~~~~~~~~~\n/tmp/tmp614fcub_.cpp:18:19: error: expected\
    \ primary-expression before \u2018char\u2019\n   18 |     unordered_set<char>\
    \ seen;\n      |                   ^~~~\n/tmp/tmp614fcub_.cpp:21:13: error: \u2018\
    seen\u2019 was not declared in this scope\n   21 |         if (seen.find(ch) !=\
    \ seen.end()) {\n      |             ^~~~\n/tmp/tmp614fcub_.cpp:24:9: error: \u2018\
    seen\u2019 was not declared in this scope\n   24 |         seen.insert(ch);\n\
    \      |         ^~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    if (n <\
    \ 3) return false;\n    for (int i = 0; i < n; i++) {\n        if (s[i] == s[i\
    \ + 1] && s[i] == s[i + 2]) return false;\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n\
    \    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\"))\
    \ == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpi6nfeu1o: /tmp/tmpi6nfeu1o.cpp:26: int main(): Assertion `candidate((\"\
    aabb\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    bool flag = false;\n    int n\
    \ = s.size();\n    if (n < 3) {\n        flag = false;\n    }\n    else {\n  \
    \      flag = true;\n        for (int i = 0; i < n - 3; i++) {\n            if\
    \ (s.at(i) == s.at(i + 1) && s.at(i) == s.at(i + 2)) {\n                flag =\
    \ false;\n                break;\n            }\n        }\n    }\n    return\
    \ flag;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpvb3umdpp: /tmp/tmpvb3umdpp.cpp:35: int main(): Assertion `candidate((\"\
    aabb\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    // Your code here\n    bool flag\
    \ = false;\n    int count = 0;\n    for(int i = 0; i < s.length(); i++) {\n  \
    \      if(s[i] == s[i + 1]) {\n            count++;\n        }\n        else {\n\
    \            flag = true;\n            break;\n        }\n    }\n    if(count\
    \ >= 3 && flag == true) {\n        return true;\n    }\n    return false;\n}\n\
    int main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) ==\
    \ (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp1i693i94: /tmp/tmp1i693i94.cpp:35: int main(): Assertion `candidate((\"\
    abcd\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.length();\n    if (n\
    \ < 3) return false;\n    for (int i = 0; i < n; i++) {\n        if (s.at(i) ==\
    \ s.at(i + 1)) return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"\
    aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: "terminate called after throwing an instance of 'std::out_of_range'\n  what():\
    \  basic_string::at: __n (which is 4) >= this->size() (which is 4)\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    bool flag = true;\n    int n =\
    \ s.size();\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j\
    \ < n; j++) {\n            for (int k = j + 1; k < n; k++) {\n               \
    \ if (s[i] == s[j] && s[i] == s[k]) {\n                    flag = false;\n   \
    \                 break;\n                }\n            }\n        }\n    }\n\
    \    return flag;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpvwuz26k7: /tmp/tmpvwuz26k7.cpp:30: int main(): Assertion `candidate((\"\
    a\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    if (n <\
    \ 3) return false;\n    for (int i = 0; i < n; i++) {\n        if (s.at(i) !=\
    \ s.at(i + 1)) return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"\
    aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpe70bhdi8: /tmp/tmpe70bhdi8.cpp:25: int main(): Assertion `candidate((\"\
    abcd\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    if (n <\
    \ 3) return false;\n    for (int i = 0; i < n; i++) {\n        if (s[i] == s[i\
    \ + 1] && s[i] == s[i + 2]) return false;\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n\
    \    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\"))\
    \ == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp9ppk9hhq: /tmp/tmp9ppk9hhq.cpp:26: int main(): Assertion `candidate((\"\
    aabb\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    int count\
    \ = 0;\n    for (int i = 0; i < n; i++) {\n        if (s[i] == s[i + 1]) {\n \
    \           count++;\n        }\n    }\n    if (count >= 3) {\n        for (int\
    \ i = 0; i < n; i++) {\n            if (s[i] == s[i + 2]) {\n                count++;\n\
    \            }\n        }\n    }\n    return count >= 3;\n}\nint main() {\n  \
    \  auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n  \
    \  assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) ==\
    \ (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp7vuj07mb: /tmp/tmp7vuj07mb.cpp:34: int main(): Assertion `candidate((\"\
    abcd\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.length();\n    if (n\
    \ < 3) return true;\n    for (int i = 0; i < n - 3; i++) {\n        if (s[i] ==\
    \ s[i + 1] && s[i] == s[i + 2] && s[i] == s[i + 3]) return true;\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpqxltddb6: /tmp/tmpqxltddb6.cpp:23: int main(): Assertion `candidate((\"\
    a\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    for(int\
    \ i=0;i<n;i++){\n        for(int j=i+1;j<n;j++){\n            for(int k=j+1;k<n;k++){\n\
    \                if(s[i]==s[j] && s[i]==s[k]){\n                    return false;\n\
    \                }\n            }\n        }\n    }\n    return true;\n}\nint\
    \ main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n\
    \    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\"))\
    \ == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp05exdmqz: /tmp/tmp05exdmqz.cpp:28: int main(): Assertion `candidate((\"\
    a\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    bool flag = true;\n    for (int\
    \ i = 0; i < s.length(); i++) {\n        if (s.at(i) != s.at(i - 1) && s.at(i)\
    \ != s.at(i - 2) && s.at(i) != s.at(i - 3)) {\n            flag = false;\n   \
    \         break;\n        }\n    }\n    return flag;\n}\nint main() {\n    auto\
    \ candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"\
    aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: "terminate called after throwing an instance of 'std::out_of_range'\n  what():\
    \  basic_string::at: __n (which is 18446744073709551615) >= this->size() (which\
    \ is 1)\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    if (n <\
    \ 3) return false;\n    for (int i = 0; i < n; i++) {\n        if (s[i] == s[i\
    \ + 1] && s[i] == s[i + 2]) return false;\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n\
    \    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\"))\
    \ == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp24bl0qmc: /tmp/tmp24bl0qmc.cpp:26: int main(): Assertion `candidate((\"\
    aabb\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    // Your code here\n    for(int\
    \ i=0;i<s.length();i+=3){\n        for(int j=i+1;j<s.length();j+=3){\n       \
    \     for(int k=j+1;k<s.length();k+=3){\n                if(s[i]==s[j] && s[i]==s[k]\
    \ && s[i]==s[k]){\n                    return false;\n                }\n    \
    \        }\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"\
    aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpf7707kk_: /tmp/tmpf7707kk_.cpp:28: int main(): Assertion `candidate((\"\
    a\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    int count\
    \ = 0;\n    for (int i = 0; i < n; i++) {\n        if (s[i] == s[i + 1]) {\n \
    \           count++;\n        }\n    }\n    return count >= 3 && n == (count -\
    \ 3);\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp1as4owge: /tmp/tmp1as4owge.cpp:27: int main(): Assertion `candidate((\"\
    abcd\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    if (n <\
    \ 3) return true;\n    bool flag = true;\n    for (int i = 0; i < n; i++) {\n\
    \        for (int j = i + 1; j < n; j++) {\n            if (s[i] == s[j]) {\n\
    \                flag = false;\n                break;\n            }\n      \
    \  }\n    }\n    return flag;\n}\nint main() {\n    auto candidate = is_happy;\n\
    \    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) ==\
    \ (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp_0j7y8yc: /tmp/tmp_0j7y8yc.cpp:29: int main(): Assertion `candidate((\"\
    a\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    if (n <\
    \ 3) {\n        return false;\n    }\n    unordered_set<char> s;\n    for (int\
    \ i = 0; i < n; i++) {\n        s.insert(s[i]);\n    }\n    for (int i = 0; i\
    \ < n; i++) {\n        if (s.size() != 3) {\n            return false;\n     \
    \   }\n        if (s.find(s[i]) != s.end()) {\n            return false;\n   \
    \     }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_happy;\n\
    \    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) ==\
    \ (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_61ghmrt.cpp: In function \u2018bool is_happy(std::string)\u2019\
    :\n/tmp/tmp_61ghmrt.cpp:18:5: error: \u2018unordered_set\u2019 was not declared\
    \ in this scope; did you mean \u2018std::unordered_set\u2019?\n   18 |     unordered_set<char>\
    \ s;\n      |     ^~~~~~~~~~~~~\n      |     std::unordered_set\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/unordered_set:47,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:118,\n\
    \                 from /tmp/tmp_61ghmrt.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/unordered_set.h:97:11:\
    \ note: \u2018std::unordered_set\u2019 declared here\n   97 |     class unordered_set\n\
    \      |           ^~~~~~~~~~~~~\n/tmp/tmp_61ghmrt.cpp:18:19: error: expected\
    \ primary-expression before \u2018char\u2019\n   18 |     unordered_set<char>\
    \ s;\n      |                   ^~~~\n/tmp/tmp_61ghmrt.cpp:20:22: error: no matching\
    \ function for call to \u2018std::__cxx11::basic_string<char>::insert(__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type&)\u2019\n   20 |         s.insert(s[i]);\n      |        \
    \              ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp_61ghmrt.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:1534:7:\
    \ note: cand"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    bool flag = false;\n    int len\
    \ = s.length();\n    if (len < 3)\n        return false;\n    for (int i = 0;\
    \ i < len - 1; i++) {\n        if (s[i] == s[i + 1]) {\n            flag = true;\n\
    \        }\n    }\n    return flag;\n}\nint main() {\n    auto candidate = is_happy;\n\
    \    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) ==\
    \ (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpwjlkhk2_: /tmp/tmpwjlkhk2_.cpp:29: int main(): Assertion `candidate((\"\
    abcd\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    if (n <\
    \ 3) return true;\n    for (int i = 0; i < n; i++) {\n        for (int j = i +\
    \ 1; j < n; j++) {\n            if (s[i] != s[j]) break;\n        }\n        if\
    \ (j - i != 3) return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"\
    aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpcobiqiux.cpp: In function \u2018bool is_happy(std::string)\u2019\
    :\n/tmp/tmpcobiqiux.cpp:20:13: error: \u2018j\u2019 was not declared in this scope\n\
    \   20 |         if (j - i != 3) return false;\n      |             ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    int count\
    \ = 0;\n    for (int i = 0; i < n; i++) {\n        if (s[i] == s[i + 1]) {\n \
    \           count++;\n        }\n    }\n    return count >= 3 && count == n;\n\
    }\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\"))\
    \ == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp_534wpbu: /tmp/tmp_534wpbu.cpp:27: int main(): Assertion `candidate((\"\
    abcd\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    bool flag = true;\n    int n =\
    \ s.size();\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j\
    \ < n; j++) {\n            if (s[i] == s[j]) {\n                flag = false;\n\
    \            }\n        }\n    }\n    return flag;\n}\nint main() {\n    auto\
    \ candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"\
    aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpziupwm7d: /tmp/tmpziupwm7d.cpp:27: int main(): Assertion `candidate((\"\
    a\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    bool flag = false;\n    int n\
    \ = s.size();\n    if (n >= 3) {\n        for (int i = 0; i < n - 3; i++) {\n\
    \            if (s.at(i) == s.at(i + 1) && s.at(i) == s.at(i + 2)) {\n       \
    \         flag = true;\n            }\n        }\n    }\n    return flag;\n}\n\
    int main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) ==\
    \ (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpy8hgv_2n: /tmp/tmpy8hgv_2n.cpp:29: int main(): Assertion `candidate((\"\
    abcd\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    if (n <\
    \ 3) return true;\n    for (int i = 0; i < n; i++) {\n        for (int j = i +\
    \ 1; j < n; j++) {\n            if (s[i] == s[j]) {\n                for (int\
    \ k = j + 1; k < n; k++) {\n                    if (s[k] == s[i]) {\n        \
    \                return false;\n                    }\n                }\n   \
    \         }\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"\
    aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpnsnv6ct7: /tmp/tmpnsnv6ct7.cpp:31: int main(): Assertion `candidate((\"\
    a\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    bool flag\
    \ = false;\n    for (int i = 0; i < n; i++) {\n        if (s[i] == s[i + 1] &&\
    \ s[i] == s[i + 2] && s[i] == s[i + 3]) {\n            flag = true;\n        }\n\
    \    }\n    return flag;\n}\nint main() {\n    auto candidate = is_happy;\n  \
    \  assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n\
    \    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\"\
    )) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpvbtdvqe0: /tmp/tmpvbtdvqe0.cpp:27: int main(): Assertion `candidate((\"\
    abcd\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    if (n <\
    \ 3) return true;\n    int count = 0;\n    for (int i = 0; i < n; i++) {\n   \
    \     if (s[i] == s[i + 1]) {\n            count++;\n        }\n    }\n    return\
    \ count >= 3 && count == n;\n}\nint main() {\n    auto candidate = is_happy;\n\
    \    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) ==\
    \ (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpslobo1e0: /tmp/tmpslobo1e0.cpp:26: int main(): Assertion `candidate((\"\
    a\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.length();\n    bool\
    \ flag = false;\n    for (int i = 0; i < n; i++) {\n        if (s[i] == s[i +\
    \ 1]) {\n            flag = true;\n        }\n    }\n    if (flag) {\n       \
    \ for (int i = 0; i < n; i++) {\n            if (s[i] == s[i + 2]) {\n       \
    \         flag = true;\n            }\n        }\n    }\n    if (flag) {\n   \
    \     for (int i = 0; i < n; i++) {\n            if (s[i] == s[i + 3]) {\n   \
    \             flag = true;\n            }\n        }\n    }\n    if (flag) {\n\
    \        for (int i = 0; i < n; i++) {\n            if (s[i] == s[i + 4]) {\n\
    \                flag = true;\n            }\n        }\n    }\n    if (flag)\
    \ {\n        for (int i = 0; i < n; i++) {\n            if (s[i] == s[i + 5])\
    \ {\n                flag = true;\n            }\n        }\n    }\n    if (flag)\
    \ {\n        for (int i = 0; i < n; i++) {\n            if (s[i] == s[i + 6])\
    \ {\n                flag = true;\n            }\n        }\n    }\n    if (flag)\
    \ {\n        for (int i = 0; i < n; i++) {\n            if (s[i] == s[i + 7])\
    \ {\n                flag = true;\n            }\n        }\n    }\n    if (flag)\
    \ {\n        for (int i = 0; i < n; i++) {\n            if (s[i] == s[i + 8])\
    \ {\n                flag = true;\n            }\n        }\n    }\n    if (flag)\
    \ {\n        for (int i = 0; i < n; i++) {\n            if (s[i] == s[i + 9])\
    \ {\n                flag = true;\n            }\n        }\n    }\n    if (flag)\
    \ {\n        for (int i = 0; i < n; i++) {\n            if (s[i] == s[i + 10])\
    \ {\n                flag = true;\n            }\n        }\n    }\n    if (flag)\
    \ {\n        for (int i = 0; i < n; i++) {\n            if (s[i] == s[i + 11])\
    \ {\n                flag = true;\n            }\n        }\n    }\n    if (flag)\
    \ {\n        for (int i = 0; i < n; i++) {\n            if (s[i] == s[i + 12])\
    \ {\n                flag = true;\n            }\n        }\n    }\n    if (flag)\
    \ {\n        for (int i = 0; i < n; i++) {\n            if (s[i] == s[i + 13])\
    \ {\n                flag = true;\n            }\n        }\n    }\n    if (flag)\
    \ {\n        for (int i = 0; i < n; i++) {\n            if (s[i] == s[i + 14])\
    \ {\n                flag = true;\n            }\n        }\n    }\n    if (flag)\
    \ {\n        for (int i = 0; i < n; i++) {\n            if (s[i] == s[i + 15])\
    \ {\n                flag = true;\n            }\n        }\n    }\n    if (flag)\
    \ {\n        for (int i = 0; i < n; i++) {\n            if (s[i] == s[i + 16])\
    \ {\n                flag = true;\n            }\n        }\n    }\n    if (flag)\
    \ {\n        for (int i = 0; i < n; i++) {\n            if (s[i] == s[i + 17])\
    \ {\n                flag = true;\n            }\n        }\n    }\n    if (flag)\
    \ {\n        for (int i = 0; i < n; i++) {\n            if (s[i] == s[i + 18])\
    \ {\n                flag = true;\n            }\n        }\n    }\n    if (flag)\
    \ {\n        for (int \n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpz4pwdeqa.cpp: In function \u2018bool is_happy(std::string)\u2019\
    :\n/tmp/tmpz4pwdeqa.cpp:142:1: error: expected unqualified-id before \u2018}\u2019\
    \ token\n  142 | }\n      | ^\n/tmp/tmpz4pwdeqa.cpp:141:17: error: expected \u2018\
    ;\u2019 before \u2018}\u2019 token\n  141 |         for (int\n      |        \
    \         ^\n      |                 ;\n  142 | }\n      | ~                \n\
    /tmp/tmpz4pwdeqa.cpp:142:1: error: expected primary-expression before \u2018}\u2019\
    \ token\n  142 | }\n      | ^\n/tmp/tmpz4pwdeqa.cpp:141:17: error: expected \u2018\
    ;\u2019 before \u2018}\u2019 token\n  141 |         for (int\n      |        \
    \         ^\n      |                 ;\n  142 | }\n      | ~                \n\
    /tmp/tmpz4pwdeqa.cpp:142:1: error: expected primary-expression before \u2018}\u2019\
    \ token\n  142 | }\n      | ^\n/tmp/tmpz4pwdeqa.cpp:141:17: error: expected \u2018\
    )\u2019 before \u2018}\u2019 token\n  141 |         for (int\n      |        \
    \     ~   ^\n      |                 )\n  142 | }\n      | ~                \n\
    /tmp/tmpz4pwdeqa.cpp:142:1: error: expected primary-expression before \u2018}\u2019\
    \ token\n  142 | }\n      | ^\n/tmp/tmpz4pwdeqa.cpp:143:12: error: a function-definition\
    \ is not allowed here before \u2018{\u2019 token\n  143 | int main() {\n     \
    \ |            ^\n/tmp/tmpz4pwdeqa.cpp:153:1: error: expected \u2018}\u2019 at\
    \ end of input\n  153 | }\n      | ^\n/tmp/tmpz4pwdeqa.cpp:13:30: note: to match\
    \ this \u2018{\u2019\n   13 | bool is_happy(std::string s) {\n      |        \
    \                      ^\n/tmp/tmpz4pwdeqa.cpp:153:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n  153 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.length();\n    if(n<3)\n\
    \        return false;\n    for(int i=0;i<n;i+=3)\n    {\n        for(int j=i;j<i+3;j++)\n\
    \        {\n            if(s.at(j)==s.at(j+1))\n            {\n              \
    \  if(s.at(j)==s.at(j+2))\n                {\n                    return false;\n\
    \                }\n            }\n        }\n    }\n    return true;\n}\nint\
    \ main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n\
    \    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\"))\
    \ == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "terminate called after throwing an instance of 'std::out_of_range'\n  what():\
    \  basic_string::at: __n (which is 4) >= this->size() (which is 4)\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    if (n <\
    \ 3) return true;\n    for (int i = 0; i < n - 3; i++) {\n        if (s[i] !=\
    \ s[i + 1] && s[i] != s[i + 2] && s[i] != s[i + 3]) return true;\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpmhvj5v8n: /tmp/tmpmhvj5v8n.cpp:23: int main(): Assertion `candidate((\"\
    a\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    bool flag\
    \ = true;\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j <\
    \ n; j++) {\n            if (s[i] == s[j]) {\n                flag = false;\n\
    \                break;\n            }\n        }\n    }\n    return flag;\n}\n\
    int main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) ==\
    \ (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp6dry31v9: /tmp/tmp6dry31v9.cpp:28: int main(): Assertion `candidate((\"\
    a\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    for(int\
    \ i=0;i<n;i++)\n    {\n        for(int j=i+1;j<n;j++)\n        {\n           \
    \ for(int k=j+1;k<n;k++)\n            {\n                if(s[i]==s[j] && s[i]==s[k])\n\
    \                {\n                    return false;\n                }\n   \
    \         }\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"\
    aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp3tsf8q5w: /tmp/tmp3tsf8q5w.cpp:32: int main(): Assertion `candidate((\"\
    a\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.length();\n    if(n<3)\n\
    \        return false;\n    for(int i=0;i<n;i+=3)\n    {\n        for(int j=i+1;j<n;j++)\n\
    \        {\n            for(int k=j+1;k<n;k++)\n            {\n              \
    \  if(s[i]==s[j] && s[i]==s[k])\n                    return false;\n         \
    \   }\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"\
    aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp0dq812tx: /tmp/tmp0dq812tx.cpp:35: int main(): Assertion `candidate((\"\
    aabb\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    int count\
    \ = 0;\n    for (int i = 0; i < n; i++) {\n        if (s[i] == s[i + 1] && s[i]\
    \ == s[i + 2]) {\n            count++;\n        }\n    }\n    return count >=\
    \ 3 && count == n;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpsxsqm5ff: /tmp/tmpsxsqm5ff.cpp:27: int main(): Assertion `candidate((\"\
    abcd\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    bool flag\
    \ = false;\n    for (int i = 0; i < n; i++) {\n        if (s[i] == s[i + 1] &&\
    \ s[i] == s[i + 2]) {\n            flag = true;\n        }\n    }\n    return\
    \ flag;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmppuiv3xs5: /tmp/tmppuiv3xs5.cpp:27: int main(): Assertion `candidate((\"\
    abcd\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    bool flag = false;\n    int n\
    \ = s.size();\n    if (n >= 3) {\n        for (int i = 0; i < n; i++) {\n    \
    \        int j = i + 1;\n            int k = i + 2;\n            if (j > n ||\
    \ k >= n || s[j] != s[k]) {\n                flag = false;\n                break;\n\
    \            }\n        }\n    }\n    return flag;\n}\nint main() {\n    auto\
    \ candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"\
    aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp9g9ekytd: /tmp/tmp9g9ekytd.cpp:32: int main(): Assertion `candidate((\"\
    abcd\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    bool flag = true;\n    int n =\
    \ s.size();\n    for (int i = 0; i < n; i++) {\n        if (s.at(i) != s.at(i\
    \ + 1) && s.at(i) != s.at(i + 2)) {\n            flag = false;\n            break;\n\
    \        }\n    }\n    return flag;\n}\nint main() {\n    auto candidate = is_happy;\n\
    \    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) ==\
    \ (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: "terminate called after throwing an instance of 'std::out_of_range'\n  what():\
    \  basic_string::at: __n (which is 1) >= this->size() (which is 1)\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    bool flag\
    \ = false;\n    for (int i = 0; i < n; i++) {\n        if (s.at(i) == s.at(i +\
    \ 1)) {\n            if (s.at(i) == s.at(i + 2)) {\n                flag = true;\n\
    \            }\n        }\n    }\n    return flag;\n}\nint main() {\n    auto\
    \ candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"\
    aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: "terminate called after throwing an instance of 'std::out_of_range'\n  what():\
    \  basic_string::at: __n (which is 1) >= this->size() (which is 1)\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    if (n <\
    \ 3) return true;\n    for (int i = 0; i < n - 3; i++) {\n        if (s[i] ==\
    \ s[i + 1] && s[i] == s[i + 2] && s[i] == s[i + 3]) return true;\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp9se_2hed: /tmp/tmp9se_2hed.cpp:23: int main(): Assertion `candidate((\"\
    a\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    bool flag\
    \ = true;\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j <\
    \ n; j++) {\n            if (s[i] != s[j]) {\n                flag = false;\n\
    \                break;\n            }\n        }\n    }\n    return flag;\n}\n\
    int main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) ==\
    \ (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpqefzox_2: /tmp/tmpqefzox_2.cpp:28: int main(): Assertion `candidate((\"\
    a\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    if (n <\
    \ 3) return false;\n    for (int i = 0; i < n; i++) {\n        if (s.at(i) ==\
    \ s.at(i + 1)) return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"\
    aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: "terminate called after throwing an instance of 'std::out_of_range'\n  what():\
    \  basic_string::at: __n (which is 4) >= this->size() (which is 4)\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    if (n <\
    \ 3) {\n        return false;\n    }\n    unordered_set<char> seen;\n    for (int\
    \ i = 0; i < n; i++) {\n        char ch = s[i];\n        if (seen.find(ch) !=\
    \ seen.end()) {\n            return false;\n        }\n        seen.insert(ch);\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_happy;\n  \
    \  assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n\
    \    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"aabb\"\
    )) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_6p5_iom.cpp: In function \u2018bool is_happy(std::string)\u2019\
    :\n/tmp/tmp_6p5_iom.cpp:18:5: error: \u2018unordered_set\u2019 was not declared\
    \ in this scope; did you mean \u2018std::unordered_set\u2019?\n   18 |     unordered_set<char>\
    \ seen;\n      |     ^~~~~~~~~~~~~\n      |     std::unordered_set\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/unordered_set:47,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:118,\n\
    \                 from /tmp/tmp_6p5_iom.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/unordered_set.h:97:11:\
    \ note: \u2018std::unordered_set\u2019 declared here\n   97 |     class unordered_set\n\
    \      |           ^~~~~~~~~~~~~\n/tmp/tmp_6p5_iom.cpp:18:19: error: expected\
    \ primary-expression before \u2018char\u2019\n   18 |     unordered_set<char>\
    \ seen;\n      |                   ^~~~\n/tmp/tmp_6p5_iom.cpp:21:13: error: \u2018\
    seen\u2019 was not declared in this scope\n   21 |         if (seen.find(ch) !=\
    \ seen.end()) {\n      |             ^~~~\n/tmp/tmp_6p5_iom.cpp:24:9: error: \u2018\
    seen\u2019 was not declared in this scope\n   24 |         seen.insert(ch);\n\
    \      |         ^~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    for(int i=0;i<s.size();i++){\n\
    \        for(int j=i+1;j<s.size();j++){\n            for(int k=j+1;k<s.size();k++){\n\
    \                if(s[i]==s[j] && s[i]==s[k]){\n                    return false;\n\
    \                }\n            }\n        }\n    }\n    return true;\n}\nint\
    \ main() {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n\
    \    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\"))\
    \ == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpbu_q7icp: /tmp/tmpbu_q7icp.cpp:27: int main(): Assertion `candidate((\"\
    a\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    bool flag = true;\n    int len\
    \ = s.length();\n    if (len < 3)\n        return false;\n    for (int i = 0;\
    \ i < len - 1; i++) {\n        if (s[i] == s[i + 1]) {\n            flag = false;\n\
    \            break;\n        }\n    }\n    return flag;\n}\nint main() {\n   \
    \ auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n   \
    \ assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) ==\
    \ (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpka9_5698: /tmp/tmpka9_5698.cpp:35: int main(): Assertion `candidate((\"\
    iopaxioi\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    if (n <\
    \ 3) return false;\n    \n    for (int i = 0; i < n; i++) {\n        if (s.at(i)\
    \ != s.at(i + 1)) return false;\n    }\n    \n    return true;\n}\nint main()\
    \ {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n\
    \    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\"))\
    \ == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpflfzrqha: /tmp/tmpflfzrqha.cpp:27: int main(): Assertion `candidate((\"\
    abcd\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    int count\
    \ = 0;\n    for (int i = 0; i < n; i++) {\n        if (s[i] == s[i + 1]) {\n \
    \           count++;\n        }\n    }\n    if (count >= 3) {\n        for (int\
    \ i = 0; i < n - 3; i++) {\n            if (s[i] == s[i + 1] && s[i] == s[i +\
    \ 2] && s[i] == s[i + 3]) {\n                return false;\n            }\n  \
    \      }\n        return true;\n    }\n    return false;\n}\nint main() {\n  \
    \  auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n  \
    \  assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\")) ==\
    \ (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp6t6smlc8: /tmp/tmp6t6smlc8.cpp:35: int main(): Assertion `candidate((\"\
    abcd\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    if (n <\
    \ 3) return false;\n    for (int i = 0; i < n; i++) {\n        if (s[i] == s[i\
    \ + 1] && s[i] == s[i + 2]) return false;\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n\
    \    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\"))\
    \ == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpq923sh7w: /tmp/tmpq923sh7w.cpp:26: int main(): Assertion `candidate((\"\
    aabb\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.length();\n    bool\
    \ flag = false;\n    for (int i = 0; i < n; i++) {\n        if (s[i] == s[i +\
    \ 1] && s[i] == s[i + 2] && s[i] == s[i + 3]) {\n            flag = true;\n  \
    \      }\n    }\n    return flag;\n}\nint main() {\n    auto candidate = is_happy;\n\
    \    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) ==\
    \ (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpl3pk85ff: /tmp/tmpl3pk85ff.cpp:27: int main(): Assertion `candidate((\"\
    abcd\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    if (n <\
    \ 3) return false;\n    for (int i = 0; i < n; i++) {\n        for (int j = i\
    \ + 1; j < n; j++) {\n            if (s[i] != s[j]) break;\n        }\n      \
    \  if (j - i + 1 != 3) return false;\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n\
    \    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\"))\
    \ == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmp__41pnii.cpp: In function \u2018bool is_happy(std::string)\u2019\
    :\n/tmp/tmp__41pnii.cpp:20:13: error: \u2018j\u2019 was not declared in this scope\n\
    \   20 |         if (j - i + 1 != 3) return false;\n      |             ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    bool flag = false;\n    int n\
    \ = s.size();\n    if (n < 3) {\n        flag = false;\n    }\n    else {\n  \
    \      flag = true;\n        for (int i = 0; i < n - 3; i++) {\n            if\
    \ (s.at(i) == s.at(i + 1) && s.at(i) == s.at(i + 2)) {\n                flag =\
    \ false;\n            }\n        }\n    }\n    return flag;\n}\nint main() {\n\
    \    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n\
    \    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\"))\
    \ == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp1p0a82v5: /tmp/tmp1p0a82v5.cpp:34: int main(): Assertion `candidate((\"\
    aabb\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    bool flag = true;\n    int n =\
    \ s.size();\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j\
    \ < n; j++) {\n            for (int k = j + 1; k < n; k++) {\n               \
    \ if (s[i] == s[j] && s[i] == s[k]) {\n                    flag = false;\n   \
    \                 break;\n                }\n            }\n        }\n    }\n\
    \    return flag;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpx2i58rwo: /tmp/tmpx2i58rwo.cpp:30: int main(): Assertion `candidate((\"\
    a\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    if (n <\
    \ 3) return false;\n    int count = 0;\n    for (int i = 0; i < n; i++) {\n  \
    \      if (s[i] == s[i + 1]) {\n            count++;\n        }\n    }\n    return\
    \ count >= 3;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpyyfsyqp1: /tmp/tmpyyfsyqp1.cpp:28: int main(): Assertion `candidate((\"\
    abcd\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    if (n <\
    \ 3) return true;\n    for (int i = 0; i < n - 3; i++) {\n        if (s[i] ==\
    \ s[i + 1] && s[i] == s[i + 2] && s[i] == s[i + 3]) return true;\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp6hodyhx3: /tmp/tmp6hodyhx3.cpp:23: int main(): Assertion `candidate((\"\
    a\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    bool flag = false;\n    int n\
    \ = s.size();\n    if (n < 3) {\n        flag = false;\n    }\n    else {\n  \
    \      for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++)\
    \ {\n                if (s[i] == s[j]) {\n                    flag = false;\n\
    \                    break;\n                }\n                else {\n     \
    \               flag = true;\n                }\n            }\n        }\n  \
    \  }\n    return flag;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpaywmj7bg: /tmp/tmpaywmj7bg.cpp:43: int main(): Assertion `candidate((\"\
    iopaxioi\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    bool flag\
    \ = false;\n    for (int i = 0; i < n; i++) {\n        if (s[i] == s[i + 1] &&\
    \ s[i] == s[i + 2]) {\n            flag = true;\n        }\n    }\n    return\
    \ flag;\n}\nint main() {\n    auto candidate = is_happy;\n    assert(candidate((\"\
    a\")) == (false));\n    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"\
    abcd\")) == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpn7a0k5fh: /tmp/tmpn7a0k5fh.cpp:27: int main(): Assertion `candidate((\"\
    abcd\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.size();\n    for(int\
    \ i = 0; i < n; i++) {\n        for(int j = i + 1; j < n; j++) {\n           \
    \ for(int k = j + 1; k < n; k++) {\n                if(s[i] == s[j] && s[i] ==\
    \ s[k] && s[i] != s[k]) {\n                    return false;\n               \
    \ }\n            }\n        }\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"\
    aa\")) == (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpy8gdx0qm: /tmp/tmpy8gdx0qm.cpp:28: int main(): Assertion `candidate((\"\
    a\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    int n = s.length();\n    if (n\
    \ < 3)\n        return false;\n    int count = 0;\n    for (int i = 0; i < n;\
    \ i++) {\n        if (s[i] == s[i + 1] && s[i] == s[i + 2])\n            count++;\n\
    \    }\n    return count >= 3;\n}\nint main() {\n    auto candidate = is_happy;\n\
    \    assert(candidate((\"a\")) == (false));\n    assert(candidate((\"aa\")) ==\
    \ (false));\n    assert(candidate((\"abcd\")) == (true));\n    assert(candidate((\"\
    aabb\")) == (false));\n    assert(candidate((\"adb\")) == (true));\n    assert(candidate((\"\
    xyy\")) == (false));\n    assert(candidate((\"iopaxpoi\")) == (true));\n    assert(candidate((\"\
    iopaxioi\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpx_70cvbi: /tmp/tmpx_70cvbi.cpp:28: int main(): Assertion `candidate((\"\
    abcd\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// Your task is to check if the string is happy or not.\n// A string is\
    \ happy if its length is at least 3 and every 3 consecutive letters are distinct\n\
    // For example:\n// is_happy(a) => False\n// is_happy(aa) => False\n// is_happy(abcd)\
    \ => True\n// is_happy(aabb) => False\n// is_happy(adb) => True\n// is_happy(xyy)\
    \ => False\nbool is_happy(std::string s) {\n    bool flag = true;\n    int len\
    \ = s.size();\n    if (len < 3)\n        flag = false;\n    else {\n        for\
    \ (int i = 0; i < len - 1; i++) {\n            if (s.at(i) == s.at(i + 1))\n \
    \               flag = false;\n        }\n    }\n    return flag;\n}\nint main()\
    \ {\n    auto candidate = is_happy;\n    assert(candidate((\"a\")) == (false));\n\
    \    assert(candidate((\"aa\")) == (false));\n    assert(candidate((\"abcd\"))\
    \ == (true));\n    assert(candidate((\"aabb\")) == (false));\n    assert(candidate((\"\
    adb\")) == (true));\n    assert(candidate((\"xyy\")) == (false));\n    assert(candidate((\"\
    iopaxpoi\")) == (true));\n    assert(candidate((\"iopaxioi\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpm76blszj: /tmp/tmpm76blszj.cpp:35: int main(): Assertion `candidate((\"\
    iopaxioi\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
